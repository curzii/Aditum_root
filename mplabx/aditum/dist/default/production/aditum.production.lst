

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Oct 14 07:27:51 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	idataBANK0,global,class=CODE,delta=1
     8                           	psect	idataBANK1,global,class=CODE,delta=1
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           	psect	eeprom_data
    45  F00000  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    46                           
    47                           	psect	idataCOMRAM
    48  001A9A                     __pidataCOMRAM:
    49                           	opt stack 0
    50                           
    51                           ;initializer for main@F3679
    52  001A9A  30                 	db	48
    53  001A9B  31                 	db	49
    54  001A9C  32                 	db	50
    55  001A9D  33                 	db	51
    56  001A9E  34                 	db	52
    57  001A9F  35                 	db	53
    58  001AA0  36                 	db	54
    59  001AA1  37                 	db	55
    60  001AA2  38                 	db	56
    61  001AA3  39                 	db	57
    62                           
    63                           ;initializer for menu_seconds_to_mmss@F3627
    64  001AA4  30                 	db	48
    65  001AA5  31                 	db	49
    66  001AA6  32                 	db	50
    67  001AA7  33                 	db	51
    68  001AA8  34                 	db	52
    69  001AA9  35                 	db	53
    70  001AAA  36                 	db	54
    71  001AAB  37                 	db	55
    72  001AAC  38                 	db	56
    73  001AAD  39                 	db	57
    74                           
    75                           ;initializer for menu_main@F3618
    76  001AAE  30                 	db	48
    77  001AAF  30                 	db	48
    78  001AB0  3A                 	db	58
    79  001AB1  30                 	db	48
    80  001AB2  30                 	db	48
    81                           
    82                           	psect	idataBANK0
    83  0019D6                     __pidataBANK0:
    84                           	opt stack 0
    85                           
    86                           ;initializer for _i2c_r_reg
    87  0019D6  2D                 	db	45
    88  0019D7  2D                 	db	45
    89  0019D8  2D                 	db	45
    90  0019D9  2D                 	db	45
    91  0019DA  2D                 	db	45
    92  0019DB  2D                 	db	45
    93  0019DC  2D                 	db	45
    94  0019DD  2D                 	db	45
    95  0019DE  2D                 	db	45
    96  0019DF  2D                 	db	45
    97  0019E0  2D                 	db	45
    98  0019E1  2D                 	db	45
    99  0019E2  2D                 	db	45
   100  0019E3  2D                 	db	45
   101  0019E4  2D                 	db	45
   102  0019E5  2D                 	db	45
   103  0019E6  2D                 	db	45
   104  0019E7  2D                 	db	45
   105  0019E8  2D                 	db	45
   106  0019E9  2D                 	db	45
   107  0019EA  2D                 	db	45
   108  0019EB  2D                 	db	45
   109  0019EC  2D                 	db	45
   110  0019ED  2D                 	db	45
   111  0019EE  2D                 	db	45
   112  0019EF  2D                 	db	45
   113  0019F0  2D                 	db	45
   114  0019F1  2D                 	db	45
   115  0019F2  2D                 	db	45
   116  0019F3  2D                 	db	45
   117  0019F4  2D                 	db	45
   118  0019F5  2D                 	db	45
   119                           
   120                           ;initializer for _c
   121  0019F6  30                 	db	48
   122  0019F7  31                 	db	49
   123  0019F8  32                 	db	50
   124  0019F9  33                 	db	51
   125  0019FA  34                 	db	52
   126  0019FB  35                 	db	53
   127  0019FC  36                 	db	54
   128  0019FD  37                 	db	55
   129  0019FE  38                 	db	56
   130  0019FF  39                 	db	57
   131                           
   132                           ;initializer for start_routine@F3723
   133  001A00  30                 	db	48
   134  001A01  30                 	db	48
   135  001A02  30                 	db	48
   136                           
   137                           ;initializer for main@F3695
   138  001A03  20                 	db	32
   139                           
   140                           	psect	idataBANK1
   141  0019A6                     __pidataBANK1:
   142                           	opt stack 0
   143                           
   144                           ;initializer for _i2c_w_reg
   145  0019A6  2D                 	db	45
   146  0019A7  2D                 	db	45
   147  0019A8  2D                 	db	45
   148  0019A9  2D                 	db	45
   149  0019AA  2D                 	db	45
   150  0019AB  2D                 	db	45
   151  0019AC  2D                 	db	45
   152  0019AD  2D                 	db	45
   153  0019AE  2D                 	db	45
   154  0019AF  2D                 	db	45
   155  0019B0  2D                 	db	45
   156  0019B1  2D                 	db	45
   157  0019B2  2D                 	db	45
   158  0019B3  2D                 	db	45
   159  0019B4  2D                 	db	45
   160  0019B5  2D                 	db	45
   161  0019B6  2D                 	db	45
   162  0019B7  2D                 	db	45
   163  0019B8  2D                 	db	45
   164  0019B9  2D                 	db	45
   165  0019BA  2D                 	db	45
   166  0019BB  2D                 	db	45
   167  0019BC  2D                 	db	45
   168  0019BD  2D                 	db	45
   169  0019BE  2D                 	db	45
   170  0019BF  2D                 	db	45
   171  0019C0  2D                 	db	45
   172  0019C1  2D                 	db	45
   173  0019C2  2D                 	db	45
   174  0019C3  2D                 	db	45
   175  0019C4  2D                 	db	45
   176  0019C5  2D                 	db	45
   177                           
   178                           ;initializer for _hx
   179  0019C6  30                 	db	48
   180  0019C7  31                 	db	49
   181  0019C8  32                 	db	50
   182  0019C9  33                 	db	51
   183  0019CA  34                 	db	52
   184  0019CB  35                 	db	53
   185  0019CC  36                 	db	54
   186  0019CD  37                 	db	55
   187  0019CE  38                 	db	56
   188  0019CF  39                 	db	57
   189  0019D0  41                 	db	65
   190  0019D1  42                 	db	66
   191  0019D2  43                 	db	67
   192  0019D3  44                 	db	68
   193  0019D4  45                 	db	69
   194  0019D5  46                 	db	70
   195                           
   196                           	psect	nvBANK0
   197  0000CE                     __pnvBANK0:
   198                           	opt stack 0
   199  0000CE                     _I2C_ADDR:
   200                           	opt stack 0
   201  0000CE                     	ds	1
   202  0000CF                     _Machine_ID:
   203                           	opt stack 0
   204  0000CF                     	ds	1
   205  0000                     _EEADR	set	4009
   206  0000                     _EECON1bits	set	4006
   207  0000                     _EECON2	set	4007
   208  0000                     _EEDATA	set	4008
   209  0000                     _INTCONbits	set	4082
   210  0000                     _LATC	set	3979
   211  0000                     _LATDbits	set	3980
   212  0000                     _OSCCON	set	4051
   213  0000                     _OSCTUNEbits	set	3995
   214  0000                     _PIE1bits	set	3997
   215  0000                     _PIR1bits	set	3998
   216  0000                     _PIR2bits	set	4001
   217  0000                     _PORTB	set	3969
   218  0000                     _PORTBbits	set	3969
   219  0000                     _PORTDbits	set	3971
   220  0000                     _SSPADD	set	4040
   221  0000                     _SSPBUF	set	4041
   222  0000                     _SSPCON1	set	4038
   223  0000                     _SSPCON1bits	set	4038
   224  0000                     _SSPCON2	set	4037
   225  0000                     _SSPSTAT	set	4039
   226  0000                     _SSPSTATbits	set	4039
   227  0000                     _TRISA	set	3986
   228  0000                     _TRISB	set	3987
   229  0000                     _TRISC	set	3988
   230  0000                     _TRISD	set	3989
   231                           
   232                           	psect	mediumconst
   233  007EC0                     __pmediumconst:
   234                           	opt stack 0
   235  007EC0  00                 	db	0
   236  007EC1                     STR_2:
   237  007EC1  20                 	db	32
   238  007EC2  20                 	db	32
   239  007EC3  20                 	db	32
   240  007EC4  20                 	db	32
   241  007EC5  20                 	db	32
   242  007EC6  20                 	db	32
   243  007EC7  20                 	db	32
   244  007EC8  20                 	db	32
   245  007EC9  20                 	db	32
   246  007ECA  20                 	db	32
   247  007ECB  20                 	db	32
   248  007ECC  20                 	db	32
   249  007ECD  20                 	db	32
   250  007ECE  20                 	db	32
   251  007ECF  20                 	db	32
   252  007ED0  20                 	db	32
   253  007ED1  00                 	db	0
   254  007ED2                     STR_4:
   255  007ED2  5B                 	db	91	;'['
   256  007ED3  20                 	db	32
   257  007ED4  5D                 	db	93	;']'
   258  007ED5  20                 	db	32
   259  007ED6  20                 	db	32
   260  007ED7  20                 	db	32
   261  007ED8  20                 	db	32
   262  007ED9  20                 	db	32
   263  007EDA  20                 	db	32
   264  007EDB  20                 	db	32
   265  007EDC  20                 	db	32
   266  007EDD  20                 	db	32
   267  007EDE  20                 	db	32
   268  007EDF  20                 	db	32
   269  007EE0  20                 	db	32
   270  007EE1  20                 	db	32
   271  007EE2  00                 	db	0
   272  007EE3                     STR_14:
   273  007EE3  20                 	db	32
   274  007EE4  20                 	db	32
   275  007EE5  20                 	db	32
   276  007EE6  5B                 	db	91	;'['
   277  007EE7  20                 	db	32
   278  007EE8  41                 	db	65	;'A'
   279  007EE9  64                 	db	100	;'d'
   280  007EEA  69                 	db	105	;'i'
   281  007EEB  74                 	db	116	;'t'
   282  007EEC  75                 	db	117	;'u'
   283  007EED  6D                 	db	109	;'m'
   284  007EEE  20                 	db	32
   285  007EEF  5D                 	db	93	;']'
   286  007EF0  20                 	db	32
   287  007EF1  20                 	db	32
   288  007EF2  20                 	db	32
   289  007EF3  00                 	db	0
   290  007EF4                     STR_10:
   291  007EF4  20                 	db	32
   292  007EF5  20                 	db	32
   293  007EF6  20                 	db	32
   294  007EF7  20                 	db	32
   295  007EF8  5B                 	db	91	;'['
   296  007EF9  20                 	db	32
   297  007EFA  52                 	db	82	;'R'
   298  007EFB  65                 	db	101	;'e'
   299  007EFC  74                 	db	116	;'t'
   300  007EFD  72                 	db	114	;'r'
   301  007EFE  79                 	db	121	;'y'
   302  007EFF  20                 	db	32
   303  007F00  5D                 	db	93	;']'
   304  007F01  20                 	db	32
   305  007F02  20                 	db	32
   306  007F03  20                 	db	32
   307  007F04  00                 	db	0
   308  007F05                     STR_8:
   309  007F05  20                 	db	32
   310  007F06  20                 	db	32
   311  007F07  20                 	db	32
   312  007F08  20                 	db	32
   313  007F09  5B                 	db	91	;'['
   314  007F0A  57                 	db	87	;'W'
   315  007F0B  65                 	db	101	;'e'
   316  007F0C  6C                 	db	108	;'l'
   317  007F0D  63                 	db	99	;'c'
   318  007F0E  6F                 	db	111	;'o'
   319  007F0F  6D                 	db	109	;'m'
   320  007F10  65                 	db	101	;'e'
   321  007F11  5D                 	db	93	;']'
   322  007F12  20                 	db	32
   323  007F13  20                 	db	32
   324  007F14  20                 	db	32
   325  007F15  00                 	db	0
   326  007F16                     STR_27:
   327  007F16  4F                 	db	79	;'O'
   328  007F17  75                 	db	117	;'u'
   329  007F18  74                 	db	116	;'t'
   330  007F19  20                 	db	32
   331  007F1A  6F                 	db	111	;'o'
   332  007F1B  66                 	db	102	;'f'
   333  007F1C  20                 	db	32
   334  007F1D  62                 	db	98	;'b'
   335  007F1E  6F                 	db	111	;'o'
   336  007F1F  75                 	db	117	;'u'
   337  007F20  6E                 	db	110	;'n'
   338  007F21  64                 	db	100	;'d'
   339  007F22  73                 	db	115	;'s'
   340  007F23  21                 	db	33
   341  007F24  20                 	db	32
   342  007F25  20                 	db	32
   343  007F26  00                 	db	0
   344  007F27                     STR_3:
   345  007F27  45                 	db	69	;'E'
   346  007F28  6E                 	db	110	;'n'
   347  007F29  74                 	db	116	;'t'
   348  007F2A  65                 	db	101	;'e'
   349  007F2B  72                 	db	114	;'r'
   350  007F2C  20                 	db	32
   351  007F2D  79                 	db	121	;'y'
   352  007F2E  6F                 	db	111	;'o'
   353  007F2F  75                 	db	117	;'u'
   354  007F30  72                 	db	114	;'r'
   355  007F31  20                 	db	32
   356  007F32  49                 	db	73	;'I'
   357  007F33  44                 	db	68	;'D'
   358  007F34  3A                 	db	58	;':'
   359  007F35  20                 	db	32
   360  007F36  20                 	db	32
   361  007F37  00                 	db	0
   362  007F38                     STR_18:
   363  007F38  20                 	db	32
   364  007F39  20                 	db	32
   365  007F3A  5B                 	db	91	;'['
   366  007F3B  20                 	db	32
   367  007F3C  20                 	db	32
   368  007F3D  41                 	db	65	;'A'
   369  007F3E  64                 	db	100	;'d'
   370  007F3F  69                 	db	105	;'i'
   371  007F40  74                 	db	116	;'t'
   372  007F41  75                 	db	117	;'u'
   373  007F42  6D                 	db	109	;'m'
   374  007F43  20                 	db	32
   375  007F44  20                 	db	32
   376  007F45  5D                 	db	93	;']'
   377  007F46  20                 	db	32
   378  007F47  20                 	db	32
   379  007F48  00                 	db	0
   380  007F49                     STR_20:
   381  007F49  4E                 	db	78	;'N'
   382  007F4A  65                 	db	101	;'e'
   383  007F4B  77                 	db	119	;'w'
   384  007F4C  20                 	db	32
   385  007F4D  4D                 	db	77	;'M'
   386  007F4E  61                 	db	97	;'a'
   387  007F4F  63                 	db	99	;'c'
   388  007F50  68                 	db	104	;'h'
   389  007F51  69                 	db	105	;'i'
   390  007F52  6E                 	db	110	;'n'
   391  007F53  65                 	db	101	;'e'
   392  007F54  20                 	db	32
   393  007F55  49                 	db	73	;'I'
   394  007F56  44                 	db	68	;'D'
   395  007F57  3A                 	db	58	;':'
   396  007F58  20                 	db	32
   397  007F59  00                 	db	0
   398  007F5A                     STR_5:
   399  007F5A  45                 	db	69	;'E'
   400  007F5B  6E                 	db	110	;'n'
   401  007F5C  74                 	db	116	;'t'
   402  007F5D  65                 	db	101	;'e'
   403  007F5E  72                 	db	114	;'r'
   404  007F5F  20                 	db	32
   405  007F60  79                 	db	121	;'y'
   406  007F61  6F                 	db	111	;'o'
   407  007F62  75                 	db	117	;'u'
   408  007F63  72                 	db	114	;'r'
   409  007F64  20                 	db	32
   410  007F65  50                 	db	80	;'P'
   411  007F66  49                 	db	73	;'I'
   412  007F67  4E                 	db	78	;'N'
   413  007F68  3A                 	db	58	;':'
   414  007F69  20                 	db	32
   415  007F6A  00                 	db	0
   416  007F6B                     STR_26:
   417  007F6B  4D                 	db	77	;'M'
   418  007F6C  61                 	db	97	;'a'
   419  007F6D  79                 	db	121	;'y'
   420  007F6E  20                 	db	32
   421  007F6F  6E                 	db	110	;'n'
   422  007F70  6F                 	db	111	;'o'
   423  007F71  74                 	db	116	;'t'
   424  007F72  20                 	db	32
   425  007F73  62                 	db	98	;'b'
   426  007F74  65                 	db	101	;'e'
   427  007F75  20                 	db	32
   428  007F76  7A                 	db	122	;'z'
   429  007F77  65                 	db	101	;'e'
   430  007F78  72                 	db	114	;'r'
   431  007F79  6F                 	db	111	;'o'
   432  007F7A  21                 	db	33
   433  007F7B  00                 	db	0
   434  007F7C                     STR_19:
   435  007F7C  4C                 	db	76	;'L'
   436  007F7D  6F                 	db	111	;'o'
   437  007F7E  61                 	db	97	;'a'
   438  007F7F  64                 	db	100	;'d'
   439  007F80  20                 	db	32
   440  007F81  49                 	db	73	;'I'
   441  007F82  32                 	db	50	;'2'
   442  007F83  43                 	db	67	;'C'
   443  007F84  20                 	db	32
   444  007F85  73                 	db	115	;'s'
   445  007F86  65                 	db	101	;'e'
   446  007F87  74                 	db	116	;'t'
   447  007F88  75                 	db	117	;'u'
   448  007F89  70                 	db	112	;'p'
   449  007F8A  2E                 	db	46
   450  007F8B  2E                 	db	46
   451  007F8C  00                 	db	0
   452  007F8D                     STR_25:
   453  007F8D  49                 	db	73	;'I'
   454  007F8E  32                 	db	50	;'2'
   455  007F8F  43                 	db	67	;'C'
   456  007F90  5F                 	db	95	;'_'
   457  007F91  41                 	db	65	;'A'
   458  007F92  44                 	db	68	;'D'
   459  007F93  44                 	db	68	;'D'
   460  007F94  52                 	db	82	;'R'
   461  007F95  3E                 	db	62	;'>'
   462  007F96  3E                 	db	62	;'>'
   463  007F97  45                 	db	69	;'E'
   464  007F98  45                 	db	69	;'E'
   465  007F99  50                 	db	80	;'P'
   466  007F9A  52                 	db	82	;'R'
   467  007F9B  4F                 	db	79	;'O'
   468  007F9C  4D                 	db	77	;'M'
   469  007F9D  00                 	db	0
   470  007F9E                     STR_11:
   471  007F9E  5B                 	db	91	;'['
   472  007F9F  20                 	db	32
   473  007FA0  53                 	db	83	;'S'
   474  007FA1  79                 	db	121	;'y'
   475  007FA2  73                 	db	115	;'s'
   476  007FA3  74                 	db	116	;'t'
   477  007FA4  65                 	db	101	;'e'
   478  007FA5  6D                 	db	109	;'m'
   479  007FA6  20                 	db	32
   480  007FA7  45                 	db	69	;'E'
   481  007FA8  72                 	db	114	;'r'
   482  007FA9  72                 	db	114	;'r'
   483  007FAA  6F                 	db	111	;'o'
   484  007FAB  72                 	db	114	;'r'
   485  007FAC  20                 	db	32
   486  007FAD  5D                 	db	93	;']'
   487  007FAE  00                 	db	0
   488  007FAF                     STR_21:
   489  007FAF  20                 	db	32
   490  007FB0  20                 	db	32
   491  007FB1  20                 	db	32
   492  007FB2  20                 	db	32
   493  007FB3  20                 	db	32
   494  007FB4  20                 	db	32
   495  007FB5  20                 	db	32
   496  007FB6  5B                 	db	91	;'['
   497  007FB7  30                 	db	48	;'0'
   498  007FB8  30                 	db	48	;'0'
   499  007FB9  31                 	db	49	;'1'
   500  007FBA  2D                 	db	45
   501  007FBB  31                 	db	49	;'1'
   502  007FBC  30                 	db	48	;'0'
   503  007FBD  30                 	db	48	;'0'
   504  007FBE  5D                 	db	93	;']'
   505  007FBF  00                 	db	0
   506  007FC0                     STR_9:
   507  007FC0  5B                 	db	91	;'['
   508  007FC1  41                 	db	65	;'A'
   509  007FC2  63                 	db	99	;'c'
   510  007FC3  63                 	db	99	;'c'
   511  007FC4  65                 	db	101	;'e'
   512  007FC5  73                 	db	115	;'s'
   513  007FC6  73                 	db	115	;'s'
   514  007FC7  20                 	db	32
   515  007FC8  20                 	db	32
   516  007FC9  44                 	db	68	;'D'
   517  007FCA  65                 	db	101	;'e'
   518  007FCB  6E                 	db	110	;'n'
   519  007FCC  69                 	db	105	;'i'
   520  007FCD  65                 	db	101	;'e'
   521  007FCE  64                 	db	100	;'d'
   522  007FCF  5D                 	db	93	;']'
   523  007FD0  00                 	db	0
   524  007FD1                     STR_7:
   525  007FD1  5B                 	db	91	;'['
   526  007FD2  41                 	db	65	;'A'
   527  007FD3  63                 	db	99	;'c'
   528  007FD4  63                 	db	99	;'c'
   529  007FD5  65                 	db	101	;'e'
   530  007FD6  73                 	db	115	;'s'
   531  007FD7  73                 	db	115	;'s'
   532  007FD8  20                 	db	32
   533  007FD9  47                 	db	71	;'G'
   534  007FDA  72                 	db	114	;'r'
   535  007FDB  61                 	db	97	;'a'
   536  007FDC  6E                 	db	110	;'n'
   537  007FDD  74                 	db	116	;'t'
   538  007FDE  65                 	db	101	;'e'
   539  007FDF  64                 	db	100	;'d'
   540  007FE0  5D                 	db	93	;']'
   541  007FE1  00                 	db	0
   542  007FE2                     STR_17:
   543  007FE2  44                 	db	68	;'D'
   544  007FE3  65                 	db	101	;'e'
   545  007FE4  76                 	db	118	;'v'
   546  007FE5  69                 	db	105	;'i'
   547  007FE6  63                 	db	99	;'c'
   548  007FE7  65                 	db	101	;'e'
   549  007FE8  20                 	db	32
   550  007FE9  49                 	db	73	;'I'
   551  007FEA  44                 	db	68	;'D'
   552  007FEB  20                 	db	32
   553  007FEC  00                 	db	0
   554  007FED                     STR_16:
   555  007FED  31                 	db	49	;'1'
   556  007FEE  2E                 	db	46
   557  007FEF  30                 	db	48	;'0'
   558  007FF0  2E                 	db	46
   559  007FF1  30                 	db	48	;'0'
   560  007FF2  00                 	db	0
   561  007FF3                     STR_15:
   562  007FF3  52                 	db	82	;'R'
   563  007FF4  65                 	db	101	;'e'
   564  007FF5  76                 	db	118	;'v'
   565  007FF6  20                 	db	32
   566  007FF7  00                 	db	0
   567  007FF8                     STR_23:
   568  007FF8  5B                 	db	91	;'['
   569  007FF9  4F                 	db	79	;'O'
   570  007FFA  4B                 	db	75	;'K'
   571  007FFB  5D                 	db	93	;']'
   572  007FFC  00                 	db	0
   573  007FFD                     STR_24:
   574  007FFD  78                 	db	120	;'x'
   575  007FFE  00                 	db	0
   576  0000                     
   577                           ; #config settings
   578  007FFF  00                 	db	0	; dummy byte at the end
   579  0000                     
   580                           	psect	cinit
   581  0016DA                     __pcinit:
   582                           	opt stack 0
   583  0016DA                     start_initialization:
   584                           	opt stack 0
   585  0016DA                     __initialization:
   586                           	opt stack 0
   587                           
   588                           ; Clear objects allocated to BANK0 (20 bytes)
   589  0016DA  EE00  F0BA         	lfsr	0,__pbssBANK0
   590  0016DE  0E14               	movlw	20
   591  0016E0                     clear_0:
   592  0016E0  6AEE               	clrf	postinc0,c
   593  0016E2  06E8               	decf	wreg,f,c
   594  0016E4  E1FD               	bnz	clear_0
   595                           
   596                           ; Clear objects allocated to COMRAM (2 bytes)
   597  0016E6  6A4F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   598  0016E8  6A4E               	clrf	__pbssCOMRAM& (0+255),c
   599                           
   600                           ; Initialize objects allocated to BANK1 (48 bytes)
   601                           ; load TBLPTR registers with __pidataBANK1
   602  0016EA  0EA6               	movlw	low __pidataBANK1
   603  0016EC  6EF6               	movwf	tblptrl,c
   604  0016EE  0E19               	movlw	high __pidataBANK1
   605  0016F0  6EF7               	movwf	tblptrh,c
   606  0016F2  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   607  0016F4  6EF8               	movwf	tblptru,c
   608  0016F6  EE01  F033         	lfsr	0,__pdataBANK1
   609  0016FA  EE10 F030          	lfsr	1,48
   610  0016FE                     copy_data0:
   611  0016FE  0009               	tblrd		*+
   612  001700  CFF5 FFEE          	movff	tablat,postinc0
   613  001704  50E5               	movf	postdec1,w,c
   614  001706  50E1               	movf	fsr1l,w,c
   615  001708  E1FA               	bnz	copy_data0
   616                           
   617                           ; Initialize objects allocated to BANK0 (46 bytes)
   618                           ; load TBLPTR registers with __pidataBANK0
   619  00170A  0ED6               	movlw	low __pidataBANK0
   620  00170C  6EF6               	movwf	tblptrl,c
   621  00170E  0E19               	movlw	high __pidataBANK0
   622  001710  6EF7               	movwf	tblptrh,c
   623  001712  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   624  001714  6EF8               	movwf	tblptru,c
   625  001716  EE00  F060         	lfsr	0,__pdataBANK0
   626  00171A  EE10 F02E          	lfsr	1,46
   627  00171E                     copy_data1:
   628  00171E  0009               	tblrd		*+
   629  001720  CFF5 FFEE          	movff	tablat,postinc0
   630  001724  50E5               	movf	postdec1,w,c
   631  001726  50E1               	movf	fsr1l,w,c
   632  001728  E1FA               	bnz	copy_data1
   633                           
   634                           ; Initialize objects allocated to COMRAM (25 bytes)
   635                           ; load TBLPTR registers with __pidataCOMRAM
   636  00172A  0E9A               	movlw	low __pidataCOMRAM
   637  00172C  6EF6               	movwf	tblptrl,c
   638  00172E  0E1A               	movlw	high __pidataCOMRAM
   639  001730  6EF7               	movwf	tblptrh,c
   640  001732  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   641  001734  6EF8               	movwf	tblptru,c
   642  001736  EE00  F035         	lfsr	0,__pdataCOMRAM
   643  00173A  EE10 F019          	lfsr	1,25
   644  00173E                     copy_data2:
   645  00173E  0009               	tblrd		*+
   646  001740  CFF5 FFEE          	movff	tablat,postinc0
   647  001744  50E5               	movf	postdec1,w,c
   648  001746  50E1               	movf	fsr1l,w,c
   649  001748  E1FA               	bnz	copy_data2
   650  00174A                     end_of_initialization:
   651                           	opt stack 0
   652  00174A                     __end_of__initialization:
   653                           	opt stack 0
   654  00174A  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   655  00174C  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   656  00174E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   657  001750  6EF8               	movwf	tblptru,c
   658  001752  0100               	movlb	0
   659  001754  EF81  F000         	goto	_main	;jump to C main() function
   660                           tblptru	equ	0xFF8
   661                           tblptrh	equ	0xFF7
   662                           tblptrl	equ	0xFF6
   663                           tablat	equ	0xFF5
   664                           postinc0	equ	0xFEE
   665                           wreg	equ	0xFE8
   666                           postdec1	equ	0xFE5
   667                           fsr1l	equ	0xFE1
   668                           
   669                           	psect	bssCOMRAM
   670  00004E                     __pbssCOMRAM:
   671                           	opt stack 0
   672  00004E                     _i2c_byte_count:
   673                           	opt stack 0
   674  00004E                     	ds	1
   675  00004F                     _i2c_reg_addr:
   676                           	opt stack 0
   677  00004F                     	ds	1
   678                           tblptru	equ	0xFF8
   679                           tblptrh	equ	0xFF7
   680                           tblptrl	equ	0xFF6
   681                           tablat	equ	0xFF5
   682                           postinc0	equ	0xFEE
   683                           wreg	equ	0xFE8
   684                           postdec1	equ	0xFE5
   685                           fsr1l	equ	0xFE1
   686                           
   687                           	psect	dataCOMRAM
   688  000035                     __pdataCOMRAM:
   689                           	opt stack 0
   690  000035                     main@F3679:
   691                           	opt stack 0
   692  000035                     	ds	10
   693  00003F                     menu_seconds_to_mmss@F3627:
   694                           	opt stack 0
   695  00003F                     	ds	10
   696  000049                     menu_main@F3618:
   697                           	opt stack 0
   698  000049                     	ds	5
   699                           tblptru	equ	0xFF8
   700                           tblptrh	equ	0xFF7
   701                           tblptrl	equ	0xFF6
   702                           tablat	equ	0xFF5
   703                           postinc0	equ	0xFEE
   704                           wreg	equ	0xFE8
   705                           postdec1	equ	0xFE5
   706                           fsr1l	equ	0xFE1
   707                           
   708                           	psect	bssBANK0
   709  0000BA                     __pbssBANK0:
   710                           	opt stack 0
   711  0000BA                     _current_pin:
   712                           	opt stack 0
   713  0000BA                     	ds	9
   714  0000C3                     _current_user:
   715                           	opt stack 0
   716  0000C3                     	ds	9
   717  0000CC                     _EEP_I2C_ADDR:
   718                           	opt stack 0
   719  0000CC                     	ds	1
   720  0000CD                     _credentials_accepted:
   721                           	opt stack 0
   722  0000CD                     	ds	1
   723                           tblptru	equ	0xFF8
   724                           tblptrh	equ	0xFF7
   725                           tblptrl	equ	0xFF6
   726                           tablat	equ	0xFF5
   727                           postinc0	equ	0xFEE
   728                           wreg	equ	0xFE8
   729                           postdec1	equ	0xFE5
   730                           fsr1l	equ	0xFE1
   731                           
   732                           	psect	dataBANK0
   733  000060                     __pdataBANK0:
   734                           	opt stack 0
   735  000060                     _i2c_r_reg:
   736                           	opt stack 0
   737  000060                     	ds	32
   738  000080                     _c:
   739                           	opt stack 0
   740  000080                     	ds	10
   741  00008A                     start_routine@F3723:
   742                           	opt stack 0
   743  00008A                     	ds	3
   744  00008D                     main@F3695:
   745                           	opt stack 0
   746  00008D                     	ds	1
   747                           tblptru	equ	0xFF8
   748                           tblptrh	equ	0xFF7
   749                           tblptrl	equ	0xFF6
   750                           tablat	equ	0xFF5
   751                           postinc0	equ	0xFEE
   752                           wreg	equ	0xFE8
   753                           postdec1	equ	0xFE5
   754                           fsr1l	equ	0xFE1
   755                           
   756                           	psect	dataBANK1
   757  000133                     __pdataBANK1:
   758                           	opt stack 0
   759  000133                     _i2c_w_reg:
   760                           	opt stack 0
   761  000133                     	ds	32
   762  000153                     _hx:
   763                           	opt stack 0
   764  000153                     	ds	16
   765                           tblptru	equ	0xFF8
   766                           tblptrh	equ	0xFF7
   767                           tblptrl	equ	0xFF6
   768                           tablat	equ	0xFF5
   769                           postinc0	equ	0xFEE
   770                           wreg	equ	0xFE8
   771                           postdec1	equ	0xFE5
   772                           fsr1l	equ	0xFE1
   773                           
   774                           	psect	cstackBANK1
   775  000100                     __pcstackBANK1:
   776                           	opt stack 0
   777  000100                     main@c:
   778                           	opt stack 0
   779                           
   780                           ; 10 bytes @ 0x0
   781  000100                     	ds	10
   782  00010A                     main@buffer:
   783                           	opt stack 0
   784                           
   785                           ; 9 bytes @ 0xA
   786  00010A                     	ds	9
   787  000113                     main@i_799:
   788                           	opt stack 0
   789                           
   790                           ; 2 bytes @ 0x13
   791  000113                     	ds	2
   792  000115                     main@n_c:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x15
   796  000115                     	ds	1
   797  000116                     main@credential_state:
   798                           	opt stack 0
   799                           
   800                           ; 1 bytes @ 0x16
   801  000116                     	ds	1
   802  000117                     main@i_769:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0x17
   806  000117                     	ds	2
   807  000119                     main@i_789:
   808                           	opt stack 0
   809                           
   810                           ; 2 bytes @ 0x19
   811  000119                     	ds	2
   812  00011B                     main@i_792:
   813                           	opt stack 0
   814                           
   815                           ; 2 bytes @ 0x1B
   816  00011B                     	ds	2
   817  00011D                     main@i_795:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x1D
   821  00011D                     	ds	2
   822  00011F                     main@is_leading_zero:
   823                           	opt stack 0
   824                           
   825                           ; 1 bytes @ 0x1F
   826  00011F                     	ds	1
   827  000120                     main@a:
   828                           	opt stack 0
   829                           
   830                           ; 1 bytes @ 0x20
   831  000120                     	ds	1
   832  000121                     main@i_776:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x21
   836  000121                     	ds	2
   837  000123                     main@i_785:
   838                           	opt stack 0
   839                           
   840                           ; 2 bytes @ 0x23
   841  000123                     	ds	2
   842  000125                     main@i:
   843                           	opt stack 0
   844                           
   845                           ; 2 bytes @ 0x25
   846  000125                     	ds	2
   847  000127                     main@i_770:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0x27
   851  000127                     	ds	2
   852  000129                     main@i_798:
   853                           	opt stack 0
   854                           
   855                           ; 2 bytes @ 0x29
   856  000129                     	ds	2
   857  00012B                     main@i_766:
   858                           	opt stack 0
   859                           
   860                           ; 2 bytes @ 0x2B
   861  00012B                     	ds	2
   862  00012D                     main@i_803:
   863                           	opt stack 0
   864                           
   865                           ; 2 bytes @ 0x2D
   866  00012D                     	ds	2
   867  00012F                     main@digits:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0x2F
   871  00012F                     	ds	1
   872  000130                     main@p:
   873                           	opt stack 0
   874                           
   875                           ; 1 bytes @ 0x30
   876  000130                     	ds	1
   877  000131                     main@n:
   878                           	opt stack 0
   879                           
   880                           ; 1 bytes @ 0x31
   881  000131                     	ds	1
   882  000132                     main@x:
   883                           	opt stack 0
   884                           
   885                           ; 1 bytes @ 0x32
   886  000132                     	ds	1
   887                           tblptru	equ	0xFF8
   888                           tblptrh	equ	0xFF7
   889                           tblptrl	equ	0xFF6
   890                           tablat	equ	0xFF5
   891                           postinc0	equ	0xFEE
   892                           wreg	equ	0xFE8
   893                           postdec1	equ	0xFE5
   894                           fsr1l	equ	0xFE1
   895                           
   896                           	psect	cstackBANK0
   897  00008E                     __pcstackBANK0:
   898                           	opt stack 0
   899  00008E                     start_routine@h:
   900                           	opt stack 0
   901                           
   902                           ; 1 bytes @ 0x0
   903  00008E                     	ds	1
   904  00008F                     start_routine@l:
   905                           	opt stack 0
   906                           
   907                           ; 1 bytes @ 0x1
   908  00008F                     	ds	1
   909  000090                     start_routine@error_msg:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x2
   913  000090                     	ds	2
   914  000092                     start_routine@d1:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x4
   918  000092                     	ds	1
   919  000093                     start_routine@v:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x5
   923  000093                     	ds	1
   924  000094                     start_routine@i:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x6
   928  000094                     	ds	2
   929  000096                     start_routine@i_875:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x8
   933  000096                     	ds	2
   934  000098                     start_routine@i_883:
   935                           	opt stack 0
   936                           
   937                           ; 2 bytes @ 0xA
   938  000098                     	ds	2
   939  00009A                     start_routine@i_901:
   940                           	opt stack 0
   941                           
   942                           ; 2 bytes @ 0xC
   943  00009A                     	ds	2
   944  00009C                     start_routine@i_904:
   945                           	opt stack 0
   946                           
   947                           ; 2 bytes @ 0xE
   948  00009C                     	ds	2
   949  00009E                     start_routine@i_907:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x10
   953  00009E                     	ds	2
   954  0000A0                     start_routine@b:
   955                           	opt stack 0
   956                           
   957                           ; 3 bytes @ 0x12
   958  0000A0                     	ds	3
   959  0000A3                     start_routine@i_898:
   960                           	opt stack 0
   961                           
   962                           ; 2 bytes @ 0x15
   963  0000A3                     	ds	2
   964  0000A5                     start_routine@i_908:
   965                           	opt stack 0
   966                           
   967                           ; 2 bytes @ 0x17
   968  0000A5                     	ds	2
   969  0000A7                     start_routine@I2C_new_ADDR:
   970                           	opt stack 0
   971                           
   972                           ; 3 bytes @ 0x19
   973  0000A7                     	ds	3
   974  0000AA                     start_routine@a:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0x1C
   978  0000AA                     	ds	1
   979  0000AB                     start_routine@dt:
   980                           	opt stack 0
   981                           
   982                           ; 1 bytes @ 0x1D
   983  0000AB                     	ds	1
   984  0000AC                     start_routine@i_895:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0x1E
   988  0000AC                     	ds	2
   989  0000AE                     start_routine@dh:
   990                           	opt stack 0
   991                           
   992                           ; 1 bytes @ 0x20
   993  0000AE                     	ds	1
   994  0000AF                     start_routine@x:
   995                           	opt stack 0
   996                           
   997                           ; 1 bytes @ 0x21
   998  0000AF                     	ds	1
   999  0000B0                     start_routine@n:
  1000                           	opt stack 0
  1001                           
  1002                           ; 1 bytes @ 0x22
  1003  0000B0                     	ds	1
  1004  0000B1                     start_routine@new_I2C_address:
  1005                           	opt stack 0
  1006                           
  1007                           ; 1 bytes @ 0x23
  1008  0000B1                     	ds	1
  1009  0000B2                     ??_main:
  1010                           
  1011                           ; 1 bytes @ 0x24
  1012  0000B2                     	ds	8
  1013                           tblptru	equ	0xFF8
  1014                           tblptrh	equ	0xFF7
  1015                           tblptrl	equ	0xFF6
  1016                           tablat	equ	0xFF5
  1017                           postinc0	equ	0xFEE
  1018                           wreg	equ	0xFE8
  1019                           postdec1	equ	0xFE5
  1020                           fsr1l	equ	0xFE1
  1021                           
  1022                           	psect	cstackCOMRAM
  1023  000001                     __pcstackCOMRAM:
  1024                           	opt stack 0
  1025  000001                     ??_ISR:
  1026                           
  1027                           ; 1 bytes @ 0x0
  1028  000001                     	ds	14
  1029  00000F                     ISR@sspBuf:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0xE
  1033  00000F                     	ds	1
  1034  000010                     ?___awdiv:
  1035                           	opt stack 0
  1036  000010                     ?___lwdiv:
  1037                           	opt stack 0
  1038  000010                     Lcd_Port@a:
  1039                           	opt stack 0
  1040  000010                     Eeprom_Read_Byte@address:
  1041                           	opt stack 0
  1042  000010                     Eeprom_Write_Byte@data:
  1043                           	opt stack 0
  1044  000010                     latch_keypad@x:
  1045                           	opt stack 0
  1046  000010                     ___awdiv@dividend:
  1047                           	opt stack 0
  1048  000010                     ___lwdiv@dividend:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0xF
  1052  000010                     	ds	1
  1053  000011                     Lcd_Cmd@a:
  1054                           	opt stack 0
  1055  000011                     Lcd_Write_Char@temp:
  1056                           	opt stack 0
  1057  000011                     Eeprom_Write_Byte@address:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x10
  1061  000011                     	ds	1
  1062  000012                     ??_latch_keypad:
  1063  000012                     ??_Lcd_Clear:
  1064  000012                     ??_Lcd_Init:
  1065  000012                     Lcd_Set_Cursor@b:
  1066                           	opt stack 0
  1067  000012                     Lcd_Write_Char@y:
  1068                           	opt stack 0
  1069  000012                     ___awdiv@divisor:
  1070                           	opt stack 0
  1071  000012                     ___lwdiv@divisor:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x11
  1075  000012                     	ds	1
  1076  000013                     Lcd_Set_Cursor@a:
  1077                           	opt stack 0
  1078  000013                     Lcd_Write_Char@a:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x12
  1082  000013                     	ds	1
  1083  000014                     Lcd_Set_Cursor@z:
  1084                           	opt stack 0
  1085  000014                     ___awdiv@counter:
  1086                           	opt stack 0
  1087  000014                     ___lwdiv@counter:
  1088                           	opt stack 0
  1089  000014                     Lcd_Write_String@a:
  1090                           	opt stack 0
  1091                           
  1092                           ; 2 bytes @ 0x13
  1093  000014                     	ds	1
  1094  000015                     Lcd_Set_Cursor@y:
  1095                           	opt stack 0
  1096  000015                     ___awdiv@sign:
  1097                           	opt stack 0
  1098  000015                     ___lwdiv@quotient:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x14
  1102  000015                     	ds	1
  1103  000016                     ??_Lcd_Write_String:
  1104  000016                     Lcd_Set_Cursor@temp:
  1105                           	opt stack 0
  1106  000016                     ___awdiv@quotient:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0x15
  1110  000016                     	ds	1
  1111  000017                     ?___wmul:
  1112                           	opt stack 0
  1113  000017                     ___wmul@multiplier:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x16
  1117  000017                     	ds	1
  1118  000018                     ??_load_i2c_registers:
  1119  000018                     Lcd_Write_String@i:
  1120                           	opt stack 0
  1121                           
  1122                           ; 2 bytes @ 0x17
  1123  000018                     	ds	1
  1124  000019                     ___wmul@multiplicand:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0x18
  1128  000019                     	ds	2
  1129  00001B                     ___wmul@product:
  1130                           	opt stack 0
  1131                           
  1132                           ; 2 bytes @ 0x1A
  1133  00001B                     	ds	1
  1134  00001C                     load_i2c_registers@checksum:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0x1B
  1138  00001C                     	ds	1
  1139  00001D                     menu_progress_bar@load_time_ms:
  1140                           	opt stack 0
  1141                           
  1142                           ; 2 bytes @ 0x1C
  1143  00001D                     	ds	1
  1144  00001E                     load_i2c_registers@i_841:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x1D
  1148  00001E                     	ds	1
  1149  00001F                     ??_menu_progress_bar:
  1150                           
  1151                           ; 1 bytes @ 0x1E
  1152  00001F                     	ds	1
  1153  000020                     load_i2c_registers@i:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0x1F
  1157  000020                     	ds	2
  1158  000022                     load_i2c_registers@i_839:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0x21
  1162  000022                     	ds	1
  1163  000023                     menu_progress_bar@d:
  1164                           	opt stack 0
  1165                           
  1166                           ; 4 bytes @ 0x22
  1167  000023                     	ds	4
  1168  000027                     menu_progress_bar@ii:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0x26
  1172  000027                     	ds	2
  1173  000029                     menu_progress_bar@i:
  1174                           	opt stack 0
  1175                           
  1176                           ; 2 bytes @ 0x28
  1177  000029                     	ds	2
  1178  00002B                     menu_progress_bar@i_722:
  1179                           	opt stack 0
  1180                           
  1181                           ; 2 bytes @ 0x2A
  1182  00002B                     	ds	2
  1183  00002D                     menu_progress_bar@i_723:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0x2C
  1187  00002D                     	ds	2
  1188  00002F                     menu_progress_bar@i_724:
  1189                           	opt stack 0
  1190                           
  1191                           ; 2 bytes @ 0x2E
  1192  00002F                     	ds	2
  1193  000031                     ??_start_routine:
  1194                           
  1195                           ; 1 bytes @ 0x30
  1196  000031                     	ds	4
  1197                           tblptru	equ	0xFF8
  1198                           tblptrh	equ	0xFF7
  1199                           tblptrl	equ	0xFF6
  1200                           tablat	equ	0xFF5
  1201                           postinc0	equ	0xFEE
  1202                           wreg	equ	0xFE8
  1203                           postdec1	equ	0xFE5
  1204                           fsr1l	equ	0xFE1
  1205                           
  1206 ;;
  1207 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  1208 ;;
  1209 ;; *************** function _main *****************
  1210 ;; Defined at:
  1211 ;;		line 47 in file "main.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;		None
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;  i               2   29[BANK1 ] int 
  1216 ;;  i               2   27[BANK1 ] int 
  1217 ;;  i               2   25[BANK1 ] int 
  1218 ;;  i               2   35[BANK1 ] int 
  1219 ;;  i               2   33[BANK1 ] int 
  1220 ;;  c              10    0[BANK1 ] unsigned char [10]
  1221 ;;  i               2   39[BANK1 ] int 
  1222 ;;  i               2   23[BANK1 ] int 
  1223 ;;  i               2   43[BANK1 ] int 
  1224 ;;  i               2   45[BANK1 ] int 
  1225 ;;  i               2   19[BANK1 ] int 
  1226 ;;  i               2   41[BANK1 ] int 
  1227 ;;  buffer          9   10[BANK1 ] unsigned char [9]
  1228 ;;  credential_s    1   22[BANK1 ] unsigned char 
  1229 ;;  i               2   37[BANK1 ] int 
  1230 ;;  digits          1   47[BANK1 ] unsigned char 
  1231 ;;  a               1   32[BANK1 ] unsigned char 
  1232 ;;  is_leading_z    1   31[BANK1 ] unsigned char 
  1233 ;;  n_c             1   21[BANK1 ] unsigned char 
  1234 ;;  x               1   50[BANK1 ] unsigned char 
  1235 ;;  n               1   49[BANK1 ] unsigned char 
  1236 ;;  p               1   48[BANK1 ] unsigned char 
  1237 ;; Return value:  Size  Location     Type
  1238 ;;                  1    wreg      void 
  1239 ;; Registers used:
  1240 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1241 ;; Tracked objects:
  1242 ;;		On entry : 0/0
  1243 ;;		On exit  : 0/0
  1244 ;;		Unchanged: 0/0
  1245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1246 ;;      Params:         0       0       0       0       0       0       0
  1247 ;;      Locals:         0       0      51       0       0       0       0
  1248 ;;      Temps:          0       8       0       0       0       0       0
  1249 ;;      Totals:         0       8      51       0       0       0       0
  1250 ;;Total ram usage:       59 bytes
  1251 ;; Hardware stack levels required when called:    6
  1252 ;; This function calls:
  1253 ;;		_Lcd_Clear
  1254 ;;		_Lcd_Init
  1255 ;;		_Lcd_Set_Cursor
  1256 ;;		_Lcd_Write_Char
  1257 ;;		_Lcd_Write_String
  1258 ;;		___awdiv
  1259 ;;		_latch_keypad
  1260 ;;		_load_i2c_registers
  1261 ;;		_mcu_initialise
  1262 ;;		_menu_progress_bar
  1263 ;;		_read_keypad
  1264 ;;		_start_routine
  1265 ;; This function is called by:
  1266 ;;		Startup code after reset
  1267 ;; This function uses a non-reentrant model
  1268 ;;
  1269                           
  1270                           	psect	text0
  1271  000102                     __ptext0:
  1272                           	opt stack 0
  1273  000102                     _main:
  1274                           	opt stack 25
  1275                           
  1276                           ;main.c: 51: unsigned char n = 0, p = 0;
  1277                           
  1278                           ;incstack = 0
  1279  000102  0E00               	movlw	0
  1280  000104  0101               	movlb	1	; () banked
  1281  000106  6F31               	movwf	main@n& (0+255),b
  1282  000108  0E00               	movlw	0
  1283  00010A  0101               	movlb	1	; () banked
  1284  00010C  6F30               	movwf	main@p& (0+255),b
  1285                           
  1286                           ;main.c: 52: unsigned char x = '_';
  1287  00010E  0E5F               	movlw	95
  1288  000110  0101               	movlb	1	; () banked
  1289  000112  6F32               	movwf	main@x& (0+255),b
  1290                           
  1291                           ; BSR set to: 1
  1292                           ;main.c: 55: mcu_initialise();
  1293  000114  EC4A  F00C         	call	_mcu_initialise	;wreg free
  1294                           
  1295                           ;main.c: 56: Lcd_Init();
  1296  000118  ECAC  F00B         	call	_Lcd_Init	;wreg free
  1297                           
  1298                           ;main.c: 60: start_routine();
  1299  00011C  ECED  F005         	call	_start_routine	;wreg free
  1300  000120                     l4143:
  1301                           
  1302                           ;main.c: 64: {
  1303                           ;main.c: 65: for (int i = 0; i < 32; i++)
  1304  000120  0E00               	movlw	0
  1305  000122  0101               	movlb	1	; () banked
  1306  000124  6F26               	movwf	(main@i+1)& (0+255),b
  1307  000126  0E00               	movlw	0
  1308  000128  6F25               	movwf	main@i& (0+255),b
  1309                           
  1310                           ; BSR set to: 1
  1311  00012A  0101               	movlb	1	; () banked
  1312  00012C  BF26               	btfsc	(main@i+1)& (0+255),7,b
  1313  00012E  D00C               	goto	l4149
  1314  000130  0101               	movlb	1	; () banked
  1315  000132  5126               	movf	(main@i+1)& (0+255),w,b
  1316  000134  E107               	bnz	u3890
  1317  000136  0E20               	movlw	32
  1318  000138  0101               	movlb	1	; () banked
  1319  00013A  5D25               	subwf	main@i& (0+255),w,b
  1320  00013C  B0D8               	btfsc	status,0,c
  1321  00013E  EFD9  F004         	goto	l4401
  1322  000142  D002               	goto	l4149
  1323  000144                     u3890:
  1324                           
  1325                           ; BSR set to: 1
  1326  000144  EFD9  F004         	goto	l4401
  1327  000148                     l4149:
  1328                           
  1329                           ; BSR set to: 1
  1330                           ;main.c: 66: {
  1331                           ;main.c: 67: i2c_w_reg[i] = '-';
  1332  000148  0E33               	movlw	low _i2c_w_reg
  1333  00014A  0101               	movlb	1	; () banked
  1334  00014C  2525               	addwf	main@i& (0+255),w,b
  1335  00014E  6ED9               	movwf	fsr2l,c
  1336  000150  0E01               	movlw	high _i2c_w_reg
  1337  000152  0101               	movlb	1	; () banked
  1338  000154  2126               	addwfc	(main@i+1)& (0+255),w,b
  1339  000156  6EDA               	movwf	fsr2h,c
  1340  000158  0E2D               	movlw	45
  1341  00015A  6EDF               	movwf	indf2,c
  1342                           
  1343                           ;main.c: 68: i2c_r_reg[i] = '-';
  1344  00015C  0E60               	movlw	low _i2c_r_reg
  1345  00015E  0101               	movlb	1	; () banked
  1346  000160  2525               	addwf	main@i& (0+255),w,b
  1347  000162  6ED9               	movwf	fsr2l,c
  1348  000164  0E00               	movlw	high _i2c_r_reg
  1349  000166  0101               	movlb	1	; () banked
  1350  000168  2126               	addwfc	(main@i+1)& (0+255),w,b
  1351  00016A  6EDA               	movwf	fsr2h,c
  1352  00016C  0E2D               	movlw	45
  1353  00016E  6EDF               	movwf	indf2,c
  1354                           
  1355                           ; BSR set to: 1
  1356  000170  0101               	movlb	1	; () banked
  1357  000172  4B25               	infsnz	main@i& (0+255),f,b
  1358  000174  2B26               	incf	(main@i+1)& (0+255),f,b
  1359                           
  1360                           ; BSR set to: 1
  1361  000176  0101               	movlb	1	; () banked
  1362  000178  BF26               	btfsc	(main@i+1)& (0+255),7,b
  1363  00017A  D7E6               	goto	l4149
  1364  00017C  0101               	movlb	1	; () banked
  1365  00017E  5126               	movf	(main@i+1)& (0+255),w,b
  1366  000180  E101               	bnz	u3900
  1367  000182  D7D9               	goto	L1
  1368  000184                     u3900:
  1369                           
  1370                           ; BSR set to: 1
  1371                           ;main.c: 69: }
  1372                           ;main.c: 70: while (credentials_accepted == 0 )
  1373  000184  EFD9  F004         	goto	l4401
  1374  000188                     l4155:
  1375                           
  1376                           ;main.c: 71: {
  1377                           ;main.c: 72: unsigned char buffer[9];
  1378                           ;main.c: 73: for (int i = 0; i < 9; i++)
  1379  000188  0E00               	movlw	0
  1380  00018A  0101               	movlb	1	; () banked
  1381  00018C  6F2C               	movwf	(main@i_766+1)& (0+255),b
  1382  00018E  0E00               	movlw	0
  1383  000190  6F2B               	movwf	main@i_766& (0+255),b
  1384  000192                     l4157:
  1385                           
  1386                           ; BSR set to: 1
  1387  000192  0101               	movlb	1	; () banked
  1388  000194  BF2C               	btfsc	(main@i_766+1)& (0+255),7,b
  1389  000196  D008               	goto	l4161
  1390  000198  0101               	movlb	1	; () banked
  1391  00019A  512C               	movf	(main@i_766+1)& (0+255),w,b
  1392  00019C  E127               	bnz	l4167
  1393  00019E  0E09               	movlw	9
  1394  0001A0  0101               	movlb	1	; () banked
  1395  0001A2  5D2B               	subwf	main@i_766& (0+255),w,b
  1396  0001A4  B0D8               	btfsc	status,0,c
  1397  0001A6  D022               	goto	l4167
  1398  0001A8                     l4161:
  1399                           
  1400                           ; BSR set to: 1
  1401                           ;main.c: 74: {
  1402                           ;main.c: 75: current_user[i] = '0';
  1403  0001A8  0EC3               	movlw	low _current_user
  1404  0001AA  0101               	movlb	1	; () banked
  1405  0001AC  252B               	addwf	main@i_766& (0+255),w,b
  1406  0001AE  6ED9               	movwf	fsr2l,c
  1407  0001B0  0E00               	movlw	high _current_user
  1408  0001B2  0101               	movlb	1	; () banked
  1409  0001B4  212C               	addwfc	(main@i_766+1)& (0+255),w,b
  1410  0001B6  6EDA               	movwf	fsr2h,c
  1411  0001B8  0E30               	movlw	48
  1412  0001BA  6EDF               	movwf	indf2,c
  1413                           
  1414                           ;main.c: 76: current_pin[i] = '0';
  1415  0001BC  0EBA               	movlw	low _current_pin
  1416  0001BE  0101               	movlb	1	; () banked
  1417  0001C0  252B               	addwf	main@i_766& (0+255),w,b
  1418  0001C2  6ED9               	movwf	fsr2l,c
  1419  0001C4  0E00               	movlw	high _current_pin
  1420  0001C6  0101               	movlb	1	; () banked
  1421  0001C8  212C               	addwfc	(main@i_766+1)& (0+255),w,b
  1422  0001CA  6EDA               	movwf	fsr2h,c
  1423  0001CC  0E30               	movlw	48
  1424  0001CE  6EDF               	movwf	indf2,c
  1425                           
  1426                           ;main.c: 77: buffer[i] = '0';
  1427  0001D0  0E0A               	movlw	low main@buffer
  1428  0001D2  0101               	movlb	1	; () banked
  1429  0001D4  252B               	addwf	main@i_766& (0+255),w,b
  1430  0001D6  6ED9               	movwf	fsr2l,c
  1431  0001D8  0E01               	movlw	high main@buffer
  1432  0001DA  0101               	movlb	1	; () banked
  1433  0001DC  212C               	addwfc	(main@i_766+1)& (0+255),w,b
  1434  0001DE  6EDA               	movwf	fsr2h,c
  1435  0001E0  0E30               	movlw	48
  1436  0001E2  6EDF               	movwf	indf2,c
  1437                           
  1438                           ; BSR set to: 1
  1439  0001E4  0101               	movlb	1	; () banked
  1440  0001E6  4B2B               	infsnz	main@i_766& (0+255),f,b
  1441  0001E8  2B2C               	incf	(main@i_766+1)& (0+255),f,b
  1442  0001EA  D7D3               	goto	l4157
  1443  0001EC                     l4167:
  1444                           
  1445                           ; BSR set to: 1
  1446                           ;main.c: 78: }
  1447                           ;main.c: 79: n = 0;
  1448  0001EC  0E00               	movlw	0
  1449  0001EE  0101               	movlb	1	; () banked
  1450  0001F0  6F31               	movwf	main@n& (0+255),b
  1451                           
  1452                           ; BSR set to: 1
  1453                           ;main.c: 80: Lcd_Set_Cursor(1,1);
  1454  0001F2  0E01               	movlw	1
  1455  0001F4  6E12               	movwf	Lcd_Set_Cursor@b,c
  1456  0001F6  0E01               	movlw	1
  1457  0001F8  EC73  F00C         	call	_Lcd_Set_Cursor
  1458                           
  1459                           ;main.c: 81: Lcd_Write_String("Enter your ID:  ");
  1460  0001FC  0E27               	movlw	low STR_3
  1461  0001FE  6E14               	movwf	Lcd_Write_String@a,c
  1462  000200  0E7F               	movlw	high STR_3
  1463  000202  6E15               	movwf	Lcd_Write_String@a+1,c
  1464  000204  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  1465                           
  1466                           ;main.c: 82: Lcd_Set_Cursor(2,1);
  1467  000208  0E01               	movlw	1
  1468  00020A  6E12               	movwf	Lcd_Set_Cursor@b,c
  1469  00020C  0E02               	movlw	2
  1470  00020E  EC73  F00C         	call	_Lcd_Set_Cursor
  1471                           
  1472                           ;main.c: 83: Lcd_Write_String("[ ]             ");
  1473  000212  0ED2               	movlw	low STR_4
  1474  000214  6E14               	movwf	Lcd_Write_String@a,c
  1475  000216  0E7E               	movlw	high STR_4
  1476  000218  6E15               	movwf	Lcd_Write_String@a+1,c
  1477  00021A  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  1478                           
  1479                           ;main.c: 84: Lcd_Set_Cursor(2,1);
  1480  00021E  0E01               	movlw	1
  1481  000220  6E12               	movwf	Lcd_Set_Cursor@b,c
  1482  000222  0E02               	movlw	2
  1483  000224  EC73  F00C         	call	_Lcd_Set_Cursor
  1484                           
  1485                           ;main.c: 86: while (n < 10)
  1486  000228  D0D0               	goto	l4229
  1487  00022A                     l4179:
  1488                           
  1489                           ;main.c: 87: {
  1490                           ;main.c: 88: if (n == 9)
  1491  00022A  0E09               	movlw	9
  1492  00022C  0101               	movlb	1	; () banked
  1493  00022E  1931               	xorwf	main@n& (0+255),w,b
  1494  000230  B4D8               	btfsc	status,2,c
  1495  000232  D0CF               	goto	l4231
  1496                           
  1497                           ; BSR set to: 1
  1498                           ;main.c: 90: Lcd_Set_Cursor(2,2);
  1499                           
  1500                           ; BSR set to: 1
  1501                           
  1502                           ; BSR set to: 1
  1503                           ;main.c: 89: break;
  1504  000234  0E02               	movlw	2
  1505  000236  6E12               	movwf	Lcd_Set_Cursor@b,c
  1506  000238  0E02               	movlw	2
  1507  00023A  EC73  F00C         	call	_Lcd_Set_Cursor
  1508                           
  1509                           ;main.c: 91: Lcd_Write_Char(c[9-n]);
  1510  00023E  0101               	movlb	1	; () banked
  1511  000240  5131               	movf	main@n& (0+255),w,b
  1512  000242  0100               	movlb	0	; () banked
  1513  000244  6FB2               	movwf	??_main& (0+255),b
  1514  000246  6BB3               	clrf	(??_main+1)& (0+255),b
  1515  000248  0100               	movlb	0	; () banked
  1516  00024A  1FB2               	comf	??_main& (0+255),f,b
  1517  00024C  1FB3               	comf	(??_main+1)& (0+255),f,b
  1518  00024E  4BB2               	infsnz	??_main& (0+255),f,b
  1519  000250  2BB3               	incf	(??_main+1)& (0+255),f,b
  1520  000252  0E09               	movlw	9
  1521  000254  0100               	movlb	0	; () banked
  1522  000256  27B2               	addwf	??_main& (0+255),f,b
  1523  000258  0E00               	movlw	0
  1524  00025A  23B3               	addwfc	(??_main+1)& (0+255),f,b
  1525  00025C  0E80               	movlw	low _c
  1526  00025E  0100               	movlb	0	; () banked
  1527  000260  25B2               	addwf	??_main& (0+255),w,b
  1528  000262  6ED9               	movwf	fsr2l,c
  1529  000264  0E00               	movlw	high _c
  1530  000266  0100               	movlb	0	; () banked
  1531  000268  21B3               	addwfc	(??_main+1)& (0+255),w,b
  1532  00026A  6EDA               	movwf	fsr2h,c
  1533  00026C  50DF               	movf	indf2,w,c
  1534  00026E  EC9B  F00C         	call	_Lcd_Write_Char
  1535                           
  1536                           ;main.c: 92: x = read_keypad();
  1537  000272  ECD9  F00A         	call	_read_keypad	;wreg free
  1538  000276  0101               	movlb	1	; () banked
  1539  000278  6F32               	movwf	main@x& (0+255),b
  1540                           
  1541                           ; BSR set to: 1
  1542                           ;main.c: 93: if (x != '_')
  1543  00027A  0E5F               	movlw	95
  1544  00027C  0101               	movlb	1	; () banked
  1545  00027E  1932               	xorwf	main@x& (0+255),w,b
  1546  000280  B4D8               	btfsc	status,2,c
  1547  000282  D0A3               	goto	l4229
  1548                           
  1549                           ; BSR set to: 1
  1550                           ;main.c: 94: {
  1551                           ;main.c: 95: if (((x - '#') == 0)&&(n > 0))
  1552  000284  0EDD               	movlw	221
  1553  000286  0100               	movlb	0	; () banked
  1554  000288  6FB2               	movwf	??_main& (0+255),b
  1555  00028A  0EFF               	movlw	255
  1556  00028C  0100               	movlb	0	; () banked
  1557  00028E  6FB3               	movwf	(??_main+1)& (0+255),b
  1558  000290  0101               	movlb	1	; () banked
  1559  000292  5132               	movf	main@x& (0+255),w,b
  1560  000294  0100               	movlb	0	; () banked
  1561  000296  6FB4               	movwf	(??_main+2)& (0+255),b
  1562  000298  6BB5               	clrf	(??_main+3)& (0+255),b
  1563  00029A  0100               	movlb	0	; () banked
  1564  00029C  51B2               	movf	??_main& (0+255),w,b
  1565  00029E  0100               	movlb	0	; () banked
  1566  0002A0  27B4               	addwf	(??_main+2)& (0+255),f,b
  1567  0002A2  0100               	movlb	0	; () banked
  1568  0002A4  51B3               	movf	(??_main+1)& (0+255),w,b
  1569  0002A6  0100               	movlb	0	; () banked
  1570  0002A8  23B5               	addwfc	(??_main+3)& (0+255),f,b
  1571  0002AA  0100               	movlb	0	; () banked
  1572  0002AC  51B4               	movf	(??_main+2)& (0+255),w,b
  1573  0002AE  0100               	movlb	0	; () banked
  1574  0002B0  11B5               	iorwf	(??_main+3)& (0+255),w,b
  1575  0002B2  A4D8               	btfss	status,2,c
  1576  0002B4  D034               	goto	l4211
  1577                           
  1578                           ; BSR set to: 0
  1579  0002B6  0101               	movlb	1	; () banked
  1580  0002B8  5131               	movf	main@n& (0+255),w,b
  1581  0002BA  0101               	movlb	1	; () banked
  1582  0002BC  B4D8               	btfsc	status,2,c
  1583  0002BE  D02F               	goto	l4211
  1584                           
  1585                           ; BSR set to: 1
  1586                           ;main.c: 96: {
  1587                           ;main.c: 97: buffer[n] = '?';
  1588  0002C0  0101               	movlb	1	; () banked
  1589  0002C2  5131               	movf	main@n& (0+255),w,b
  1590  0002C4  0D01               	mullw	1
  1591  0002C6  0E0A               	movlw	low main@buffer
  1592  0002C8  24F3               	addwf	prodl,w,c
  1593  0002CA  6ED9               	movwf	fsr2l,c
  1594  0002CC  0E01               	movlw	high main@buffer
  1595  0002CE  20F4               	addwfc	prodh,w,c
  1596  0002D0  6EDA               	movwf	fsr2h,c
  1597  0002D2  0E3F               	movlw	63
  1598  0002D4  6EDF               	movwf	indf2,c
  1599                           
  1600                           ; BSR set to: 1
  1601                           ;main.c: 98: Lcd_Set_Cursor(2, 7 + n);
  1602  0002D6  0101               	movlb	1	; () banked
  1603  0002D8  5131               	movf	main@n& (0+255),w,b
  1604  0002DA  0F07               	addlw	7
  1605  0002DC  6E12               	movwf	Lcd_Set_Cursor@b,c
  1606  0002DE  0E02               	movlw	2
  1607  0002E0  EC73  F00C         	call	_Lcd_Set_Cursor
  1608                           
  1609                           ;main.c: 99: Lcd_Write_Char('_');
  1610  0002E4  0E5F               	movlw	95
  1611  0002E6  EC9B  F00C         	call	_Lcd_Write_Char
  1612                           
  1613                           ;main.c: 100: latch_keypad(&x);
  1614  0002EA  0E32               	movlw	low main@x
  1615  0002EC  6E10               	movwf	latch_keypad@x,c
  1616  0002EE  0E01               	movlw	high main@x
  1617  0002F0  6E11               	movwf	latch_keypad@x+1,c
  1618  0002F2  ECB7  F00C         	call	_latch_keypad	;wreg free
  1619                           
  1620                           ;main.c: 101: Lcd_Set_Cursor(2, 8 + n);
  1621  0002F6  0101               	movlb	1	; () banked
  1622  0002F8  5131               	movf	main@n& (0+255),w,b
  1623  0002FA  0F08               	addlw	8
  1624  0002FC  6E12               	movwf	Lcd_Set_Cursor@b,c
  1625  0002FE  0E02               	movlw	2
  1626  000300  EC73  F00C         	call	_Lcd_Set_Cursor
  1627                           
  1628                           ;main.c: 102: Lcd_Write_Char(' ');
  1629  000304  0E20               	movlw	32
  1630  000306  EC9B  F00C         	call	_Lcd_Write_Char
  1631                           
  1632                           ;main.c: 103: Lcd_Set_Cursor(2, 7 + n);
  1633  00030A  0101               	movlb	1	; () banked
  1634  00030C  5131               	movf	main@n& (0+255),w,b
  1635  00030E  0F07               	addlw	7
  1636  000310  6E12               	movwf	Lcd_Set_Cursor@b,c
  1637  000312  0E02               	movlw	2
  1638  000314  EC73  F00C         	call	_Lcd_Set_Cursor
  1639                           
  1640                           ;main.c: 104: n--;
  1641  000318  0101               	movlb	1	; () banked
  1642  00031A  0731               	decf	main@n& (0+255),f,b
  1643                           
  1644                           ;main.c: 105: }
  1645  00031C  D056               	goto	l4229
  1646  00031E                     l4211:
  1647                           
  1648                           ;main.c: 106: else if ((x - '#') != 0)
  1649  00031E  0EDD               	movlw	221
  1650  000320  0100               	movlb	0	; () banked
  1651  000322  6FB2               	movwf	??_main& (0+255),b
  1652  000324  0EFF               	movlw	255
  1653  000326  0100               	movlb	0	; () banked
  1654  000328  6FB3               	movwf	(??_main+1)& (0+255),b
  1655  00032A  0101               	movlb	1	; () banked
  1656  00032C  5132               	movf	main@x& (0+255),w,b
  1657  00032E  0100               	movlb	0	; () banked
  1658  000330  6FB4               	movwf	(??_main+2)& (0+255),b
  1659  000332  6BB5               	clrf	(??_main+3)& (0+255),b
  1660  000334  0100               	movlb	0	; () banked
  1661  000336  51B2               	movf	??_main& (0+255),w,b
  1662  000338  0100               	movlb	0	; () banked
  1663  00033A  27B4               	addwf	(??_main+2)& (0+255),f,b
  1664  00033C  0100               	movlb	0	; () banked
  1665  00033E  51B3               	movf	(??_main+1)& (0+255),w,b
  1666  000340  0100               	movlb	0	; () banked
  1667  000342  23B5               	addwfc	(??_main+3)& (0+255),f,b
  1668  000344  0100               	movlb	0	; () banked
  1669  000346  51B4               	movf	(??_main+2)& (0+255),w,b
  1670  000348  0100               	movlb	0	; () banked
  1671  00034A  11B5               	iorwf	(??_main+3)& (0+255),w,b
  1672  00034C  B4D8               	btfsc	status,2,c
  1673  00034E  D03D               	goto	l4229
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;main.c: 107: {
  1677                           ;main.c: 108: if ((x == '*')|(n == 9))
  1678  000350  0E2A               	movlw	42
  1679  000352  0101               	movlb	1	; () banked
  1680  000354  1932               	xorwf	main@x& (0+255),w,b
  1681  000356  B4D8               	btfsc	status,2,c
  1682  000358  D03C               	goto	l4231
  1683                           
  1684                           ; BSR set to: 1
  1685  00035A  0E09               	movlw	9
  1686  00035C  0101               	movlb	1	; () banked
  1687  00035E  1931               	xorwf	main@n& (0+255),w,b
  1688  000360  B4D8               	btfsc	status,2,c
  1689  000362  D037               	goto	l4231
  1690                           
  1691                           ; BSR set to: 1
  1692                           ;main.c: 111: }
  1693                           ;main.c: 112: n++;
  1694                           
  1695                           ; BSR set to: 1
  1696                           
  1697                           ; BSR set to: 1
  1698                           ;main.c: 109: {
  1699                           ;main.c: 110: break;
  1700  000364  0101               	movlb	1	; () banked
  1701  000366  2B31               	incf	main@n& (0+255),f,b
  1702                           
  1703                           ; BSR set to: 1
  1704                           ;main.c: 113: buffer[n-1] = x;
  1705  000368  0EFF               	movlw	255
  1706  00036A  0100               	movlb	0	; () banked
  1707  00036C  6FB2               	movwf	??_main& (0+255),b
  1708  00036E  0EFF               	movlw	255
  1709  000370  0100               	movlb	0	; () banked
  1710  000372  6FB3               	movwf	(??_main+1)& (0+255),b
  1711  000374  0101               	movlb	1	; () banked
  1712  000376  5131               	movf	main@n& (0+255),w,b
  1713  000378  0100               	movlb	0	; () banked
  1714  00037A  6FB4               	movwf	(??_main+2)& (0+255),b
  1715  00037C  6BB5               	clrf	(??_main+3)& (0+255),b
  1716  00037E  0100               	movlb	0	; () banked
  1717  000380  51B2               	movf	??_main& (0+255),w,b
  1718  000382  0100               	movlb	0	; () banked
  1719  000384  27B4               	addwf	(??_main+2)& (0+255),f,b
  1720  000386  0100               	movlb	0	; () banked
  1721  000388  51B3               	movf	(??_main+1)& (0+255),w,b
  1722  00038A  0100               	movlb	0	; () banked
  1723  00038C  23B5               	addwfc	(??_main+3)& (0+255),f,b
  1724  00038E  0E0A               	movlw	low main@buffer
  1725  000390  0100               	movlb	0	; () banked
  1726  000392  25B4               	addwf	(??_main+2)& (0+255),w,b
  1727  000394  6ED9               	movwf	fsr2l,c
  1728  000396  0E01               	movlw	high main@buffer
  1729  000398  0100               	movlb	0	; () banked
  1730  00039A  21B5               	addwfc	(??_main+3)& (0+255),w,b
  1731  00039C  6EDA               	movwf	fsr2h,c
  1732  00039E  C132  FFDF         	movff	main@x,indf2
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;main.c: 114: Lcd_Set_Cursor(2, 7 + n);
  1736  0003A2  0101               	movlb	1	; () banked
  1737  0003A4  5131               	movf	main@n& (0+255),w,b
  1738  0003A6  0F07               	addlw	7
  1739  0003A8  6E12               	movwf	Lcd_Set_Cursor@b,c
  1740  0003AA  0E02               	movlw	2
  1741  0003AC  EC73  F00C         	call	_Lcd_Set_Cursor
  1742                           
  1743                           ;main.c: 115: Lcd_Write_Char(x);
  1744  0003B0  0101               	movlb	1	; () banked
  1745  0003B2  5132               	movf	main@x& (0+255),w,b
  1746  0003B4  EC9B  F00C         	call	_Lcd_Write_Char
  1747                           
  1748                           ;main.c: 116: Lcd_Write_Char('_');
  1749  0003B8  0E5F               	movlw	95
  1750  0003BA  EC9B  F00C         	call	_Lcd_Write_Char
  1751                           
  1752                           ;main.c: 117: latch_keypad(&x);
  1753  0003BE  0E32               	movlw	low main@x
  1754  0003C0  6E10               	movwf	latch_keypad@x,c
  1755  0003C2  0E01               	movlw	high main@x
  1756  0003C4  6E11               	movwf	latch_keypad@x+1,c
  1757  0003C6  ECB7  F00C         	call	_latch_keypad	;wreg free
  1758  0003CA                     l4229:
  1759  0003CA  0E09               	movlw	9
  1760  0003CC  0101               	movlb	1	; () banked
  1761  0003CE  6531               	cpfsgt	main@n& (0+255),b
  1762  0003D0  D72C               	goto	l4179
  1763  0003D2                     l4231:
  1764                           
  1765                           ; BSR set to: 1
  1766                           ;main.c: 118: }
  1767                           ;main.c: 119: }
  1768                           ;main.c: 120: }
  1769                           ;main.c: 121: for (int i = 0; i < 10; i++)
  1770  0003D2  0E00               	movlw	0
  1771  0003D4  0101               	movlb	1	; () banked
  1772  0003D6  6F18               	movwf	(main@i_769+1)& (0+255),b
  1773  0003D8  0E00               	movlw	0
  1774  0003DA  6F17               	movwf	main@i_769& (0+255),b
  1775  0003DC                     l4233:
  1776                           
  1777                           ; BSR set to: 1
  1778  0003DC  0101               	movlb	1	; () banked
  1779  0003DE  BF18               	btfsc	(main@i_769+1)& (0+255),7,b
  1780  0003E0  D008               	goto	l4237
  1781  0003E2  0101               	movlb	1	; () banked
  1782  0003E4  5118               	movf	(main@i_769+1)& (0+255),w,b
  1783  0003E6  E111               	bnz	l4241
  1784  0003E8  0E0A               	movlw	10
  1785  0003EA  0101               	movlb	1	; () banked
  1786  0003EC  5D17               	subwf	main@i_769& (0+255),w,b
  1787  0003EE  B0D8               	btfsc	status,0,c
  1788  0003F0  D00C               	goto	l4241
  1789  0003F2                     l4237:
  1790                           
  1791                           ; BSR set to: 1
  1792                           ;main.c: 122: _delay((unsigned long)((10)*(16000000/4000.0)));
  1793  0003F2  0E34               	movlw	52
  1794  0003F4  0100               	movlb	0	; () banked
  1795  0003F6  6FB2               	movwf	??_main& (0+255),b
  1796  0003F8  0EF2               	movlw	242
  1797  0003FA                     u4357:
  1798  0003FA  2EE8               	decfsz	wreg,f,c
  1799  0003FC  D7FE               	goto	u4357
  1800  0003FE  2FB2               	decfsz	??_main& (0+255),f,b
  1801  000400  D7FC               	goto	u4357
  1802  000402  0101               	movlb	1	; () banked
  1803  000404  4B17               	infsnz	main@i_769& (0+255),f,b
  1804  000406  2B18               	incf	(main@i_769+1)& (0+255),f,b
  1805  000408  D7E9               	goto	l4233
  1806  00040A                     l4241:
  1807                           
  1808                           ; BSR set to: 1
  1809                           ;main.c: 123: for (int i = 0; i < n; i++)
  1810  00040A  0E00               	movlw	0
  1811  00040C  0101               	movlb	1	; () banked
  1812  00040E  6F28               	movwf	(main@i_770+1)& (0+255),b
  1813  000410  0E00               	movlw	0
  1814  000412  6F27               	movwf	main@i_770& (0+255),b
  1815  000414  D075               	goto	l4249
  1816  000416                     l4243:
  1817                           
  1818                           ;main.c: 124: {
  1819                           ;main.c: 125: current_user[8 - i] = buffer[(n-1) - i];
  1820  000416  0EFF               	movlw	255
  1821  000418  0100               	movlb	0	; () banked
  1822  00041A  6FB2               	movwf	??_main& (0+255),b
  1823  00041C  0EFF               	movlw	255
  1824  00041E  0100               	movlb	0	; () banked
  1825  000420  6FB3               	movwf	(??_main+1)& (0+255),b
  1826  000422  C127  F0B4         	movff	main@i_770,??_main+2
  1827  000426  C128  F0B5         	movff	main@i_770+1,??_main+3
  1828  00042A  0100               	movlb	0	; () banked
  1829  00042C  1FB4               	comf	(??_main+2)& (0+255),f,b
  1830  00042E  1FB5               	comf	(??_main+3)& (0+255),f,b
  1831  000430  4BB4               	infsnz	(??_main+2)& (0+255),f,b
  1832  000432  2BB5               	incf	(??_main+3)& (0+255),f,b
  1833  000434  0101               	movlb	1	; () banked
  1834  000436  5131               	movf	main@n& (0+255),w,b
  1835  000438  0100               	movlb	0	; () banked
  1836  00043A  6FB6               	movwf	(??_main+4)& (0+255),b
  1837  00043C  6BB7               	clrf	(??_main+5)& (0+255),b
  1838  00043E  0100               	movlb	0	; () banked
  1839  000440  51B4               	movf	(??_main+2)& (0+255),w,b
  1840  000442  0100               	movlb	0	; () banked
  1841  000444  27B6               	addwf	(??_main+4)& (0+255),f,b
  1842  000446  0100               	movlb	0	; () banked
  1843  000448  51B5               	movf	(??_main+3)& (0+255),w,b
  1844  00044A  0100               	movlb	0	; () banked
  1845  00044C  23B7               	addwfc	(??_main+5)& (0+255),f,b
  1846  00044E  0100               	movlb	0	; () banked
  1847  000450  51B2               	movf	??_main& (0+255),w,b
  1848  000452  0100               	movlb	0	; () banked
  1849  000454  27B6               	addwf	(??_main+4)& (0+255),f,b
  1850  000456  0100               	movlb	0	; () banked
  1851  000458  51B3               	movf	(??_main+1)& (0+255),w,b
  1852  00045A  0100               	movlb	0	; () banked
  1853  00045C  23B7               	addwfc	(??_main+5)& (0+255),f,b
  1854  00045E  0E0A               	movlw	low main@buffer
  1855  000460  0100               	movlb	0	; () banked
  1856  000462  25B6               	addwf	(??_main+4)& (0+255),w,b
  1857  000464  6ED9               	movwf	fsr2l,c
  1858  000466  0E01               	movlw	high main@buffer
  1859  000468  0100               	movlb	0	; () banked
  1860  00046A  21B7               	addwfc	(??_main+5)& (0+255),w,b
  1861  00046C  6EDA               	movwf	fsr2h,c
  1862  00046E  C127  F0B8         	movff	main@i_770,??_main+6
  1863  000472  C128  F0B9         	movff	main@i_770+1,??_main+7
  1864  000476  0100               	movlb	0	; () banked
  1865  000478  1FB8               	comf	(??_main+6)& (0+255),f,b
  1866  00047A  1FB9               	comf	(??_main+7)& (0+255),f,b
  1867  00047C  4BB8               	infsnz	(??_main+6)& (0+255),f,b
  1868  00047E  2BB9               	incf	(??_main+7)& (0+255),f,b
  1869  000480  0E08               	movlw	8
  1870  000482  0100               	movlb	0	; () banked
  1871  000484  27B8               	addwf	(??_main+6)& (0+255),f,b
  1872  000486  0E00               	movlw	0
  1873  000488  23B9               	addwfc	(??_main+7)& (0+255),f,b
  1874  00048A  0EC3               	movlw	low _current_user
  1875  00048C  0100               	movlb	0	; () banked
  1876  00048E  25B8               	addwf	(??_main+6)& (0+255),w,b
  1877  000490  6EE1               	movwf	fsr1l,c
  1878  000492  0E00               	movlw	high _current_user
  1879  000494  0100               	movlb	0	; () banked
  1880  000496  21B9               	addwfc	(??_main+7)& (0+255),w,b
  1881  000498  6EE2               	movwf	fsr1h,c
  1882  00049A  CFDF FFE7          	movff	indf2,indf1
  1883                           
  1884                           ; BSR set to: 0
  1885                           ;main.c: 126: buffer[(n-1) - i] = '0';
  1886  00049E  0EFF               	movlw	255
  1887  0004A0  0100               	movlb	0	; () banked
  1888  0004A2  6FB2               	movwf	??_main& (0+255),b
  1889  0004A4  0EFF               	movlw	255
  1890  0004A6  0100               	movlb	0	; () banked
  1891  0004A8  6FB3               	movwf	(??_main+1)& (0+255),b
  1892  0004AA  C127  F0B4         	movff	main@i_770,??_main+2
  1893  0004AE  C128  F0B5         	movff	main@i_770+1,??_main+3
  1894  0004B2  0100               	movlb	0	; () banked
  1895  0004B4  1FB4               	comf	(??_main+2)& (0+255),f,b
  1896  0004B6  1FB5               	comf	(??_main+3)& (0+255),f,b
  1897  0004B8  4BB4               	infsnz	(??_main+2)& (0+255),f,b
  1898  0004BA  2BB5               	incf	(??_main+3)& (0+255),f,b
  1899  0004BC  0101               	movlb	1	; () banked
  1900  0004BE  5131               	movf	main@n& (0+255),w,b
  1901  0004C0  0100               	movlb	0	; () banked
  1902  0004C2  6FB6               	movwf	(??_main+4)& (0+255),b
  1903  0004C4  6BB7               	clrf	(??_main+5)& (0+255),b
  1904  0004C6  0100               	movlb	0	; () banked
  1905  0004C8  51B4               	movf	(??_main+2)& (0+255),w,b
  1906  0004CA  0100               	movlb	0	; () banked
  1907  0004CC  27B6               	addwf	(??_main+4)& (0+255),f,b
  1908  0004CE  0100               	movlb	0	; () banked
  1909  0004D0  51B5               	movf	(??_main+3)& (0+255),w,b
  1910  0004D2  0100               	movlb	0	; () banked
  1911  0004D4  23B7               	addwfc	(??_main+5)& (0+255),f,b
  1912  0004D6  0100               	movlb	0	; () banked
  1913  0004D8  51B2               	movf	??_main& (0+255),w,b
  1914  0004DA  0100               	movlb	0	; () banked
  1915  0004DC  27B6               	addwf	(??_main+4)& (0+255),f,b
  1916  0004DE  0100               	movlb	0	; () banked
  1917  0004E0  51B3               	movf	(??_main+1)& (0+255),w,b
  1918  0004E2  0100               	movlb	0	; () banked
  1919  0004E4  23B7               	addwfc	(??_main+5)& (0+255),f,b
  1920  0004E6  0E0A               	movlw	low main@buffer
  1921  0004E8  0100               	movlb	0	; () banked
  1922  0004EA  25B6               	addwf	(??_main+4)& (0+255),w,b
  1923  0004EC  6ED9               	movwf	fsr2l,c
  1924  0004EE  0E01               	movlw	high main@buffer
  1925  0004F0  0100               	movlb	0	; () banked
  1926  0004F2  21B7               	addwfc	(??_main+5)& (0+255),w,b
  1927  0004F4  6EDA               	movwf	fsr2h,c
  1928  0004F6  0E30               	movlw	48
  1929  0004F8  6EDF               	movwf	indf2,c
  1930                           
  1931                           ; BSR set to: 0
  1932  0004FA  0101               	movlb	1	; () banked
  1933  0004FC  4B27               	infsnz	main@i_770& (0+255),f,b
  1934  0004FE  2B28               	incf	(main@i_770+1)& (0+255),f,b
  1935  000500                     l4249:
  1936                           
  1937                           ; BSR set to: 1
  1938  000500  0101               	movlb	1	; () banked
  1939  000502  5131               	movf	main@n& (0+255),w,b
  1940  000504  0100               	movlb	0	; () banked
  1941  000506  6FB2               	movwf	??_main& (0+255),b
  1942  000508  6BB3               	clrf	(??_main+1)& (0+255),b
  1943  00050A  0100               	movlb	0	; () banked
  1944  00050C  51B2               	movf	??_main& (0+255),w,b
  1945  00050E  0101               	movlb	1	; () banked
  1946  000510  5D27               	subwf	main@i_770& (0+255),w,b
  1947  000512  0101               	movlb	1	; () banked
  1948  000514  5128               	movf	(main@i_770+1)& (0+255),w,b
  1949  000516  0A80               	xorlw	128
  1950  000518  0100               	movlb	0	; () banked
  1951  00051A  6FB4               	movwf	(??_main+2)& (0+255),b
  1952  00051C  0100               	movlb	0	; () banked
  1953  00051E  51B3               	movf	(??_main+1)& (0+255),w,b
  1954  000520  0A80               	xorlw	128
  1955  000522  0100               	movlb	0	; () banked
  1956  000524  59B4               	subwfb	(??_main+2)& (0+255),w,b
  1957  000526  A0D8               	btfss	status,0,c
  1958  000528  D776               	goto	l4243
  1959                           
  1960                           ; BSR set to: 0
  1961                           ;main.c: 127: }
  1962                           ;main.c: 128: Lcd_Clear();
  1963                           
  1964                           ; BSR set to: 0
  1965  00052A  EC3D  F00D         	call	_Lcd_Clear	;wreg free
  1966                           
  1967                           ;main.c: 129: menu_progress_bar(100);
  1968  00052E  0E00               	movlw	0
  1969  000530  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  1970  000532  0E64               	movlw	100
  1971  000534  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  1972  000536  ECAD  F009         	call	_menu_progress_bar	;wreg free
  1973                           
  1974                           ;main.c: 131: p = 0;
  1975  00053A  0E00               	movlw	0
  1976  00053C  0101               	movlb	1	; () banked
  1977  00053E  6F30               	movwf	main@p& (0+255),b
  1978                           
  1979                           ; BSR set to: 1
  1980                           ;main.c: 132: Lcd_Set_Cursor(1,1);
  1981  000540  0E01               	movlw	1
  1982  000542  6E12               	movwf	Lcd_Set_Cursor@b,c
  1983  000544  0E01               	movlw	1
  1984  000546  EC73  F00C         	call	_Lcd_Set_Cursor
  1985                           
  1986                           ;main.c: 133: Lcd_Write_String("Enter your PIN: ");
  1987  00054A  0E5A               	movlw	low STR_5
  1988  00054C  6E14               	movwf	Lcd_Write_String@a,c
  1989  00054E  0E7F               	movlw	high STR_5
  1990  000550  6E15               	movwf	Lcd_Write_String@a+1,c
  1991  000552  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  1992                           
  1993                           ;main.c: 134: Lcd_Set_Cursor(2,1);
  1994  000556  0E01               	movlw	1
  1995  000558  6E12               	movwf	Lcd_Set_Cursor@b,c
  1996  00055A  0E02               	movlw	2
  1997  00055C  EC73  F00C         	call	_Lcd_Set_Cursor
  1998                           
  1999                           ;main.c: 135: Lcd_Write_String("[ ]             ");
  2000  000560  0ED2               	movlw	low STR_4
  2001  000562  6E14               	movwf	Lcd_Write_String@a,c
  2002  000564  0E7E               	movlw	high STR_4
  2003  000566  6E15               	movwf	Lcd_Write_String@a+1,c
  2004  000568  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  2005                           
  2006                           ;main.c: 136: Lcd_Set_Cursor(2,1);
  2007  00056C  0E01               	movlw	1
  2008  00056E  6E12               	movwf	Lcd_Set_Cursor@b,c
  2009  000570  0E02               	movlw	2
  2010  000572  EC73  F00C         	call	_Lcd_Set_Cursor
  2011                           
  2012                           ;main.c: 137: while (p < 10)
  2013  000576  D0D8               	goto	l4319
  2014  000578                     l4267:
  2015                           
  2016                           ;main.c: 138: {
  2017                           ;main.c: 139: if (p == 9)
  2018  000578  0E09               	movlw	9
  2019  00057A  0101               	movlb	1	; () banked
  2020  00057C  1930               	xorwf	main@p& (0+255),w,b
  2021  00057E  B4D8               	btfsc	status,2,c
  2022  000580  D0D7               	goto	l4321
  2023                           
  2024                           ; BSR set to: 1
  2025                           ;main.c: 141: char c[] = {'0','1','2','3','4','5','6','7','8','9'};
  2026                           
  2027                           ; BSR set to: 1
  2028                           
  2029                           ; BSR set to: 1
  2030                           ;main.c: 140: break;
  2031  000582  EE20  F035         	lfsr	2,main@F3679
  2032  000586  EE11  F000         	lfsr	1,main@c
  2033  00058A  0E09               	movlw	9
  2034  00058C                     u4051:
  2035  00058C  CFDB FFE3          	movff	plusw2,plusw1
  2036  000590  06E8               	decf	wreg,f,c
  2037  000592  E2FC               	bc	u4051
  2038                           
  2039                           ; BSR set to: 1
  2040                           ;main.c: 142: Lcd_Set_Cursor(2,2);
  2041  000594  0E02               	movlw	2
  2042  000596  6E12               	movwf	Lcd_Set_Cursor@b,c
  2043  000598  0E02               	movlw	2
  2044  00059A  EC73  F00C         	call	_Lcd_Set_Cursor
  2045                           
  2046                           ;main.c: 143: Lcd_Write_Char(c[9-p]);
  2047  00059E  0101               	movlb	1	; () banked
  2048  0005A0  5130               	movf	main@p& (0+255),w,b
  2049  0005A2  0100               	movlb	0	; () banked
  2050  0005A4  6FB2               	movwf	??_main& (0+255),b
  2051  0005A6  6BB3               	clrf	(??_main+1)& (0+255),b
  2052  0005A8  0100               	movlb	0	; () banked
  2053  0005AA  1FB2               	comf	??_main& (0+255),f,b
  2054  0005AC  1FB3               	comf	(??_main+1)& (0+255),f,b
  2055  0005AE  4BB2               	infsnz	??_main& (0+255),f,b
  2056  0005B0  2BB3               	incf	(??_main+1)& (0+255),f,b
  2057  0005B2  0E09               	movlw	9
  2058  0005B4  0100               	movlb	0	; () banked
  2059  0005B6  27B2               	addwf	??_main& (0+255),f,b
  2060  0005B8  0E00               	movlw	0
  2061  0005BA  23B3               	addwfc	(??_main+1)& (0+255),f,b
  2062  0005BC  0E00               	movlw	low main@c
  2063  0005BE  0100               	movlb	0	; () banked
  2064  0005C0  25B2               	addwf	??_main& (0+255),w,b
  2065  0005C2  6ED9               	movwf	fsr2l,c
  2066  0005C4  0E01               	movlw	high main@c
  2067  0005C6  0100               	movlb	0	; () banked
  2068  0005C8  21B3               	addwfc	(??_main+1)& (0+255),w,b
  2069  0005CA  6EDA               	movwf	fsr2h,c
  2070  0005CC  50DF               	movf	indf2,w,c
  2071  0005CE  EC9B  F00C         	call	_Lcd_Write_Char
  2072                           
  2073                           ;main.c: 144: x = read_keypad();
  2074  0005D2  ECD9  F00A         	call	_read_keypad	;wreg free
  2075  0005D6  0101               	movlb	1	; () banked
  2076  0005D8  6F32               	movwf	main@x& (0+255),b
  2077                           
  2078                           ; BSR set to: 1
  2079                           ;main.c: 145: if (x != '_')
  2080  0005DA  0E5F               	movlw	95
  2081  0005DC  0101               	movlb	1	; () banked
  2082  0005DE  1932               	xorwf	main@x& (0+255),w,b
  2083  0005E0  B4D8               	btfsc	status,2,c
  2084  0005E2  D0A2               	goto	l4319
  2085                           
  2086                           ; BSR set to: 1
  2087                           ;main.c: 146: {
  2088                           ;main.c: 147: if (((x - '#') == 0)&&(p > 0))
  2089  0005E4  0EDD               	movlw	221
  2090  0005E6  0100               	movlb	0	; () banked
  2091  0005E8  6FB2               	movwf	??_main& (0+255),b
  2092  0005EA  0EFF               	movlw	255
  2093  0005EC  0100               	movlb	0	; () banked
  2094  0005EE  6FB3               	movwf	(??_main+1)& (0+255),b
  2095  0005F0  0101               	movlb	1	; () banked
  2096  0005F2  5132               	movf	main@x& (0+255),w,b
  2097  0005F4  0100               	movlb	0	; () banked
  2098  0005F6  6FB4               	movwf	(??_main+2)& (0+255),b
  2099  0005F8  6BB5               	clrf	(??_main+3)& (0+255),b
  2100  0005FA  0100               	movlb	0	; () banked
  2101  0005FC  51B2               	movf	??_main& (0+255),w,b
  2102  0005FE  0100               	movlb	0	; () banked
  2103  000600  27B4               	addwf	(??_main+2)& (0+255),f,b
  2104  000602  0100               	movlb	0	; () banked
  2105  000604  51B3               	movf	(??_main+1)& (0+255),w,b
  2106  000606  0100               	movlb	0	; () banked
  2107  000608  23B5               	addwfc	(??_main+3)& (0+255),f,b
  2108  00060A  0100               	movlb	0	; () banked
  2109  00060C  51B4               	movf	(??_main+2)& (0+255),w,b
  2110  00060E  0100               	movlb	0	; () banked
  2111  000610  11B5               	iorwf	(??_main+3)& (0+255),w,b
  2112  000612  A4D8               	btfss	status,2,c
  2113  000614  D034               	goto	l4301
  2114                           
  2115                           ; BSR set to: 0
  2116  000616  0101               	movlb	1	; () banked
  2117  000618  5130               	movf	main@p& (0+255),w,b
  2118  00061A  0101               	movlb	1	; () banked
  2119  00061C  B4D8               	btfsc	status,2,c
  2120  00061E  D02F               	goto	l4301
  2121                           
  2122                           ; BSR set to: 1
  2123                           ;main.c: 148: {
  2124                           ;main.c: 149: buffer[p] = '?';
  2125  000620  0101               	movlb	1	; () banked
  2126  000622  5130               	movf	main@p& (0+255),w,b
  2127  000624  0D01               	mullw	1
  2128  000626  0E0A               	movlw	low main@buffer
  2129  000628  24F3               	addwf	prodl,w,c
  2130  00062A  6ED9               	movwf	fsr2l,c
  2131  00062C  0E01               	movlw	high main@buffer
  2132  00062E  20F4               	addwfc	prodh,w,c
  2133  000630  6EDA               	movwf	fsr2h,c
  2134  000632  0E3F               	movlw	63
  2135  000634  6EDF               	movwf	indf2,c
  2136                           
  2137                           ; BSR set to: 1
  2138                           ;main.c: 150: Lcd_Set_Cursor(2, 7 + p);
  2139  000636  0101               	movlb	1	; () banked
  2140  000638  5130               	movf	main@p& (0+255),w,b
  2141  00063A  0F07               	addlw	7
  2142  00063C  6E12               	movwf	Lcd_Set_Cursor@b,c
  2143  00063E  0E02               	movlw	2
  2144  000640  EC73  F00C         	call	_Lcd_Set_Cursor
  2145                           
  2146                           ;main.c: 151: Lcd_Write_Char('_');
  2147  000644  0E5F               	movlw	95
  2148  000646  EC9B  F00C         	call	_Lcd_Write_Char
  2149                           
  2150                           ;main.c: 152: latch_keypad(&x);
  2151  00064A  0E32               	movlw	low main@x
  2152  00064C  6E10               	movwf	latch_keypad@x,c
  2153  00064E  0E01               	movlw	high main@x
  2154  000650  6E11               	movwf	latch_keypad@x+1,c
  2155  000652  ECB7  F00C         	call	_latch_keypad	;wreg free
  2156                           
  2157                           ;main.c: 153: Lcd_Set_Cursor(2, 8 + p);
  2158  000656  0101               	movlb	1	; () banked
  2159  000658  5130               	movf	main@p& (0+255),w,b
  2160  00065A  0F08               	addlw	8
  2161  00065C  6E12               	movwf	Lcd_Set_Cursor@b,c
  2162  00065E  0E02               	movlw	2
  2163  000660  EC73  F00C         	call	_Lcd_Set_Cursor
  2164                           
  2165                           ;main.c: 154: Lcd_Write_Char(' ');
  2166  000664  0E20               	movlw	32
  2167  000666  EC9B  F00C         	call	_Lcd_Write_Char
  2168                           
  2169                           ;main.c: 155: Lcd_Set_Cursor(2, 7 + p);
  2170  00066A  0101               	movlb	1	; () banked
  2171  00066C  5130               	movf	main@p& (0+255),w,b
  2172  00066E  0F07               	addlw	7
  2173  000670  6E12               	movwf	Lcd_Set_Cursor@b,c
  2174  000672  0E02               	movlw	2
  2175  000674  EC73  F00C         	call	_Lcd_Set_Cursor
  2176                           
  2177                           ;main.c: 156: p--;
  2178  000678  0101               	movlb	1	; () banked
  2179  00067A  0730               	decf	main@p& (0+255),f,b
  2180                           
  2181                           ;main.c: 157: }
  2182  00067C  D055               	goto	l4319
  2183  00067E                     l4301:
  2184                           
  2185                           ;main.c: 158: else if ((x - '#') != 0)
  2186  00067E  0EDD               	movlw	221
  2187  000680  0100               	movlb	0	; () banked
  2188  000682  6FB2               	movwf	??_main& (0+255),b
  2189  000684  0EFF               	movlw	255
  2190  000686  0100               	movlb	0	; () banked
  2191  000688  6FB3               	movwf	(??_main+1)& (0+255),b
  2192  00068A  0101               	movlb	1	; () banked
  2193  00068C  5132               	movf	main@x& (0+255),w,b
  2194  00068E  0100               	movlb	0	; () banked
  2195  000690  6FB4               	movwf	(??_main+2)& (0+255),b
  2196  000692  6BB5               	clrf	(??_main+3)& (0+255),b
  2197  000694  0100               	movlb	0	; () banked
  2198  000696  51B2               	movf	??_main& (0+255),w,b
  2199  000698  0100               	movlb	0	; () banked
  2200  00069A  27B4               	addwf	(??_main+2)& (0+255),f,b
  2201  00069C  0100               	movlb	0	; () banked
  2202  00069E  51B3               	movf	(??_main+1)& (0+255),w,b
  2203  0006A0  0100               	movlb	0	; () banked
  2204  0006A2  23B5               	addwfc	(??_main+3)& (0+255),f,b
  2205  0006A4  0100               	movlb	0	; () banked
  2206  0006A6  51B4               	movf	(??_main+2)& (0+255),w,b
  2207  0006A8  0100               	movlb	0	; () banked
  2208  0006AA  11B5               	iorwf	(??_main+3)& (0+255),w,b
  2209  0006AC  B4D8               	btfsc	status,2,c
  2210  0006AE  D03C               	goto	l4319
  2211                           
  2212                           ; BSR set to: 0
  2213                           ;main.c: 159: {
  2214                           ;main.c: 160: if ((x == '*')|(p == 9))
  2215  0006B0  0E2A               	movlw	42
  2216  0006B2  0101               	movlb	1	; () banked
  2217  0006B4  1932               	xorwf	main@x& (0+255),w,b
  2218  0006B6  B4D8               	btfsc	status,2,c
  2219  0006B8  D03B               	goto	l4321
  2220                           
  2221                           ; BSR set to: 1
  2222  0006BA  0E09               	movlw	9
  2223  0006BC  0101               	movlb	1	; () banked
  2224  0006BE  1930               	xorwf	main@p& (0+255),w,b
  2225  0006C0  B4D8               	btfsc	status,2,c
  2226  0006C2  D036               	goto	l4321
  2227                           
  2228                           ; BSR set to: 1
  2229                           ;main.c: 163: }
  2230                           ;main.c: 164: p++;
  2231                           
  2232                           ; BSR set to: 1
  2233                           
  2234                           ; BSR set to: 1
  2235                           ;main.c: 161: {
  2236                           ;main.c: 162: break;
  2237  0006C4  0101               	movlb	1	; () banked
  2238  0006C6  2B30               	incf	main@p& (0+255),f,b
  2239                           
  2240                           ; BSR set to: 1
  2241                           ;main.c: 165: buffer[p-1] = x;
  2242  0006C8  0EFF               	movlw	255
  2243  0006CA  0100               	movlb	0	; () banked
  2244  0006CC  6FB2               	movwf	??_main& (0+255),b
  2245  0006CE  0EFF               	movlw	255
  2246  0006D0  0100               	movlb	0	; () banked
  2247  0006D2  6FB3               	movwf	(??_main+1)& (0+255),b
  2248  0006D4  0101               	movlb	1	; () banked
  2249  0006D6  5130               	movf	main@p& (0+255),w,b
  2250  0006D8  0100               	movlb	0	; () banked
  2251  0006DA  6FB4               	movwf	(??_main+2)& (0+255),b
  2252  0006DC  6BB5               	clrf	(??_main+3)& (0+255),b
  2253  0006DE  0100               	movlb	0	; () banked
  2254  0006E0  51B2               	movf	??_main& (0+255),w,b
  2255  0006E2  0100               	movlb	0	; () banked
  2256  0006E4  27B4               	addwf	(??_main+2)& (0+255),f,b
  2257  0006E6  0100               	movlb	0	; () banked
  2258  0006E8  51B3               	movf	(??_main+1)& (0+255),w,b
  2259  0006EA  0100               	movlb	0	; () banked
  2260  0006EC  23B5               	addwfc	(??_main+3)& (0+255),f,b
  2261  0006EE  0E0A               	movlw	low main@buffer
  2262  0006F0  0100               	movlb	0	; () banked
  2263  0006F2  25B4               	addwf	(??_main+2)& (0+255),w,b
  2264  0006F4  6ED9               	movwf	fsr2l,c
  2265  0006F6  0E01               	movlw	high main@buffer
  2266  0006F8  0100               	movlb	0	; () banked
  2267  0006FA  21B5               	addwfc	(??_main+3)& (0+255),w,b
  2268  0006FC  6EDA               	movwf	fsr2h,c
  2269  0006FE  C132  FFDF         	movff	main@x,indf2
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;main.c: 166: Lcd_Set_Cursor(2, 7 + p);
  2273  000702  0101               	movlb	1	; () banked
  2274  000704  5130               	movf	main@p& (0+255),w,b
  2275  000706  0F07               	addlw	7
  2276  000708  6E12               	movwf	Lcd_Set_Cursor@b,c
  2277  00070A  0E02               	movlw	2
  2278  00070C  EC73  F00C         	call	_Lcd_Set_Cursor
  2279                           
  2280                           ;main.c: 167: Lcd_Write_Char('*');
  2281  000710  0E2A               	movlw	42
  2282  000712  EC9B  F00C         	call	_Lcd_Write_Char
  2283                           
  2284                           ;main.c: 168: Lcd_Write_Char('_');
  2285  000716  0E5F               	movlw	95
  2286  000718  EC9B  F00C         	call	_Lcd_Write_Char
  2287                           
  2288                           ;main.c: 169: latch_keypad(&x);
  2289  00071C  0E32               	movlw	low main@x
  2290  00071E  6E10               	movwf	latch_keypad@x,c
  2291  000720  0E01               	movlw	high main@x
  2292  000722  6E11               	movwf	latch_keypad@x+1,c
  2293  000724  ECB7  F00C         	call	_latch_keypad	;wreg free
  2294  000728                     l4319:
  2295  000728  0E09               	movlw	9
  2296  00072A  0101               	movlb	1	; () banked
  2297  00072C  6530               	cpfsgt	main@p& (0+255),b
  2298  00072E  D724               	goto	l4267
  2299  000730                     l4321:
  2300                           
  2301                           ; BSR set to: 1
  2302                           ;main.c: 170: }
  2303                           ;main.c: 171: }
  2304                           ;main.c: 172: }
  2305                           ;main.c: 173: for (int i = 0; i < p; i++)
  2306  000730  0E00               	movlw	0
  2307  000732  0101               	movlb	1	; () banked
  2308  000734  6F22               	movwf	(main@i_776+1)& (0+255),b
  2309  000736  0E00               	movlw	0
  2310  000738  6F21               	movwf	main@i_776& (0+255),b
  2311  00073A  D047               	goto	l4327
  2312  00073C                     l4323:
  2313                           
  2314                           ;main.c: 174: current_pin[8 - i] = buffer[(p-1) - i];
  2315  00073C  0EFF               	movlw	255
  2316  00073E  0100               	movlb	0	; () banked
  2317  000740  6FB2               	movwf	??_main& (0+255),b
  2318  000742  0EFF               	movlw	255
  2319  000744  0100               	movlb	0	; () banked
  2320  000746  6FB3               	movwf	(??_main+1)& (0+255),b
  2321  000748  C121  F0B4         	movff	main@i_776,??_main+2
  2322  00074C  C122  F0B5         	movff	main@i_776+1,??_main+3
  2323  000750  0100               	movlb	0	; () banked
  2324  000752  1FB4               	comf	(??_main+2)& (0+255),f,b
  2325  000754  1FB5               	comf	(??_main+3)& (0+255),f,b
  2326  000756  4BB4               	infsnz	(??_main+2)& (0+255),f,b
  2327  000758  2BB5               	incf	(??_main+3)& (0+255),f,b
  2328  00075A  0101               	movlb	1	; () banked
  2329  00075C  5130               	movf	main@p& (0+255),w,b
  2330  00075E  0100               	movlb	0	; () banked
  2331  000760  6FB6               	movwf	(??_main+4)& (0+255),b
  2332  000762  6BB7               	clrf	(??_main+5)& (0+255),b
  2333  000764  0100               	movlb	0	; () banked
  2334  000766  51B4               	movf	(??_main+2)& (0+255),w,b
  2335  000768  0100               	movlb	0	; () banked
  2336  00076A  27B6               	addwf	(??_main+4)& (0+255),f,b
  2337  00076C  0100               	movlb	0	; () banked
  2338  00076E  51B5               	movf	(??_main+3)& (0+255),w,b
  2339  000770  0100               	movlb	0	; () banked
  2340  000772  23B7               	addwfc	(??_main+5)& (0+255),f,b
  2341  000774  0100               	movlb	0	; () banked
  2342  000776  51B2               	movf	??_main& (0+255),w,b
  2343  000778  0100               	movlb	0	; () banked
  2344  00077A  27B6               	addwf	(??_main+4)& (0+255),f,b
  2345  00077C  0100               	movlb	0	; () banked
  2346  00077E  51B3               	movf	(??_main+1)& (0+255),w,b
  2347  000780  0100               	movlb	0	; () banked
  2348  000782  23B7               	addwfc	(??_main+5)& (0+255),f,b
  2349  000784  0E0A               	movlw	low main@buffer
  2350  000786  0100               	movlb	0	; () banked
  2351  000788  25B6               	addwf	(??_main+4)& (0+255),w,b
  2352  00078A  6ED9               	movwf	fsr2l,c
  2353  00078C  0E01               	movlw	high main@buffer
  2354  00078E  0100               	movlb	0	; () banked
  2355  000790  21B7               	addwfc	(??_main+5)& (0+255),w,b
  2356  000792  6EDA               	movwf	fsr2h,c
  2357  000794  C121  F0B8         	movff	main@i_776,??_main+6
  2358  000798  C122  F0B9         	movff	main@i_776+1,??_main+7
  2359  00079C  0100               	movlb	0	; () banked
  2360  00079E  1FB8               	comf	(??_main+6)& (0+255),f,b
  2361  0007A0  1FB9               	comf	(??_main+7)& (0+255),f,b
  2362  0007A2  4BB8               	infsnz	(??_main+6)& (0+255),f,b
  2363  0007A4  2BB9               	incf	(??_main+7)& (0+255),f,b
  2364  0007A6  0E08               	movlw	8
  2365  0007A8  0100               	movlb	0	; () banked
  2366  0007AA  27B8               	addwf	(??_main+6)& (0+255),f,b
  2367  0007AC  0E00               	movlw	0
  2368  0007AE  23B9               	addwfc	(??_main+7)& (0+255),f,b
  2369  0007B0  0EBA               	movlw	low _current_pin
  2370  0007B2  0100               	movlb	0	; () banked
  2371  0007B4  25B8               	addwf	(??_main+6)& (0+255),w,b
  2372  0007B6  6EE1               	movwf	fsr1l,c
  2373  0007B8  0E00               	movlw	high _current_pin
  2374  0007BA  0100               	movlb	0	; () banked
  2375  0007BC  21B9               	addwfc	(??_main+7)& (0+255),w,b
  2376  0007BE  6EE2               	movwf	fsr1h,c
  2377  0007C0  CFDF FFE7          	movff	indf2,indf1
  2378                           
  2379                           ; BSR set to: 0
  2380  0007C4  0101               	movlb	1	; () banked
  2381  0007C6  4B21               	infsnz	main@i_776& (0+255),f,b
  2382  0007C8  2B22               	incf	(main@i_776+1)& (0+255),f,b
  2383  0007CA                     l4327:
  2384                           
  2385                           ; BSR set to: 1
  2386  0007CA  0101               	movlb	1	; () banked
  2387  0007CC  5130               	movf	main@p& (0+255),w,b
  2388  0007CE  0100               	movlb	0	; () banked
  2389  0007D0  6FB2               	movwf	??_main& (0+255),b
  2390  0007D2  6BB3               	clrf	(??_main+1)& (0+255),b
  2391  0007D4  0100               	movlb	0	; () banked
  2392  0007D6  51B2               	movf	??_main& (0+255),w,b
  2393  0007D8  0101               	movlb	1	; () banked
  2394  0007DA  5D21               	subwf	main@i_776& (0+255),w,b
  2395  0007DC  0101               	movlb	1	; () banked
  2396  0007DE  5122               	movf	(main@i_776+1)& (0+255),w,b
  2397  0007E0  0A80               	xorlw	128
  2398  0007E2  0100               	movlb	0	; () banked
  2399  0007E4  6FB4               	movwf	(??_main+2)& (0+255),b
  2400  0007E6  0100               	movlb	0	; () banked
  2401  0007E8  51B3               	movf	(??_main+1)& (0+255),w,b
  2402  0007EA  0A80               	xorlw	128
  2403  0007EC  0100               	movlb	0	; () banked
  2404  0007EE  59B4               	subwfb	(??_main+2)& (0+255),w,b
  2405  0007F0  A0D8               	btfss	status,0,c
  2406  0007F2  D7A4               	goto	l4323
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;main.c: 175: Lcd_Clear();
  2410                           
  2411                           ; BSR set to: 0
  2412  0007F4  EC3D  F00D         	call	_Lcd_Clear	;wreg free
  2413                           
  2414                           ;main.c: 176: menu_progress_bar(100);
  2415  0007F8  0E00               	movlw	0
  2416  0007FA  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  2417  0007FC  0E64               	movlw	100
  2418  0007FE  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  2419  000800  ECAD  F009         	call	_menu_progress_bar	;wreg free
  2420                           
  2421                           ;main.c: 180: load_i2c_registers();
  2422  000804  EC63  F00A         	call	_load_i2c_registers	;wreg free
  2423  000808                     l4335:
  2424  000808  0E2D               	movlw	45
  2425  00080A  0101               	movlb	1	; () banked
  2426  00080C  1933               	xorwf	_i2c_w_reg& (0+255),w,b	;volatile
  2427  00080E  B4D8               	btfsc	status,2,c
  2428  000810  D7FB               	goto	l4335
  2429                           
  2430                           ; BSR set to: 1
  2431                           ;main.c: 184: }
  2432                           ;main.c: 185: INTCONbits.GIE_GIEH = 0;
  2433  000812  9EF2               	bcf	intcon,7,c	;volatile
  2434                           
  2435                           ; BSR set to: 1
  2436                           ;main.c: 186: for (int i = 0; i < 32; i++)
  2437  000814  0E00               	movlw	0
  2438  000816  0101               	movlb	1	; () banked
  2439  000818  6F24               	movwf	(main@i_785+1)& (0+255),b
  2440  00081A  0E00               	movlw	0
  2441  00081C  6F23               	movwf	main@i_785& (0+255),b
  2442                           
  2443                           ; BSR set to: 1
  2444  00081E  0101               	movlb	1	; () banked
  2445  000820  BF24               	btfsc	(main@i_785+1)& (0+255),7,b
  2446  000822  D008               	goto	l4343
  2447  000824  0101               	movlb	1	; () banked
  2448  000826  5124               	movf	(main@i_785+1)& (0+255),w,b
  2449  000828  E119               	bnz	l226
  2450  00082A  0E20               	movlw	32
  2451  00082C  0101               	movlb	1	; () banked
  2452  00082E  5D23               	subwf	main@i_785& (0+255),w,b
  2453  000830  B0D8               	btfsc	status,0,c
  2454  000832  D014               	goto	l226
  2455  000834                     l4343:
  2456                           
  2457                           ; BSR set to: 1
  2458                           ;main.c: 187: i2c_r_reg[i] = '-';
  2459  000834  0E60               	movlw	low _i2c_r_reg
  2460  000836  0101               	movlb	1	; () banked
  2461  000838  2523               	addwf	main@i_785& (0+255),w,b
  2462  00083A  6ED9               	movwf	fsr2l,c
  2463  00083C  0E00               	movlw	high _i2c_r_reg
  2464  00083E  0101               	movlb	1	; () banked
  2465  000840  2124               	addwfc	(main@i_785+1)& (0+255),w,b
  2466  000842  6EDA               	movwf	fsr2h,c
  2467  000844  0E2D               	movlw	45
  2468  000846  6EDF               	movwf	indf2,c
  2469                           
  2470                           ; BSR set to: 1
  2471  000848  0101               	movlb	1	; () banked
  2472  00084A  4B23               	infsnz	main@i_785& (0+255),f,b
  2473  00084C  2B24               	incf	(main@i_785+1)& (0+255),f,b
  2474                           
  2475                           ; BSR set to: 1
  2476  00084E  0101               	movlb	1	; () banked
  2477  000850  BF24               	btfsc	(main@i_785+1)& (0+255),7,b
  2478  000852  D7F0               	goto	l4343
  2479  000854  0101               	movlb	1	; () banked
  2480  000856  5124               	movf	(main@i_785+1)& (0+255),w,b
  2481  000858  E101               	bnz	u4160
  2482  00085A  D7E7               	goto	L2
  2483  00085C                     u4160:
  2484  00085C                     l226:
  2485                           
  2486                           ; BSR set to: 1
  2487                           ;main.c: 188: unsigned char credential_state = i2c_w_reg[0];
  2488  00085C  C133  F116         	movff	_i2c_w_reg,main@credential_state	;volatile
  2489                           
  2490                           ; BSR set to: 1
  2491                           ;main.c: 189: if (credential_state == 0xA1)
  2492  000860  0EA1               	movlw	161
  2493  000862  0101               	movlb	1	; () banked
  2494  000864  1916               	xorwf	main@credential_state& (0+255),w,b
  2495  000866  A4D8               	btfss	status,2,c
  2496  000868  D03A               	goto	l4367
  2497                           
  2498                           ; BSR set to: 1
  2499                           ;main.c: 190: {
  2500                           ;main.c: 191: Lcd_Set_Cursor(1,1);
  2501  00086A  0E01               	movlw	1
  2502  00086C  6E12               	movwf	Lcd_Set_Cursor@b,c
  2503  00086E  0E01               	movlw	1
  2504  000870  EC73  F00C         	call	_Lcd_Set_Cursor
  2505                           
  2506                           ;main.c: 192: Lcd_Write_String("[Access Granted]");
  2507  000874  0ED1               	movlw	low STR_7
  2508  000876  6E14               	movwf	Lcd_Write_String@a,c
  2509  000878  0E7F               	movlw	high STR_7
  2510  00087A  6E15               	movwf	Lcd_Write_String@a+1,c
  2511  00087C  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  2512                           
  2513                           ;main.c: 193: Lcd_Set_Cursor(2,1);
  2514  000880  0E01               	movlw	1
  2515  000882  6E12               	movwf	Lcd_Set_Cursor@b,c
  2516  000884  0E02               	movlw	2
  2517  000886  EC73  F00C         	call	_Lcd_Set_Cursor
  2518                           
  2519                           ;main.c: 194: Lcd_Write_String("    [Welcome]   ");
  2520  00088A  0E05               	movlw	low STR_8
  2521  00088C  6E14               	movwf	Lcd_Write_String@a,c
  2522  00088E  0E7F               	movlw	high STR_8
  2523  000890  6E15               	movwf	Lcd_Write_String@a+1,c
  2524  000892  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  2525                           
  2526                           ;main.c: 195: for (int i = 0; i < 100; i++)
  2527  000896  0E00               	movlw	0
  2528  000898  0101               	movlb	1	; () banked
  2529  00089A  6F1A               	movwf	(main@i_789+1)& (0+255),b
  2530  00089C  0E00               	movlw	0
  2531  00089E  6F19               	movwf	main@i_789& (0+255),b
  2532                           
  2533                           ; BSR set to: 1
  2534  0008A0  0101               	movlb	1	; () banked
  2535  0008A2  BF1A               	btfsc	(main@i_789+1)& (0+255),7,b
  2536  0008A4  D00A               	goto	l4363
  2537  0008A6  0101               	movlb	1	; () banked
  2538  0008A8  511A               	movf	(main@i_789+1)& (0+255),w,b
  2539  0008AA  E106               	bnz	u4180
  2540  0008AC  0E64               	movlw	100
  2541  0008AE  0101               	movlb	1	; () banked
  2542  0008B0  5D19               	subwf	main@i_789& (0+255),w,b
  2543  0008B2  B0D8               	btfsc	status,0,c
  2544  0008B4  D07D               	goto	l230
  2545  0008B6  D001               	goto	l4363
  2546  0008B8                     u4180:
  2547                           
  2548                           ; BSR set to: 1
  2549  0008B8  D07B               	goto	l230
  2550  0008BA                     l4363:
  2551                           
  2552                           ; BSR set to: 1
  2553                           ;main.c: 196: {
  2554                           ;main.c: 197: _delay((unsigned long)((10)*(16000000/4000.0)));
  2555  0008BA  0E34               	movlw	52
  2556  0008BC  0100               	movlb	0	; () banked
  2557  0008BE  6FB2               	movwf	??_main& (0+255),b
  2558  0008C0  0EF2               	movlw	242
  2559  0008C2                     u4367:
  2560  0008C2  2EE8               	decfsz	wreg,f,c
  2561  0008C4  D7FE               	goto	u4367
  2562  0008C6  2FB2               	decfsz	??_main& (0+255),f,b
  2563  0008C8  D7FC               	goto	u4367
  2564  0008CA  0101               	movlb	1	; () banked
  2565  0008CC  4B19               	infsnz	main@i_789& (0+255),f,b
  2566  0008CE  2B1A               	incf	(main@i_789+1)& (0+255),f,b
  2567  0008D0  0101               	movlb	1	; () banked
  2568  0008D2  BF1A               	btfsc	(main@i_789+1)& (0+255),7,b
  2569  0008D4  D7F2               	goto	l4363
  2570  0008D6  0101               	movlb	1	; () banked
  2571  0008D8  511A               	movf	(main@i_789+1)& (0+255),w,b
  2572  0008DA  E16A               	bnz	l230
  2573  0008DC  D7E7               	goto	L3
  2574  0008DE                     l4367:
  2575                           
  2576                           ; BSR set to: 1
  2577                           ;main.c: 200: else if (credential_state == 0xA0)
  2578  0008DE  0EA0               	movlw	160
  2579  0008E0  0101               	movlb	1	; () banked
  2580  0008E2  1916               	xorwf	main@credential_state& (0+255),w,b
  2581  0008E4  A4D8               	btfss	status,2,c
  2582  0008E6  D032               	goto	l4385
  2583                           
  2584                           ; BSR set to: 1
  2585                           ;main.c: 201: {
  2586                           ;main.c: 202: Lcd_Set_Cursor(1,1);
  2587  0008E8  0E01               	movlw	1
  2588  0008EA  6E12               	movwf	Lcd_Set_Cursor@b,c
  2589  0008EC  0E01               	movlw	1
  2590  0008EE  EC73  F00C         	call	_Lcd_Set_Cursor
  2591                           
  2592                           ;main.c: 203: Lcd_Write_String("[Access  Denied]");
  2593  0008F2  0EC0               	movlw	low STR_9
  2594  0008F4  6E14               	movwf	Lcd_Write_String@a,c
  2595  0008F6  0E7F               	movlw	high STR_9
  2596  0008F8  6E15               	movwf	Lcd_Write_String@a+1,c
  2597  0008FA  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  2598                           
  2599                           ;main.c: 204: Lcd_Set_Cursor(2,1);
  2600  0008FE  0E01               	movlw	1
  2601  000900  6E12               	movwf	Lcd_Set_Cursor@b,c
  2602  000902  0E02               	movlw	2
  2603  000904  EC73  F00C         	call	_Lcd_Set_Cursor
  2604                           
  2605                           ;main.c: 205: Lcd_Write_String("    [ Retry ]   ");
  2606  000908  0EF4               	movlw	low STR_10
  2607  00090A  6E14               	movwf	Lcd_Write_String@a,c
  2608  00090C  0E7E               	movlw	high STR_10
  2609  00090E  6E15               	movwf	Lcd_Write_String@a+1,c
  2610  000910  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  2611                           
  2612                           ;main.c: 206: for (int i = 0; i < 100; i++)
  2613  000914  0E00               	movlw	0
  2614  000916  0101               	movlb	1	; () banked
  2615  000918  6F1C               	movwf	(main@i_792+1)& (0+255),b
  2616  00091A  0E00               	movlw	0
  2617  00091C  6F1B               	movwf	main@i_792& (0+255),b
  2618  00091E                     l4377:
  2619                           
  2620                           ; BSR set to: 1
  2621  00091E  0101               	movlb	1	; () banked
  2622  000920  BF1C               	btfsc	(main@i_792+1)& (0+255),7,b
  2623  000922  D008               	goto	l4381
  2624  000924  0101               	movlb	1	; () banked
  2625  000926  511C               	movf	(main@i_792+1)& (0+255),w,b
  2626  000928  E143               	bnz	l230
  2627  00092A  0E64               	movlw	100
  2628  00092C  0101               	movlb	1	; () banked
  2629  00092E  5D1B               	subwf	main@i_792& (0+255),w,b
  2630  000930  B0D8               	btfsc	status,0,c
  2631  000932  D03E               	goto	l230
  2632  000934                     l4381:
  2633                           
  2634                           ; BSR set to: 1
  2635                           ;main.c: 207: {
  2636                           ;main.c: 208: _delay((unsigned long)((10)*(16000000/4000.0)));
  2637  000934  0E34               	movlw	52
  2638  000936  0100               	movlb	0	; () banked
  2639  000938  6FB2               	movwf	??_main& (0+255),b
  2640  00093A  0EF2               	movlw	242
  2641  00093C                     u4377:
  2642  00093C  2EE8               	decfsz	wreg,f,c
  2643  00093E  D7FE               	goto	u4377
  2644  000940  2FB2               	decfsz	??_main& (0+255),f,b
  2645  000942  D7FC               	goto	u4377
  2646  000944  0101               	movlb	1	; () banked
  2647  000946  4B1B               	infsnz	main@i_792& (0+255),f,b
  2648  000948  2B1C               	incf	(main@i_792+1)& (0+255),f,b
  2649  00094A  D7E9               	goto	l4377
  2650  00094C                     l4385:
  2651                           
  2652                           ; BSR set to: 1
  2653                           ;main.c: 211: else
  2654                           ;main.c: 212: {
  2655                           ;main.c: 213: Lcd_Set_Cursor(1,1);
  2656  00094C  0E01               	movlw	1
  2657  00094E  6E12               	movwf	Lcd_Set_Cursor@b,c
  2658  000950  0E01               	movlw	1
  2659  000952  EC73  F00C         	call	_Lcd_Set_Cursor
  2660                           
  2661                           ;main.c: 214: Lcd_Write_String("[ System Error ]");
  2662  000956  0E9E               	movlw	low STR_11
  2663  000958  6E14               	movwf	Lcd_Write_String@a,c
  2664  00095A  0E7F               	movlw	high STR_11
  2665  00095C  6E15               	movwf	Lcd_Write_String@a+1,c
  2666  00095E  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  2667                           
  2668                           ;main.c: 215: Lcd_Set_Cursor(2,1);
  2669  000962  0E01               	movlw	1
  2670  000964  6E12               	movwf	Lcd_Set_Cursor@b,c
  2671  000966  0E02               	movlw	2
  2672  000968  EC73  F00C         	call	_Lcd_Set_Cursor
  2673                           
  2674                           ;main.c: 216: Lcd_Write_String("    [ Retry ]   ");
  2675  00096C  0EF4               	movlw	low STR_10
  2676  00096E  6E14               	movwf	Lcd_Write_String@a,c
  2677  000970  0E7E               	movlw	high STR_10
  2678  000972  6E15               	movwf	Lcd_Write_String@a+1,c
  2679  000974  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  2680                           
  2681                           ;main.c: 217: for (int i = 0; i < 100; i++)
  2682  000978  0E00               	movlw	0
  2683  00097A  0101               	movlb	1	; () banked
  2684  00097C  6F1E               	movwf	(main@i_795+1)& (0+255),b
  2685  00097E  0E00               	movlw	0
  2686  000980  6F1D               	movwf	main@i_795& (0+255),b
  2687  000982                     l4393:
  2688                           
  2689                           ; BSR set to: 1
  2690  000982  0101               	movlb	1	; () banked
  2691  000984  BF1E               	btfsc	(main@i_795+1)& (0+255),7,b
  2692  000986  D008               	goto	l4397
  2693  000988  0101               	movlb	1	; () banked
  2694  00098A  511E               	movf	(main@i_795+1)& (0+255),w,b
  2695  00098C  E111               	bnz	l230
  2696  00098E  0E64               	movlw	100
  2697  000990  0101               	movlb	1	; () banked
  2698  000992  5D1D               	subwf	main@i_795& (0+255),w,b
  2699  000994  B0D8               	btfsc	status,0,c
  2700  000996  D00C               	goto	l230
  2701  000998                     l4397:
  2702                           
  2703                           ; BSR set to: 1
  2704                           ;main.c: 218: {
  2705                           ;main.c: 219: _delay((unsigned long)((10)*(16000000/4000.0)));
  2706  000998  0E34               	movlw	52
  2707  00099A  0100               	movlb	0	; () banked
  2708  00099C  6FB2               	movwf	??_main& (0+255),b
  2709  00099E  0EF2               	movlw	242
  2710  0009A0                     u4387:
  2711  0009A0  2EE8               	decfsz	wreg,f,c
  2712  0009A2  D7FE               	goto	u4387
  2713  0009A4  2FB2               	decfsz	??_main& (0+255),f,b
  2714  0009A6  D7FC               	goto	u4387
  2715  0009A8  0101               	movlb	1	; () banked
  2716  0009AA  4B1D               	infsnz	main@i_795& (0+255),f,b
  2717  0009AC  2B1E               	incf	(main@i_795+1)& (0+255),f,b
  2718  0009AE  D7E9               	goto	l4393
  2719  0009B0                     l230:
  2720                           
  2721                           ; BSR set to: 1
  2722                           ;main.c: 220: }
  2723                           ;main.c: 221: }
  2724                           ;main.c: 222: INTCONbits.GIE_GIEH = 1;
  2725  0009B0  8EF2               	bsf	intcon,7,c	;volatile
  2726  0009B2                     l4401:
  2727                           
  2728                           ; BSR set to: 1
  2729  0009B2  0100               	movlb	0	; () banked
  2730  0009B4  51CD               	movf	_credentials_accepted& (0+255),w,b	;volatile
  2731  0009B6  B4D8               	btfsc	status,2,c
  2732  0009B8  EFC4  F000         	goto	l4155
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;main.c: 223: }
  2736                           ;main.c: 227: Lcd_Set_Cursor(1,1);
  2737                           
  2738                           ; BSR set to: 0
  2739  0009BC  0E01               	movlw	1
  2740  0009BE  6E12               	movwf	Lcd_Set_Cursor@b,c
  2741  0009C0  0E01               	movlw	1
  2742  0009C2  EC73  F00C         	call	_Lcd_Set_Cursor
  2743                           
  2744                           ;main.c: 228: unsigned char is_leading_zero = 1, n_c = 0;
  2745  0009C6  0E01               	movlw	1
  2746  0009C8  0101               	movlb	1	; () banked
  2747  0009CA  6F1F               	movwf	main@is_leading_zero& (0+255),b
  2748                           
  2749                           ; BSR set to: 1
  2750  0009CC  0E00               	movlw	0
  2751  0009CE  0101               	movlb	1	; () banked
  2752  0009D0  6F15               	movwf	main@n_c& (0+255),b
  2753                           
  2754                           ; BSR set to: 1
  2755                           ;main.c: 229: for (int i = 0; i < 9; i++)
  2756  0009D2  0E00               	movlw	0
  2757  0009D4  0101               	movlb	1	; () banked
  2758  0009D6  6F2A               	movwf	(main@i_798+1)& (0+255),b
  2759  0009D8  0E00               	movlw	0
  2760  0009DA  6F29               	movwf	main@i_798& (0+255),b
  2761  0009DC                     l4411:
  2762                           
  2763                           ; BSR set to: 1
  2764  0009DC  0101               	movlb	1	; () banked
  2765  0009DE  BF2A               	btfsc	(main@i_798+1)& (0+255),7,b
  2766  0009E0  D008               	goto	l4415
  2767  0009E2  0101               	movlb	1	; () banked
  2768  0009E4  512A               	movf	(main@i_798+1)& (0+255),w,b
  2769  0009E6  E12A               	bnz	l4433
  2770  0009E8  0E09               	movlw	9
  2771  0009EA  0101               	movlb	1	; () banked
  2772  0009EC  5D29               	subwf	main@i_798& (0+255),w,b
  2773  0009EE  B0D8               	btfsc	status,0,c
  2774  0009F0  D025               	goto	l4433
  2775  0009F2                     l4415:
  2776                           
  2777                           ; BSR set to: 1
  2778                           ;main.c: 230: {
  2779                           ;main.c: 231: if ((current_user[i] == '0')&&(is_leading_zero))
  2780  0009F2  0EC3               	movlw	low _current_user
  2781  0009F4  0101               	movlb	1	; () banked
  2782  0009F6  2529               	addwf	main@i_798& (0+255),w,b
  2783  0009F8  6ED9               	movwf	fsr2l,c
  2784  0009FA  0E00               	movlw	high _current_user
  2785  0009FC  0101               	movlb	1	; () banked
  2786  0009FE  212A               	addwfc	(main@i_798+1)& (0+255),w,b
  2787  000A00  6EDA               	movwf	fsr2h,c
  2788  000A02  0E30               	movlw	48
  2789  000A04  18DE               	xorwf	postinc2,w,c
  2790  000A06  A4D8               	btfss	status,2,c
  2791  000A08  D005               	goto	l4423
  2792                           
  2793                           ; BSR set to: 1
  2794  000A0A  0101               	movlb	1	; () banked
  2795  000A0C  511F               	movf	main@is_leading_zero& (0+255),w,b
  2796  000A0E  0101               	movlb	1	; () banked
  2797  000A10  A4D8               	btfss	status,2,c
  2798  000A12  D010               	goto	l4429
  2799  000A14                     l4423:
  2800                           
  2801                           ; BSR set to: 1
  2802                           ;main.c: 233: else
  2803                           ;main.c: 234: {
  2804                           ;main.c: 235: is_leading_zero = 0;
  2805  000A14  0E00               	movlw	0
  2806  000A16  0101               	movlb	1	; () banked
  2807  000A18  6F1F               	movwf	main@is_leading_zero& (0+255),b
  2808                           
  2809                           ; BSR set to: 1
  2810                           ;main.c: 236: n_c++;
  2811  000A1A  0101               	movlb	1	; () banked
  2812  000A1C  2B15               	incf	main@n_c& (0+255),f,b
  2813                           
  2814                           ; BSR set to: 1
  2815                           ;main.c: 237: Lcd_Write_Char(current_user[i]);
  2816  000A1E  0EC3               	movlw	low _current_user
  2817  000A20  0101               	movlb	1	; () banked
  2818  000A22  2529               	addwf	main@i_798& (0+255),w,b
  2819  000A24  6ED9               	movwf	fsr2l,c
  2820  000A26  0E00               	movlw	high _current_user
  2821  000A28  0101               	movlb	1	; () banked
  2822  000A2A  212A               	addwfc	(main@i_798+1)& (0+255),w,b
  2823  000A2C  6EDA               	movwf	fsr2h,c
  2824  000A2E  50DF               	movf	indf2,w,c
  2825  000A30  EC9B  F00C         	call	_Lcd_Write_Char
  2826  000A34                     l4429:
  2827  000A34  0101               	movlb	1	; () banked
  2828  000A36  4B29               	infsnz	main@i_798& (0+255),f,b
  2829  000A38  2B2A               	incf	(main@i_798+1)& (0+255),f,b
  2830  000A3A  D7D0               	goto	l4411
  2831  000A3C                     l4433:
  2832                           
  2833                           ; BSR set to: 1
  2834                           ;main.c: 238: }
  2835                           ;main.c: 239: }
  2836                           ;main.c: 240: for (int i = 0; i < 13 - n_c; i++)
  2837  000A3C  0E00               	movlw	0
  2838  000A3E  0101               	movlb	1	; () banked
  2839  000A40  6F14               	movwf	(main@i_799+1)& (0+255),b
  2840  000A42  0E00               	movlw	0
  2841  000A44  6F13               	movwf	main@i_799& (0+255),b
  2842  000A46  D006               	goto	l4439
  2843  000A48                     l4435:
  2844                           
  2845                           ;main.c: 241: Lcd_Write_Char(' ');
  2846  000A48  0E20               	movlw	32
  2847  000A4A  EC9B  F00C         	call	_Lcd_Write_Char
  2848  000A4E  0101               	movlb	1	; () banked
  2849  000A50  4B13               	infsnz	main@i_799& (0+255),f,b
  2850  000A52  2B14               	incf	(main@i_799+1)& (0+255),f,b
  2851  000A54                     l4439:
  2852                           
  2853                           ; BSR set to: 1
  2854  000A54  0101               	movlb	1	; () banked
  2855  000A56  5115               	movf	main@n_c& (0+255),w,b
  2856  000A58  0100               	movlb	0	; () banked
  2857  000A5A  6FB2               	movwf	??_main& (0+255),b
  2858  000A5C  6BB3               	clrf	(??_main+1)& (0+255),b
  2859  000A5E  0100               	movlb	0	; () banked
  2860  000A60  1FB2               	comf	??_main& (0+255),f,b
  2861  000A62  1FB3               	comf	(??_main+1)& (0+255),f,b
  2862  000A64  4BB2               	infsnz	??_main& (0+255),f,b
  2863  000A66  2BB3               	incf	(??_main+1)& (0+255),f,b
  2864  000A68  0E0D               	movlw	13
  2865  000A6A  0100               	movlb	0	; () banked
  2866  000A6C  27B2               	addwf	??_main& (0+255),f,b
  2867  000A6E  0E00               	movlw	0
  2868  000A70  23B3               	addwfc	(??_main+1)& (0+255),f,b
  2869  000A72  0100               	movlb	0	; () banked
  2870  000A74  51B2               	movf	??_main& (0+255),w,b
  2871  000A76  0101               	movlb	1	; () banked
  2872  000A78  5D13               	subwf	main@i_799& (0+255),w,b
  2873  000A7A  0101               	movlb	1	; () banked
  2874  000A7C  5114               	movf	(main@i_799+1)& (0+255),w,b
  2875  000A7E  0A80               	xorlw	128
  2876  000A80  0100               	movlb	0	; () banked
  2877  000A82  6FB4               	movwf	(??_main+2)& (0+255),b
  2878  000A84  0100               	movlb	0	; () banked
  2879  000A86  51B3               	movf	(??_main+1)& (0+255),w,b
  2880  000A88  0A80               	xorlw	128
  2881  000A8A  0100               	movlb	0	; () banked
  2882  000A8C  59B4               	subwfb	(??_main+2)& (0+255),w,b
  2883  000A8E  A0D8               	btfss	status,0,c
  2884  000A90  D7DB               	goto	l4435
  2885                           
  2886                           ; BSR set to: 0
  2887                           ;main.c: 242: Lcd_Set_Cursor(1,14);
  2888                           
  2889                           ; BSR set to: 0
  2890  000A92  0E0E               	movlw	14
  2891  000A94  6E12               	movwf	Lcd_Set_Cursor@b,c
  2892  000A96  0E01               	movlw	1
  2893  000A98  EC73  F00C         	call	_Lcd_Set_Cursor
  2894                           
  2895                           ;main.c: 243: unsigned char a, digits[] = {' '};
  2896  000A9C  C08D  F12F         	movff	main@F3695,main@digits
  2897                           
  2898                           ;main.c: 244: a = I2C_ADDR - 0x0F;
  2899  000AA0  0100               	movlb	0	; () banked
  2900  000AA2  51CE               	movf	_I2C_ADDR& (0+255),w,b
  2901  000AA4  0FF1               	addlw	241
  2902  000AA6  0101               	movlb	1	; () banked
  2903  000AA8  6F20               	movwf	main@a& (0+255),b
  2904                           
  2905                           ; BSR set to: 1
  2906                           ;main.c: 245: digits[0] = (a / 100);
  2907  000AAA  C120  F010         	movff	main@a,___awdiv@dividend
  2908  000AAE  6A11               	clrf	___awdiv@dividend+1,c
  2909  000AB0  0E00               	movlw	0
  2910  000AB2  6E13               	movwf	___awdiv@divisor+1,c
  2911  000AB4  0E64               	movlw	100
  2912  000AB6  6E12               	movwf	___awdiv@divisor,c
  2913  000AB8  EC2B  F00B         	call	___awdiv	;wreg free
  2914  000ABC  5010               	movf	?___awdiv,w,c
  2915  000ABE  0101               	movlb	1	; () banked
  2916  000AC0  6F2F               	movwf	main@digits& (0+255),b
  2917                           
  2918                           ; BSR set to: 1
  2919                           ;main.c: 246: digits[1] = (((a-(digits[0]*100))) / 10);
  2920  000AC2  0101               	movlb	1	; () banked
  2921  000AC4  512F               	movf	main@digits& (0+255),w,b
  2922  000AC6  0D64               	mullw	100
  2923  000AC8  1EF3               	comf	prodl,f,c
  2924  000ACA  1EF4               	comf	prodh,f,c
  2925  000ACC  4AF3               	infsnz	prodl,f,c
  2926  000ACE  2AF4               	incf	prodh,f,c
  2927  000AD0  0101               	movlb	1	; () banked
  2928  000AD2  5120               	movf	main@a& (0+255),w,b
  2929  000AD4  24F3               	addwf	prodl,w,c
  2930  000AD6  6E10               	movwf	___awdiv@dividend,c
  2931  000AD8  0E00               	movlw	0
  2932  000ADA  20F4               	addwfc	prodh,w,c
  2933  000ADC  6E11               	movwf	___awdiv@dividend+1,c
  2934  000ADE  0E00               	movlw	0
  2935  000AE0  6E13               	movwf	___awdiv@divisor+1,c
  2936  000AE2  0E0A               	movlw	10
  2937  000AE4  6E12               	movwf	___awdiv@divisor,c
  2938  000AE6  EC2B  F00B         	call	___awdiv	;wreg free
  2939  000AEA  5010               	movf	?___awdiv,w,c
  2940  000AEC  0101               	movlb	1	; () banked
  2941  000AEE  6F30               	movwf	(main@digits+1)& (0+255),b
  2942                           
  2943                           ; BSR set to: 1
  2944                           ;main.c: 247: digits[2] = (a - (digits[0]*100+digits[1]*10));
  2945  000AF0  0101               	movlb	1	; () banked
  2946  000AF2  5130               	movf	(main@digits+1)& (0+255),w,b
  2947  000AF4  0D0A               	mullw	10
  2948  000AF6  CFF3 F0B2          	movff	prodl,??_main
  2949  000AFA  0101               	movlb	1	; () banked
  2950  000AFC  512F               	movf	main@digits& (0+255),w,b
  2951  000AFE  0D64               	mullw	100
  2952  000B00  50F3               	movf	prodl,w,c
  2953  000B02  0100               	movlb	0	; () banked
  2954  000B04  25B2               	addwf	??_main& (0+255),w,b
  2955  000B06  0800               	sublw	0
  2956  000B08  0101               	movlb	1	; () banked
  2957  000B0A  2520               	addwf	main@a& (0+255),w,b
  2958  000B0C  0101               	movlb	1	; () banked
  2959  000B0E  6F31               	movwf	(main@digits+2)& (0+255),b
  2960                           
  2961                           ; BSR set to: 1
  2962                           ;main.c: 248: is_leading_zero = 1;
  2963  000B10  0E01               	movlw	1
  2964  000B12  0101               	movlb	1	; () banked
  2965  000B14  6F1F               	movwf	main@is_leading_zero& (0+255),b
  2966                           
  2967                           ; BSR set to: 1
  2968                           ;main.c: 249: for (int i = 0; i < 3; i++)
  2969  000B16  0E00               	movlw	0
  2970  000B18  0101               	movlb	1	; () banked
  2971  000B1A  6F2E               	movwf	(main@i_803+1)& (0+255),b
  2972  000B1C  0E00               	movlw	0
  2973  000B1E  6F2D               	movwf	main@i_803& (0+255),b
  2974  000B20                     l4457:
  2975                           
  2976                           ; BSR set to: 1
  2977  000B20  0101               	movlb	1	; () banked
  2978  000B22  BF2E               	btfsc	(main@i_803+1)& (0+255),7,b
  2979  000B24  D008               	goto	l4461
  2980  000B26  0101               	movlb	1	; () banked
  2981  000B28  512E               	movf	(main@i_803+1)& (0+255),w,b
  2982  000B2A  E14A               	bnz	l4479
  2983  000B2C  0E03               	movlw	3
  2984  000B2E  0101               	movlb	1	; () banked
  2985  000B30  5D2D               	subwf	main@i_803& (0+255),w,b
  2986  000B32  B0D8               	btfsc	status,0,c
  2987  000B34  D045               	goto	l4479
  2988  000B36                     l4461:
  2989                           
  2990                           ; BSR set to: 1
  2991                           ;main.c: 250: {
  2992                           ;main.c: 251: digits[i] = c[digits[i]];
  2993  000B36  0E2F               	movlw	low main@digits
  2994  000B38  0101               	movlb	1	; () banked
  2995  000B3A  252D               	addwf	main@i_803& (0+255),w,b
  2996  000B3C  6ED9               	movwf	fsr2l,c
  2997  000B3E  0E01               	movlw	high main@digits
  2998  000B40  0101               	movlb	1	; () banked
  2999  000B42  212E               	addwfc	(main@i_803+1)& (0+255),w,b
  3000  000B44  6EDA               	movwf	fsr2h,c
  3001  000B46  50DF               	movf	indf2,w,c
  3002  000B48  0100               	movlb	0	; () banked
  3003  000B4A  6FB2               	movwf	??_main& (0+255),b
  3004  000B4C  0100               	movlb	0	; () banked
  3005  000B4E  51B2               	movf	??_main& (0+255),w,b
  3006  000B50  0D01               	mullw	1
  3007  000B52  0E80               	movlw	low _c
  3008  000B54  24F3               	addwf	prodl,w,c
  3009  000B56  6ED9               	movwf	fsr2l,c
  3010  000B58  0E00               	movlw	high _c
  3011  000B5A  20F4               	addwfc	prodh,w,c
  3012  000B5C  6EDA               	movwf	fsr2h,c
  3013  000B5E  0E2F               	movlw	low main@digits
  3014  000B60  0101               	movlb	1	; () banked
  3015  000B62  252D               	addwf	main@i_803& (0+255),w,b
  3016  000B64  6EE1               	movwf	fsr1l,c
  3017  000B66  0E01               	movlw	high main@digits
  3018  000B68  0101               	movlb	1	; () banked
  3019  000B6A  212E               	addwfc	(main@i_803+1)& (0+255),w,b
  3020  000B6C  6EE2               	movwf	fsr1h,c
  3021  000B6E  CFDF FFE7          	movff	indf2,indf1
  3022                           
  3023                           ; BSR set to: 1
  3024                           ;main.c: 252: if ((digits[i] == '0')&&(is_leading_zero))
  3025  000B72  0E2F               	movlw	low main@digits
  3026  000B74  0101               	movlb	1	; () banked
  3027  000B76  252D               	addwf	main@i_803& (0+255),w,b
  3028  000B78  6ED9               	movwf	fsr2l,c
  3029  000B7A  0E01               	movlw	high main@digits
  3030  000B7C  0101               	movlb	1	; () banked
  3031  000B7E  212E               	addwfc	(main@i_803+1)& (0+255),w,b
  3032  000B80  6EDA               	movwf	fsr2h,c
  3033  000B82  0E30               	movlw	48
  3034  000B84  18DE               	xorwf	postinc2,w,c
  3035  000B86  A4D8               	btfss	status,2,c
  3036  000B88  D009               	goto	l4471
  3037                           
  3038                           ; BSR set to: 1
  3039  000B8A  0101               	movlb	1	; () banked
  3040  000B8C  511F               	movf	main@is_leading_zero& (0+255),w,b
  3041  000B8E  0101               	movlb	1	; () banked
  3042  000B90  B4D8               	btfsc	status,2,c
  3043  000B92  D004               	goto	l4471
  3044                           
  3045                           ; BSR set to: 1
  3046                           ;main.c: 253: {
  3047                           ;main.c: 254: Lcd_Write_Char(' ');
  3048  000B94  0E20               	movlw	32
  3049  000B96  EC9B  F00C         	call	_Lcd_Write_Char
  3050                           
  3051                           ;main.c: 256: }
  3052                           
  3053                           ;main.c: 255: continue;
  3054  000B9A  D00E               	goto	l4475
  3055  000B9C                     l4471:
  3056                           
  3057                           ;main.c: 257: else
  3058                           ;main.c: 258: {
  3059                           ;main.c: 259: is_leading_zero = 0;
  3060  000B9C  0E00               	movlw	0
  3061  000B9E  0101               	movlb	1	; () banked
  3062  000BA0  6F1F               	movwf	main@is_leading_zero& (0+255),b
  3063                           
  3064                           ; BSR set to: 1
  3065                           ;main.c: 260: Lcd_Write_Char(digits[i]);
  3066  000BA2  0E2F               	movlw	low main@digits
  3067  000BA4  0101               	movlb	1	; () banked
  3068  000BA6  252D               	addwf	main@i_803& (0+255),w,b
  3069  000BA8  6ED9               	movwf	fsr2l,c
  3070  000BAA  0E01               	movlw	high main@digits
  3071  000BAC  0101               	movlb	1	; () banked
  3072  000BAE  212E               	addwfc	(main@i_803+1)& (0+255),w,b
  3073  000BB0  6EDA               	movwf	fsr2h,c
  3074  000BB2  50DF               	movf	indf2,w,c
  3075  000BB4  EC9B  F00C         	call	_Lcd_Write_Char
  3076  000BB8                     l4475:
  3077  000BB8  0101               	movlb	1	; () banked
  3078  000BBA  4B2D               	infsnz	main@i_803& (0+255),f,b
  3079  000BBC  2B2E               	incf	(main@i_803+1)& (0+255),f,b
  3080  000BBE  D7B0               	goto	l4457
  3081  000BC0                     l4479:
  3082                           
  3083                           ; BSR set to: 1
  3084                           ;main.c: 261: }
  3085                           ;main.c: 262: }
  3086                           ;main.c: 263: Lcd_Set_Cursor(2,1);
  3087  000BC0  0E01               	movlw	1
  3088  000BC2  6E12               	movwf	Lcd_Set_Cursor@b,c
  3089  000BC4  0E02               	movlw	2
  3090  000BC6  EC73  F00C         	call	_Lcd_Set_Cursor
  3091                           
  3092                           ;main.c: 264: Lcd_Write_String("                ");
  3093  000BCA  0EC1               	movlw	low STR_2
  3094  000BCC  6E14               	movwf	Lcd_Write_String@a,c
  3095  000BCE  0E7E               	movlw	high STR_2
  3096  000BD0  6E15               	movwf	Lcd_Write_String@a+1,c
  3097  000BD2  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  3098  000BD6  EF90  F000         	goto	l4143
  3099  000BDA                     __end_of_main:
  3100                           	opt stack 0
  3101                           tblptru	equ	0xFF8
  3102                           tblptrh	equ	0xFF7
  3103                           tblptrl	equ	0xFF6
  3104                           tablat	equ	0xFF5
  3105                           prodh	equ	0xFF4
  3106                           prodl	equ	0xFF3
  3107                           intcon	equ	0xFF2
  3108                           postinc0	equ	0xFEE
  3109                           wreg	equ	0xFE8
  3110                           indf1	equ	0xFE7
  3111                           postdec1	equ	0xFE5
  3112                           plusw1	equ	0xFE3
  3113                           fsr1h	equ	0xFE2
  3114                           fsr1l	equ	0xFE1
  3115                           indf2	equ	0xFDF
  3116                           postinc2	equ	0xFDE
  3117                           plusw2	equ	0xFDB
  3118                           fsr2h	equ	0xFDA
  3119                           fsr2l	equ	0xFD9
  3120                           status	equ	0xFD8
  3121                           
  3122 ;; *************** function _start_routine *****************
  3123 ;; Defined at:
  3124 ;;		line 420 in file "main.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;		None
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;  i               2   23[BANK0 ] int 
  3129 ;;  i               2   16[BANK0 ] int 
  3130 ;;  i               2   14[BANK0 ] int 
  3131 ;;  i               2   12[BANK0 ] int 
  3132 ;;  i               2   21[BANK0 ] int 
  3133 ;;  i               2   30[BANK0 ] int 
  3134 ;;  b               3   18[BANK0 ] unsigned char [3]
  3135 ;;  error_msg       2    2[BANK0 ] PTR unsigned char 
  3136 ;;		 -> STR_27(17), STR_26(17), 
  3137 ;;  new_I2C_addr    1   35[BANK0 ] unsigned char 
  3138 ;;  I2C_new_ADDR    3   25[BANK0 ] unsigned char [3]
  3139 ;;  i               2   10[BANK0 ] int 
  3140 ;;  i               2    8[BANK0 ] int 
  3141 ;;  i               2    6[BANK0 ] int 
  3142 ;;  n               1   34[BANK0 ] unsigned char 
  3143 ;;  x               1   33[BANK0 ] unsigned char 
  3144 ;;  dh              1   32[BANK0 ] unsigned char 
  3145 ;;  dt              1   29[BANK0 ] unsigned char 
  3146 ;;  a               1   28[BANK0 ] unsigned char 
  3147 ;;  v               1    5[BANK0 ] unsigned char 
  3148 ;;  d1              1    4[BANK0 ] unsigned char 
  3149 ;;  l               1    1[BANK0 ] unsigned char 
  3150 ;;  h               1    0[BANK0 ] unsigned char 
  3151 ;; Return value:  Size  Location     Type
  3152 ;;                  1    wreg      void 
  3153 ;; Registers used:
  3154 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3155 ;; Tracked objects:
  3156 ;;		On entry : 0/0
  3157 ;;		On exit  : 0/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3160 ;;      Params:         0       0       0       0       0       0       0
  3161 ;;      Locals:         0      36       0       0       0       0       0
  3162 ;;      Temps:          4       0       0       0       0       0       0
  3163 ;;      Totals:         4      36       0       0       0       0       0
  3164 ;;Total ram usage:       40 bytes
  3165 ;; Hardware stack levels used:    1
  3166 ;; Hardware stack levels required when called:    5
  3167 ;; This function calls:
  3168 ;;		_Eeprom_Write_Byte
  3169 ;;		_Lcd_Clear
  3170 ;;		_Lcd_Set_Cursor
  3171 ;;		_Lcd_Write_Char
  3172 ;;		_Lcd_Write_String
  3173 ;;		___awdiv
  3174 ;;		_latch_keypad
  3175 ;;		_menu_progress_bar
  3176 ;;		_read_keypad
  3177 ;; This function is called by:
  3178 ;;		_main
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           	psect	text1
  3183  000BDA                     __ptext1:
  3184                           	opt stack 0
  3185  000BDA                     _start_routine:
  3186                           	opt stack 25
  3187                           
  3188                           ;main.c: 425: Lcd_Clear();
  3189                           
  3190                           ;incstack = 0
  3191  000BDA  EC3D  F00D         	call	_Lcd_Clear	;wreg free
  3192                           
  3193                           ;main.c: 426: Lcd_Set_Cursor(1, 1);
  3194  000BDE  0E01               	movlw	1
  3195  000BE0  6E12               	movwf	Lcd_Set_Cursor@b,c
  3196  000BE2  0E01               	movlw	1
  3197  000BE4  EC73  F00C         	call	_Lcd_Set_Cursor
  3198                           
  3199                           ;main.c: 427: Lcd_Write_String("   [ Aditum ]   ");
  3200  000BE8  0EE3               	movlw	low STR_14
  3201  000BEA  6E14               	movwf	Lcd_Write_String@a,c
  3202  000BEC  0E7E               	movlw	high STR_14
  3203  000BEE  6E15               	movwf	Lcd_Write_String@a+1,c
  3204  000BF0  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  3205                           
  3206                           ;main.c: 428: for (int i = 0; i < 20; i++)
  3207  000BF4  0E00               	movlw	0
  3208  000BF6  0100               	movlb	0	; () banked
  3209  000BF8  6F95               	movwf	(start_routine@i+1)& (0+255),b
  3210  000BFA  0E00               	movlw	0
  3211  000BFC  6F94               	movwf	start_routine@i& (0+255),b
  3212  000BFE                     l3741:
  3213                           
  3214                           ; BSR set to: 0
  3215  000BFE  0100               	movlb	0	; () banked
  3216  000C00  BF95               	btfsc	(start_routine@i+1)& (0+255),7,b
  3217  000C02  D008               	goto	l3745
  3218  000C04  0100               	movlb	0	; () banked
  3219  000C06  5195               	movf	(start_routine@i+1)& (0+255),w,b
  3220  000C08  E112               	bnz	l3749
  3221  000C0A  0E14               	movlw	20
  3222  000C0C  0100               	movlb	0	; () banked
  3223  000C0E  5D94               	subwf	start_routine@i& (0+255),w,b
  3224  000C10  B0D8               	btfsc	status,0,c
  3225  000C12  D00D               	goto	l3749
  3226  000C14                     l3745:
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;main.c: 429: _delay((unsigned long)((20)*(16000000/4000.0)));
  3230  000C14  0E68               	movlw	104
  3231  000C16  6E31               	movwf	??_start_routine& (0+255),c
  3232  000C18  0EE4               	movlw	228
  3233  000C1A                     u4397:
  3234  000C1A  2EE8               	decfsz	wreg,f,c
  3235  000C1C  D7FE               	goto	u4397
  3236  000C1E  2E31               	decfsz	??_start_routine& (0+255),f,c
  3237  000C20  D7FC               	goto	u4397
  3238  000C22  F000 F000          	nop2	
  3239  000C26  0100               	movlb	0	; () banked
  3240  000C28  4B94               	infsnz	start_routine@i& (0+255),f,b
  3241  000C2A  2B95               	incf	(start_routine@i+1)& (0+255),f,b
  3242  000C2C  D7E8               	goto	l3741
  3243  000C2E                     l3749:
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;main.c: 430: Lcd_Set_Cursor(2,1);
  3247  000C2E  0E01               	movlw	1
  3248  000C30  6E12               	movwf	Lcd_Set_Cursor@b,c
  3249  000C32  0E02               	movlw	2
  3250  000C34  EC73  F00C         	call	_Lcd_Set_Cursor
  3251                           
  3252                           ;main.c: 431: Lcd_Write_String("Rev ");
  3253  000C38  0EF3               	movlw	low STR_15
  3254  000C3A  6E14               	movwf	Lcd_Write_String@a,c
  3255  000C3C  0E7F               	movlw	high STR_15
  3256  000C3E  6E15               	movwf	Lcd_Write_String@a+1,c
  3257  000C40  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  3258                           
  3259                           ;main.c: 432: Lcd_Write_String("1.0.0");
  3260  000C44  0EED               	movlw	low STR_16
  3261  000C46  6E14               	movwf	Lcd_Write_String@a,c
  3262  000C48  0E7F               	movlw	high STR_16
  3263  000C4A  6E15               	movwf	Lcd_Write_String@a+1,c
  3264  000C4C  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  3265                           
  3266                           ;main.c: 433: for (int i = 0; i < 50; i++)
  3267  000C50  0E00               	movlw	0
  3268  000C52  0100               	movlb	0	; () banked
  3269  000C54  6F97               	movwf	(start_routine@i_875+1)& (0+255),b
  3270  000C56  0E00               	movlw	0
  3271  000C58  6F96               	movwf	start_routine@i_875& (0+255),b
  3272  000C5A                     l3757:
  3273                           
  3274                           ; BSR set to: 0
  3275  000C5A  0100               	movlb	0	; () banked
  3276  000C5C  BF97               	btfsc	(start_routine@i_875+1)& (0+255),7,b
  3277  000C5E  D008               	goto	l3761
  3278  000C60  0100               	movlb	0	; () banked
  3279  000C62  5197               	movf	(start_routine@i_875+1)& (0+255),w,b
  3280  000C64  E112               	bnz	l3765
  3281  000C66  0E32               	movlw	50
  3282  000C68  0100               	movlb	0	; () banked
  3283  000C6A  5D96               	subwf	start_routine@i_875& (0+255),w,b
  3284  000C6C  B0D8               	btfsc	status,0,c
  3285  000C6E  D00D               	goto	l3765
  3286  000C70                     l3761:
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;main.c: 434: _delay((unsigned long)((20)*(16000000/4000.0)));
  3290  000C70  0E68               	movlw	104
  3291  000C72  6E31               	movwf	??_start_routine& (0+255),c
  3292  000C74  0EE4               	movlw	228
  3293  000C76                     u4407:
  3294  000C76  2EE8               	decfsz	wreg,f,c
  3295  000C78  D7FE               	goto	u4407
  3296  000C7A  2E31               	decfsz	??_start_routine& (0+255),f,c
  3297  000C7C  D7FC               	goto	u4407
  3298  000C7E  F000 F000          	nop2	
  3299  000C82  0100               	movlb	0	; () banked
  3300  000C84  4B96               	infsnz	start_routine@i_875& (0+255),f,b
  3301  000C86  2B97               	incf	(start_routine@i_875+1)& (0+255),f,b
  3302  000C88  D7E8               	goto	l3757
  3303  000C8A                     l3765:
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;main.c: 435: Lcd_Set_Cursor(2,1);
  3307  000C8A  0E01               	movlw	1
  3308  000C8C  6E12               	movwf	Lcd_Set_Cursor@b,c
  3309  000C8E  0E02               	movlw	2
  3310  000C90  EC73  F00C         	call	_Lcd_Set_Cursor
  3311                           
  3312                           ;main.c: 436: Lcd_Write_String("Device ID ");
  3313  000C94  0EE2               	movlw	low STR_17
  3314  000C96  6E14               	movwf	Lcd_Write_String@a,c
  3315  000C98  0E7F               	movlw	high STR_17
  3316  000C9A  6E15               	movwf	Lcd_Write_String@a+1,c
  3317  000C9C  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  3318                           
  3319                           ;main.c: 437: unsigned char a, h, l, dh, dt, d1;
  3320                           ;main.c: 438: if (I2C_ADDR != 0)
  3321  000CA0  0100               	movlb	0	; () banked
  3322  000CA2  51CE               	movf	_I2C_ADDR& (0+255),w,b
  3323  000CA4  B4D8               	btfsc	status,2,c
  3324  000CA6  D004               	goto	l3773
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;main.c: 439: a = I2C_ADDR - 0x0F;
  3328  000CA8  0100               	movlb	0	; () banked
  3329  000CAA  51CE               	movf	_I2C_ADDR& (0+255),w,b
  3330  000CAC  0FF1               	addlw	241
  3331  000CAE  D001               	goto	L4
  3332  000CB0                     l3773:
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;main.c: 440: else
  3336                           ;main.c: 441: a = 0;
  3337  000CB0  0E00               	movlw	0
  3338  000CB2                     L4:
  3339  000CB2  0100               	movlb	0	; () banked
  3340  000CB4  6FAA               	movwf	start_routine@a& (0+255),b
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;main.c: 443: dh = (a / 100);
  3344                           
  3345                           ; BSR set to: 0
  3346  000CB6  C0AA  F010         	movff	start_routine@a,___awdiv@dividend
  3347  000CBA  6A11               	clrf	___awdiv@dividend+1,c
  3348  000CBC  0E00               	movlw	0
  3349  000CBE  6E13               	movwf	___awdiv@divisor+1,c
  3350  000CC0  0E64               	movlw	100
  3351  000CC2  6E12               	movwf	___awdiv@divisor,c
  3352  000CC4  EC2B  F00B         	call	___awdiv	;wreg free
  3353  000CC8  5010               	movf	?___awdiv,w,c
  3354  000CCA  0100               	movlb	0	; () banked
  3355  000CCC  6FAE               	movwf	start_routine@dh& (0+255),b
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;main.c: 444: dt = (a - dh*100) / 10;
  3359  000CCE  0100               	movlb	0	; () banked
  3360  000CD0  51AE               	movf	start_routine@dh& (0+255),w,b
  3361  000CD2  0D64               	mullw	100
  3362  000CD4  1EF3               	comf	prodl,f,c
  3363  000CD6  1EF4               	comf	prodh,f,c
  3364  000CD8  4AF3               	infsnz	prodl,f,c
  3365  000CDA  2AF4               	incf	prodh,f,c
  3366  000CDC  0100               	movlb	0	; () banked
  3367  000CDE  51AA               	movf	start_routine@a& (0+255),w,b
  3368  000CE0  24F3               	addwf	prodl,w,c
  3369  000CE2  6E10               	movwf	___awdiv@dividend,c
  3370  000CE4  0E00               	movlw	0
  3371  000CE6  20F4               	addwfc	prodh,w,c
  3372  000CE8  6E11               	movwf	___awdiv@dividend+1,c
  3373  000CEA  0E00               	movlw	0
  3374  000CEC  6E13               	movwf	___awdiv@divisor+1,c
  3375  000CEE  0E0A               	movlw	10
  3376  000CF0  6E12               	movwf	___awdiv@divisor,c
  3377  000CF2  EC2B  F00B         	call	___awdiv	;wreg free
  3378  000CF6  5010               	movf	?___awdiv,w,c
  3379  000CF8  0100               	movlb	0	; () banked
  3380  000CFA  6FAB               	movwf	start_routine@dt& (0+255),b
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;main.c: 445: d1 = (a - (dh*100+dt*10));
  3384  000CFC  0100               	movlb	0	; () banked
  3385  000CFE  51AB               	movf	start_routine@dt& (0+255),w,b
  3386  000D00  0D0A               	mullw	10
  3387  000D02  CFF3 F031          	movff	prodl,??_start_routine
  3388  000D06  0100               	movlb	0	; () banked
  3389  000D08  51AE               	movf	start_routine@dh& (0+255),w,b
  3390  000D0A  0D64               	mullw	100
  3391  000D0C  50F3               	movf	prodl,w,c
  3392  000D0E  2431               	addwf	??_start_routine,w,c
  3393  000D10  0800               	sublw	0
  3394  000D12  0100               	movlb	0	; () banked
  3395  000D14  25AA               	addwf	start_routine@a& (0+255),w,b
  3396  000D16  0100               	movlb	0	; () banked
  3397  000D18  6F92               	movwf	start_routine@d1& (0+255),b
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;main.c: 446: Lcd_Write_Char(c[dh]);
  3401  000D1A  0100               	movlb	0	; () banked
  3402  000D1C  51AE               	movf	start_routine@dh& (0+255),w,b
  3403  000D1E  0D01               	mullw	1
  3404  000D20  0E80               	movlw	low _c
  3405  000D22  24F3               	addwf	prodl,w,c
  3406  000D24  6ED9               	movwf	fsr2l,c
  3407  000D26  0E00               	movlw	high _c
  3408  000D28  20F4               	addwfc	prodh,w,c
  3409  000D2A  6EDA               	movwf	fsr2h,c
  3410  000D2C  50DF               	movf	indf2,w,c
  3411  000D2E  EC9B  F00C         	call	_Lcd_Write_Char
  3412                           
  3413                           ;main.c: 447: Lcd_Write_Char(c[dt]);
  3414  000D32  0100               	movlb	0	; () banked
  3415  000D34  51AB               	movf	start_routine@dt& (0+255),w,b
  3416  000D36  0D01               	mullw	1
  3417  000D38  0E80               	movlw	low _c
  3418  000D3A  24F3               	addwf	prodl,w,c
  3419  000D3C  6ED9               	movwf	fsr2l,c
  3420  000D3E  0E00               	movlw	high _c
  3421  000D40  20F4               	addwfc	prodh,w,c
  3422  000D42  6EDA               	movwf	fsr2h,c
  3423  000D44  50DF               	movf	indf2,w,c
  3424  000D46  EC9B  F00C         	call	_Lcd_Write_Char
  3425                           
  3426                           ;main.c: 448: Lcd_Write_Char(c[d1]);
  3427  000D4A  0100               	movlb	0	; () banked
  3428  000D4C  5192               	movf	start_routine@d1& (0+255),w,b
  3429  000D4E  0D01               	mullw	1
  3430  000D50  0E80               	movlw	low _c
  3431  000D52  24F3               	addwf	prodl,w,c
  3432  000D54  6ED9               	movwf	fsr2l,c
  3433  000D56  0E00               	movlw	high _c
  3434  000D58  20F4               	addwfc	prodh,w,c
  3435  000D5A  6EDA               	movwf	fsr2h,c
  3436  000D5C  50DF               	movf	indf2,w,c
  3437  000D5E  EC9B  F00C         	call	_Lcd_Write_Char
  3438                           
  3439                           ;main.c: 449: Lcd_Write_Char('|');
  3440  000D62  0E7C               	movlw	124
  3441  000D64  EC9B  F00C         	call	_Lcd_Write_Char
  3442                           
  3443                           ;main.c: 450: Lcd_Write_Char(hx[I2C_ADDR/16]);
  3444  000D68  C0CE  F010         	movff	_I2C_ADDR,___awdiv@dividend
  3445  000D6C  6A11               	clrf	___awdiv@dividend+1,c
  3446  000D6E  0E00               	movlw	0
  3447  000D70  6E13               	movwf	___awdiv@divisor+1,c
  3448  000D72  0E10               	movlw	16
  3449  000D74  6E12               	movwf	___awdiv@divisor,c
  3450  000D76  EC2B  F00B         	call	___awdiv	;wreg free
  3451  000D7A  0E53               	movlw	low _hx
  3452  000D7C  2410               	addwf	?___awdiv,w,c
  3453  000D7E  6ED9               	movwf	fsr2l,c
  3454  000D80  0E01               	movlw	high _hx
  3455  000D82  2011               	addwfc	?___awdiv+1,w,c
  3456  000D84  6EDA               	movwf	fsr2h,c
  3457  000D86  50DF               	movf	indf2,w,c
  3458  000D88  EC9B  F00C         	call	_Lcd_Write_Char
  3459                           
  3460                           ;main.c: 451: Lcd_Write_Char(hx[I2C_ADDR - (I2C_ADDR/16)*16]);
  3461  000D8C  C0CE  F010         	movff	_I2C_ADDR,___awdiv@dividend
  3462  000D90  6A11               	clrf	___awdiv@dividend+1,c
  3463  000D92  0E00               	movlw	0
  3464  000D94  6E13               	movwf	___awdiv@divisor+1,c
  3465  000D96  0E10               	movlw	16
  3466  000D98  6E12               	movwf	___awdiv@divisor,c
  3467  000D9A  EC2B  F00B         	call	___awdiv	;wreg free
  3468  000D9E  3A10               	swapf	?___awdiv,f,c
  3469  000DA0  3A11               	swapf	?___awdiv+1,f,c
  3470  000DA2  0EF0               	movlw	240
  3471  000DA4  1611               	andwf	?___awdiv+1,f,c
  3472  000DA6  5010               	movf	?___awdiv,w,c
  3473  000DA8  0B0F               	andlw	15
  3474  000DAA  1211               	iorwf	?___awdiv+1,f,c
  3475  000DAC  0EF0               	movlw	240
  3476  000DAE  1610               	andwf	?___awdiv,f,c
  3477  000DB0  1E10               	comf	?___awdiv,f,c
  3478  000DB2  1E11               	comf	?___awdiv+1,f,c
  3479  000DB4  4A10               	infsnz	?___awdiv,f,c
  3480  000DB6  2A11               	incf	?___awdiv+1,f,c
  3481  000DB8  0100               	movlb	0	; () banked
  3482  000DBA  51CE               	movf	_I2C_ADDR& (0+255),w,b
  3483  000DBC  6E31               	movwf	??_start_routine& (0+255),c
  3484  000DBE  6A32               	clrf	(??_start_routine+1)& (0+255),c
  3485  000DC0  5010               	movf	?___awdiv,w,c
  3486  000DC2  2631               	addwf	??_start_routine,f,c
  3487  000DC4  5011               	movf	?___awdiv+1,w,c
  3488  000DC6  2232               	addwfc	??_start_routine+1,f,c
  3489  000DC8  0E53               	movlw	low _hx
  3490  000DCA  2431               	addwf	??_start_routine,w,c
  3491  000DCC  6ED9               	movwf	fsr2l,c
  3492  000DCE  0E01               	movlw	high _hx
  3493  000DD0  2032               	addwfc	??_start_routine+1,w,c
  3494  000DD2  6EDA               	movwf	fsr2h,c
  3495  000DD4  50DF               	movf	indf2,w,c
  3496  000DD6  EC9B  F00C         	call	_Lcd_Write_Char
  3497                           
  3498                           ;main.c: 452: for (int i = 0; i < 40; i++)
  3499  000DDA  0E00               	movlw	0
  3500  000DDC  0100               	movlb	0	; () banked
  3501  000DDE  6F99               	movwf	(start_routine@i_883+1)& (0+255),b
  3502  000DE0  0E00               	movlw	0
  3503  000DE2  6F98               	movwf	start_routine@i_883& (0+255),b
  3504  000DE4                     l3795:
  3505                           
  3506                           ; BSR set to: 0
  3507  000DE4  0100               	movlb	0	; () banked
  3508  000DE6  BF99               	btfsc	(start_routine@i_883+1)& (0+255),7,b
  3509  000DE8  D008               	goto	l3799
  3510  000DEA  0100               	movlb	0	; () banked
  3511  000DEC  5199               	movf	(start_routine@i_883+1)& (0+255),w,b
  3512  000DEE  E112               	bnz	l3803
  3513  000DF0  0E28               	movlw	40
  3514  000DF2  0100               	movlb	0	; () banked
  3515  000DF4  5D98               	subwf	start_routine@i_883& (0+255),w,b
  3516  000DF6  B0D8               	btfsc	status,0,c
  3517  000DF8  D00D               	goto	l3803
  3518  000DFA                     l3799:
  3519                           
  3520                           ; BSR set to: 0
  3521                           ;main.c: 453: _delay((unsigned long)((20)*(16000000/4000.0)));
  3522  000DFA  0E68               	movlw	104
  3523  000DFC  6E31               	movwf	??_start_routine& (0+255),c
  3524  000DFE  0EE4               	movlw	228
  3525  000E00                     u4417:
  3526  000E00  2EE8               	decfsz	wreg,f,c
  3527  000E02  D7FE               	goto	u4417
  3528  000E04  2E31               	decfsz	??_start_routine& (0+255),f,c
  3529  000E06  D7FC               	goto	u4417
  3530  000E08  F000 F000          	nop2	
  3531  000E0C  0100               	movlb	0	; () banked
  3532  000E0E  4B98               	infsnz	start_routine@i_883& (0+255),f,b
  3533  000E10  2B99               	incf	(start_routine@i_883+1)& (0+255),f,b
  3534  000E12  D7E8               	goto	l3795
  3535  000E14                     l3803:
  3536                           
  3537                           ; BSR set to: 0
  3538                           ;main.c: 454: Lcd_Clear();
  3539  000E14  EC3D  F00D         	call	_Lcd_Clear	;wreg free
  3540                           
  3541                           ;main.c: 455: Lcd_Set_Cursor(1, 1);
  3542  000E18  0E01               	movlw	1
  3543  000E1A  6E12               	movwf	Lcd_Set_Cursor@b,c
  3544  000E1C  0E01               	movlw	1
  3545  000E1E  EC73  F00C         	call	_Lcd_Set_Cursor
  3546                           
  3547                           ;main.c: 456: Lcd_Write_String("  [  Aditum  ]  ");
  3548  000E22  0E38               	movlw	low STR_18
  3549  000E24  6E14               	movwf	Lcd_Write_String@a,c
  3550  000E26  0E7F               	movlw	high STR_18
  3551  000E28  6E15               	movwf	Lcd_Write_String@a+1,c
  3552  000E2A  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  3553                           
  3554                           ;main.c: 457: menu_progress_bar(700);
  3555  000E2E  0E02               	movlw	2
  3556  000E30  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  3557  000E32  0EBC               	movlw	188
  3558  000E34  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  3559  000E36  ECAD  F009         	call	_menu_progress_bar	;wreg free
  3560                           
  3561                           ;main.c: 460: unsigned char x, n = 0, v;
  3562  000E3A  0E00               	movlw	0
  3563  000E3C  0100               	movlb	0	; () banked
  3564  000E3E  6FB0               	movwf	start_routine@n& (0+255),b
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;main.c: 461: if (I2C_ADDR == 0x00)
  3568  000E40  0100               	movlb	0	; () banked
  3569  000E42  51CE               	movf	_I2C_ADDR& (0+255),w,b
  3570  000E44  A4D8               	btfss	status,2,c
  3571  000E46  D285               	goto	l4015
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;main.c: 462: {
  3575                           ;main.c: 463: v = 0;
  3576  000E48  0E00               	movlw	0
  3577  000E4A  0100               	movlb	0	; () banked
  3578  000E4C  6F93               	movwf	start_routine@v& (0+255),b
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;main.c: 464: Lcd_Set_Cursor(1,1);
  3582  000E4E  0E01               	movlw	1
  3583  000E50  6E12               	movwf	Lcd_Set_Cursor@b,c
  3584  000E52  0E01               	movlw	1
  3585  000E54  EC73  F00C         	call	_Lcd_Set_Cursor
  3586                           
  3587                           ;main.c: 465: Lcd_Write_String("Load I2C setup..");
  3588  000E58  0E7C               	movlw	low STR_19
  3589  000E5A  6E14               	movwf	Lcd_Write_String@a,c
  3590  000E5C  0E7F               	movlw	high STR_19
  3591  000E5E  6E15               	movwf	Lcd_Write_String@a+1,c
  3592  000E60  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  3593                           
  3594                           ;main.c: 466: menu_progress_bar(300);
  3595  000E64  0E01               	movlw	1
  3596  000E66  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  3597  000E68  0E2C               	movlw	44
  3598  000E6A  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  3599  000E6C  ECAD  F009         	call	_menu_progress_bar	;wreg free
  3600                           
  3601                           ;main.c: 467: unsigned char I2C_new_ADDR[] = {'0', '0', '0'};
  3602  000E70  C08A  F0A7         	movff	start_routine@F3723,start_routine@I2C_new_ADDR
  3603  000E74  C08B  F0A8         	movff	start_routine@F3723+1,start_routine@I2C_new_ADDR+1
  3604  000E78  C08C  F0A9         	movff	start_routine@F3723+2,start_routine@I2C_new_ADDR+2
  3605                           
  3606                           ;main.c: 468: while (v != 1)
  3607  000E7C  D265               	goto	l4013
  3608  000E7E                     l3825:
  3609                           
  3610                           ;main.c: 469: {
  3611                           ;main.c: 470: Lcd_Set_Cursor(1,1);
  3612  000E7E  0E01               	movlw	1
  3613  000E80  6E12               	movwf	Lcd_Set_Cursor@b,c
  3614  000E82  0E01               	movlw	1
  3615  000E84  EC73  F00C         	call	_Lcd_Set_Cursor
  3616                           
  3617                           ;main.c: 471: Lcd_Write_String("New Machine ID: ");
  3618  000E88  0E49               	movlw	low STR_20
  3619  000E8A  6E14               	movwf	Lcd_Write_String@a,c
  3620  000E8C  0E7F               	movlw	high STR_20
  3621  000E8E  6E15               	movwf	Lcd_Write_String@a+1,c
  3622  000E90  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  3623                           
  3624                           ;main.c: 472: Lcd_Set_Cursor(2,1);
  3625  000E94  0E01               	movlw	1
  3626  000E96  6E12               	movwf	Lcd_Set_Cursor@b,c
  3627  000E98  0E02               	movlw	2
  3628  000E9A  EC73  F00C         	call	_Lcd_Set_Cursor
  3629                           
  3630                           ;main.c: 473: Lcd_Write_String("       [001-100]");
  3631  000E9E  0EAF               	movlw	low STR_21
  3632  000EA0  6E14               	movwf	Lcd_Write_String@a,c
  3633  000EA2  0E7F               	movlw	high STR_21
  3634  000EA4  6E15               	movwf	Lcd_Write_String@a+1,c
  3635  000EA6  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  3636                           
  3637                           ;main.c: 474: Lcd_Set_Cursor(2,1);
  3638  000EAA  0E01               	movlw	1
  3639  000EAC  6E12               	movwf	Lcd_Set_Cursor@b,c
  3640  000EAE  0E02               	movlw	2
  3641  000EB0  EC73  F00C         	call	_Lcd_Set_Cursor
  3642                           
  3643                           ;main.c: 475: Lcd_Write_Char('_');
  3644  000EB4  0E5F               	movlw	95
  3645  000EB6  EC9B  F00C         	call	_Lcd_Write_Char
  3646                           
  3647                           ;main.c: 476: while (n < 3)
  3648  000EBA  D081               	goto	l3877
  3649  000EBC                     l3835:
  3650                           
  3651                           ;main.c: 477: {
  3652                           ;main.c: 478: x = read_keypad();
  3653  000EBC  ECD9  F00A         	call	_read_keypad	;wreg free
  3654  000EC0  0100               	movlb	0	; () banked
  3655  000EC2  6FAF               	movwf	start_routine@x& (0+255),b
  3656                           
  3657                           ; BSR set to: 0
  3658                           ;main.c: 479: if (x != '_')
  3659  000EC4  0E5F               	movlw	95
  3660  000EC6  0100               	movlb	0	; () banked
  3661  000EC8  19AF               	xorwf	start_routine@x& (0+255),w,b
  3662  000ECA  B4D8               	btfsc	status,2,c
  3663  000ECC  D078               	goto	l3877
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;main.c: 480: {
  3667                           ;main.c: 481: if (((x - '#') == 0)&&(n > 0))
  3668  000ECE  0EDD               	movlw	221
  3669  000ED0  6E31               	movwf	??_start_routine& (0+255),c
  3670  000ED2  0EFF               	movlw	255
  3671  000ED4  6E32               	movwf	(??_start_routine+1)& (0+255),c
  3672  000ED6  0100               	movlb	0	; () banked
  3673  000ED8  51AF               	movf	start_routine@x& (0+255),w,b
  3674  000EDA  6E33               	movwf	(??_start_routine+2)& (0+255),c
  3675  000EDC  6A34               	clrf	(??_start_routine+3)& (0+255),c
  3676  000EDE  5031               	movf	??_start_routine,w,c
  3677  000EE0  2633               	addwf	??_start_routine+2,f,c
  3678  000EE2  5032               	movf	??_start_routine+1,w,c
  3679  000EE4  2234               	addwfc	??_start_routine+3,f,c
  3680  000EE6  5033               	movf	??_start_routine+2,w,c
  3681  000EE8  1034               	iorwf	??_start_routine+3,w,c
  3682  000EEA  A4D8               	btfss	status,2,c
  3683  000EEC  D02F               	goto	l3859
  3684                           
  3685                           ; BSR set to: 0
  3686  000EEE  0100               	movlb	0	; () banked
  3687  000EF0  51B0               	movf	start_routine@n& (0+255),w,b
  3688  000EF2  0100               	movlb	0	; () banked
  3689  000EF4  B4D8               	btfsc	status,2,c
  3690  000EF6  D02A               	goto	l3859
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;main.c: 482: {
  3694                           ;main.c: 483: I2C_new_ADDR[n] = 0;
  3695  000EF8  0100               	movlb	0	; () banked
  3696  000EFA  51B0               	movf	start_routine@n& (0+255),w,b
  3697  000EFC  0D01               	mullw	1
  3698  000EFE  0EA7               	movlw	low start_routine@I2C_new_ADDR
  3699  000F00  24F3               	addwf	prodl,w,c
  3700  000F02  6ED9               	movwf	fsr2l,c
  3701  000F04  0E00               	movlw	high start_routine@I2C_new_ADDR
  3702  000F06  20F4               	addwfc	prodh,w,c
  3703  000F08  6EDA               	movwf	fsr2h,c
  3704  000F0A  0E00               	movlw	0
  3705  000F0C  6EDF               	movwf	indf2,c
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;main.c: 484: Lcd_Set_Cursor(2, n);
  3709  000F0E  C0B0  F012         	movff	start_routine@n,Lcd_Set_Cursor@b
  3710  000F12  0E02               	movlw	2
  3711  000F14  EC73  F00C         	call	_Lcd_Set_Cursor
  3712                           
  3713                           ;main.c: 485: Lcd_Write_Char('_');
  3714  000F18  0E5F               	movlw	95
  3715  000F1A  EC9B  F00C         	call	_Lcd_Write_Char
  3716                           
  3717                           ;main.c: 486: latch_keypad(&x);
  3718  000F1E  0EAF               	movlw	low start_routine@x
  3719  000F20  6E10               	movwf	latch_keypad@x,c
  3720  000F22  0E00               	movlw	high start_routine@x
  3721  000F24  6E11               	movwf	latch_keypad@x+1,c
  3722  000F26  ECB7  F00C         	call	_latch_keypad	;wreg free
  3723                           
  3724                           ;main.c: 487: Lcd_Set_Cursor(2, 1 + n);
  3725  000F2A  0100               	movlb	0	; () banked
  3726  000F2C  29B0               	incf	start_routine@n& (0+255),w,b
  3727  000F2E  6E12               	movwf	Lcd_Set_Cursor@b,c
  3728  000F30  0E02               	movlw	2
  3729  000F32  EC73  F00C         	call	_Lcd_Set_Cursor
  3730                           
  3731                           ;main.c: 488: Lcd_Write_Char(' ');
  3732  000F36  0E20               	movlw	32
  3733  000F38  EC9B  F00C         	call	_Lcd_Write_Char
  3734                           
  3735                           ;main.c: 489: Lcd_Set_Cursor(2, n);
  3736  000F3C  C0B0  F012         	movff	start_routine@n,Lcd_Set_Cursor@b
  3737  000F40  0E02               	movlw	2
  3738  000F42  EC73  F00C         	call	_Lcd_Set_Cursor
  3739                           
  3740                           ;main.c: 490: n--;
  3741  000F46  0100               	movlb	0	; () banked
  3742  000F48  07B0               	decf	start_routine@n& (0+255),f,b
  3743                           
  3744                           ;main.c: 491: }
  3745  000F4A  D039               	goto	l3877
  3746  000F4C                     l3859:
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;main.c: 492: else if ((x - '#') != 0)
  3750  000F4C  0EDD               	movlw	221
  3751  000F4E  6E31               	movwf	??_start_routine& (0+255),c
  3752  000F50  0EFF               	movlw	255
  3753  000F52  6E32               	movwf	(??_start_routine+1)& (0+255),c
  3754  000F54  0100               	movlb	0	; () banked
  3755  000F56  51AF               	movf	start_routine@x& (0+255),w,b
  3756  000F58  6E33               	movwf	(??_start_routine+2)& (0+255),c
  3757  000F5A  6A34               	clrf	(??_start_routine+3)& (0+255),c
  3758  000F5C  5031               	movf	??_start_routine,w,c
  3759  000F5E  2633               	addwf	??_start_routine+2,f,c
  3760  000F60  5032               	movf	??_start_routine+1,w,c
  3761  000F62  2234               	addwfc	??_start_routine+3,f,c
  3762  000F64  5033               	movf	??_start_routine+2,w,c
  3763  000F66  1034               	iorwf	??_start_routine+3,w,c
  3764  000F68  B4D8               	btfsc	status,2,c
  3765  000F6A  D029               	goto	l3877
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;main.c: 493: {
  3769                           ;main.c: 494: if ((x == '*')|(n == 3))
  3770  000F6C  0E2A               	movlw	42
  3771  000F6E  0100               	movlb	0	; () banked
  3772  000F70  19AF               	xorwf	start_routine@x& (0+255),w,b
  3773  000F72  B4D8               	btfsc	status,2,c
  3774  000F74  D028               	goto	l3879
  3775                           
  3776                           ; BSR set to: 0
  3777  000F76  0E03               	movlw	3
  3778  000F78  0100               	movlb	0	; () banked
  3779  000F7A  19B0               	xorwf	start_routine@n& (0+255),w,b
  3780  000F7C  B4D8               	btfsc	status,2,c
  3781  000F7E  D023               	goto	l3879
  3782                           
  3783                           ; BSR set to: 0
  3784                           ;main.c: 497: }
  3785                           ;main.c: 498: I2C_new_ADDR[n] = x;
  3786                           
  3787                           ; BSR set to: 0
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;main.c: 495: {
  3791                           ;main.c: 496: break;
  3792  000F80  0100               	movlb	0	; () banked
  3793  000F82  51B0               	movf	start_routine@n& (0+255),w,b
  3794  000F84  0D01               	mullw	1
  3795  000F86  0EA7               	movlw	low start_routine@I2C_new_ADDR
  3796  000F88  24F3               	addwf	prodl,w,c
  3797  000F8A  6ED9               	movwf	fsr2l,c
  3798  000F8C  0E00               	movlw	high start_routine@I2C_new_ADDR
  3799  000F8E  20F4               	addwfc	prodh,w,c
  3800  000F90  6EDA               	movwf	fsr2h,c
  3801  000F92  C0AF  FFDF         	movff	start_routine@x,indf2
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;main.c: 499: n++;
  3805  000F96  0100               	movlb	0	; () banked
  3806  000F98  2BB0               	incf	start_routine@n& (0+255),f,b
  3807                           
  3808                           ; BSR set to: 0
  3809                           ;main.c: 500: Lcd_Set_Cursor(2, n);
  3810  000F9A  C0B0  F012         	movff	start_routine@n,Lcd_Set_Cursor@b
  3811  000F9E  0E02               	movlw	2
  3812  000FA0  EC73  F00C         	call	_Lcd_Set_Cursor
  3813                           
  3814                           ;main.c: 501: Lcd_Write_Char(x);
  3815  000FA4  0100               	movlb	0	; () banked
  3816  000FA6  51AF               	movf	start_routine@x& (0+255),w,b
  3817  000FA8  EC9B  F00C         	call	_Lcd_Write_Char
  3818                           
  3819                           ;main.c: 502: Lcd_Write_Char('_');
  3820  000FAC  0E5F               	movlw	95
  3821  000FAE  EC9B  F00C         	call	_Lcd_Write_Char
  3822                           
  3823                           ;main.c: 503: latch_keypad(&x);
  3824  000FB2  0EAF               	movlw	low start_routine@x
  3825  000FB4  6E10               	movwf	latch_keypad@x,c
  3826  000FB6  0E00               	movlw	high start_routine@x
  3827  000FB8  6E11               	movwf	latch_keypad@x+1,c
  3828  000FBA  ECB7  F00C         	call	_latch_keypad	;wreg free
  3829  000FBE                     l3877:
  3830  000FBE  0E02               	movlw	2
  3831  000FC0  0100               	movlb	0	; () banked
  3832  000FC2  65B0               	cpfsgt	start_routine@n& (0+255),b
  3833  000FC4  D77B               	goto	l3835
  3834  000FC6                     l3879:
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;main.c: 504: }
  3838                           ;main.c: 505: }
  3839                           ;main.c: 506: }
  3840                           ;main.c: 508: unsigned char new_I2C_address = 0;
  3841  000FC6  0E00               	movlw	0
  3842  000FC8  0100               	movlb	0	; () banked
  3843  000FCA  6FB1               	movwf	start_routine@new_I2C_address& (0+255),b
  3844                           
  3845                           ;main.c: 509: unsigned char b[3];
  3846                           ;main.c: 510: for (int i = 0; i < 3; i++)
  3847  000FCC  0E00               	movlw	0
  3848  000FCE  0100               	movlb	0	; () banked
  3849  000FD0  6FAD               	movwf	(start_routine@i_895+1)& (0+255),b
  3850  000FD2  0E00               	movlw	0
  3851  000FD4  6FAC               	movwf	start_routine@i_895& (0+255),b
  3852  000FD6                     l3881:
  3853                           
  3854                           ; BSR set to: 0
  3855  000FD6  0100               	movlb	0	; () banked
  3856  000FD8  BFAD               	btfsc	(start_routine@i_895+1)& (0+255),7,b
  3857  000FDA  D008               	goto	l3885
  3858  000FDC  0100               	movlb	0	; () banked
  3859  000FDE  51AD               	movf	(start_routine@i_895+1)& (0+255),w,b
  3860  000FE0  E11C               	bnz	l3891
  3861  000FE2  0E03               	movlw	3
  3862  000FE4  0100               	movlb	0	; () banked
  3863  000FE6  5DAC               	subwf	start_routine@i_895& (0+255),w,b
  3864  000FE8  B0D8               	btfsc	status,0,c
  3865  000FEA  D017               	goto	l3891
  3866  000FEC                     l3885:
  3867                           
  3868                           ; BSR set to: 0
  3869                           ;main.c: 511: b[i] = I2C_new_ADDR[i] - '0';
  3870  000FEC  0EA0               	movlw	low start_routine@b
  3871  000FEE  0100               	movlb	0	; () banked
  3872  000FF0  25AC               	addwf	start_routine@i_895& (0+255),w,b
  3873  000FF2  6ED9               	movwf	fsr2l,c
  3874  000FF4  0E00               	movlw	high start_routine@b
  3875  000FF6  0100               	movlb	0	; () banked
  3876  000FF8  21AD               	addwfc	(start_routine@i_895+1)& (0+255),w,b
  3877  000FFA  6EDA               	movwf	fsr2h,c
  3878  000FFC  0EA7               	movlw	low start_routine@I2C_new_ADDR
  3879  000FFE  0100               	movlb	0	; () banked
  3880  001000  25AC               	addwf	start_routine@i_895& (0+255),w,b
  3881  001002  6EE1               	movwf	fsr1l,c
  3882  001004  0E00               	movlw	high start_routine@I2C_new_ADDR
  3883  001006  0100               	movlb	0	; () banked
  3884  001008  21AD               	addwfc	(start_routine@i_895+1)& (0+255),w,b
  3885  00100A  6EE2               	movwf	fsr1h,c
  3886  00100C  50E7               	movf	indf1,w,c
  3887  00100E  0FD0               	addlw	208
  3888  001010  6EDF               	movwf	indf2,c
  3889                           
  3890                           ; BSR set to: 0
  3891  001012  0100               	movlb	0	; () banked
  3892  001014  4BAC               	infsnz	start_routine@i_895& (0+255),f,b
  3893  001016  2BAD               	incf	(start_routine@i_895+1)& (0+255),f,b
  3894  001018  D7DE               	goto	l3881
  3895  00101A                     l3891:
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;main.c: 512: new_I2C_address += (100)*(I2C_new_ADDR[0] - '0');
  3899  00101A  0100               	movlb	0	; () banked
  3900  00101C  51A7               	movf	start_routine@I2C_new_ADDR& (0+255),w,b
  3901  00101E  0FD0               	addlw	208
  3902  001020  0D64               	mullw	100
  3903  001022  50F3               	movf	prodl,w,c
  3904  001024  0100               	movlb	0	; () banked
  3905  001026  27B1               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3906                           
  3907                           ;main.c: 513: new_I2C_address += (10)*(I2C_new_ADDR[1] - '0');
  3908  001028  0100               	movlb	0	; () banked
  3909  00102A  51A8               	movf	(start_routine@I2C_new_ADDR+1)& (0+255),w,b
  3910  00102C  0FD0               	addlw	208
  3911  00102E  0D0A               	mullw	10
  3912  001030  50F3               	movf	prodl,w,c
  3913  001032  0100               	movlb	0	; () banked
  3914  001034  27B1               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;main.c: 514: new_I2C_address += (1)*(I2C_new_ADDR[2] - '0');
  3918  001036  0100               	movlb	0	; () banked
  3919  001038  51A9               	movf	(start_routine@I2C_new_ADDR+2)& (0+255),w,b
  3920  00103A  0FD0               	addlw	208
  3921  00103C  0100               	movlb	0	; () banked
  3922  00103E  27B1               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3923                           
  3924                           ; BSR set to: 0
  3925                           ;main.c: 515: Machine_ID = new_I2C_address;
  3926  001040  C0B1  F0CF         	movff	start_routine@new_I2C_address,_Machine_ID
  3927                           
  3928                           ; BSR set to: 0
  3929                           ;main.c: 516: new_I2C_address += 0x0F;
  3930  001044  0E0F               	movlw	15
  3931  001046  0100               	movlb	0	; () banked
  3932  001048  27B1               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3933                           
  3934                           ; BSR set to: 0
  3935                           ;main.c: 518: char* error_msg;
  3936                           ;main.c: 519: if ( ((b[0]==0)&&((b[1]!=0)|(b[2]!=0))) | ((b[0]==1)&&(b[1]==0)&&(b[2]==0)
      +                          ) )
  3937  00104A  0100               	movlb	0	; () banked
  3938  00104C  51A0               	movf	start_routine@b& (0+255),w,b
  3939  00104E  0100               	movlb	0	; () banked
  3940  001050  A4D8               	btfss	status,2,c
  3941  001052  D008               	goto	l3905
  3942                           
  3943                           ; BSR set to: 0
  3944  001054  0100               	movlb	0	; () banked
  3945  001056  51A1               	movf	(start_routine@b+1)& (0+255),w,b
  3946  001058  A4D8               	btfss	status,2,c
  3947  00105A  D010               	goto	l3911
  3948                           
  3949                           ; BSR set to: 0
  3950  00105C  0100               	movlb	0	; () banked
  3951  00105E  51A2               	movf	(start_routine@b+2)& (0+255),w,b
  3952  001060  A4D8               	btfss	status,2,c
  3953  001062  D00C               	goto	l3911
  3954  001064                     l3905:
  3955                           
  3956                           ; BSR set to: 0
  3957  001064  0100               	movlb	0	; () banked
  3958  001066  05A0               	decf	start_routine@b& (0+255),w,b
  3959  001068  A4D8               	btfss	status,2,c
  3960  00106A  D112               	goto	l3979
  3961                           
  3962                           ; BSR set to: 0
  3963  00106C  0100               	movlb	0	; () banked
  3964  00106E  51A1               	movf	(start_routine@b+1)& (0+255),w,b
  3965  001070  A4D8               	btfss	status,2,c
  3966  001072  D10E               	goto	l3979
  3967                           
  3968                           ; BSR set to: 0
  3969  001074  0100               	movlb	0	; () banked
  3970  001076  51A2               	movf	(start_routine@b+2)& (0+255),w,b
  3971  001078  A4D8               	btfss	status,2,c
  3972  00107A  D10A               	goto	l3979
  3973  00107C                     l3911:
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;main.c: 520: {
  3977                           ;main.c: 522: dh = (new_I2C_address / 100);
  3978  00107C  C0B1  F010         	movff	start_routine@new_I2C_address,___awdiv@dividend
  3979  001080  6A11               	clrf	___awdiv@dividend+1,c
  3980  001082  0E00               	movlw	0
  3981  001084  6E13               	movwf	___awdiv@divisor+1,c
  3982  001086  0E64               	movlw	100
  3983  001088  6E12               	movwf	___awdiv@divisor,c
  3984  00108A  EC2B  F00B         	call	___awdiv	;wreg free
  3985  00108E  5010               	movf	?___awdiv,w,c
  3986  001090  0100               	movlb	0	; () banked
  3987  001092  6FAE               	movwf	start_routine@dh& (0+255),b
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;main.c: 523: dt = (new_I2C_address - dh*100) / 10;
  3991  001094  0100               	movlb	0	; () banked
  3992  001096  51AE               	movf	start_routine@dh& (0+255),w,b
  3993  001098  0D64               	mullw	100
  3994  00109A  1EF3               	comf	prodl,f,c
  3995  00109C  1EF4               	comf	prodh,f,c
  3996  00109E  4AF3               	infsnz	prodl,f,c
  3997  0010A0  2AF4               	incf	prodh,f,c
  3998  0010A2  0100               	movlb	0	; () banked
  3999  0010A4  51B1               	movf	start_routine@new_I2C_address& (0+255),w,b
  4000  0010A6  24F3               	addwf	prodl,w,c
  4001  0010A8  6E10               	movwf	___awdiv@dividend,c
  4002  0010AA  0E00               	movlw	0
  4003  0010AC  20F4               	addwfc	prodh,w,c
  4004  0010AE  6E11               	movwf	___awdiv@dividend+1,c
  4005  0010B0  0E00               	movlw	0
  4006  0010B2  6E13               	movwf	___awdiv@divisor+1,c
  4007  0010B4  0E0A               	movlw	10
  4008  0010B6  6E12               	movwf	___awdiv@divisor,c
  4009  0010B8  EC2B  F00B         	call	___awdiv	;wreg free
  4010  0010BC  5010               	movf	?___awdiv,w,c
  4011  0010BE  0100               	movlb	0	; () banked
  4012  0010C0  6FAB               	movwf	start_routine@dt& (0+255),b
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;main.c: 524: d1 = (new_I2C_address - (dh*100+dt*10));
  4016  0010C2  0100               	movlb	0	; () banked
  4017  0010C4  51AB               	movf	start_routine@dt& (0+255),w,b
  4018  0010C6  0D0A               	mullw	10
  4019  0010C8  CFF3 F031          	movff	prodl,??_start_routine
  4020  0010CC  0100               	movlb	0	; () banked
  4021  0010CE  51AE               	movf	start_routine@dh& (0+255),w,b
  4022  0010D0  0D64               	mullw	100
  4023  0010D2  50F3               	movf	prodl,w,c
  4024  0010D4  2431               	addwf	??_start_routine,w,c
  4025  0010D6  0800               	sublw	0
  4026  0010D8  0100               	movlb	0	; () banked
  4027  0010DA  25B1               	addwf	start_routine@new_I2C_address& (0+255),w,b
  4028  0010DC  0100               	movlb	0	; () banked
  4029  0010DE  6F92               	movwf	start_routine@d1& (0+255),b
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;main.c: 526: h = new_I2C_address/16;
  4033  0010E0  C0B1  F010         	movff	start_routine@new_I2C_address,___awdiv@dividend
  4034  0010E4  6A11               	clrf	___awdiv@dividend+1,c
  4035  0010E6  0E00               	movlw	0
  4036  0010E8  6E13               	movwf	___awdiv@divisor+1,c
  4037  0010EA  0E10               	movlw	16
  4038  0010EC  6E12               	movwf	___awdiv@divisor,c
  4039  0010EE  EC2B  F00B         	call	___awdiv	;wreg free
  4040  0010F2  5010               	movf	?___awdiv,w,c
  4041  0010F4  0100               	movlb	0	; () banked
  4042  0010F6  6F8E               	movwf	start_routine@h& (0+255),b
  4043                           
  4044                           ; BSR set to: 0
  4045                           ;main.c: 527: l = new_I2C_address - (new_I2C_address/16)*16;
  4046  0010F8  C0B1  F010         	movff	start_routine@new_I2C_address,___awdiv@dividend
  4047  0010FC  6A11               	clrf	___awdiv@dividend+1,c
  4048  0010FE  0E00               	movlw	0
  4049  001100  6E13               	movwf	___awdiv@divisor+1,c
  4050  001102  0E10               	movlw	16
  4051  001104  6E12               	movwf	___awdiv@divisor,c
  4052  001106  EC2B  F00B         	call	___awdiv	;wreg free
  4053  00110A  3810               	swapf	?___awdiv,w,c
  4054  00110C  0BF0               	andlw	240
  4055  00110E  0800               	sublw	0
  4056  001110  0100               	movlb	0	; () banked
  4057  001112  25B1               	addwf	start_routine@new_I2C_address& (0+255),w,b
  4058  001114  0100               	movlb	0	; () banked
  4059  001116  6F8F               	movwf	start_routine@l& (0+255),b
  4060                           
  4061                           ; BSR set to: 0
  4062                           ;main.c: 528: Lcd_Clear();
  4063  001118  EC3D  F00D         	call	_Lcd_Clear	;wreg free
  4064                           
  4065                           ;main.c: 529: Lcd_Set_Cursor(1,1);
  4066  00111C  0E01               	movlw	1
  4067  00111E  6E12               	movwf	Lcd_Set_Cursor@b,c
  4068  001120  0E01               	movlw	1
  4069  001122  EC73  F00C         	call	_Lcd_Set_Cursor
  4070                           
  4071                           ;main.c: 530: Lcd_Write_String("New Machine ID: ");
  4072  001126  0E49               	movlw	low STR_20
  4073  001128  6E14               	movwf	Lcd_Write_String@a,c
  4074  00112A  0E7F               	movlw	high STR_20
  4075  00112C  6E15               	movwf	Lcd_Write_String@a+1,c
  4076  00112E  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  4077                           
  4078                           ;main.c: 531: Lcd_Set_Cursor(2,1);
  4079  001132  0E01               	movlw	1
  4080  001134  6E12               	movwf	Lcd_Set_Cursor@b,c
  4081  001136  0E02               	movlw	2
  4082  001138  EC73  F00C         	call	_Lcd_Set_Cursor
  4083                           
  4084                           ;main.c: 532: for (int i = 0; i < 3; i++)
  4085  00113C  0E00               	movlw	0
  4086  00113E  0100               	movlb	0	; () banked
  4087  001140  6FA4               	movwf	(start_routine@i_898+1)& (0+255),b
  4088  001142  0E00               	movlw	0
  4089  001144  6FA3               	movwf	start_routine@i_898& (0+255),b
  4090  001146                     l3931:
  4091                           
  4092                           ; BSR set to: 0
  4093  001146  0100               	movlb	0	; () banked
  4094  001148  BFA4               	btfsc	(start_routine@i_898+1)& (0+255),7,b
  4095  00114A  D008               	goto	l3935
  4096  00114C  0100               	movlb	0	; () banked
  4097  00114E  51A4               	movf	(start_routine@i_898+1)& (0+255),w,b
  4098  001150  E114               	bnz	l3941
  4099  001152  0E03               	movlw	3
  4100  001154  0100               	movlb	0	; () banked
  4101  001156  5DA3               	subwf	start_routine@i_898& (0+255),w,b
  4102  001158  B0D8               	btfsc	status,0,c
  4103  00115A  D00F               	goto	l3941
  4104  00115C                     l3935:
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;main.c: 533: Lcd_Write_Char(I2C_new_ADDR[i]);
  4108  00115C  0EA7               	movlw	low start_routine@I2C_new_ADDR
  4109  00115E  0100               	movlb	0	; () banked
  4110  001160  25A3               	addwf	start_routine@i_898& (0+255),w,b
  4111  001162  6ED9               	movwf	fsr2l,c
  4112  001164  0E00               	movlw	high start_routine@I2C_new_ADDR
  4113  001166  0100               	movlb	0	; () banked
  4114  001168  21A4               	addwfc	(start_routine@i_898+1)& (0+255),w,b
  4115  00116A  6EDA               	movwf	fsr2h,c
  4116  00116C  50DF               	movf	indf2,w,c
  4117  00116E  EC9B  F00C         	call	_Lcd_Write_Char
  4118  001172  0100               	movlb	0	; () banked
  4119  001174  4BA3               	infsnz	start_routine@i_898& (0+255),f,b
  4120  001176  2BA4               	incf	(start_routine@i_898+1)& (0+255),f,b
  4121  001178  D7E6               	goto	l3931
  4122  00117A                     l3941:
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;main.c: 534: Lcd_Set_Cursor(2, 7);
  4126  00117A  0E07               	movlw	7
  4127  00117C  6E12               	movwf	Lcd_Set_Cursor@b,c
  4128  00117E  0E02               	movlw	2
  4129  001180  EC73  F00C         	call	_Lcd_Set_Cursor
  4130                           
  4131                           ;main.c: 535: Lcd_Write_String("[OK]");
  4132  001184  0EF8               	movlw	low STR_23
  4133  001186  6E14               	movwf	Lcd_Write_String@a,c
  4134  001188  0E7F               	movlw	high STR_23
  4135  00118A  6E15               	movwf	Lcd_Write_String@a+1,c
  4136  00118C  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  4137                           
  4138                           ;main.c: 536: Lcd_Set_Cursor(2,14);
  4139  001190  0E0E               	movlw	14
  4140  001192  6E12               	movwf	Lcd_Set_Cursor@b,c
  4141  001194  0E02               	movlw	2
  4142  001196  EC73  F00C         	call	_Lcd_Set_Cursor
  4143                           
  4144                           ;main.c: 537: Lcd_Write_String("x");
  4145  00119A  0EFD               	movlw	low STR_24
  4146  00119C  6E14               	movwf	Lcd_Write_String@a,c
  4147  00119E  0E7F               	movlw	high STR_24
  4148  0011A0  6E15               	movwf	Lcd_Write_String@a+1,c
  4149  0011A2  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  4150                           
  4151                           ;main.c: 538: Lcd_Write_Char(hx[h]);
  4152  0011A6  0100               	movlb	0	; () banked
  4153  0011A8  518E               	movf	start_routine@h& (0+255),w,b
  4154  0011AA  0D01               	mullw	1
  4155  0011AC  0E53               	movlw	low _hx
  4156  0011AE  24F3               	addwf	prodl,w,c
  4157  0011B0  6ED9               	movwf	fsr2l,c
  4158  0011B2  0E01               	movlw	high _hx
  4159  0011B4  20F4               	addwfc	prodh,w,c
  4160  0011B6  6EDA               	movwf	fsr2h,c
  4161  0011B8  50DF               	movf	indf2,w,c
  4162  0011BA  EC9B  F00C         	call	_Lcd_Write_Char
  4163                           
  4164                           ;main.c: 539: Lcd_Write_Char(hx[l]);
  4165  0011BE  0100               	movlb	0	; () banked
  4166  0011C0  518F               	movf	start_routine@l& (0+255),w,b
  4167  0011C2  0D01               	mullw	1
  4168  0011C4  0E53               	movlw	low _hx
  4169  0011C6  24F3               	addwf	prodl,w,c
  4170  0011C8  6ED9               	movwf	fsr2l,c
  4171  0011CA  0E01               	movlw	high _hx
  4172  0011CC  20F4               	addwfc	prodh,w,c
  4173  0011CE  6EDA               	movwf	fsr2h,c
  4174  0011D0  50DF               	movf	indf2,w,c
  4175  0011D2  EC9B  F00C         	call	_Lcd_Write_Char
  4176                           
  4177                           ;main.c: 540: for (int i = 0; i < 50; i++)
  4178  0011D6  0E00               	movlw	0
  4179  0011D8  0100               	movlb	0	; () banked
  4180  0011DA  6F9B               	movwf	(start_routine@i_901+1)& (0+255),b
  4181  0011DC  0E00               	movlw	0
  4182  0011DE  6F9A               	movwf	start_routine@i_901& (0+255),b
  4183                           
  4184                           ; BSR set to: 0
  4185  0011E0  0100               	movlb	0	; () banked
  4186  0011E2  BF9B               	btfsc	(start_routine@i_901+1)& (0+255),7,b
  4187  0011E4  D008               	goto	l3957
  4188  0011E6  0100               	movlb	0	; () banked
  4189  0011E8  519B               	movf	(start_routine@i_901+1)& (0+255),w,b
  4190  0011EA  E118               	bnz	l337
  4191  0011EC  0E32               	movlw	50
  4192  0011EE  0100               	movlb	0	; () banked
  4193  0011F0  5D9A               	subwf	start_routine@i_901& (0+255),w,b
  4194  0011F2  B0D8               	btfsc	status,0,c
  4195  0011F4  D013               	goto	l337
  4196  0011F6                     l3957:
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;main.c: 541: _delay((unsigned long)((20)*(16000000/4000.0)));
  4200  0011F6  0E68               	movlw	104
  4201  0011F8  6E31               	movwf	??_start_routine& (0+255),c
  4202  0011FA  0EE4               	movlw	228
  4203  0011FC                     u4427:
  4204  0011FC  2EE8               	decfsz	wreg,f,c
  4205  0011FE  D7FE               	goto	u4427
  4206  001200  2E31               	decfsz	??_start_routine& (0+255),f,c
  4207  001202  D7FC               	goto	u4427
  4208  001204  F000 F000          	nop2	
  4209  001208  0100               	movlb	0	; () banked
  4210  00120A  4B9A               	infsnz	start_routine@i_901& (0+255),f,b
  4211  00120C  2B9B               	incf	(start_routine@i_901+1)& (0+255),f,b
  4212  00120E  0100               	movlb	0	; () banked
  4213  001210  BF9B               	btfsc	(start_routine@i_901+1)& (0+255),7,b
  4214  001212  D7F1               	goto	l3957
  4215  001214  0100               	movlb	0	; () banked
  4216  001216  519B               	movf	(start_routine@i_901+1)& (0+255),w,b
  4217  001218  E101               	bnz	u3640
  4218  00121A  D7E8               	goto	L5
  4219  00121C                     u3640:
  4220  00121C                     l337:
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;main.c: 542: I2C_ADDR = new_I2C_address;
  4224  00121C  C0B1  F0CE         	movff	start_routine@new_I2C_address,_I2C_ADDR
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;main.c: 543: Eeprom_Write_Byte(EEP_I2C_ADDR, I2C_ADDR);
  4228  001220  C0CE  F010         	movff	_I2C_ADDR,Eeprom_Write_Byte@data
  4229  001224  0100               	movlb	0	; () banked
  4230  001226  51CC               	movf	_EEP_I2C_ADDR& (0+255),w,b
  4231  001228  EC2B  F00D         	call	_Eeprom_Write_Byte
  4232                           
  4233                           ;main.c: 544: Lcd_Clear();
  4234  00122C  EC3D  F00D         	call	_Lcd_Clear	;wreg free
  4235                           
  4236                           ;main.c: 545: Lcd_Set_Cursor(1,1);
  4237  001230  0E01               	movlw	1
  4238  001232  6E12               	movwf	Lcd_Set_Cursor@b,c
  4239  001234  0E01               	movlw	1
  4240  001236  EC73  F00C         	call	_Lcd_Set_Cursor
  4241                           
  4242                           ;main.c: 546: Lcd_Write_String("I2C_ADDR>>EEPROM");
  4243  00123A  0E8D               	movlw	low STR_25
  4244  00123C  6E14               	movwf	Lcd_Write_String@a,c
  4245  00123E  0E7F               	movlw	high STR_25
  4246  001240  6E15               	movwf	Lcd_Write_String@a+1,c
  4247  001242  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  4248                           
  4249                           ;main.c: 553: for (int i = 0; i < 10; i++)
  4250  001246  0E00               	movlw	0
  4251  001248  0100               	movlb	0	; () banked
  4252  00124A  6F9D               	movwf	(start_routine@i_904+1)& (0+255),b
  4253  00124C  0E00               	movlw	0
  4254  00124E  6F9C               	movwf	start_routine@i_904& (0+255),b
  4255  001250                     l3969:
  4256                           
  4257                           ; BSR set to: 0
  4258  001250  0100               	movlb	0	; () banked
  4259  001252  BF9D               	btfsc	(start_routine@i_904+1)& (0+255),7,b
  4260  001254  D008               	goto	l3973
  4261  001256  0100               	movlb	0	; () banked
  4262  001258  519D               	movf	(start_routine@i_904+1)& (0+255),w,b
  4263  00125A  E112               	bnz	l3977
  4264  00125C  0E0A               	movlw	10
  4265  00125E  0100               	movlb	0	; () banked
  4266  001260  5D9C               	subwf	start_routine@i_904& (0+255),w,b
  4267  001262  B0D8               	btfsc	status,0,c
  4268  001264  D00D               	goto	l3977
  4269  001266                     l3973:
  4270                           
  4271                           ; BSR set to: 0
  4272                           ;main.c: 554: _delay((unsigned long)((20)*(16000000/4000.0)));
  4273  001266  0E68               	movlw	104
  4274  001268  6E31               	movwf	??_start_routine& (0+255),c
  4275  00126A  0EE4               	movlw	228
  4276  00126C                     u4437:
  4277  00126C  2EE8               	decfsz	wreg,f,c
  4278  00126E  D7FE               	goto	u4437
  4279  001270  2E31               	decfsz	??_start_routine& (0+255),f,c
  4280  001272  D7FC               	goto	u4437
  4281  001274  F000 F000          	nop2	
  4282  001278  0100               	movlb	0	; () banked
  4283  00127A  4B9C               	infsnz	start_routine@i_904& (0+255),f,b
  4284  00127C  2B9D               	incf	(start_routine@i_904+1)& (0+255),f,b
  4285  00127E  D7E8               	goto	l3969
  4286  001280                     l3977:
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;main.c: 555: menu_progress_bar(500);
  4290  001280  0E01               	movlw	1
  4291  001282  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  4292  001284  0EF4               	movlw	244
  4293  001286  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  4294  001288  ECAD  F009         	call	_menu_progress_bar	;wreg free
  4295  00128C  00FF               	reset		;# 
  4296                           
  4297                           ;main.c: 557: }
  4298  00128E  D05C               	goto	l4013
  4299  001290                     l3979:
  4300                           
  4301                           ;main.c: 558: else
  4302                           ;main.c: 559: {
  4303                           ;main.c: 560: if (new_I2C_address == 0)
  4304  001290  0100               	movlb	0	; () banked
  4305  001292  51B1               	movf	start_routine@new_I2C_address& (0+255),w,b
  4306  001294  0100               	movlb	0	; () banked
  4307  001296  A4D8               	btfss	status,2,c
  4308  001298  D005               	goto	l3983
  4309                           
  4310                           ; BSR set to: 0
  4311                           ;main.c: 561: error_msg = "May not be zero!";
  4312  00129A  0E6B               	movlw	low STR_26
  4313  00129C  0100               	movlb	0	; () banked
  4314  00129E  6F90               	movwf	start_routine@error_msg& (0+255),b
  4315  0012A0  0E7F               	movlw	high STR_26
  4316  0012A2  D004               	goto	L6
  4317  0012A4                     l3983:
  4318                           
  4319                           ; BSR set to: 0
  4320                           ;main.c: 562: else
  4321                           ;main.c: 563: error_msg = "Out of bounds!  ";
  4322  0012A4  0E16               	movlw	low STR_27
  4323  0012A6  0100               	movlb	0	; () banked
  4324  0012A8  6F90               	movwf	start_routine@error_msg& (0+255),b
  4325  0012AA  0E7F               	movlw	high STR_27
  4326  0012AC                     L6:
  4327  0012AC  0100               	movlb	0	; () banked
  4328  0012AE  6F91               	movwf	(start_routine@error_msg+1)& (0+255),b
  4329                           
  4330                           ; BSR set to: 0
  4331                           ;main.c: 564: Lcd_Set_Cursor(2,1);
  4332                           
  4333                           ; BSR set to: 0
  4334  0012B0  0E01               	movlw	1
  4335  0012B2  6E12               	movwf	Lcd_Set_Cursor@b,c
  4336  0012B4  0E02               	movlw	2
  4337  0012B6  EC73  F00C         	call	_Lcd_Set_Cursor
  4338                           
  4339                           ;main.c: 565: Lcd_Write_String(error_msg);
  4340  0012BA  C090  F014         	movff	start_routine@error_msg,Lcd_Write_String@a
  4341  0012BE  C091  F015         	movff	start_routine@error_msg+1,Lcd_Write_String@a+1
  4342  0012C2  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  4343                           
  4344                           ;main.c: 566: for (int i = 0; i < 50; i++)
  4345  0012C6  0E00               	movlw	0
  4346  0012C8  0100               	movlb	0	; () banked
  4347  0012CA  6F9F               	movwf	(start_routine@i_907+1)& (0+255),b
  4348  0012CC  0E00               	movlw	0
  4349  0012CE  6F9E               	movwf	start_routine@i_907& (0+255),b
  4350  0012D0                     l3991:
  4351                           
  4352                           ; BSR set to: 0
  4353  0012D0  0100               	movlb	0	; () banked
  4354  0012D2  BF9F               	btfsc	(start_routine@i_907+1)& (0+255),7,b
  4355  0012D4  D008               	goto	l3995
  4356  0012D6  0100               	movlb	0	; () banked
  4357  0012D8  519F               	movf	(start_routine@i_907+1)& (0+255),w,b
  4358  0012DA  E112               	bnz	l3999
  4359  0012DC  0E32               	movlw	50
  4360  0012DE  0100               	movlb	0	; () banked
  4361  0012E0  5D9E               	subwf	start_routine@i_907& (0+255),w,b
  4362  0012E2  B0D8               	btfsc	status,0,c
  4363  0012E4  D00D               	goto	l3999
  4364  0012E6                     l3995:
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;main.c: 567: _delay((unsigned long)((20)*(16000000/4000.0)));
  4368  0012E6  0E68               	movlw	104
  4369  0012E8  6E31               	movwf	??_start_routine& (0+255),c
  4370  0012EA  0EE4               	movlw	228
  4371  0012EC                     u4447:
  4372  0012EC  2EE8               	decfsz	wreg,f,c
  4373  0012EE  D7FE               	goto	u4447
  4374  0012F0  2E31               	decfsz	??_start_routine& (0+255),f,c
  4375  0012F2  D7FC               	goto	u4447
  4376  0012F4  F000 F000          	nop2	
  4377  0012F8  0100               	movlb	0	; () banked
  4378  0012FA  4B9E               	infsnz	start_routine@i_907& (0+255),f,b
  4379  0012FC  2B9F               	incf	(start_routine@i_907+1)& (0+255),f,b
  4380  0012FE  D7E8               	goto	l3991
  4381  001300                     l3999:
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;main.c: 568: for (int i = 0; i < 3; i++)
  4385  001300  0E00               	movlw	0
  4386  001302  0100               	movlb	0	; () banked
  4387  001304  6FA6               	movwf	(start_routine@i_908+1)& (0+255),b
  4388  001306  0E00               	movlw	0
  4389  001308  6FA5               	movwf	start_routine@i_908& (0+255),b
  4390  00130A                     l4001:
  4391                           
  4392                           ; BSR set to: 0
  4393  00130A  0100               	movlb	0	; () banked
  4394  00130C  BFA6               	btfsc	(start_routine@i_908+1)& (0+255),7,b
  4395  00130E  D008               	goto	l4005
  4396  001310  0100               	movlb	0	; () banked
  4397  001312  51A6               	movf	(start_routine@i_908+1)& (0+255),w,b
  4398  001314  E113               	bnz	l4011
  4399  001316  0E03               	movlw	3
  4400  001318  0100               	movlb	0	; () banked
  4401  00131A  5DA5               	subwf	start_routine@i_908& (0+255),w,b
  4402  00131C  B0D8               	btfsc	status,0,c
  4403  00131E  D00E               	goto	l4011
  4404  001320                     l4005:
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;main.c: 569: I2C_new_ADDR[i] = '0';
  4408  001320  0EA7               	movlw	low start_routine@I2C_new_ADDR
  4409  001322  0100               	movlb	0	; () banked
  4410  001324  25A5               	addwf	start_routine@i_908& (0+255),w,b
  4411  001326  6ED9               	movwf	fsr2l,c
  4412  001328  0E00               	movlw	high start_routine@I2C_new_ADDR
  4413  00132A  0100               	movlb	0	; () banked
  4414  00132C  21A6               	addwfc	(start_routine@i_908+1)& (0+255),w,b
  4415  00132E  6EDA               	movwf	fsr2h,c
  4416  001330  0E30               	movlw	48
  4417  001332  6EDF               	movwf	indf2,c
  4418                           
  4419                           ; BSR set to: 0
  4420  001334  0100               	movlb	0	; () banked
  4421  001336  4BA5               	infsnz	start_routine@i_908& (0+255),f,b
  4422  001338  2BA6               	incf	(start_routine@i_908+1)& (0+255),f,b
  4423  00133A  D7E7               	goto	l4001
  4424  00133C                     l4011:
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;main.c: 570: v = 0;
  4428  00133C  0E00               	movlw	0
  4429  00133E  0100               	movlb	0	; () banked
  4430  001340  6F93               	movwf	start_routine@v& (0+255),b
  4431                           
  4432                           ;main.c: 571: n = 0;
  4433  001342  0E00               	movlw	0
  4434  001344  0100               	movlb	0	; () banked
  4435  001346  6FB0               	movwf	start_routine@n& (0+255),b
  4436  001348                     l4013:
  4437  001348  0100               	movlb	0	; () banked
  4438  00134A  0593               	decf	start_routine@v& (0+255),w,b
  4439  00134C  B4D8               	btfsc	status,2,c
  4440  00134E  0012               	return	
  4441  001350  D596               	goto	l3825
  4442  001352                     l4015:
  4443                           
  4444                           ; BSR set to: 0
  4445                           ;main.c: 575: else
  4446                           ;main.c: 576: {
  4447                           ;main.c: 577: v = 1;
  4448  001352  0E01               	movlw	1
  4449  001354  0100               	movlb	0	; () banked
  4450  001356  6F93               	movwf	start_routine@v& (0+255),b
  4451  001358  0012               	return	
  4452  00135A                     __end_of_start_routine:
  4453                           	opt stack 0
  4454                           tblptru	equ	0xFF8
  4455                           tblptrh	equ	0xFF7
  4456                           tblptrl	equ	0xFF6
  4457                           tablat	equ	0xFF5
  4458                           prodh	equ	0xFF4
  4459                           prodl	equ	0xFF3
  4460                           intcon	equ	0xFF2
  4461                           postinc0	equ	0xFEE
  4462                           wreg	equ	0xFE8
  4463                           indf1	equ	0xFE7
  4464                           postdec1	equ	0xFE5
  4465                           plusw1	equ	0xFE3
  4466                           fsr1h	equ	0xFE2
  4467                           fsr1l	equ	0xFE1
  4468                           indf2	equ	0xFDF
  4469                           postinc2	equ	0xFDE
  4470                           plusw2	equ	0xFDB
  4471                           fsr2h	equ	0xFDA
  4472                           fsr2l	equ	0xFD9
  4473                           status	equ	0xFD8
  4474                           
  4475 ;; *************** function _menu_progress_bar *****************
  4476 ;; Defined at:
  4477 ;;		line 85 in file "menu.h"
  4478 ;; Parameters:    Size  Location     Type
  4479 ;;  load_time_ms    2   28[COMRAM] unsigned short 
  4480 ;; Auto vars:     Size  Location     Type
  4481 ;;  ii              2   38[COMRAM] int 
  4482 ;;  i               2   46[COMRAM] int 
  4483 ;;  i               2   44[COMRAM] int 
  4484 ;;  i               2   42[COMRAM] int 
  4485 ;;  i               2   40[COMRAM] int 
  4486 ;;  d               4   34[COMRAM] unsigned long 
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  1    wreg      void 
  4489 ;; Registers used:
  4490 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4496 ;;      Params:         2       0       0       0       0       0       0
  4497 ;;      Locals:        14       0       0       0       0       0       0
  4498 ;;      Temps:          4       0       0       0       0       0       0
  4499 ;;      Totals:        20       0       0       0       0       0       0
  4500 ;;Total ram usage:       20 bytes
  4501 ;; Hardware stack levels used:    1
  4502 ;; Hardware stack levels required when called:    4
  4503 ;; This function calls:
  4504 ;;		_Lcd_Clear
  4505 ;;		_Lcd_Set_Cursor
  4506 ;;		_Lcd_Write_Char
  4507 ;;		_Lcd_Write_String
  4508 ;;		___lwdiv
  4509 ;;		___wmul
  4510 ;; This function is called by:
  4511 ;;		_main
  4512 ;;		_start_routine
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           	psect	text2
  4517  00135A                     __ptext2:
  4518                           	opt stack 0
  4519  00135A                     _menu_progress_bar:
  4520                           	opt stack 25
  4521                           
  4522                           ;menu.h: 87: Lcd_Set_Cursor(2,1);
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;incstack = 0
  4526  00135A  0E01               	movlw	1
  4527  00135C  6E12               	movwf	Lcd_Set_Cursor@b,c
  4528  00135E  0E02               	movlw	2
  4529  001360  EC73  F00C         	call	_Lcd_Set_Cursor
  4530                           
  4531                           ;menu.h: 88: unsigned long d = (((load_time_ms/16)/20)*20);
  4532  001364  0E00               	movlw	0
  4533  001366  6E13               	movwf	___lwdiv@divisor+1,c
  4534  001368  0E14               	movlw	20
  4535  00136A  6E12               	movwf	___lwdiv@divisor,c
  4536  00136C  C01D  F01F         	movff	menu_progress_bar@load_time_ms,??_menu_progress_bar
  4537  001370  C01E  F020         	movff	menu_progress_bar@load_time_ms+1,??_menu_progress_bar+1
  4538  001374  0E04               	movlw	4
  4539  001376  6E21               	movwf	(??_menu_progress_bar+2)& (0+255),c
  4540  001378                     u3195:
  4541  001378  90D8               	bcf	status,0,c
  4542  00137A  3220               	rrcf	??_menu_progress_bar+1,f,c
  4543  00137C  321F               	rrcf	??_menu_progress_bar,f,c
  4544  00137E  2E21               	decfsz	(??_menu_progress_bar+2)& (0+255),f,c
  4545  001380  D7FB               	goto	u3195
  4546  001382  C01F  F010         	movff	??_menu_progress_bar,___lwdiv@dividend
  4547  001386  C020  F011         	movff	??_menu_progress_bar+1,___lwdiv@dividend+1
  4548  00138A  EC21  F00C         	call	___lwdiv	;wreg free
  4549  00138E  C010  F017         	movff	?___lwdiv,___wmul@multiplier
  4550  001392  C011  F018         	movff	?___lwdiv+1,___wmul@multiplier+1
  4551  001396  0E00               	movlw	0
  4552  001398  6E1A               	movwf	___wmul@multiplicand+1,c
  4553  00139A  0E14               	movlw	20
  4554  00139C  6E19               	movwf	___wmul@multiplicand,c
  4555  00139E  EC18  F00D         	call	___wmul	;wreg free
  4556  0013A2  C017  F023         	movff	?___wmul,menu_progress_bar@d
  4557  0013A6  C018  F024         	movff	?___wmul+1,menu_progress_bar@d+1
  4558  0013AA  6A25               	clrf	menu_progress_bar@d+2,c
  4559  0013AC  6A26               	clrf	menu_progress_bar@d+3,c
  4560                           
  4561                           ;menu.h: 89: for (int i = 0; i < 16; i++)
  4562  0013AE  0E00               	movlw	0
  4563  0013B0  6E2A               	movwf	menu_progress_bar@i+1,c
  4564  0013B2  0E00               	movlw	0
  4565  0013B4  6E29               	movwf	menu_progress_bar@i,c
  4566  0013B6                     l3535:
  4567  0013B6  BE2A               	btfsc	menu_progress_bar@i+1,7,c
  4568  0013B8  D006               	goto	l3539
  4569  0013BA  502A               	movf	menu_progress_bar@i+1,w,c
  4570  0013BC  E12F               	bnz	l3553
  4571  0013BE  0E10               	movlw	16
  4572  0013C0  5C29               	subwf	menu_progress_bar@i,w,c
  4573  0013C2  B0D8               	btfsc	status,0,c
  4574  0013C4  D02B               	goto	l3553
  4575  0013C6                     l3539:
  4576                           
  4577                           ;menu.h: 90: {
  4578                           ;menu.h: 91: Lcd_Write_Char(0xFF);
  4579  0013C6  0EFF               	movlw	255
  4580  0013C8  EC9B  F00C         	call	_Lcd_Write_Char
  4581                           
  4582                           ;menu.h: 92: for (int ii = 0; ii < d; ii+=20)
  4583  0013CC  0E00               	movlw	0
  4584  0013CE  6E28               	movwf	menu_progress_bar@ii+1,c
  4585  0013D0  0E00               	movlw	0
  4586  0013D2  6E27               	movwf	menu_progress_bar@ii,c
  4587  0013D4  D00D               	goto	l3547
  4588  0013D6                     l3543:
  4589                           
  4590                           ;menu.h: 93: _delay((unsigned long)((20)*(16000000/4000.0)));
  4591  0013D6  0E68               	movlw	104
  4592  0013D8  6E1F               	movwf	??_menu_progress_bar& (0+255),c
  4593  0013DA  0EE4               	movlw	228
  4594  0013DC                     u4457:
  4595  0013DC  2EE8               	decfsz	wreg,f,c
  4596  0013DE  D7FE               	goto	u4457
  4597  0013E0  2E1F               	decfsz	??_menu_progress_bar& (0+255),f,c
  4598  0013E2  D7FC               	goto	u4457
  4599  0013E4  F000 F000          	nop2	
  4600  0013E8  0E14               	movlw	20
  4601  0013EA  2627               	addwf	menu_progress_bar@ii,f,c
  4602  0013EC  0E00               	movlw	0
  4603  0013EE  2228               	addwfc	menu_progress_bar@ii+1,f,c
  4604  0013F0                     l3547:
  4605  0013F0  C027  F01F         	movff	menu_progress_bar@ii,??_menu_progress_bar
  4606  0013F4  C028  F020         	movff	menu_progress_bar@ii+1,??_menu_progress_bar+1
  4607  0013F8  0E00               	movlw	0
  4608  0013FA  BE20               	btfsc	(??_menu_progress_bar+1)& (0+255),7,c
  4609  0013FC  0EFF               	movlw	255
  4610  0013FE  6E21               	movwf	(??_menu_progress_bar+2)& (0+255),c
  4611  001400  6E22               	movwf	(??_menu_progress_bar+3)& (0+255),c
  4612  001402  5023               	movf	menu_progress_bar@d,w,c
  4613  001404  5C1F               	subwf	??_menu_progress_bar,w,c
  4614  001406  5024               	movf	menu_progress_bar@d+1,w,c
  4615  001408  5820               	subwfb	??_menu_progress_bar+1,w,c
  4616  00140A  5025               	movf	menu_progress_bar@d+2,w,c
  4617  00140C  5821               	subwfb	??_menu_progress_bar+2,w,c
  4618  00140E  5026               	movf	menu_progress_bar@d+3,w,c
  4619  001410  5822               	subwfb	??_menu_progress_bar+3,w,c
  4620  001412  A0D8               	btfss	status,0,c
  4621  001414  D7E0               	goto	l3543
  4622  001416  4A29               	infsnz	menu_progress_bar@i,f,c
  4623  001418  2A2A               	incf	menu_progress_bar@i+1,f,c
  4624  00141A  D7CD               	goto	l3535
  4625  00141C                     l3553:
  4626                           
  4627                           ;menu.h: 94: }
  4628                           ;menu.h: 95: Lcd_Set_Cursor(2,1);
  4629  00141C  0E01               	movlw	1
  4630  00141E  6E12               	movwf	Lcd_Set_Cursor@b,c
  4631  001420  0E02               	movlw	2
  4632  001422  EC73  F00C         	call	_Lcd_Set_Cursor
  4633                           
  4634                           ;menu.h: 96: Lcd_Write_String("                ");
  4635  001426  0EC1               	movlw	low STR_2
  4636  001428  6E14               	movwf	Lcd_Write_String@a,c
  4637  00142A  0E7E               	movlw	high STR_2
  4638  00142C  6E15               	movwf	Lcd_Write_String@a+1,c
  4639  00142E  ECE8  F00B         	call	_Lcd_Write_String	;wreg free
  4640                           
  4641                           ;menu.h: 97: for (int i = 0; i < 5; i++)
  4642  001432  0E00               	movlw	0
  4643  001434  6E2C               	movwf	menu_progress_bar@i_722+1,c
  4644  001436  0E00               	movlw	0
  4645  001438  6E2B               	movwf	menu_progress_bar@i_722,c
  4646  00143A                     l3559:
  4647  00143A  BE2C               	btfsc	menu_progress_bar@i_722+1,7,c
  4648  00143C  D006               	goto	l3563
  4649  00143E  502C               	movf	menu_progress_bar@i_722+1,w,c
  4650  001440  E110               	bnz	l3567
  4651  001442  0E05               	movlw	5
  4652  001444  5C2B               	subwf	menu_progress_bar@i_722,w,c
  4653  001446  B0D8               	btfsc	status,0,c
  4654  001448  D00C               	goto	l3567
  4655  00144A                     l3563:
  4656                           
  4657                           ;menu.h: 98: {
  4658                           ;menu.h: 99: _delay((unsigned long)((20)*(16000000/4000.0)));
  4659  00144A  0E68               	movlw	104
  4660  00144C  6E1F               	movwf	??_menu_progress_bar& (0+255),c
  4661  00144E  0EE4               	movlw	228
  4662  001450                     u4467:
  4663  001450  2EE8               	decfsz	wreg,f,c
  4664  001452  D7FE               	goto	u4467
  4665  001454  2E1F               	decfsz	??_menu_progress_bar& (0+255),f,c
  4666  001456  D7FC               	goto	u4467
  4667  001458  F000 F000          	nop2	
  4668  00145C  4A2B               	infsnz	menu_progress_bar@i_722,f,c
  4669  00145E  2A2C               	incf	menu_progress_bar@i_722+1,f,c
  4670  001460  D7EC               	goto	l3559
  4671  001462                     l3567:
  4672                           
  4673                           ;menu.h: 100: }
  4674                           ;menu.h: 101: Lcd_Set_Cursor(2,1);
  4675  001462  0E01               	movlw	1
  4676  001464  6E12               	movwf	Lcd_Set_Cursor@b,c
  4677  001466  0E02               	movlw	2
  4678  001468  EC73  F00C         	call	_Lcd_Set_Cursor
  4679                           
  4680                           ;menu.h: 102: for (int i = 0; i < 16; i++)
  4681  00146C  0E00               	movlw	0
  4682  00146E  6E2E               	movwf	menu_progress_bar@i_723+1,c
  4683  001470  0E00               	movlw	0
  4684  001472  6E2D               	movwf	menu_progress_bar@i_723,c
  4685  001474                     l3571:
  4686  001474  BE2E               	btfsc	menu_progress_bar@i_723+1,7,c
  4687  001476  D006               	goto	l3575
  4688  001478  502E               	movf	menu_progress_bar@i_723+1,w,c
  4689  00147A  E10A               	bnz	l3581
  4690  00147C  0E10               	movlw	16
  4691  00147E  5C2D               	subwf	menu_progress_bar@i_723,w,c
  4692  001480  B0D8               	btfsc	status,0,c
  4693  001482  D006               	goto	l3581
  4694  001484                     l3575:
  4695                           
  4696                           ;menu.h: 103: {
  4697                           ;menu.h: 104: Lcd_Write_Char(0xFF);
  4698  001484  0EFF               	movlw	255
  4699  001486  EC9B  F00C         	call	_Lcd_Write_Char
  4700  00148A  4A2D               	infsnz	menu_progress_bar@i_723,f,c
  4701  00148C  2A2E               	incf	menu_progress_bar@i_723+1,f,c
  4702  00148E  D7F2               	goto	l3571
  4703  001490                     l3581:
  4704                           
  4705                           ;menu.h: 105: }
  4706                           ;menu.h: 106: for (int i = 0; i < 5; i++)
  4707  001490  0E00               	movlw	0
  4708  001492  6E30               	movwf	menu_progress_bar@i_724+1,c
  4709  001494  0E00               	movlw	0
  4710  001496  6E2F               	movwf	menu_progress_bar@i_724,c
  4711  001498                     l3583:
  4712  001498  BE30               	btfsc	menu_progress_bar@i_724+1,7,c
  4713  00149A  D006               	goto	l3587
  4714  00149C  5030               	movf	menu_progress_bar@i_724+1,w,c
  4715  00149E  E110               	bnz	l3591
  4716  0014A0  0E05               	movlw	5
  4717  0014A2  5C2F               	subwf	menu_progress_bar@i_724,w,c
  4718  0014A4  B0D8               	btfsc	status,0,c
  4719  0014A6  D00C               	goto	l3591
  4720  0014A8                     l3587:
  4721                           
  4722                           ;menu.h: 107: {
  4723                           ;menu.h: 108: _delay((unsigned long)((20)*(16000000/4000.0)));
  4724  0014A8  0E68               	movlw	104
  4725  0014AA  6E1F               	movwf	??_menu_progress_bar& (0+255),c
  4726  0014AC  0EE4               	movlw	228
  4727  0014AE                     u4477:
  4728  0014AE  2EE8               	decfsz	wreg,f,c
  4729  0014B0  D7FE               	goto	u4477
  4730  0014B2  2E1F               	decfsz	??_menu_progress_bar& (0+255),f,c
  4731  0014B4  D7FC               	goto	u4477
  4732  0014B6  F000 F000          	nop2	
  4733  0014BA  4A2F               	infsnz	menu_progress_bar@i_724,f,c
  4734  0014BC  2A30               	incf	menu_progress_bar@i_724+1,f,c
  4735  0014BE  D7EC               	goto	l3583
  4736  0014C0                     l3591:
  4737                           
  4738                           ;menu.h: 109: }
  4739                           ;menu.h: 110: Lcd_Clear();
  4740  0014C0  EC3D  F00D         	call	_Lcd_Clear	;wreg free
  4741  0014C4  0012               	return		;funcret
  4742  0014C6                     __end_of_menu_progress_bar:
  4743                           	opt stack 0
  4744                           tblptru	equ	0xFF8
  4745                           tblptrh	equ	0xFF7
  4746                           tblptrl	equ	0xFF6
  4747                           tablat	equ	0xFF5
  4748                           prodh	equ	0xFF4
  4749                           prodl	equ	0xFF3
  4750                           intcon	equ	0xFF2
  4751                           postinc0	equ	0xFEE
  4752                           wreg	equ	0xFE8
  4753                           indf1	equ	0xFE7
  4754                           postdec1	equ	0xFE5
  4755                           plusw1	equ	0xFE3
  4756                           fsr1h	equ	0xFE2
  4757                           fsr1l	equ	0xFE1
  4758                           indf2	equ	0xFDF
  4759                           postinc2	equ	0xFDE
  4760                           plusw2	equ	0xFDB
  4761                           fsr2h	equ	0xFDA
  4762                           fsr2l	equ	0xFD9
  4763                           status	equ	0xFD8
  4764                           
  4765 ;; *************** function ___wmul *****************
  4766 ;; Defined at:
  4767 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  4768 ;; Parameters:    Size  Location     Type
  4769 ;;  multiplier      2   22[COMRAM] unsigned int 
  4770 ;;  multiplicand    2   24[COMRAM] unsigned int 
  4771 ;; Auto vars:     Size  Location     Type
  4772 ;;  product         2   26[COMRAM] unsigned int 
  4773 ;; Return value:  Size  Location     Type
  4774 ;;                  2   22[COMRAM] unsigned int 
  4775 ;; Registers used:
  4776 ;;		wreg, status,2, status,0, prodl, prodh
  4777 ;; Tracked objects:
  4778 ;;		On entry : 0/0
  4779 ;;		On exit  : 0/0
  4780 ;;		Unchanged: 0/0
  4781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4782 ;;      Params:         4       0       0       0       0       0       0
  4783 ;;      Locals:         2       0       0       0       0       0       0
  4784 ;;      Temps:          0       0       0       0       0       0       0
  4785 ;;      Totals:         6       0       0       0       0       0       0
  4786 ;;Total ram usage:        6 bytes
  4787 ;; Hardware stack levels used:    1
  4788 ;; Hardware stack levels required when called:    1
  4789 ;; This function calls:
  4790 ;;		Nothing
  4791 ;; This function is called by:
  4792 ;;		_menu_progress_bar
  4793 ;;		_menu_seconds_to_mmss
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797                           	psect	text3
  4798  001A30                     __ptext3:
  4799                           	opt stack 0
  4800  001A30                     ___wmul:
  4801                           	opt stack 27
  4802                           
  4803                           ;incstack = 0
  4804  001A30  5017               	movf	___wmul@multiplier,w,c
  4805  001A32  0219               	mulwf	___wmul@multiplicand,c
  4806  001A34  CFF3 F01B          	movff	prodl,___wmul@product
  4807  001A38  CFF4 F01C          	movff	prodh,___wmul@product+1
  4808  001A3C  5017               	movf	___wmul@multiplier,w,c
  4809  001A3E  021A               	mulwf	___wmul@multiplicand+1,c
  4810  001A40  50F3               	movf	prodl,w,c
  4811  001A42  261C               	addwf	___wmul@product+1,f,c
  4812  001A44  5018               	movf	___wmul@multiplier+1,w,c
  4813  001A46  0219               	mulwf	___wmul@multiplicand,c
  4814  001A48  50F3               	movf	prodl,w,c
  4815  001A4A  261C               	addwf	___wmul@product+1,f,c
  4816  001A4C  C01B  F017         	movff	___wmul@product,?___wmul
  4817  001A50  C01C  F018         	movff	___wmul@product+1,?___wmul+1
  4818  001A54  0012               	return	
  4819  001A56                     __end_of___wmul:
  4820                           	opt stack 0
  4821                           tblptru	equ	0xFF8
  4822                           tblptrh	equ	0xFF7
  4823                           tblptrl	equ	0xFF6
  4824                           tablat	equ	0xFF5
  4825                           prodh	equ	0xFF4
  4826                           prodl	equ	0xFF3
  4827                           intcon	equ	0xFF2
  4828                           postinc0	equ	0xFEE
  4829                           wreg	equ	0xFE8
  4830                           indf1	equ	0xFE7
  4831                           postdec1	equ	0xFE5
  4832                           plusw1	equ	0xFE3
  4833                           fsr1h	equ	0xFE2
  4834                           fsr1l	equ	0xFE1
  4835                           indf2	equ	0xFDF
  4836                           postinc2	equ	0xFDE
  4837                           plusw2	equ	0xFDB
  4838                           fsr2h	equ	0xFDA
  4839                           fsr2l	equ	0xFD9
  4840                           status	equ	0xFD8
  4841                           
  4842 ;; *************** function ___lwdiv *****************
  4843 ;; Defined at:
  4844 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;  dividend        2   15[COMRAM] unsigned int 
  4847 ;;  divisor         2   17[COMRAM] unsigned int 
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;  quotient        2   20[COMRAM] unsigned int 
  4850 ;;  counter         1   19[COMRAM] unsigned char 
  4851 ;; Return value:  Size  Location     Type
  4852 ;;                  2   15[COMRAM] unsigned int 
  4853 ;; Registers used:
  4854 ;;		wreg, status,2, status,0
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4860 ;;      Params:         4       0       0       0       0       0       0
  4861 ;;      Locals:         3       0       0       0       0       0       0
  4862 ;;      Temps:          0       0       0       0       0       0       0
  4863 ;;      Totals:         7       0       0       0       0       0       0
  4864 ;;Total ram usage:        7 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; Hardware stack levels required when called:    1
  4867 ;; This function calls:
  4868 ;;		Nothing
  4869 ;; This function is called by:
  4870 ;;		_menu_progress_bar
  4871 ;;		_menu_seconds_to_mmss
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875                           	psect	text4
  4876  001842                     __ptext4:
  4877                           	opt stack 0
  4878  001842                     ___lwdiv:
  4879                           	opt stack 27
  4880                           
  4881                           ;incstack = 0
  4882  001842  0E00               	movlw	0
  4883  001844  6E16               	movwf	___lwdiv@quotient+1,c
  4884  001846  0E00               	movlw	0
  4885  001848  6E15               	movwf	___lwdiv@quotient,c
  4886  00184A  5012               	movf	___lwdiv@divisor,w,c
  4887  00184C  1013               	iorwf	___lwdiv@divisor+1,w,c
  4888  00184E  B4D8               	btfsc	status,2,c
  4889  001850  D01C               	goto	l752
  4890  001852  0E01               	movlw	1
  4891  001854  6E14               	movwf	___lwdiv@counter,c
  4892  001856  D004               	goto	l3515
  4893  001858                     l3513:
  4894  001858  90D8               	bcf	status,0,c
  4895  00185A  3612               	rlcf	___lwdiv@divisor,f,c
  4896  00185C  3613               	rlcf	___lwdiv@divisor+1,f,c
  4897  00185E  2A14               	incf	___lwdiv@counter,f,c
  4898  001860                     l3515:
  4899  001860  AE13               	btfss	___lwdiv@divisor+1,7,c
  4900  001862  D7FA               	goto	l3513
  4901  001864                     l3517:
  4902  001864  90D8               	bcf	status,0,c
  4903  001866  3615               	rlcf	___lwdiv@quotient,f,c
  4904  001868  3616               	rlcf	___lwdiv@quotient+1,f,c
  4905  00186A  5012               	movf	___lwdiv@divisor,w,c
  4906  00186C  5C10               	subwf	___lwdiv@dividend,w,c
  4907  00186E  5013               	movf	___lwdiv@divisor+1,w,c
  4908  001870  5811               	subwfb	___lwdiv@dividend+1,w,c
  4909  001872  A0D8               	btfss	status,0,c
  4910  001874  D005               	goto	l3525
  4911  001876  5012               	movf	___lwdiv@divisor,w,c
  4912  001878  5E10               	subwf	___lwdiv@dividend,f,c
  4913  00187A  5013               	movf	___lwdiv@divisor+1,w,c
  4914  00187C  5A11               	subwfb	___lwdiv@dividend+1,f,c
  4915  00187E  8015               	bsf	___lwdiv@quotient,0,c
  4916  001880                     l3525:
  4917  001880  90D8               	bcf	status,0,c
  4918  001882  3213               	rrcf	___lwdiv@divisor+1,f,c
  4919  001884  3212               	rrcf	___lwdiv@divisor,f,c
  4920  001886  2E14               	decfsz	___lwdiv@counter,f,c
  4921  001888  D7ED               	goto	l3517
  4922  00188A                     l752:
  4923  00188A  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
  4924  00188E  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4925  001892  0012               	return		;funcret
  4926  001894                     __end_of___lwdiv:
  4927                           	opt stack 0
  4928                           tblptru	equ	0xFF8
  4929                           tblptrh	equ	0xFF7
  4930                           tblptrl	equ	0xFF6
  4931                           tablat	equ	0xFF5
  4932                           prodh	equ	0xFF4
  4933                           prodl	equ	0xFF3
  4934                           intcon	equ	0xFF2
  4935                           postinc0	equ	0xFEE
  4936                           wreg	equ	0xFE8
  4937                           indf1	equ	0xFE7
  4938                           postdec1	equ	0xFE5
  4939                           plusw1	equ	0xFE3
  4940                           fsr1h	equ	0xFE2
  4941                           fsr1l	equ	0xFE1
  4942                           indf2	equ	0xFDF
  4943                           postinc2	equ	0xFDE
  4944                           plusw2	equ	0xFDB
  4945                           fsr2h	equ	0xFDA
  4946                           fsr2l	equ	0xFD9
  4947                           status	equ	0xFD8
  4948                           
  4949 ;; *************** function _Lcd_Write_String *****************
  4950 ;; Defined at:
  4951 ;;		line 111 in file "lcd.h"
  4952 ;; Parameters:    Size  Location     Type
  4953 ;;  a               2   19[COMRAM] PTR unsigned char 
  4954 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(2), 
  4955 ;;		 -> STR_23(5), STR_22(17), STR_21(17), STR_20(17), 
  4956 ;;		 -> STR_19(17), STR_18(17), STR_17(11), STR_16(6), 
  4957 ;;		 -> STR_15(5), STR_14(17), STR_13(17), STR_12(17), 
  4958 ;;		 -> STR_11(17), STR_10(17), STR_9(17), STR_8(17), 
  4959 ;;		 -> STR_7(17), STR_6(17), STR_5(17), STR_4(17), 
  4960 ;;		 -> STR_3(17), STR_2(17), STR_1(2), RAM(1535), 
  4961 ;; Auto vars:     Size  Location     Type
  4962 ;;  i               2   23[COMRAM] int 
  4963 ;; Return value:  Size  Location     Type
  4964 ;;                  1    wreg      void 
  4965 ;; Registers used:
  4966 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4967 ;; Tracked objects:
  4968 ;;		On entry : 0/0
  4969 ;;		On exit  : 0/0
  4970 ;;		Unchanged: 0/0
  4971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4972 ;;      Params:         2       0       0       0       0       0       0
  4973 ;;      Locals:         2       0       0       0       0       0       0
  4974 ;;      Temps:          2       0       0       0       0       0       0
  4975 ;;      Totals:         6       0       0       0       0       0       0
  4976 ;;Total ram usage:        6 bytes
  4977 ;; Hardware stack levels used:    1
  4978 ;; Hardware stack levels required when called:    3
  4979 ;; This function calls:
  4980 ;;		_Lcd_Write_Char
  4981 ;; This function is called by:
  4982 ;;		_menu_progress_bar
  4983 ;;		_main
  4984 ;;		_start_routine
  4985 ;;		_menu_animation_i2c
  4986 ;; This function uses a non-reentrant model
  4987 ;;
  4988                           
  4989                           	psect	text5
  4990  0017D0                     __ptext5:
  4991                           	opt stack 0
  4992  0017D0                     _Lcd_Write_String:
  4993                           	opt stack 25
  4994                           
  4995                           ;lcd.h: 113: int i;
  4996                           ;lcd.h: 114: for(i=0;a[i]!='\0';i++)
  4997                           
  4998                           ;incstack = 0
  4999  0017D0  0E00               	movlw	0
  5000  0017D2  6E19               	movwf	Lcd_Write_String@i+1,c
  5001  0017D4  0E00               	movlw	0
  5002  0017D6  6E18               	movwf	Lcd_Write_String@i,c
  5003  0017D8  D01A               	goto	l3411
  5004  0017DA                     l3407:
  5005                           
  5006                           ;lcd.h: 115: Lcd_Write_Char(a[i]);
  5007  0017DA  5018               	movf	Lcd_Write_String@i,w,c
  5008  0017DC  2414               	addwf	Lcd_Write_String@a,w,c
  5009  0017DE  6E16               	movwf	??_Lcd_Write_String& (0+255),c
  5010  0017E0  5019               	movf	Lcd_Write_String@i+1,w,c
  5011  0017E2  2015               	addwfc	Lcd_Write_String@a+1,w,c
  5012  0017E4  6E17               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  5013  0017E6  C016  FFF6         	movff	??_Lcd_Write_String,tblptrl
  5014  0017EA  C017  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  5015  0017EE  6AF8               	clrf	tblptru,c
  5016  0017F0  0E05               	movlw	(high __ramtop+-1)
  5017  0017F2  64F7               	cpfsgt	tblptrh,c
  5018  0017F4  D003               	bra	u3017
  5019  0017F6  0008               	tblrd		*
  5020  0017F8  50F5               	movf	tablat,w,c
  5021  0017FA  D005               	bra	u3010
  5022  0017FC                     u3017:
  5023  0017FC  CFF6 FFE9          	movff	tblptrl,fsr0l
  5024  001800  CFF7 FFEA          	movff	tblptrh,fsr0h
  5025  001804  50EF               	movf	indf0,w,c
  5026  001806                     u3010:
  5027  001806  EC9B  F00C         	call	_Lcd_Write_Char
  5028  00180A  4A18               	infsnz	Lcd_Write_String@i,f,c
  5029  00180C  2A19               	incf	Lcd_Write_String@i+1,f,c
  5030  00180E                     l3411:
  5031  00180E  5018               	movf	Lcd_Write_String@i,w,c
  5032  001810  2414               	addwf	Lcd_Write_String@a,w,c
  5033  001812  6E16               	movwf	??_Lcd_Write_String& (0+255),c
  5034  001814  5019               	movf	Lcd_Write_String@i+1,w,c
  5035  001816  2015               	addwfc	Lcd_Write_String@a+1,w,c
  5036  001818  6E17               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  5037  00181A  C016  FFF6         	movff	??_Lcd_Write_String,tblptrl
  5038  00181E  C017  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  5039  001822  6AF8               	clrf	tblptru,c
  5040  001824  0E05               	movlw	(high __ramtop+-1)
  5041  001826  64F7               	cpfsgt	tblptrh,c
  5042  001828  D003               	bra	u3027
  5043  00182A  0008               	tblrd		*
  5044  00182C  50F5               	movf	tablat,w,c
  5045  00182E  D005               	bra	u3020
  5046  001830                     u3027:
  5047  001830  CFF6 FFE9          	movff	tblptrl,fsr0l
  5048  001834  CFF7 FFEA          	movff	tblptrh,fsr0h
  5049  001838  50EF               	movf	indf0,w,c
  5050  00183A                     u3020:
  5051  00183A  0900               	iorlw	0
  5052  00183C  B4D8               	btfsc	status,2,c
  5053  00183E  0012               	return	
  5054  001840  D7CC               	goto	l3407
  5055  001842                     __end_of_Lcd_Write_String:
  5056                           	opt stack 0
  5057                           tblptru	equ	0xFF8
  5058                           tblptrh	equ	0xFF7
  5059                           tblptrl	equ	0xFF6
  5060                           tablat	equ	0xFF5
  5061                           prodh	equ	0xFF4
  5062                           prodl	equ	0xFF3
  5063                           intcon	equ	0xFF2
  5064                           indf0	equ	0xFEF
  5065                           postinc0	equ	0xFEE
  5066                           fsr0h	equ	0xFEA
  5067                           fsr0l	equ	0xFE9
  5068                           wreg	equ	0xFE8
  5069                           indf1	equ	0xFE7
  5070                           postdec1	equ	0xFE5
  5071                           plusw1	equ	0xFE3
  5072                           fsr1h	equ	0xFE2
  5073                           fsr1l	equ	0xFE1
  5074                           indf2	equ	0xFDF
  5075                           postinc2	equ	0xFDE
  5076                           plusw2	equ	0xFDB
  5077                           fsr2h	equ	0xFDA
  5078                           fsr2l	equ	0xFD9
  5079                           status	equ	0xFD8
  5080                           
  5081 ;; *************** function _Lcd_Write_Char *****************
  5082 ;; Defined at:
  5083 ;;		line 95 in file "lcd.h"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;  a               1    wreg     unsigned char 
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;  a               1   18[COMRAM] unsigned char 
  5088 ;;  y               1   17[COMRAM] unsigned char 
  5089 ;;  temp            1   16[COMRAM] unsigned char 
  5090 ;; Return value:  Size  Location     Type
  5091 ;;                  1    wreg      void 
  5092 ;; Registers used:
  5093 ;;		wreg, status,2, status,0, cstack
  5094 ;; Tracked objects:
  5095 ;;		On entry : 0/0
  5096 ;;		On exit  : 0/0
  5097 ;;		Unchanged: 0/0
  5098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5099 ;;      Params:         0       0       0       0       0       0       0
  5100 ;;      Locals:         3       0       0       0       0       0       0
  5101 ;;      Temps:          0       0       0       0       0       0       0
  5102 ;;      Totals:         3       0       0       0       0       0       0
  5103 ;;Total ram usage:        3 bytes
  5104 ;; Hardware stack levels used:    1
  5105 ;; Hardware stack levels required when called:    2
  5106 ;; This function calls:
  5107 ;;		_Lcd_Port
  5108 ;; This function is called by:
  5109 ;;		_Lcd_Write_String
  5110 ;;		_menu_progress_bar
  5111 ;;		_main
  5112 ;;		_start_routine
  5113 ;;		_menu_main
  5114 ;; This function uses a non-reentrant model
  5115 ;;
  5116                           
  5117                           	psect	text6
  5118  001936                     __ptext6:
  5119                           	opt stack 0
  5120  001936                     _Lcd_Write_Char:
  5121                           	opt stack 25
  5122                           
  5123                           ;incstack = 0
  5124                           ;Lcd_Write_Char@a stored from wreg
  5125  001936  6E13               	movwf	Lcd_Write_Char@a,c
  5126                           
  5127                           ;lcd.h: 97: char temp,y;
  5128                           ;lcd.h: 98: temp = a&0x0F;
  5129  001938  5013               	movf	Lcd_Write_Char@a,w,c
  5130  00193A  0B0F               	andlw	15
  5131  00193C  6E11               	movwf	Lcd_Write_Char@temp,c
  5132                           
  5133                           ;lcd.h: 99: y = a&0xF0;
  5134  00193E  5013               	movf	Lcd_Write_Char@a,w,c
  5135  001940  0BF0               	andlw	240
  5136  001942  6E12               	movwf	Lcd_Write_Char@y,c
  5137                           
  5138                           ;lcd.h: 100: PORTDbits.RD5 = 1;
  5139  001944  8A83               	bsf	3971,5,c	;volatile
  5140                           
  5141                           ;lcd.h: 101: Lcd_Port(y>>4);
  5142  001946  3812               	swapf	Lcd_Write_Char@y,w,c
  5143  001948  0B0F               	andlw	15
  5144  00194A  EC02  F00D         	call	_Lcd_Port
  5145                           
  5146                           ;lcd.h: 102: PORTDbits.RD4 = 1;
  5147  00194E  8883               	bsf	3971,4,c	;volatile
  5148                           
  5149                           ;lcd.h: 103: _delay((unsigned long)((40)*(16000000/4000000.0)));
  5150  001950  0E35               	movlw	53
  5151  001952                     u4487:
  5152  001952  2EE8               	decfsz	wreg,f,c
  5153  001954  D7FE               	goto	u4487
  5154  001956  F000               	nop	
  5155                           
  5156                           ;lcd.h: 104: PORTDbits.RD4 = 0;
  5157  001958  9883               	bcf	3971,4,c	;volatile
  5158                           
  5159                           ;lcd.h: 105: Lcd_Port(temp);
  5160  00195A  5011               	movf	Lcd_Write_Char@temp,w,c
  5161  00195C  EC02  F00D         	call	_Lcd_Port
  5162                           
  5163                           ;lcd.h: 106: PORTDbits.RD4 = 1;
  5164  001960  8883               	bsf	3971,4,c	;volatile
  5165                           
  5166                           ;lcd.h: 107: _delay((unsigned long)((40)*(16000000/4000000.0)));
  5167  001962  0E35               	movlw	53
  5168  001964                     u4497:
  5169  001964  2EE8               	decfsz	wreg,f,c
  5170  001966  D7FE               	goto	u4497
  5171  001968  F000               	nop	
  5172                           
  5173                           ;lcd.h: 108: PORTDbits.RD4 = 0;
  5174  00196A  9883               	bcf	3971,4,c	;volatile
  5175  00196C  0012               	return		;funcret
  5176  00196E                     __end_of_Lcd_Write_Char:
  5177                           	opt stack 0
  5178                           tblptru	equ	0xFF8
  5179                           tblptrh	equ	0xFF7
  5180                           tblptrl	equ	0xFF6
  5181                           tablat	equ	0xFF5
  5182                           prodh	equ	0xFF4
  5183                           prodl	equ	0xFF3
  5184                           intcon	equ	0xFF2
  5185                           indf0	equ	0xFEF
  5186                           postinc0	equ	0xFEE
  5187                           fsr0h	equ	0xFEA
  5188                           fsr0l	equ	0xFE9
  5189                           wreg	equ	0xFE8
  5190                           indf1	equ	0xFE7
  5191                           postdec1	equ	0xFE5
  5192                           plusw1	equ	0xFE3
  5193                           fsr1h	equ	0xFE2
  5194                           fsr1l	equ	0xFE1
  5195                           indf2	equ	0xFDF
  5196                           postinc2	equ	0xFDE
  5197                           plusw2	equ	0xFDB
  5198                           fsr2h	equ	0xFDA
  5199                           fsr2l	equ	0xFD9
  5200                           status	equ	0xFD8
  5201                           
  5202 ;; *************** function _Lcd_Set_Cursor *****************
  5203 ;; Defined at:
  5204 ;;		line 55 in file "lcd.h"
  5205 ;; Parameters:    Size  Location     Type
  5206 ;;  a               1    wreg     unsigned char 
  5207 ;;  b               1   17[COMRAM] unsigned char 
  5208 ;; Auto vars:     Size  Location     Type
  5209 ;;  a               1   18[COMRAM] unsigned char 
  5210 ;;  temp            1   21[COMRAM] unsigned char 
  5211 ;;  y               1   20[COMRAM] unsigned char 
  5212 ;;  z               1   19[COMRAM] unsigned char 
  5213 ;; Return value:  Size  Location     Type
  5214 ;;                  1    wreg      void 
  5215 ;; Registers used:
  5216 ;;		wreg, status,2, status,0, cstack
  5217 ;; Tracked objects:
  5218 ;;		On entry : 0/0
  5219 ;;		On exit  : 0/0
  5220 ;;		Unchanged: 0/0
  5221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5222 ;;      Params:         1       0       0       0       0       0       0
  5223 ;;      Locals:         4       0       0       0       0       0       0
  5224 ;;      Temps:          0       0       0       0       0       0       0
  5225 ;;      Totals:         5       0       0       0       0       0       0
  5226 ;;Total ram usage:        5 bytes
  5227 ;; Hardware stack levels used:    1
  5228 ;; Hardware stack levels required when called:    3
  5229 ;; This function calls:
  5230 ;;		_Lcd_Cmd
  5231 ;; This function is called by:
  5232 ;;		_menu_progress_bar
  5233 ;;		_main
  5234 ;;		_start_routine
  5235 ;;		_menu_main
  5236 ;;		_menu_animation_i2c
  5237 ;; This function uses a non-reentrant model
  5238 ;;
  5239                           
  5240                           	psect	text7
  5241  0018E6                     __ptext7:
  5242                           	opt stack 0
  5243  0018E6                     _Lcd_Set_Cursor:
  5244                           	opt stack 25
  5245                           
  5246                           ;incstack = 0
  5247                           ;Lcd_Set_Cursor@a stored from wreg
  5248  0018E6  6E13               	movwf	Lcd_Set_Cursor@a,c
  5249                           
  5250                           ;lcd.h: 57: char temp,z,y;
  5251                           ;lcd.h: 58: if(a == 1)
  5252  0018E8  0413               	decf	Lcd_Set_Cursor@a,w,c
  5253  0018EA  A4D8               	btfss	status,2,c
  5254  0018EC  D010               	goto	l3397
  5255                           
  5256                           ;lcd.h: 59: {
  5257                           ;lcd.h: 60: temp = 0x80 + b - 1;
  5258  0018EE  5012               	movf	Lcd_Set_Cursor@b,w,c
  5259  0018F0  0F7F               	addlw	127
  5260  0018F2  6E16               	movwf	Lcd_Set_Cursor@temp,c
  5261                           
  5262                           ;lcd.h: 61: z = temp>>4;
  5263  0018F4  3816               	swapf	Lcd_Set_Cursor@temp,w,c
  5264  0018F6  0B0F               	andlw	15
  5265  0018F8  6E14               	movwf	Lcd_Set_Cursor@z,c
  5266                           
  5267                           ;lcd.h: 62: y = temp & 0x0F;
  5268  0018FA  5016               	movf	Lcd_Set_Cursor@temp,w,c
  5269  0018FC  0B0F               	andlw	15
  5270  0018FE  6E15               	movwf	Lcd_Set_Cursor@y,c
  5271                           
  5272                           ;lcd.h: 63: Lcd_Cmd(z);
  5273  001900  5014               	movf	Lcd_Set_Cursor@z,w,c
  5274  001902  EC5A  F00D         	call	_Lcd_Cmd
  5275                           
  5276                           ;lcd.h: 64: Lcd_Cmd(y);
  5277  001906  5015               	movf	Lcd_Set_Cursor@y,w,c
  5278  001908  EC5A  F00D         	call	_Lcd_Cmd
  5279                           
  5280                           ;lcd.h: 65: }
  5281  00190C  0012               	return	
  5282  00190E                     l3397:
  5283                           
  5284                           ;lcd.h: 66: else if(a == 2)
  5285  00190E  0E02               	movlw	2
  5286  001910  1813               	xorwf	Lcd_Set_Cursor@a,w,c
  5287  001912  A4D8               	btfss	status,2,c
  5288  001914  0012               	return	
  5289                           
  5290                           ;lcd.h: 67: {
  5291                           ;lcd.h: 68: temp = 0xC0 + b - 1;
  5292  001916  5012               	movf	Lcd_Set_Cursor@b,w,c
  5293  001918  0FBF               	addlw	191
  5294  00191A  6E16               	movwf	Lcd_Set_Cursor@temp,c
  5295                           
  5296                           ;lcd.h: 69: z = temp>>4;
  5297  00191C  3816               	swapf	Lcd_Set_Cursor@temp,w,c
  5298  00191E  0B0F               	andlw	15
  5299  001920  6E14               	movwf	Lcd_Set_Cursor@z,c
  5300                           
  5301                           ;lcd.h: 70: y = temp & 0x0F;
  5302  001922  5016               	movf	Lcd_Set_Cursor@temp,w,c
  5303  001924  0B0F               	andlw	15
  5304  001926  6E15               	movwf	Lcd_Set_Cursor@y,c
  5305                           
  5306                           ;lcd.h: 71: Lcd_Cmd(z);
  5307  001928  5014               	movf	Lcd_Set_Cursor@z,w,c
  5308  00192A  EC5A  F00D         	call	_Lcd_Cmd
  5309                           
  5310                           ;lcd.h: 72: Lcd_Cmd(y);
  5311  00192E  5015               	movf	Lcd_Set_Cursor@y,w,c
  5312  001930  EC5A  F00D         	call	_Lcd_Cmd
  5313  001934  0012               	return	
  5314  001936                     __end_of_Lcd_Set_Cursor:
  5315                           	opt stack 0
  5316                           tblptru	equ	0xFF8
  5317                           tblptrh	equ	0xFF7
  5318                           tblptrl	equ	0xFF6
  5319                           tablat	equ	0xFF5
  5320                           prodh	equ	0xFF4
  5321                           prodl	equ	0xFF3
  5322                           intcon	equ	0xFF2
  5323                           indf0	equ	0xFEF
  5324                           postinc0	equ	0xFEE
  5325                           fsr0h	equ	0xFEA
  5326                           fsr0l	equ	0xFE9
  5327                           wreg	equ	0xFE8
  5328                           indf1	equ	0xFE7
  5329                           postdec1	equ	0xFE5
  5330                           plusw1	equ	0xFE3
  5331                           fsr1h	equ	0xFE2
  5332                           fsr1l	equ	0xFE1
  5333                           indf2	equ	0xFDF
  5334                           postinc2	equ	0xFDE
  5335                           plusw2	equ	0xFDB
  5336                           fsr2h	equ	0xFDA
  5337                           fsr2l	equ	0xFD9
  5338                           status	equ	0xFD8
  5339                           
  5340 ;; *************** function _Lcd_Clear *****************
  5341 ;; Defined at:
  5342 ;;		line 48 in file "lcd.h"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;		None
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;		None
  5347 ;; Return value:  Size  Location     Type
  5348 ;;                  1    wreg      void 
  5349 ;; Registers used:
  5350 ;;		wreg, status,2, cstack
  5351 ;; Tracked objects:
  5352 ;;		On entry : 0/0
  5353 ;;		On exit  : 0/0
  5354 ;;		Unchanged: 0/0
  5355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5356 ;;      Params:         0       0       0       0       0       0       0
  5357 ;;      Locals:         0       0       0       0       0       0       0
  5358 ;;      Temps:          1       0       0       0       0       0       0
  5359 ;;      Totals:         1       0       0       0       0       0       0
  5360 ;;Total ram usage:        1 bytes
  5361 ;; Hardware stack levels used:    1
  5362 ;; Hardware stack levels required when called:    3
  5363 ;; This function calls:
  5364 ;;		_Lcd_Cmd
  5365 ;; This function is called by:
  5366 ;;		_menu_progress_bar
  5367 ;;		_main
  5368 ;;		_start_routine
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           	psect	text8
  5373  001A7A                     __ptext8:
  5374                           	opt stack 0
  5375  001A7A                     _Lcd_Clear:
  5376                           	opt stack 25
  5377                           
  5378                           ;lcd.h: 50: Lcd_Cmd(0);
  5379                           
  5380                           ;incstack = 0
  5381  001A7A  0E00               	movlw	0
  5382  001A7C  EC5A  F00D         	call	_Lcd_Cmd
  5383                           
  5384                           ;lcd.h: 51: Lcd_Cmd(1);
  5385  001A80  0E01               	movlw	1
  5386  001A82  EC5A  F00D         	call	_Lcd_Cmd
  5387                           
  5388                           ;lcd.h: 52: _delay((unsigned long)((5)*(16000000/4000.0)));
  5389  001A86  0E1A               	movlw	26
  5390  001A88  6E12               	movwf	??_Lcd_Clear& (0+255),c
  5391  001A8A  0EF8               	movlw	248
  5392  001A8C                     u4507:
  5393  001A8C  2EE8               	decfsz	wreg,f,c
  5394  001A8E  D7FE               	goto	u4507
  5395  001A90  2E12               	decfsz	??_Lcd_Clear& (0+255),f,c
  5396  001A92  D7FC               	goto	u4507
  5397  001A94  F000 F000          	nop2	
  5398  001A98  0012               	return		;funcret
  5399  001A9A                     __end_of_Lcd_Clear:
  5400                           	opt stack 0
  5401                           tblptru	equ	0xFF8
  5402                           tblptrh	equ	0xFF7
  5403                           tblptrl	equ	0xFF6
  5404                           tablat	equ	0xFF5
  5405                           prodh	equ	0xFF4
  5406                           prodl	equ	0xFF3
  5407                           intcon	equ	0xFF2
  5408                           indf0	equ	0xFEF
  5409                           postinc0	equ	0xFEE
  5410                           fsr0h	equ	0xFEA
  5411                           fsr0l	equ	0xFE9
  5412                           wreg	equ	0xFE8
  5413                           indf1	equ	0xFE7
  5414                           postdec1	equ	0xFE5
  5415                           plusw1	equ	0xFE3
  5416                           fsr1h	equ	0xFE2
  5417                           fsr1l	equ	0xFE1
  5418                           indf2	equ	0xFDF
  5419                           postinc2	equ	0xFDE
  5420                           plusw2	equ	0xFDB
  5421                           fsr2h	equ	0xFDA
  5422                           fsr2l	equ	0xFD9
  5423                           status	equ	0xFD8
  5424                           
  5425 ;; *************** function _latch_keypad *****************
  5426 ;; Defined at:
  5427 ;;		line 321 in file "main.c"
  5428 ;; Parameters:    Size  Location     Type
  5429 ;;  x               2   15[COMRAM] PTR unsigned char 
  5430 ;;		 -> start_routine@x(1), main@x(1), 
  5431 ;; Auto vars:     Size  Location     Type
  5432 ;;		None
  5433 ;; Return value:  Size  Location     Type
  5434 ;;                  1    wreg      void 
  5435 ;; Registers used:
  5436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5437 ;; Tracked objects:
  5438 ;;		On entry : 0/0
  5439 ;;		On exit  : 0/0
  5440 ;;		Unchanged: 0/0
  5441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5442 ;;      Params:         2       0       0       0       0       0       0
  5443 ;;      Locals:         0       0       0       0       0       0       0
  5444 ;;      Temps:          2       0       0       0       0       0       0
  5445 ;;      Totals:         4       0       0       0       0       0       0
  5446 ;;Total ram usage:        4 bytes
  5447 ;; Hardware stack levels used:    1
  5448 ;; Hardware stack levels required when called:    2
  5449 ;; This function calls:
  5450 ;;		_read_keypad
  5451 ;; This function is called by:
  5452 ;;		_main
  5453 ;;		_start_routine
  5454 ;; This function uses a non-reentrant model
  5455 ;;
  5456                           
  5457                           	psect	text9
  5458  00196E                     __ptext9:
  5459                           	opt stack 0
  5460  00196E                     _latch_keypad:
  5461                           	opt stack 27
  5462                           
  5463                           ;main.c: 323: while (*x == read_keypad())
  5464                           
  5465                           ;incstack = 0
  5466  00196E  D009               	goto	l3621
  5467  001970                     l3619:
  5468                           
  5469                           ;main.c: 324: {
  5470                           ;main.c: 325: _delay((unsigned long)((20)*(16000000/4000.0)));
  5471  001970  0E68               	movlw	104
  5472  001972  6E12               	movwf	??_latch_keypad& (0+255),c
  5473  001974  0EE4               	movlw	228
  5474  001976                     u4517:
  5475  001976  2EE8               	decfsz	wreg,f,c
  5476  001978  D7FE               	goto	u4517
  5477  00197A  2E12               	decfsz	??_latch_keypad& (0+255),f,c
  5478  00197C  D7FC               	goto	u4517
  5479  00197E  F000 F000          	nop2	
  5480  001982                     l3621:
  5481  001982  C010  FFD9         	movff	latch_keypad@x,fsr2l
  5482  001986  C011  FFDA         	movff	latch_keypad@x+1,fsr2h
  5483  00198A  ECD9  F00A         	call	_read_keypad	;wreg free
  5484  00198E  6E13               	movwf	(??_latch_keypad+1)& (0+255),c
  5485  001990  50DE               	movf	postinc2,w,c
  5486  001992  1813               	xorwf	??_latch_keypad+1,w,c
  5487  001994  B4D8               	btfsc	status,2,c
  5488  001996  D7EC               	goto	l3619
  5489                           
  5490                           ;main.c: 326: }
  5491                           ;main.c: 327: *x = '_';
  5492  001998  C010  FFD9         	movff	latch_keypad@x,fsr2l
  5493  00199C  C011  FFDA         	movff	latch_keypad@x+1,fsr2h
  5494  0019A0  0E5F               	movlw	95
  5495  0019A2  6EDF               	movwf	indf2,c
  5496  0019A4  0012               	return		;funcret
  5497  0019A6                     __end_of_latch_keypad:
  5498                           	opt stack 0
  5499                           tblptru	equ	0xFF8
  5500                           tblptrh	equ	0xFF7
  5501                           tblptrl	equ	0xFF6
  5502                           tablat	equ	0xFF5
  5503                           prodh	equ	0xFF4
  5504                           prodl	equ	0xFF3
  5505                           intcon	equ	0xFF2
  5506                           indf0	equ	0xFEF
  5507                           postinc0	equ	0xFEE
  5508                           fsr0h	equ	0xFEA
  5509                           fsr0l	equ	0xFE9
  5510                           wreg	equ	0xFE8
  5511                           indf1	equ	0xFE7
  5512                           postdec1	equ	0xFE5
  5513                           plusw1	equ	0xFE3
  5514                           fsr1h	equ	0xFE2
  5515                           fsr1l	equ	0xFE1
  5516                           indf2	equ	0xFDF
  5517                           postinc2	equ	0xFDE
  5518                           plusw2	equ	0xFDB
  5519                           fsr2h	equ	0xFDA
  5520                           fsr2l	equ	0xFD9
  5521                           status	equ	0xFD8
  5522                           
  5523 ;; *************** function _read_keypad *****************
  5524 ;; Defined at:
  5525 ;;		line 298 in file "main.c"
  5526 ;; Parameters:    Size  Location     Type
  5527 ;;		None
  5528 ;; Auto vars:     Size  Location     Type
  5529 ;;		None
  5530 ;; Return value:  Size  Location     Type
  5531 ;;                  1    wreg      unsigned char 
  5532 ;; Registers used:
  5533 ;;		wreg, status,2
  5534 ;; Tracked objects:
  5535 ;;		On entry : 0/0
  5536 ;;		On exit  : 0/0
  5537 ;;		Unchanged: 0/0
  5538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5539 ;;      Params:         0       0       0       0       0       0       0
  5540 ;;      Locals:         0       0       0       0       0       0       0
  5541 ;;      Temps:          0       0       0       0       0       0       0
  5542 ;;      Totals:         0       0       0       0       0       0       0
  5543 ;;Total ram usage:        0 bytes
  5544 ;; Hardware stack levels used:    1
  5545 ;; Hardware stack levels required when called:    1
  5546 ;; This function calls:
  5547 ;;		Nothing
  5548 ;; This function is called by:
  5549 ;;		_main
  5550 ;;		_latch_keypad
  5551 ;;		_start_routine
  5552 ;; This function uses a non-reentrant model
  5553 ;;
  5554                           
  5555                           	psect	text10
  5556  0015B2                     __ptext10:
  5557                           	opt stack 0
  5558  0015B2                     _read_keypad:
  5559                           	opt stack 28
  5560                           
  5561                           ;main.c: 300: TRISB = 0b01111000;
  5562                           
  5563                           ;incstack = 0
  5564  0015B2  0E78               	movlw	120
  5565  0015B4  6E93               	movwf	3987,c	;volatile
  5566                           
  5567                           ;main.c: 301: PORTB = 0b00000001;
  5568  0015B6  0E01               	movlw	1
  5569  0015B8  6E81               	movwf	3969,c	;volatile
  5570                           
  5571                           ;main.c: 303: if (PORTBbits.RB6) {PORTB = 0x00; return '*';}
  5572  0015BA  AC81               	btfss	3969,6,c	;volatile
  5573  0015BC  D004               	goto	l261
  5574  0015BE  0E00               	movlw	0
  5575  0015C0  6E81               	movwf	3969,c	;volatile
  5576  0015C2  0E2A               	movlw	42
  5577  0015C4  0012               	return	
  5578  0015C6                     l261:
  5579                           
  5580                           ;main.c: 304: if (PORTBbits.RB3) {PORTB = 0x00; return '1';}
  5581  0015C6  A681               	btfss	3969,3,c	;volatile
  5582  0015C8  D004               	goto	l263
  5583  0015CA  0E00               	movlw	0
  5584  0015CC  6E81               	movwf	3969,c	;volatile
  5585  0015CE  0E31               	movlw	49
  5586  0015D0  0012               	return	
  5587  0015D2                     l263:
  5588                           
  5589                           ;main.c: 305: if (PORTBbits.RB4) {PORTB = 0x00; return '4';}
  5590  0015D2  A881               	btfss	3969,4,c	;volatile
  5591  0015D4  D004               	goto	l264
  5592  0015D6  0E00               	movlw	0
  5593  0015D8  6E81               	movwf	3969,c	;volatile
  5594  0015DA  0E34               	movlw	52
  5595  0015DC  0012               	return	
  5596  0015DE                     l264:
  5597                           
  5598                           ;main.c: 306: if (PORTBbits.RB5) {PORTB = 0x00; return '7';}
  5599  0015DE  AA81               	btfss	3969,5,c	;volatile
  5600  0015E0  D004               	goto	l3441
  5601  0015E2  0E00               	movlw	0
  5602  0015E4  6E81               	movwf	3969,c	;volatile
  5603  0015E6  0E37               	movlw	55
  5604  0015E8  0012               	return	
  5605  0015EA                     l3441:
  5606                           
  5607                           ;main.c: 307: PORTB = 0b00000010;
  5608  0015EA  0E02               	movlw	2
  5609  0015EC  6E81               	movwf	3969,c	;volatile
  5610                           
  5611                           ;main.c: 309: if (PORTBbits.RB3) {PORTB = 0x00; return '2';}
  5612  0015EE  A681               	btfss	3969,3,c	;volatile
  5613  0015F0  D004               	goto	l266
  5614  0015F2  0E00               	movlw	0
  5615  0015F4  6E81               	movwf	3969,c	;volatile
  5616  0015F6  0E32               	movlw	50
  5617  0015F8  0012               	return	
  5618  0015FA                     l266:
  5619                           
  5620                           ;main.c: 310: if (PORTBbits.RB4) {PORTB = 0x00; return '5';}
  5621  0015FA  A881               	btfss	3969,4,c	;volatile
  5622  0015FC  D004               	goto	l267
  5623  0015FE  0E00               	movlw	0
  5624  001600  6E81               	movwf	3969,c	;volatile
  5625  001602  0E35               	movlw	53
  5626  001604  0012               	return	
  5627  001606                     l267:
  5628                           
  5629                           ;main.c: 311: if (PORTBbits.RB5) {PORTB = 0x00; return '8';}
  5630  001606  AA81               	btfss	3969,5,c	;volatile
  5631  001608  D004               	goto	l268
  5632  00160A  0E00               	movlw	0
  5633  00160C  6E81               	movwf	3969,c	;volatile
  5634  00160E  0E38               	movlw	56
  5635  001610  0012               	return	
  5636  001612                     l268:
  5637                           
  5638                           ;main.c: 312: if (PORTBbits.RB6) {PORTB = 0x00; return '0';}
  5639  001612  AC81               	btfss	3969,6,c	;volatile
  5640  001614  D004               	goto	l3469
  5641  001616  0E00               	movlw	0
  5642  001618  6E81               	movwf	3969,c	;volatile
  5643  00161A  0E30               	movlw	48
  5644  00161C  0012               	return	
  5645  00161E                     l3469:
  5646                           
  5647                           ;main.c: 313: PORTB = 0b00000100;
  5648  00161E  0E04               	movlw	4
  5649  001620  6E81               	movwf	3969,c	;volatile
  5650                           
  5651                           ;main.c: 315: if (PORTBbits.RB3) {PORTB = 0x00; return '3';}
  5652  001622  A681               	btfss	3969,3,c	;volatile
  5653  001624  D004               	goto	l270
  5654  001626  0E00               	movlw	0
  5655  001628  6E81               	movwf	3969,c	;volatile
  5656  00162A  0E33               	movlw	51
  5657  00162C  0012               	return	
  5658  00162E                     l270:
  5659                           
  5660                           ;main.c: 316: if (PORTBbits.RB4) {PORTB = 0x00; return '6';}
  5661  00162E  A881               	btfss	3969,4,c	;volatile
  5662  001630  D004               	goto	l271
  5663  001632  0E00               	movlw	0
  5664  001634  6E81               	movwf	3969,c	;volatile
  5665  001636  0E36               	movlw	54
  5666  001638  0012               	return	
  5667  00163A                     l271:
  5668                           
  5669                           ;main.c: 317: if (PORTBbits.RB5) {PORTB = 0x00; return '9';}
  5670  00163A  AA81               	btfss	3969,5,c	;volatile
  5671  00163C  D004               	goto	l272
  5672  00163E  0E00               	movlw	0
  5673  001640  6E81               	movwf	3969,c	;volatile
  5674  001642  0E39               	movlw	57
  5675  001644  0012               	return	
  5676  001646                     l272:
  5677                           
  5678                           ;main.c: 318: if (PORTBbits.RB6) {PORTB = 0x00; return '#';}
  5679  001646  AC81               	btfss	3969,6,c	;volatile
  5680  001648  D004               	goto	l3497
  5681  00164A  0E00               	movlw	0
  5682  00164C  6E81               	movwf	3969,c	;volatile
  5683  00164E  0E23               	movlw	35
  5684  001650  0012               	return	
  5685  001652                     l3497:
  5686                           
  5687                           ;main.c: 319: return '_';
  5688  001652  0E5F               	movlw	95
  5689  001654  0012               	return	
  5690  001656                     __end_of_read_keypad:
  5691                           	opt stack 0
  5692                           tblptru	equ	0xFF8
  5693                           tblptrh	equ	0xFF7
  5694                           tblptrl	equ	0xFF6
  5695                           tablat	equ	0xFF5
  5696                           prodh	equ	0xFF4
  5697                           prodl	equ	0xFF3
  5698                           intcon	equ	0xFF2
  5699                           indf0	equ	0xFEF
  5700                           postinc0	equ	0xFEE
  5701                           fsr0h	equ	0xFEA
  5702                           fsr0l	equ	0xFE9
  5703                           wreg	equ	0xFE8
  5704                           indf1	equ	0xFE7
  5705                           postdec1	equ	0xFE5
  5706                           plusw1	equ	0xFE3
  5707                           fsr1h	equ	0xFE2
  5708                           fsr1l	equ	0xFE1
  5709                           indf2	equ	0xFDF
  5710                           postinc2	equ	0xFDE
  5711                           plusw2	equ	0xFDB
  5712                           fsr2h	equ	0xFDA
  5713                           fsr2l	equ	0xFD9
  5714                           status	equ	0xFD8
  5715                           
  5716 ;; *************** function _Eeprom_Write_Byte *****************
  5717 ;; Defined at:
  5718 ;;		line 43 in file "eeprom.h"
  5719 ;; Parameters:    Size  Location     Type
  5720 ;;  address         1    wreg     unsigned char 
  5721 ;;  data            1   15[COMRAM] unsigned char 
  5722 ;; Auto vars:     Size  Location     Type
  5723 ;;  address         1   16[COMRAM] unsigned char 
  5724 ;; Return value:  Size  Location     Type
  5725 ;;                  1    wreg      void 
  5726 ;; Registers used:
  5727 ;;		wreg, status,2
  5728 ;; Tracked objects:
  5729 ;;		On entry : 0/0
  5730 ;;		On exit  : 0/0
  5731 ;;		Unchanged: 0/0
  5732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5733 ;;      Params:         1       0       0       0       0       0       0
  5734 ;;      Locals:         1       0       0       0       0       0       0
  5735 ;;      Temps:          0       0       0       0       0       0       0
  5736 ;;      Totals:         2       0       0       0       0       0       0
  5737 ;;Total ram usage:        2 bytes
  5738 ;; Hardware stack levels used:    1
  5739 ;; Hardware stack levels required when called:    1
  5740 ;; This function calls:
  5741 ;;		Nothing
  5742 ;; This function is called by:
  5743 ;;		_start_routine
  5744 ;; This function uses a non-reentrant model
  5745 ;;
  5746                           
  5747                           	psect	text11
  5748  001A56                     __ptext11:
  5749                           	opt stack 0
  5750  001A56                     _Eeprom_Write_Byte:
  5751                           	opt stack 28
  5752                           
  5753                           ;incstack = 0
  5754                           ;Eeprom_Write_Byte@address stored from wreg
  5755  001A56  6E11               	movwf	Eeprom_Write_Byte@address,c
  5756                           
  5757                           ;eeprom.h: 46: EEADR = (unsigned char)address;
  5758  001A58  C011  FFA9         	movff	Eeprom_Write_Byte@address,4009	;volatile
  5759                           
  5760                           ;eeprom.h: 48: EEDATA = data;
  5761  001A5C  C010  FFA8         	movff	Eeprom_Write_Byte@data,4008	;volatile
  5762                           
  5763                           ;eeprom.h: 49: EECON1bits.EEPGD = 0;
  5764  001A60  9EA6               	bcf	4006,7,c	;volatile
  5765                           
  5766                           ;eeprom.h: 50: EECON1bits.CFGS = 0;
  5767  001A62  9CA6               	bcf	4006,6,c	;volatile
  5768                           
  5769                           ;eeprom.h: 51: EECON1bits.WREN = 1;
  5770  001A64  84A6               	bsf	4006,2,c	;volatile
  5771                           
  5772                           ;eeprom.h: 55: EECON2 = 0x55;
  5773  001A66  0E55               	movlw	85
  5774  001A68  6EA7               	movwf	4007,c	;volatile
  5775                           
  5776                           ;eeprom.h: 56: EECON2 = 0xAA;
  5777  001A6A  0EAA               	movlw	170
  5778  001A6C  6EA7               	movwf	4007,c	;volatile
  5779                           
  5780                           ;eeprom.h: 57: EECON1bits.WR = 1;
  5781  001A6E  82A6               	bsf	4006,1,c	;volatile
  5782  001A70                     l153:
  5783  001A70  A8A1               	btfss	4001,4,c	;volatile
  5784  001A72  D7FE               	goto	l153
  5785                           
  5786                           ;eeprom.h: 63: }
  5787                           ;eeprom.h: 65: PIR2bits.EEIF = 0;
  5788  001A74  98A1               	bcf	4001,4,c	;volatile
  5789                           
  5790                           ;eeprom.h: 66: EECON1bits.WREN = 0;
  5791  001A76  94A6               	bcf	4006,2,c	;volatile
  5792  001A78  0012               	return		;funcret
  5793  001A7A                     __end_of_Eeprom_Write_Byte:
  5794                           	opt stack 0
  5795                           tblptru	equ	0xFF8
  5796                           tblptrh	equ	0xFF7
  5797                           tblptrl	equ	0xFF6
  5798                           tablat	equ	0xFF5
  5799                           prodh	equ	0xFF4
  5800                           prodl	equ	0xFF3
  5801                           intcon	equ	0xFF2
  5802                           indf0	equ	0xFEF
  5803                           postinc0	equ	0xFEE
  5804                           fsr0h	equ	0xFEA
  5805                           fsr0l	equ	0xFE9
  5806                           wreg	equ	0xFE8
  5807                           indf1	equ	0xFE7
  5808                           postdec1	equ	0xFE5
  5809                           plusw1	equ	0xFE3
  5810                           fsr1h	equ	0xFE2
  5811                           fsr1l	equ	0xFE1
  5812                           indf2	equ	0xFDF
  5813                           postinc2	equ	0xFDE
  5814                           plusw2	equ	0xFDB
  5815                           fsr2h	equ	0xFDA
  5816                           fsr2l	equ	0xFD9
  5817                           status	equ	0xFD8
  5818                           
  5819 ;; *************** function _mcu_initialise *****************
  5820 ;; Defined at:
  5821 ;;		line 268 in file "main.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;		None
  5824 ;; Auto vars:     Size  Location     Type
  5825 ;;		None
  5826 ;; Return value:  Size  Location     Type
  5827 ;;                  1    wreg      void 
  5828 ;; Registers used:
  5829 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5830 ;; Tracked objects:
  5831 ;;		On entry : 0/0
  5832 ;;		On exit  : 0/0
  5833 ;;		Unchanged: 0/0
  5834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5835 ;;      Params:         0       0       0       0       0       0       0
  5836 ;;      Locals:         0       0       0       0       0       0       0
  5837 ;;      Temps:          0       0       0       0       0       0       0
  5838 ;;      Totals:         0       0       0       0       0       0       0
  5839 ;;Total ram usage:        0 bytes
  5840 ;; Hardware stack levels used:    1
  5841 ;; Hardware stack levels required when called:    2
  5842 ;; This function calls:
  5843 ;;		_Eeprom_Read_Byte
  5844 ;; This function is called by:
  5845 ;;		_main
  5846 ;; This function uses a non-reentrant model
  5847 ;;
  5848                           
  5849                           	psect	text12
  5850  001894                     __ptext12:
  5851                           	opt stack 0
  5852  001894                     _mcu_initialise:
  5853                           	opt stack 28
  5854                           
  5855                           ;main.c: 271: I2C_ADDR = Eeprom_Read_Byte(EEP_I2C_ADDR);
  5856                           
  5857                           ;incstack = 0
  5858  001894  0100               	movlb	0	; () banked
  5859  001896  51CC               	movf	_EEP_I2C_ADDR& (0+255),w,b
  5860  001898  EC66  F00D         	call	_Eeprom_Read_Byte
  5861  00189C  0100               	movlb	0	; () banked
  5862  00189E  6FCE               	movwf	_I2C_ADDR& (0+255),b
  5863                           
  5864                           ; BSR set to: 0
  5865                           ;main.c: 272: Machine_ID = I2C_ADDR - 0x0F;
  5866  0018A0  0100               	movlb	0	; () banked
  5867  0018A2  51CE               	movf	_I2C_ADDR& (0+255),w,b
  5868  0018A4  0FF1               	addlw	241
  5869  0018A6  0100               	movlb	0	; () banked
  5870  0018A8  6FCF               	movwf	_Machine_ID& (0+255),b
  5871                           
  5872                           ; BSR set to: 0
  5873                           ;main.c: 275: OSCCON = 0x60;
  5874  0018AA  0E60               	movlw	96
  5875  0018AC  6ED3               	movwf	4051,c	;volatile
  5876                           
  5877                           ; BSR set to: 0
  5878                           ;main.c: 276: OSCTUNEbits.PLLEN = 0;
  5879  0018AE  9C9B               	bcf	3995,6,c	;volatile
  5880                           
  5881                           ; BSR set to: 0
  5882                           ;main.c: 278: TRISA = 0x00;
  5883  0018B0  0E00               	movlw	0
  5884  0018B2  6E92               	movwf	3986,c	;volatile
  5885                           
  5886                           ; BSR set to: 0
  5887                           ;main.c: 279: TRISB = 0x01;
  5888  0018B4  0E01               	movlw	1
  5889  0018B6  6E93               	movwf	3987,c	;volatile
  5890                           
  5891                           ; BSR set to: 0
  5892                           ;main.c: 280: TRISC = 0b00011000;
  5893  0018B8  0E18               	movlw	24
  5894  0018BA  6E94               	movwf	3988,c	;volatile
  5895                           
  5896                           ; BSR set to: 0
  5897                           ;main.c: 281: TRISD = 0x00;
  5898  0018BC  0E00               	movlw	0
  5899  0018BE  6E95               	movwf	3989,c	;volatile
  5900                           
  5901                           ; BSR set to: 0
  5902                           ;main.c: 282: LATC = 0b00011000;
  5903  0018C0  0E18               	movlw	24
  5904  0018C2  6E8B               	movwf	3979,c	;volatile
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;main.c: 284: SSPADD = I2C_ADDR * 2;
  5908  0018C4  0100               	movlb	0	; () banked
  5909  0018C6  51CE               	movf	_I2C_ADDR& (0+255),w,b
  5910  0018C8  0D02               	mullw	2
  5911  0018CA  CFF3 FFC8          	movff	prodl,4040	;volatile
  5912                           
  5913                           ; BSR set to: 0
  5914                           ;main.c: 285: SSPCON1 = 0x36;
  5915  0018CE  0E36               	movlw	54
  5916  0018D0  6EC6               	movwf	4038,c	;volatile
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;main.c: 288: SSPSTAT = 0x00;
  5920  0018D2  0E00               	movlw	0
  5921  0018D4  6EC7               	movwf	4039,c	;volatile
  5922                           
  5923                           ; BSR set to: 0
  5924                           ;main.c: 289: SSPCON2 = 0x01;
  5925  0018D6  0E01               	movlw	1
  5926  0018D8  6EC5               	movwf	4037,c	;volatile
  5927                           
  5928                           ; BSR set to: 0
  5929                           ;main.c: 291: PIR1bits.SSPIF = 0;
  5930  0018DA  969E               	bcf	3998,3,c	;volatile
  5931                           
  5932                           ; BSR set to: 0
  5933                           ;main.c: 292: PIE1bits.SSPIE = 1;
  5934  0018DC  869D               	bsf	3997,3,c	;volatile
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;main.c: 293: INTCONbits.GIE_GIEH = 1;
  5938  0018DE  8EF2               	bsf	intcon,7,c	;volatile
  5939                           
  5940                           ; BSR set to: 0
  5941                           ;main.c: 294: INTCONbits.PEIE_GIEL = 1;
  5942  0018E0  8CF2               	bsf	intcon,6,c	;volatile
  5943                           
  5944                           ; BSR set to: 0
  5945                           ;main.c: 295: INTCONbits.RBIE = 0;
  5946  0018E2  96F2               	bcf	intcon,3,c	;volatile
  5947                           
  5948                           ; BSR set to: 0
  5949  0018E4  0012               	return		;funcret
  5950  0018E6                     __end_of_mcu_initialise:
  5951                           	opt stack 0
  5952                           tblptru	equ	0xFF8
  5953                           tblptrh	equ	0xFF7
  5954                           tblptrl	equ	0xFF6
  5955                           tablat	equ	0xFF5
  5956                           prodh	equ	0xFF4
  5957                           prodl	equ	0xFF3
  5958                           intcon	equ	0xFF2
  5959                           indf0	equ	0xFEF
  5960                           postinc0	equ	0xFEE
  5961                           fsr0h	equ	0xFEA
  5962                           fsr0l	equ	0xFE9
  5963                           wreg	equ	0xFE8
  5964                           indf1	equ	0xFE7
  5965                           postdec1	equ	0xFE5
  5966                           plusw1	equ	0xFE3
  5967                           fsr1h	equ	0xFE2
  5968                           fsr1l	equ	0xFE1
  5969                           indf2	equ	0xFDF
  5970                           postinc2	equ	0xFDE
  5971                           plusw2	equ	0xFDB
  5972                           fsr2h	equ	0xFDA
  5973                           fsr2l	equ	0xFD9
  5974                           status	equ	0xFD8
  5975                           
  5976 ;; *************** function _Eeprom_Read_Byte *****************
  5977 ;; Defined at:
  5978 ;;		line 20 in file "eeprom.h"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;  address         1    wreg     unsigned char 
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;  address         1   15[COMRAM] unsigned char 
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  1    wreg      unsigned char 
  5985 ;; Registers used:
  5986 ;;		wreg, status,2
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5992 ;;      Params:         0       0       0       0       0       0       0
  5993 ;;      Locals:         1       0       0       0       0       0       0
  5994 ;;      Temps:          0       0       0       0       0       0       0
  5995 ;;      Totals:         1       0       0       0       0       0       0
  5996 ;;Total ram usage:        1 bytes
  5997 ;; Hardware stack levels used:    1
  5998 ;; Hardware stack levels required when called:    1
  5999 ;; This function calls:
  6000 ;;		Nothing
  6001 ;; This function is called by:
  6002 ;;		_mcu_initialise
  6003 ;; This function uses a non-reentrant model
  6004 ;;
  6005                           
  6006                           	psect	text13
  6007  001ACC                     __ptext13:
  6008                           	opt stack 0
  6009  001ACC                     _Eeprom_Read_Byte:
  6010                           	opt stack 28
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;incstack = 0
  6014                           ;Eeprom_Read_Byte@address stored from wreg
  6015  001ACC  6E10               	movwf	Eeprom_Read_Byte@address,c
  6016                           
  6017                           ;eeprom.h: 24: EEADR = (unsigned char)address;
  6018  001ACE  C010  FFA9         	movff	Eeprom_Read_Byte@address,4009	;volatile
  6019                           
  6020                           ;eeprom.h: 26: EECON1bits.EEPGD = 0;
  6021  001AD2  9EA6               	bcf	4006,7,c	;volatile
  6022                           
  6023                           ;eeprom.h: 27: EECON1bits.CFGS = 0;
  6024  001AD4  9CA6               	bcf	4006,6,c	;volatile
  6025                           
  6026                           ;eeprom.h: 28: EECON1bits.RD = 1;
  6027  001AD6  80A6               	bsf	4006,0,c	;volatile
  6028  001AD8                     l147:
  6029  001AD8  B0A6               	btfsc	4006,0,c	;volatile
  6030  001ADA  D7FE               	goto	l147
  6031                           
  6032                           ;eeprom.h: 34: return EEDATA;
  6033  001ADC  50A8               	movf	4008,w,c	;volatile
  6034  001ADE  0012               	return		;funcret
  6035  001AE0                     __end_of_Eeprom_Read_Byte:
  6036                           	opt stack 0
  6037                           tblptru	equ	0xFF8
  6038                           tblptrh	equ	0xFF7
  6039                           tblptrl	equ	0xFF6
  6040                           tablat	equ	0xFF5
  6041                           prodh	equ	0xFF4
  6042                           prodl	equ	0xFF3
  6043                           intcon	equ	0xFF2
  6044                           indf0	equ	0xFEF
  6045                           postinc0	equ	0xFEE
  6046                           fsr0h	equ	0xFEA
  6047                           fsr0l	equ	0xFE9
  6048                           wreg	equ	0xFE8
  6049                           indf1	equ	0xFE7
  6050                           postdec1	equ	0xFE5
  6051                           plusw1	equ	0xFE3
  6052                           fsr1h	equ	0xFE2
  6053                           fsr1l	equ	0xFE1
  6054                           indf2	equ	0xFDF
  6055                           postinc2	equ	0xFDE
  6056                           plusw2	equ	0xFDB
  6057                           fsr2h	equ	0xFDA
  6058                           fsr2l	equ	0xFD9
  6059                           status	equ	0xFD8
  6060                           
  6061 ;; *************** function _load_i2c_registers *****************
  6062 ;; Defined at:
  6063 ;;		line 330 in file "main.c"
  6064 ;; Parameters:    Size  Location     Type
  6065 ;;		None
  6066 ;; Auto vars:     Size  Location     Type
  6067 ;;  i               2   29[COMRAM] int 
  6068 ;;  i               2   33[COMRAM] int 
  6069 ;;  i               2   31[COMRAM] int 
  6070 ;;  checksum        2   27[COMRAM] int 
  6071 ;; Return value:  Size  Location     Type
  6072 ;;                  1    wreg      void 
  6073 ;; Registers used:
  6074 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6075 ;; Tracked objects:
  6076 ;;		On entry : 0/0
  6077 ;;		On exit  : 0/0
  6078 ;;		Unchanged: 0/0
  6079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6080 ;;      Params:         0       0       0       0       0       0       0
  6081 ;;      Locals:         8       0       0       0       0       0       0
  6082 ;;      Temps:          4       0       0       0       0       0       0
  6083 ;;      Totals:        12       0       0       0       0       0       0
  6084 ;;Total ram usage:       12 bytes
  6085 ;; Hardware stack levels used:    1
  6086 ;; Hardware stack levels required when called:    2
  6087 ;; This function calls:
  6088 ;;		___awdiv
  6089 ;; This function is called by:
  6090 ;;		_main
  6091 ;; This function uses a non-reentrant model
  6092 ;;
  6093                           
  6094                           	psect	text14
  6095  0014C6                     __ptext14:
  6096                           	opt stack 0
  6097  0014C6                     _load_i2c_registers:
  6098                           	opt stack 28
  6099                           
  6100                           ;main.c: 339: for (int i = 0; i < 9; i++)
  6101                           
  6102                           ;incstack = 0
  6103  0014C6  0E00               	movlw	0
  6104  0014C8  6E21               	movwf	load_i2c_registers@i+1,c
  6105  0014CA  0E00               	movlw	0
  6106  0014CC  6E20               	movwf	load_i2c_registers@i,c
  6107  0014CE                     l4019:
  6108  0014CE  BE21               	btfsc	load_i2c_registers@i+1,7,c
  6109  0014D0  D006               	goto	l4023
  6110  0014D2  5021               	movf	load_i2c_registers@i+1,w,c
  6111  0014D4  E115               	bnz	l4029
  6112  0014D6  0E09               	movlw	9
  6113  0014D8  5C20               	subwf	load_i2c_registers@i,w,c
  6114  0014DA  B0D8               	btfsc	status,0,c
  6115  0014DC  D011               	goto	l4029
  6116  0014DE                     l4023:
  6117                           
  6118                           ;main.c: 340: i2c_r_reg[i] = current_user[i];
  6119  0014DE  0EC3               	movlw	low _current_user
  6120  0014E0  2420               	addwf	load_i2c_registers@i,w,c
  6121  0014E2  6ED9               	movwf	fsr2l,c
  6122  0014E4  0E00               	movlw	high _current_user
  6123  0014E6  2021               	addwfc	load_i2c_registers@i+1,w,c
  6124  0014E8  6EDA               	movwf	fsr2h,c
  6125  0014EA  0E60               	movlw	low _i2c_r_reg
  6126  0014EC  2420               	addwf	load_i2c_registers@i,w,c
  6127  0014EE  6EE1               	movwf	fsr1l,c
  6128  0014F0  0E00               	movlw	high _i2c_r_reg
  6129  0014F2  2021               	addwfc	load_i2c_registers@i+1,w,c
  6130  0014F4  6EE2               	movwf	fsr1h,c
  6131  0014F6  CFDF FFE7          	movff	indf2,indf1
  6132  0014FA  4A20               	infsnz	load_i2c_registers@i,f,c
  6133  0014FC  2A21               	incf	load_i2c_registers@i+1,f,c
  6134  0014FE  D7E7               	goto	l4019
  6135  001500                     l4029:
  6136                           
  6137                           ;main.c: 342: for (int i = 9; i < 18; i++)
  6138  001500  0E00               	movlw	0
  6139  001502  6E23               	movwf	load_i2c_registers@i_839+1,c
  6140  001504  0E09               	movlw	9
  6141  001506  6E22               	movwf	load_i2c_registers@i_839,c
  6142  001508                     l4031:
  6143  001508  BE23               	btfsc	load_i2c_registers@i_839+1,7,c
  6144  00150A  D006               	goto	l4035
  6145  00150C  5023               	movf	load_i2c_registers@i_839+1,w,c
  6146  00150E  E121               	bnz	l4041
  6147  001510  0E12               	movlw	18
  6148  001512  5C22               	subwf	load_i2c_registers@i_839,w,c
  6149  001514  B0D8               	btfsc	status,0,c
  6150  001516  D01D               	goto	l4041
  6151  001518                     l4035:
  6152                           
  6153                           ;main.c: 343: i2c_r_reg[i] = current_pin[i - 9];
  6154  001518  0EF7               	movlw	247
  6155  00151A  6E18               	movwf	??_load_i2c_registers& (0+255),c
  6156  00151C  0EFF               	movlw	255
  6157  00151E  6E19               	movwf	(??_load_i2c_registers+1)& (0+255),c
  6158  001520  C022  F01A         	movff	load_i2c_registers@i_839,??_load_i2c_registers+2
  6159  001524  C023  F01B         	movff	load_i2c_registers@i_839+1,??_load_i2c_registers+3
  6160  001528  5018               	movf	??_load_i2c_registers,w,c
  6161  00152A  261A               	addwf	??_load_i2c_registers+2,f,c
  6162  00152C  5019               	movf	??_load_i2c_registers+1,w,c
  6163  00152E  221B               	addwfc	??_load_i2c_registers+3,f,c
  6164  001530  0EBA               	movlw	low _current_pin
  6165  001532  241A               	addwf	??_load_i2c_registers+2,w,c
  6166  001534  6ED9               	movwf	fsr2l,c
  6167  001536  0E00               	movlw	high _current_pin
  6168  001538  201B               	addwfc	??_load_i2c_registers+3,w,c
  6169  00153A  6EDA               	movwf	fsr2h,c
  6170  00153C  0E60               	movlw	low _i2c_r_reg
  6171  00153E  2422               	addwf	load_i2c_registers@i_839,w,c
  6172  001540  6EE1               	movwf	fsr1l,c
  6173  001542  0E00               	movlw	high _i2c_r_reg
  6174  001544  2023               	addwfc	load_i2c_registers@i_839+1,w,c
  6175  001546  6EE2               	movwf	fsr1h,c
  6176  001548  CFDF FFE7          	movff	indf2,indf1
  6177  00154C  4A22               	infsnz	load_i2c_registers@i_839,f,c
  6178  00154E  2A23               	incf	load_i2c_registers@i_839+1,f,c
  6179  001550  D7DB               	goto	l4031
  6180  001552                     l4041:
  6181                           
  6182                           ;main.c: 346: int checksum = 0x00;
  6183  001552  0E00               	movlw	0
  6184  001554  6E1D               	movwf	load_i2c_registers@checksum+1,c
  6185  001556  0E00               	movlw	0
  6186  001558  6E1C               	movwf	load_i2c_registers@checksum,c
  6187                           
  6188                           ;main.c: 347: for (int i = 0; i < 31; i++)
  6189  00155A  0E00               	movlw	0
  6190  00155C  6E1F               	movwf	load_i2c_registers@i_841+1,c
  6191  00155E  0E00               	movlw	0
  6192  001560  6E1E               	movwf	load_i2c_registers@i_841,c
  6193  001562                     l4043:
  6194  001562  BE1F               	btfsc	load_i2c_registers@i_841+1,7,c
  6195  001564  D006               	goto	l4047
  6196  001566  501F               	movf	load_i2c_registers@i_841+1,w,c
  6197  001568  E113               	bnz	l4053
  6198  00156A  0E1F               	movlw	31
  6199  00156C  5C1E               	subwf	load_i2c_registers@i_841,w,c
  6200  00156E  B0D8               	btfsc	status,0,c
  6201  001570  D00F               	goto	l4053
  6202  001572                     l4047:
  6203                           
  6204                           ;main.c: 348: {
  6205                           ;main.c: 349: checksum += i2c_r_reg[i];
  6206  001572  0E60               	movlw	low _i2c_r_reg
  6207  001574  241E               	addwf	load_i2c_registers@i_841,w,c
  6208  001576  6ED9               	movwf	fsr2l,c
  6209  001578  0E00               	movlw	high _i2c_r_reg
  6210  00157A  201F               	addwfc	load_i2c_registers@i_841+1,w,c
  6211  00157C  6EDA               	movwf	fsr2h,c
  6212  00157E  50DF               	movf	indf2,w,c
  6213  001580  6E18               	movwf	??_load_i2c_registers& (0+255),c
  6214  001582  5018               	movf	??_load_i2c_registers,w,c
  6215  001584  261C               	addwf	load_i2c_registers@checksum,f,c
  6216  001586  0E00               	movlw	0
  6217  001588  221D               	addwfc	load_i2c_registers@checksum+1,f,c
  6218  00158A  4A1E               	infsnz	load_i2c_registers@i_841,f,c
  6219  00158C  2A1F               	incf	load_i2c_registers@i_841+1,f,c
  6220  00158E  D7E9               	goto	l4043
  6221  001590                     l4053:
  6222                           
  6223                           ;main.c: 350: }
  6224                           ;main.c: 351: checksum /= 32;
  6225  001590  C01C  F010         	movff	load_i2c_registers@checksum,___awdiv@dividend
  6226  001594  C01D  F011         	movff	load_i2c_registers@checksum+1,___awdiv@dividend+1
  6227  001598  0E00               	movlw	0
  6228  00159A  6E13               	movwf	___awdiv@divisor+1,c
  6229  00159C  0E20               	movlw	32
  6230  00159E  6E12               	movwf	___awdiv@divisor,c
  6231  0015A0  EC2B  F00B         	call	___awdiv	;wreg free
  6232  0015A4  C010  F01C         	movff	?___awdiv,load_i2c_registers@checksum
  6233  0015A8  C011  F01D         	movff	?___awdiv+1,load_i2c_registers@checksum+1
  6234                           
  6235                           ;main.c: 352: i2c_r_reg[31] = checksum;
  6236  0015AC  C01C  F07F         	movff	load_i2c_registers@checksum,_i2c_r_reg+31	;volatile
  6237  0015B0  0012               	return		;funcret
  6238  0015B2                     __end_of_load_i2c_registers:
  6239                           	opt stack 0
  6240                           tblptru	equ	0xFF8
  6241                           tblptrh	equ	0xFF7
  6242                           tblptrl	equ	0xFF6
  6243                           tablat	equ	0xFF5
  6244                           prodh	equ	0xFF4
  6245                           prodl	equ	0xFF3
  6246                           intcon	equ	0xFF2
  6247                           indf0	equ	0xFEF
  6248                           postinc0	equ	0xFEE
  6249                           fsr0h	equ	0xFEA
  6250                           fsr0l	equ	0xFE9
  6251                           wreg	equ	0xFE8
  6252                           indf1	equ	0xFE7
  6253                           postdec1	equ	0xFE5
  6254                           plusw1	equ	0xFE3
  6255                           fsr1h	equ	0xFE2
  6256                           fsr1l	equ	0xFE1
  6257                           indf2	equ	0xFDF
  6258                           postinc2	equ	0xFDE
  6259                           plusw2	equ	0xFDB
  6260                           fsr2h	equ	0xFDA
  6261                           fsr2l	equ	0xFD9
  6262                           status	equ	0xFD8
  6263                           
  6264 ;; *************** function ___awdiv *****************
  6265 ;; Defined at:
  6266 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;  dividend        2   15[COMRAM] int 
  6269 ;;  divisor         2   17[COMRAM] int 
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;  quotient        2   21[COMRAM] int 
  6272 ;;  sign            1   20[COMRAM] unsigned char 
  6273 ;;  counter         1   19[COMRAM] unsigned char 
  6274 ;; Return value:  Size  Location     Type
  6275 ;;                  2   15[COMRAM] int 
  6276 ;; Registers used:
  6277 ;;		wreg, status,2, status,0
  6278 ;; Tracked objects:
  6279 ;;		On entry : 0/0
  6280 ;;		On exit  : 0/0
  6281 ;;		Unchanged: 0/0
  6282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6283 ;;      Params:         4       0       0       0       0       0       0
  6284 ;;      Locals:         4       0       0       0       0       0       0
  6285 ;;      Temps:          0       0       0       0       0       0       0
  6286 ;;      Totals:         8       0       0       0       0       0       0
  6287 ;;Total ram usage:        8 bytes
  6288 ;; Hardware stack levels used:    1
  6289 ;; Hardware stack levels required when called:    1
  6290 ;; This function calls:
  6291 ;;		Nothing
  6292 ;; This function is called by:
  6293 ;;		_main
  6294 ;;		_load_i2c_registers
  6295 ;;		_start_routine
  6296 ;; This function uses a non-reentrant model
  6297 ;;
  6298                           
  6299                           	psect	text15
  6300  001656                     __ptext15:
  6301                           	opt stack 0
  6302  001656                     ___awdiv:
  6303                           	opt stack 28
  6304                           
  6305                           ;incstack = 0
  6306  001656  0E00               	movlw	0
  6307  001658  6E15               	movwf	___awdiv@sign,c
  6308  00165A  AE13               	btfss	___awdiv@divisor+1,7,c
  6309  00165C  D006               	goto	l3633
  6310  00165E  6C12               	negf	___awdiv@divisor,c
  6311  001660  1E13               	comf	___awdiv@divisor+1,f,c
  6312  001662  B0D8               	btfsc	status,0,c
  6313  001664  2A13               	incf	___awdiv@divisor+1,f,c
  6314  001666  0E01               	movlw	1
  6315  001668  6E15               	movwf	___awdiv@sign,c
  6316  00166A                     l3633:
  6317  00166A  AE11               	btfss	___awdiv@dividend+1,7,c
  6318  00166C  D006               	goto	l3639
  6319  00166E  6C10               	negf	___awdiv@dividend,c
  6320  001670  1E11               	comf	___awdiv@dividend+1,f,c
  6321  001672  B0D8               	btfsc	status,0,c
  6322  001674  2A11               	incf	___awdiv@dividend+1,f,c
  6323  001676  0E01               	movlw	1
  6324  001678  1A15               	xorwf	___awdiv@sign,f,c
  6325  00167A                     l3639:
  6326  00167A  0E00               	movlw	0
  6327  00167C  6E17               	movwf	___awdiv@quotient+1,c
  6328  00167E  0E00               	movlw	0
  6329  001680  6E16               	movwf	___awdiv@quotient,c
  6330  001682  5012               	movf	___awdiv@divisor,w,c
  6331  001684  1013               	iorwf	___awdiv@divisor+1,w,c
  6332  001686  B4D8               	btfsc	status,2,c
  6333  001688  D01C               	goto	l3661
  6334  00168A  0E01               	movlw	1
  6335  00168C  6E14               	movwf	___awdiv@counter,c
  6336  00168E  D004               	goto	l3647
  6337  001690                     l3645:
  6338  001690  90D8               	bcf	status,0,c
  6339  001692  3612               	rlcf	___awdiv@divisor,f,c
  6340  001694  3613               	rlcf	___awdiv@divisor+1,f,c
  6341  001696  2A14               	incf	___awdiv@counter,f,c
  6342  001698                     l3647:
  6343  001698  AE13               	btfss	___awdiv@divisor+1,7,c
  6344  00169A  D7FA               	goto	l3645
  6345  00169C                     l3649:
  6346  00169C  90D8               	bcf	status,0,c
  6347  00169E  3616               	rlcf	___awdiv@quotient,f,c
  6348  0016A0  3617               	rlcf	___awdiv@quotient+1,f,c
  6349  0016A2  5012               	movf	___awdiv@divisor,w,c
  6350  0016A4  5C10               	subwf	___awdiv@dividend,w,c
  6351  0016A6  5013               	movf	___awdiv@divisor+1,w,c
  6352  0016A8  5811               	subwfb	___awdiv@dividend+1,w,c
  6353  0016AA  A0D8               	btfss	status,0,c
  6354  0016AC  D005               	goto	l3657
  6355  0016AE  5012               	movf	___awdiv@divisor,w,c
  6356  0016B0  5E10               	subwf	___awdiv@dividend,f,c
  6357  0016B2  5013               	movf	___awdiv@divisor+1,w,c
  6358  0016B4  5A11               	subwfb	___awdiv@dividend+1,f,c
  6359  0016B6  8016               	bsf	___awdiv@quotient,0,c
  6360  0016B8                     l3657:
  6361  0016B8  90D8               	bcf	status,0,c
  6362  0016BA  3213               	rrcf	___awdiv@divisor+1,f,c
  6363  0016BC  3212               	rrcf	___awdiv@divisor,f,c
  6364  0016BE  2E14               	decfsz	___awdiv@counter,f,c
  6365  0016C0  D7ED               	goto	l3649
  6366  0016C2                     l3661:
  6367  0016C2  5015               	movf	___awdiv@sign,w,c
  6368  0016C4  B4D8               	btfsc	status,2,c
  6369  0016C6  D004               	goto	l3665
  6370  0016C8  6C16               	negf	___awdiv@quotient,c
  6371  0016CA  1E17               	comf	___awdiv@quotient+1,f,c
  6372  0016CC  B0D8               	btfsc	status,0,c
  6373  0016CE  2A17               	incf	___awdiv@quotient+1,f,c
  6374  0016D0                     l3665:
  6375  0016D0  C016  F010         	movff	___awdiv@quotient,?___awdiv
  6376  0016D4  C017  F011         	movff	___awdiv@quotient+1,?___awdiv+1
  6377  0016D8  0012               	return	
  6378  0016DA                     __end_of___awdiv:
  6379                           	opt stack 0
  6380                           tblptru	equ	0xFF8
  6381                           tblptrh	equ	0xFF7
  6382                           tblptrl	equ	0xFF6
  6383                           tablat	equ	0xFF5
  6384                           prodh	equ	0xFF4
  6385                           prodl	equ	0xFF3
  6386                           intcon	equ	0xFF2
  6387                           indf0	equ	0xFEF
  6388                           postinc0	equ	0xFEE
  6389                           fsr0h	equ	0xFEA
  6390                           fsr0l	equ	0xFE9
  6391                           wreg	equ	0xFE8
  6392                           indf1	equ	0xFE7
  6393                           postdec1	equ	0xFE5
  6394                           plusw1	equ	0xFE3
  6395                           fsr1h	equ	0xFE2
  6396                           fsr1l	equ	0xFE1
  6397                           indf2	equ	0xFDF
  6398                           postinc2	equ	0xFDE
  6399                           plusw2	equ	0xFDB
  6400                           fsr2h	equ	0xFDA
  6401                           fsr2l	equ	0xFD9
  6402                           status	equ	0xFD8
  6403                           
  6404 ;; *************** function _Lcd_Init *****************
  6405 ;; Defined at:
  6406 ;;		line 76 in file "lcd.h"
  6407 ;; Parameters:    Size  Location     Type
  6408 ;;		None
  6409 ;; Auto vars:     Size  Location     Type
  6410 ;;		None
  6411 ;; Return value:  Size  Location     Type
  6412 ;;                  1    wreg      void 
  6413 ;; Registers used:
  6414 ;;		wreg, status,2, cstack
  6415 ;; Tracked objects:
  6416 ;;		On entry : 0/0
  6417 ;;		On exit  : 0/0
  6418 ;;		Unchanged: 0/0
  6419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6420 ;;      Params:         0       0       0       0       0       0       0
  6421 ;;      Locals:         0       0       0       0       0       0       0
  6422 ;;      Temps:          1       0       0       0       0       0       0
  6423 ;;      Totals:         1       0       0       0       0       0       0
  6424 ;;Total ram usage:        1 bytes
  6425 ;; Hardware stack levels used:    1
  6426 ;; Hardware stack levels required when called:    3
  6427 ;; This function calls:
  6428 ;;		_Lcd_Cmd
  6429 ;;		_Lcd_Port
  6430 ;; This function is called by:
  6431 ;;		_main
  6432 ;; This function uses a non-reentrant model
  6433 ;;
  6434                           
  6435                           	psect	text16
  6436  001758                     __ptext16:
  6437                           	opt stack 0
  6438  001758                     _Lcd_Init:
  6439                           	opt stack 27
  6440                           
  6441                           ;lcd.h: 78: Lcd_Port(0x00);
  6442                           
  6443                           ;incstack = 0
  6444  001758  0E00               	movlw	0
  6445  00175A  EC02  F00D         	call	_Lcd_Port
  6446                           
  6447                           ;lcd.h: 79: _delay((unsigned long)((20)*(16000000/4000.0)));
  6448  00175E  0E68               	movlw	104
  6449  001760  6E12               	movwf	??_Lcd_Init& (0+255),c
  6450  001762  0EE4               	movlw	228
  6451  001764                     u4527:
  6452  001764  2EE8               	decfsz	wreg,f,c
  6453  001766  D7FE               	goto	u4527
  6454  001768  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
  6455  00176A  D7FC               	goto	u4527
  6456  00176C  F000 F000          	nop2	
  6457                           
  6458                           ;lcd.h: 80: Lcd_Cmd(0x03);
  6459  001770  0E03               	movlw	3
  6460  001772  EC5A  F00D         	call	_Lcd_Cmd
  6461                           
  6462                           ;lcd.h: 81: _delay((unsigned long)((5)*(16000000/4000.0)));
  6463  001776  0E1A               	movlw	26
  6464  001778  6E12               	movwf	??_Lcd_Init& (0+255),c
  6465  00177A  0EF8               	movlw	248
  6466  00177C                     u4537:
  6467  00177C  2EE8               	decfsz	wreg,f,c
  6468  00177E  D7FE               	goto	u4537
  6469  001780  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
  6470  001782  D7FC               	goto	u4537
  6471  001784  F000 F000          	nop2	
  6472                           
  6473                           ;lcd.h: 82: Lcd_Cmd(0x03);
  6474  001788  0E03               	movlw	3
  6475  00178A  EC5A  F00D         	call	_Lcd_Cmd
  6476                           
  6477                           ;lcd.h: 83: _delay((unsigned long)((11)*(16000000/4000.0)));
  6478  00178E  0E3A               	movlw	58
  6479  001790  6E12               	movwf	??_Lcd_Init& (0+255),c
  6480  001792  0E23               	movlw	35
  6481  001794                     u4547:
  6482  001794  2EE8               	decfsz	wreg,f,c
  6483  001796  D7FE               	goto	u4547
  6484  001798  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
  6485  00179A  D7FC               	goto	u4547
  6486  00179C  F000               	nop	
  6487                           
  6488                           ;lcd.h: 84: Lcd_Cmd(0x03);
  6489  00179E  0E03               	movlw	3
  6490  0017A0  EC5A  F00D         	call	_Lcd_Cmd
  6491                           
  6492                           ;lcd.h: 86: Lcd_Cmd(0x02);
  6493  0017A4  0E02               	movlw	2
  6494  0017A6  EC5A  F00D         	call	_Lcd_Cmd
  6495                           
  6496                           ;lcd.h: 87: Lcd_Cmd(0x02);
  6497  0017AA  0E02               	movlw	2
  6498  0017AC  EC5A  F00D         	call	_Lcd_Cmd
  6499                           
  6500                           ;lcd.h: 88: Lcd_Cmd(0x08);
  6501  0017B0  0E08               	movlw	8
  6502  0017B2  EC5A  F00D         	call	_Lcd_Cmd
  6503                           
  6504                           ;lcd.h: 89: Lcd_Cmd(0x00);
  6505  0017B6  0E00               	movlw	0
  6506  0017B8  EC5A  F00D         	call	_Lcd_Cmd
  6507                           
  6508                           ;lcd.h: 90: Lcd_Cmd(0x0C);
  6509  0017BC  0E0C               	movlw	12
  6510  0017BE  EC5A  F00D         	call	_Lcd_Cmd
  6511                           
  6512                           ;lcd.h: 91: Lcd_Cmd(0x00);
  6513  0017C2  0E00               	movlw	0
  6514  0017C4  EC5A  F00D         	call	_Lcd_Cmd
  6515                           
  6516                           ;lcd.h: 92: Lcd_Cmd(0x06);
  6517  0017C8  0E06               	movlw	6
  6518  0017CA  EC5A  F00D         	call	_Lcd_Cmd
  6519  0017CE  0012               	return		;funcret
  6520  0017D0                     __end_of_Lcd_Init:
  6521                           	opt stack 0
  6522                           tblptru	equ	0xFF8
  6523                           tblptrh	equ	0xFF7
  6524                           tblptrl	equ	0xFF6
  6525                           tablat	equ	0xFF5
  6526                           prodh	equ	0xFF4
  6527                           prodl	equ	0xFF3
  6528                           intcon	equ	0xFF2
  6529                           indf0	equ	0xFEF
  6530                           postinc0	equ	0xFEE
  6531                           fsr0h	equ	0xFEA
  6532                           fsr0l	equ	0xFE9
  6533                           wreg	equ	0xFE8
  6534                           indf1	equ	0xFE7
  6535                           postdec1	equ	0xFE5
  6536                           plusw1	equ	0xFE3
  6537                           fsr1h	equ	0xFE2
  6538                           fsr1l	equ	0xFE1
  6539                           indf2	equ	0xFDF
  6540                           postinc2	equ	0xFDE
  6541                           plusw2	equ	0xFDB
  6542                           fsr2h	equ	0xFDA
  6543                           fsr2l	equ	0xFD9
  6544                           status	equ	0xFD8
  6545                           
  6546 ;; *************** function _Lcd_Cmd *****************
  6547 ;; Defined at:
  6548 ;;		line 38 in file "lcd.h"
  6549 ;; Parameters:    Size  Location     Type
  6550 ;;  a               1    wreg     unsigned char 
  6551 ;; Auto vars:     Size  Location     Type
  6552 ;;  a               1   16[COMRAM] unsigned char 
  6553 ;; Return value:  Size  Location     Type
  6554 ;;                  1    wreg      void 
  6555 ;; Registers used:
  6556 ;;		wreg, status,2, cstack
  6557 ;; Tracked objects:
  6558 ;;		On entry : 0/0
  6559 ;;		On exit  : 0/0
  6560 ;;		Unchanged: 0/0
  6561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6562 ;;      Params:         0       0       0       0       0       0       0
  6563 ;;      Locals:         1       0       0       0       0       0       0
  6564 ;;      Temps:          0       0       0       0       0       0       0
  6565 ;;      Totals:         1       0       0       0       0       0       0
  6566 ;;Total ram usage:        1 bytes
  6567 ;; Hardware stack levels used:    1
  6568 ;; Hardware stack levels required when called:    2
  6569 ;; This function calls:
  6570 ;;		_Lcd_Port
  6571 ;; This function is called by:
  6572 ;;		_Lcd_Clear
  6573 ;;		_Lcd_Set_Cursor
  6574 ;;		_Lcd_Init
  6575 ;;		_Lcd_Shift_Right
  6576 ;;		_Lcd_Shift_Left
  6577 ;; This function uses a non-reentrant model
  6578 ;;
  6579                           
  6580                           	psect	text17
  6581  001AB4                     __ptext17:
  6582                           	opt stack 0
  6583  001AB4                     _Lcd_Cmd:
  6584                           	opt stack 25
  6585                           
  6586                           ;incstack = 0
  6587                           ;Lcd_Cmd@a stored from wreg
  6588  001AB4  6E11               	movwf	Lcd_Cmd@a,c
  6589                           
  6590                           ;lcd.h: 40: PORTDbits.RD5 = 0;
  6591  001AB6  9A83               	bcf	3971,5,c	;volatile
  6592                           
  6593                           ;lcd.h: 41: Lcd_Port(a);
  6594  001AB8  5011               	movf	Lcd_Cmd@a,w,c
  6595  001ABA  EC02  F00D         	call	_Lcd_Port
  6596                           
  6597                           ;lcd.h: 42: PORTDbits.RD4 = 1;
  6598  001ABE  8883               	bsf	3971,4,c	;volatile
  6599                           
  6600                           ;lcd.h: 44: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6601  001AC0  0EC8               	movlw	200
  6602  001AC2                     u4557:
  6603  001AC2  F000               	nop	
  6604  001AC4  2EE8               	decfsz	wreg,f,c
  6605  001AC6  D7FD               	goto	u4557
  6606                           
  6607                           ;lcd.h: 45: PORTDbits.RD4 = 0;
  6608  001AC8  9883               	bcf	3971,4,c	;volatile
  6609  001ACA  0012               	return		;funcret
  6610  001ACC                     __end_of_Lcd_Cmd:
  6611                           	opt stack 0
  6612                           tblptru	equ	0xFF8
  6613                           tblptrh	equ	0xFF7
  6614                           tblptrl	equ	0xFF6
  6615                           tablat	equ	0xFF5
  6616                           prodh	equ	0xFF4
  6617                           prodl	equ	0xFF3
  6618                           intcon	equ	0xFF2
  6619                           indf0	equ	0xFEF
  6620                           postinc0	equ	0xFEE
  6621                           fsr0h	equ	0xFEA
  6622                           fsr0l	equ	0xFE9
  6623                           wreg	equ	0xFE8
  6624                           indf1	equ	0xFE7
  6625                           postdec1	equ	0xFE5
  6626                           plusw1	equ	0xFE3
  6627                           fsr1h	equ	0xFE2
  6628                           fsr1l	equ	0xFE1
  6629                           indf2	equ	0xFDF
  6630                           postinc2	equ	0xFDE
  6631                           plusw2	equ	0xFDB
  6632                           fsr2h	equ	0xFDA
  6633                           fsr2l	equ	0xFD9
  6634                           status	equ	0xFD8
  6635                           
  6636 ;; *************** function _Lcd_Port *****************
  6637 ;; Defined at:
  6638 ;;		line 16 in file "lcd.h"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;  a               1    wreg     unsigned char 
  6641 ;; Auto vars:     Size  Location     Type
  6642 ;;  a               1   15[COMRAM] unsigned char 
  6643 ;; Return value:  Size  Location     Type
  6644 ;;                  1    wreg      void 
  6645 ;; Registers used:
  6646 ;;		wreg
  6647 ;; Tracked objects:
  6648 ;;		On entry : 0/0
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6652 ;;      Params:         0       0       0       0       0       0       0
  6653 ;;      Locals:         1       0       0       0       0       0       0
  6654 ;;      Temps:          0       0       0       0       0       0       0
  6655 ;;      Totals:         1       0       0       0       0       0       0
  6656 ;;Total ram usage:        1 bytes
  6657 ;; Hardware stack levels used:    1
  6658 ;; Hardware stack levels required when called:    1
  6659 ;; This function calls:
  6660 ;;		Nothing
  6661 ;; This function is called by:
  6662 ;;		_Lcd_Cmd
  6663 ;;		_Lcd_Init
  6664 ;;		_Lcd_Write_Char
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           	psect	text18
  6669  001A04                     __ptext18:
  6670                           	opt stack 0
  6671  001A04                     _Lcd_Port:
  6672                           	opt stack 25
  6673                           
  6674                           ;incstack = 0
  6675                           ;Lcd_Port@a stored from wreg
  6676  001A04  6E10               	movwf	Lcd_Port@a,c
  6677                           
  6678                           ;lcd.h: 18: if(a & 1)
  6679  001A06  A010               	btfss	Lcd_Port@a,0,c
  6680  001A08  D002               	goto	l69
  6681                           
  6682                           ;lcd.h: 19: PORTDbits.RD0 = 1;
  6683  001A0A  8083               	bsf	3971,0,c	;volatile
  6684  001A0C  D001               	goto	l3343
  6685  001A0E                     l69:
  6686                           
  6687                           ;lcd.h: 20: else
  6688                           ;lcd.h: 21: PORTDbits.RD0 = 0;
  6689  001A0E  9083               	bcf	3971,0,c	;volatile
  6690  001A10                     l3343:
  6691                           
  6692                           ;lcd.h: 23: if(a & 2)
  6693  001A10  A210               	btfss	Lcd_Port@a,1,c
  6694  001A12  D002               	goto	l71
  6695                           
  6696                           ;lcd.h: 24: PORTDbits.RD1 = 1;
  6697  001A14  8283               	bsf	3971,1,c	;volatile
  6698  001A16  D001               	goto	l3347
  6699  001A18                     l71:
  6700                           
  6701                           ;lcd.h: 25: else
  6702                           ;lcd.h: 26: PORTDbits.RD1 = 0;
  6703  001A18  9283               	bcf	3971,1,c	;volatile
  6704  001A1A                     l3347:
  6705                           
  6706                           ;lcd.h: 28: if(a & 4)
  6707  001A1A  A410               	btfss	Lcd_Port@a,2,c
  6708  001A1C  D002               	goto	l73
  6709                           
  6710                           ;lcd.h: 29: PORTDbits.RD2 = 1;
  6711  001A1E  8483               	bsf	3971,2,c	;volatile
  6712  001A20  D001               	goto	l3351
  6713  001A22                     l73:
  6714                           
  6715                           ;lcd.h: 30: else
  6716                           ;lcd.h: 31: PORTDbits.RD2 = 0;
  6717  001A22  9483               	bcf	3971,2,c	;volatile
  6718  001A24                     l3351:
  6719                           
  6720                           ;lcd.h: 33: if(a & 8)
  6721  001A24  A610               	btfss	Lcd_Port@a,3,c
  6722  001A26  D002               	goto	l75
  6723                           
  6724                           ;lcd.h: 34: PORTDbits.RD3 = 1;
  6725  001A28  8683               	bsf	3971,3,c	;volatile
  6726  001A2A  0012               	return	
  6727  001A2C                     l75:
  6728                           
  6729                           ;lcd.h: 35: else
  6730                           ;lcd.h: 36: PORTDbits.RD3 = 0;
  6731  001A2C  9683               	bcf	3971,3,c	;volatile
  6732  001A2E  0012               	return	
  6733  001A30                     __end_of_Lcd_Port:
  6734                           	opt stack 0
  6735                           tblptru	equ	0xFF8
  6736                           tblptrh	equ	0xFF7
  6737                           tblptrl	equ	0xFF6
  6738                           tablat	equ	0xFF5
  6739                           prodh	equ	0xFF4
  6740                           prodl	equ	0xFF3
  6741                           intcon	equ	0xFF2
  6742                           indf0	equ	0xFEF
  6743                           postinc0	equ	0xFEE
  6744                           fsr0h	equ	0xFEA
  6745                           fsr0l	equ	0xFE9
  6746                           wreg	equ	0xFE8
  6747                           indf1	equ	0xFE7
  6748                           postdec1	equ	0xFE5
  6749                           plusw1	equ	0xFE3
  6750                           fsr1h	equ	0xFE2
  6751                           fsr1l	equ	0xFE1
  6752                           indf2	equ	0xFDF
  6753                           postinc2	equ	0xFDE
  6754                           plusw2	equ	0xFDB
  6755                           fsr2h	equ	0xFDA
  6756                           fsr2l	equ	0xFD9
  6757                           status	equ	0xFD8
  6758                           
  6759 ;; *************** function _ISR *****************
  6760 ;; Defined at:
  6761 ;;		line 358 in file "main.c"
  6762 ;; Parameters:    Size  Location     Type
  6763 ;;		None
  6764 ;; Auto vars:     Size  Location     Type
  6765 ;;  sspBuf          1   14[COMRAM] unsigned char 
  6766 ;; Return value:  Size  Location     Type
  6767 ;;                  1    wreg      void 
  6768 ;; Registers used:
  6769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6770 ;; Tracked objects:
  6771 ;;		On entry : 0/0
  6772 ;;		On exit  : 0/0
  6773 ;;		Unchanged: 0/0
  6774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6775 ;;      Params:         0       0       0       0       0       0       0
  6776 ;;      Locals:         1       0       0       0       0       0       0
  6777 ;;      Temps:         14       0       0       0       0       0       0
  6778 ;;      Totals:        15       0       0       0       0       0       0
  6779 ;;Total ram usage:       15 bytes
  6780 ;; Hardware stack levels used:    1
  6781 ;; This function calls:
  6782 ;;		Nothing
  6783 ;; This function is called by:
  6784 ;;		Interrupt level 2
  6785 ;; This function uses a non-reentrant model
  6786 ;;
  6787                           
  6788                           	psect	intcode
  6789  000008                     __pintcode:
  6790                           	opt stack 0
  6791  000008                     _ISR:
  6792                           	opt stack 25
  6793                           
  6794                           ;incstack = 0
  6795  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6796  00000A  CFFA F001          	movff	pclath,??_ISR
  6797  00000E  CFFB F002          	movff	pclatu,??_ISR+1
  6798  000012  CFE9 F003          	movff	fsr0l,??_ISR+2
  6799  000016  CFEA F004          	movff	fsr0h,??_ISR+3
  6800  00001A  CFE1 F005          	movff	fsr1l,??_ISR+4
  6801  00001E  CFE2 F006          	movff	fsr1h,??_ISR+5
  6802  000022  CFD9 F007          	movff	fsr2l,??_ISR+6
  6803  000026  CFDA F008          	movff	fsr2h,??_ISR+7
  6804  00002A  CFF3 F009          	movff	prodl,??_ISR+8
  6805  00002E  CFF4 F00A          	movff	prodh,??_ISR+9
  6806  000032  CFF6 F00B          	movff	tblptrl,??_ISR+10
  6807  000036  CFF7 F00C          	movff	tblptrh,??_ISR+11
  6808  00003A  CFF8 F00D          	movff	tblptru,??_ISR+12
  6809  00003E  CFF5 F00E          	movff	tablat,??_ISR+13
  6810                           
  6811                           ;main.c: 360: unsigned char sspBuf;
  6812                           ;main.c: 362: if (PIR1bits.SSPIF) {
  6813  000042  A69E               	btfss	3998,3,c	;volatile
  6814  000044  D03E               	goto	i2l301
  6815                           
  6816                           ;main.c: 364: if (!SSPSTATbits.D_NOT_A) {
  6817  000046  BAC7               	btfsc	4039,5,c	;volatile
  6818  000048  D013               	goto	i2l3311
  6819                           
  6820                           ;main.c: 368: i2c_byte_count = 0;
  6821  00004A  0E00               	movlw	0
  6822  00004C  6E4E               	movwf	_i2c_byte_count,c	;volatile
  6823                           
  6824                           ;main.c: 370: if (SSPSTATbits.BF) {
  6825  00004E  B0C7               	btfsc	4039,0,c	;volatile
  6826                           
  6827                           ;main.c: 372: sspBuf = SSPBUF;
  6828  000050  CFC9 F00F          	movff	4041,ISR@sspBuf	;volatile
  6829                           
  6830                           ;main.c: 373: }
  6831                           ;main.c: 375: if (SSPSTATbits.R_NOT_W) {
  6832  000054  A4C7               	btfss	4039,2,c	;volatile
  6833  000056  D031               	goto	i2l3333
  6834                           
  6835                           ;main.c: 377: SSPCON1bits.WCOL = 0;
  6836  000058  9EC6               	bcf	4038,7,c	;volatile
  6837                           
  6838                           ;main.c: 378: SSPBUF = i2c_r_reg[i2c_reg_addr++];
  6839  00005A  504F               	movf	_i2c_reg_addr,w,c	;volatile
  6840  00005C  0D01               	mullw	1
  6841  00005E  0E60               	movlw	low _i2c_r_reg
  6842  000060  24F3               	addwf	prodl,w,c
  6843  000062  6ED9               	movwf	fsr2l,c
  6844  000064  0E00               	movlw	high _i2c_r_reg
  6845  000066  20F4               	addwfc	prodh,w,c
  6846  000068  6EDA               	movwf	fsr2h,c
  6847  00006A  50DF               	movf	indf2,w,c
  6848  00006C  6EC9               	movwf	4041,c	;volatile
  6849  00006E  D024               	goto	i2l3331
  6850  000070                     i2l3311:
  6851                           
  6852                           ;main.c: 385: i2c_byte_count++;
  6853  000070  2A4E               	incf	_i2c_byte_count,f,c	;volatile
  6854                           
  6855                           ;main.c: 387: if (SSPSTATbits.BF) {
  6856  000072  B0C7               	btfsc	4039,0,c	;volatile
  6857                           
  6858                           ;main.c: 388: sspBuf = SSPBUF;
  6859  000074  CFC9 F00F          	movff	4041,ISR@sspBuf	;volatile
  6860                           
  6861                           ;main.c: 389: }
  6862                           ;main.c: 391: if (SSPSTATbits.R_NOT_W) {
  6863  000078  A4C7               	btfss	4039,2,c	;volatile
  6864  00007A  D00E               	goto	i2l3325
  6865                           
  6866                           ;main.c: 394: SSPCON1bits.WCOL = 0;
  6867  00007C  9EC6               	bcf	4038,7,c	;volatile
  6868                           
  6869                           ;main.c: 395: SSPBUF = i2c_r_reg[i2c_reg_addr++];
  6870  00007E  504F               	movf	_i2c_reg_addr,w,c	;volatile
  6871  000080  0D01               	mullw	1
  6872  000082  0E60               	movlw	low _i2c_r_reg
  6873  000084  24F3               	addwf	prodl,w,c
  6874  000086  6ED9               	movwf	fsr2l,c
  6875  000088  0E00               	movlw	high _i2c_r_reg
  6876  00008A  20F4               	addwfc	prodh,w,c
  6877  00008C  6EDA               	movwf	fsr2h,c
  6878  00008E  50DF               	movf	indf2,w,c
  6879  000090  6EC9               	movwf	4041,c	;volatile
  6880  000092  2A4F               	incf	_i2c_reg_addr,f,c	;volatile
  6881                           
  6882                           ;main.c: 396: LATDbits.LATD6 = 1;
  6883  000094  8C8C               	bsf	3980,6,c	;volatile
  6884                           
  6885                           ;main.c: 398: } else {
  6886  000096  D011               	goto	i2l3333
  6887  000098                     i2l3325:
  6888                           
  6889                           ;main.c: 400: if (i2c_byte_count == 1) {
  6890  000098  044E               	decf	_i2c_byte_count,w,c	;volatile
  6891  00009A  A4D8               	btfss	status,2,c
  6892  00009C  D003               	goto	i2l3329
  6893                           
  6894                           ;main.c: 402: i2c_reg_addr = sspBuf;
  6895  00009E  C00F  F04F         	movff	ISR@sspBuf,_i2c_reg_addr	;volatile
  6896                           
  6897                           ;main.c: 404: } else {
  6898  0000A2  D00B               	goto	i2l3333
  6899  0000A4                     i2l3329:
  6900                           
  6901                           ;main.c: 407: i2c_w_reg[i2c_reg_addr++] = sspBuf;
  6902  0000A4  504F               	movf	_i2c_reg_addr,w,c	;volatile
  6903  0000A6  0D01               	mullw	1
  6904  0000A8  0E33               	movlw	low _i2c_w_reg
  6905  0000AA  24F3               	addwf	prodl,w,c
  6906  0000AC  6ED9               	movwf	fsr2l,c
  6907  0000AE  0E01               	movlw	high _i2c_w_reg
  6908  0000B0  20F4               	addwfc	prodh,w,c
  6909  0000B2  6EDA               	movwf	fsr2h,c
  6910  0000B4  C00F  FFDF         	movff	ISR@sspBuf,indf2
  6911  0000B8                     i2l3331:
  6912  0000B8  2A4F               	incf	_i2c_reg_addr,f,c	;volatile
  6913  0000BA                     i2l3333:
  6914                           
  6915                           ;main.c: 408: }
  6916                           ;main.c: 409: }
  6917                           ;main.c: 410: }
  6918                           ;main.c: 412: i2c_reg_addr %= sizeof(i2c_r_reg);
  6919  0000BA  0E1F               	movlw	31
  6920  0000BC  164F               	andwf	_i2c_reg_addr,f,c	;volatile
  6921                           
  6922                           ;main.c: 415: PIR1bits.SSPIF = 0;
  6923  0000BE  969E               	bcf	3998,3,c	;volatile
  6924                           
  6925                           ;main.c: 416: SSPCON1bits.CKP = 1;
  6926  0000C0  88C6               	bsf	4038,4,c	;volatile
  6927  0000C2                     i2l301:
  6928  0000C2  C00E  FFF5         	movff	??_ISR+13,tablat
  6929  0000C6  C00D  FFF8         	movff	??_ISR+12,tblptru
  6930  0000CA  C00C  FFF7         	movff	??_ISR+11,tblptrh
  6931  0000CE  C00B  FFF6         	movff	??_ISR+10,tblptrl
  6932  0000D2  C00A  FFF4         	movff	??_ISR+9,prodh
  6933  0000D6  C009  FFF3         	movff	??_ISR+8,prodl
  6934  0000DA  C008  FFDA         	movff	??_ISR+7,fsr2h
  6935  0000DE  C007  FFD9         	movff	??_ISR+6,fsr2l
  6936  0000E2  C006  FFE2         	movff	??_ISR+5,fsr1h
  6937  0000E6  C005  FFE1         	movff	??_ISR+4,fsr1l
  6938  0000EA  C004  FFEA         	movff	??_ISR+3,fsr0h
  6939  0000EE  C003  FFE9         	movff	??_ISR+2,fsr0l
  6940  0000F2  C002  FFFB         	movff	??_ISR+1,pclatu
  6941  0000F6  C001  FFFA         	movff	??_ISR,pclath
  6942  0000FA  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6943  0000FC  0011               	retfie		f
  6944  0000FE                     __end_of_ISR:
  6945                           	opt stack 0
  6946                           pclatu	equ	0xFFB
  6947                           pclath	equ	0xFFA
  6948                           tblptru	equ	0xFF8
  6949                           tblptrh	equ	0xFF7
  6950                           tblptrl	equ	0xFF6
  6951                           tablat	equ	0xFF5
  6952                           prodh	equ	0xFF4
  6953                           prodl	equ	0xFF3
  6954                           intcon	equ	0xFF2
  6955                           indf0	equ	0xFEF
  6956                           postinc0	equ	0xFEE
  6957                           fsr0h	equ	0xFEA
  6958                           fsr0l	equ	0xFE9
  6959                           wreg	equ	0xFE8
  6960                           indf1	equ	0xFE7
  6961                           postdec1	equ	0xFE5
  6962                           plusw1	equ	0xFE3
  6963                           fsr1h	equ	0xFE2
  6964                           fsr1l	equ	0xFE1
  6965                           indf2	equ	0xFDF
  6966                           postinc2	equ	0xFDE
  6967                           plusw2	equ	0xFDB
  6968                           fsr2h	equ	0xFDA
  6969                           fsr2l	equ	0xFD9
  6970                           status	equ	0xFD8
  6971                           pclatu	equ	0xFFB
  6972                           pclath	equ	0xFFA
  6973                           tblptru	equ	0xFF8
  6974                           tblptrh	equ	0xFF7
  6975                           tblptrl	equ	0xFF6
  6976                           tablat	equ	0xFF5
  6977                           prodh	equ	0xFF4
  6978                           prodl	equ	0xFF3
  6979                           intcon	equ	0xFF2
  6980                           indf0	equ	0xFEF
  6981                           postinc0	equ	0xFEE
  6982                           fsr0h	equ	0xFEA
  6983                           fsr0l	equ	0xFE9
  6984                           wreg	equ	0xFE8
  6985                           indf1	equ	0xFE7
  6986                           postdec1	equ	0xFE5
  6987                           plusw1	equ	0xFE3
  6988                           fsr1h	equ	0xFE2
  6989                           fsr1l	equ	0xFE1
  6990                           indf2	equ	0xFDF
  6991                           postinc2	equ	0xFDE
  6992                           plusw2	equ	0xFDB
  6993                           fsr2h	equ	0xFDA
  6994                           fsr2l	equ	0xFD9
  6995                           status	equ	0xFD8
  6996                           
  6997                           	psect	rparam
  6998  0000                     pclatu	equ	0xFFB
  6999                           pclath	equ	0xFFA
  7000                           tblptru	equ	0xFF8
  7001                           tblptrh	equ	0xFF7
  7002                           tblptrl	equ	0xFF6
  7003                           tablat	equ	0xFF5
  7004                           prodh	equ	0xFF4
  7005                           prodl	equ	0xFF3
  7006                           intcon	equ	0xFF2
  7007                           indf0	equ	0xFEF
  7008                           postinc0	equ	0xFEE
  7009                           fsr0h	equ	0xFEA
  7010                           fsr0l	equ	0xFE9
  7011                           wreg	equ	0xFE8
  7012                           indf1	equ	0xFE7
  7013                           postdec1	equ	0xFE5
  7014                           plusw1	equ	0xFE3
  7015                           fsr1h	equ	0xFE2
  7016                           fsr1l	equ	0xFE1
  7017                           indf2	equ	0xFDF
  7018                           postinc2	equ	0xFDE
  7019                           plusw2	equ	0xFDB
  7020                           fsr2h	equ	0xFDA
  7021                           fsr2l	equ	0xFD9
  7022                           status	equ	0xFD8
  7023                           
  7024                           	psect	temp
  7025  000050                     btemp:
  7026                           	opt stack 0
  7027  000050                     	ds	1
  7028  0000                     int$flags	set	btemp
  7029                           pclatu	equ	0xFFB
  7030                           pclath	equ	0xFFA
  7031                           tblptru	equ	0xFF8
  7032                           tblptrh	equ	0xFF7
  7033                           tblptrl	equ	0xFF6
  7034                           tablat	equ	0xFF5
  7035                           prodh	equ	0xFF4
  7036                           prodl	equ	0xFF3
  7037                           intcon	equ	0xFF2
  7038                           indf0	equ	0xFEF
  7039                           postinc0	equ	0xFEE
  7040                           fsr0h	equ	0xFEA
  7041                           fsr0l	equ	0xFE9
  7042                           wreg	equ	0xFE8
  7043                           indf1	equ	0xFE7
  7044                           postdec1	equ	0xFE5
  7045                           plusw1	equ	0xFE3
  7046                           fsr1h	equ	0xFE2
  7047                           fsr1l	equ	0xFE1
  7048                           indf2	equ	0xFDF
  7049                           postinc2	equ	0xFDE
  7050                           plusw2	equ	0xFDB
  7051                           fsr2h	equ	0xFDA
  7052                           fsr2l	equ	0xFD9
  7053                           status	equ	0xFD8


Data Sizes:
    Strings     318
    Constant    0
    Data        119
    BSS         22
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     52      79
    BANK0           160     44     112
    BANK1           256     51      99
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    start_routine@error_msg	PTR unsigned char  size(2) Largest target is 17
		 -> STR_27(CODE[17]), STR_26(CODE[17]), 

    latch_keypad@x	PTR unsigned char  size(2) Largest target is 1
		 -> start_routine@x(BANK0[1]), main@x(BANK1[1]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 1535
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[2]), 
		 -> STR_23(CODE[5]), STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), 
		 -> STR_19(CODE[17]), STR_18(CODE[17]), STR_17(CODE[11]), STR_16(CODE[6]), 
		 -> STR_15(CODE[5]), STR_14(CODE[17]), STR_13(CODE[17]), STR_12(CODE[17]), 
		 -> STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[17]), 
		 -> STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[2]), RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    _main->_start_routine
    _start_routine->_menu_progress_bar
    _menu_progress_bar->___wmul
    ___wmul->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _mcu_initialise->_Eeprom_Read_Byte
    _load_i2c_registers->___awdiv
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_start_routine

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                59    59      0   50334
                                             36 BANK0      8     8      0
                                              0 BANK1     51    51      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awdiv
                       _latch_keypad
                 _load_i2c_registers
                     _mcu_initialise
                  _menu_progress_bar
                        _read_keypad
                      _start_routine
 ---------------------------------------------------------------------------------
 (1) _start_routine                                       40    40      0   23362
                                             48 COMRAM     4     4      0
                                              0 BANK0     36    36      0
                  _Eeprom_Write_Byte
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awdiv
                       _latch_keypad
                  _menu_progress_bar
                        _read_keypad
 ---------------------------------------------------------------------------------
 (2) _menu_progress_bar                                   20    18      2   10655
                                             28 COMRAM    20    18      2
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     848
                                             22 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1781
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_String                                     6     4      2    2463
                                             19 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_Char                                       3     3      0     254
                                             16 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Set_Cursor                                       5     4      1    4395
                                             17 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Clear                                            1     1      0     155
                                             17 COMRAM     1     1      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _latch_keypad                                         4     2      2     524
                                             15 COMRAM     4     2      2
                        _read_keypad
 ---------------------------------------------------------------------------------
 (2) _read_keypad                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Write_Byte                                    2     1      1     139
                                             15 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _mcu_initialise                                       0     0      0      31
                   _Eeprom_Read_Byte
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Read_Byte                                     1     1      0      31
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _load_i2c_registers                                  12    12      0    2569
                                             23 COMRAM    12    12      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2139
                                             15 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     279
                                             17 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Cmd                                              1     1      0     155
                                             16 COMRAM     1     1      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (5) _Lcd_Port                                             1     1      0     124
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 15    15      0      46
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___awdiv
   _latch_keypad
     _read_keypad
   _load_i2c_registers
     ___awdiv
   _mcu_initialise
     _Eeprom_Read_Byte
   _menu_progress_bar
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___lwdiv
     ___wmul
       ___lwdiv (ARG)
   _read_keypad
   _start_routine
     _Eeprom_Write_Byte
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___awdiv
     _latch_keypad
       _read_keypad
     _menu_progress_bar
       _Lcd_Clear
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Write_Char
         _Lcd_Port
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___lwdiv
       ___wmul
         ___lwdiv (ARG)
     _read_keypad

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     33      63       7       38.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2C      70       5       70.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     34      4F       1       84.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     122      15        0.0%
DATA                 0      0     122       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Oct 14 07:27:51 2016

                            _c 0080                 start_routine@a 00AA                 start_routine@b 00A0  
               start_routine@h 008E                 start_routine@i 0094                 start_routine@l 008F  
               start_routine@n 00B0                 start_routine@v 0093                 start_routine@x 00AF  
                  _SSPSTATbits 000FC7                             l71 1A18                             l73 1A22  
                           l75 1A2C                             l69 1A0E                   ___awdiv@sign 0015  
                           _hx 0153                start_routine@d1 0092            ___wmul@multiplicand 0019  
              start_routine@dh 00AE                start_routine@dt 00AB    __size_of_load_i2c_registers 00EC  
                 __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000  
       __size_of_start_routine 0780                   __CFG_CP3$OFF 000000                            l230 09B0  
                          l153 1A70                            l226 085C                            l147 1AD8  
                          l261 15C6                            l270 162E                            l271 163A  
                          l263 15D2                            l272 1646                            l264 15DE  
                          l337 121C                            l266 15FA                            l267 1606  
                          l268 1612                            l752 188A                   __CFG_CPB$OFF 000000  
                 __CFG_CPD$OFF 000000                            _ISR 0008                   __CFG_BORV$30 000000  
                          prod 000FF3                            wreg 000FE8        Eeprom_Read_Byte@address 0010  
                 __CFG_LVP$OFF 000000                           ?_ISR 0001                           l4001 130A  
                         l4011 133C                           l4005 1320                           l4013 1348  
                         l4031 1508                           l4023 14DE                           l4015 1352  
                         l4041 1552                           l4043 1562                           l4035 1518  
                         l4019 14CE                           l3411 180E                           l4211 031E  
                         l4053 1590                           l4029 1500                           l4301 067E  
                         l3351 1A24                           l3343 1A10                           l4047 1572  
                         l3407 17DA                           l4231 03D2                           l4143 0120  
                         l3441 15EA                           l3513 1858                           l4321 0730  
                         l4241 040A                           l4233 03DC                           l4161 01A8  
                         l4401 09B2                           l3347 1A1A                           l3515 1860  
                         l4411 09DC                           l4323 073C                           l4243 0416  
                         l4155 0188                           l3621 1982                           l3525 1880  
                         l3517 1864                           l4237 03F2                           l4229 03CA  
                         l4157 0192                           l4149 0148                           l3543 13D6  
                         l3535 13B6                           l4423 0A14                           l4415 09F2  
                         l4343 0834                           l4335 0808                           l4327 07CA  
                         l4319 0728                           l4167 01EC                           l3633 166A  
                         l3553 141C                           l4433 0A3C                           l4249 0500  
                         l3619 1970                           l3571 1474                           l3563 144A  
                         l3547 13F0                           l3539 13C6                           l3803 0E14  
                         l4435 0A48                           l4363 08BA                           l4267 0578  
                         l4179 022A                           l3645 1690                           l3661 16C2  
                         l3469 161E                           l3397 190E                           l3581 1490  
                         l3741 0BFE                           l4461 0B36                           l4429 0A34  
                         l4381 0934                           l3647 1698                           l3639 167A  
                         l3591 14C0                           l3583 1498                           l3575 1484  
                         l3567 1462                           l3559 143A                           l3911 107C  
                         l4471 0B9C                           l4439 0A54                           l4367 08DE  
                         l3665 16D0                           l3657 16B8                           l3649 169C  
                         l3497 1652                           l3905 1064                           l3825 0E7E  
                         l3761 0C70                           l3745 0C14                           l4457 0B20  
                         l4393 0982                           l4377 091E                           l4385 094C  
                         l3587 14A8                           l3931 1146                           l3835 0EBC  
                         l4475 0BB8                           l3941 117A                           l3773 0CB0  
                         l3765 0C8A                           l3757 0C5A                           l3749 0C2E  
                         l4397 0998                           l3935 115C                           l4479 0BC0  
                         l3881 0FD6                           l3891 101A                           l3859 0F4C  
                         l3795 0DE4                           l3973 1266                           l3957 11F6  
                         l3885 0FEC                           l3877 0FBE                           l3991 12D0  
                         l3983 12A4                           l3879 0FC6                           l3799 0DFA  
                         l3977 1280                           l3969 1250                           l3995 12E6  
                         l3979 1290                           l3999 1300                           STR_2 7EC1  
                         STR_3 7F27                           STR_4 7ED2                           STR_5 7F5A  
                         STR_6 7ED2                           STR_7 7FD1                           STR_8 7F05  
                         STR_9 7FC0                           u3010 1806                           u3020 183A  
                         _LATC 000F8B                           u3017 17FC                           u3027 1830  
                         u4051 058C                           u4160 085C                           u3195 1378  
                         u4180 08B8                           u4407 0C76                           u3640 121C  
                         u4417 0E00                           u4507 1A8C                           u4427 11FC  
                         u3900 0184                           u4517 1976                           u4437 126C  
                         u4357 03FA                           u4527 1764                           u4447 12EC  
                         u4367 08C2                           u4537 177C                           u4457 13DC  
                         u4377 093C                           u4547 1794                           u4467 1450  
                         u4387 09A0                           u4557 1AC2                           u4477 14AE  
                         u4397 0C1A                           u4487 1952                           u4497 1964  
                         u3890 0144              ?_Lcd_Write_String 0014                           _main 0102  
                         fsr0h 000FEA                           fsr1h 000FE2                           indf0 000FEF  
                         fsr0l 000FE9                           fsr2h 000FDA                           indf1 000FE7  
                         fsr1l 000FE1                           indf2 000FDF                           fsr2l 000FD9  
                         btemp 0050                           pclat 000FFA                           prodh 000FF4  
                         prodl 000FF3                           start 00FE             ??_Lcd_Write_String 0016  
                __CFG_IESO$OFF 000000                __end_of_Lcd_Cmd 1ACC                  __CFG_MCLRE$ON 000000  
                 ___param_bank 000010                          ??_ISR 0001                          ?_main 0001  
              __end_of___awdiv 16DA                          _EEADR 000FA9                          STR_10 7EF4  
                        STR_11 7F9E                          STR_12 7EF4                          STR_20 7F49  
                        STR_13 7EC1                          STR_21 7FAF                          STR_22 7F49  
                        STR_14 7EE3                          STR_23 7FF8                          STR_15 7FF3  
                        STR_24 7FFD                          STR_16 7FED                          STR_17 7FE2  
                        STR_25 7F8D                          STR_26 7F6B                          STR_18 7F38  
                        STR_19 7F7C                          STR_27 7F16                ___awdiv@divisor 0012  
              __end_of___lwdiv 1894                          i2l301 00C2                ___awdiv@counter 0014  
                        _PORTB 000F81        __size_of_Lcd_Set_Cursor 0050                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94                          _TRISD 000F95  
               _i2c_byte_count 004E                  __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000  
                ?_latch_keypad 0010                  __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000  
                __CFG_WRT3$OFF 000000                 __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000  
               __CFG_EBTR1$OFF 000000                     _Machine_ID 00CF             start_routine@F3723 008A  
               __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000  
                __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000                   ?_read_keypad 0001  
               __CFG_EBTRB$OFF 000000                          main@a 0120                          main@c 0100  
                        main@i 0125                          main@n 0131                          main@p 0130  
                        main@x 0132                          tablat 000FF5             start_routine@i_901 009A  
           start_routine@i_904 009C             start_routine@i_907 009E             start_routine@i_908 00A5  
           start_routine@i_883 0098             start_routine@i_875 0096             start_routine@i_895 00AC  
           start_routine@i_898 00A3        load_i2c_registers@i_841 001E        load_i2c_registers@i_839 0022  
                _start_routine 0BDA                          plusw1 000FE3                          plusw2 000FDB  
                        status 000FD8  menu_progress_bar@load_time_ms 001D                 __CFG_HFOFST$ON 000000  
             __end_of_Lcd_Init 17D0               __end_of_Lcd_Port 1A30                __initialization 16DA  
                 __end_of_main 0BDA                         ??_main 00B2             __size_of_Lcd_Clear 0020  
                __activetblptr 000002           _credentials_accepted 00CD                 ??_latch_keypad 0012  
                       _EEDATA 000FA8                         _EECON2 000FA7               ___awdiv@dividend 0010  
               ?_start_routine 0001                         i2l3311 0070                         i2l3331 00B8  
                       i2l3325 0098                         i2l3333 00BA                 __CFG_WDTEN$OFF 000000  
                       i2l3329 00A4                         _OSCCON 000FD3                      ??_Lcd_Cmd 0011  
      __size_of_Lcd_Write_Char 0038                         _SSPADD 000FC8                         _SSPBUF 000FC9  
               __CFG_XINST$OFF 000000                         ___wmul 1A30                      ??___awdiv 0014  
               __CFG_STVREN$ON 000000                      ??___lwdiv 0014              ?_Eeprom_Read_Byte 0001  
                       clear_0 16E0               ___awdiv@quotient 0016             ??_Eeprom_Read_Byte 0010  
                 __pdataCOMRAM 0035                   __mediumconst 7EC0                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                Lcd_Set_Cursor@a 0013  
              Lcd_Set_Cursor@b 0012                Lcd_Set_Cursor@y 0015                Lcd_Set_Cursor@z 0014  
                   __accesstop 0060        __end_of__initialization 174A                __CFG_PBADEN$OFF 000000  
            __end_of_Lcd_Clear 1A9A                  ___rparam_used 000001              _menu_progress_bar 135A  
               __pcstackCOMRAM 0001                   __pidataBANK0 19D6                   __pidataBANK1 19A6  
           ?_menu_progress_bar 001D                 _Lcd_Set_Cursor 18E6            ??_menu_progress_bar 001F  
                 _EEP_I2C_ADDR 00CC                      ?_Lcd_Init 0001                      ?_Lcd_Port 0001  
              ??_start_routine 0031           __size_of_read_keypad 00A4                     __pbssBANK0 00BA  
    __end_of_menu_progress_bar 14C6                      ISR@sspBuf 000F           __end_of_latch_keypad 19A6  
                      ?___wmul 0017     __end_of_load_i2c_registers 15B2   start_routine@new_I2C_address 00B1  
    __size_of_Lcd_Write_String 0072         __end_of_Lcd_Set_Cursor 1936         menu_progress_bar@i_722 002B  
       menu_progress_bar@i_723 002D         menu_progress_bar@i_724 002F                     ??_Lcd_Init 0012  
                   ??_Lcd_Port 0010                        _SSPCON1 000FC6                        _SSPCON2 000FC5  
      __size_of_mcu_initialise 0052                        _SSPSTAT 000FC7                 _Lcd_Write_Char 1936  
                      _Lcd_Cmd 1AB4                        __Hparam 0000                        __Lparam 0000  
                      ___awdiv 1656                __size_of___wmul 0026                        ___lwdiv 1842  
                      __pcinit 16DA                        __ramtop 0600                ?_Lcd_Set_Cursor 0012  
                      __ptext0 0102                        __ptext1 0BDA                        __ptext2 135A  
                      __ptext3 1A30                        __ptext4 1842                        __ptext5 17D0  
                      __ptext6 1936                        __ptext7 18E6                        __ptext8 1A7A  
                      __ptext9 196E            menu_progress_bar@ii 0027                   __size_of_ISR 00F6  
                      main@n_c 0115         __end_of_Lcd_Write_Char 196E           end_of_initialization 174A  
                __Lmediumconst 7EC0     __size_of_menu_progress_bar 016C                        postdec1 000FE5  
                      postinc0 000FEE                        postinc2 000FDE                      Lcd_Port@a 0010  
                    _PORTBbits 000F81                      _PORTDbits 000F83                ?_Lcd_Write_Char 0001  
    __size_of_Eeprom_Read_Byte 0014              Lcd_Write_String@a 0014              Lcd_Write_String@i 0018  
        __size_of_latch_keypad 0038                     main@digits 012F                     main@buffer 010A  
                 _i2c_reg_addr 004F                  latch_keypad@x 0010                      _Lcd_Clear 1A7A  
               __end_of___wmul 1A56               _Lcd_Write_String 17D0                  __pidataCOMRAM 1A9A  
            _Eeprom_Write_Byte 1A56             ?_Eeprom_Write_Byte 0010            start_initialization 16DA  
                 _latch_keypad 196E                    __end_of_ISR 00FE                      _i2c_r_reg 0060  
                    _i2c_w_reg 0133                 _mcu_initialise 1894            ??_Eeprom_Write_Byte 0011  
            __size_of_Lcd_Init 0078              __size_of_Lcd_Port 002C                     ?_Lcd_Clear 0001  
                     ??___wmul 001B                    __pdataBANK0 0060                    __pdataBANK1 0133  
             __CFG_LPT1OSC$OFF 000000      __end_of_Eeprom_Write_Byte 1A7A                Lcd_Write_Char@a 0013  
              Lcd_Write_Char@y 0012      menu_seconds_to_mmss@F3627 003F                    __pbssCOMRAM 004E  
       __end_of_mcu_initialise 18E6                  __pcstackBANK0 008E                  __pcstackBANK1 0100  
                ??_read_keypad 0010             _load_i2c_registers 14C6          __end_of_start_routine 135A  
          ?_load_i2c_registers 0001                       ?_Lcd_Cmd 0001                      __pnvBANK0 00CE  
                 _current_user 00C3               ___lwdiv@dividend 0010              __CFG_CCP2MX$PORTC 000000  
             ??_Lcd_Set_Cursor 0013                      __pintcode 0008                  __pmediumconst 7EC0  
                     ?___awdiv 0010                       ?___lwdiv 0010           ??_load_i2c_registers 0018  
                     _I2C_ADDR 00CE                ?_mcu_initialise 0001               ___lwdiv@quotient 0015  
             _Eeprom_Read_Byte 1ACC             menu_progress_bar@d 0023             menu_progress_bar@i 0029  
          __end_of_read_keypad 1656                 ___wmul@product 001B                       _LATDbits 000F8C  
                     _PIE1bits 000F9D                       Lcd_Cmd@a 0011                       _PIR1bits 000F9E  
                     _PIR2bits 000FA1                    ??_Lcd_Clear 0012               __CFG_WDTPS$32768 000000  
   load_i2c_registers@checksum 001C                      main@F3695 008D                      main@F3679 0035  
   __size_of_Eeprom_Write_Byte 0024                      main@i_803 012D                      main@i_770 0127  
                    main@i_766 012B                      main@i_776 0121                      main@i_792 011B  
                    main@i_785 0123                      main@i_769 0117                      main@i_795 011D  
            ___wmul@multiplier 0017                      main@i_789 0119                      main@i_798 0129  
                    main@i_799 0113               ??_Lcd_Write_Char 0011                       _Lcd_Init 1758  
                     _Lcd_Port 1A04                      copy_data0 16FE                      copy_data1 171E  
                    copy_data2 173E       __end_of_Lcd_Write_String 1842               __size_of_Lcd_Cmd 0018  
                   _EECON1bits 000FA6                       __Hrparam 0000                       __Lrparam 0000  
           __CFG_BOREN$SBORDIS 000000               __size_of___awdiv 0084               __size_of___lwdiv 0052  
          load_i2c_registers@i 0020      start_routine@I2C_new_ADDR 00A7                    _current_pin 00BA  
              ___lwdiv@divisor 0012                ___lwdiv@counter 0014                    _read_keypad 15B2  
                     __ptext10 15B2                       __ptext11 1A56                       __ptext12 1894  
                     __ptext13 1ACC                       __ptext14 14C6                       __ptext15 1656  
                     __ptext16 1758                       __ptext17 1AB4                       __ptext18 1A04  
                __size_of_main 0AD8           main@credential_state 0116          Eeprom_Write_Byte@data 0010  
     Eeprom_Write_Byte@address 0011                       int$flags 0050            main@is_leading_zero 011F  
                  _OSCTUNEbits 000F9B                     _INTCONbits 000FF2             Lcd_Write_Char@temp 0011  
                     intlevel2 0000       __end_of_Eeprom_Read_Byte 1AE0             Lcd_Set_Cursor@temp 0016  
             ??_mcu_initialise 0011                 menu_main@F3618 0049         start_routine@error_msg 0090  
                  _SSPCON1bits 000FC6              __CFG_FOSC$INTIO67 000000  
