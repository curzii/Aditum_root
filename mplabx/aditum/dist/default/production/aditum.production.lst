

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Sep 27 17:41:29 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	idataBANK0,global,class=CODE,delta=1
     8                           	psect	idataBANK1,global,class=CODE,delta=1
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    43                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    44  0000                     
    45                           	psect	eeprom_data
    46  F00000  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    47                           
    48                           	psect	idataCOMRAM
    49  0019FA                     __pidataCOMRAM:
    50                           	opt stack 0
    51                           
    52                           ;initializer for menu_seconds_to_mmss@F3627
    53  0019FA  30                 	db	48
    54  0019FB  31                 	db	49
    55  0019FC  32                 	db	50
    56  0019FD  33                 	db	51
    57  0019FE  34                 	db	52
    58  0019FF  35                 	db	53
    59  001A00  36                 	db	54
    60  001A01  37                 	db	55
    61  001A02  38                 	db	56
    62  001A03  39                 	db	57
    63                           
    64                           ;initializer for menu_main@F3618
    65  001A04  30                 	db	48
    66  001A05  30                 	db	48
    67  001A06  3A                 	db	58
    68  001A07  30                 	db	48
    69  001A08  30                 	db	48
    70                           
    71                           	psect	idataBANK0
    72  00193C                     __pidataBANK0:
    73                           	opt stack 0
    74                           
    75                           ;initializer for _hx
    76  00193C  30                 	db	48
    77  00193D  31                 	db	49
    78  00193E  32                 	db	50
    79  00193F  33                 	db	51
    80  001940  34                 	db	52
    81  001941  35                 	db	53
    82  001942  36                 	db	54
    83  001943  37                 	db	55
    84  001944  38                 	db	56
    85  001945  39                 	db	57
    86  001946  41                 	db	65
    87  001947  42                 	db	66
    88  001948  43                 	db	67
    89  001949  44                 	db	68
    90  00194A  45                 	db	69
    91  00194B  46                 	db	70
    92                           
    93                           ;initializer for _c
    94  00194C  30                 	db	48
    95  00194D  31                 	db	49
    96  00194E  32                 	db	50
    97  00194F  33                 	db	51
    98  001950  34                 	db	52
    99  001951  35                 	db	53
   100  001952  36                 	db	54
   101  001953  37                 	db	55
   102  001954  38                 	db	56
   103  001955  39                 	db	57
   104                           
   105                           ;initializer for main@F3679
   106  001956  30                 	db	48
   107  001957  31                 	db	49
   108  001958  32                 	db	50
   109  001959  33                 	db	51
   110  00195A  34                 	db	52
   111  00195B  35                 	db	53
   112  00195C  36                 	db	54
   113  00195D  37                 	db	55
   114  00195E  38                 	db	56
   115  00195F  39                 	db	57
   116                           
   117                           ;initializer for start_routine@F3721
   118  001960  30                 	db	48
   119  001961  30                 	db	48
   120  001962  30                 	db	48
   121                           
   122                           ;initializer for main@F3695
   123  001963  20                 	db	32
   124                           
   125                           	psect	idataBANK1
   126  001860                     __pidataBANK1:
   127                           	opt stack 0
   128                           
   129                           ;initializer for _i2c_r_reg
   130  001860  30                 	db	48
   131  001861  00                 	db	0
   132  001862  00                 	db	0
   133  001863  00                 	db	0
   134  001864  00                 	db	0
   135  001865  00                 	db	0
   136  001866  00                 	db	0
   137  001867  00                 	db	0
   138  001868  00                 	db	0
   139  001869  00                 	db	0
   140  00186A  00                 	db	0
   141  00186B  00                 	db	0
   142  00186C  00                 	db	0
   143  00186D  00                 	db	0
   144  00186E  00                 	db	0
   145  00186F  00                 	db	0
   146  001870  00                 	db	0
   147  001871  00                 	db	0
   148  001872  00                 	db	0
   149  001873  00                 	db	0
   150  001874  00                 	db	0
   151  001875  00                 	db	0
   152  001876  00                 	db	0
   153  001877  00                 	db	0
   154  001878  00                 	db	0
   155  001879  00                 	db	0
   156  00187A  00                 	db	0
   157  00187B  00                 	db	0
   158  00187C  00                 	db	0
   159  00187D  00                 	db	0
   160  00187E  00                 	db	0
   161  00187F  00                 	db	0
   162                           
   163                           ;initializer for _i2c_w_reg
   164  001880  30                 	db	48
   165  001881  00                 	db	0
   166  001882  00                 	db	0
   167  001883  00                 	db	0
   168  001884  00                 	db	0
   169  001885  00                 	db	0
   170  001886  00                 	db	0
   171  001887  00                 	db	0
   172  001888  00                 	db	0
   173  001889  00                 	db	0
   174  00188A  00                 	db	0
   175  00188B  00                 	db	0
   176  00188C  00                 	db	0
   177  00188D  00                 	db	0
   178  00188E  00                 	db	0
   179  00188F  00                 	db	0
   180  001890  00                 	db	0
   181  001891  00                 	db	0
   182  001892  00                 	db	0
   183  001893  00                 	db	0
   184  001894  00                 	db	0
   185  001895  00                 	db	0
   186  001896  00                 	db	0
   187  001897  00                 	db	0
   188  001898  00                 	db	0
   189  001899  00                 	db	0
   190  00189A  00                 	db	0
   191  00189B  00                 	db	0
   192  00189C  00                 	db	0
   193  00189D  00                 	db	0
   194  00189E  00                 	db	0
   195  00189F  00                 	db	0
   196                           
   197                           	psect	nvBANK0
   198  0000CE                     __pnvBANK0:
   199                           	opt stack 0
   200  0000CE                     _I2C_ADDR:
   201                           	opt stack 0
   202  0000CE                     	ds	1
   203  0000CF                     _Machine_ID:
   204                           	opt stack 0
   205  0000CF                     	ds	1
   206  0000                     _EEADR	set	4009
   207  0000                     _EECON1bits	set	4006
   208  0000                     _EECON2	set	4007
   209  0000                     _EEDATA	set	4008
   210  0000                     _INTCONbits	set	4082
   211  0000                     _LATC	set	3979
   212  0000                     _LATDbits	set	3980
   213  0000                     _OSCCON	set	4051
   214  0000                     _OSCTUNEbits	set	3995
   215  0000                     _PIE1bits	set	3997
   216  0000                     _PIR1bits	set	3998
   217  0000                     _PIR2bits	set	4001
   218  0000                     _PORTB	set	3969
   219  0000                     _PORTBbits	set	3969
   220  0000                     _PORTDbits	set	3971
   221  0000                     _SSPADD	set	4040
   222  0000                     _SSPBUF	set	4041
   223  0000                     _SSPCON1	set	4038
   224  0000                     _SSPCON1bits	set	4038
   225  0000                     _SSPCON2	set	4037
   226  0000                     _SSPSTAT	set	4039
   227  0000                     _SSPSTATbits	set	4039
   228  0000                     _TRISA	set	3986
   229  0000                     _TRISB	set	3987
   230  0000                     _TRISC	set	3988
   231  0000                     _TRISD	set	3989
   232                           
   233                           	psect	mediumconst
   234  007EC0                     __pmediumconst:
   235                           	opt stack 0
   236  007EC0  00                 	db	0
   237  007EC1                     STR_2:
   238  007EC1  20                 	db	32
   239  007EC2  20                 	db	32
   240  007EC3  20                 	db	32
   241  007EC4  20                 	db	32
   242  007EC5  20                 	db	32
   243  007EC6  20                 	db	32
   244  007EC7  20                 	db	32
   245  007EC8  20                 	db	32
   246  007EC9  20                 	db	32
   247  007ECA  20                 	db	32
   248  007ECB  20                 	db	32
   249  007ECC  20                 	db	32
   250  007ECD  20                 	db	32
   251  007ECE  20                 	db	32
   252  007ECF  20                 	db	32
   253  007ED0  20                 	db	32
   254  007ED1  00                 	db	0
   255  007ED2                     STR_4:
   256  007ED2  5B                 	db	91	;'['
   257  007ED3  20                 	db	32
   258  007ED4  5D                 	db	93	;']'
   259  007ED5  20                 	db	32
   260  007ED6  20                 	db	32
   261  007ED7  20                 	db	32
   262  007ED8  20                 	db	32
   263  007ED9  20                 	db	32
   264  007EDA  20                 	db	32
   265  007EDB  20                 	db	32
   266  007EDC  20                 	db	32
   267  007EDD  20                 	db	32
   268  007EDE  20                 	db	32
   269  007EDF  20                 	db	32
   270  007EE0  20                 	db	32
   271  007EE1  20                 	db	32
   272  007EE2  00                 	db	0
   273  007EE3                     STR_14:
   274  007EE3  20                 	db	32
   275  007EE4  20                 	db	32
   276  007EE5  20                 	db	32
   277  007EE6  5B                 	db	91	;'['
   278  007EE7  20                 	db	32
   279  007EE8  41                 	db	65	;'A'
   280  007EE9  64                 	db	100	;'d'
   281  007EEA  69                 	db	105	;'i'
   282  007EEB  74                 	db	116	;'t'
   283  007EEC  75                 	db	117	;'u'
   284  007EED  6D                 	db	109	;'m'
   285  007EEE  20                 	db	32
   286  007EEF  5D                 	db	93	;']'
   287  007EF0  20                 	db	32
   288  007EF1  20                 	db	32
   289  007EF2  20                 	db	32
   290  007EF3  00                 	db	0
   291  007EF4                     STR_10:
   292  007EF4  20                 	db	32
   293  007EF5  20                 	db	32
   294  007EF6  20                 	db	32
   295  007EF7  20                 	db	32
   296  007EF8  5B                 	db	91	;'['
   297  007EF9  20                 	db	32
   298  007EFA  52                 	db	82	;'R'
   299  007EFB  65                 	db	101	;'e'
   300  007EFC  74                 	db	116	;'t'
   301  007EFD  72                 	db	114	;'r'
   302  007EFE  79                 	db	121	;'y'
   303  007EFF  20                 	db	32
   304  007F00  5D                 	db	93	;']'
   305  007F01  20                 	db	32
   306  007F02  20                 	db	32
   307  007F03  20                 	db	32
   308  007F04  00                 	db	0
   309  007F05                     STR_8:
   310  007F05  20                 	db	32
   311  007F06  20                 	db	32
   312  007F07  20                 	db	32
   313  007F08  20                 	db	32
   314  007F09  5B                 	db	91	;'['
   315  007F0A  57                 	db	87	;'W'
   316  007F0B  65                 	db	101	;'e'
   317  007F0C  6C                 	db	108	;'l'
   318  007F0D  63                 	db	99	;'c'
   319  007F0E  6F                 	db	111	;'o'
   320  007F0F  6D                 	db	109	;'m'
   321  007F10  65                 	db	101	;'e'
   322  007F11  5D                 	db	93	;']'
   323  007F12  20                 	db	32
   324  007F13  20                 	db	32
   325  007F14  20                 	db	32
   326  007F15  00                 	db	0
   327  007F16                     STR_27:
   328  007F16  4F                 	db	79	;'O'
   329  007F17  75                 	db	117	;'u'
   330  007F18  74                 	db	116	;'t'
   331  007F19  20                 	db	32
   332  007F1A  6F                 	db	111	;'o'
   333  007F1B  66                 	db	102	;'f'
   334  007F1C  20                 	db	32
   335  007F1D  62                 	db	98	;'b'
   336  007F1E  6F                 	db	111	;'o'
   337  007F1F  75                 	db	117	;'u'
   338  007F20  6E                 	db	110	;'n'
   339  007F21  64                 	db	100	;'d'
   340  007F22  73                 	db	115	;'s'
   341  007F23  21                 	db	33
   342  007F24  20                 	db	32
   343  007F25  20                 	db	32
   344  007F26  00                 	db	0
   345  007F27                     STR_3:
   346  007F27  45                 	db	69	;'E'
   347  007F28  6E                 	db	110	;'n'
   348  007F29  74                 	db	116	;'t'
   349  007F2A  65                 	db	101	;'e'
   350  007F2B  72                 	db	114	;'r'
   351  007F2C  20                 	db	32
   352  007F2D  79                 	db	121	;'y'
   353  007F2E  6F                 	db	111	;'o'
   354  007F2F  75                 	db	117	;'u'
   355  007F30  72                 	db	114	;'r'
   356  007F31  20                 	db	32
   357  007F32  49                 	db	73	;'I'
   358  007F33  44                 	db	68	;'D'
   359  007F34  3A                 	db	58	;':'
   360  007F35  20                 	db	32
   361  007F36  20                 	db	32
   362  007F37  00                 	db	0
   363  007F38                     STR_18:
   364  007F38  20                 	db	32
   365  007F39  20                 	db	32
   366  007F3A  5B                 	db	91	;'['
   367  007F3B  20                 	db	32
   368  007F3C  20                 	db	32
   369  007F3D  41                 	db	65	;'A'
   370  007F3E  64                 	db	100	;'d'
   371  007F3F  69                 	db	105	;'i'
   372  007F40  74                 	db	116	;'t'
   373  007F41  75                 	db	117	;'u'
   374  007F42  6D                 	db	109	;'m'
   375  007F43  20                 	db	32
   376  007F44  20                 	db	32
   377  007F45  5D                 	db	93	;']'
   378  007F46  20                 	db	32
   379  007F47  20                 	db	32
   380  007F48  00                 	db	0
   381  007F49                     STR_20:
   382  007F49  4E                 	db	78	;'N'
   383  007F4A  65                 	db	101	;'e'
   384  007F4B  77                 	db	119	;'w'
   385  007F4C  20                 	db	32
   386  007F4D  4D                 	db	77	;'M'
   387  007F4E  61                 	db	97	;'a'
   388  007F4F  63                 	db	99	;'c'
   389  007F50  68                 	db	104	;'h'
   390  007F51  69                 	db	105	;'i'
   391  007F52  6E                 	db	110	;'n'
   392  007F53  65                 	db	101	;'e'
   393  007F54  20                 	db	32
   394  007F55  49                 	db	73	;'I'
   395  007F56  44                 	db	68	;'D'
   396  007F57  3A                 	db	58	;':'
   397  007F58  20                 	db	32
   398  007F59  00                 	db	0
   399  007F5A                     STR_5:
   400  007F5A  45                 	db	69	;'E'
   401  007F5B  6E                 	db	110	;'n'
   402  007F5C  74                 	db	116	;'t'
   403  007F5D  65                 	db	101	;'e'
   404  007F5E  72                 	db	114	;'r'
   405  007F5F  20                 	db	32
   406  007F60  79                 	db	121	;'y'
   407  007F61  6F                 	db	111	;'o'
   408  007F62  75                 	db	117	;'u'
   409  007F63  72                 	db	114	;'r'
   410  007F64  20                 	db	32
   411  007F65  50                 	db	80	;'P'
   412  007F66  49                 	db	73	;'I'
   413  007F67  4E                 	db	78	;'N'
   414  007F68  3A                 	db	58	;':'
   415  007F69  20                 	db	32
   416  007F6A  00                 	db	0
   417  007F6B                     STR_26:
   418  007F6B  4D                 	db	77	;'M'
   419  007F6C  61                 	db	97	;'a'
   420  007F6D  79                 	db	121	;'y'
   421  007F6E  20                 	db	32
   422  007F6F  6E                 	db	110	;'n'
   423  007F70  6F                 	db	111	;'o'
   424  007F71  74                 	db	116	;'t'
   425  007F72  20                 	db	32
   426  007F73  62                 	db	98	;'b'
   427  007F74  65                 	db	101	;'e'
   428  007F75  20                 	db	32
   429  007F76  7A                 	db	122	;'z'
   430  007F77  65                 	db	101	;'e'
   431  007F78  72                 	db	114	;'r'
   432  007F79  6F                 	db	111	;'o'
   433  007F7A  21                 	db	33
   434  007F7B  00                 	db	0
   435  007F7C                     STR_19:
   436  007F7C  4C                 	db	76	;'L'
   437  007F7D  6F                 	db	111	;'o'
   438  007F7E  61                 	db	97	;'a'
   439  007F7F  64                 	db	100	;'d'
   440  007F80  20                 	db	32
   441  007F81  49                 	db	73	;'I'
   442  007F82  32                 	db	50	;'2'
   443  007F83  43                 	db	67	;'C'
   444  007F84  20                 	db	32
   445  007F85  73                 	db	115	;'s'
   446  007F86  65                 	db	101	;'e'
   447  007F87  74                 	db	116	;'t'
   448  007F88  75                 	db	117	;'u'
   449  007F89  70                 	db	112	;'p'
   450  007F8A  2E                 	db	46
   451  007F8B  2E                 	db	46
   452  007F8C  00                 	db	0
   453  007F8D                     STR_25:
   454  007F8D  49                 	db	73	;'I'
   455  007F8E  32                 	db	50	;'2'
   456  007F8F  43                 	db	67	;'C'
   457  007F90  5F                 	db	95	;'_'
   458  007F91  41                 	db	65	;'A'
   459  007F92  44                 	db	68	;'D'
   460  007F93  44                 	db	68	;'D'
   461  007F94  52                 	db	82	;'R'
   462  007F95  3E                 	db	62	;'>'
   463  007F96  3E                 	db	62	;'>'
   464  007F97  45                 	db	69	;'E'
   465  007F98  45                 	db	69	;'E'
   466  007F99  50                 	db	80	;'P'
   467  007F9A  52                 	db	82	;'R'
   468  007F9B  4F                 	db	79	;'O'
   469  007F9C  4D                 	db	77	;'M'
   470  007F9D  00                 	db	0
   471  007F9E                     STR_11:
   472  007F9E  5B                 	db	91	;'['
   473  007F9F  20                 	db	32
   474  007FA0  53                 	db	83	;'S'
   475  007FA1  79                 	db	121	;'y'
   476  007FA2  73                 	db	115	;'s'
   477  007FA3  74                 	db	116	;'t'
   478  007FA4  65                 	db	101	;'e'
   479  007FA5  6D                 	db	109	;'m'
   480  007FA6  20                 	db	32
   481  007FA7  45                 	db	69	;'E'
   482  007FA8  72                 	db	114	;'r'
   483  007FA9  72                 	db	114	;'r'
   484  007FAA  6F                 	db	111	;'o'
   485  007FAB  72                 	db	114	;'r'
   486  007FAC  20                 	db	32
   487  007FAD  5D                 	db	93	;']'
   488  007FAE  00                 	db	0
   489  007FAF                     STR_21:
   490  007FAF  20                 	db	32
   491  007FB0  20                 	db	32
   492  007FB1  20                 	db	32
   493  007FB2  20                 	db	32
   494  007FB3  20                 	db	32
   495  007FB4  20                 	db	32
   496  007FB5  20                 	db	32
   497  007FB6  5B                 	db	91	;'['
   498  007FB7  30                 	db	48	;'0'
   499  007FB8  30                 	db	48	;'0'
   500  007FB9  31                 	db	49	;'1'
   501  007FBA  2D                 	db	45
   502  007FBB  31                 	db	49	;'1'
   503  007FBC  30                 	db	48	;'0'
   504  007FBD  30                 	db	48	;'0'
   505  007FBE  5D                 	db	93	;']'
   506  007FBF  00                 	db	0
   507  007FC0                     STR_9:
   508  007FC0  5B                 	db	91	;'['
   509  007FC1  41                 	db	65	;'A'
   510  007FC2  63                 	db	99	;'c'
   511  007FC3  63                 	db	99	;'c'
   512  007FC4  65                 	db	101	;'e'
   513  007FC5  73                 	db	115	;'s'
   514  007FC6  73                 	db	115	;'s'
   515  007FC7  20                 	db	32
   516  007FC8  20                 	db	32
   517  007FC9  44                 	db	68	;'D'
   518  007FCA  65                 	db	101	;'e'
   519  007FCB  6E                 	db	110	;'n'
   520  007FCC  69                 	db	105	;'i'
   521  007FCD  65                 	db	101	;'e'
   522  007FCE  64                 	db	100	;'d'
   523  007FCF  5D                 	db	93	;']'
   524  007FD0  00                 	db	0
   525  007FD1                     STR_7:
   526  007FD1  5B                 	db	91	;'['
   527  007FD2  41                 	db	65	;'A'
   528  007FD3  63                 	db	99	;'c'
   529  007FD4  63                 	db	99	;'c'
   530  007FD5  65                 	db	101	;'e'
   531  007FD6  73                 	db	115	;'s'
   532  007FD7  73                 	db	115	;'s'
   533  007FD8  20                 	db	32
   534  007FD9  47                 	db	71	;'G'
   535  007FDA  72                 	db	114	;'r'
   536  007FDB  61                 	db	97	;'a'
   537  007FDC  6E                 	db	110	;'n'
   538  007FDD  74                 	db	116	;'t'
   539  007FDE  65                 	db	101	;'e'
   540  007FDF  64                 	db	100	;'d'
   541  007FE0  5D                 	db	93	;']'
   542  007FE1  00                 	db	0
   543  007FE2                     STR_17:
   544  007FE2  44                 	db	68	;'D'
   545  007FE3  65                 	db	101	;'e'
   546  007FE4  76                 	db	118	;'v'
   547  007FE5  69                 	db	105	;'i'
   548  007FE6  63                 	db	99	;'c'
   549  007FE7  65                 	db	101	;'e'
   550  007FE8  20                 	db	32
   551  007FE9  49                 	db	73	;'I'
   552  007FEA  44                 	db	68	;'D'
   553  007FEB  20                 	db	32
   554  007FEC  00                 	db	0
   555  007FED                     STR_16:
   556  007FED  31                 	db	49	;'1'
   557  007FEE  2E                 	db	46
   558  007FEF  30                 	db	48	;'0'
   559  007FF0  2E                 	db	46
   560  007FF1  30                 	db	48	;'0'
   561  007FF2  00                 	db	0
   562  007FF3                     STR_15:
   563  007FF3  52                 	db	82	;'R'
   564  007FF4  65                 	db	101	;'e'
   565  007FF5  76                 	db	118	;'v'
   566  007FF6  20                 	db	32
   567  007FF7  00                 	db	0
   568  007FF8                     STR_23:
   569  007FF8  5B                 	db	91	;'['
   570  007FF9  4F                 	db	79	;'O'
   571  007FFA  4B                 	db	75	;'K'
   572  007FFB  5D                 	db	93	;']'
   573  007FFC  00                 	db	0
   574  007FFD                     STR_24:
   575  007FFD  78                 	db	120	;'x'
   576  007FFE  00                 	db	0
   577  0000                     
   578                           ; #config settings
   579  007FFF  00                 	db	0	; dummy byte at the end
   580  0000                     
   581                           	psect	cinit
   582  001604                     __pcinit:
   583                           	opt stack 0
   584  001604                     start_initialization:
   585                           	opt stack 0
   586  001604                     __initialization:
   587                           	opt stack 0
   588                           
   589                           ; Clear objects allocated to BANK0 (20 bytes)
   590  001604  EE00  F0BA         	lfsr	0,__pbssBANK0
   591  001608  0E14               	movlw	20
   592  00160A                     clear_0:
   593  00160A  6AEE               	clrf	postinc0,c
   594  00160C  06E8               	decf	wreg,f,c
   595  00160E  E1FD               	bnz	clear_0
   596                           
   597                           ; Clear objects allocated to COMRAM (2 bytes)
   598  001610  6A47               	clrf	(__pbssCOMRAM+1)& (0+255),c
   599  001612  6A46               	clrf	__pbssCOMRAM& (0+255),c
   600                           
   601                           ; Initialize objects allocated to BANK1 (64 bytes)
   602                           ; load TBLPTR registers with __pidataBANK1
   603  001614  0E60               	movlw	low __pidataBANK1
   604  001616  6EF6               	movwf	tblptrl,c
   605  001618  0E18               	movlw	high __pidataBANK1
   606  00161A  6EF7               	movwf	tblptrh,c
   607  00161C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   608  00161E  6EF8               	movwf	tblptru,c
   609  001620  EE01  F000         	lfsr	0,__pdataBANK1
   610  001624  EE10 F040          	lfsr	1,64
   611  001628                     copy_data0:
   612  001628  0009               	tblrd		*+
   613  00162A  CFF5 FFEE          	movff	tablat,postinc0
   614  00162E  50E5               	movf	postdec1,w,c
   615  001630  50E1               	movf	fsr1l,w,c
   616  001632  E1FA               	bnz	copy_data0
   617                           
   618                           ; Initialize objects allocated to BANK0 (40 bytes)
   619                           ; load TBLPTR registers with __pidataBANK0
   620  001634  0E3C               	movlw	low __pidataBANK0
   621  001636  6EF6               	movwf	tblptrl,c
   622  001638  0E19               	movlw	high __pidataBANK0
   623  00163A  6EF7               	movwf	tblptrh,c
   624  00163C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   625  00163E  6EF8               	movwf	tblptru,c
   626  001640  EE00  F092         	lfsr	0,__pdataBANK0
   627  001644  EE10 F028          	lfsr	1,40
   628  001648                     copy_data1:
   629  001648  0009               	tblrd		*+
   630  00164A  CFF5 FFEE          	movff	tablat,postinc0
   631  00164E  50E5               	movf	postdec1,w,c
   632  001650  50E1               	movf	fsr1l,w,c
   633  001652  E1FA               	bnz	copy_data1
   634                           
   635                           ; Initialize objects allocated to COMRAM (15 bytes)
   636                           ; load TBLPTR registers with __pidataCOMRAM
   637  001654  0EFA               	movlw	low __pidataCOMRAM
   638  001656  6EF6               	movwf	tblptrl,c
   639  001658  0E19               	movlw	high __pidataCOMRAM
   640  00165A  6EF7               	movwf	tblptrh,c
   641  00165C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   642  00165E  6EF8               	movwf	tblptru,c
   643  001660  EE00  F037         	lfsr	0,__pdataCOMRAM
   644  001664  EE10 F00F          	lfsr	1,15
   645  001668                     copy_data2:
   646  001668  0009               	tblrd		*+
   647  00166A  CFF5 FFEE          	movff	tablat,postinc0
   648  00166E  50E5               	movf	postdec1,w,c
   649  001670  50E1               	movf	fsr1l,w,c
   650  001672  E1FA               	bnz	copy_data2
   651  001674                     end_of_initialization:
   652                           	opt stack 0
   653  001674                     __end_of__initialization:
   654                           	opt stack 0
   655  001674  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   656  001676  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   657  001678  0E00               	movlw	low (__Lmediumconst shr (0+16))
   658  00167A  6EF8               	movwf	tblptru,c
   659  00167C  0100               	movlb	0
   660  00167E  EF83  F000         	goto	_main	;jump to C main() function
   661                           tblptru	equ	0xFF8
   662                           tblptrh	equ	0xFF7
   663                           tblptrl	equ	0xFF6
   664                           tablat	equ	0xFF5
   665                           postinc0	equ	0xFEE
   666                           wreg	equ	0xFE8
   667                           postdec1	equ	0xFE5
   668                           fsr1l	equ	0xFE1
   669                           
   670                           	psect	bssCOMRAM
   671  000046                     __pbssCOMRAM:
   672                           	opt stack 0
   673  000046                     _i2c_byte_count:
   674                           	opt stack 0
   675  000046                     	ds	1
   676  000047                     _i2c_reg_addr:
   677                           	opt stack 0
   678  000047                     	ds	1
   679                           tblptru	equ	0xFF8
   680                           tblptrh	equ	0xFF7
   681                           tblptrl	equ	0xFF6
   682                           tablat	equ	0xFF5
   683                           postinc0	equ	0xFEE
   684                           wreg	equ	0xFE8
   685                           postdec1	equ	0xFE5
   686                           fsr1l	equ	0xFE1
   687                           
   688                           	psect	dataCOMRAM
   689  000037                     __pdataCOMRAM:
   690                           	opt stack 0
   691  000037                     menu_seconds_to_mmss@F3627:
   692                           	opt stack 0
   693  000037                     	ds	10
   694  000041                     menu_main@F3618:
   695                           	opt stack 0
   696  000041                     	ds	5
   697                           tblptru	equ	0xFF8
   698                           tblptrh	equ	0xFF7
   699                           tblptrl	equ	0xFF6
   700                           tablat	equ	0xFF5
   701                           postinc0	equ	0xFEE
   702                           wreg	equ	0xFE8
   703                           postdec1	equ	0xFE5
   704                           fsr1l	equ	0xFE1
   705                           
   706                           	psect	bssBANK0
   707  0000BA                     __pbssBANK0:
   708                           	opt stack 0
   709  0000BA                     _current_pin:
   710                           	opt stack 0
   711  0000BA                     	ds	9
   712  0000C3                     _current_user:
   713                           	opt stack 0
   714  0000C3                     	ds	9
   715  0000CC                     _EEP_I2C_ADDR:
   716                           	opt stack 0
   717  0000CC                     	ds	1
   718  0000CD                     _credentials_accepted:
   719                           	opt stack 0
   720  0000CD                     	ds	1
   721                           tblptru	equ	0xFF8
   722                           tblptrh	equ	0xFF7
   723                           tblptrl	equ	0xFF6
   724                           tablat	equ	0xFF5
   725                           postinc0	equ	0xFEE
   726                           wreg	equ	0xFE8
   727                           postdec1	equ	0xFE5
   728                           fsr1l	equ	0xFE1
   729                           
   730                           	psect	dataBANK0
   731  000092                     __pdataBANK0:
   732                           	opt stack 0
   733  000092                     _hx:
   734                           	opt stack 0
   735  000092                     	ds	16
   736  0000A2                     _c:
   737                           	opt stack 0
   738  0000A2                     	ds	10
   739  0000AC                     main@F3679:
   740                           	opt stack 0
   741  0000AC                     	ds	10
   742  0000B6                     start_routine@F3721:
   743                           	opt stack 0
   744  0000B6                     	ds	3
   745  0000B9                     main@F3695:
   746                           	opt stack 0
   747  0000B9                     	ds	1
   748                           tblptru	equ	0xFF8
   749                           tblptrh	equ	0xFF7
   750                           tblptrl	equ	0xFF6
   751                           tablat	equ	0xFF5
   752                           postinc0	equ	0xFEE
   753                           wreg	equ	0xFE8
   754                           postdec1	equ	0xFE5
   755                           fsr1l	equ	0xFE1
   756                           
   757                           	psect	dataBANK1
   758  000100                     __pdataBANK1:
   759                           	opt stack 0
   760  000100                     _i2c_r_reg:
   761                           	opt stack 0
   762  000100                     	ds	32
   763  000120                     _i2c_w_reg:
   764                           	opt stack 0
   765  000120                     	ds	32
   766                           tblptru	equ	0xFF8
   767                           tblptrh	equ	0xFF7
   768                           tblptrl	equ	0xFF6
   769                           tablat	equ	0xFF5
   770                           postinc0	equ	0xFEE
   771                           wreg	equ	0xFE8
   772                           postdec1	equ	0xFE5
   773                           fsr1l	equ	0xFE1
   774                           
   775                           	psect	cstackBANK1
   776  000140                     __pcstackBANK1:
   777                           	opt stack 0
   778  000140                     main@c:
   779                           	opt stack 0
   780                           
   781                           ; 10 bytes @ 0x0
   782  000140                     	ds	10
   783  00014A                     main@buffer:
   784                           	opt stack 0
   785                           
   786                           ; 9 bytes @ 0xA
   787  00014A                     	ds	9
   788  000153                     main@i_799:
   789                           	opt stack 0
   790                           
   791                           ; 2 bytes @ 0x13
   792  000153                     	ds	2
   793  000155                     main@n_c:
   794                           	opt stack 0
   795                           
   796                           ; 1 bytes @ 0x15
   797  000155                     	ds	1
   798  000156                     main@credential_state:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x16
   802  000156                     	ds	1
   803  000157                     main@i_769:
   804                           	opt stack 0
   805                           
   806                           ; 2 bytes @ 0x17
   807  000157                     	ds	2
   808  000159                     main@i_789:
   809                           	opt stack 0
   810                           
   811                           ; 2 bytes @ 0x19
   812  000159                     	ds	2
   813  00015B                     main@i_792:
   814                           	opt stack 0
   815                           
   816                           ; 2 bytes @ 0x1B
   817  00015B                     	ds	2
   818  00015D                     main@i_795:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0x1D
   822  00015D                     	ds	2
   823  00015F                     main@is_leading_zero:
   824                           	opt stack 0
   825                           
   826                           ; 1 bytes @ 0x1F
   827  00015F                     	ds	1
   828  000160                     main@a:
   829                           	opt stack 0
   830                           
   831                           ; 1 bytes @ 0x20
   832  000160                     	ds	1
   833  000161                     main@i:
   834                           	opt stack 0
   835                           
   836                           ; 2 bytes @ 0x21
   837  000161                     	ds	2
   838  000163                     main@i_776:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0x23
   842  000163                     	ds	2
   843  000165                     main@i_785:
   844                           	opt stack 0
   845                           
   846                           ; 2 bytes @ 0x25
   847  000165                     	ds	2
   848  000167                     main@i_770:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0x27
   852  000167                     	ds	2
   853  000169                     main@i_798:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x29
   857  000169                     	ds	2
   858  00016B                     main@i_766:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x2B
   862  00016B                     	ds	2
   863  00016D                     main@i_803:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x2D
   867  00016D                     	ds	2
   868  00016F                     main@digits:
   869                           	opt stack 0
   870                           
   871                           ; 1 bytes @ 0x2F
   872  00016F                     	ds	1
   873  000170                     main@p:
   874                           	opt stack 0
   875                           
   876                           ; 1 bytes @ 0x30
   877  000170                     	ds	1
   878  000171                     main@n:
   879                           	opt stack 0
   880                           
   881                           ; 1 bytes @ 0x31
   882  000171                     	ds	1
   883  000172                     main@x:
   884                           	opt stack 0
   885                           
   886                           ; 1 bytes @ 0x32
   887  000172                     	ds	1
   888                           tblptru	equ	0xFF8
   889                           tblptrh	equ	0xFF7
   890                           tblptrl	equ	0xFF6
   891                           tablat	equ	0xFF5
   892                           postinc0	equ	0xFEE
   893                           wreg	equ	0xFE8
   894                           postdec1	equ	0xFE5
   895                           fsr1l	equ	0xFE1
   896                           
   897                           	psect	cstackBANK0
   898  000060                     __pcstackBANK0:
   899                           	opt stack 0
   900  000060                     menu_progress_bar@d:
   901                           	opt stack 0
   902                           
   903                           ; 4 bytes @ 0x0
   904  000060                     	ds	4
   905  000064                     menu_progress_bar@ii:
   906                           	opt stack 0
   907                           
   908                           ; 2 bytes @ 0x4
   909  000064                     	ds	2
   910  000066                     menu_progress_bar@i:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x6
   914  000066                     	ds	2
   915  000068                     menu_progress_bar@i_722:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x8
   919  000068                     	ds	2
   920  00006A                     menu_progress_bar@i_723:
   921                           	opt stack 0
   922                           
   923                           ; 2 bytes @ 0xA
   924  00006A                     	ds	2
   925  00006C                     menu_progress_bar@i_724:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0xC
   929  00006C                     	ds	2
   930  00006E                     start_routine@h:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0xE
   934  00006E                     	ds	1
   935  00006F                     start_routine@l:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0xF
   939  00006F                     	ds	1
   940  000070                     start_routine@error_msg:
   941                           	opt stack 0
   942                           
   943                           ; 2 bytes @ 0x10
   944  000070                     	ds	2
   945  000072                     start_routine@d1:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x12
   949  000072                     	ds	1
   950  000073                     start_routine@v:
   951                           	opt stack 0
   952                           
   953                           ; 1 bytes @ 0x13
   954  000073                     	ds	1
   955  000074                     start_routine@i:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x14
   959  000074                     	ds	2
   960  000076                     start_routine@i_873:
   961                           	opt stack 0
   962                           
   963                           ; 2 bytes @ 0x16
   964  000076                     	ds	2
   965  000078                     start_routine@i_881:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x18
   969  000078                     	ds	2
   970  00007A                     start_routine@i_899:
   971                           	opt stack 0
   972                           
   973                           ; 2 bytes @ 0x1A
   974  00007A                     	ds	2
   975  00007C                     start_routine@i_902:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x1C
   979  00007C                     	ds	2
   980  00007E                     start_routine@i_905:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x1E
   984  00007E                     	ds	2
   985  000080                     start_routine@b:
   986                           	opt stack 0
   987                           
   988                           ; 3 bytes @ 0x20
   989  000080                     	ds	3
   990  000083                     start_routine@i_896:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0x23
   994  000083                     	ds	2
   995  000085                     start_routine@i_906:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x25
   999  000085                     	ds	2
  1000  000087                     start_routine@I2C_new_ADDR:
  1001                           	opt stack 0
  1002                           
  1003                           ; 3 bytes @ 0x27
  1004  000087                     	ds	3
  1005  00008A                     start_routine@a:
  1006                           	opt stack 0
  1007                           
  1008                           ; 1 bytes @ 0x2A
  1009  00008A                     	ds	1
  1010  00008B                     start_routine@dt:
  1011                           	opt stack 0
  1012                           
  1013                           ; 1 bytes @ 0x2B
  1014  00008B                     	ds	1
  1015  00008C                     start_routine@i_893:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0x2C
  1019  00008C                     	ds	2
  1020  00008E                     start_routine@dh:
  1021                           	opt stack 0
  1022                           
  1023                           ; 1 bytes @ 0x2E
  1024  00008E                     	ds	1
  1025  00008F                     start_routine@x:
  1026                           	opt stack 0
  1027                           
  1028                           ; 1 bytes @ 0x2F
  1029  00008F                     	ds	1
  1030  000090                     start_routine@n:
  1031                           	opt stack 0
  1032                           
  1033                           ; 1 bytes @ 0x30
  1034  000090                     	ds	1
  1035  000091                     start_routine@new_I2C_address:
  1036                           	opt stack 0
  1037                           
  1038                           ; 1 bytes @ 0x31
  1039  000091                     	ds	1
  1040                           tblptru	equ	0xFF8
  1041                           tblptrh	equ	0xFF7
  1042                           tblptrl	equ	0xFF6
  1043                           tablat	equ	0xFF5
  1044                           postinc0	equ	0xFEE
  1045                           wreg	equ	0xFE8
  1046                           postdec1	equ	0xFE5
  1047                           fsr1l	equ	0xFE1
  1048                           
  1049                           	psect	cstackCOMRAM
  1050  000001                     __pcstackCOMRAM:
  1051                           	opt stack 0
  1052  000001                     ??i2_load_reg_map:
  1053                           
  1054                           ; 1 bytes @ 0x0
  1055  000001                     	ds	4
  1056  000005                     i2load_reg_map@i:
  1057                           	opt stack 0
  1058                           
  1059                           ; 2 bytes @ 0x4
  1060  000005                     	ds	2
  1061  000007                     i2load_reg_map@i_839:
  1062                           	opt stack 0
  1063                           
  1064                           ; 2 bytes @ 0x6
  1065  000007                     	ds	2
  1066  000009                     ??_ISR:
  1067                           
  1068                           ; 1 bytes @ 0x8
  1069  000009                     	ds	14
  1070  000017                     ISR@sspBuf:
  1071                           	opt stack 0
  1072                           
  1073                           ; 1 bytes @ 0x16
  1074  000017                     	ds	1
  1075  000018                     ??_load_reg_map:
  1076  000018                     ?___awdiv:
  1077                           	opt stack 0
  1078  000018                     ?___lwdiv:
  1079                           	opt stack 0
  1080  000018                     Lcd_Port@a:
  1081                           	opt stack 0
  1082  000018                     Eeprom_Read_Byte@address:
  1083                           	opt stack 0
  1084  000018                     Eeprom_Write_Byte@data:
  1085                           	opt stack 0
  1086  000018                     latch_keypad@x:
  1087                           	opt stack 0
  1088  000018                     ___awdiv@dividend:
  1089                           	opt stack 0
  1090  000018                     ___lwdiv@dividend:
  1091                           	opt stack 0
  1092                           
  1093                           ; 2 bytes @ 0x17
  1094  000018                     	ds	1
  1095  000019                     Lcd_Cmd@a:
  1096                           	opt stack 0
  1097  000019                     Lcd_Write_Char@temp:
  1098                           	opt stack 0
  1099  000019                     Eeprom_Write_Byte@address:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x18
  1103  000019                     	ds	1
  1104  00001A                     ??_latch_keypad:
  1105  00001A                     ??_Lcd_Clear:
  1106  00001A                     ??_Lcd_Init:
  1107  00001A                     Lcd_Set_Cursor@b:
  1108                           	opt stack 0
  1109  00001A                     Lcd_Write_Char@y:
  1110                           	opt stack 0
  1111  00001A                     ___awdiv@divisor:
  1112                           	opt stack 0
  1113  00001A                     ___lwdiv@divisor:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x19
  1117  00001A                     	ds	1
  1118  00001B                     Lcd_Set_Cursor@a:
  1119                           	opt stack 0
  1120  00001B                     Lcd_Write_Char@a:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0x1A
  1124  00001B                     	ds	1
  1125  00001C                     Lcd_Set_Cursor@z:
  1126                           	opt stack 0
  1127  00001C                     ___awdiv@counter:
  1128                           	opt stack 0
  1129  00001C                     ___lwdiv@counter:
  1130                           	opt stack 0
  1131  00001C                     Lcd_Write_String@a:
  1132                           	opt stack 0
  1133  00001C                     load_reg_map@i:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0x1B
  1137  00001C                     	ds	1
  1138  00001D                     Lcd_Set_Cursor@y:
  1139                           	opt stack 0
  1140  00001D                     ___awdiv@sign:
  1141                           	opt stack 0
  1142  00001D                     ___lwdiv@quotient:
  1143                           	opt stack 0
  1144                           
  1145                           ; 2 bytes @ 0x1C
  1146  00001D                     	ds	1
  1147  00001E                     ??_Lcd_Write_String:
  1148  00001E                     Lcd_Set_Cursor@temp:
  1149                           	opt stack 0
  1150  00001E                     load_reg_map@i_839:
  1151                           	opt stack 0
  1152  00001E                     ___awdiv@quotient:
  1153                           	opt stack 0
  1154                           
  1155                           ; 2 bytes @ 0x1D
  1156  00001E                     	ds	1
  1157  00001F                     ?___wmul:
  1158                           	opt stack 0
  1159  00001F                     ___wmul@multiplier:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x1E
  1163  00001F                     	ds	1
  1164  000020                     Lcd_Write_String@i:
  1165                           	opt stack 0
  1166                           
  1167                           ; 2 bytes @ 0x1F
  1168  000020                     	ds	1
  1169  000021                     ___wmul@multiplicand:
  1170                           	opt stack 0
  1171                           
  1172                           ; 2 bytes @ 0x20
  1173  000021                     	ds	2
  1174  000023                     ___wmul@product:
  1175                           	opt stack 0
  1176                           
  1177                           ; 2 bytes @ 0x22
  1178  000023                     	ds	2
  1179  000025                     menu_progress_bar@load_time_ms:
  1180                           	opt stack 0
  1181                           
  1182                           ; 2 bytes @ 0x24
  1183  000025                     	ds	2
  1184  000027                     ??_menu_progress_bar:
  1185                           
  1186                           ; 1 bytes @ 0x26
  1187  000027                     	ds	4
  1188  00002B                     ??_start_routine:
  1189                           
  1190                           ; 1 bytes @ 0x2A
  1191  00002B                     	ds	4
  1192  00002F                     ??_main:
  1193                           
  1194                           ; 1 bytes @ 0x2E
  1195  00002F                     	ds	8
  1196                           tblptru	equ	0xFF8
  1197                           tblptrh	equ	0xFF7
  1198                           tblptrl	equ	0xFF6
  1199                           tablat	equ	0xFF5
  1200                           postinc0	equ	0xFEE
  1201                           wreg	equ	0xFE8
  1202                           postdec1	equ	0xFE5
  1203                           fsr1l	equ	0xFE1
  1204                           
  1205 ;;
  1206 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  1207 ;;
  1208 ;; *************** function _main *****************
  1209 ;; Defined at:
  1210 ;;		line 45 in file "main.c"
  1211 ;; Parameters:    Size  Location     Type
  1212 ;;		None
  1213 ;; Auto vars:     Size  Location     Type
  1214 ;;  i               2   29[BANK1 ] int 
  1215 ;;  i               2   27[BANK1 ] int 
  1216 ;;  i               2   25[BANK1 ] int 
  1217 ;;  i               2   37[BANK1 ] int 
  1218 ;;  i               2   35[BANK1 ] int 
  1219 ;;  c              10    0[BANK1 ] unsigned char [10]
  1220 ;;  i               2   39[BANK1 ] int 
  1221 ;;  i               2   23[BANK1 ] int 
  1222 ;;  i               2   43[BANK1 ] int 
  1223 ;;  i               2   45[BANK1 ] int 
  1224 ;;  i               2   19[BANK1 ] int 
  1225 ;;  i               2   41[BANK1 ] int 
  1226 ;;  buffer          9   10[BANK1 ] unsigned char [9]
  1227 ;;  credential_s    1   22[BANK1 ] unsigned char 
  1228 ;;  i               2   33[BANK1 ] int 
  1229 ;;  digits          1   47[BANK1 ] unsigned char 
  1230 ;;  a               1   32[BANK1 ] unsigned char 
  1231 ;;  is_leading_z    1   31[BANK1 ] unsigned char 
  1232 ;;  n_c             1   21[BANK1 ] unsigned char 
  1233 ;;  x               1   50[BANK1 ] unsigned char 
  1234 ;;  n               1   49[BANK1 ] unsigned char 
  1235 ;;  p               1   48[BANK1 ] unsigned char 
  1236 ;; Return value:  Size  Location     Type
  1237 ;;                  1    wreg      void 
  1238 ;; Registers used:
  1239 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1240 ;; Tracked objects:
  1241 ;;		On entry : 0/0
  1242 ;;		On exit  : 0/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1245 ;;      Params:         0       0       0       0       0       0       0
  1246 ;;      Locals:         0       0      51       0       0       0       0
  1247 ;;      Temps:          8       0       0       0       0       0       0
  1248 ;;      Totals:         8       0      51       0       0       0       0
  1249 ;;Total ram usage:       59 bytes
  1250 ;; Hardware stack levels required when called:    7
  1251 ;; This function calls:
  1252 ;;		_Lcd_Clear
  1253 ;;		_Lcd_Init
  1254 ;;		_Lcd_Set_Cursor
  1255 ;;		_Lcd_Write_Char
  1256 ;;		_Lcd_Write_String
  1257 ;;		___awdiv
  1258 ;;		_latch_keypad
  1259 ;;		_load_reg_map
  1260 ;;		_mcu_initialise
  1261 ;;		_menu_progress_bar
  1262 ;;		_read_keypad
  1263 ;;		_start_routine
  1264 ;; This function is called by:
  1265 ;;		Startup code after reset
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269                           	psect	text0
  1270  000106                     __ptext0:
  1271                           	opt stack 0
  1272  000106                     _main:
  1273                           	opt stack 24
  1274                           
  1275                           ;main.c: 49: unsigned char n = 0, p = 0;
  1276                           
  1277                           ;incstack = 0
  1278  000106  0E00               	movlw	0
  1279  000108  0101               	movlb	1	; () banked
  1280  00010A  6F71               	movwf	main@n& (0+255),b
  1281  00010C  0E00               	movlw	0
  1282  00010E  0101               	movlb	1	; () banked
  1283  000110  6F70               	movwf	main@p& (0+255),b
  1284                           
  1285                           ;main.c: 50: unsigned char x = '_';
  1286  000112  0E5F               	movlw	95
  1287  000114  0101               	movlb	1	; () banked
  1288  000116  6F72               	movwf	main@x& (0+255),b
  1289                           
  1290                           ; BSR set to: 1
  1291                           ;main.c: 53: mcu_initialise();
  1292  000118  ECDF  F00B         	call	_mcu_initialise	;wreg free
  1293                           
  1294                           ;main.c: 54: Lcd_Init();
  1295  00011C  EC41  F00B         	call	_Lcd_Init	;wreg free
  1296                           
  1297                           ;main.c: 58: start_routine();
  1298  000120  EC4F  F005         	call	_start_routine	;wreg free
  1299  000124                     l4145:
  1300                           
  1301                           ;main.c: 62: {
  1302                           ;main.c: 63: for (int i = 0; i < 32; i++)
  1303  000124  0E00               	movlw	0
  1304  000126  0101               	movlb	1	; () banked
  1305  000128  6F62               	movwf	(main@i+1)& (0+255),b
  1306  00012A  0E00               	movlw	0
  1307  00012C  6F61               	movwf	main@i& (0+255),b
  1308                           
  1309                           ; BSR set to: 1
  1310  00012E  0101               	movlb	1	; () banked
  1311  000130  BF62               	btfsc	(main@i+1)& (0+255),7,b
  1312  000132  D00A               	goto	l4151
  1313  000134  0101               	movlb	1	; () banked
  1314  000136  5162               	movf	(main@i+1)& (0+255),w,b
  1315  000138  E106               	bnz	u3910
  1316  00013A  0E20               	movlw	32
  1317  00013C  0101               	movlb	1	; () banked
  1318  00013E  5D61               	subwf	main@i& (0+255),w,b
  1319  000140  B0D8               	btfsc	status,0,c
  1320  000142  D3A4               	goto	l4403
  1321  000144  D001               	goto	l4151
  1322  000146                     u3910:
  1323                           
  1324                           ; BSR set to: 1
  1325  000146  D3A2               	goto	l4403
  1326  000148                     l4151:
  1327                           
  1328                           ; BSR set to: 1
  1329                           ;main.c: 64: i2c_w_reg[i] = '0';
  1330  000148  0E20               	movlw	low _i2c_w_reg
  1331  00014A  0101               	movlb	1	; () banked
  1332  00014C  2561               	addwf	main@i& (0+255),w,b
  1333  00014E  6ED9               	movwf	fsr2l,c
  1334  000150  0E01               	movlw	high _i2c_w_reg
  1335  000152  0101               	movlb	1	; () banked
  1336  000154  2162               	addwfc	(main@i+1)& (0+255),w,b
  1337  000156  6EDA               	movwf	fsr2h,c
  1338  000158  0E30               	movlw	48
  1339  00015A  6EDF               	movwf	indf2,c
  1340                           
  1341                           ; BSR set to: 1
  1342  00015C  0101               	movlb	1	; () banked
  1343  00015E  4B61               	infsnz	main@i& (0+255),f,b
  1344  000160  2B62               	incf	(main@i+1)& (0+255),f,b
  1345                           
  1346                           ; BSR set to: 1
  1347  000162  0101               	movlb	1	; () banked
  1348  000164  BF62               	btfsc	(main@i+1)& (0+255),7,b
  1349  000166  D7F0               	goto	l4151
  1350  000168  0101               	movlb	1	; () banked
  1351  00016A  5162               	movf	(main@i+1)& (0+255),w,b
  1352  00016C  E101               	bnz	u3920
  1353  00016E  D7E5               	goto	L1
  1354  000170                     u3920:
  1355                           
  1356                           ; BSR set to: 1
  1357                           ;main.c: 65: while (credentials_accepted == 0 )
  1358  000170  D38D               	goto	l4403
  1359  000172                     l4157:
  1360                           
  1361                           ;main.c: 66: {
  1362                           ;main.c: 67: unsigned char buffer[9];
  1363                           ;main.c: 68: for (int i = 0; i < 9; i++)
  1364  000172  0E00               	movlw	0
  1365  000174  0101               	movlb	1	; () banked
  1366  000176  6F6C               	movwf	(main@i_766+1)& (0+255),b
  1367  000178  0E00               	movlw	0
  1368  00017A  6F6B               	movwf	main@i_766& (0+255),b
  1369  00017C                     l4159:
  1370                           
  1371                           ; BSR set to: 1
  1372  00017C  0101               	movlb	1	; () banked
  1373  00017E  BF6C               	btfsc	(main@i_766+1)& (0+255),7,b
  1374  000180  D008               	goto	l4163
  1375  000182  0101               	movlb	1	; () banked
  1376  000184  516C               	movf	(main@i_766+1)& (0+255),w,b
  1377  000186  E127               	bnz	l4169
  1378  000188  0E09               	movlw	9
  1379  00018A  0101               	movlb	1	; () banked
  1380  00018C  5D6B               	subwf	main@i_766& (0+255),w,b
  1381  00018E  B0D8               	btfsc	status,0,c
  1382  000190  D022               	goto	l4169
  1383  000192                     l4163:
  1384                           
  1385                           ; BSR set to: 1
  1386                           ;main.c: 69: {
  1387                           ;main.c: 70: current_user[i] = '0';
  1388  000192  0EC3               	movlw	low _current_user
  1389  000194  0101               	movlb	1	; () banked
  1390  000196  256B               	addwf	main@i_766& (0+255),w,b
  1391  000198  6ED9               	movwf	fsr2l,c
  1392  00019A  0E00               	movlw	high _current_user
  1393  00019C  0101               	movlb	1	; () banked
  1394  00019E  216C               	addwfc	(main@i_766+1)& (0+255),w,b
  1395  0001A0  6EDA               	movwf	fsr2h,c
  1396  0001A2  0E30               	movlw	48
  1397  0001A4  6EDF               	movwf	indf2,c
  1398                           
  1399                           ;main.c: 71: current_pin[i] = '0';
  1400  0001A6  0EBA               	movlw	low _current_pin
  1401  0001A8  0101               	movlb	1	; () banked
  1402  0001AA  256B               	addwf	main@i_766& (0+255),w,b
  1403  0001AC  6ED9               	movwf	fsr2l,c
  1404  0001AE  0E00               	movlw	high _current_pin
  1405  0001B0  0101               	movlb	1	; () banked
  1406  0001B2  216C               	addwfc	(main@i_766+1)& (0+255),w,b
  1407  0001B4  6EDA               	movwf	fsr2h,c
  1408  0001B6  0E30               	movlw	48
  1409  0001B8  6EDF               	movwf	indf2,c
  1410                           
  1411                           ;main.c: 72: buffer[i] = '0';
  1412  0001BA  0E4A               	movlw	low main@buffer
  1413  0001BC  0101               	movlb	1	; () banked
  1414  0001BE  256B               	addwf	main@i_766& (0+255),w,b
  1415  0001C0  6ED9               	movwf	fsr2l,c
  1416  0001C2  0E01               	movlw	high main@buffer
  1417  0001C4  0101               	movlb	1	; () banked
  1418  0001C6  216C               	addwfc	(main@i_766+1)& (0+255),w,b
  1419  0001C8  6EDA               	movwf	fsr2h,c
  1420  0001CA  0E30               	movlw	48
  1421  0001CC  6EDF               	movwf	indf2,c
  1422                           
  1423                           ; BSR set to: 1
  1424  0001CE  0101               	movlb	1	; () banked
  1425  0001D0  4B6B               	infsnz	main@i_766& (0+255),f,b
  1426  0001D2  2B6C               	incf	(main@i_766+1)& (0+255),f,b
  1427  0001D4  D7D3               	goto	l4159
  1428  0001D6                     l4169:
  1429                           
  1430                           ; BSR set to: 1
  1431                           ;main.c: 73: }
  1432                           ;main.c: 74: n = 0;
  1433  0001D6  0E00               	movlw	0
  1434  0001D8  0101               	movlb	1	; () banked
  1435  0001DA  6F71               	movwf	main@n& (0+255),b
  1436                           
  1437                           ; BSR set to: 1
  1438                           ;main.c: 75: Lcd_Set_Cursor(1,1);
  1439  0001DC  0E01               	movlw	1
  1440  0001DE  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1441  0001E0  0E01               	movlw	1
  1442  0001E2  EC08  F00C         	call	_Lcd_Set_Cursor
  1443                           
  1444                           ;main.c: 76: Lcd_Write_String("Enter your ID:  ");
  1445  0001E6  0E27               	movlw	low STR_3
  1446  0001E8  6E1C               	movwf	Lcd_Write_String@a,c
  1447  0001EA  0E7F               	movlw	high STR_3
  1448  0001EC  6E1D               	movwf	Lcd_Write_String@a+1,c
  1449  0001EE  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  1450                           
  1451                           ;main.c: 77: Lcd_Set_Cursor(2,1);
  1452  0001F2  0E01               	movlw	1
  1453  0001F4  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1454  0001F6  0E02               	movlw	2
  1455  0001F8  EC08  F00C         	call	_Lcd_Set_Cursor
  1456                           
  1457                           ;main.c: 78: Lcd_Write_String("[ ]             ");
  1458  0001FC  0ED2               	movlw	low STR_4
  1459  0001FE  6E1C               	movwf	Lcd_Write_String@a,c
  1460  000200  0E7E               	movlw	high STR_4
  1461  000202  6E1D               	movwf	Lcd_Write_String@a+1,c
  1462  000204  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  1463                           
  1464                           ;main.c: 79: Lcd_Set_Cursor(2,1);
  1465  000208  0E01               	movlw	1
  1466  00020A  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1467  00020C  0E02               	movlw	2
  1468  00020E  EC08  F00C         	call	_Lcd_Set_Cursor
  1469                           
  1470                           ;main.c: 81: while (n < 10)
  1471  000212  D0B0               	goto	l4231
  1472  000214                     l4181:
  1473                           
  1474                           ;main.c: 82: {
  1475                           ;main.c: 83: if (n == 9)
  1476  000214  0E09               	movlw	9
  1477  000216  0101               	movlb	1	; () banked
  1478  000218  1971               	xorwf	main@n& (0+255),w,b
  1479  00021A  B4D8               	btfsc	status,2,c
  1480  00021C  D0AF               	goto	l4233
  1481                           
  1482                           ; BSR set to: 1
  1483                           ;main.c: 85: Lcd_Set_Cursor(2,2);
  1484                           
  1485                           ; BSR set to: 1
  1486                           
  1487                           ; BSR set to: 1
  1488                           ;main.c: 84: break;
  1489  00021E  0E02               	movlw	2
  1490  000220  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1491  000222  0E02               	movlw	2
  1492  000224  EC08  F00C         	call	_Lcd_Set_Cursor
  1493                           
  1494                           ;main.c: 86: Lcd_Write_Char(c[9-n]);
  1495  000228  0101               	movlb	1	; () banked
  1496  00022A  5171               	movf	main@n& (0+255),w,b
  1497  00022C  6E2F               	movwf	??_main& (0+255),c
  1498  00022E  6A30               	clrf	(??_main+1)& (0+255),c
  1499  000230  1E2F               	comf	??_main,f,c
  1500  000232  1E30               	comf	??_main+1,f,c
  1501  000234  4A2F               	infsnz	??_main,f,c
  1502  000236  2A30               	incf	??_main+1,f,c
  1503  000238  0E09               	movlw	9
  1504  00023A  262F               	addwf	??_main,f,c
  1505  00023C  0E00               	movlw	0
  1506  00023E  2230               	addwfc	??_main+1,f,c
  1507  000240  0EA2               	movlw	low _c
  1508  000242  242F               	addwf	??_main,w,c
  1509  000244  6ED9               	movwf	fsr2l,c
  1510  000246  0E00               	movlw	high _c
  1511  000248  2030               	addwfc	??_main+1,w,c
  1512  00024A  6EDA               	movwf	fsr2h,c
  1513  00024C  50DF               	movf	indf2,w,c
  1514  00024E  EC50  F00C         	call	_Lcd_Write_Char
  1515                           
  1516                           ;main.c: 87: x = read_keypad();
  1517  000252  ECE0  F009         	call	_read_keypad	;wreg free
  1518  000256  0101               	movlb	1	; () banked
  1519  000258  6F72               	movwf	main@x& (0+255),b
  1520                           
  1521                           ; BSR set to: 1
  1522                           ;main.c: 88: if (x != '_')
  1523  00025A  0E5F               	movlw	95
  1524  00025C  0101               	movlb	1	; () banked
  1525  00025E  1972               	xorwf	main@x& (0+255),w,b
  1526  000260  B4D8               	btfsc	status,2,c
  1527  000262  D088               	goto	l4231
  1528                           
  1529                           ; BSR set to: 1
  1530                           ;main.c: 89: {
  1531                           ;main.c: 90: if (((x - '#') == 0)&&(n > 0))
  1532  000264  0EDD               	movlw	221
  1533  000266  6E2F               	movwf	??_main& (0+255),c
  1534  000268  0EFF               	movlw	255
  1535  00026A  6E30               	movwf	(??_main+1)& (0+255),c
  1536  00026C  0101               	movlb	1	; () banked
  1537  00026E  5172               	movf	main@x& (0+255),w,b
  1538  000270  6E31               	movwf	(??_main+2)& (0+255),c
  1539  000272  6A32               	clrf	(??_main+3)& (0+255),c
  1540  000274  502F               	movf	??_main,w,c
  1541  000276  2631               	addwf	??_main+2,f,c
  1542  000278  5030               	movf	??_main+1,w,c
  1543  00027A  2232               	addwfc	??_main+3,f,c
  1544  00027C  5031               	movf	??_main+2,w,c
  1545  00027E  1032               	iorwf	??_main+3,w,c
  1546  000280  A4D8               	btfss	status,2,c
  1547  000282  D034               	goto	l4213
  1548                           
  1549                           ; BSR set to: 1
  1550  000284  0101               	movlb	1	; () banked
  1551  000286  5171               	movf	main@n& (0+255),w,b
  1552  000288  0101               	movlb	1	; () banked
  1553  00028A  B4D8               	btfsc	status,2,c
  1554  00028C  D02F               	goto	l4213
  1555                           
  1556                           ; BSR set to: 1
  1557                           ;main.c: 91: {
  1558                           ;main.c: 92: buffer[n] = '?';
  1559  00028E  0101               	movlb	1	; () banked
  1560  000290  5171               	movf	main@n& (0+255),w,b
  1561  000292  0D01               	mullw	1
  1562  000294  0E4A               	movlw	low main@buffer
  1563  000296  24F3               	addwf	prodl,w,c
  1564  000298  6ED9               	movwf	fsr2l,c
  1565  00029A  0E01               	movlw	high main@buffer
  1566  00029C  20F4               	addwfc	prodh,w,c
  1567  00029E  6EDA               	movwf	fsr2h,c
  1568  0002A0  0E3F               	movlw	63
  1569  0002A2  6EDF               	movwf	indf2,c
  1570                           
  1571                           ; BSR set to: 1
  1572                           ;main.c: 93: Lcd_Set_Cursor(2, 7 + n);
  1573  0002A4  0101               	movlb	1	; () banked
  1574  0002A6  5171               	movf	main@n& (0+255),w,b
  1575  0002A8  0F07               	addlw	7
  1576  0002AA  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1577  0002AC  0E02               	movlw	2
  1578  0002AE  EC08  F00C         	call	_Lcd_Set_Cursor
  1579                           
  1580                           ;main.c: 94: Lcd_Write_Char('_');
  1581  0002B2  0E5F               	movlw	95
  1582  0002B4  EC50  F00C         	call	_Lcd_Write_Char
  1583                           
  1584                           ;main.c: 95: latch_keypad(&x);
  1585  0002B8  0E72               	movlw	low main@x
  1586  0002BA  6E18               	movwf	latch_keypad@x,c
  1587  0002BC  0E01               	movlw	high main@x
  1588  0002BE  6E19               	movwf	latch_keypad@x+1,c
  1589  0002C0  EC6C  F00C         	call	_latch_keypad	;wreg free
  1590                           
  1591                           ;main.c: 96: Lcd_Set_Cursor(2, 8 + n);
  1592  0002C4  0101               	movlb	1	; () banked
  1593  0002C6  5171               	movf	main@n& (0+255),w,b
  1594  0002C8  0F08               	addlw	8
  1595  0002CA  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1596  0002CC  0E02               	movlw	2
  1597  0002CE  EC08  F00C         	call	_Lcd_Set_Cursor
  1598                           
  1599                           ;main.c: 97: Lcd_Write_Char(' ');
  1600  0002D2  0E20               	movlw	32
  1601  0002D4  EC50  F00C         	call	_Lcd_Write_Char
  1602                           
  1603                           ;main.c: 98: Lcd_Set_Cursor(2, 7 + n);
  1604  0002D8  0101               	movlb	1	; () banked
  1605  0002DA  5171               	movf	main@n& (0+255),w,b
  1606  0002DC  0F07               	addlw	7
  1607  0002DE  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1608  0002E0  0E02               	movlw	2
  1609  0002E2  EC08  F00C         	call	_Lcd_Set_Cursor
  1610                           
  1611                           ;main.c: 99: n--;
  1612  0002E6  0101               	movlb	1	; () banked
  1613  0002E8  0771               	decf	main@n& (0+255),f,b
  1614                           
  1615                           ;main.c: 100: }
  1616  0002EA  D044               	goto	l4231
  1617  0002EC                     l4213:
  1618                           
  1619                           ; BSR set to: 1
  1620                           ;main.c: 101: else if ((x - '#') != 0)
  1621  0002EC  0EDD               	movlw	221
  1622  0002EE  6E2F               	movwf	??_main& (0+255),c
  1623  0002F0  0EFF               	movlw	255
  1624  0002F2  6E30               	movwf	(??_main+1)& (0+255),c
  1625  0002F4  0101               	movlb	1	; () banked
  1626  0002F6  5172               	movf	main@x& (0+255),w,b
  1627  0002F8  6E31               	movwf	(??_main+2)& (0+255),c
  1628  0002FA  6A32               	clrf	(??_main+3)& (0+255),c
  1629  0002FC  502F               	movf	??_main,w,c
  1630  0002FE  2631               	addwf	??_main+2,f,c
  1631  000300  5030               	movf	??_main+1,w,c
  1632  000302  2232               	addwfc	??_main+3,f,c
  1633  000304  5031               	movf	??_main+2,w,c
  1634  000306  1032               	iorwf	??_main+3,w,c
  1635  000308  B4D8               	btfsc	status,2,c
  1636  00030A  D034               	goto	l4231
  1637                           
  1638                           ; BSR set to: 1
  1639                           ;main.c: 102: {
  1640                           ;main.c: 103: if ((x == '*')|(n == 9))
  1641  00030C  0E2A               	movlw	42
  1642  00030E  0101               	movlb	1	; () banked
  1643  000310  1972               	xorwf	main@x& (0+255),w,b
  1644  000312  B4D8               	btfsc	status,2,c
  1645  000314  D033               	goto	l4233
  1646                           
  1647                           ; BSR set to: 1
  1648  000316  0E09               	movlw	9
  1649  000318  0101               	movlb	1	; () banked
  1650  00031A  1971               	xorwf	main@n& (0+255),w,b
  1651  00031C  B4D8               	btfsc	status,2,c
  1652  00031E  D02E               	goto	l4233
  1653                           
  1654                           ; BSR set to: 1
  1655                           ;main.c: 106: }
  1656                           ;main.c: 107: n++;
  1657                           
  1658                           ; BSR set to: 1
  1659                           
  1660                           ; BSR set to: 1
  1661                           ;main.c: 104: {
  1662                           ;main.c: 105: break;
  1663  000320  0101               	movlb	1	; () banked
  1664  000322  2B71               	incf	main@n& (0+255),f,b
  1665                           
  1666                           ; BSR set to: 1
  1667                           ;main.c: 108: buffer[n-1] = x;
  1668  000324  0EFF               	movlw	255
  1669  000326  6E2F               	movwf	??_main& (0+255),c
  1670  000328  0EFF               	movlw	255
  1671  00032A  6E30               	movwf	(??_main+1)& (0+255),c
  1672  00032C  0101               	movlb	1	; () banked
  1673  00032E  5171               	movf	main@n& (0+255),w,b
  1674  000330  6E31               	movwf	(??_main+2)& (0+255),c
  1675  000332  6A32               	clrf	(??_main+3)& (0+255),c
  1676  000334  502F               	movf	??_main,w,c
  1677  000336  2631               	addwf	??_main+2,f,c
  1678  000338  5030               	movf	??_main+1,w,c
  1679  00033A  2232               	addwfc	??_main+3,f,c
  1680  00033C  0E4A               	movlw	low main@buffer
  1681  00033E  2431               	addwf	??_main+2,w,c
  1682  000340  6ED9               	movwf	fsr2l,c
  1683  000342  0E01               	movlw	high main@buffer
  1684  000344  2032               	addwfc	??_main+3,w,c
  1685  000346  6EDA               	movwf	fsr2h,c
  1686  000348  C172  FFDF         	movff	main@x,indf2
  1687                           
  1688                           ; BSR set to: 1
  1689                           ;main.c: 109: Lcd_Set_Cursor(2, 7 + n);
  1690  00034C  0101               	movlb	1	; () banked
  1691  00034E  5171               	movf	main@n& (0+255),w,b
  1692  000350  0F07               	addlw	7
  1693  000352  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1694  000354  0E02               	movlw	2
  1695  000356  EC08  F00C         	call	_Lcd_Set_Cursor
  1696                           
  1697                           ;main.c: 110: Lcd_Write_Char(x);
  1698  00035A  0101               	movlb	1	; () banked
  1699  00035C  5172               	movf	main@x& (0+255),w,b
  1700  00035E  EC50  F00C         	call	_Lcd_Write_Char
  1701                           
  1702                           ;main.c: 111: Lcd_Write_Char('_');
  1703  000362  0E5F               	movlw	95
  1704  000364  EC50  F00C         	call	_Lcd_Write_Char
  1705                           
  1706                           ;main.c: 112: latch_keypad(&x);
  1707  000368  0E72               	movlw	low main@x
  1708  00036A  6E18               	movwf	latch_keypad@x,c
  1709  00036C  0E01               	movlw	high main@x
  1710  00036E  6E19               	movwf	latch_keypad@x+1,c
  1711  000370  EC6C  F00C         	call	_latch_keypad	;wreg free
  1712  000374                     l4231:
  1713  000374  0E09               	movlw	9
  1714  000376  0101               	movlb	1	; () banked
  1715  000378  6571               	cpfsgt	main@n& (0+255),b
  1716  00037A  D74C               	goto	l4181
  1717  00037C                     l4233:
  1718                           
  1719                           ; BSR set to: 1
  1720                           ;main.c: 113: }
  1721                           ;main.c: 114: }
  1722                           ;main.c: 115: }
  1723                           ;main.c: 116: for (int i = 0; i < 10; i++)
  1724  00037C  0E00               	movlw	0
  1725  00037E  0101               	movlb	1	; () banked
  1726  000380  6F58               	movwf	(main@i_769+1)& (0+255),b
  1727  000382  0E00               	movlw	0
  1728  000384  6F57               	movwf	main@i_769& (0+255),b
  1729  000386                     l4235:
  1730                           
  1731                           ; BSR set to: 1
  1732  000386  0101               	movlb	1	; () banked
  1733  000388  BF58               	btfsc	(main@i_769+1)& (0+255),7,b
  1734  00038A  D008               	goto	l4239
  1735  00038C  0101               	movlb	1	; () banked
  1736  00038E  5158               	movf	(main@i_769+1)& (0+255),w,b
  1737  000390  E110               	bnz	l4243
  1738  000392  0E0A               	movlw	10
  1739  000394  0101               	movlb	1	; () banked
  1740  000396  5D57               	subwf	main@i_769& (0+255),w,b
  1741  000398  B0D8               	btfsc	status,0,c
  1742  00039A  D00B               	goto	l4243
  1743  00039C                     l4239:
  1744                           
  1745                           ; BSR set to: 1
  1746                           ;main.c: 117: _delay((unsigned long)((10)*(16000000/4000.0)));
  1747  00039C  0E34               	movlw	52
  1748  00039E  6E2F               	movwf	??_main& (0+255),c
  1749  0003A0  0EF2               	movlw	242
  1750  0003A2                     u4377:
  1751  0003A2  2EE8               	decfsz	wreg,f,c
  1752  0003A4  D7FE               	goto	u4377
  1753  0003A6  2E2F               	decfsz	??_main& (0+255),f,c
  1754  0003A8  D7FC               	goto	u4377
  1755  0003AA  0101               	movlb	1	; () banked
  1756  0003AC  4B57               	infsnz	main@i_769& (0+255),f,b
  1757  0003AE  2B58               	incf	(main@i_769+1)& (0+255),f,b
  1758  0003B0  D7EA               	goto	l4235
  1759  0003B2                     l4243:
  1760                           
  1761                           ; BSR set to: 1
  1762                           ;main.c: 118: for (int i = 0; i < n; i++)
  1763  0003B2  0E00               	movlw	0
  1764  0003B4  0101               	movlb	1	; () banked
  1765  0003B6  6F68               	movwf	(main@i_770+1)& (0+255),b
  1766  0003B8  0E00               	movlw	0
  1767  0003BA  6F67               	movwf	main@i_770& (0+255),b
  1768  0003BC  D055               	goto	l4251
  1769  0003BE                     l4245:
  1770                           
  1771                           ; BSR set to: 1
  1772                           ;main.c: 119: {
  1773                           ;main.c: 120: current_user[8 - i] = buffer[(n-1) - i];
  1774  0003BE  0EFF               	movlw	255
  1775  0003C0  6E2F               	movwf	??_main& (0+255),c
  1776  0003C2  0EFF               	movlw	255
  1777  0003C4  6E30               	movwf	(??_main+1)& (0+255),c
  1778  0003C6  C167  F031         	movff	main@i_770,??_main+2
  1779  0003CA  C168  F032         	movff	main@i_770+1,??_main+3
  1780  0003CE  1E31               	comf	??_main+2,f,c
  1781  0003D0  1E32               	comf	??_main+3,f,c
  1782  0003D2  4A31               	infsnz	??_main+2,f,c
  1783  0003D4  2A32               	incf	??_main+3,f,c
  1784  0003D6  0101               	movlb	1	; () banked
  1785  0003D8  5171               	movf	main@n& (0+255),w,b
  1786  0003DA  6E33               	movwf	(??_main+4)& (0+255),c
  1787  0003DC  6A34               	clrf	(??_main+5)& (0+255),c
  1788  0003DE  5031               	movf	??_main+2,w,c
  1789  0003E0  2633               	addwf	??_main+4,f,c
  1790  0003E2  5032               	movf	??_main+3,w,c
  1791  0003E4  2234               	addwfc	??_main+5,f,c
  1792  0003E6  502F               	movf	??_main,w,c
  1793  0003E8  2633               	addwf	??_main+4,f,c
  1794  0003EA  5030               	movf	??_main+1,w,c
  1795  0003EC  2234               	addwfc	??_main+5,f,c
  1796  0003EE  0E4A               	movlw	low main@buffer
  1797  0003F0  2433               	addwf	??_main+4,w,c
  1798  0003F2  6ED9               	movwf	fsr2l,c
  1799  0003F4  0E01               	movlw	high main@buffer
  1800  0003F6  2034               	addwfc	??_main+5,w,c
  1801  0003F8  6EDA               	movwf	fsr2h,c
  1802  0003FA  C167  F035         	movff	main@i_770,??_main+6
  1803  0003FE  C168  F036         	movff	main@i_770+1,??_main+7
  1804  000402  1E35               	comf	??_main+6,f,c
  1805  000404  1E36               	comf	??_main+7,f,c
  1806  000406  4A35               	infsnz	??_main+6,f,c
  1807  000408  2A36               	incf	??_main+7,f,c
  1808  00040A  0E08               	movlw	8
  1809  00040C  2635               	addwf	??_main+6,f,c
  1810  00040E  0E00               	movlw	0
  1811  000410  2236               	addwfc	??_main+7,f,c
  1812  000412  0EC3               	movlw	low _current_user
  1813  000414  2435               	addwf	??_main+6,w,c
  1814  000416  6EE1               	movwf	fsr1l,c
  1815  000418  0E00               	movlw	high _current_user
  1816  00041A  2036               	addwfc	??_main+7,w,c
  1817  00041C  6EE2               	movwf	fsr1h,c
  1818  00041E  CFDF FFE7          	movff	indf2,indf1
  1819                           
  1820                           ; BSR set to: 1
  1821                           ;main.c: 121: buffer[(n-1) - i] = '0';
  1822  000422  0EFF               	movlw	255
  1823  000424  6E2F               	movwf	??_main& (0+255),c
  1824  000426  0EFF               	movlw	255
  1825  000428  6E30               	movwf	(??_main+1)& (0+255),c
  1826  00042A  C167  F031         	movff	main@i_770,??_main+2
  1827  00042E  C168  F032         	movff	main@i_770+1,??_main+3
  1828  000432  1E31               	comf	??_main+2,f,c
  1829  000434  1E32               	comf	??_main+3,f,c
  1830  000436  4A31               	infsnz	??_main+2,f,c
  1831  000438  2A32               	incf	??_main+3,f,c
  1832  00043A  0101               	movlb	1	; () banked
  1833  00043C  5171               	movf	main@n& (0+255),w,b
  1834  00043E  6E33               	movwf	(??_main+4)& (0+255),c
  1835  000440  6A34               	clrf	(??_main+5)& (0+255),c
  1836  000442  5031               	movf	??_main+2,w,c
  1837  000444  2633               	addwf	??_main+4,f,c
  1838  000446  5032               	movf	??_main+3,w,c
  1839  000448  2234               	addwfc	??_main+5,f,c
  1840  00044A  502F               	movf	??_main,w,c
  1841  00044C  2633               	addwf	??_main+4,f,c
  1842  00044E  5030               	movf	??_main+1,w,c
  1843  000450  2234               	addwfc	??_main+5,f,c
  1844  000452  0E4A               	movlw	low main@buffer
  1845  000454  2433               	addwf	??_main+4,w,c
  1846  000456  6ED9               	movwf	fsr2l,c
  1847  000458  0E01               	movlw	high main@buffer
  1848  00045A  2034               	addwfc	??_main+5,w,c
  1849  00045C  6EDA               	movwf	fsr2h,c
  1850  00045E  0E30               	movlw	48
  1851  000460  6EDF               	movwf	indf2,c
  1852                           
  1853                           ; BSR set to: 1
  1854  000462  0101               	movlb	1	; () banked
  1855  000464  4B67               	infsnz	main@i_770& (0+255),f,b
  1856  000466  2B68               	incf	(main@i_770+1)& (0+255),f,b
  1857  000468                     l4251:
  1858                           
  1859                           ; BSR set to: 1
  1860  000468  0101               	movlb	1	; () banked
  1861  00046A  5171               	movf	main@n& (0+255),w,b
  1862  00046C  6E2F               	movwf	??_main& (0+255),c
  1863  00046E  6A30               	clrf	(??_main+1)& (0+255),c
  1864  000470  502F               	movf	??_main,w,c
  1865  000472  0101               	movlb	1	; () banked
  1866  000474  5D67               	subwf	main@i_770& (0+255),w,b
  1867  000476  0101               	movlb	1	; () banked
  1868  000478  5168               	movf	(main@i_770+1)& (0+255),w,b
  1869  00047A  0A80               	xorlw	128
  1870  00047C  6E31               	movwf	(??_main+2)& (0+255),c
  1871  00047E  5030               	movf	??_main+1,w,c
  1872  000480  0A80               	xorlw	128
  1873  000482  5831               	subwfb	(??_main+2)& (0+255),w,c
  1874  000484  A0D8               	btfss	status,0,c
  1875  000486  D79B               	goto	l4245
  1876                           
  1877                           ; BSR set to: 1
  1878                           ;main.c: 122: }
  1879                           ;main.c: 123: Lcd_Clear();
  1880                           
  1881                           ; BSR set to: 1
  1882  000488  ECD7  F00C         	call	_Lcd_Clear	;wreg free
  1883                           
  1884                           ;main.c: 124: menu_progress_bar(100);
  1885  00048C  0E00               	movlw	0
  1886  00048E  6E26               	movwf	menu_progress_bar@load_time_ms+1,c
  1887  000490  0E64               	movlw	100
  1888  000492  6E25               	movwf	menu_progress_bar@load_time_ms,c
  1889  000494  EC0F  F009         	call	_menu_progress_bar	;wreg free
  1890                           
  1891                           ;main.c: 128: p = 0;
  1892  000498  0E00               	movlw	0
  1893  00049A  0101               	movlb	1	; () banked
  1894  00049C  6F70               	movwf	main@p& (0+255),b
  1895                           
  1896                           ; BSR set to: 1
  1897                           ;main.c: 129: Lcd_Set_Cursor(1,1);
  1898  00049E  0E01               	movlw	1
  1899  0004A0  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1900  0004A2  0E01               	movlw	1
  1901  0004A4  EC08  F00C         	call	_Lcd_Set_Cursor
  1902                           
  1903                           ;main.c: 130: Lcd_Write_String("Enter your PIN: ");
  1904  0004A8  0E5A               	movlw	low STR_5
  1905  0004AA  6E1C               	movwf	Lcd_Write_String@a,c
  1906  0004AC  0E7F               	movlw	high STR_5
  1907  0004AE  6E1D               	movwf	Lcd_Write_String@a+1,c
  1908  0004B0  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  1909                           
  1910                           ;main.c: 131: Lcd_Set_Cursor(2,1);
  1911  0004B4  0E01               	movlw	1
  1912  0004B6  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1913  0004B8  0E02               	movlw	2
  1914  0004BA  EC08  F00C         	call	_Lcd_Set_Cursor
  1915                           
  1916                           ;main.c: 132: Lcd_Write_String("[ ]             ");
  1917  0004BE  0ED2               	movlw	low STR_4
  1918  0004C0  6E1C               	movwf	Lcd_Write_String@a,c
  1919  0004C2  0E7E               	movlw	high STR_4
  1920  0004C4  6E1D               	movwf	Lcd_Write_String@a+1,c
  1921  0004C6  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  1922                           
  1923                           ;main.c: 133: Lcd_Set_Cursor(2,1);
  1924  0004CA  0E01               	movlw	1
  1925  0004CC  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1926  0004CE  0E02               	movlw	2
  1927  0004D0  EC08  F00C         	call	_Lcd_Set_Cursor
  1928                           
  1929                           ;main.c: 134: while (p < 10)
  1930  0004D4  D0B8               	goto	l4321
  1931  0004D6                     l4269:
  1932                           
  1933                           ;main.c: 135: {
  1934                           ;main.c: 136: if (p == 9)
  1935  0004D6  0E09               	movlw	9
  1936  0004D8  0101               	movlb	1	; () banked
  1937  0004DA  1970               	xorwf	main@p& (0+255),w,b
  1938  0004DC  B4D8               	btfsc	status,2,c
  1939  0004DE  D0B7               	goto	l4323
  1940                           
  1941                           ; BSR set to: 1
  1942                           ;main.c: 138: char c[] = {'0','1','2','3','4','5','6','7','8','9'};
  1943                           
  1944                           ; BSR set to: 1
  1945                           
  1946                           ; BSR set to: 1
  1947                           ;main.c: 137: break;
  1948  0004E0  EE20  F0AC         	lfsr	2,main@F3679
  1949  0004E4  EE11  F040         	lfsr	1,main@c
  1950  0004E8  0E09               	movlw	9
  1951  0004EA                     u4071:
  1952  0004EA  CFDB FFE3          	movff	plusw2,plusw1
  1953  0004EE  06E8               	decf	wreg,f,c
  1954  0004F0  E2FC               	bc	u4071
  1955                           
  1956                           ; BSR set to: 1
  1957                           ;main.c: 139: Lcd_Set_Cursor(2,2);
  1958  0004F2  0E02               	movlw	2
  1959  0004F4  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1960  0004F6  0E02               	movlw	2
  1961  0004F8  EC08  F00C         	call	_Lcd_Set_Cursor
  1962                           
  1963                           ;main.c: 140: Lcd_Write_Char(c[9-p]);
  1964  0004FC  0101               	movlb	1	; () banked
  1965  0004FE  5170               	movf	main@p& (0+255),w,b
  1966  000500  6E2F               	movwf	??_main& (0+255),c
  1967  000502  6A30               	clrf	(??_main+1)& (0+255),c
  1968  000504  1E2F               	comf	??_main,f,c
  1969  000506  1E30               	comf	??_main+1,f,c
  1970  000508  4A2F               	infsnz	??_main,f,c
  1971  00050A  2A30               	incf	??_main+1,f,c
  1972  00050C  0E09               	movlw	9
  1973  00050E  262F               	addwf	??_main,f,c
  1974  000510  0E00               	movlw	0
  1975  000512  2230               	addwfc	??_main+1,f,c
  1976  000514  0E40               	movlw	low main@c
  1977  000516  242F               	addwf	??_main,w,c
  1978  000518  6ED9               	movwf	fsr2l,c
  1979  00051A  0E01               	movlw	high main@c
  1980  00051C  2030               	addwfc	??_main+1,w,c
  1981  00051E  6EDA               	movwf	fsr2h,c
  1982  000520  50DF               	movf	indf2,w,c
  1983  000522  EC50  F00C         	call	_Lcd_Write_Char
  1984                           
  1985                           ;main.c: 141: x = read_keypad();
  1986  000526  ECE0  F009         	call	_read_keypad	;wreg free
  1987  00052A  0101               	movlb	1	; () banked
  1988  00052C  6F72               	movwf	main@x& (0+255),b
  1989                           
  1990                           ; BSR set to: 1
  1991                           ;main.c: 142: if (x != '_')
  1992  00052E  0E5F               	movlw	95
  1993  000530  0101               	movlb	1	; () banked
  1994  000532  1972               	xorwf	main@x& (0+255),w,b
  1995  000534  B4D8               	btfsc	status,2,c
  1996  000536  D087               	goto	l4321
  1997                           
  1998                           ; BSR set to: 1
  1999                           ;main.c: 143: {
  2000                           ;main.c: 144: if (((x - '#') == 0)&&(p > 0))
  2001  000538  0EDD               	movlw	221
  2002  00053A  6E2F               	movwf	??_main& (0+255),c
  2003  00053C  0EFF               	movlw	255
  2004  00053E  6E30               	movwf	(??_main+1)& (0+255),c
  2005  000540  0101               	movlb	1	; () banked
  2006  000542  5172               	movf	main@x& (0+255),w,b
  2007  000544  6E31               	movwf	(??_main+2)& (0+255),c
  2008  000546  6A32               	clrf	(??_main+3)& (0+255),c
  2009  000548  502F               	movf	??_main,w,c
  2010  00054A  2631               	addwf	??_main+2,f,c
  2011  00054C  5030               	movf	??_main+1,w,c
  2012  00054E  2232               	addwfc	??_main+3,f,c
  2013  000550  5031               	movf	??_main+2,w,c
  2014  000552  1032               	iorwf	??_main+3,w,c
  2015  000554  A4D8               	btfss	status,2,c
  2016  000556  D034               	goto	l4303
  2017                           
  2018                           ; BSR set to: 1
  2019  000558  0101               	movlb	1	; () banked
  2020  00055A  5170               	movf	main@p& (0+255),w,b
  2021  00055C  0101               	movlb	1	; () banked
  2022  00055E  B4D8               	btfsc	status,2,c
  2023  000560  D02F               	goto	l4303
  2024                           
  2025                           ; BSR set to: 1
  2026                           ;main.c: 145: {
  2027                           ;main.c: 146: buffer[p] = '?';
  2028  000562  0101               	movlb	1	; () banked
  2029  000564  5170               	movf	main@p& (0+255),w,b
  2030  000566  0D01               	mullw	1
  2031  000568  0E4A               	movlw	low main@buffer
  2032  00056A  24F3               	addwf	prodl,w,c
  2033  00056C  6ED9               	movwf	fsr2l,c
  2034  00056E  0E01               	movlw	high main@buffer
  2035  000570  20F4               	addwfc	prodh,w,c
  2036  000572  6EDA               	movwf	fsr2h,c
  2037  000574  0E3F               	movlw	63
  2038  000576  6EDF               	movwf	indf2,c
  2039                           
  2040                           ; BSR set to: 1
  2041                           ;main.c: 147: Lcd_Set_Cursor(2, 7 + p);
  2042  000578  0101               	movlb	1	; () banked
  2043  00057A  5170               	movf	main@p& (0+255),w,b
  2044  00057C  0F07               	addlw	7
  2045  00057E  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2046  000580  0E02               	movlw	2
  2047  000582  EC08  F00C         	call	_Lcd_Set_Cursor
  2048                           
  2049                           ;main.c: 148: Lcd_Write_Char('_');
  2050  000586  0E5F               	movlw	95
  2051  000588  EC50  F00C         	call	_Lcd_Write_Char
  2052                           
  2053                           ;main.c: 149: latch_keypad(&x);
  2054  00058C  0E72               	movlw	low main@x
  2055  00058E  6E18               	movwf	latch_keypad@x,c
  2056  000590  0E01               	movlw	high main@x
  2057  000592  6E19               	movwf	latch_keypad@x+1,c
  2058  000594  EC6C  F00C         	call	_latch_keypad	;wreg free
  2059                           
  2060                           ;main.c: 150: Lcd_Set_Cursor(2, 8 + p);
  2061  000598  0101               	movlb	1	; () banked
  2062  00059A  5170               	movf	main@p& (0+255),w,b
  2063  00059C  0F08               	addlw	8
  2064  00059E  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2065  0005A0  0E02               	movlw	2
  2066  0005A2  EC08  F00C         	call	_Lcd_Set_Cursor
  2067                           
  2068                           ;main.c: 151: Lcd_Write_Char(' ');
  2069  0005A6  0E20               	movlw	32
  2070  0005A8  EC50  F00C         	call	_Lcd_Write_Char
  2071                           
  2072                           ;main.c: 152: Lcd_Set_Cursor(2, 7 + p);
  2073  0005AC  0101               	movlb	1	; () banked
  2074  0005AE  5170               	movf	main@p& (0+255),w,b
  2075  0005B0  0F07               	addlw	7
  2076  0005B2  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2077  0005B4  0E02               	movlw	2
  2078  0005B6  EC08  F00C         	call	_Lcd_Set_Cursor
  2079                           
  2080                           ;main.c: 153: p--;
  2081  0005BA  0101               	movlb	1	; () banked
  2082  0005BC  0770               	decf	main@p& (0+255),f,b
  2083                           
  2084                           ;main.c: 154: }
  2085  0005BE  D043               	goto	l4321
  2086  0005C0                     l4303:
  2087                           
  2088                           ; BSR set to: 1
  2089                           ;main.c: 155: else if ((x - '#') != 0)
  2090  0005C0  0EDD               	movlw	221
  2091  0005C2  6E2F               	movwf	??_main& (0+255),c
  2092  0005C4  0EFF               	movlw	255
  2093  0005C6  6E30               	movwf	(??_main+1)& (0+255),c
  2094  0005C8  0101               	movlb	1	; () banked
  2095  0005CA  5172               	movf	main@x& (0+255),w,b
  2096  0005CC  6E31               	movwf	(??_main+2)& (0+255),c
  2097  0005CE  6A32               	clrf	(??_main+3)& (0+255),c
  2098  0005D0  502F               	movf	??_main,w,c
  2099  0005D2  2631               	addwf	??_main+2,f,c
  2100  0005D4  5030               	movf	??_main+1,w,c
  2101  0005D6  2232               	addwfc	??_main+3,f,c
  2102  0005D8  5031               	movf	??_main+2,w,c
  2103  0005DA  1032               	iorwf	??_main+3,w,c
  2104  0005DC  B4D8               	btfsc	status,2,c
  2105  0005DE  D033               	goto	l4321
  2106                           
  2107                           ; BSR set to: 1
  2108                           ;main.c: 156: {
  2109                           ;main.c: 157: if ((x == '*')|(p == 9))
  2110  0005E0  0E2A               	movlw	42
  2111  0005E2  0101               	movlb	1	; () banked
  2112  0005E4  1972               	xorwf	main@x& (0+255),w,b
  2113  0005E6  B4D8               	btfsc	status,2,c
  2114  0005E8  D032               	goto	l4323
  2115                           
  2116                           ; BSR set to: 1
  2117  0005EA  0E09               	movlw	9
  2118  0005EC  0101               	movlb	1	; () banked
  2119  0005EE  1970               	xorwf	main@p& (0+255),w,b
  2120  0005F0  B4D8               	btfsc	status,2,c
  2121  0005F2  D02D               	goto	l4323
  2122                           
  2123                           ; BSR set to: 1
  2124                           ;main.c: 160: }
  2125                           ;main.c: 161: p++;
  2126                           
  2127                           ; BSR set to: 1
  2128                           
  2129                           ; BSR set to: 1
  2130                           ;main.c: 158: {
  2131                           ;main.c: 159: break;
  2132  0005F4  0101               	movlb	1	; () banked
  2133  0005F6  2B70               	incf	main@p& (0+255),f,b
  2134                           
  2135                           ; BSR set to: 1
  2136                           ;main.c: 162: buffer[p-1] = x;
  2137  0005F8  0EFF               	movlw	255
  2138  0005FA  6E2F               	movwf	??_main& (0+255),c
  2139  0005FC  0EFF               	movlw	255
  2140  0005FE  6E30               	movwf	(??_main+1)& (0+255),c
  2141  000600  0101               	movlb	1	; () banked
  2142  000602  5170               	movf	main@p& (0+255),w,b
  2143  000604  6E31               	movwf	(??_main+2)& (0+255),c
  2144  000606  6A32               	clrf	(??_main+3)& (0+255),c
  2145  000608  502F               	movf	??_main,w,c
  2146  00060A  2631               	addwf	??_main+2,f,c
  2147  00060C  5030               	movf	??_main+1,w,c
  2148  00060E  2232               	addwfc	??_main+3,f,c
  2149  000610  0E4A               	movlw	low main@buffer
  2150  000612  2431               	addwf	??_main+2,w,c
  2151  000614  6ED9               	movwf	fsr2l,c
  2152  000616  0E01               	movlw	high main@buffer
  2153  000618  2032               	addwfc	??_main+3,w,c
  2154  00061A  6EDA               	movwf	fsr2h,c
  2155  00061C  C172  FFDF         	movff	main@x,indf2
  2156                           
  2157                           ; BSR set to: 1
  2158                           ;main.c: 163: Lcd_Set_Cursor(2, 7 + p);
  2159  000620  0101               	movlb	1	; () banked
  2160  000622  5170               	movf	main@p& (0+255),w,b
  2161  000624  0F07               	addlw	7
  2162  000626  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2163  000628  0E02               	movlw	2
  2164  00062A  EC08  F00C         	call	_Lcd_Set_Cursor
  2165                           
  2166                           ;main.c: 164: Lcd_Write_Char('*');
  2167  00062E  0E2A               	movlw	42
  2168  000630  EC50  F00C         	call	_Lcd_Write_Char
  2169                           
  2170                           ;main.c: 165: Lcd_Write_Char('_');
  2171  000634  0E5F               	movlw	95
  2172  000636  EC50  F00C         	call	_Lcd_Write_Char
  2173                           
  2174                           ;main.c: 166: latch_keypad(&x);
  2175  00063A  0E72               	movlw	low main@x
  2176  00063C  6E18               	movwf	latch_keypad@x,c
  2177  00063E  0E01               	movlw	high main@x
  2178  000640  6E19               	movwf	latch_keypad@x+1,c
  2179  000642  EC6C  F00C         	call	_latch_keypad	;wreg free
  2180  000646                     l4321:
  2181  000646  0E09               	movlw	9
  2182  000648  0101               	movlb	1	; () banked
  2183  00064A  6570               	cpfsgt	main@p& (0+255),b
  2184  00064C  D744               	goto	l4269
  2185  00064E                     l4323:
  2186                           
  2187                           ; BSR set to: 1
  2188                           ;main.c: 167: }
  2189                           ;main.c: 168: }
  2190                           ;main.c: 169: }
  2191                           ;main.c: 170: for (int i = 0; i < p; i++)
  2192  00064E  0E00               	movlw	0
  2193  000650  0101               	movlb	1	; () banked
  2194  000652  6F64               	movwf	(main@i_776+1)& (0+255),b
  2195  000654  0E00               	movlw	0
  2196  000656  6F63               	movwf	main@i_776& (0+255),b
  2197  000658  D035               	goto	l4329
  2198  00065A                     l4325:
  2199                           
  2200                           ; BSR set to: 1
  2201                           ;main.c: 171: current_pin[8 - i] = buffer[(p-1) - i];
  2202  00065A  0EFF               	movlw	255
  2203  00065C  6E2F               	movwf	??_main& (0+255),c
  2204  00065E  0EFF               	movlw	255
  2205  000660  6E30               	movwf	(??_main+1)& (0+255),c
  2206  000662  C163  F031         	movff	main@i_776,??_main+2
  2207  000666  C164  F032         	movff	main@i_776+1,??_main+3
  2208  00066A  1E31               	comf	??_main+2,f,c
  2209  00066C  1E32               	comf	??_main+3,f,c
  2210  00066E  4A31               	infsnz	??_main+2,f,c
  2211  000670  2A32               	incf	??_main+3,f,c
  2212  000672  0101               	movlb	1	; () banked
  2213  000674  5170               	movf	main@p& (0+255),w,b
  2214  000676  6E33               	movwf	(??_main+4)& (0+255),c
  2215  000678  6A34               	clrf	(??_main+5)& (0+255),c
  2216  00067A  5031               	movf	??_main+2,w,c
  2217  00067C  2633               	addwf	??_main+4,f,c
  2218  00067E  5032               	movf	??_main+3,w,c
  2219  000680  2234               	addwfc	??_main+5,f,c
  2220  000682  502F               	movf	??_main,w,c
  2221  000684  2633               	addwf	??_main+4,f,c
  2222  000686  5030               	movf	??_main+1,w,c
  2223  000688  2234               	addwfc	??_main+5,f,c
  2224  00068A  0E4A               	movlw	low main@buffer
  2225  00068C  2433               	addwf	??_main+4,w,c
  2226  00068E  6ED9               	movwf	fsr2l,c
  2227  000690  0E01               	movlw	high main@buffer
  2228  000692  2034               	addwfc	??_main+5,w,c
  2229  000694  6EDA               	movwf	fsr2h,c
  2230  000696  C163  F035         	movff	main@i_776,??_main+6
  2231  00069A  C164  F036         	movff	main@i_776+1,??_main+7
  2232  00069E  1E35               	comf	??_main+6,f,c
  2233  0006A0  1E36               	comf	??_main+7,f,c
  2234  0006A2  4A35               	infsnz	??_main+6,f,c
  2235  0006A4  2A36               	incf	??_main+7,f,c
  2236  0006A6  0E08               	movlw	8
  2237  0006A8  2635               	addwf	??_main+6,f,c
  2238  0006AA  0E00               	movlw	0
  2239  0006AC  2236               	addwfc	??_main+7,f,c
  2240  0006AE  0EBA               	movlw	low _current_pin
  2241  0006B0  2435               	addwf	??_main+6,w,c
  2242  0006B2  6EE1               	movwf	fsr1l,c
  2243  0006B4  0E00               	movlw	high _current_pin
  2244  0006B6  2036               	addwfc	??_main+7,w,c
  2245  0006B8  6EE2               	movwf	fsr1h,c
  2246  0006BA  CFDF FFE7          	movff	indf2,indf1
  2247                           
  2248                           ; BSR set to: 1
  2249  0006BE  0101               	movlb	1	; () banked
  2250  0006C0  4B63               	infsnz	main@i_776& (0+255),f,b
  2251  0006C2  2B64               	incf	(main@i_776+1)& (0+255),f,b
  2252  0006C4                     l4329:
  2253                           
  2254                           ; BSR set to: 1
  2255  0006C4  0101               	movlb	1	; () banked
  2256  0006C6  5170               	movf	main@p& (0+255),w,b
  2257  0006C8  6E2F               	movwf	??_main& (0+255),c
  2258  0006CA  6A30               	clrf	(??_main+1)& (0+255),c
  2259  0006CC  502F               	movf	??_main,w,c
  2260  0006CE  0101               	movlb	1	; () banked
  2261  0006D0  5D63               	subwf	main@i_776& (0+255),w,b
  2262  0006D2  0101               	movlb	1	; () banked
  2263  0006D4  5164               	movf	(main@i_776+1)& (0+255),w,b
  2264  0006D6  0A80               	xorlw	128
  2265  0006D8  6E31               	movwf	(??_main+2)& (0+255),c
  2266  0006DA  5030               	movf	??_main+1,w,c
  2267  0006DC  0A80               	xorlw	128
  2268  0006DE  5831               	subwfb	(??_main+2)& (0+255),w,c
  2269  0006E0  A0D8               	btfss	status,0,c
  2270  0006E2  D7BB               	goto	l4325
  2271                           
  2272                           ; BSR set to: 1
  2273                           ;main.c: 172: Lcd_Clear();
  2274                           
  2275                           ; BSR set to: 1
  2276  0006E4  ECD7  F00C         	call	_Lcd_Clear	;wreg free
  2277                           
  2278                           ;main.c: 173: menu_progress_bar(100);
  2279  0006E8  0E00               	movlw	0
  2280  0006EA  6E26               	movwf	menu_progress_bar@load_time_ms+1,c
  2281  0006EC  0E64               	movlw	100
  2282  0006EE  6E25               	movwf	menu_progress_bar@load_time_ms,c
  2283  0006F0  EC0F  F009         	call	_menu_progress_bar	;wreg free
  2284                           
  2285                           ;main.c: 177: load_reg_map();
  2286  0006F4  EC32  F00A         	call	_load_reg_map	;wreg free
  2287  0006F8                     l4337:
  2288  0006F8  0E30               	movlw	48
  2289  0006FA  0101               	movlb	1	; () banked
  2290  0006FC  1920               	xorwf	_i2c_w_reg& (0+255),w,b	;volatile
  2291  0006FE  B4D8               	btfsc	status,2,c
  2292  000700  D7FB               	goto	l4337
  2293                           
  2294                           ; BSR set to: 1
  2295                           ;main.c: 181: }
  2296                           ;main.c: 182: INTCONbits.GIE_GIEH = 0;
  2297  000702  9EF2               	bcf	intcon,7,c	;volatile
  2298                           
  2299                           ; BSR set to: 1
  2300                           ;main.c: 183: for (int i = 0; i < 32; i++)
  2301  000704  0E00               	movlw	0
  2302  000706  0101               	movlb	1	; () banked
  2303  000708  6F66               	movwf	(main@i_785+1)& (0+255),b
  2304  00070A  0E00               	movlw	0
  2305  00070C  6F65               	movwf	main@i_785& (0+255),b
  2306                           
  2307                           ; BSR set to: 1
  2308  00070E  0101               	movlb	1	; () banked
  2309  000710  BF66               	btfsc	(main@i_785+1)& (0+255),7,b
  2310  000712  D008               	goto	l4345
  2311  000714  0101               	movlb	1	; () banked
  2312  000716  5166               	movf	(main@i_785+1)& (0+255),w,b
  2313  000718  E119               	bnz	l226
  2314  00071A  0E20               	movlw	32
  2315  00071C  0101               	movlb	1	; () banked
  2316  00071E  5D65               	subwf	main@i_785& (0+255),w,b
  2317  000720  B0D8               	btfsc	status,0,c
  2318  000722  D014               	goto	l226
  2319  000724                     l4345:
  2320                           
  2321                           ; BSR set to: 1
  2322                           ;main.c: 184: i2c_r_reg[i] = '0';
  2323  000724  0E00               	movlw	low _i2c_r_reg
  2324  000726  0101               	movlb	1	; () banked
  2325  000728  2565               	addwf	main@i_785& (0+255),w,b
  2326  00072A  6ED9               	movwf	fsr2l,c
  2327  00072C  0E01               	movlw	high _i2c_r_reg
  2328  00072E  0101               	movlb	1	; () banked
  2329  000730  2166               	addwfc	(main@i_785+1)& (0+255),w,b
  2330  000732  6EDA               	movwf	fsr2h,c
  2331  000734  0E30               	movlw	48
  2332  000736  6EDF               	movwf	indf2,c
  2333                           
  2334                           ; BSR set to: 1
  2335  000738  0101               	movlb	1	; () banked
  2336  00073A  4B65               	infsnz	main@i_785& (0+255),f,b
  2337  00073C  2B66               	incf	(main@i_785+1)& (0+255),f,b
  2338                           
  2339                           ; BSR set to: 1
  2340  00073E  0101               	movlb	1	; () banked
  2341  000740  BF66               	btfsc	(main@i_785+1)& (0+255),7,b
  2342  000742  D7F0               	goto	l4345
  2343  000744  0101               	movlb	1	; () banked
  2344  000746  5166               	movf	(main@i_785+1)& (0+255),w,b
  2345  000748  E101               	bnz	u4180
  2346  00074A  D7E7               	goto	L2
  2347  00074C                     u4180:
  2348  00074C                     l226:
  2349                           
  2350                           ; BSR set to: 1
  2351                           ;main.c: 185: unsigned char credential_state = i2c_w_reg[0];
  2352  00074C  C120  F156         	movff	_i2c_w_reg,main@credential_state	;volatile
  2353                           
  2354                           ; BSR set to: 1
  2355                           ;main.c: 186: if (credential_state == 0xA1)
  2356  000750  0EA1               	movlw	161
  2357  000752  0101               	movlb	1	; () banked
  2358  000754  1956               	xorwf	main@credential_state& (0+255),w,b
  2359  000756  A4D8               	btfss	status,2,c
  2360  000758  D031               	goto	l4369
  2361                           
  2362                           ; BSR set to: 1
  2363                           ;main.c: 187: {
  2364                           ;main.c: 188: Lcd_Set_Cursor(1,1);
  2365  00075A  0E01               	movlw	1
  2366  00075C  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2367  00075E  0E01               	movlw	1
  2368  000760  EC08  F00C         	call	_Lcd_Set_Cursor
  2369                           
  2370                           ;main.c: 189: Lcd_Write_String("[Access Granted]");
  2371  000764  0ED1               	movlw	low STR_7
  2372  000766  6E1C               	movwf	Lcd_Write_String@a,c
  2373  000768  0E7F               	movlw	high STR_7
  2374  00076A  6E1D               	movwf	Lcd_Write_String@a+1,c
  2375  00076C  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  2376                           
  2377                           ;main.c: 190: Lcd_Set_Cursor(2,1);
  2378  000770  0E01               	movlw	1
  2379  000772  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2380  000774  0E02               	movlw	2
  2381  000776  EC08  F00C         	call	_Lcd_Set_Cursor
  2382                           
  2383                           ;main.c: 191: Lcd_Write_String("    [Welcome]   ");
  2384  00077A  0E05               	movlw	low STR_8
  2385  00077C  6E1C               	movwf	Lcd_Write_String@a,c
  2386  00077E  0E7F               	movlw	high STR_8
  2387  000780  6E1D               	movwf	Lcd_Write_String@a+1,c
  2388  000782  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  2389                           
  2390                           ;main.c: 192: for (int i = 0; i < 100; i++)
  2391  000786  0E00               	movlw	0
  2392  000788  0101               	movlb	1	; () banked
  2393  00078A  6F5A               	movwf	(main@i_789+1)& (0+255),b
  2394  00078C  0E00               	movlw	0
  2395  00078E  6F59               	movwf	main@i_789& (0+255),b
  2396  000790                     
  2397                           ; BSR set to: 1
  2398  000790  0101               	movlb	1	; () banked
  2399  000792  BF5A               	btfsc	(main@i_789+1)& (0+255),7,b
  2400  000794  D008               	goto	l4365
  2401  000796  0101               	movlb	1	; () banked
  2402  000798  515A               	movf	(main@i_789+1)& (0+255),w,b
  2403  00079A  E177               	bnz	l230
  2404  00079C  0E64               	movlw	100
  2405  00079E  0101               	movlb	1	; () banked
  2406  0007A0  5D59               	subwf	main@i_789& (0+255),w,b
  2407  0007A2  B0D8               	btfsc	status,0,c
  2408  0007A4  D072               	goto	l230
  2409  0007A6                     l4365:
  2410                           
  2411                           ; BSR set to: 1
  2412                           ;main.c: 193: {
  2413                           ;main.c: 194: _delay((unsigned long)((10)*(16000000/4000.0)));
  2414  0007A6  0E34               	movlw	52
  2415  0007A8  6E2F               	movwf	??_main& (0+255),c
  2416  0007AA  0EF2               	movlw	242
  2417  0007AC                     u4387:
  2418  0007AC  2EE8               	decfsz	wreg,f,c
  2419  0007AE  D7FE               	goto	u4387
  2420  0007B0  2E2F               	decfsz	??_main& (0+255),f,c
  2421  0007B2  D7FC               	goto	u4387
  2422  0007B4  0101               	movlb	1	; () banked
  2423  0007B6  4B59               	infsnz	main@i_789& (0+255),f,b
  2424  0007B8  2B5A               	incf	(main@i_789+1)& (0+255),f,b
  2425  0007BA  D7EA               	goto	L7
  2426  0007BC                     l4369:
  2427                           
  2428                           ; BSR set to: 1
  2429                           ;main.c: 197: else if (credential_state == 0xA0)
  2430  0007BC  0EA0               	movlw	160
  2431  0007BE  0101               	movlb	1	; () banked
  2432  0007C0  1956               	xorwf	main@credential_state& (0+255),w,b
  2433  0007C2  A4D8               	btfss	status,2,c
  2434  0007C4  D031               	goto	l4387
  2435                           
  2436                           ; BSR set to: 1
  2437                           ;main.c: 198: {
  2438                           ;main.c: 199: Lcd_Set_Cursor(1,1);
  2439  0007C6  0E01               	movlw	1
  2440  0007C8  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2441  0007CA  0E01               	movlw	1
  2442  0007CC  EC08  F00C         	call	_Lcd_Set_Cursor
  2443                           
  2444                           ;main.c: 200: Lcd_Write_String("[Access  Denied]");
  2445  0007D0  0EC0               	movlw	low STR_9
  2446  0007D2  6E1C               	movwf	Lcd_Write_String@a,c
  2447  0007D4  0E7F               	movlw	high STR_9
  2448  0007D6  6E1D               	movwf	Lcd_Write_String@a+1,c
  2449  0007D8  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  2450                           
  2451                           ;main.c: 201: Lcd_Set_Cursor(2,1);
  2452  0007DC  0E01               	movlw	1
  2453  0007DE  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2454  0007E0  0E02               	movlw	2
  2455  0007E2  EC08  F00C         	call	_Lcd_Set_Cursor
  2456                           
  2457                           ;main.c: 202: Lcd_Write_String("    [ Retry ]   ");
  2458  0007E6  0EF4               	movlw	low STR_10
  2459  0007E8  6E1C               	movwf	Lcd_Write_String@a,c
  2460  0007EA  0E7E               	movlw	high STR_10
  2461  0007EC  6E1D               	movwf	Lcd_Write_String@a+1,c
  2462  0007EE  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  2463                           
  2464                           ;main.c: 203: for (int i = 0; i < 100; i++)
  2465  0007F2  0E00               	movlw	0
  2466  0007F4  0101               	movlb	1	; () banked
  2467  0007F6  6F5C               	movwf	(main@i_792+1)& (0+255),b
  2468  0007F8  0E00               	movlw	0
  2469  0007FA  6F5B               	movwf	main@i_792& (0+255),b
  2470  0007FC                     l4379:
  2471                           
  2472                           ; BSR set to: 1
  2473  0007FC  0101               	movlb	1	; () banked
  2474  0007FE  BF5C               	btfsc	(main@i_792+1)& (0+255),7,b
  2475  000800  D008               	goto	l4383
  2476  000802  0101               	movlb	1	; () banked
  2477  000804  515C               	movf	(main@i_792+1)& (0+255),w,b
  2478  000806  E141               	bnz	l230
  2479  000808  0E64               	movlw	100
  2480  00080A  0101               	movlb	1	; () banked
  2481  00080C  5D5B               	subwf	main@i_792& (0+255),w,b
  2482  00080E  B0D8               	btfsc	status,0,c
  2483  000810  D03C               	goto	l230
  2484  000812                     l4383:
  2485                           
  2486                           ; BSR set to: 1
  2487                           ;main.c: 204: {
  2488                           ;main.c: 205: _delay((unsigned long)((10)*(16000000/4000.0)));
  2489  000812  0E34               	movlw	52
  2490  000814  6E2F               	movwf	??_main& (0+255),c
  2491  000816  0EF2               	movlw	242
  2492  000818                     u4397:
  2493  000818  2EE8               	decfsz	wreg,f,c
  2494  00081A  D7FE               	goto	u4397
  2495  00081C  2E2F               	decfsz	??_main& (0+255),f,c
  2496  00081E  D7FC               	goto	u4397
  2497  000820  0101               	movlb	1	; () banked
  2498  000822  4B5B               	infsnz	main@i_792& (0+255),f,b
  2499  000824  2B5C               	incf	(main@i_792+1)& (0+255),f,b
  2500  000826  D7EA               	goto	l4379
  2501  000828                     l4387:
  2502                           
  2503                           ; BSR set to: 1
  2504                           ;main.c: 208: else
  2505                           ;main.c: 209: {
  2506                           ;main.c: 210: Lcd_Set_Cursor(1,1);
  2507  000828  0E01               	movlw	1
  2508  00082A  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2509  00082C  0E01               	movlw	1
  2510  00082E  EC08  F00C         	call	_Lcd_Set_Cursor
  2511                           
  2512                           ;main.c: 211: Lcd_Write_String("[ System Error ]");
  2513  000832  0E9E               	movlw	low STR_11
  2514  000834  6E1C               	movwf	Lcd_Write_String@a,c
  2515  000836  0E7F               	movlw	high STR_11
  2516  000838  6E1D               	movwf	Lcd_Write_String@a+1,c
  2517  00083A  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  2518                           
  2519                           ;main.c: 212: Lcd_Set_Cursor(2,1);
  2520  00083E  0E01               	movlw	1
  2521  000840  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2522  000842  0E02               	movlw	2
  2523  000844  EC08  F00C         	call	_Lcd_Set_Cursor
  2524                           
  2525                           ;main.c: 213: Lcd_Write_String("    [ Retry ]   ");
  2526  000848  0EF4               	movlw	low STR_10
  2527  00084A  6E1C               	movwf	Lcd_Write_String@a,c
  2528  00084C  0E7E               	movlw	high STR_10
  2529  00084E  6E1D               	movwf	Lcd_Write_String@a+1,c
  2530  000850  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  2531                           
  2532                           ;main.c: 214: for (int i = 0; i < 100; i++)
  2533  000854  0E00               	movlw	0
  2534  000856  0101               	movlb	1	; () banked
  2535  000858  6F5E               	movwf	(main@i_795+1)& (0+255),b
  2536  00085A  0E00               	movlw	0
  2537  00085C  6F5D               	movwf	main@i_795& (0+255),b
  2538  00085E                     l4395:
  2539                           
  2540                           ; BSR set to: 1
  2541  00085E  0101               	movlb	1	; () banked
  2542  000860  BF5E               	btfsc	(main@i_795+1)& (0+255),7,b
  2543  000862  D008               	goto	l4399
  2544  000864  0101               	movlb	1	; () banked
  2545  000866  515E               	movf	(main@i_795+1)& (0+255),w,b
  2546  000868  E110               	bnz	l230
  2547  00086A  0E64               	movlw	100
  2548  00086C  0101               	movlb	1	; () banked
  2549  00086E  5D5D               	subwf	main@i_795& (0+255),w,b
  2550  000870  B0D8               	btfsc	status,0,c
  2551  000872  D00B               	goto	l230
  2552  000874                     l4399:
  2553                           
  2554                           ; BSR set to: 1
  2555                           ;main.c: 215: {
  2556                           ;main.c: 216: _delay((unsigned long)((10)*(16000000/4000.0)));
  2557  000874  0E34               	movlw	52
  2558  000876  6E2F               	movwf	??_main& (0+255),c
  2559  000878  0EF2               	movlw	242
  2560  00087A                     u4407:
  2561  00087A  2EE8               	decfsz	wreg,f,c
  2562  00087C  D7FE               	goto	u4407
  2563  00087E  2E2F               	decfsz	??_main& (0+255),f,c
  2564  000880  D7FC               	goto	u4407
  2565  000882  0101               	movlb	1	; () banked
  2566  000884  4B5D               	infsnz	main@i_795& (0+255),f,b
  2567  000886  2B5E               	incf	(main@i_795+1)& (0+255),f,b
  2568  000888  D7EA               	goto	l4395
  2569  00088A                     l230:
  2570                           
  2571                           ; BSR set to: 1
  2572                           ;main.c: 217: }
  2573                           ;main.c: 218: }
  2574                           ;main.c: 219: INTCONbits.GIE_GIEH = 1;
  2575  00088A  8EF2               	bsf	intcon,7,c	;volatile
  2576  00088C                     l4403:
  2577                           
  2578                           ; BSR set to: 1
  2579  00088C  0100               	movlb	0	; () banked
  2580  00088E  51CD               	movf	_credentials_accepted& (0+255),w,b	;volatile
  2581  000890  B4D8               	btfsc	status,2,c
  2582  000892  D46F               	goto	l4157
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;main.c: 220: }
  2586                           ;main.c: 224: Lcd_Set_Cursor(1,1);
  2587                           
  2588                           ; BSR set to: 0
  2589  000894  0E01               	movlw	1
  2590  000896  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2591  000898  0E01               	movlw	1
  2592  00089A  EC08  F00C         	call	_Lcd_Set_Cursor
  2593                           
  2594                           ;main.c: 225: unsigned char is_leading_zero = 1, n_c = 0;
  2595  00089E  0E01               	movlw	1
  2596  0008A0  0101               	movlb	1	; () banked
  2597  0008A2  6F5F               	movwf	main@is_leading_zero& (0+255),b
  2598                           
  2599                           ; BSR set to: 1
  2600  0008A4  0E00               	movlw	0
  2601  0008A6  0101               	movlb	1	; () banked
  2602  0008A8  6F55               	movwf	main@n_c& (0+255),b
  2603                           
  2604                           ; BSR set to: 1
  2605                           ;main.c: 226: for (int i = 0; i < 9; i++)
  2606  0008AA  0E00               	movlw	0
  2607  0008AC  0101               	movlb	1	; () banked
  2608  0008AE  6F6A               	movwf	(main@i_798+1)& (0+255),b
  2609  0008B0  0E00               	movlw	0
  2610  0008B2  6F69               	movwf	main@i_798& (0+255),b
  2611  0008B4                     l4413:
  2612                           
  2613                           ; BSR set to: 1
  2614  0008B4  0101               	movlb	1	; () banked
  2615  0008B6  BF6A               	btfsc	(main@i_798+1)& (0+255),7,b
  2616  0008B8  D008               	goto	l4417
  2617  0008BA  0101               	movlb	1	; () banked
  2618  0008BC  516A               	movf	(main@i_798+1)& (0+255),w,b
  2619  0008BE  E12A               	bnz	l4435
  2620  0008C0  0E09               	movlw	9
  2621  0008C2  0101               	movlb	1	; () banked
  2622  0008C4  5D69               	subwf	main@i_798& (0+255),w,b
  2623  0008C6  B0D8               	btfsc	status,0,c
  2624  0008C8  D025               	goto	l4435
  2625  0008CA                     l4417:
  2626                           
  2627                           ; BSR set to: 1
  2628                           ;main.c: 227: {
  2629                           ;main.c: 228: if ((current_user[i] == '0')&&(is_leading_zero))
  2630  0008CA  0EC3               	movlw	low _current_user
  2631  0008CC  0101               	movlb	1	; () banked
  2632  0008CE  2569               	addwf	main@i_798& (0+255),w,b
  2633  0008D0  6ED9               	movwf	fsr2l,c
  2634  0008D2  0E00               	movlw	high _current_user
  2635  0008D4  0101               	movlb	1	; () banked
  2636  0008D6  216A               	addwfc	(main@i_798+1)& (0+255),w,b
  2637  0008D8  6EDA               	movwf	fsr2h,c
  2638  0008DA  0E30               	movlw	48
  2639  0008DC  18DE               	xorwf	postinc2,w,c
  2640  0008DE  A4D8               	btfss	status,2,c
  2641  0008E0  D005               	goto	l4425
  2642                           
  2643                           ; BSR set to: 1
  2644  0008E2  0101               	movlb	1	; () banked
  2645  0008E4  515F               	movf	main@is_leading_zero& (0+255),w,b
  2646  0008E6  0101               	movlb	1	; () banked
  2647  0008E8  A4D8               	btfss	status,2,c
  2648  0008EA  D010               	goto	l4431
  2649  0008EC                     l4425:
  2650                           
  2651                           ; BSR set to: 1
  2652                           ;main.c: 230: else
  2653                           ;main.c: 231: {
  2654                           ;main.c: 232: is_leading_zero = 0;
  2655  0008EC  0E00               	movlw	0
  2656  0008EE  0101               	movlb	1	; () banked
  2657  0008F0  6F5F               	movwf	main@is_leading_zero& (0+255),b
  2658                           
  2659                           ; BSR set to: 1
  2660                           ;main.c: 233: n_c++;
  2661  0008F2  0101               	movlb	1	; () banked
  2662  0008F4  2B55               	incf	main@n_c& (0+255),f,b
  2663                           
  2664                           ; BSR set to: 1
  2665                           ;main.c: 234: Lcd_Write_Char(current_user[i]);
  2666  0008F6  0EC3               	movlw	low _current_user
  2667  0008F8  0101               	movlb	1	; () banked
  2668  0008FA  2569               	addwf	main@i_798& (0+255),w,b
  2669  0008FC  6ED9               	movwf	fsr2l,c
  2670  0008FE  0E00               	movlw	high _current_user
  2671  000900  0101               	movlb	1	; () banked
  2672  000902  216A               	addwfc	(main@i_798+1)& (0+255),w,b
  2673  000904  6EDA               	movwf	fsr2h,c
  2674  000906  50DF               	movf	indf2,w,c
  2675  000908  EC50  F00C         	call	_Lcd_Write_Char
  2676  00090C                     l4431:
  2677  00090C  0101               	movlb	1	; () banked
  2678  00090E  4B69               	infsnz	main@i_798& (0+255),f,b
  2679  000910  2B6A               	incf	(main@i_798+1)& (0+255),f,b
  2680  000912  D7D0               	goto	l4413
  2681  000914                     l4435:
  2682                           
  2683                           ; BSR set to: 1
  2684                           ;main.c: 235: }
  2685                           ;main.c: 236: }
  2686                           ;main.c: 237: for (int i = 0; i < 13 - n_c; i++)
  2687  000914  0E00               	movlw	0
  2688  000916  0101               	movlb	1	; () banked
  2689  000918  6F54               	movwf	(main@i_799+1)& (0+255),b
  2690  00091A  0E00               	movlw	0
  2691  00091C  6F53               	movwf	main@i_799& (0+255),b
  2692  00091E  D006               	goto	l4441
  2693  000920                     l4437:
  2694                           
  2695                           ; BSR set to: 1
  2696                           ;main.c: 238: Lcd_Write_Char(' ');
  2697  000920  0E20               	movlw	32
  2698  000922  EC50  F00C         	call	_Lcd_Write_Char
  2699  000926  0101               	movlb	1	; () banked
  2700  000928  4B53               	infsnz	main@i_799& (0+255),f,b
  2701  00092A  2B54               	incf	(main@i_799+1)& (0+255),f,b
  2702  00092C                     l4441:
  2703                           
  2704                           ; BSR set to: 1
  2705  00092C  0101               	movlb	1	; () banked
  2706  00092E  5155               	movf	main@n_c& (0+255),w,b
  2707  000930  6E2F               	movwf	??_main& (0+255),c
  2708  000932  6A30               	clrf	(??_main+1)& (0+255),c
  2709  000934  1E2F               	comf	??_main,f,c
  2710  000936  1E30               	comf	??_main+1,f,c
  2711  000938  4A2F               	infsnz	??_main,f,c
  2712  00093A  2A30               	incf	??_main+1,f,c
  2713  00093C  0E0D               	movlw	13
  2714  00093E  262F               	addwf	??_main,f,c
  2715  000940  0E00               	movlw	0
  2716  000942  2230               	addwfc	??_main+1,f,c
  2717  000944  502F               	movf	??_main,w,c
  2718  000946  0101               	movlb	1	; () banked
  2719  000948  5D53               	subwf	main@i_799& (0+255),w,b
  2720  00094A  0101               	movlb	1	; () banked
  2721  00094C  5154               	movf	(main@i_799+1)& (0+255),w,b
  2722  00094E  0A80               	xorlw	128
  2723  000950  6E31               	movwf	(??_main+2)& (0+255),c
  2724  000952  5030               	movf	??_main+1,w,c
  2725  000954  0A80               	xorlw	128
  2726  000956  5831               	subwfb	(??_main+2)& (0+255),w,c
  2727  000958  A0D8               	btfss	status,0,c
  2728  00095A  D7E2               	goto	l4437
  2729                           
  2730                           ; BSR set to: 1
  2731                           ;main.c: 239: Lcd_Set_Cursor(1,14);
  2732                           
  2733                           ; BSR set to: 1
  2734  00095C  0E0E               	movlw	14
  2735  00095E  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2736  000960  0E01               	movlw	1
  2737  000962  EC08  F00C         	call	_Lcd_Set_Cursor
  2738                           
  2739                           ;main.c: 240: unsigned char a, digits[] = {' '};
  2740  000966  C0B9  F16F         	movff	main@F3695,main@digits
  2741                           
  2742                           ;main.c: 241: a = I2C_ADDR - 0x0F;
  2743  00096A  0100               	movlb	0	; () banked
  2744  00096C  51CE               	movf	_I2C_ADDR& (0+255),w,b
  2745  00096E  0FF1               	addlw	241
  2746  000970  0101               	movlb	1	; () banked
  2747  000972  6F60               	movwf	main@a& (0+255),b
  2748                           
  2749                           ; BSR set to: 1
  2750                           ;main.c: 242: digits[0] = (a / 100);
  2751  000974  C160  F018         	movff	main@a,___awdiv@dividend
  2752  000978  6A19               	clrf	___awdiv@dividend+1,c
  2753  00097A  0E00               	movlw	0
  2754  00097C  6E1B               	movwf	___awdiv@divisor+1,c
  2755  00097E  0E64               	movlw	100
  2756  000980  6E1A               	movwf	___awdiv@divisor,c
  2757  000982  ECC0  F00A         	call	___awdiv	;wreg free
  2758  000986  5018               	movf	?___awdiv,w,c
  2759  000988  0101               	movlb	1	; () banked
  2760  00098A  6F6F               	movwf	main@digits& (0+255),b
  2761                           
  2762                           ; BSR set to: 1
  2763                           ;main.c: 243: digits[1] = (((a-(digits[0]*100))) / 10);
  2764  00098C  0101               	movlb	1	; () banked
  2765  00098E  516F               	movf	main@digits& (0+255),w,b
  2766  000990  0D64               	mullw	100
  2767  000992  1EF3               	comf	prodl,f,c
  2768  000994  1EF4               	comf	prodh,f,c
  2769  000996  4AF3               	infsnz	prodl,f,c
  2770  000998  2AF4               	incf	prodh,f,c
  2771  00099A  0101               	movlb	1	; () banked
  2772  00099C  5160               	movf	main@a& (0+255),w,b
  2773  00099E  24F3               	addwf	prodl,w,c
  2774  0009A0  6E18               	movwf	___awdiv@dividend,c
  2775  0009A2  0E00               	movlw	0
  2776  0009A4  20F4               	addwfc	prodh,w,c
  2777  0009A6  6E19               	movwf	___awdiv@dividend+1,c
  2778  0009A8  0E00               	movlw	0
  2779  0009AA  6E1B               	movwf	___awdiv@divisor+1,c
  2780  0009AC  0E0A               	movlw	10
  2781  0009AE  6E1A               	movwf	___awdiv@divisor,c
  2782  0009B0  ECC0  F00A         	call	___awdiv	;wreg free
  2783  0009B4  5018               	movf	?___awdiv,w,c
  2784  0009B6  0101               	movlb	1	; () banked
  2785  0009B8  6F70               	movwf	(main@digits+1)& (0+255),b
  2786                           
  2787                           ; BSR set to: 1
  2788                           ;main.c: 244: digits[2] = (a - (digits[0]*100+digits[1]*10));
  2789  0009BA  0101               	movlb	1	; () banked
  2790  0009BC  5170               	movf	(main@digits+1)& (0+255),w,b
  2791  0009BE  0D0A               	mullw	10
  2792  0009C0  CFF3 F02F          	movff	prodl,??_main
  2793  0009C4  0101               	movlb	1	; () banked
  2794  0009C6  516F               	movf	main@digits& (0+255),w,b
  2795  0009C8  0D64               	mullw	100
  2796  0009CA  50F3               	movf	prodl,w,c
  2797  0009CC  242F               	addwf	??_main,w,c
  2798  0009CE  0800               	sublw	0
  2799  0009D0  0101               	movlb	1	; () banked
  2800  0009D2  2560               	addwf	main@a& (0+255),w,b
  2801  0009D4  0101               	movlb	1	; () banked
  2802  0009D6  6F71               	movwf	(main@digits+2)& (0+255),b
  2803                           
  2804                           ; BSR set to: 1
  2805                           ;main.c: 245: is_leading_zero = 1;
  2806  0009D8  0E01               	movlw	1
  2807  0009DA  0101               	movlb	1	; () banked
  2808  0009DC  6F5F               	movwf	main@is_leading_zero& (0+255),b
  2809                           
  2810                           ; BSR set to: 1
  2811                           ;main.c: 246: for (int i = 0; i < 3; i++)
  2812  0009DE  0E00               	movlw	0
  2813  0009E0  0101               	movlb	1	; () banked
  2814  0009E2  6F6E               	movwf	(main@i_803+1)& (0+255),b
  2815  0009E4  0E00               	movlw	0
  2816  0009E6  6F6D               	movwf	main@i_803& (0+255),b
  2817  0009E8                     l4459:
  2818                           
  2819                           ; BSR set to: 1
  2820  0009E8  0101               	movlb	1	; () banked
  2821  0009EA  BF6E               	btfsc	(main@i_803+1)& (0+255),7,b
  2822  0009EC  D008               	goto	l4463
  2823  0009EE  0101               	movlb	1	; () banked
  2824  0009F0  516E               	movf	(main@i_803+1)& (0+255),w,b
  2825  0009F2  E148               	bnz	l4481
  2826  0009F4  0E03               	movlw	3
  2827  0009F6  0101               	movlb	1	; () banked
  2828  0009F8  5D6D               	subwf	main@i_803& (0+255),w,b
  2829  0009FA  B0D8               	btfsc	status,0,c
  2830  0009FC  D043               	goto	l4481
  2831  0009FE                     l4463:
  2832                           
  2833                           ; BSR set to: 1
  2834                           ;main.c: 247: {
  2835                           ;main.c: 248: digits[i] = c[digits[i]];
  2836  0009FE  0E6F               	movlw	low main@digits
  2837  000A00  0101               	movlb	1	; () banked
  2838  000A02  256D               	addwf	main@i_803& (0+255),w,b
  2839  000A04  6ED9               	movwf	fsr2l,c
  2840  000A06  0E01               	movlw	high main@digits
  2841  000A08  0101               	movlb	1	; () banked
  2842  000A0A  216E               	addwfc	(main@i_803+1)& (0+255),w,b
  2843  000A0C  6EDA               	movwf	fsr2h,c
  2844  000A0E  50DF               	movf	indf2,w,c
  2845  000A10  6E2F               	movwf	??_main& (0+255),c
  2846  000A12  502F               	movf	??_main,w,c
  2847  000A14  0D01               	mullw	1
  2848  000A16  0EA2               	movlw	low _c
  2849  000A18  24F3               	addwf	prodl,w,c
  2850  000A1A  6ED9               	movwf	fsr2l,c
  2851  000A1C  0E00               	movlw	high _c
  2852  000A1E  20F4               	addwfc	prodh,w,c
  2853  000A20  6EDA               	movwf	fsr2h,c
  2854  000A22  0E6F               	movlw	low main@digits
  2855  000A24  0101               	movlb	1	; () banked
  2856  000A26  256D               	addwf	main@i_803& (0+255),w,b
  2857  000A28  6EE1               	movwf	fsr1l,c
  2858  000A2A  0E01               	movlw	high main@digits
  2859  000A2C  0101               	movlb	1	; () banked
  2860  000A2E  216E               	addwfc	(main@i_803+1)& (0+255),w,b
  2861  000A30  6EE2               	movwf	fsr1h,c
  2862  000A32  CFDF FFE7          	movff	indf2,indf1
  2863                           
  2864                           ; BSR set to: 1
  2865                           ;main.c: 249: if ((digits[i] == '0')&&(is_leading_zero))
  2866  000A36  0E6F               	movlw	low main@digits
  2867  000A38  0101               	movlb	1	; () banked
  2868  000A3A  256D               	addwf	main@i_803& (0+255),w,b
  2869  000A3C  6ED9               	movwf	fsr2l,c
  2870  000A3E  0E01               	movlw	high main@digits
  2871  000A40  0101               	movlb	1	; () banked
  2872  000A42  216E               	addwfc	(main@i_803+1)& (0+255),w,b
  2873  000A44  6EDA               	movwf	fsr2h,c
  2874  000A46  0E30               	movlw	48
  2875  000A48  18DE               	xorwf	postinc2,w,c
  2876  000A4A  A4D8               	btfss	status,2,c
  2877  000A4C  D009               	goto	l4473
  2878                           
  2879                           ; BSR set to: 1
  2880  000A4E  0101               	movlb	1	; () banked
  2881  000A50  515F               	movf	main@is_leading_zero& (0+255),w,b
  2882  000A52  0101               	movlb	1	; () banked
  2883  000A54  B4D8               	btfsc	status,2,c
  2884  000A56  D004               	goto	l4473
  2885                           
  2886                           ; BSR set to: 1
  2887                           ;main.c: 250: {
  2888                           ;main.c: 251: Lcd_Write_Char(' ');
  2889  000A58  0E20               	movlw	32
  2890  000A5A  EC50  F00C         	call	_Lcd_Write_Char
  2891                           
  2892                           ;main.c: 253: }
  2893                           
  2894                           ;main.c: 252: continue;
  2895  000A5E  D00E               	goto	l4477
  2896  000A60                     l4473:
  2897                           
  2898                           ;main.c: 254: else
  2899                           ;main.c: 255: {
  2900                           ;main.c: 256: is_leading_zero = 0;
  2901  000A60  0E00               	movlw	0
  2902  000A62  0101               	movlb	1	; () banked
  2903  000A64  6F5F               	movwf	main@is_leading_zero& (0+255),b
  2904                           
  2905                           ; BSR set to: 1
  2906                           ;main.c: 257: Lcd_Write_Char(digits[i]);
  2907  000A66  0E6F               	movlw	low main@digits
  2908  000A68  0101               	movlb	1	; () banked
  2909  000A6A  256D               	addwf	main@i_803& (0+255),w,b
  2910  000A6C  6ED9               	movwf	fsr2l,c
  2911  000A6E  0E01               	movlw	high main@digits
  2912  000A70  0101               	movlb	1	; () banked
  2913  000A72  216E               	addwfc	(main@i_803+1)& (0+255),w,b
  2914  000A74  6EDA               	movwf	fsr2h,c
  2915  000A76  50DF               	movf	indf2,w,c
  2916  000A78  EC50  F00C         	call	_Lcd_Write_Char
  2917  000A7C                     l4477:
  2918  000A7C  0101               	movlb	1	; () banked
  2919  000A7E  4B6D               	infsnz	main@i_803& (0+255),f,b
  2920  000A80  2B6E               	incf	(main@i_803+1)& (0+255),f,b
  2921  000A82  D7B2               	goto	l4459
  2922  000A84                     l4481:
  2923                           
  2924                           ; BSR set to: 1
  2925                           ;main.c: 258: }
  2926                           ;main.c: 259: }
  2927                           ;main.c: 260: Lcd_Set_Cursor(2,1);
  2928  000A84  0E01               	movlw	1
  2929  000A86  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2930  000A88  0E02               	movlw	2
  2931  000A8A  EC08  F00C         	call	_Lcd_Set_Cursor
  2932                           
  2933                           ;main.c: 261: Lcd_Write_String("                ");
  2934  000A8E  0EC1               	movlw	low STR_2
  2935  000A90  6E1C               	movwf	Lcd_Write_String@a,c
  2936  000A92  0E7E               	movlw	high STR_2
  2937  000A94  6E1D               	movwf	Lcd_Write_String@a+1,c
  2938  000A96  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  2939  000A9A  EF92  F000         	goto	l4145
  2940  000A9E                     __end_of_main:
  2941                           	opt stack 0
  2942                           tblptru	equ	0xFF8
  2943                           tblptrh	equ	0xFF7
  2944                           tblptrl	equ	0xFF6
  2945                           tablat	equ	0xFF5
  2946                           prodh	equ	0xFF4
  2947                           prodl	equ	0xFF3
  2948                           intcon	equ	0xFF2
  2949                           postinc0	equ	0xFEE
  2950                           wreg	equ	0xFE8
  2951                           indf1	equ	0xFE7
  2952                           postdec1	equ	0xFE5
  2953                           plusw1	equ	0xFE3
  2954                           fsr1h	equ	0xFE2
  2955                           fsr1l	equ	0xFE1
  2956                           indf2	equ	0xFDF
  2957                           postinc2	equ	0xFDE
  2958                           plusw2	equ	0xFDB
  2959                           fsr2h	equ	0xFDA
  2960                           fsr2l	equ	0xFD9
  2961                           status	equ	0xFD8
  2962                           
  2963 ;; *************** function _start_routine *****************
  2964 ;; Defined at:
  2965 ;;		line 404 in file "main.c"
  2966 ;; Parameters:    Size  Location     Type
  2967 ;;		None
  2968 ;; Auto vars:     Size  Location     Type
  2969 ;;  i               2   37[BANK0 ] int 
  2970 ;;  i               2   30[BANK0 ] int 
  2971 ;;  i               2   28[BANK0 ] int 
  2972 ;;  i               2   26[BANK0 ] int 
  2973 ;;  i               2   35[BANK0 ] int 
  2974 ;;  i               2   44[BANK0 ] int 
  2975 ;;  b               3   32[BANK0 ] unsigned char [3]
  2976 ;;  error_msg       2   16[BANK0 ] PTR unsigned char 
  2977 ;;		 -> STR_27(17), STR_26(17), 
  2978 ;;  new_I2C_addr    1   49[BANK0 ] unsigned char 
  2979 ;;  I2C_new_ADDR    3   39[BANK0 ] unsigned char [3]
  2980 ;;  i               2   24[BANK0 ] int 
  2981 ;;  i               2   22[BANK0 ] int 
  2982 ;;  i               2   20[BANK0 ] int 
  2983 ;;  n               1   48[BANK0 ] unsigned char 
  2984 ;;  x               1   47[BANK0 ] unsigned char 
  2985 ;;  dh              1   46[BANK0 ] unsigned char 
  2986 ;;  dt              1   43[BANK0 ] unsigned char 
  2987 ;;  a               1   42[BANK0 ] unsigned char 
  2988 ;;  v               1   19[BANK0 ] unsigned char 
  2989 ;;  d1              1   18[BANK0 ] unsigned char 
  2990 ;;  l               1   15[BANK0 ] unsigned char 
  2991 ;;  h               1   14[BANK0 ] unsigned char 
  2992 ;; Return value:  Size  Location     Type
  2993 ;;                  1    wreg      void 
  2994 ;; Registers used:
  2995 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2996 ;; Tracked objects:
  2997 ;;		On entry : 0/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3001 ;;      Params:         0       0       0       0       0       0       0
  3002 ;;      Locals:         0      36       0       0       0       0       0
  3003 ;;      Temps:          4       0       0       0       0       0       0
  3004 ;;      Totals:         4      36       0       0       0       0       0
  3005 ;;Total ram usage:       40 bytes
  3006 ;; Hardware stack levels used:    1
  3007 ;; Hardware stack levels required when called:    6
  3008 ;; This function calls:
  3009 ;;		_Eeprom_Write_Byte
  3010 ;;		_Lcd_Clear
  3011 ;;		_Lcd_Set_Cursor
  3012 ;;		_Lcd_Write_Char
  3013 ;;		_Lcd_Write_String
  3014 ;;		___awdiv
  3015 ;;		_latch_keypad
  3016 ;;		_menu_progress_bar
  3017 ;;		_read_keypad
  3018 ;; This function is called by:
  3019 ;;		_main
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           	psect	text1
  3024  000A9E                     __ptext1:
  3025                           	opt stack 0
  3026  000A9E                     _start_routine:
  3027                           	opt stack 24
  3028                           
  3029                           ;main.c: 409: Lcd_Clear();
  3030                           
  3031                           ;incstack = 0
  3032  000A9E  ECD7  F00C         	call	_Lcd_Clear	;wreg free
  3033                           
  3034                           ;main.c: 410: Lcd_Set_Cursor(1, 1);
  3035  000AA2  0E01               	movlw	1
  3036  000AA4  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3037  000AA6  0E01               	movlw	1
  3038  000AA8  EC08  F00C         	call	_Lcd_Set_Cursor
  3039                           
  3040                           ;main.c: 411: Lcd_Write_String("   [ Aditum ]   ");
  3041  000AAC  0EE3               	movlw	low STR_14
  3042  000AAE  6E1C               	movwf	Lcd_Write_String@a,c
  3043  000AB0  0E7E               	movlw	high STR_14
  3044  000AB2  6E1D               	movwf	Lcd_Write_String@a+1,c
  3045  000AB4  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  3046                           
  3047                           ;main.c: 412: for (int i = 0; i < 20; i++)
  3048  000AB8  0E00               	movlw	0
  3049  000ABA  0100               	movlb	0	; () banked
  3050  000ABC  6F75               	movwf	(start_routine@i+1)& (0+255),b
  3051  000ABE  0E00               	movlw	0
  3052  000AC0  6F74               	movwf	start_routine@i& (0+255),b
  3053  000AC2                     l3759:
  3054                           
  3055                           ; BSR set to: 0
  3056  000AC2  0100               	movlb	0	; () banked
  3057  000AC4  BF75               	btfsc	(start_routine@i+1)& (0+255),7,b
  3058  000AC6  D008               	goto	l3763
  3059  000AC8  0100               	movlb	0	; () banked
  3060  000ACA  5175               	movf	(start_routine@i+1)& (0+255),w,b
  3061  000ACC  E112               	bnz	l3767
  3062  000ACE  0E14               	movlw	20
  3063  000AD0  0100               	movlb	0	; () banked
  3064  000AD2  5D74               	subwf	start_routine@i& (0+255),w,b
  3065  000AD4  B0D8               	btfsc	status,0,c
  3066  000AD6  D00D               	goto	l3767
  3067  000AD8                     l3763:
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;main.c: 413: _delay((unsigned long)((20)*(16000000/4000.0)));
  3071  000AD8  0E68               	movlw	104
  3072  000ADA  6E2B               	movwf	??_start_routine& (0+255),c
  3073  000ADC  0EE4               	movlw	228
  3074  000ADE                     u4417:
  3075  000ADE  2EE8               	decfsz	wreg,f,c
  3076  000AE0  D7FE               	goto	u4417
  3077  000AE2  2E2B               	decfsz	??_start_routine& (0+255),f,c
  3078  000AE4  D7FC               	goto	u4417
  3079  000AE6  F000 F000          	nop2	
  3080  000AEA  0100               	movlb	0	; () banked
  3081  000AEC  4B74               	infsnz	start_routine@i& (0+255),f,b
  3082  000AEE  2B75               	incf	(start_routine@i+1)& (0+255),f,b
  3083  000AF0  D7E8               	goto	l3759
  3084  000AF2                     l3767:
  3085                           
  3086                           ; BSR set to: 0
  3087                           ;main.c: 414: Lcd_Set_Cursor(2,1);
  3088  000AF2  0E01               	movlw	1
  3089  000AF4  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3090  000AF6  0E02               	movlw	2
  3091  000AF8  EC08  F00C         	call	_Lcd_Set_Cursor
  3092                           
  3093                           ;main.c: 415: Lcd_Write_String("Rev ");
  3094  000AFC  0EF3               	movlw	low STR_15
  3095  000AFE  6E1C               	movwf	Lcd_Write_String@a,c
  3096  000B00  0E7F               	movlw	high STR_15
  3097  000B02  6E1D               	movwf	Lcd_Write_String@a+1,c
  3098  000B04  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  3099                           
  3100                           ;main.c: 416: Lcd_Write_String("1.0.0");
  3101  000B08  0EED               	movlw	low STR_16
  3102  000B0A  6E1C               	movwf	Lcd_Write_String@a,c
  3103  000B0C  0E7F               	movlw	high STR_16
  3104  000B0E  6E1D               	movwf	Lcd_Write_String@a+1,c
  3105  000B10  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  3106                           
  3107                           ;main.c: 417: for (int i = 0; i < 50; i++)
  3108  000B14  0E00               	movlw	0
  3109  000B16  0100               	movlb	0	; () banked
  3110  000B18  6F77               	movwf	(start_routine@i_873+1)& (0+255),b
  3111  000B1A  0E00               	movlw	0
  3112  000B1C  6F76               	movwf	start_routine@i_873& (0+255),b
  3113  000B1E                     l3775:
  3114                           
  3115                           ; BSR set to: 0
  3116  000B1E  0100               	movlb	0	; () banked
  3117  000B20  BF77               	btfsc	(start_routine@i_873+1)& (0+255),7,b
  3118  000B22  D008               	goto	l3779
  3119  000B24  0100               	movlb	0	; () banked
  3120  000B26  5177               	movf	(start_routine@i_873+1)& (0+255),w,b
  3121  000B28  E112               	bnz	l3783
  3122  000B2A  0E32               	movlw	50
  3123  000B2C  0100               	movlb	0	; () banked
  3124  000B2E  5D76               	subwf	start_routine@i_873& (0+255),w,b
  3125  000B30  B0D8               	btfsc	status,0,c
  3126  000B32  D00D               	goto	l3783
  3127  000B34                     l3779:
  3128                           
  3129                           ; BSR set to: 0
  3130                           ;main.c: 418: _delay((unsigned long)((20)*(16000000/4000.0)));
  3131  000B34  0E68               	movlw	104
  3132  000B36  6E2B               	movwf	??_start_routine& (0+255),c
  3133  000B38  0EE4               	movlw	228
  3134  000B3A                     u4427:
  3135  000B3A  2EE8               	decfsz	wreg,f,c
  3136  000B3C  D7FE               	goto	u4427
  3137  000B3E  2E2B               	decfsz	??_start_routine& (0+255),f,c
  3138  000B40  D7FC               	goto	u4427
  3139  000B42  F000 F000          	nop2	
  3140  000B46  0100               	movlb	0	; () banked
  3141  000B48  4B76               	infsnz	start_routine@i_873& (0+255),f,b
  3142  000B4A  2B77               	incf	(start_routine@i_873+1)& (0+255),f,b
  3143  000B4C  D7E8               	goto	l3775
  3144  000B4E                     l3783:
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;main.c: 419: Lcd_Set_Cursor(2,1);
  3148  000B4E  0E01               	movlw	1
  3149  000B50  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3150  000B52  0E02               	movlw	2
  3151  000B54  EC08  F00C         	call	_Lcd_Set_Cursor
  3152                           
  3153                           ;main.c: 420: Lcd_Write_String("Device ID ");
  3154  000B58  0EE2               	movlw	low STR_17
  3155  000B5A  6E1C               	movwf	Lcd_Write_String@a,c
  3156  000B5C  0E7F               	movlw	high STR_17
  3157  000B5E  6E1D               	movwf	Lcd_Write_String@a+1,c
  3158  000B60  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  3159                           
  3160                           ;main.c: 421: unsigned char a, h, l, dh, dt, d1;
  3161                           ;main.c: 422: if (I2C_ADDR != 0)
  3162  000B64  0100               	movlb	0	; () banked
  3163  000B66  51CE               	movf	_I2C_ADDR& (0+255),w,b
  3164  000B68  B4D8               	btfsc	status,2,c
  3165  000B6A  D004               	goto	l3791
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;main.c: 423: a = I2C_ADDR - 0x0F;
  3169  000B6C  0100               	movlb	0	; () banked
  3170  000B6E  51CE               	movf	_I2C_ADDR& (0+255),w,b
  3171  000B70  0FF1               	addlw	241
  3172  000B72  D001               	goto	L4
  3173  000B74                     l3791:
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;main.c: 424: else
  3177                           ;main.c: 425: a = 0;
  3178  000B74  0E00               	movlw	0
  3179  000B76                     L4:
  3180  000B76  0100               	movlb	0	; () banked
  3181  000B78  6F8A               	movwf	start_routine@a& (0+255),b
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;main.c: 427: dh = (a / 100);
  3185                           
  3186                           ; BSR set to: 0
  3187  000B7A  C08A  F018         	movff	start_routine@a,___awdiv@dividend
  3188  000B7E  6A19               	clrf	___awdiv@dividend+1,c
  3189  000B80  0E00               	movlw	0
  3190  000B82  6E1B               	movwf	___awdiv@divisor+1,c
  3191  000B84  0E64               	movlw	100
  3192  000B86  6E1A               	movwf	___awdiv@divisor,c
  3193  000B88  ECC0  F00A         	call	___awdiv	;wreg free
  3194  000B8C  5018               	movf	?___awdiv,w,c
  3195  000B8E  0100               	movlb	0	; () banked
  3196  000B90  6F8E               	movwf	start_routine@dh& (0+255),b
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;main.c: 428: dt = (a - dh*100) / 10;
  3200  000B92  0100               	movlb	0	; () banked
  3201  000B94  518E               	movf	start_routine@dh& (0+255),w,b
  3202  000B96  0D64               	mullw	100
  3203  000B98  1EF3               	comf	prodl,f,c
  3204  000B9A  1EF4               	comf	prodh,f,c
  3205  000B9C  4AF3               	infsnz	prodl,f,c
  3206  000B9E  2AF4               	incf	prodh,f,c
  3207  000BA0  0100               	movlb	0	; () banked
  3208  000BA2  518A               	movf	start_routine@a& (0+255),w,b
  3209  000BA4  24F3               	addwf	prodl,w,c
  3210  000BA6  6E18               	movwf	___awdiv@dividend,c
  3211  000BA8  0E00               	movlw	0
  3212  000BAA  20F4               	addwfc	prodh,w,c
  3213  000BAC  6E19               	movwf	___awdiv@dividend+1,c
  3214  000BAE  0E00               	movlw	0
  3215  000BB0  6E1B               	movwf	___awdiv@divisor+1,c
  3216  000BB2  0E0A               	movlw	10
  3217  000BB4  6E1A               	movwf	___awdiv@divisor,c
  3218  000BB6  ECC0  F00A         	call	___awdiv	;wreg free
  3219  000BBA  5018               	movf	?___awdiv,w,c
  3220  000BBC  0100               	movlb	0	; () banked
  3221  000BBE  6F8B               	movwf	start_routine@dt& (0+255),b
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;main.c: 429: d1 = (a - (dh*100+dt*10));
  3225  000BC0  0100               	movlb	0	; () banked
  3226  000BC2  518B               	movf	start_routine@dt& (0+255),w,b
  3227  000BC4  0D0A               	mullw	10
  3228  000BC6  CFF3 F02B          	movff	prodl,??_start_routine
  3229  000BCA  0100               	movlb	0	; () banked
  3230  000BCC  518E               	movf	start_routine@dh& (0+255),w,b
  3231  000BCE  0D64               	mullw	100
  3232  000BD0  50F3               	movf	prodl,w,c
  3233  000BD2  242B               	addwf	??_start_routine,w,c
  3234  000BD4  0800               	sublw	0
  3235  000BD6  0100               	movlb	0	; () banked
  3236  000BD8  258A               	addwf	start_routine@a& (0+255),w,b
  3237  000BDA  0100               	movlb	0	; () banked
  3238  000BDC  6F72               	movwf	start_routine@d1& (0+255),b
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;main.c: 430: Lcd_Write_Char(c[dh]);
  3242  000BDE  0100               	movlb	0	; () banked
  3243  000BE0  518E               	movf	start_routine@dh& (0+255),w,b
  3244  000BE2  0D01               	mullw	1
  3245  000BE4  0EA2               	movlw	low _c
  3246  000BE6  24F3               	addwf	prodl,w,c
  3247  000BE8  6ED9               	movwf	fsr2l,c
  3248  000BEA  0E00               	movlw	high _c
  3249  000BEC  20F4               	addwfc	prodh,w,c
  3250  000BEE  6EDA               	movwf	fsr2h,c
  3251  000BF0  50DF               	movf	indf2,w,c
  3252  000BF2  EC50  F00C         	call	_Lcd_Write_Char
  3253                           
  3254                           ;main.c: 431: Lcd_Write_Char(c[dt]);
  3255  000BF6  0100               	movlb	0	; () banked
  3256  000BF8  518B               	movf	start_routine@dt& (0+255),w,b
  3257  000BFA  0D01               	mullw	1
  3258  000BFC  0EA2               	movlw	low _c
  3259  000BFE  24F3               	addwf	prodl,w,c
  3260  000C00  6ED9               	movwf	fsr2l,c
  3261  000C02  0E00               	movlw	high _c
  3262  000C04  20F4               	addwfc	prodh,w,c
  3263  000C06  6EDA               	movwf	fsr2h,c
  3264  000C08  50DF               	movf	indf2,w,c
  3265  000C0A  EC50  F00C         	call	_Lcd_Write_Char
  3266                           
  3267                           ;main.c: 432: Lcd_Write_Char(c[d1]);
  3268  000C0E  0100               	movlb	0	; () banked
  3269  000C10  5172               	movf	start_routine@d1& (0+255),w,b
  3270  000C12  0D01               	mullw	1
  3271  000C14  0EA2               	movlw	low _c
  3272  000C16  24F3               	addwf	prodl,w,c
  3273  000C18  6ED9               	movwf	fsr2l,c
  3274  000C1A  0E00               	movlw	high _c
  3275  000C1C  20F4               	addwfc	prodh,w,c
  3276  000C1E  6EDA               	movwf	fsr2h,c
  3277  000C20  50DF               	movf	indf2,w,c
  3278  000C22  EC50  F00C         	call	_Lcd_Write_Char
  3279                           
  3280                           ;main.c: 433: Lcd_Write_Char('|');
  3281  000C26  0E7C               	movlw	124
  3282  000C28  EC50  F00C         	call	_Lcd_Write_Char
  3283                           
  3284                           ;main.c: 434: Lcd_Write_Char(hx[I2C_ADDR/16]);
  3285  000C2C  C0CE  F018         	movff	_I2C_ADDR,___awdiv@dividend
  3286  000C30  6A19               	clrf	___awdiv@dividend+1,c
  3287  000C32  0E00               	movlw	0
  3288  000C34  6E1B               	movwf	___awdiv@divisor+1,c
  3289  000C36  0E10               	movlw	16
  3290  000C38  6E1A               	movwf	___awdiv@divisor,c
  3291  000C3A  ECC0  F00A         	call	___awdiv	;wreg free
  3292  000C3E  0E92               	movlw	low _hx
  3293  000C40  2418               	addwf	?___awdiv,w,c
  3294  000C42  6ED9               	movwf	fsr2l,c
  3295  000C44  0E00               	movlw	high _hx
  3296  000C46  2019               	addwfc	?___awdiv+1,w,c
  3297  000C48  6EDA               	movwf	fsr2h,c
  3298  000C4A  50DF               	movf	indf2,w,c
  3299  000C4C  EC50  F00C         	call	_Lcd_Write_Char
  3300                           
  3301                           ;main.c: 435: Lcd_Write_Char(hx[I2C_ADDR - (I2C_ADDR/16)*16]);
  3302  000C50  C0CE  F018         	movff	_I2C_ADDR,___awdiv@dividend
  3303  000C54  6A19               	clrf	___awdiv@dividend+1,c
  3304  000C56  0E00               	movlw	0
  3305  000C58  6E1B               	movwf	___awdiv@divisor+1,c
  3306  000C5A  0E10               	movlw	16
  3307  000C5C  6E1A               	movwf	___awdiv@divisor,c
  3308  000C5E  ECC0  F00A         	call	___awdiv	;wreg free
  3309  000C62  3A18               	swapf	?___awdiv,f,c
  3310  000C64  3A19               	swapf	?___awdiv+1,f,c
  3311  000C66  0EF0               	movlw	240
  3312  000C68  1619               	andwf	?___awdiv+1,f,c
  3313  000C6A  5018               	movf	?___awdiv,w,c
  3314  000C6C  0B0F               	andlw	15
  3315  000C6E  1219               	iorwf	?___awdiv+1,f,c
  3316  000C70  0EF0               	movlw	240
  3317  000C72  1618               	andwf	?___awdiv,f,c
  3318  000C74  1E18               	comf	?___awdiv,f,c
  3319  000C76  1E19               	comf	?___awdiv+1,f,c
  3320  000C78  4A18               	infsnz	?___awdiv,f,c
  3321  000C7A  2A19               	incf	?___awdiv+1,f,c
  3322  000C7C  0100               	movlb	0	; () banked
  3323  000C7E  51CE               	movf	_I2C_ADDR& (0+255),w,b
  3324  000C80  6E2B               	movwf	??_start_routine& (0+255),c
  3325  000C82  6A2C               	clrf	(??_start_routine+1)& (0+255),c
  3326  000C84  5018               	movf	?___awdiv,w,c
  3327  000C86  262B               	addwf	??_start_routine,f,c
  3328  000C88  5019               	movf	?___awdiv+1,w,c
  3329  000C8A  222C               	addwfc	??_start_routine+1,f,c
  3330  000C8C  0E92               	movlw	low _hx
  3331  000C8E  242B               	addwf	??_start_routine,w,c
  3332  000C90  6ED9               	movwf	fsr2l,c
  3333  000C92  0E00               	movlw	high _hx
  3334  000C94  202C               	addwfc	??_start_routine+1,w,c
  3335  000C96  6EDA               	movwf	fsr2h,c
  3336  000C98  50DF               	movf	indf2,w,c
  3337  000C9A  EC50  F00C         	call	_Lcd_Write_Char
  3338                           
  3339                           ;main.c: 436: for (int i = 0; i < 40; i++)
  3340  000C9E  0E00               	movlw	0
  3341  000CA0  0100               	movlb	0	; () banked
  3342  000CA2  6F79               	movwf	(start_routine@i_881+1)& (0+255),b
  3343  000CA4  0E00               	movlw	0
  3344  000CA6  6F78               	movwf	start_routine@i_881& (0+255),b
  3345  000CA8                     l3813:
  3346                           
  3347                           ; BSR set to: 0
  3348  000CA8  0100               	movlb	0	; () banked
  3349  000CAA  BF79               	btfsc	(start_routine@i_881+1)& (0+255),7,b
  3350  000CAC  D008               	goto	l3817
  3351  000CAE  0100               	movlb	0	; () banked
  3352  000CB0  5179               	movf	(start_routine@i_881+1)& (0+255),w,b
  3353  000CB2  E112               	bnz	l3821
  3354  000CB4  0E28               	movlw	40
  3355  000CB6  0100               	movlb	0	; () banked
  3356  000CB8  5D78               	subwf	start_routine@i_881& (0+255),w,b
  3357  000CBA  B0D8               	btfsc	status,0,c
  3358  000CBC  D00D               	goto	l3821
  3359  000CBE                     l3817:
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;main.c: 437: _delay((unsigned long)((20)*(16000000/4000.0)));
  3363  000CBE  0E68               	movlw	104
  3364  000CC0  6E2B               	movwf	??_start_routine& (0+255),c
  3365  000CC2  0EE4               	movlw	228
  3366  000CC4                     u4437:
  3367  000CC4  2EE8               	decfsz	wreg,f,c
  3368  000CC6  D7FE               	goto	u4437
  3369  000CC8  2E2B               	decfsz	??_start_routine& (0+255),f,c
  3370  000CCA  D7FC               	goto	u4437
  3371  000CCC  F000 F000          	nop2	
  3372  000CD0  0100               	movlb	0	; () banked
  3373  000CD2  4B78               	infsnz	start_routine@i_881& (0+255),f,b
  3374  000CD4  2B79               	incf	(start_routine@i_881+1)& (0+255),f,b
  3375  000CD6  D7E8               	goto	l3813
  3376  000CD8                     l3821:
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;main.c: 438: Lcd_Clear();
  3380  000CD8  ECD7  F00C         	call	_Lcd_Clear	;wreg free
  3381                           
  3382                           ;main.c: 439: Lcd_Set_Cursor(1, 1);
  3383  000CDC  0E01               	movlw	1
  3384  000CDE  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3385  000CE0  0E01               	movlw	1
  3386  000CE2  EC08  F00C         	call	_Lcd_Set_Cursor
  3387                           
  3388                           ;main.c: 440: Lcd_Write_String("  [  Aditum  ]  ");
  3389  000CE6  0E38               	movlw	low STR_18
  3390  000CE8  6E1C               	movwf	Lcd_Write_String@a,c
  3391  000CEA  0E7F               	movlw	high STR_18
  3392  000CEC  6E1D               	movwf	Lcd_Write_String@a+1,c
  3393  000CEE  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  3394                           
  3395                           ;main.c: 441: menu_progress_bar(700);
  3396  000CF2  0E02               	movlw	2
  3397  000CF4  6E26               	movwf	menu_progress_bar@load_time_ms+1,c
  3398  000CF6  0EBC               	movlw	188
  3399  000CF8  6E25               	movwf	menu_progress_bar@load_time_ms,c
  3400  000CFA  EC0F  F009         	call	_menu_progress_bar	;wreg free
  3401                           
  3402                           ;main.c: 444: unsigned char x, n = 0, v;
  3403  000CFE  0E00               	movlw	0
  3404  000D00  0100               	movlb	0	; () banked
  3405  000D02  6F90               	movwf	start_routine@n& (0+255),b
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;main.c: 445: if (I2C_ADDR == 0x00)
  3409  000D04  0100               	movlb	0	; () banked
  3410  000D06  51CE               	movf	_I2C_ADDR& (0+255),w,b
  3411  000D08  A4D8               	btfss	status,2,c
  3412  000D0A  D285               	goto	l4033
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;main.c: 446: {
  3416                           ;main.c: 447: v = 0;
  3417  000D0C  0E00               	movlw	0
  3418  000D0E  0100               	movlb	0	; () banked
  3419  000D10  6F73               	movwf	start_routine@v& (0+255),b
  3420                           
  3421                           ; BSR set to: 0
  3422                           ;main.c: 448: Lcd_Set_Cursor(1,1);
  3423  000D12  0E01               	movlw	1
  3424  000D14  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3425  000D16  0E01               	movlw	1
  3426  000D18  EC08  F00C         	call	_Lcd_Set_Cursor
  3427                           
  3428                           ;main.c: 449: Lcd_Write_String("Load I2C setup..");
  3429  000D1C  0E7C               	movlw	low STR_19
  3430  000D1E  6E1C               	movwf	Lcd_Write_String@a,c
  3431  000D20  0E7F               	movlw	high STR_19
  3432  000D22  6E1D               	movwf	Lcd_Write_String@a+1,c
  3433  000D24  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  3434                           
  3435                           ;main.c: 450: menu_progress_bar(300);
  3436  000D28  0E01               	movlw	1
  3437  000D2A  6E26               	movwf	menu_progress_bar@load_time_ms+1,c
  3438  000D2C  0E2C               	movlw	44
  3439  000D2E  6E25               	movwf	menu_progress_bar@load_time_ms,c
  3440  000D30  EC0F  F009         	call	_menu_progress_bar	;wreg free
  3441                           
  3442                           ;main.c: 451: unsigned char I2C_new_ADDR[] = {'0', '0', '0'};
  3443  000D34  C0B6  F087         	movff	start_routine@F3721,start_routine@I2C_new_ADDR
  3444  000D38  C0B7  F088         	movff	start_routine@F3721+1,start_routine@I2C_new_ADDR+1
  3445  000D3C  C0B8  F089         	movff	start_routine@F3721+2,start_routine@I2C_new_ADDR+2
  3446                           
  3447                           ;main.c: 452: while (v != 1)
  3448  000D40  D265               	goto	l4031
  3449  000D42                     l3843:
  3450                           
  3451                           ;main.c: 453: {
  3452                           ;main.c: 454: Lcd_Set_Cursor(1,1);
  3453  000D42  0E01               	movlw	1
  3454  000D44  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3455  000D46  0E01               	movlw	1
  3456  000D48  EC08  F00C         	call	_Lcd_Set_Cursor
  3457                           
  3458                           ;main.c: 455: Lcd_Write_String("New Machine ID: ");
  3459  000D4C  0E49               	movlw	low STR_20
  3460  000D4E  6E1C               	movwf	Lcd_Write_String@a,c
  3461  000D50  0E7F               	movlw	high STR_20
  3462  000D52  6E1D               	movwf	Lcd_Write_String@a+1,c
  3463  000D54  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  3464                           
  3465                           ;main.c: 456: Lcd_Set_Cursor(2,1);
  3466  000D58  0E01               	movlw	1
  3467  000D5A  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3468  000D5C  0E02               	movlw	2
  3469  000D5E  EC08  F00C         	call	_Lcd_Set_Cursor
  3470                           
  3471                           ;main.c: 457: Lcd_Write_String("       [001-100]");
  3472  000D62  0EAF               	movlw	low STR_21
  3473  000D64  6E1C               	movwf	Lcd_Write_String@a,c
  3474  000D66  0E7F               	movlw	high STR_21
  3475  000D68  6E1D               	movwf	Lcd_Write_String@a+1,c
  3476  000D6A  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  3477                           
  3478                           ;main.c: 458: Lcd_Set_Cursor(2,1);
  3479  000D6E  0E01               	movlw	1
  3480  000D70  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3481  000D72  0E02               	movlw	2
  3482  000D74  EC08  F00C         	call	_Lcd_Set_Cursor
  3483                           
  3484                           ;main.c: 459: Lcd_Write_Char('_');
  3485  000D78  0E5F               	movlw	95
  3486  000D7A  EC50  F00C         	call	_Lcd_Write_Char
  3487                           
  3488                           ;main.c: 460: while (n < 3)
  3489  000D7E  D081               	goto	l3895
  3490  000D80                     l3853:
  3491                           
  3492                           ;main.c: 461: {
  3493                           ;main.c: 462: x = read_keypad();
  3494  000D80  ECE0  F009         	call	_read_keypad	;wreg free
  3495  000D84  0100               	movlb	0	; () banked
  3496  000D86  6F8F               	movwf	start_routine@x& (0+255),b
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;main.c: 463: if (x != '_')
  3500  000D88  0E5F               	movlw	95
  3501  000D8A  0100               	movlb	0	; () banked
  3502  000D8C  198F               	xorwf	start_routine@x& (0+255),w,b
  3503  000D8E  B4D8               	btfsc	status,2,c
  3504  000D90  D078               	goto	l3895
  3505                           
  3506                           ; BSR set to: 0
  3507                           ;main.c: 464: {
  3508                           ;main.c: 465: if (((x - '#') == 0)&&(n > 0))
  3509  000D92  0EDD               	movlw	221
  3510  000D94  6E2B               	movwf	??_start_routine& (0+255),c
  3511  000D96  0EFF               	movlw	255
  3512  000D98  6E2C               	movwf	(??_start_routine+1)& (0+255),c
  3513  000D9A  0100               	movlb	0	; () banked
  3514  000D9C  518F               	movf	start_routine@x& (0+255),w,b
  3515  000D9E  6E2D               	movwf	(??_start_routine+2)& (0+255),c
  3516  000DA0  6A2E               	clrf	(??_start_routine+3)& (0+255),c
  3517  000DA2  502B               	movf	??_start_routine,w,c
  3518  000DA4  262D               	addwf	??_start_routine+2,f,c
  3519  000DA6  502C               	movf	??_start_routine+1,w,c
  3520  000DA8  222E               	addwfc	??_start_routine+3,f,c
  3521  000DAA  502D               	movf	??_start_routine+2,w,c
  3522  000DAC  102E               	iorwf	??_start_routine+3,w,c
  3523  000DAE  A4D8               	btfss	status,2,c
  3524  000DB0  D02F               	goto	l3877
  3525                           
  3526                           ; BSR set to: 0
  3527  000DB2  0100               	movlb	0	; () banked
  3528  000DB4  5190               	movf	start_routine@n& (0+255),w,b
  3529  000DB6  0100               	movlb	0	; () banked
  3530  000DB8  B4D8               	btfsc	status,2,c
  3531  000DBA  D02A               	goto	l3877
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;main.c: 466: {
  3535                           ;main.c: 467: I2C_new_ADDR[n] = 0;
  3536  000DBC  0100               	movlb	0	; () banked
  3537  000DBE  5190               	movf	start_routine@n& (0+255),w,b
  3538  000DC0  0D01               	mullw	1
  3539  000DC2  0E87               	movlw	low start_routine@I2C_new_ADDR
  3540  000DC4  24F3               	addwf	prodl,w,c
  3541  000DC6  6ED9               	movwf	fsr2l,c
  3542  000DC8  0E00               	movlw	high start_routine@I2C_new_ADDR
  3543  000DCA  20F4               	addwfc	prodh,w,c
  3544  000DCC  6EDA               	movwf	fsr2h,c
  3545  000DCE  0E00               	movlw	0
  3546  000DD0  6EDF               	movwf	indf2,c
  3547                           
  3548                           ; BSR set to: 0
  3549                           ;main.c: 468: Lcd_Set_Cursor(2, n);
  3550  000DD2  C090  F01A         	movff	start_routine@n,Lcd_Set_Cursor@b
  3551  000DD6  0E02               	movlw	2
  3552  000DD8  EC08  F00C         	call	_Lcd_Set_Cursor
  3553                           
  3554                           ;main.c: 469: Lcd_Write_Char('_');
  3555  000DDC  0E5F               	movlw	95
  3556  000DDE  EC50  F00C         	call	_Lcd_Write_Char
  3557                           
  3558                           ;main.c: 470: latch_keypad(&x);
  3559  000DE2  0E8F               	movlw	low start_routine@x
  3560  000DE4  6E18               	movwf	latch_keypad@x,c
  3561  000DE6  0E00               	movlw	high start_routine@x
  3562  000DE8  6E19               	movwf	latch_keypad@x+1,c
  3563  000DEA  EC6C  F00C         	call	_latch_keypad	;wreg free
  3564                           
  3565                           ;main.c: 471: Lcd_Set_Cursor(2, 1 + n);
  3566  000DEE  0100               	movlb	0	; () banked
  3567  000DF0  2990               	incf	start_routine@n& (0+255),w,b
  3568  000DF2  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3569  000DF4  0E02               	movlw	2
  3570  000DF6  EC08  F00C         	call	_Lcd_Set_Cursor
  3571                           
  3572                           ;main.c: 472: Lcd_Write_Char(' ');
  3573  000DFA  0E20               	movlw	32
  3574  000DFC  EC50  F00C         	call	_Lcd_Write_Char
  3575                           
  3576                           ;main.c: 473: Lcd_Set_Cursor(2, n);
  3577  000E00  C090  F01A         	movff	start_routine@n,Lcd_Set_Cursor@b
  3578  000E04  0E02               	movlw	2
  3579  000E06  EC08  F00C         	call	_Lcd_Set_Cursor
  3580                           
  3581                           ;main.c: 474: n--;
  3582  000E0A  0100               	movlb	0	; () banked
  3583  000E0C  0790               	decf	start_routine@n& (0+255),f,b
  3584                           
  3585                           ;main.c: 475: }
  3586  000E0E  D039               	goto	l3895
  3587  000E10                     l3877:
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;main.c: 476: else if ((x - '#') != 0)
  3591  000E10  0EDD               	movlw	221
  3592  000E12  6E2B               	movwf	??_start_routine& (0+255),c
  3593  000E14  0EFF               	movlw	255
  3594  000E16  6E2C               	movwf	(??_start_routine+1)& (0+255),c
  3595  000E18  0100               	movlb	0	; () banked
  3596  000E1A  518F               	movf	start_routine@x& (0+255),w,b
  3597  000E1C  6E2D               	movwf	(??_start_routine+2)& (0+255),c
  3598  000E1E  6A2E               	clrf	(??_start_routine+3)& (0+255),c
  3599  000E20  502B               	movf	??_start_routine,w,c
  3600  000E22  262D               	addwf	??_start_routine+2,f,c
  3601  000E24  502C               	movf	??_start_routine+1,w,c
  3602  000E26  222E               	addwfc	??_start_routine+3,f,c
  3603  000E28  502D               	movf	??_start_routine+2,w,c
  3604  000E2A  102E               	iorwf	??_start_routine+3,w,c
  3605  000E2C  B4D8               	btfsc	status,2,c
  3606  000E2E  D029               	goto	l3895
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;main.c: 477: {
  3610                           ;main.c: 478: if ((x == '*')|(n == 3))
  3611  000E30  0E2A               	movlw	42
  3612  000E32  0100               	movlb	0	; () banked
  3613  000E34  198F               	xorwf	start_routine@x& (0+255),w,b
  3614  000E36  B4D8               	btfsc	status,2,c
  3615  000E38  D028               	goto	l3897
  3616                           
  3617                           ; BSR set to: 0
  3618  000E3A  0E03               	movlw	3
  3619  000E3C  0100               	movlb	0	; () banked
  3620  000E3E  1990               	xorwf	start_routine@n& (0+255),w,b
  3621  000E40  B4D8               	btfsc	status,2,c
  3622  000E42  D023               	goto	l3897
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;main.c: 481: }
  3626                           ;main.c: 482: I2C_new_ADDR[n] = x;
  3627                           
  3628                           ; BSR set to: 0
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;main.c: 479: {
  3632                           ;main.c: 480: break;
  3633  000E44  0100               	movlb	0	; () banked
  3634  000E46  5190               	movf	start_routine@n& (0+255),w,b
  3635  000E48  0D01               	mullw	1
  3636  000E4A  0E87               	movlw	low start_routine@I2C_new_ADDR
  3637  000E4C  24F3               	addwf	prodl,w,c
  3638  000E4E  6ED9               	movwf	fsr2l,c
  3639  000E50  0E00               	movlw	high start_routine@I2C_new_ADDR
  3640  000E52  20F4               	addwfc	prodh,w,c
  3641  000E54  6EDA               	movwf	fsr2h,c
  3642  000E56  C08F  FFDF         	movff	start_routine@x,indf2
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;main.c: 483: n++;
  3646  000E5A  0100               	movlb	0	; () banked
  3647  000E5C  2B90               	incf	start_routine@n& (0+255),f,b
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;main.c: 484: Lcd_Set_Cursor(2, n);
  3651  000E5E  C090  F01A         	movff	start_routine@n,Lcd_Set_Cursor@b
  3652  000E62  0E02               	movlw	2
  3653  000E64  EC08  F00C         	call	_Lcd_Set_Cursor
  3654                           
  3655                           ;main.c: 485: Lcd_Write_Char(x);
  3656  000E68  0100               	movlb	0	; () banked
  3657  000E6A  518F               	movf	start_routine@x& (0+255),w,b
  3658  000E6C  EC50  F00C         	call	_Lcd_Write_Char
  3659                           
  3660                           ;main.c: 486: Lcd_Write_Char('_');
  3661  000E70  0E5F               	movlw	95
  3662  000E72  EC50  F00C         	call	_Lcd_Write_Char
  3663                           
  3664                           ;main.c: 487: latch_keypad(&x);
  3665  000E76  0E8F               	movlw	low start_routine@x
  3666  000E78  6E18               	movwf	latch_keypad@x,c
  3667  000E7A  0E00               	movlw	high start_routine@x
  3668  000E7C  6E19               	movwf	latch_keypad@x+1,c
  3669  000E7E  EC6C  F00C         	call	_latch_keypad	;wreg free
  3670  000E82                     l3895:
  3671  000E82  0E02               	movlw	2
  3672  000E84  0100               	movlb	0	; () banked
  3673  000E86  6590               	cpfsgt	start_routine@n& (0+255),b
  3674  000E88  D77B               	goto	l3853
  3675  000E8A                     l3897:
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;main.c: 488: }
  3679                           ;main.c: 489: }
  3680                           ;main.c: 490: }
  3681                           ;main.c: 492: unsigned char new_I2C_address = 0;
  3682  000E8A  0E00               	movlw	0
  3683  000E8C  0100               	movlb	0	; () banked
  3684  000E8E  6F91               	movwf	start_routine@new_I2C_address& (0+255),b
  3685                           
  3686                           ;main.c: 493: unsigned char b[3];
  3687                           ;main.c: 494: for (int i = 0; i < 3; i++)
  3688  000E90  0E00               	movlw	0
  3689  000E92  0100               	movlb	0	; () banked
  3690  000E94  6F8D               	movwf	(start_routine@i_893+1)& (0+255),b
  3691  000E96  0E00               	movlw	0
  3692  000E98  6F8C               	movwf	start_routine@i_893& (0+255),b
  3693  000E9A                     l3899:
  3694                           
  3695                           ; BSR set to: 0
  3696  000E9A  0100               	movlb	0	; () banked
  3697  000E9C  BF8D               	btfsc	(start_routine@i_893+1)& (0+255),7,b
  3698  000E9E  D008               	goto	l3903
  3699  000EA0  0100               	movlb	0	; () banked
  3700  000EA2  518D               	movf	(start_routine@i_893+1)& (0+255),w,b
  3701  000EA4  E11C               	bnz	l3909
  3702  000EA6  0E03               	movlw	3
  3703  000EA8  0100               	movlb	0	; () banked
  3704  000EAA  5D8C               	subwf	start_routine@i_893& (0+255),w,b
  3705  000EAC  B0D8               	btfsc	status,0,c
  3706  000EAE  D017               	goto	l3909
  3707  000EB0                     l3903:
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;main.c: 495: b[i] = I2C_new_ADDR[i] - '0';
  3711  000EB0  0E80               	movlw	low start_routine@b
  3712  000EB2  0100               	movlb	0	; () banked
  3713  000EB4  258C               	addwf	start_routine@i_893& (0+255),w,b
  3714  000EB6  6ED9               	movwf	fsr2l,c
  3715  000EB8  0E00               	movlw	high start_routine@b
  3716  000EBA  0100               	movlb	0	; () banked
  3717  000EBC  218D               	addwfc	(start_routine@i_893+1)& (0+255),w,b
  3718  000EBE  6EDA               	movwf	fsr2h,c
  3719  000EC0  0E87               	movlw	low start_routine@I2C_new_ADDR
  3720  000EC2  0100               	movlb	0	; () banked
  3721  000EC4  258C               	addwf	start_routine@i_893& (0+255),w,b
  3722  000EC6  6EE1               	movwf	fsr1l,c
  3723  000EC8  0E00               	movlw	high start_routine@I2C_new_ADDR
  3724  000ECA  0100               	movlb	0	; () banked
  3725  000ECC  218D               	addwfc	(start_routine@i_893+1)& (0+255),w,b
  3726  000ECE  6EE2               	movwf	fsr1h,c
  3727  000ED0  50E7               	movf	indf1,w,c
  3728  000ED2  0FD0               	addlw	208
  3729  000ED4  6EDF               	movwf	indf2,c
  3730                           
  3731                           ; BSR set to: 0
  3732  000ED6  0100               	movlb	0	; () banked
  3733  000ED8  4B8C               	infsnz	start_routine@i_893& (0+255),f,b
  3734  000EDA  2B8D               	incf	(start_routine@i_893+1)& (0+255),f,b
  3735  000EDC  D7DE               	goto	l3899
  3736  000EDE                     l3909:
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;main.c: 496: new_I2C_address += (100)*(I2C_new_ADDR[0] - '0');
  3740  000EDE  0100               	movlb	0	; () banked
  3741  000EE0  5187               	movf	start_routine@I2C_new_ADDR& (0+255),w,b
  3742  000EE2  0FD0               	addlw	208
  3743  000EE4  0D64               	mullw	100
  3744  000EE6  50F3               	movf	prodl,w,c
  3745  000EE8  0100               	movlb	0	; () banked
  3746  000EEA  2791               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3747                           
  3748                           ;main.c: 497: new_I2C_address += (10)*(I2C_new_ADDR[1] - '0');
  3749  000EEC  0100               	movlb	0	; () banked
  3750  000EEE  5188               	movf	(start_routine@I2C_new_ADDR+1)& (0+255),w,b
  3751  000EF0  0FD0               	addlw	208
  3752  000EF2  0D0A               	mullw	10
  3753  000EF4  50F3               	movf	prodl,w,c
  3754  000EF6  0100               	movlb	0	; () banked
  3755  000EF8  2791               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;main.c: 498: new_I2C_address += (1)*(I2C_new_ADDR[2] - '0');
  3759  000EFA  0100               	movlb	0	; () banked
  3760  000EFC  5189               	movf	(start_routine@I2C_new_ADDR+2)& (0+255),w,b
  3761  000EFE  0FD0               	addlw	208
  3762  000F00  0100               	movlb	0	; () banked
  3763  000F02  2791               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;main.c: 499: Machine_ID = new_I2C_address;
  3767  000F04  C091  F0CF         	movff	start_routine@new_I2C_address,_Machine_ID
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;main.c: 500: new_I2C_address += 0x0F;
  3771  000F08  0E0F               	movlw	15
  3772  000F0A  0100               	movlb	0	; () banked
  3773  000F0C  2791               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3774                           
  3775                           ; BSR set to: 0
  3776                           ;main.c: 502: char* error_msg;
  3777                           ;main.c: 503: if ( ((b[0]==0)&&((b[1]!=0)|(b[2]!=0))) | ((b[0]==1)&&(b[1]==0)&&(b[2]==0)
      +                          ) )
  3778  000F0E  0100               	movlb	0	; () banked
  3779  000F10  5180               	movf	start_routine@b& (0+255),w,b
  3780  000F12  0100               	movlb	0	; () banked
  3781  000F14  A4D8               	btfss	status,2,c
  3782  000F16  D008               	goto	l3923
  3783                           
  3784                           ; BSR set to: 0
  3785  000F18  0100               	movlb	0	; () banked
  3786  000F1A  5181               	movf	(start_routine@b+1)& (0+255),w,b
  3787  000F1C  A4D8               	btfss	status,2,c
  3788  000F1E  D010               	goto	l3929
  3789                           
  3790                           ; BSR set to: 0
  3791  000F20  0100               	movlb	0	; () banked
  3792  000F22  5182               	movf	(start_routine@b+2)& (0+255),w,b
  3793  000F24  A4D8               	btfss	status,2,c
  3794  000F26  D00C               	goto	l3929
  3795  000F28                     l3923:
  3796                           
  3797                           ; BSR set to: 0
  3798  000F28  0100               	movlb	0	; () banked
  3799  000F2A  0580               	decf	start_routine@b& (0+255),w,b
  3800  000F2C  A4D8               	btfss	status,2,c
  3801  000F2E  D112               	goto	l3997
  3802                           
  3803                           ; BSR set to: 0
  3804  000F30  0100               	movlb	0	; () banked
  3805  000F32  5181               	movf	(start_routine@b+1)& (0+255),w,b
  3806  000F34  A4D8               	btfss	status,2,c
  3807  000F36  D10E               	goto	l3997
  3808                           
  3809                           ; BSR set to: 0
  3810  000F38  0100               	movlb	0	; () banked
  3811  000F3A  5182               	movf	(start_routine@b+2)& (0+255),w,b
  3812  000F3C  A4D8               	btfss	status,2,c
  3813  000F3E  D10A               	goto	l3997
  3814  000F40                     l3929:
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;main.c: 504: {
  3818                           ;main.c: 506: dh = (new_I2C_address / 100);
  3819  000F40  C091  F018         	movff	start_routine@new_I2C_address,___awdiv@dividend
  3820  000F44  6A19               	clrf	___awdiv@dividend+1,c
  3821  000F46  0E00               	movlw	0
  3822  000F48  6E1B               	movwf	___awdiv@divisor+1,c
  3823  000F4A  0E64               	movlw	100
  3824  000F4C  6E1A               	movwf	___awdiv@divisor,c
  3825  000F4E  ECC0  F00A         	call	___awdiv	;wreg free
  3826  000F52  5018               	movf	?___awdiv,w,c
  3827  000F54  0100               	movlb	0	; () banked
  3828  000F56  6F8E               	movwf	start_routine@dh& (0+255),b
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;main.c: 507: dt = (new_I2C_address - dh*100) / 10;
  3832  000F58  0100               	movlb	0	; () banked
  3833  000F5A  518E               	movf	start_routine@dh& (0+255),w,b
  3834  000F5C  0D64               	mullw	100
  3835  000F5E  1EF3               	comf	prodl,f,c
  3836  000F60  1EF4               	comf	prodh,f,c
  3837  000F62  4AF3               	infsnz	prodl,f,c
  3838  000F64  2AF4               	incf	prodh,f,c
  3839  000F66  0100               	movlb	0	; () banked
  3840  000F68  5191               	movf	start_routine@new_I2C_address& (0+255),w,b
  3841  000F6A  24F3               	addwf	prodl,w,c
  3842  000F6C  6E18               	movwf	___awdiv@dividend,c
  3843  000F6E  0E00               	movlw	0
  3844  000F70  20F4               	addwfc	prodh,w,c
  3845  000F72  6E19               	movwf	___awdiv@dividend+1,c
  3846  000F74  0E00               	movlw	0
  3847  000F76  6E1B               	movwf	___awdiv@divisor+1,c
  3848  000F78  0E0A               	movlw	10
  3849  000F7A  6E1A               	movwf	___awdiv@divisor,c
  3850  000F7C  ECC0  F00A         	call	___awdiv	;wreg free
  3851  000F80  5018               	movf	?___awdiv,w,c
  3852  000F82  0100               	movlb	0	; () banked
  3853  000F84  6F8B               	movwf	start_routine@dt& (0+255),b
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;main.c: 508: d1 = (new_I2C_address - (dh*100+dt*10));
  3857  000F86  0100               	movlb	0	; () banked
  3858  000F88  518B               	movf	start_routine@dt& (0+255),w,b
  3859  000F8A  0D0A               	mullw	10
  3860  000F8C  CFF3 F02B          	movff	prodl,??_start_routine
  3861  000F90  0100               	movlb	0	; () banked
  3862  000F92  518E               	movf	start_routine@dh& (0+255),w,b
  3863  000F94  0D64               	mullw	100
  3864  000F96  50F3               	movf	prodl,w,c
  3865  000F98  242B               	addwf	??_start_routine,w,c
  3866  000F9A  0800               	sublw	0
  3867  000F9C  0100               	movlb	0	; () banked
  3868  000F9E  2591               	addwf	start_routine@new_I2C_address& (0+255),w,b
  3869  000FA0  0100               	movlb	0	; () banked
  3870  000FA2  6F72               	movwf	start_routine@d1& (0+255),b
  3871                           
  3872                           ; BSR set to: 0
  3873                           ;main.c: 510: h = new_I2C_address/16;
  3874  000FA4  C091  F018         	movff	start_routine@new_I2C_address,___awdiv@dividend
  3875  000FA8  6A19               	clrf	___awdiv@dividend+1,c
  3876  000FAA  0E00               	movlw	0
  3877  000FAC  6E1B               	movwf	___awdiv@divisor+1,c
  3878  000FAE  0E10               	movlw	16
  3879  000FB0  6E1A               	movwf	___awdiv@divisor,c
  3880  000FB2  ECC0  F00A         	call	___awdiv	;wreg free
  3881  000FB6  5018               	movf	?___awdiv,w,c
  3882  000FB8  0100               	movlb	0	; () banked
  3883  000FBA  6F6E               	movwf	start_routine@h& (0+255),b
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;main.c: 511: l = new_I2C_address - (new_I2C_address/16)*16;
  3887  000FBC  C091  F018         	movff	start_routine@new_I2C_address,___awdiv@dividend
  3888  000FC0  6A19               	clrf	___awdiv@dividend+1,c
  3889  000FC2  0E00               	movlw	0
  3890  000FC4  6E1B               	movwf	___awdiv@divisor+1,c
  3891  000FC6  0E10               	movlw	16
  3892  000FC8  6E1A               	movwf	___awdiv@divisor,c
  3893  000FCA  ECC0  F00A         	call	___awdiv	;wreg free
  3894  000FCE  3818               	swapf	?___awdiv,w,c
  3895  000FD0  0BF0               	andlw	240
  3896  000FD2  0800               	sublw	0
  3897  000FD4  0100               	movlb	0	; () banked
  3898  000FD6  2591               	addwf	start_routine@new_I2C_address& (0+255),w,b
  3899  000FD8  0100               	movlb	0	; () banked
  3900  000FDA  6F6F               	movwf	start_routine@l& (0+255),b
  3901                           
  3902                           ; BSR set to: 0
  3903                           ;main.c: 512: Lcd_Clear();
  3904  000FDC  ECD7  F00C         	call	_Lcd_Clear	;wreg free
  3905                           
  3906                           ;main.c: 513: Lcd_Set_Cursor(1,1);
  3907  000FE0  0E01               	movlw	1
  3908  000FE2  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3909  000FE4  0E01               	movlw	1
  3910  000FE6  EC08  F00C         	call	_Lcd_Set_Cursor
  3911                           
  3912                           ;main.c: 514: Lcd_Write_String("New Machine ID: ");
  3913  000FEA  0E49               	movlw	low STR_20
  3914  000FEC  6E1C               	movwf	Lcd_Write_String@a,c
  3915  000FEE  0E7F               	movlw	high STR_20
  3916  000FF0  6E1D               	movwf	Lcd_Write_String@a+1,c
  3917  000FF2  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  3918                           
  3919                           ;main.c: 515: Lcd_Set_Cursor(2,1);
  3920  000FF6  0E01               	movlw	1
  3921  000FF8  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3922  000FFA  0E02               	movlw	2
  3923  000FFC  EC08  F00C         	call	_Lcd_Set_Cursor
  3924                           
  3925                           ;main.c: 516: for (int i = 0; i < 3; i++)
  3926  001000  0E00               	movlw	0
  3927  001002  0100               	movlb	0	; () banked
  3928  001004  6F84               	movwf	(start_routine@i_896+1)& (0+255),b
  3929  001006  0E00               	movlw	0
  3930  001008  6F83               	movwf	start_routine@i_896& (0+255),b
  3931  00100A                     l3949:
  3932                           
  3933                           ; BSR set to: 0
  3934  00100A  0100               	movlb	0	; () banked
  3935  00100C  BF84               	btfsc	(start_routine@i_896+1)& (0+255),7,b
  3936  00100E  D008               	goto	l3953
  3937  001010  0100               	movlb	0	; () banked
  3938  001012  5184               	movf	(start_routine@i_896+1)& (0+255),w,b
  3939  001014  E114               	bnz	l3959
  3940  001016  0E03               	movlw	3
  3941  001018  0100               	movlb	0	; () banked
  3942  00101A  5D83               	subwf	start_routine@i_896& (0+255),w,b
  3943  00101C  B0D8               	btfsc	status,0,c
  3944  00101E  D00F               	goto	l3959
  3945  001020                     l3953:
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;main.c: 517: Lcd_Write_Char(I2C_new_ADDR[i]);
  3949  001020  0E87               	movlw	low start_routine@I2C_new_ADDR
  3950  001022  0100               	movlb	0	; () banked
  3951  001024  2583               	addwf	start_routine@i_896& (0+255),w,b
  3952  001026  6ED9               	movwf	fsr2l,c
  3953  001028  0E00               	movlw	high start_routine@I2C_new_ADDR
  3954  00102A  0100               	movlb	0	; () banked
  3955  00102C  2184               	addwfc	(start_routine@i_896+1)& (0+255),w,b
  3956  00102E  6EDA               	movwf	fsr2h,c
  3957  001030  50DF               	movf	indf2,w,c
  3958  001032  EC50  F00C         	call	_Lcd_Write_Char
  3959  001036  0100               	movlb	0	; () banked
  3960  001038  4B83               	infsnz	start_routine@i_896& (0+255),f,b
  3961  00103A  2B84               	incf	(start_routine@i_896+1)& (0+255),f,b
  3962  00103C  D7E6               	goto	l3949
  3963  00103E                     l3959:
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;main.c: 518: Lcd_Set_Cursor(2, 7);
  3967  00103E  0E07               	movlw	7
  3968  001040  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3969  001042  0E02               	movlw	2
  3970  001044  EC08  F00C         	call	_Lcd_Set_Cursor
  3971                           
  3972                           ;main.c: 519: Lcd_Write_String("[OK]");
  3973  001048  0EF8               	movlw	low STR_23
  3974  00104A  6E1C               	movwf	Lcd_Write_String@a,c
  3975  00104C  0E7F               	movlw	high STR_23
  3976  00104E  6E1D               	movwf	Lcd_Write_String@a+1,c
  3977  001050  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  3978                           
  3979                           ;main.c: 520: Lcd_Set_Cursor(2,14);
  3980  001054  0E0E               	movlw	14
  3981  001056  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3982  001058  0E02               	movlw	2
  3983  00105A  EC08  F00C         	call	_Lcd_Set_Cursor
  3984                           
  3985                           ;main.c: 521: Lcd_Write_String("x");
  3986  00105E  0EFD               	movlw	low STR_24
  3987  001060  6E1C               	movwf	Lcd_Write_String@a,c
  3988  001062  0E7F               	movlw	high STR_24
  3989  001064  6E1D               	movwf	Lcd_Write_String@a+1,c
  3990  001066  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  3991                           
  3992                           ;main.c: 522: Lcd_Write_Char(hx[h]);
  3993  00106A  0100               	movlb	0	; () banked
  3994  00106C  516E               	movf	start_routine@h& (0+255),w,b
  3995  00106E  0D01               	mullw	1
  3996  001070  0E92               	movlw	low _hx
  3997  001072  24F3               	addwf	prodl,w,c
  3998  001074  6ED9               	movwf	fsr2l,c
  3999  001076  0E00               	movlw	high _hx
  4000  001078  20F4               	addwfc	prodh,w,c
  4001  00107A  6EDA               	movwf	fsr2h,c
  4002  00107C  50DF               	movf	indf2,w,c
  4003  00107E  EC50  F00C         	call	_Lcd_Write_Char
  4004                           
  4005                           ;main.c: 523: Lcd_Write_Char(hx[l]);
  4006  001082  0100               	movlb	0	; () banked
  4007  001084  516F               	movf	start_routine@l& (0+255),w,b
  4008  001086  0D01               	mullw	1
  4009  001088  0E92               	movlw	low _hx
  4010  00108A  24F3               	addwf	prodl,w,c
  4011  00108C  6ED9               	movwf	fsr2l,c
  4012  00108E  0E00               	movlw	high _hx
  4013  001090  20F4               	addwfc	prodh,w,c
  4014  001092  6EDA               	movwf	fsr2h,c
  4015  001094  50DF               	movf	indf2,w,c
  4016  001096  EC50  F00C         	call	_Lcd_Write_Char
  4017                           
  4018                           ;main.c: 524: for (int i = 0; i < 50; i++)
  4019  00109A  0E00               	movlw	0
  4020  00109C  0100               	movlb	0	; () banked
  4021  00109E  6F7B               	movwf	(start_routine@i_899+1)& (0+255),b
  4022  0010A0  0E00               	movlw	0
  4023  0010A2  6F7A               	movwf	start_routine@i_899& (0+255),b
  4024                           
  4025                           ; BSR set to: 0
  4026  0010A4  0100               	movlb	0	; () banked
  4027  0010A6  BF7B               	btfsc	(start_routine@i_899+1)& (0+255),7,b
  4028  0010A8  D008               	goto	l3975
  4029  0010AA  0100               	movlb	0	; () banked
  4030  0010AC  517B               	movf	(start_routine@i_899+1)& (0+255),w,b
  4031  0010AE  E118               	bnz	l335
  4032  0010B0  0E32               	movlw	50
  4033  0010B2  0100               	movlb	0	; () banked
  4034  0010B4  5D7A               	subwf	start_routine@i_899& (0+255),w,b
  4035  0010B6  B0D8               	btfsc	status,0,c
  4036  0010B8  D013               	goto	l335
  4037  0010BA                     l3975:
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;main.c: 525: _delay((unsigned long)((20)*(16000000/4000.0)));
  4041  0010BA  0E68               	movlw	104
  4042  0010BC  6E2B               	movwf	??_start_routine& (0+255),c
  4043  0010BE  0EE4               	movlw	228
  4044  0010C0                     u4447:
  4045  0010C0  2EE8               	decfsz	wreg,f,c
  4046  0010C2  D7FE               	goto	u4447
  4047  0010C4  2E2B               	decfsz	??_start_routine& (0+255),f,c
  4048  0010C6  D7FC               	goto	u4447
  4049  0010C8  F000 F000          	nop2	
  4050  0010CC  0100               	movlb	0	; () banked
  4051  0010CE  4B7A               	infsnz	start_routine@i_899& (0+255),f,b
  4052  0010D0  2B7B               	incf	(start_routine@i_899+1)& (0+255),f,b
  4053  0010D2  0100               	movlb	0	; () banked
  4054  0010D4  BF7B               	btfsc	(start_routine@i_899+1)& (0+255),7,b
  4055  0010D6  D7F1               	goto	l3975
  4056  0010D8  0100               	movlb	0	; () banked
  4057  0010DA  517B               	movf	(start_routine@i_899+1)& (0+255),w,b
  4058  0010DC  E101               	bnz	u3680
  4059  0010DE  D7E8               	goto	L5
  4060  0010E0                     u3680:
  4061  0010E0                     l335:
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;main.c: 526: I2C_ADDR = new_I2C_address;
  4065  0010E0  C091  F0CE         	movff	start_routine@new_I2C_address,_I2C_ADDR
  4066                           
  4067                           ; BSR set to: 0
  4068                           ;main.c: 527: Eeprom_Write_Byte(EEP_I2C_ADDR, I2C_ADDR);
  4069  0010E4  C0CE  F018         	movff	_I2C_ADDR,Eeprom_Write_Byte@data
  4070  0010E8  0100               	movlb	0	; () banked
  4071  0010EA  51CC               	movf	_EEP_I2C_ADDR& (0+255),w,b
  4072  0010EC  ECC5  F00C         	call	_Eeprom_Write_Byte
  4073                           
  4074                           ;main.c: 528: Lcd_Clear();
  4075  0010F0  ECD7  F00C         	call	_Lcd_Clear	;wreg free
  4076                           
  4077                           ;main.c: 529: Lcd_Set_Cursor(1,1);
  4078  0010F4  0E01               	movlw	1
  4079  0010F6  6E1A               	movwf	Lcd_Set_Cursor@b,c
  4080  0010F8  0E01               	movlw	1
  4081  0010FA  EC08  F00C         	call	_Lcd_Set_Cursor
  4082                           
  4083                           ;main.c: 530: Lcd_Write_String("I2C_ADDR>>EEPROM");
  4084  0010FE  0E8D               	movlw	low STR_25
  4085  001100  6E1C               	movwf	Lcd_Write_String@a,c
  4086  001102  0E7F               	movlw	high STR_25
  4087  001104  6E1D               	movwf	Lcd_Write_String@a+1,c
  4088  001106  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  4089                           
  4090                           ;main.c: 537: for (int i = 0; i < 10; i++)
  4091  00110A  0E00               	movlw	0
  4092  00110C  0100               	movlb	0	; () banked
  4093  00110E  6F7D               	movwf	(start_routine@i_902+1)& (0+255),b
  4094  001110  0E00               	movlw	0
  4095  001112  6F7C               	movwf	start_routine@i_902& (0+255),b
  4096  001114                     l3987:
  4097                           
  4098                           ; BSR set to: 0
  4099  001114  0100               	movlb	0	; () banked
  4100  001116  BF7D               	btfsc	(start_routine@i_902+1)& (0+255),7,b
  4101  001118  D008               	goto	l3991
  4102  00111A  0100               	movlb	0	; () banked
  4103  00111C  517D               	movf	(start_routine@i_902+1)& (0+255),w,b
  4104  00111E  E112               	bnz	l3995
  4105  001120  0E0A               	movlw	10
  4106  001122  0100               	movlb	0	; () banked
  4107  001124  5D7C               	subwf	start_routine@i_902& (0+255),w,b
  4108  001126  B0D8               	btfsc	status,0,c
  4109  001128  D00D               	goto	l3995
  4110  00112A                     l3991:
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;main.c: 538: _delay((unsigned long)((20)*(16000000/4000.0)));
  4114  00112A  0E68               	movlw	104
  4115  00112C  6E2B               	movwf	??_start_routine& (0+255),c
  4116  00112E  0EE4               	movlw	228
  4117  001130                     u4457:
  4118  001130  2EE8               	decfsz	wreg,f,c
  4119  001132  D7FE               	goto	u4457
  4120  001134  2E2B               	decfsz	??_start_routine& (0+255),f,c
  4121  001136  D7FC               	goto	u4457
  4122  001138  F000 F000          	nop2	
  4123  00113C  0100               	movlb	0	; () banked
  4124  00113E  4B7C               	infsnz	start_routine@i_902& (0+255),f,b
  4125  001140  2B7D               	incf	(start_routine@i_902+1)& (0+255),f,b
  4126  001142  D7E8               	goto	l3987
  4127  001144                     l3995:
  4128                           
  4129                           ; BSR set to: 0
  4130                           ;main.c: 539: menu_progress_bar(500);
  4131  001144  0E01               	movlw	1
  4132  001146  6E26               	movwf	menu_progress_bar@load_time_ms+1,c
  4133  001148  0EF4               	movlw	244
  4134  00114A  6E25               	movwf	menu_progress_bar@load_time_ms,c
  4135  00114C  EC0F  F009         	call	_menu_progress_bar	;wreg free
  4136  001150  00FF               	reset		;# 
  4137                           
  4138                           ;main.c: 541: }
  4139  001152  D05C               	goto	l4031
  4140  001154                     l3997:
  4141                           
  4142                           ;main.c: 542: else
  4143                           ;main.c: 543: {
  4144                           ;main.c: 544: if (new_I2C_address == 0)
  4145  001154  0100               	movlb	0	; () banked
  4146  001156  5191               	movf	start_routine@new_I2C_address& (0+255),w,b
  4147  001158  0100               	movlb	0	; () banked
  4148  00115A  A4D8               	btfss	status,2,c
  4149  00115C  D005               	goto	l4001
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;main.c: 545: error_msg = "May not be zero!";
  4153  00115E  0E6B               	movlw	low STR_26
  4154  001160  0100               	movlb	0	; () banked
  4155  001162  6F70               	movwf	start_routine@error_msg& (0+255),b
  4156  001164  0E7F               	movlw	high STR_26
  4157  001166  D004               	goto	L6
  4158  001168                     l4001:
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;main.c: 546: else
  4162                           ;main.c: 547: error_msg = "Out of bounds!  ";
  4163  001168  0E16               	movlw	low STR_27
  4164  00116A  0100               	movlb	0	; () banked
  4165  00116C  6F70               	movwf	start_routine@error_msg& (0+255),b
  4166  00116E  0E7F               	movlw	high STR_27
  4167  001170                     L6:
  4168  001170  0100               	movlb	0	; () banked
  4169  001172  6F71               	movwf	(start_routine@error_msg+1)& (0+255),b
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;main.c: 548: Lcd_Set_Cursor(2,1);
  4173                           
  4174                           ; BSR set to: 0
  4175  001174  0E01               	movlw	1
  4176  001176  6E1A               	movwf	Lcd_Set_Cursor@b,c
  4177  001178  0E02               	movlw	2
  4178  00117A  EC08  F00C         	call	_Lcd_Set_Cursor
  4179                           
  4180                           ;main.c: 549: Lcd_Write_String(error_msg);
  4181  00117E  C070  F01C         	movff	start_routine@error_msg,Lcd_Write_String@a
  4182  001182  C071  F01D         	movff	start_routine@error_msg+1,Lcd_Write_String@a+1
  4183  001186  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  4184                           
  4185                           ;main.c: 550: for (int i = 0; i < 50; i++)
  4186  00118A  0E00               	movlw	0
  4187  00118C  0100               	movlb	0	; () banked
  4188  00118E  6F7F               	movwf	(start_routine@i_905+1)& (0+255),b
  4189  001190  0E00               	movlw	0
  4190  001192  6F7E               	movwf	start_routine@i_905& (0+255),b
  4191  001194                     l4009:
  4192                           
  4193                           ; BSR set to: 0
  4194  001194  0100               	movlb	0	; () banked
  4195  001196  BF7F               	btfsc	(start_routine@i_905+1)& (0+255),7,b
  4196  001198  D008               	goto	l4013
  4197  00119A  0100               	movlb	0	; () banked
  4198  00119C  517F               	movf	(start_routine@i_905+1)& (0+255),w,b
  4199  00119E  E112               	bnz	l4017
  4200  0011A0  0E32               	movlw	50
  4201  0011A2  0100               	movlb	0	; () banked
  4202  0011A4  5D7E               	subwf	start_routine@i_905& (0+255),w,b
  4203  0011A6  B0D8               	btfsc	status,0,c
  4204  0011A8  D00D               	goto	l4017
  4205  0011AA                     l4013:
  4206                           
  4207                           ; BSR set to: 0
  4208                           ;main.c: 551: _delay((unsigned long)((20)*(16000000/4000.0)));
  4209  0011AA  0E68               	movlw	104
  4210  0011AC  6E2B               	movwf	??_start_routine& (0+255),c
  4211  0011AE  0EE4               	movlw	228
  4212  0011B0                     u4467:
  4213  0011B0  2EE8               	decfsz	wreg,f,c
  4214  0011B2  D7FE               	goto	u4467
  4215  0011B4  2E2B               	decfsz	??_start_routine& (0+255),f,c
  4216  0011B6  D7FC               	goto	u4467
  4217  0011B8  F000 F000          	nop2	
  4218  0011BC  0100               	movlb	0	; () banked
  4219  0011BE  4B7E               	infsnz	start_routine@i_905& (0+255),f,b
  4220  0011C0  2B7F               	incf	(start_routine@i_905+1)& (0+255),f,b
  4221  0011C2  D7E8               	goto	l4009
  4222  0011C4                     l4017:
  4223                           
  4224                           ; BSR set to: 0
  4225                           ;main.c: 552: for (int i = 0; i < 3; i++)
  4226  0011C4  0E00               	movlw	0
  4227  0011C6  0100               	movlb	0	; () banked
  4228  0011C8  6F86               	movwf	(start_routine@i_906+1)& (0+255),b
  4229  0011CA  0E00               	movlw	0
  4230  0011CC  6F85               	movwf	start_routine@i_906& (0+255),b
  4231  0011CE                     l4019:
  4232                           
  4233                           ; BSR set to: 0
  4234  0011CE  0100               	movlb	0	; () banked
  4235  0011D0  BF86               	btfsc	(start_routine@i_906+1)& (0+255),7,b
  4236  0011D2  D008               	goto	l4023
  4237  0011D4  0100               	movlb	0	; () banked
  4238  0011D6  5186               	movf	(start_routine@i_906+1)& (0+255),w,b
  4239  0011D8  E113               	bnz	l4029
  4240  0011DA  0E03               	movlw	3
  4241  0011DC  0100               	movlb	0	; () banked
  4242  0011DE  5D85               	subwf	start_routine@i_906& (0+255),w,b
  4243  0011E0  B0D8               	btfsc	status,0,c
  4244  0011E2  D00E               	goto	l4029
  4245  0011E4                     l4023:
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;main.c: 553: I2C_new_ADDR[i] = '0';
  4249  0011E4  0E87               	movlw	low start_routine@I2C_new_ADDR
  4250  0011E6  0100               	movlb	0	; () banked
  4251  0011E8  2585               	addwf	start_routine@i_906& (0+255),w,b
  4252  0011EA  6ED9               	movwf	fsr2l,c
  4253  0011EC  0E00               	movlw	high start_routine@I2C_new_ADDR
  4254  0011EE  0100               	movlb	0	; () banked
  4255  0011F0  2186               	addwfc	(start_routine@i_906+1)& (0+255),w,b
  4256  0011F2  6EDA               	movwf	fsr2h,c
  4257  0011F4  0E30               	movlw	48
  4258  0011F6  6EDF               	movwf	indf2,c
  4259                           
  4260                           ; BSR set to: 0
  4261  0011F8  0100               	movlb	0	; () banked
  4262  0011FA  4B85               	infsnz	start_routine@i_906& (0+255),f,b
  4263  0011FC  2B86               	incf	(start_routine@i_906+1)& (0+255),f,b
  4264  0011FE  D7E7               	goto	l4019
  4265  001200                     l4029:
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;main.c: 554: v = 0;
  4269  001200  0E00               	movlw	0
  4270  001202  0100               	movlb	0	; () banked
  4271  001204  6F73               	movwf	start_routine@v& (0+255),b
  4272                           
  4273                           ;main.c: 555: n = 0;
  4274  001206  0E00               	movlw	0
  4275  001208  0100               	movlb	0	; () banked
  4276  00120A  6F90               	movwf	start_routine@n& (0+255),b
  4277  00120C                     l4031:
  4278  00120C  0100               	movlb	0	; () banked
  4279  00120E  0573               	decf	start_routine@v& (0+255),w,b
  4280  001210  B4D8               	btfsc	status,2,c
  4281  001212  0012               	return	
  4282  001214  D596               	goto	l3843
  4283  001216                     l4033:
  4284                           
  4285                           ; BSR set to: 0
  4286                           ;main.c: 559: else
  4287                           ;main.c: 560: {
  4288                           ;main.c: 561: v = 1;
  4289  001216  0E01               	movlw	1
  4290  001218  0100               	movlb	0	; () banked
  4291  00121A  6F73               	movwf	start_routine@v& (0+255),b
  4292  00121C  0012               	return	
  4293  00121E                     __end_of_start_routine:
  4294                           	opt stack 0
  4295                           tblptru	equ	0xFF8
  4296                           tblptrh	equ	0xFF7
  4297                           tblptrl	equ	0xFF6
  4298                           tablat	equ	0xFF5
  4299                           prodh	equ	0xFF4
  4300                           prodl	equ	0xFF3
  4301                           intcon	equ	0xFF2
  4302                           postinc0	equ	0xFEE
  4303                           wreg	equ	0xFE8
  4304                           indf1	equ	0xFE7
  4305                           postdec1	equ	0xFE5
  4306                           plusw1	equ	0xFE3
  4307                           fsr1h	equ	0xFE2
  4308                           fsr1l	equ	0xFE1
  4309                           indf2	equ	0xFDF
  4310                           postinc2	equ	0xFDE
  4311                           plusw2	equ	0xFDB
  4312                           fsr2h	equ	0xFDA
  4313                           fsr2l	equ	0xFD9
  4314                           status	equ	0xFD8
  4315                           
  4316 ;; *************** function _menu_progress_bar *****************
  4317 ;; Defined at:
  4318 ;;		line 85 in file "menu.h"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;  load_time_ms    2   36[COMRAM] unsigned short 
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;  ii              2    4[BANK0 ] int 
  4323 ;;  i               2   12[BANK0 ] int 
  4324 ;;  i               2   10[BANK0 ] int 
  4325 ;;  i               2    8[BANK0 ] int 
  4326 ;;  i               2    6[BANK0 ] int 
  4327 ;;  d               4    0[BANK0 ] unsigned long 
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  1    wreg      void 
  4330 ;; Registers used:
  4331 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4337 ;;      Params:         2       0       0       0       0       0       0
  4338 ;;      Locals:         0      14       0       0       0       0       0
  4339 ;;      Temps:          4       0       0       0       0       0       0
  4340 ;;      Totals:         6      14       0       0       0       0       0
  4341 ;;Total ram usage:       20 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:    5
  4344 ;; This function calls:
  4345 ;;		_Lcd_Clear
  4346 ;;		_Lcd_Set_Cursor
  4347 ;;		_Lcd_Write_Char
  4348 ;;		_Lcd_Write_String
  4349 ;;		___lwdiv
  4350 ;;		___wmul
  4351 ;; This function is called by:
  4352 ;;		_main
  4353 ;;		_start_routine
  4354 ;; This function uses a non-reentrant model
  4355 ;;
  4356                           
  4357                           	psect	text2
  4358  00121E                     __ptext2:
  4359                           	opt stack 0
  4360  00121E                     _menu_progress_bar:
  4361                           	opt stack 24
  4362                           
  4363                           ;menu.h: 87: Lcd_Set_Cursor(2,1);
  4364                           
  4365                           ; BSR set to: 0
  4366                           ;incstack = 0
  4367  00121E  0E01               	movlw	1
  4368  001220  6E1A               	movwf	Lcd_Set_Cursor@b,c
  4369  001222  0E02               	movlw	2
  4370  001224  EC08  F00C         	call	_Lcd_Set_Cursor
  4371                           
  4372                           ;menu.h: 88: unsigned long d = (((load_time_ms/16)/20)*20);
  4373  001228  0E00               	movlw	0
  4374  00122A  6E1B               	movwf	___lwdiv@divisor+1,c
  4375  00122C  0E14               	movlw	20
  4376  00122E  6E1A               	movwf	___lwdiv@divisor,c
  4377  001230  C025  F027         	movff	menu_progress_bar@load_time_ms,??_menu_progress_bar
  4378  001234  C026  F028         	movff	menu_progress_bar@load_time_ms+1,??_menu_progress_bar+1
  4379  001238  0E04               	movlw	4
  4380  00123A  6E29               	movwf	(??_menu_progress_bar+2)& (0+255),c
  4381  00123C                     u3235:
  4382  00123C  90D8               	bcf	status,0,c
  4383  00123E  3228               	rrcf	??_menu_progress_bar+1,f,c
  4384  001240  3227               	rrcf	??_menu_progress_bar,f,c
  4385  001242  2E29               	decfsz	(??_menu_progress_bar+2)& (0+255),f,c
  4386  001244  D7FB               	goto	u3235
  4387  001246  C027  F018         	movff	??_menu_progress_bar,___lwdiv@dividend
  4388  00124A  C028  F019         	movff	??_menu_progress_bar+1,___lwdiv@dividend+1
  4389  00124E  ECB6  F00B         	call	___lwdiv	;wreg free
  4390  001252  C018  F01F         	movff	?___lwdiv,___wmul@multiplier
  4391  001256  C019  F020         	movff	?___lwdiv+1,___wmul@multiplier+1
  4392  00125A  0E00               	movlw	0
  4393  00125C  6E22               	movwf	___wmul@multiplicand+1,c
  4394  00125E  0E14               	movlw	20
  4395  001260  6E21               	movwf	___wmul@multiplicand,c
  4396  001262  ECB2  F00C         	call	___wmul	;wreg free
  4397  001266  C01F  F060         	movff	?___wmul,menu_progress_bar@d
  4398  00126A  C020  F061         	movff	?___wmul+1,menu_progress_bar@d+1
  4399  00126E  0100               	movlb	0	; () banked
  4400  001270  6B62               	clrf	(menu_progress_bar@d+2)& (0+255),b
  4401  001272  6B63               	clrf	(menu_progress_bar@d+3)& (0+255),b
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;menu.h: 89: for (int i = 0; i < 16; i++)
  4405  001274  0E00               	movlw	0
  4406  001276  0100               	movlb	0	; () banked
  4407  001278  6F67               	movwf	(menu_progress_bar@i+1)& (0+255),b
  4408  00127A  0E00               	movlw	0
  4409  00127C  6F66               	movwf	menu_progress_bar@i& (0+255),b
  4410  00127E                     l3553:
  4411                           
  4412                           ; BSR set to: 0
  4413  00127E  0100               	movlb	0	; () banked
  4414  001280  BF67               	btfsc	(menu_progress_bar@i+1)& (0+255),7,b
  4415  001282  D008               	goto	l3557
  4416  001284  0100               	movlb	0	; () banked
  4417  001286  5167               	movf	(menu_progress_bar@i+1)& (0+255),w,b
  4418  001288  E137               	bnz	l3571
  4419  00128A  0E10               	movlw	16
  4420  00128C  0100               	movlb	0	; () banked
  4421  00128E  5D66               	subwf	menu_progress_bar@i& (0+255),w,b
  4422  001290  B0D8               	btfsc	status,0,c
  4423  001292  D032               	goto	l3571
  4424  001294                     l3557:
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;menu.h: 90: {
  4428                           ;menu.h: 91: Lcd_Write_Char(0xFF);
  4429  001294  0EFF               	movlw	255
  4430  001296  EC50  F00C         	call	_Lcd_Write_Char
  4431                           
  4432                           ;menu.h: 92: for (int ii = 0; ii < d; ii+=20)
  4433  00129A  0E00               	movlw	0
  4434  00129C  0100               	movlb	0	; () banked
  4435  00129E  6F65               	movwf	(menu_progress_bar@ii+1)& (0+255),b
  4436  0012A0  0E00               	movlw	0
  4437  0012A2  6F64               	movwf	menu_progress_bar@ii& (0+255),b
  4438  0012A4  D00E               	goto	l3565
  4439  0012A6                     l3561:
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;menu.h: 93: _delay((unsigned long)((20)*(16000000/4000.0)));
  4443  0012A6  0E68               	movlw	104
  4444  0012A8  6E27               	movwf	??_menu_progress_bar& (0+255),c
  4445  0012AA  0EE4               	movlw	228
  4446  0012AC                     u4477:
  4447  0012AC  2EE8               	decfsz	wreg,f,c
  4448  0012AE  D7FE               	goto	u4477
  4449  0012B0  2E27               	decfsz	??_menu_progress_bar& (0+255),f,c
  4450  0012B2  D7FC               	goto	u4477
  4451  0012B4  F000 F000          	nop2	
  4452  0012B8  0E14               	movlw	20
  4453  0012BA  0100               	movlb	0	; () banked
  4454  0012BC  2764               	addwf	menu_progress_bar@ii& (0+255),f,b
  4455  0012BE  0E00               	movlw	0
  4456  0012C0  2365               	addwfc	(menu_progress_bar@ii+1)& (0+255),f,b
  4457  0012C2                     l3565:
  4458                           
  4459                           ; BSR set to: 0
  4460  0012C2  C064  F027         	movff	menu_progress_bar@ii,??_menu_progress_bar
  4461  0012C6  C065  F028         	movff	menu_progress_bar@ii+1,??_menu_progress_bar+1
  4462  0012CA  0E00               	movlw	0
  4463  0012CC  BE28               	btfsc	(??_menu_progress_bar+1)& (0+255),7,c
  4464  0012CE  0EFF               	movlw	255
  4465  0012D0  6E29               	movwf	(??_menu_progress_bar+2)& (0+255),c
  4466  0012D2  6E2A               	movwf	(??_menu_progress_bar+3)& (0+255),c
  4467  0012D4  0100               	movlb	0	; () banked
  4468  0012D6  5160               	movf	menu_progress_bar@d& (0+255),w,b
  4469  0012D8  5C27               	subwf	??_menu_progress_bar,w,c
  4470  0012DA  0100               	movlb	0	; () banked
  4471  0012DC  5161               	movf	(menu_progress_bar@d+1)& (0+255),w,b
  4472  0012DE  5828               	subwfb	??_menu_progress_bar+1,w,c
  4473  0012E0  0100               	movlb	0	; () banked
  4474  0012E2  5162               	movf	(menu_progress_bar@d+2)& (0+255),w,b
  4475  0012E4  5829               	subwfb	??_menu_progress_bar+2,w,c
  4476  0012E6  0100               	movlb	0	; () banked
  4477  0012E8  5163               	movf	(menu_progress_bar@d+3)& (0+255),w,b
  4478  0012EA  582A               	subwfb	??_menu_progress_bar+3,w,c
  4479  0012EC  A0D8               	btfss	status,0,c
  4480  0012EE  D7DB               	goto	l3561
  4481                           
  4482                           ; BSR set to: 0
  4483                           
  4484                           ; BSR set to: 0
  4485  0012F0  0100               	movlb	0	; () banked
  4486  0012F2  4B66               	infsnz	menu_progress_bar@i& (0+255),f,b
  4487  0012F4  2B67               	incf	(menu_progress_bar@i+1)& (0+255),f,b
  4488  0012F6  D7C3               	goto	l3553
  4489  0012F8                     l3571:
  4490                           
  4491                           ; BSR set to: 0
  4492                           ;menu.h: 94: }
  4493                           ;menu.h: 95: Lcd_Set_Cursor(2,1);
  4494  0012F8  0E01               	movlw	1
  4495  0012FA  6E1A               	movwf	Lcd_Set_Cursor@b,c
  4496  0012FC  0E02               	movlw	2
  4497  0012FE  EC08  F00C         	call	_Lcd_Set_Cursor
  4498                           
  4499                           ;menu.h: 96: Lcd_Write_String("                ");
  4500  001302  0EC1               	movlw	low STR_2
  4501  001304  6E1C               	movwf	Lcd_Write_String@a,c
  4502  001306  0E7E               	movlw	high STR_2
  4503  001308  6E1D               	movwf	Lcd_Write_String@a+1,c
  4504  00130A  EC7D  F00B         	call	_Lcd_Write_String	;wreg free
  4505                           
  4506                           ;menu.h: 97: for (int i = 0; i < 5; i++)
  4507  00130E  0E00               	movlw	0
  4508  001310  0100               	movlb	0	; () banked
  4509  001312  6F69               	movwf	(menu_progress_bar@i_722+1)& (0+255),b
  4510  001314  0E00               	movlw	0
  4511  001316  6F68               	movwf	menu_progress_bar@i_722& (0+255),b
  4512  001318                     l3577:
  4513                           
  4514                           ; BSR set to: 0
  4515  001318  0100               	movlb	0	; () banked
  4516  00131A  BF69               	btfsc	(menu_progress_bar@i_722+1)& (0+255),7,b
  4517  00131C  D008               	goto	l3581
  4518  00131E  0100               	movlb	0	; () banked
  4519  001320  5169               	movf	(menu_progress_bar@i_722+1)& (0+255),w,b
  4520  001322  E112               	bnz	l3585
  4521  001324  0E05               	movlw	5
  4522  001326  0100               	movlb	0	; () banked
  4523  001328  5D68               	subwf	menu_progress_bar@i_722& (0+255),w,b
  4524  00132A  B0D8               	btfsc	status,0,c
  4525  00132C  D00D               	goto	l3585
  4526  00132E                     l3581:
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;menu.h: 98: {
  4530                           ;menu.h: 99: _delay((unsigned long)((20)*(16000000/4000.0)));
  4531  00132E  0E68               	movlw	104
  4532  001330  6E27               	movwf	??_menu_progress_bar& (0+255),c
  4533  001332  0EE4               	movlw	228
  4534  001334                     u4487:
  4535  001334  2EE8               	decfsz	wreg,f,c
  4536  001336  D7FE               	goto	u4487
  4537  001338  2E27               	decfsz	??_menu_progress_bar& (0+255),f,c
  4538  00133A  D7FC               	goto	u4487
  4539  00133C  F000 F000          	nop2	
  4540  001340  0100               	movlb	0	; () banked
  4541  001342  4B68               	infsnz	menu_progress_bar@i_722& (0+255),f,b
  4542  001344  2B69               	incf	(menu_progress_bar@i_722+1)& (0+255),f,b
  4543  001346  D7E8               	goto	l3577
  4544  001348                     l3585:
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;menu.h: 100: }
  4548                           ;menu.h: 101: Lcd_Set_Cursor(2,1);
  4549  001348  0E01               	movlw	1
  4550  00134A  6E1A               	movwf	Lcd_Set_Cursor@b,c
  4551  00134C  0E02               	movlw	2
  4552  00134E  EC08  F00C         	call	_Lcd_Set_Cursor
  4553                           
  4554                           ;menu.h: 102: for (int i = 0; i < 16; i++)
  4555  001352  0E00               	movlw	0
  4556  001354  0100               	movlb	0	; () banked
  4557  001356  6F6B               	movwf	(menu_progress_bar@i_723+1)& (0+255),b
  4558  001358  0E00               	movlw	0
  4559  00135A  6F6A               	movwf	menu_progress_bar@i_723& (0+255),b
  4560  00135C                     l3589:
  4561                           
  4562                           ; BSR set to: 0
  4563  00135C  0100               	movlb	0	; () banked
  4564  00135E  BF6B               	btfsc	(menu_progress_bar@i_723+1)& (0+255),7,b
  4565  001360  D008               	goto	l3593
  4566  001362  0100               	movlb	0	; () banked
  4567  001364  516B               	movf	(menu_progress_bar@i_723+1)& (0+255),w,b
  4568  001366  E10C               	bnz	l3599
  4569  001368  0E10               	movlw	16
  4570  00136A  0100               	movlb	0	; () banked
  4571  00136C  5D6A               	subwf	menu_progress_bar@i_723& (0+255),w,b
  4572  00136E  B0D8               	btfsc	status,0,c
  4573  001370  D007               	goto	l3599
  4574  001372                     l3593:
  4575                           
  4576                           ; BSR set to: 0
  4577                           ;menu.h: 103: {
  4578                           ;menu.h: 104: Lcd_Write_Char(0xFF);
  4579  001372  0EFF               	movlw	255
  4580  001374  EC50  F00C         	call	_Lcd_Write_Char
  4581  001378  0100               	movlb	0	; () banked
  4582  00137A  4B6A               	infsnz	menu_progress_bar@i_723& (0+255),f,b
  4583  00137C  2B6B               	incf	(menu_progress_bar@i_723+1)& (0+255),f,b
  4584  00137E  D7EE               	goto	l3589
  4585  001380                     l3599:
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;menu.h: 105: }
  4589                           ;menu.h: 106: for (int i = 0; i < 5; i++)
  4590  001380  0E00               	movlw	0
  4591  001382  0100               	movlb	0	; () banked
  4592  001384  6F6D               	movwf	(menu_progress_bar@i_724+1)& (0+255),b
  4593  001386  0E00               	movlw	0
  4594  001388  6F6C               	movwf	menu_progress_bar@i_724& (0+255),b
  4595  00138A                     l3601:
  4596                           
  4597                           ; BSR set to: 0
  4598  00138A  0100               	movlb	0	; () banked
  4599  00138C  BF6D               	btfsc	(menu_progress_bar@i_724+1)& (0+255),7,b
  4600  00138E  D008               	goto	l3605
  4601  001390  0100               	movlb	0	; () banked
  4602  001392  516D               	movf	(menu_progress_bar@i_724+1)& (0+255),w,b
  4603  001394  E112               	bnz	l3609
  4604  001396  0E05               	movlw	5
  4605  001398  0100               	movlb	0	; () banked
  4606  00139A  5D6C               	subwf	menu_progress_bar@i_724& (0+255),w,b
  4607  00139C  B0D8               	btfsc	status,0,c
  4608  00139E  D00D               	goto	l3609
  4609  0013A0                     l3605:
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;menu.h: 107: {
  4613                           ;menu.h: 108: _delay((unsigned long)((20)*(16000000/4000.0)));
  4614  0013A0  0E68               	movlw	104
  4615  0013A2  6E27               	movwf	??_menu_progress_bar& (0+255),c
  4616  0013A4  0EE4               	movlw	228
  4617  0013A6                     u4497:
  4618  0013A6  2EE8               	decfsz	wreg,f,c
  4619  0013A8  D7FE               	goto	u4497
  4620  0013AA  2E27               	decfsz	??_menu_progress_bar& (0+255),f,c
  4621  0013AC  D7FC               	goto	u4497
  4622  0013AE  F000 F000          	nop2	
  4623  0013B2  0100               	movlb	0	; () banked
  4624  0013B4  4B6C               	infsnz	menu_progress_bar@i_724& (0+255),f,b
  4625  0013B6  2B6D               	incf	(menu_progress_bar@i_724+1)& (0+255),f,b
  4626  0013B8  D7E8               	goto	l3601
  4627  0013BA                     l3609:
  4628                           
  4629                           ; BSR set to: 0
  4630                           ;menu.h: 109: }
  4631                           ;menu.h: 110: Lcd_Clear();
  4632  0013BA  ECD7  F00C         	call	_Lcd_Clear	;wreg free
  4633  0013BE  0012               	return		;funcret
  4634  0013C0                     __end_of_menu_progress_bar:
  4635                           	opt stack 0
  4636                           tblptru	equ	0xFF8
  4637                           tblptrh	equ	0xFF7
  4638                           tblptrl	equ	0xFF6
  4639                           tablat	equ	0xFF5
  4640                           prodh	equ	0xFF4
  4641                           prodl	equ	0xFF3
  4642                           intcon	equ	0xFF2
  4643                           postinc0	equ	0xFEE
  4644                           wreg	equ	0xFE8
  4645                           indf1	equ	0xFE7
  4646                           postdec1	equ	0xFE5
  4647                           plusw1	equ	0xFE3
  4648                           fsr1h	equ	0xFE2
  4649                           fsr1l	equ	0xFE1
  4650                           indf2	equ	0xFDF
  4651                           postinc2	equ	0xFDE
  4652                           plusw2	equ	0xFDB
  4653                           fsr2h	equ	0xFDA
  4654                           fsr2l	equ	0xFD9
  4655                           status	equ	0xFD8
  4656                           
  4657 ;; *************** function ___wmul *****************
  4658 ;; Defined at:
  4659 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  4660 ;; Parameters:    Size  Location     Type
  4661 ;;  multiplier      2   30[COMRAM] unsigned int 
  4662 ;;  multiplicand    2   32[COMRAM] unsigned int 
  4663 ;; Auto vars:     Size  Location     Type
  4664 ;;  product         2   34[COMRAM] unsigned int 
  4665 ;; Return value:  Size  Location     Type
  4666 ;;                  2   30[COMRAM] unsigned int 
  4667 ;; Registers used:
  4668 ;;		wreg, status,2, status,0, prodl, prodh
  4669 ;; Tracked objects:
  4670 ;;		On entry : 0/0
  4671 ;;		On exit  : 0/0
  4672 ;;		Unchanged: 0/0
  4673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4674 ;;      Params:         4       0       0       0       0       0       0
  4675 ;;      Locals:         2       0       0       0       0       0       0
  4676 ;;      Temps:          0       0       0       0       0       0       0
  4677 ;;      Totals:         6       0       0       0       0       0       0
  4678 ;;Total ram usage:        6 bytes
  4679 ;; Hardware stack levels used:    1
  4680 ;; Hardware stack levels required when called:    2
  4681 ;; This function calls:
  4682 ;;		Nothing
  4683 ;; This function is called by:
  4684 ;;		_menu_progress_bar
  4685 ;;		_menu_seconds_to_mmss
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           	psect	text3
  4690  001964                     __ptext3:
  4691                           	opt stack 0
  4692  001964                     ___wmul:
  4693                           	opt stack 26
  4694                           
  4695                           ;incstack = 0
  4696  001964  501F               	movf	___wmul@multiplier,w,c
  4697  001966  0221               	mulwf	___wmul@multiplicand,c
  4698  001968  CFF3 F023          	movff	prodl,___wmul@product
  4699  00196C  CFF4 F024          	movff	prodh,___wmul@product+1
  4700  001970  501F               	movf	___wmul@multiplier,w,c
  4701  001972  0222               	mulwf	___wmul@multiplicand+1,c
  4702  001974  50F3               	movf	prodl,w,c
  4703  001976  2624               	addwf	___wmul@product+1,f,c
  4704  001978  5020               	movf	___wmul@multiplier+1,w,c
  4705  00197A  0221               	mulwf	___wmul@multiplicand,c
  4706  00197C  50F3               	movf	prodl,w,c
  4707  00197E  2624               	addwf	___wmul@product+1,f,c
  4708  001980  C023  F01F         	movff	___wmul@product,?___wmul
  4709  001984  C024  F020         	movff	___wmul@product+1,?___wmul+1
  4710  001988  0012               	return	
  4711  00198A                     __end_of___wmul:
  4712                           	opt stack 0
  4713                           tblptru	equ	0xFF8
  4714                           tblptrh	equ	0xFF7
  4715                           tblptrl	equ	0xFF6
  4716                           tablat	equ	0xFF5
  4717                           prodh	equ	0xFF4
  4718                           prodl	equ	0xFF3
  4719                           intcon	equ	0xFF2
  4720                           postinc0	equ	0xFEE
  4721                           wreg	equ	0xFE8
  4722                           indf1	equ	0xFE7
  4723                           postdec1	equ	0xFE5
  4724                           plusw1	equ	0xFE3
  4725                           fsr1h	equ	0xFE2
  4726                           fsr1l	equ	0xFE1
  4727                           indf2	equ	0xFDF
  4728                           postinc2	equ	0xFDE
  4729                           plusw2	equ	0xFDB
  4730                           fsr2h	equ	0xFDA
  4731                           fsr2l	equ	0xFD9
  4732                           status	equ	0xFD8
  4733                           
  4734 ;; *************** function ___lwdiv *****************
  4735 ;; Defined at:
  4736 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;  dividend        2   23[COMRAM] unsigned int 
  4739 ;;  divisor         2   25[COMRAM] unsigned int 
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;  quotient        2   28[COMRAM] unsigned int 
  4742 ;;  counter         1   27[COMRAM] unsigned char 
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  2   23[COMRAM] unsigned int 
  4745 ;; Registers used:
  4746 ;;		wreg, status,2, status,0
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4752 ;;      Params:         4       0       0       0       0       0       0
  4753 ;;      Locals:         3       0       0       0       0       0       0
  4754 ;;      Temps:          0       0       0       0       0       0       0
  4755 ;;      Totals:         7       0       0       0       0       0       0
  4756 ;;Total ram usage:        7 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    2
  4759 ;; This function calls:
  4760 ;;		Nothing
  4761 ;; This function is called by:
  4762 ;;		_menu_progress_bar
  4763 ;;		_menu_seconds_to_mmss
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           	psect	text4
  4768  00176C                     __ptext4:
  4769                           	opt stack 0
  4770  00176C                     ___lwdiv:
  4771                           	opt stack 26
  4772                           
  4773                           ;incstack = 0
  4774  00176C  0E00               	movlw	0
  4775  00176E  6E1E               	movwf	___lwdiv@quotient+1,c
  4776  001770  0E00               	movlw	0
  4777  001772  6E1D               	movwf	___lwdiv@quotient,c
  4778  001774  501A               	movf	___lwdiv@divisor,w,c
  4779  001776  101B               	iorwf	___lwdiv@divisor+1,w,c
  4780  001778  B4D8               	btfsc	status,2,c
  4781  00177A  D01C               	goto	l750
  4782  00177C  0E01               	movlw	1
  4783  00177E  6E1C               	movwf	___lwdiv@counter,c
  4784  001780  D004               	goto	l3533
  4785  001782                     l3531:
  4786  001782  90D8               	bcf	status,0,c
  4787  001784  361A               	rlcf	___lwdiv@divisor,f,c
  4788  001786  361B               	rlcf	___lwdiv@divisor+1,f,c
  4789  001788  2A1C               	incf	___lwdiv@counter,f,c
  4790  00178A                     l3533:
  4791  00178A  AE1B               	btfss	___lwdiv@divisor+1,7,c
  4792  00178C  D7FA               	goto	l3531
  4793  00178E                     l3535:
  4794  00178E  90D8               	bcf	status,0,c
  4795  001790  361D               	rlcf	___lwdiv@quotient,f,c
  4796  001792  361E               	rlcf	___lwdiv@quotient+1,f,c
  4797  001794  501A               	movf	___lwdiv@divisor,w,c
  4798  001796  5C18               	subwf	___lwdiv@dividend,w,c
  4799  001798  501B               	movf	___lwdiv@divisor+1,w,c
  4800  00179A  5819               	subwfb	___lwdiv@dividend+1,w,c
  4801  00179C  A0D8               	btfss	status,0,c
  4802  00179E  D005               	goto	l3543
  4803  0017A0  501A               	movf	___lwdiv@divisor,w,c
  4804  0017A2  5E18               	subwf	___lwdiv@dividend,f,c
  4805  0017A4  501B               	movf	___lwdiv@divisor+1,w,c
  4806  0017A6  5A19               	subwfb	___lwdiv@dividend+1,f,c
  4807  0017A8  801D               	bsf	___lwdiv@quotient,0,c
  4808  0017AA                     l3543:
  4809  0017AA  90D8               	bcf	status,0,c
  4810  0017AC  321B               	rrcf	___lwdiv@divisor+1,f,c
  4811  0017AE  321A               	rrcf	___lwdiv@divisor,f,c
  4812  0017B0  2E1C               	decfsz	___lwdiv@counter,f,c
  4813  0017B2  D7ED               	goto	l3535
  4814  0017B4                     l750:
  4815  0017B4  C01D  F018         	movff	___lwdiv@quotient,?___lwdiv
  4816  0017B8  C01E  F019         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4817  0017BC  0012               	return		;funcret
  4818  0017BE                     __end_of___lwdiv:
  4819                           	opt stack 0
  4820                           tblptru	equ	0xFF8
  4821                           tblptrh	equ	0xFF7
  4822                           tblptrl	equ	0xFF6
  4823                           tablat	equ	0xFF5
  4824                           prodh	equ	0xFF4
  4825                           prodl	equ	0xFF3
  4826                           intcon	equ	0xFF2
  4827                           postinc0	equ	0xFEE
  4828                           wreg	equ	0xFE8
  4829                           indf1	equ	0xFE7
  4830                           postdec1	equ	0xFE5
  4831                           plusw1	equ	0xFE3
  4832                           fsr1h	equ	0xFE2
  4833                           fsr1l	equ	0xFE1
  4834                           indf2	equ	0xFDF
  4835                           postinc2	equ	0xFDE
  4836                           plusw2	equ	0xFDB
  4837                           fsr2h	equ	0xFDA
  4838                           fsr2l	equ	0xFD9
  4839                           status	equ	0xFD8
  4840                           
  4841 ;; *************** function _Lcd_Write_String *****************
  4842 ;; Defined at:
  4843 ;;		line 111 in file "lcd.h"
  4844 ;; Parameters:    Size  Location     Type
  4845 ;;  a               2   27[COMRAM] PTR unsigned char 
  4846 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(2), 
  4847 ;;		 -> STR_23(5), STR_22(17), STR_21(17), STR_20(17), 
  4848 ;;		 -> STR_19(17), STR_18(17), STR_17(11), STR_16(6), 
  4849 ;;		 -> STR_15(5), STR_14(17), STR_13(17), STR_12(17), 
  4850 ;;		 -> STR_11(17), STR_10(17), STR_9(17), STR_8(17), 
  4851 ;;		 -> STR_7(17), STR_6(17), STR_5(17), STR_4(17), 
  4852 ;;		 -> STR_3(17), STR_2(17), STR_1(2), RAM(1535), 
  4853 ;; Auto vars:     Size  Location     Type
  4854 ;;  i               2   31[COMRAM] int 
  4855 ;; Return value:  Size  Location     Type
  4856 ;;                  1    wreg      void 
  4857 ;; Registers used:
  4858 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4859 ;; Tracked objects:
  4860 ;;		On entry : 0/0
  4861 ;;		On exit  : 0/0
  4862 ;;		Unchanged: 0/0
  4863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4864 ;;      Params:         2       0       0       0       0       0       0
  4865 ;;      Locals:         2       0       0       0       0       0       0
  4866 ;;      Temps:          2       0       0       0       0       0       0
  4867 ;;      Totals:         6       0       0       0       0       0       0
  4868 ;;Total ram usage:        6 bytes
  4869 ;; Hardware stack levels used:    1
  4870 ;; Hardware stack levels required when called:    4
  4871 ;; This function calls:
  4872 ;;		_Lcd_Write_Char
  4873 ;; This function is called by:
  4874 ;;		_menu_progress_bar
  4875 ;;		_main
  4876 ;;		_start_routine
  4877 ;;		_menu_animation_i2c
  4878 ;; This function uses a non-reentrant model
  4879 ;;
  4880                           
  4881                           	psect	text5
  4882  0016FA                     __ptext5:
  4883                           	opt stack 0
  4884  0016FA                     _Lcd_Write_String:
  4885                           	opt stack 24
  4886                           
  4887                           ;lcd.h: 113: int i;
  4888                           ;lcd.h: 114: for(i=0;a[i]!='\0';i++)
  4889                           
  4890                           ;incstack = 0
  4891  0016FA  0E00               	movlw	0
  4892  0016FC  6E21               	movwf	Lcd_Write_String@i+1,c
  4893  0016FE  0E00               	movlw	0
  4894  001700  6E20               	movwf	Lcd_Write_String@i,c
  4895  001702  D01A               	goto	l3429
  4896  001704                     l3425:
  4897                           
  4898                           ;lcd.h: 115: Lcd_Write_Char(a[i]);
  4899  001704  5020               	movf	Lcd_Write_String@i,w,c
  4900  001706  241C               	addwf	Lcd_Write_String@a,w,c
  4901  001708  6E1E               	movwf	??_Lcd_Write_String& (0+255),c
  4902  00170A  5021               	movf	Lcd_Write_String@i+1,w,c
  4903  00170C  201D               	addwfc	Lcd_Write_String@a+1,w,c
  4904  00170E  6E1F               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  4905  001710  C01E  FFF6         	movff	??_Lcd_Write_String,tblptrl
  4906  001714  C01F  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  4907  001718  6AF8               	clrf	tblptru,c
  4908  00171A  0E05               	movlw	(high __ramtop+-1)
  4909  00171C  64F7               	cpfsgt	tblptrh,c
  4910  00171E  D003               	bra	u3057
  4911  001720  0008               	tblrd		*
  4912  001722  50F5               	movf	tablat,w,c
  4913  001724  D005               	bra	u3050
  4914  001726                     u3057:
  4915  001726  CFF6 FFE9          	movff	tblptrl,fsr0l
  4916  00172A  CFF7 FFEA          	movff	tblptrh,fsr0h
  4917  00172E  50EF               	movf	indf0,w,c
  4918  001730                     u3050:
  4919  001730  EC50  F00C         	call	_Lcd_Write_Char
  4920  001734  4A20               	infsnz	Lcd_Write_String@i,f,c
  4921  001736  2A21               	incf	Lcd_Write_String@i+1,f,c
  4922  001738                     l3429:
  4923  001738  5020               	movf	Lcd_Write_String@i,w,c
  4924  00173A  241C               	addwf	Lcd_Write_String@a,w,c
  4925  00173C  6E1E               	movwf	??_Lcd_Write_String& (0+255),c
  4926  00173E  5021               	movf	Lcd_Write_String@i+1,w,c
  4927  001740  201D               	addwfc	Lcd_Write_String@a+1,w,c
  4928  001742  6E1F               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  4929  001744  C01E  FFF6         	movff	??_Lcd_Write_String,tblptrl
  4930  001748  C01F  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  4931  00174C  6AF8               	clrf	tblptru,c
  4932  00174E  0E05               	movlw	(high __ramtop+-1)
  4933  001750  64F7               	cpfsgt	tblptrh,c
  4934  001752  D003               	bra	u3067
  4935  001754  0008               	tblrd		*
  4936  001756  50F5               	movf	tablat,w,c
  4937  001758  D005               	bra	u3060
  4938  00175A                     u3067:
  4939  00175A  CFF6 FFE9          	movff	tblptrl,fsr0l
  4940  00175E  CFF7 FFEA          	movff	tblptrh,fsr0h
  4941  001762  50EF               	movf	indf0,w,c
  4942  001764                     u3060:
  4943  001764  0900               	iorlw	0
  4944  001766  B4D8               	btfsc	status,2,c
  4945  001768  0012               	return	
  4946  00176A  D7CC               	goto	l3425
  4947  00176C                     __end_of_Lcd_Write_String:
  4948                           	opt stack 0
  4949                           tblptru	equ	0xFF8
  4950                           tblptrh	equ	0xFF7
  4951                           tblptrl	equ	0xFF6
  4952                           tablat	equ	0xFF5
  4953                           prodh	equ	0xFF4
  4954                           prodl	equ	0xFF3
  4955                           intcon	equ	0xFF2
  4956                           indf0	equ	0xFEF
  4957                           postinc0	equ	0xFEE
  4958                           fsr0h	equ	0xFEA
  4959                           fsr0l	equ	0xFE9
  4960                           wreg	equ	0xFE8
  4961                           indf1	equ	0xFE7
  4962                           postdec1	equ	0xFE5
  4963                           plusw1	equ	0xFE3
  4964                           fsr1h	equ	0xFE2
  4965                           fsr1l	equ	0xFE1
  4966                           indf2	equ	0xFDF
  4967                           postinc2	equ	0xFDE
  4968                           plusw2	equ	0xFDB
  4969                           fsr2h	equ	0xFDA
  4970                           fsr2l	equ	0xFD9
  4971                           status	equ	0xFD8
  4972                           
  4973 ;; *************** function _Lcd_Write_Char *****************
  4974 ;; Defined at:
  4975 ;;		line 95 in file "lcd.h"
  4976 ;; Parameters:    Size  Location     Type
  4977 ;;  a               1    wreg     unsigned char 
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;  a               1   26[COMRAM] unsigned char 
  4980 ;;  y               1   25[COMRAM] unsigned char 
  4981 ;;  temp            1   24[COMRAM] unsigned char 
  4982 ;; Return value:  Size  Location     Type
  4983 ;;                  1    wreg      void 
  4984 ;; Registers used:
  4985 ;;		wreg, status,2, status,0, cstack
  4986 ;; Tracked objects:
  4987 ;;		On entry : 0/0
  4988 ;;		On exit  : 0/0
  4989 ;;		Unchanged: 0/0
  4990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4991 ;;      Params:         0       0       0       0       0       0       0
  4992 ;;      Locals:         3       0       0       0       0       0       0
  4993 ;;      Temps:          0       0       0       0       0       0       0
  4994 ;;      Totals:         3       0       0       0       0       0       0
  4995 ;;Total ram usage:        3 bytes
  4996 ;; Hardware stack levels used:    1
  4997 ;; Hardware stack levels required when called:    3
  4998 ;; This function calls:
  4999 ;;		_Lcd_Port
  5000 ;; This function is called by:
  5001 ;;		_Lcd_Write_String
  5002 ;;		_menu_progress_bar
  5003 ;;		_main
  5004 ;;		_start_routine
  5005 ;;		_menu_main
  5006 ;; This function uses a non-reentrant model
  5007 ;;
  5008                           
  5009                           	psect	text6
  5010  0018A0                     __ptext6:
  5011                           	opt stack 0
  5012  0018A0                     _Lcd_Write_Char:
  5013                           	opt stack 24
  5014                           
  5015                           ;incstack = 0
  5016                           ;Lcd_Write_Char@a stored from wreg
  5017  0018A0  6E1B               	movwf	Lcd_Write_Char@a,c
  5018                           
  5019                           ;lcd.h: 97: char temp,y;
  5020                           ;lcd.h: 98: temp = a&0x0F;
  5021  0018A2  501B               	movf	Lcd_Write_Char@a,w,c
  5022  0018A4  0B0F               	andlw	15
  5023  0018A6  6E19               	movwf	Lcd_Write_Char@temp,c
  5024                           
  5025                           ;lcd.h: 99: y = a&0xF0;
  5026  0018A8  501B               	movf	Lcd_Write_Char@a,w,c
  5027  0018AA  0BF0               	andlw	240
  5028  0018AC  6E1A               	movwf	Lcd_Write_Char@y,c
  5029                           
  5030                           ;lcd.h: 100: PORTDbits.RD5 = 1;
  5031  0018AE  8A83               	bsf	3971,5,c	;volatile
  5032                           
  5033                           ;lcd.h: 101: Lcd_Port(y>>4);
  5034  0018B0  381A               	swapf	Lcd_Write_Char@y,w,c
  5035  0018B2  0B0F               	andlw	15
  5036  0018B4  EC88  F00C         	call	_Lcd_Port
  5037                           
  5038                           ;lcd.h: 102: PORTDbits.RD4 = 1;
  5039  0018B8  8883               	bsf	3971,4,c	;volatile
  5040                           
  5041                           ;lcd.h: 103: _delay((unsigned long)((40)*(16000000/4000000.0)));
  5042  0018BA  0E35               	movlw	53
  5043  0018BC                     u4507:
  5044  0018BC  2EE8               	decfsz	wreg,f,c
  5045  0018BE  D7FE               	goto	u4507
  5046  0018C0  F000               	nop	
  5047                           
  5048                           ;lcd.h: 104: PORTDbits.RD4 = 0;
  5049  0018C2  9883               	bcf	3971,4,c	;volatile
  5050                           
  5051                           ;lcd.h: 105: Lcd_Port(temp);
  5052  0018C4  5019               	movf	Lcd_Write_Char@temp,w,c
  5053  0018C6  EC88  F00C         	call	_Lcd_Port
  5054                           
  5055                           ;lcd.h: 106: PORTDbits.RD4 = 1;
  5056  0018CA  8883               	bsf	3971,4,c	;volatile
  5057                           
  5058                           ;lcd.h: 107: _delay((unsigned long)((40)*(16000000/4000000.0)));
  5059  0018CC  0E35               	movlw	53
  5060  0018CE                     u4517:
  5061  0018CE  2EE8               	decfsz	wreg,f,c
  5062  0018D0  D7FE               	goto	u4517
  5063  0018D2  F000               	nop	
  5064                           
  5065                           ;lcd.h: 108: PORTDbits.RD4 = 0;
  5066  0018D4  9883               	bcf	3971,4,c	;volatile
  5067  0018D6  0012               	return		;funcret
  5068  0018D8                     __end_of_Lcd_Write_Char:
  5069                           	opt stack 0
  5070                           tblptru	equ	0xFF8
  5071                           tblptrh	equ	0xFF7
  5072                           tblptrl	equ	0xFF6
  5073                           tablat	equ	0xFF5
  5074                           prodh	equ	0xFF4
  5075                           prodl	equ	0xFF3
  5076                           intcon	equ	0xFF2
  5077                           indf0	equ	0xFEF
  5078                           postinc0	equ	0xFEE
  5079                           fsr0h	equ	0xFEA
  5080                           fsr0l	equ	0xFE9
  5081                           wreg	equ	0xFE8
  5082                           indf1	equ	0xFE7
  5083                           postdec1	equ	0xFE5
  5084                           plusw1	equ	0xFE3
  5085                           fsr1h	equ	0xFE2
  5086                           fsr1l	equ	0xFE1
  5087                           indf2	equ	0xFDF
  5088                           postinc2	equ	0xFDE
  5089                           plusw2	equ	0xFDB
  5090                           fsr2h	equ	0xFDA
  5091                           fsr2l	equ	0xFD9
  5092                           status	equ	0xFD8
  5093                           
  5094 ;; *************** function _Lcd_Set_Cursor *****************
  5095 ;; Defined at:
  5096 ;;		line 55 in file "lcd.h"
  5097 ;; Parameters:    Size  Location     Type
  5098 ;;  a               1    wreg     unsigned char 
  5099 ;;  b               1   25[COMRAM] unsigned char 
  5100 ;; Auto vars:     Size  Location     Type
  5101 ;;  a               1   26[COMRAM] unsigned char 
  5102 ;;  temp            1   29[COMRAM] unsigned char 
  5103 ;;  y               1   28[COMRAM] unsigned char 
  5104 ;;  z               1   27[COMRAM] unsigned char 
  5105 ;; Return value:  Size  Location     Type
  5106 ;;                  1    wreg      void 
  5107 ;; Registers used:
  5108 ;;		wreg, status,2, status,0, cstack
  5109 ;; Tracked objects:
  5110 ;;		On entry : 0/0
  5111 ;;		On exit  : 0/0
  5112 ;;		Unchanged: 0/0
  5113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5114 ;;      Params:         1       0       0       0       0       0       0
  5115 ;;      Locals:         4       0       0       0       0       0       0
  5116 ;;      Temps:          0       0       0       0       0       0       0
  5117 ;;      Totals:         5       0       0       0       0       0       0
  5118 ;;Total ram usage:        5 bytes
  5119 ;; Hardware stack levels used:    1
  5120 ;; Hardware stack levels required when called:    4
  5121 ;; This function calls:
  5122 ;;		_Lcd_Cmd
  5123 ;; This function is called by:
  5124 ;;		_menu_progress_bar
  5125 ;;		_main
  5126 ;;		_start_routine
  5127 ;;		_menu_main
  5128 ;;		_menu_animation_i2c
  5129 ;; This function uses a non-reentrant model
  5130 ;;
  5131                           
  5132                           	psect	text7
  5133  001810                     __ptext7:
  5134                           	opt stack 0
  5135  001810                     _Lcd_Set_Cursor:
  5136                           	opt stack 24
  5137                           
  5138                           ;incstack = 0
  5139                           ;Lcd_Set_Cursor@a stored from wreg
  5140  001810  6E1B               	movwf	Lcd_Set_Cursor@a,c
  5141                           
  5142                           ;lcd.h: 57: char temp,z,y;
  5143                           ;lcd.h: 58: if(a == 1)
  5144  001812  041B               	decf	Lcd_Set_Cursor@a,w,c
  5145  001814  A4D8               	btfss	status,2,c
  5146  001816  D010               	goto	l3415
  5147                           
  5148                           ;lcd.h: 59: {
  5149                           ;lcd.h: 60: temp = 0x80 + b - 1;
  5150  001818  501A               	movf	Lcd_Set_Cursor@b,w,c
  5151  00181A  0F7F               	addlw	127
  5152  00181C  6E1E               	movwf	Lcd_Set_Cursor@temp,c
  5153                           
  5154                           ;lcd.h: 61: z = temp>>4;
  5155  00181E  381E               	swapf	Lcd_Set_Cursor@temp,w,c
  5156  001820  0B0F               	andlw	15
  5157  001822  6E1C               	movwf	Lcd_Set_Cursor@z,c
  5158                           
  5159                           ;lcd.h: 62: y = temp & 0x0F;
  5160  001824  501E               	movf	Lcd_Set_Cursor@temp,w,c
  5161  001826  0B0F               	andlw	15
  5162  001828  6E1D               	movwf	Lcd_Set_Cursor@y,c
  5163                           
  5164                           ;lcd.h: 63: Lcd_Cmd(z);
  5165  00182A  501C               	movf	Lcd_Set_Cursor@z,w,c
  5166  00182C  ECE7  F00C         	call	_Lcd_Cmd
  5167                           
  5168                           ;lcd.h: 64: Lcd_Cmd(y);
  5169  001830  501D               	movf	Lcd_Set_Cursor@y,w,c
  5170  001832  ECE7  F00C         	call	_Lcd_Cmd
  5171                           
  5172                           ;lcd.h: 65: }
  5173  001836  0012               	return	
  5174  001838                     l3415:
  5175                           
  5176                           ;lcd.h: 66: else if(a == 2)
  5177  001838  0E02               	movlw	2
  5178  00183A  181B               	xorwf	Lcd_Set_Cursor@a,w,c
  5179  00183C  A4D8               	btfss	status,2,c
  5180  00183E  0012               	return	
  5181                           
  5182                           ;lcd.h: 67: {
  5183                           ;lcd.h: 68: temp = 0xC0 + b - 1;
  5184  001840  501A               	movf	Lcd_Set_Cursor@b,w,c
  5185  001842  0FBF               	addlw	191
  5186  001844  6E1E               	movwf	Lcd_Set_Cursor@temp,c
  5187                           
  5188                           ;lcd.h: 69: z = temp>>4;
  5189  001846  381E               	swapf	Lcd_Set_Cursor@temp,w,c
  5190  001848  0B0F               	andlw	15
  5191  00184A  6E1C               	movwf	Lcd_Set_Cursor@z,c
  5192                           
  5193                           ;lcd.h: 70: y = temp & 0x0F;
  5194  00184C  501E               	movf	Lcd_Set_Cursor@temp,w,c
  5195  00184E  0B0F               	andlw	15
  5196  001850  6E1D               	movwf	Lcd_Set_Cursor@y,c
  5197                           
  5198                           ;lcd.h: 71: Lcd_Cmd(z);
  5199  001852  501C               	movf	Lcd_Set_Cursor@z,w,c
  5200  001854  ECE7  F00C         	call	_Lcd_Cmd
  5201                           
  5202                           ;lcd.h: 72: Lcd_Cmd(y);
  5203  001858  501D               	movf	Lcd_Set_Cursor@y,w,c
  5204  00185A  ECE7  F00C         	call	_Lcd_Cmd
  5205  00185E  0012               	return	
  5206  001860                     __end_of_Lcd_Set_Cursor:
  5207                           	opt stack 0
  5208                           tblptru	equ	0xFF8
  5209                           tblptrh	equ	0xFF7
  5210                           tblptrl	equ	0xFF6
  5211                           tablat	equ	0xFF5
  5212                           prodh	equ	0xFF4
  5213                           prodl	equ	0xFF3
  5214                           intcon	equ	0xFF2
  5215                           indf0	equ	0xFEF
  5216                           postinc0	equ	0xFEE
  5217                           fsr0h	equ	0xFEA
  5218                           fsr0l	equ	0xFE9
  5219                           wreg	equ	0xFE8
  5220                           indf1	equ	0xFE7
  5221                           postdec1	equ	0xFE5
  5222                           plusw1	equ	0xFE3
  5223                           fsr1h	equ	0xFE2
  5224                           fsr1l	equ	0xFE1
  5225                           indf2	equ	0xFDF
  5226                           postinc2	equ	0xFDE
  5227                           plusw2	equ	0xFDB
  5228                           fsr2h	equ	0xFDA
  5229                           fsr2l	equ	0xFD9
  5230                           status	equ	0xFD8
  5231                           
  5232 ;; *************** function _Lcd_Clear *****************
  5233 ;; Defined at:
  5234 ;;		line 48 in file "lcd.h"
  5235 ;; Parameters:    Size  Location     Type
  5236 ;;		None
  5237 ;; Auto vars:     Size  Location     Type
  5238 ;;		None
  5239 ;; Return value:  Size  Location     Type
  5240 ;;                  1    wreg      void 
  5241 ;; Registers used:
  5242 ;;		wreg, status,2, cstack
  5243 ;; Tracked objects:
  5244 ;;		On entry : 0/0
  5245 ;;		On exit  : 0/0
  5246 ;;		Unchanged: 0/0
  5247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5248 ;;      Params:         0       0       0       0       0       0       0
  5249 ;;      Locals:         0       0       0       0       0       0       0
  5250 ;;      Temps:          1       0       0       0       0       0       0
  5251 ;;      Totals:         1       0       0       0       0       0       0
  5252 ;;Total ram usage:        1 bytes
  5253 ;; Hardware stack levels used:    1
  5254 ;; Hardware stack levels required when called:    4
  5255 ;; This function calls:
  5256 ;;		_Lcd_Cmd
  5257 ;; This function is called by:
  5258 ;;		_menu_progress_bar
  5259 ;;		_main
  5260 ;;		_start_routine
  5261 ;; This function uses a non-reentrant model
  5262 ;;
  5263                           
  5264                           	psect	text8
  5265  0019AE                     __ptext8:
  5266                           	opt stack 0
  5267  0019AE                     _Lcd_Clear:
  5268                           	opt stack 24
  5269                           
  5270                           ;lcd.h: 50: Lcd_Cmd(0);
  5271                           
  5272                           ;incstack = 0
  5273  0019AE  0E00               	movlw	0
  5274  0019B0  ECE7  F00C         	call	_Lcd_Cmd
  5275                           
  5276                           ;lcd.h: 51: Lcd_Cmd(1);
  5277  0019B4  0E01               	movlw	1
  5278  0019B6  ECE7  F00C         	call	_Lcd_Cmd
  5279                           
  5280                           ;lcd.h: 52: _delay((unsigned long)((5)*(16000000/4000.0)));
  5281  0019BA  0E1A               	movlw	26
  5282  0019BC  6E1A               	movwf	??_Lcd_Clear& (0+255),c
  5283  0019BE  0EF8               	movlw	248
  5284  0019C0                     u4527:
  5285  0019C0  2EE8               	decfsz	wreg,f,c
  5286  0019C2  D7FE               	goto	u4527
  5287  0019C4  2E1A               	decfsz	??_Lcd_Clear& (0+255),f,c
  5288  0019C6  D7FC               	goto	u4527
  5289  0019C8  F000 F000          	nop2	
  5290  0019CC  0012               	return		;funcret
  5291  0019CE                     __end_of_Lcd_Clear:
  5292                           	opt stack 0
  5293                           tblptru	equ	0xFF8
  5294                           tblptrh	equ	0xFF7
  5295                           tblptrl	equ	0xFF6
  5296                           tablat	equ	0xFF5
  5297                           prodh	equ	0xFF4
  5298                           prodl	equ	0xFF3
  5299                           intcon	equ	0xFF2
  5300                           indf0	equ	0xFEF
  5301                           postinc0	equ	0xFEE
  5302                           fsr0h	equ	0xFEA
  5303                           fsr0l	equ	0xFE9
  5304                           wreg	equ	0xFE8
  5305                           indf1	equ	0xFE7
  5306                           postdec1	equ	0xFE5
  5307                           plusw1	equ	0xFE3
  5308                           fsr1h	equ	0xFE2
  5309                           fsr1l	equ	0xFE1
  5310                           indf2	equ	0xFDF
  5311                           postinc2	equ	0xFDE
  5312                           plusw2	equ	0xFDB
  5313                           fsr2h	equ	0xFDA
  5314                           fsr2l	equ	0xFD9
  5315                           status	equ	0xFD8
  5316                           
  5317 ;; *************** function _latch_keypad *****************
  5318 ;; Defined at:
  5319 ;;		line 318 in file "main.c"
  5320 ;; Parameters:    Size  Location     Type
  5321 ;;  x               2   23[COMRAM] PTR unsigned char 
  5322 ;;		 -> start_routine@x(1), main@x(1), 
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;		None
  5325 ;; Return value:  Size  Location     Type
  5326 ;;                  1    wreg      void 
  5327 ;; Registers used:
  5328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5329 ;; Tracked objects:
  5330 ;;		On entry : 0/0
  5331 ;;		On exit  : 0/0
  5332 ;;		Unchanged: 0/0
  5333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5334 ;;      Params:         2       0       0       0       0       0       0
  5335 ;;      Locals:         0       0       0       0       0       0       0
  5336 ;;      Temps:          2       0       0       0       0       0       0
  5337 ;;      Totals:         4       0       0       0       0       0       0
  5338 ;;Total ram usage:        4 bytes
  5339 ;; Hardware stack levels used:    1
  5340 ;; Hardware stack levels required when called:    3
  5341 ;; This function calls:
  5342 ;;		_read_keypad
  5343 ;; This function is called by:
  5344 ;;		_main
  5345 ;;		_start_routine
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           	psect	text9
  5350  0018D8                     __ptext9:
  5351                           	opt stack 0
  5352  0018D8                     _latch_keypad:
  5353                           	opt stack 26
  5354                           
  5355                           ;main.c: 320: while (*x == read_keypad())
  5356                           
  5357                           ;incstack = 0
  5358  0018D8  D009               	goto	l3639
  5359  0018DA                     l3637:
  5360                           
  5361                           ;main.c: 321: {
  5362                           ;main.c: 322: _delay((unsigned long)((20)*(16000000/4000.0)));
  5363  0018DA  0E68               	movlw	104
  5364  0018DC  6E1A               	movwf	??_latch_keypad& (0+255),c
  5365  0018DE  0EE4               	movlw	228
  5366  0018E0                     u4537:
  5367  0018E0  2EE8               	decfsz	wreg,f,c
  5368  0018E2  D7FE               	goto	u4537
  5369  0018E4  2E1A               	decfsz	??_latch_keypad& (0+255),f,c
  5370  0018E6  D7FC               	goto	u4537
  5371  0018E8  F000 F000          	nop2	
  5372  0018EC                     l3639:
  5373  0018EC  C018  FFD9         	movff	latch_keypad@x,fsr2l
  5374  0018F0  C019  FFDA         	movff	latch_keypad@x+1,fsr2h
  5375  0018F4  ECE0  F009         	call	_read_keypad	;wreg free
  5376  0018F8  6E1B               	movwf	(??_latch_keypad+1)& (0+255),c
  5377  0018FA  50DE               	movf	postinc2,w,c
  5378  0018FC  181B               	xorwf	??_latch_keypad+1,w,c
  5379  0018FE  B4D8               	btfsc	status,2,c
  5380  001900  D7EC               	goto	l3637
  5381                           
  5382                           ;main.c: 323: }
  5383                           ;main.c: 324: *x = '_';
  5384  001902  C018  FFD9         	movff	latch_keypad@x,fsr2l
  5385  001906  C019  FFDA         	movff	latch_keypad@x+1,fsr2h
  5386  00190A  0E5F               	movlw	95
  5387  00190C  6EDF               	movwf	indf2,c
  5388  00190E  0012               	return		;funcret
  5389  001910                     __end_of_latch_keypad:
  5390                           	opt stack 0
  5391                           tblptru	equ	0xFF8
  5392                           tblptrh	equ	0xFF7
  5393                           tblptrl	equ	0xFF6
  5394                           tablat	equ	0xFF5
  5395                           prodh	equ	0xFF4
  5396                           prodl	equ	0xFF3
  5397                           intcon	equ	0xFF2
  5398                           indf0	equ	0xFEF
  5399                           postinc0	equ	0xFEE
  5400                           fsr0h	equ	0xFEA
  5401                           fsr0l	equ	0xFE9
  5402                           wreg	equ	0xFE8
  5403                           indf1	equ	0xFE7
  5404                           postdec1	equ	0xFE5
  5405                           plusw1	equ	0xFE3
  5406                           fsr1h	equ	0xFE2
  5407                           fsr1l	equ	0xFE1
  5408                           indf2	equ	0xFDF
  5409                           postinc2	equ	0xFDE
  5410                           plusw2	equ	0xFDB
  5411                           fsr2h	equ	0xFDA
  5412                           fsr2l	equ	0xFD9
  5413                           status	equ	0xFD8
  5414                           
  5415 ;; *************** function _read_keypad *****************
  5416 ;; Defined at:
  5417 ;;		line 295 in file "main.c"
  5418 ;; Parameters:    Size  Location     Type
  5419 ;;		None
  5420 ;; Auto vars:     Size  Location     Type
  5421 ;;		None
  5422 ;; Return value:  Size  Location     Type
  5423 ;;                  1    wreg      unsigned char 
  5424 ;; Registers used:
  5425 ;;		wreg, status,2
  5426 ;; Tracked objects:
  5427 ;;		On entry : 0/0
  5428 ;;		On exit  : 0/0
  5429 ;;		Unchanged: 0/0
  5430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5431 ;;      Params:         0       0       0       0       0       0       0
  5432 ;;      Locals:         0       0       0       0       0       0       0
  5433 ;;      Temps:          0       0       0       0       0       0       0
  5434 ;;      Totals:         0       0       0       0       0       0       0
  5435 ;;Total ram usage:        0 bytes
  5436 ;; Hardware stack levels used:    1
  5437 ;; Hardware stack levels required when called:    2
  5438 ;; This function calls:
  5439 ;;		Nothing
  5440 ;; This function is called by:
  5441 ;;		_main
  5442 ;;		_latch_keypad
  5443 ;;		_start_routine
  5444 ;; This function uses a non-reentrant model
  5445 ;;
  5446                           
  5447                           	psect	text10
  5448  0013C0                     __ptext10:
  5449                           	opt stack 0
  5450  0013C0                     _read_keypad:
  5451                           	opt stack 27
  5452                           
  5453                           ;main.c: 297: TRISB = 0b01111000;
  5454                           
  5455                           ;incstack = 0
  5456  0013C0  0E78               	movlw	120
  5457  0013C2  6E93               	movwf	3987,c	;volatile
  5458                           
  5459                           ;main.c: 298: PORTB = 0b00000001;
  5460  0013C4  0E01               	movlw	1
  5461  0013C6  6E81               	movwf	3969,c	;volatile
  5462                           
  5463                           ;main.c: 300: if (PORTBbits.RB6) {PORTB = 0x00; return '*';}
  5464  0013C8  AC81               	btfss	3969,6,c	;volatile
  5465  0013CA  D004               	goto	l261
  5466  0013CC  0E00               	movlw	0
  5467  0013CE  6E81               	movwf	3969,c	;volatile
  5468  0013D0  0E2A               	movlw	42
  5469  0013D2  0012               	return	
  5470  0013D4                     l261:
  5471                           
  5472                           ;main.c: 301: if (PORTBbits.RB3) {PORTB = 0x00; return '1';}
  5473  0013D4  A681               	btfss	3969,3,c	;volatile
  5474  0013D6  D004               	goto	l263
  5475  0013D8  0E00               	movlw	0
  5476  0013DA  6E81               	movwf	3969,c	;volatile
  5477  0013DC  0E31               	movlw	49
  5478  0013DE  0012               	return	
  5479  0013E0                     l263:
  5480                           
  5481                           ;main.c: 302: if (PORTBbits.RB4) {PORTB = 0x00; return '4';}
  5482  0013E0  A881               	btfss	3969,4,c	;volatile
  5483  0013E2  D004               	goto	l264
  5484  0013E4  0E00               	movlw	0
  5485  0013E6  6E81               	movwf	3969,c	;volatile
  5486  0013E8  0E34               	movlw	52
  5487  0013EA  0012               	return	
  5488  0013EC                     l264:
  5489                           
  5490                           ;main.c: 303: if (PORTBbits.RB5) {PORTB = 0x00; return '7';}
  5491  0013EC  AA81               	btfss	3969,5,c	;volatile
  5492  0013EE  D004               	goto	l3459
  5493  0013F0  0E00               	movlw	0
  5494  0013F2  6E81               	movwf	3969,c	;volatile
  5495  0013F4  0E37               	movlw	55
  5496  0013F6  0012               	return	
  5497  0013F8                     l3459:
  5498                           
  5499                           ;main.c: 304: PORTB = 0b00000010;
  5500  0013F8  0E02               	movlw	2
  5501  0013FA  6E81               	movwf	3969,c	;volatile
  5502                           
  5503                           ;main.c: 306: if (PORTBbits.RB3) {PORTB = 0x00; return '2';}
  5504  0013FC  A681               	btfss	3969,3,c	;volatile
  5505  0013FE  D004               	goto	l266
  5506  001400  0E00               	movlw	0
  5507  001402  6E81               	movwf	3969,c	;volatile
  5508  001404  0E32               	movlw	50
  5509  001406  0012               	return	
  5510  001408                     l266:
  5511                           
  5512                           ;main.c: 307: if (PORTBbits.RB4) {PORTB = 0x00; return '5';}
  5513  001408  A881               	btfss	3969,4,c	;volatile
  5514  00140A  D004               	goto	l267
  5515  00140C  0E00               	movlw	0
  5516  00140E  6E81               	movwf	3969,c	;volatile
  5517  001410  0E35               	movlw	53
  5518  001412  0012               	return	
  5519  001414                     l267:
  5520                           
  5521                           ;main.c: 308: if (PORTBbits.RB5) {PORTB = 0x00; return '8';}
  5522  001414  AA81               	btfss	3969,5,c	;volatile
  5523  001416  D004               	goto	l268
  5524  001418  0E00               	movlw	0
  5525  00141A  6E81               	movwf	3969,c	;volatile
  5526  00141C  0E38               	movlw	56
  5527  00141E  0012               	return	
  5528  001420                     l268:
  5529                           
  5530                           ;main.c: 309: if (PORTBbits.RB6) {PORTB = 0x00; return '0';}
  5531  001420  AC81               	btfss	3969,6,c	;volatile
  5532  001422  D004               	goto	l3487
  5533  001424  0E00               	movlw	0
  5534  001426  6E81               	movwf	3969,c	;volatile
  5535  001428  0E30               	movlw	48
  5536  00142A  0012               	return	
  5537  00142C                     l3487:
  5538                           
  5539                           ;main.c: 310: PORTB = 0b00000100;
  5540  00142C  0E04               	movlw	4
  5541  00142E  6E81               	movwf	3969,c	;volatile
  5542                           
  5543                           ;main.c: 312: if (PORTBbits.RB3) {PORTB = 0x00; return '3';}
  5544  001430  A681               	btfss	3969,3,c	;volatile
  5545  001432  D004               	goto	l270
  5546  001434  0E00               	movlw	0
  5547  001436  6E81               	movwf	3969,c	;volatile
  5548  001438  0E33               	movlw	51
  5549  00143A  0012               	return	
  5550  00143C                     l270:
  5551                           
  5552                           ;main.c: 313: if (PORTBbits.RB4) {PORTB = 0x00; return '6';}
  5553  00143C  A881               	btfss	3969,4,c	;volatile
  5554  00143E  D004               	goto	l271
  5555  001440  0E00               	movlw	0
  5556  001442  6E81               	movwf	3969,c	;volatile
  5557  001444  0E36               	movlw	54
  5558  001446  0012               	return	
  5559  001448                     l271:
  5560                           
  5561                           ;main.c: 314: if (PORTBbits.RB5) {PORTB = 0x00; return '9';}
  5562  001448  AA81               	btfss	3969,5,c	;volatile
  5563  00144A  D004               	goto	l272
  5564  00144C  0E00               	movlw	0
  5565  00144E  6E81               	movwf	3969,c	;volatile
  5566  001450  0E39               	movlw	57
  5567  001452  0012               	return	
  5568  001454                     l272:
  5569                           
  5570                           ;main.c: 315: if (PORTBbits.RB6) {PORTB = 0x00; return '#';}
  5571  001454  AC81               	btfss	3969,6,c	;volatile
  5572  001456  D004               	goto	l3515
  5573  001458  0E00               	movlw	0
  5574  00145A  6E81               	movwf	3969,c	;volatile
  5575  00145C  0E23               	movlw	35
  5576  00145E  0012               	return	
  5577  001460                     l3515:
  5578                           
  5579                           ;main.c: 316: return '_';
  5580  001460  0E5F               	movlw	95
  5581  001462  0012               	return	
  5582  001464                     __end_of_read_keypad:
  5583                           	opt stack 0
  5584                           tblptru	equ	0xFF8
  5585                           tblptrh	equ	0xFF7
  5586                           tblptrl	equ	0xFF6
  5587                           tablat	equ	0xFF5
  5588                           prodh	equ	0xFF4
  5589                           prodl	equ	0xFF3
  5590                           intcon	equ	0xFF2
  5591                           indf0	equ	0xFEF
  5592                           postinc0	equ	0xFEE
  5593                           fsr0h	equ	0xFEA
  5594                           fsr0l	equ	0xFE9
  5595                           wreg	equ	0xFE8
  5596                           indf1	equ	0xFE7
  5597                           postdec1	equ	0xFE5
  5598                           plusw1	equ	0xFE3
  5599                           fsr1h	equ	0xFE2
  5600                           fsr1l	equ	0xFE1
  5601                           indf2	equ	0xFDF
  5602                           postinc2	equ	0xFDE
  5603                           plusw2	equ	0xFDB
  5604                           fsr2h	equ	0xFDA
  5605                           fsr2l	equ	0xFD9
  5606                           status	equ	0xFD8
  5607                           
  5608 ;; *************** function ___awdiv *****************
  5609 ;; Defined at:
  5610 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  5611 ;; Parameters:    Size  Location     Type
  5612 ;;  dividend        2   23[COMRAM] int 
  5613 ;;  divisor         2   25[COMRAM] int 
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;  quotient        2   29[COMRAM] int 
  5616 ;;  sign            1   28[COMRAM] unsigned char 
  5617 ;;  counter         1   27[COMRAM] unsigned char 
  5618 ;; Return value:  Size  Location     Type
  5619 ;;                  2   23[COMRAM] int 
  5620 ;; Registers used:
  5621 ;;		wreg, status,2, status,0
  5622 ;; Tracked objects:
  5623 ;;		On entry : 0/0
  5624 ;;		On exit  : 0/0
  5625 ;;		Unchanged: 0/0
  5626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5627 ;;      Params:         4       0       0       0       0       0       0
  5628 ;;      Locals:         4       0       0       0       0       0       0
  5629 ;;      Temps:          0       0       0       0       0       0       0
  5630 ;;      Totals:         8       0       0       0       0       0       0
  5631 ;;Total ram usage:        8 bytes
  5632 ;; Hardware stack levels used:    1
  5633 ;; Hardware stack levels required when called:    2
  5634 ;; This function calls:
  5635 ;;		Nothing
  5636 ;; This function is called by:
  5637 ;;		_main
  5638 ;;		_start_routine
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           
  5642                           	psect	text11
  5643  001580                     __ptext11:
  5644                           	opt stack 0
  5645  001580                     ___awdiv:
  5646                           	opt stack 27
  5647                           
  5648                           ;incstack = 0
  5649  001580  0E00               	movlw	0
  5650  001582  6E1D               	movwf	___awdiv@sign,c
  5651  001584  AE1B               	btfss	___awdiv@divisor+1,7,c
  5652  001586  D006               	goto	l3651
  5653  001588  6C1A               	negf	___awdiv@divisor,c
  5654  00158A  1E1B               	comf	___awdiv@divisor+1,f,c
  5655  00158C  B0D8               	btfsc	status,0,c
  5656  00158E  2A1B               	incf	___awdiv@divisor+1,f,c
  5657  001590  0E01               	movlw	1
  5658  001592  6E1D               	movwf	___awdiv@sign,c
  5659  001594                     l3651:
  5660  001594  AE19               	btfss	___awdiv@dividend+1,7,c
  5661  001596  D006               	goto	l3657
  5662  001598  6C18               	negf	___awdiv@dividend,c
  5663  00159A  1E19               	comf	___awdiv@dividend+1,f,c
  5664  00159C  B0D8               	btfsc	status,0,c
  5665  00159E  2A19               	incf	___awdiv@dividend+1,f,c
  5666  0015A0  0E01               	movlw	1
  5667  0015A2  1A1D               	xorwf	___awdiv@sign,f,c
  5668  0015A4                     l3657:
  5669  0015A4  0E00               	movlw	0
  5670  0015A6  6E1F               	movwf	___awdiv@quotient+1,c
  5671  0015A8  0E00               	movlw	0
  5672  0015AA  6E1E               	movwf	___awdiv@quotient,c
  5673  0015AC  501A               	movf	___awdiv@divisor,w,c
  5674  0015AE  101B               	iorwf	___awdiv@divisor+1,w,c
  5675  0015B0  B4D8               	btfsc	status,2,c
  5676  0015B2  D01C               	goto	l3679
  5677  0015B4  0E01               	movlw	1
  5678  0015B6  6E1C               	movwf	___awdiv@counter,c
  5679  0015B8  D004               	goto	l3665
  5680  0015BA                     l3663:
  5681  0015BA  90D8               	bcf	status,0,c
  5682  0015BC  361A               	rlcf	___awdiv@divisor,f,c
  5683  0015BE  361B               	rlcf	___awdiv@divisor+1,f,c
  5684  0015C0  2A1C               	incf	___awdiv@counter,f,c
  5685  0015C2                     l3665:
  5686  0015C2  AE1B               	btfss	___awdiv@divisor+1,7,c
  5687  0015C4  D7FA               	goto	l3663
  5688  0015C6                     l3667:
  5689  0015C6  90D8               	bcf	status,0,c
  5690  0015C8  361E               	rlcf	___awdiv@quotient,f,c
  5691  0015CA  361F               	rlcf	___awdiv@quotient+1,f,c
  5692  0015CC  501A               	movf	___awdiv@divisor,w,c
  5693  0015CE  5C18               	subwf	___awdiv@dividend,w,c
  5694  0015D0  501B               	movf	___awdiv@divisor+1,w,c
  5695  0015D2  5819               	subwfb	___awdiv@dividend+1,w,c
  5696  0015D4  A0D8               	btfss	status,0,c
  5697  0015D6  D005               	goto	l3675
  5698  0015D8  501A               	movf	___awdiv@divisor,w,c
  5699  0015DA  5E18               	subwf	___awdiv@dividend,f,c
  5700  0015DC  501B               	movf	___awdiv@divisor+1,w,c
  5701  0015DE  5A19               	subwfb	___awdiv@dividend+1,f,c
  5702  0015E0  801E               	bsf	___awdiv@quotient,0,c
  5703  0015E2                     l3675:
  5704  0015E2  90D8               	bcf	status,0,c
  5705  0015E4  321B               	rrcf	___awdiv@divisor+1,f,c
  5706  0015E6  321A               	rrcf	___awdiv@divisor,f,c
  5707  0015E8  2E1C               	decfsz	___awdiv@counter,f,c
  5708  0015EA  D7ED               	goto	l3667
  5709  0015EC                     l3679:
  5710  0015EC  501D               	movf	___awdiv@sign,w,c
  5711  0015EE  B4D8               	btfsc	status,2,c
  5712  0015F0  D004               	goto	l3683
  5713  0015F2  6C1E               	negf	___awdiv@quotient,c
  5714  0015F4  1E1F               	comf	___awdiv@quotient+1,f,c
  5715  0015F6  B0D8               	btfsc	status,0,c
  5716  0015F8  2A1F               	incf	___awdiv@quotient+1,f,c
  5717  0015FA                     l3683:
  5718  0015FA  C01E  F018         	movff	___awdiv@quotient,?___awdiv
  5719  0015FE  C01F  F019         	movff	___awdiv@quotient+1,?___awdiv+1
  5720  001602  0012               	return	
  5721  001604                     __end_of___awdiv:
  5722                           	opt stack 0
  5723                           tblptru	equ	0xFF8
  5724                           tblptrh	equ	0xFF7
  5725                           tblptrl	equ	0xFF6
  5726                           tablat	equ	0xFF5
  5727                           prodh	equ	0xFF4
  5728                           prodl	equ	0xFF3
  5729                           intcon	equ	0xFF2
  5730                           indf0	equ	0xFEF
  5731                           postinc0	equ	0xFEE
  5732                           fsr0h	equ	0xFEA
  5733                           fsr0l	equ	0xFE9
  5734                           wreg	equ	0xFE8
  5735                           indf1	equ	0xFE7
  5736                           postdec1	equ	0xFE5
  5737                           plusw1	equ	0xFE3
  5738                           fsr1h	equ	0xFE2
  5739                           fsr1l	equ	0xFE1
  5740                           indf2	equ	0xFDF
  5741                           postinc2	equ	0xFDE
  5742                           plusw2	equ	0xFDB
  5743                           fsr2h	equ	0xFDA
  5744                           fsr2l	equ	0xFD9
  5745                           status	equ	0xFD8
  5746                           
  5747 ;; *************** function _Eeprom_Write_Byte *****************
  5748 ;; Defined at:
  5749 ;;		line 43 in file "eeprom.h"
  5750 ;; Parameters:    Size  Location     Type
  5751 ;;  address         1    wreg     unsigned char 
  5752 ;;  data            1   23[COMRAM] unsigned char 
  5753 ;; Auto vars:     Size  Location     Type
  5754 ;;  address         1   24[COMRAM] unsigned char 
  5755 ;; Return value:  Size  Location     Type
  5756 ;;                  1    wreg      void 
  5757 ;; Registers used:
  5758 ;;		wreg, status,2
  5759 ;; Tracked objects:
  5760 ;;		On entry : 0/0
  5761 ;;		On exit  : 0/0
  5762 ;;		Unchanged: 0/0
  5763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5764 ;;      Params:         1       0       0       0       0       0       0
  5765 ;;      Locals:         1       0       0       0       0       0       0
  5766 ;;      Temps:          0       0       0       0       0       0       0
  5767 ;;      Totals:         2       0       0       0       0       0       0
  5768 ;;Total ram usage:        2 bytes
  5769 ;; Hardware stack levels used:    1
  5770 ;; Hardware stack levels required when called:    2
  5771 ;; This function calls:
  5772 ;;		Nothing
  5773 ;; This function is called by:
  5774 ;;		_start_routine
  5775 ;; This function uses a non-reentrant model
  5776 ;;
  5777                           
  5778                           	psect	text12
  5779  00198A                     __ptext12:
  5780                           	opt stack 0
  5781  00198A                     _Eeprom_Write_Byte:
  5782                           	opt stack 27
  5783                           
  5784                           ;incstack = 0
  5785                           ;Eeprom_Write_Byte@address stored from wreg
  5786  00198A  6E19               	movwf	Eeprom_Write_Byte@address,c
  5787                           
  5788                           ;eeprom.h: 46: EEADR = (unsigned char)address;
  5789  00198C  C019  FFA9         	movff	Eeprom_Write_Byte@address,4009	;volatile
  5790                           
  5791                           ;eeprom.h: 48: EEDATA = data;
  5792  001990  C018  FFA8         	movff	Eeprom_Write_Byte@data,4008	;volatile
  5793                           
  5794                           ;eeprom.h: 49: EECON1bits.EEPGD = 0;
  5795  001994  9EA6               	bcf	4006,7,c	;volatile
  5796                           
  5797                           ;eeprom.h: 50: EECON1bits.CFGS = 0;
  5798  001996  9CA6               	bcf	4006,6,c	;volatile
  5799                           
  5800                           ;eeprom.h: 51: EECON1bits.WREN = 1;
  5801  001998  84A6               	bsf	4006,2,c	;volatile
  5802                           
  5803                           ;eeprom.h: 55: EECON2 = 0x55;
  5804  00199A  0E55               	movlw	85
  5805  00199C  6EA7               	movwf	4007,c	;volatile
  5806                           
  5807                           ;eeprom.h: 56: EECON2 = 0xAA;
  5808  00199E  0EAA               	movlw	170
  5809  0019A0  6EA7               	movwf	4007,c	;volatile
  5810                           
  5811                           ;eeprom.h: 57: EECON1bits.WR = 1;
  5812  0019A2  82A6               	bsf	4006,1,c	;volatile
  5813  0019A4                     l153:
  5814  0019A4  A8A1               	btfss	4001,4,c	;volatile
  5815  0019A6  D7FE               	goto	l153
  5816                           
  5817                           ;eeprom.h: 63: }
  5818                           ;eeprom.h: 65: PIR2bits.EEIF = 0;
  5819  0019A8  98A1               	bcf	4001,4,c	;volatile
  5820                           
  5821                           ;eeprom.h: 66: EECON1bits.WREN = 0;
  5822  0019AA  94A6               	bcf	4006,2,c	;volatile
  5823  0019AC  0012               	return		;funcret
  5824  0019AE                     __end_of_Eeprom_Write_Byte:
  5825                           	opt stack 0
  5826                           tblptru	equ	0xFF8
  5827                           tblptrh	equ	0xFF7
  5828                           tblptrl	equ	0xFF6
  5829                           tablat	equ	0xFF5
  5830                           prodh	equ	0xFF4
  5831                           prodl	equ	0xFF3
  5832                           intcon	equ	0xFF2
  5833                           indf0	equ	0xFEF
  5834                           postinc0	equ	0xFEE
  5835                           fsr0h	equ	0xFEA
  5836                           fsr0l	equ	0xFE9
  5837                           wreg	equ	0xFE8
  5838                           indf1	equ	0xFE7
  5839                           postdec1	equ	0xFE5
  5840                           plusw1	equ	0xFE3
  5841                           fsr1h	equ	0xFE2
  5842                           fsr1l	equ	0xFE1
  5843                           indf2	equ	0xFDF
  5844                           postinc2	equ	0xFDE
  5845                           plusw2	equ	0xFDB
  5846                           fsr2h	equ	0xFDA
  5847                           fsr2l	equ	0xFD9
  5848                           status	equ	0xFD8
  5849                           
  5850 ;; *************** function _mcu_initialise *****************
  5851 ;; Defined at:
  5852 ;;		line 265 in file "main.c"
  5853 ;; Parameters:    Size  Location     Type
  5854 ;;		None
  5855 ;; Auto vars:     Size  Location     Type
  5856 ;;		None
  5857 ;; Return value:  Size  Location     Type
  5858 ;;                  1    wreg      void 
  5859 ;; Registers used:
  5860 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5861 ;; Tracked objects:
  5862 ;;		On entry : 0/0
  5863 ;;		On exit  : 0/0
  5864 ;;		Unchanged: 0/0
  5865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5866 ;;      Params:         0       0       0       0       0       0       0
  5867 ;;      Locals:         0       0       0       0       0       0       0
  5868 ;;      Temps:          0       0       0       0       0       0       0
  5869 ;;      Totals:         0       0       0       0       0       0       0
  5870 ;;Total ram usage:        0 bytes
  5871 ;; Hardware stack levels used:    1
  5872 ;; Hardware stack levels required when called:    3
  5873 ;; This function calls:
  5874 ;;		_Eeprom_Read_Byte
  5875 ;; This function is called by:
  5876 ;;		_main
  5877 ;; This function uses a non-reentrant model
  5878 ;;
  5879                           
  5880                           	psect	text13
  5881  0017BE                     __ptext13:
  5882                           	opt stack 0
  5883  0017BE                     _mcu_initialise:
  5884                           	opt stack 27
  5885                           
  5886                           ;main.c: 268: I2C_ADDR = Eeprom_Read_Byte(EEP_I2C_ADDR);
  5887                           
  5888                           ;incstack = 0
  5889  0017BE  0100               	movlb	0	; () banked
  5890  0017C0  51CC               	movf	_EEP_I2C_ADDR& (0+255),w,b
  5891  0017C2  ECF3  F00C         	call	_Eeprom_Read_Byte
  5892  0017C6  0100               	movlb	0	; () banked
  5893  0017C8  6FCE               	movwf	_I2C_ADDR& (0+255),b
  5894                           
  5895                           ; BSR set to: 0
  5896                           ;main.c: 269: Machine_ID = I2C_ADDR - 0x0F;
  5897  0017CA  0100               	movlb	0	; () banked
  5898  0017CC  51CE               	movf	_I2C_ADDR& (0+255),w,b
  5899  0017CE  0FF1               	addlw	241
  5900  0017D0  0100               	movlb	0	; () banked
  5901  0017D2  6FCF               	movwf	_Machine_ID& (0+255),b
  5902                           
  5903                           ; BSR set to: 0
  5904                           ;main.c: 272: OSCCON = 0x60;
  5905  0017D4  0E60               	movlw	96
  5906  0017D6  6ED3               	movwf	4051,c	;volatile
  5907                           
  5908                           ; BSR set to: 0
  5909                           ;main.c: 273: OSCTUNEbits.PLLEN = 0;
  5910  0017D8  9C9B               	bcf	3995,6,c	;volatile
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;main.c: 275: TRISA = 0x00;
  5914  0017DA  0E00               	movlw	0
  5915  0017DC  6E92               	movwf	3986,c	;volatile
  5916                           
  5917                           ; BSR set to: 0
  5918                           ;main.c: 276: TRISB = 0x01;
  5919  0017DE  0E01               	movlw	1
  5920  0017E0  6E93               	movwf	3987,c	;volatile
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;main.c: 277: TRISC = 0b00011000;
  5924  0017E2  0E18               	movlw	24
  5925  0017E4  6E94               	movwf	3988,c	;volatile
  5926                           
  5927                           ; BSR set to: 0
  5928                           ;main.c: 278: TRISD = 0x00;
  5929  0017E6  0E00               	movlw	0
  5930  0017E8  6E95               	movwf	3989,c	;volatile
  5931                           
  5932                           ; BSR set to: 0
  5933                           ;main.c: 279: LATC = 0b00011000;
  5934  0017EA  0E18               	movlw	24
  5935  0017EC  6E8B               	movwf	3979,c	;volatile
  5936                           
  5937                           ; BSR set to: 0
  5938                           ;main.c: 281: SSPADD = I2C_ADDR * 2;
  5939  0017EE  0100               	movlb	0	; () banked
  5940  0017F0  51CE               	movf	_I2C_ADDR& (0+255),w,b
  5941  0017F2  0D02               	mullw	2
  5942  0017F4  CFF3 FFC8          	movff	prodl,4040	;volatile
  5943                           
  5944                           ; BSR set to: 0
  5945                           ;main.c: 282: SSPCON1 = 0x36;
  5946  0017F8  0E36               	movlw	54
  5947  0017FA  6EC6               	movwf	4038,c	;volatile
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;main.c: 285: SSPSTAT = 0x00;
  5951  0017FC  0E00               	movlw	0
  5952  0017FE  6EC7               	movwf	4039,c	;volatile
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;main.c: 286: SSPCON2 = 0x01;
  5956  001800  0E01               	movlw	1
  5957  001802  6EC5               	movwf	4037,c	;volatile
  5958                           
  5959                           ; BSR set to: 0
  5960                           ;main.c: 288: PIR1bits.SSPIF = 0;
  5961  001804  969E               	bcf	3998,3,c	;volatile
  5962                           
  5963                           ; BSR set to: 0
  5964                           ;main.c: 289: PIE1bits.SSPIE = 1;
  5965  001806  869D               	bsf	3997,3,c	;volatile
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;main.c: 290: INTCONbits.GIE_GIEH = 1;
  5969  001808  8EF2               	bsf	intcon,7,c	;volatile
  5970                           
  5971                           ; BSR set to: 0
  5972                           ;main.c: 291: INTCONbits.PEIE_GIEL = 1;
  5973  00180A  8CF2               	bsf	intcon,6,c	;volatile
  5974                           
  5975                           ; BSR set to: 0
  5976                           ;main.c: 292: INTCONbits.RBIE = 0;
  5977  00180C  96F2               	bcf	intcon,3,c	;volatile
  5978                           
  5979                           ; BSR set to: 0
  5980  00180E  0012               	return		;funcret
  5981  001810                     __end_of_mcu_initialise:
  5982                           	opt stack 0
  5983                           tblptru	equ	0xFF8
  5984                           tblptrh	equ	0xFF7
  5985                           tblptrl	equ	0xFF6
  5986                           tablat	equ	0xFF5
  5987                           prodh	equ	0xFF4
  5988                           prodl	equ	0xFF3
  5989                           intcon	equ	0xFF2
  5990                           indf0	equ	0xFEF
  5991                           postinc0	equ	0xFEE
  5992                           fsr0h	equ	0xFEA
  5993                           fsr0l	equ	0xFE9
  5994                           wreg	equ	0xFE8
  5995                           indf1	equ	0xFE7
  5996                           postdec1	equ	0xFE5
  5997                           plusw1	equ	0xFE3
  5998                           fsr1h	equ	0xFE2
  5999                           fsr1l	equ	0xFE1
  6000                           indf2	equ	0xFDF
  6001                           postinc2	equ	0xFDE
  6002                           plusw2	equ	0xFDB
  6003                           fsr2h	equ	0xFDA
  6004                           fsr2l	equ	0xFD9
  6005                           status	equ	0xFD8
  6006                           
  6007 ;; *************** function _Eeprom_Read_Byte *****************
  6008 ;; Defined at:
  6009 ;;		line 20 in file "eeprom.h"
  6010 ;; Parameters:    Size  Location     Type
  6011 ;;  address         1    wreg     unsigned char 
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;  address         1   23[COMRAM] unsigned char 
  6014 ;; Return value:  Size  Location     Type
  6015 ;;                  1    wreg      unsigned char 
  6016 ;; Registers used:
  6017 ;;		wreg, status,2
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6023 ;;      Params:         0       0       0       0       0       0       0
  6024 ;;      Locals:         1       0       0       0       0       0       0
  6025 ;;      Temps:          0       0       0       0       0       0       0
  6026 ;;      Totals:         1       0       0       0       0       0       0
  6027 ;;Total ram usage:        1 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    2
  6030 ;; This function calls:
  6031 ;;		Nothing
  6032 ;; This function is called by:
  6033 ;;		_mcu_initialise
  6034 ;; This function uses a non-reentrant model
  6035 ;;
  6036                           
  6037                           	psect	text14
  6038  0019E6                     __ptext14:
  6039                           	opt stack 0
  6040  0019E6                     _Eeprom_Read_Byte:
  6041                           	opt stack 27
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;incstack = 0
  6045                           ;Eeprom_Read_Byte@address stored from wreg
  6046  0019E6  6E18               	movwf	Eeprom_Read_Byte@address,c
  6047                           
  6048                           ;eeprom.h: 24: EEADR = (unsigned char)address;
  6049  0019E8  C018  FFA9         	movff	Eeprom_Read_Byte@address,4009	;volatile
  6050                           
  6051                           ;eeprom.h: 26: EECON1bits.EEPGD = 0;
  6052  0019EC  9EA6               	bcf	4006,7,c	;volatile
  6053                           
  6054                           ;eeprom.h: 27: EECON1bits.CFGS = 0;
  6055  0019EE  9CA6               	bcf	4006,6,c	;volatile
  6056                           
  6057                           ;eeprom.h: 28: EECON1bits.RD = 1;
  6058  0019F0  80A6               	bsf	4006,0,c	;volatile
  6059  0019F2                     l147:
  6060  0019F2  B0A6               	btfsc	4006,0,c	;volatile
  6061  0019F4  D7FE               	goto	l147
  6062                           
  6063                           ;eeprom.h: 34: return EEDATA;
  6064  0019F6  50A8               	movf	4008,w,c	;volatile
  6065  0019F8  0012               	return		;funcret
  6066  0019FA                     __end_of_Eeprom_Read_Byte:
  6067                           	opt stack 0
  6068                           tblptru	equ	0xFF8
  6069                           tblptrh	equ	0xFF7
  6070                           tblptrl	equ	0xFF6
  6071                           tablat	equ	0xFF5
  6072                           prodh	equ	0xFF4
  6073                           prodl	equ	0xFF3
  6074                           intcon	equ	0xFF2
  6075                           indf0	equ	0xFEF
  6076                           postinc0	equ	0xFEE
  6077                           fsr0h	equ	0xFEA
  6078                           fsr0l	equ	0xFE9
  6079                           wreg	equ	0xFE8
  6080                           indf1	equ	0xFE7
  6081                           postdec1	equ	0xFE5
  6082                           plusw1	equ	0xFE3
  6083                           fsr1h	equ	0xFE2
  6084                           fsr1l	equ	0xFE1
  6085                           indf2	equ	0xFDF
  6086                           postinc2	equ	0xFDE
  6087                           plusw2	equ	0xFDB
  6088                           fsr2h	equ	0xFDA
  6089                           fsr2l	equ	0xFD9
  6090                           status	equ	0xFD8
  6091                           
  6092 ;; *************** function _load_reg_map *****************
  6093 ;; Defined at:
  6094 ;;		line 327 in file "main.c"
  6095 ;; Parameters:    Size  Location     Type
  6096 ;;		None
  6097 ;; Auto vars:     Size  Location     Type
  6098 ;;  i               2   29[COMRAM] int 
  6099 ;;  i               2   27[COMRAM] int 
  6100 ;; Return value:  Size  Location     Type
  6101 ;;                  1    wreg      void 
  6102 ;; Registers used:
  6103 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6104 ;; Tracked objects:
  6105 ;;		On entry : 0/0
  6106 ;;		On exit  : 0/0
  6107 ;;		Unchanged: 0/0
  6108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6109 ;;      Params:         0       0       0       0       0       0       0
  6110 ;;      Locals:         4       0       0       0       0       0       0
  6111 ;;      Temps:          4       0       0       0       0       0       0
  6112 ;;      Totals:         8       0       0       0       0       0       0
  6113 ;;Total ram usage:        8 bytes
  6114 ;; Hardware stack levels used:    1
  6115 ;; Hardware stack levels required when called:    2
  6116 ;; This function calls:
  6117 ;;		Nothing
  6118 ;; This function is called by:
  6119 ;;		_main
  6120 ;; This function uses a non-reentrant model
  6121 ;;
  6122                           
  6123                           	psect	text15
  6124  001464                     __ptext15:
  6125                           	opt stack 0
  6126  001464                     _load_reg_map:
  6127                           	opt stack 28
  6128                           
  6129                           ;main.c: 335: for (int i = 0; i < 9; i++)
  6130                           
  6131                           ;incstack = 0
  6132  001464  0E00               	movlw	0
  6133  001466  6E1D               	movwf	load_reg_map@i+1,c
  6134  001468  0E00               	movlw	0
  6135  00146A  6E1C               	movwf	load_reg_map@i,c
  6136  00146C                     l4037:
  6137  00146C  BE1D               	btfsc	load_reg_map@i+1,7,c
  6138  00146E  D006               	goto	l4041
  6139  001470  501D               	movf	load_reg_map@i+1,w,c
  6140  001472  E115               	bnz	l4047
  6141  001474  0E09               	movlw	9
  6142  001476  5C1C               	subwf	load_reg_map@i,w,c
  6143  001478  B0D8               	btfsc	status,0,c
  6144  00147A  D011               	goto	l4047
  6145  00147C                     l4041:
  6146                           
  6147                           ;main.c: 336: i2c_r_reg[i] = current_user[i];
  6148  00147C  0EC3               	movlw	low _current_user
  6149  00147E  241C               	addwf	load_reg_map@i,w,c
  6150  001480  6ED9               	movwf	fsr2l,c
  6151  001482  0E00               	movlw	high _current_user
  6152  001484  201D               	addwfc	load_reg_map@i+1,w,c
  6153  001486  6EDA               	movwf	fsr2h,c
  6154  001488  0E00               	movlw	low _i2c_r_reg
  6155  00148A  241C               	addwf	load_reg_map@i,w,c
  6156  00148C  6EE1               	movwf	fsr1l,c
  6157  00148E  0E01               	movlw	high _i2c_r_reg
  6158  001490  201D               	addwfc	load_reg_map@i+1,w,c
  6159  001492  6EE2               	movwf	fsr1h,c
  6160  001494  CFDF FFE7          	movff	indf2,indf1
  6161  001498  4A1C               	infsnz	load_reg_map@i,f,c
  6162  00149A  2A1D               	incf	load_reg_map@i+1,f,c
  6163  00149C  D7E7               	goto	l4037
  6164  00149E                     l4047:
  6165                           
  6166                           ;main.c: 338: for (int i = 9; i < 18; i++)
  6167  00149E  0E00               	movlw	0
  6168  0014A0  6E1F               	movwf	load_reg_map@i_839+1,c
  6169  0014A2  0E09               	movlw	9
  6170  0014A4  6E1E               	movwf	load_reg_map@i_839,c
  6171  0014A6                     l4049:
  6172  0014A6  BE1F               	btfsc	load_reg_map@i_839+1,7,c
  6173  0014A8  D006               	goto	l4053
  6174  0014AA  501F               	movf	load_reg_map@i_839+1,w,c
  6175  0014AC  E121               	bnz	l286
  6176  0014AE  0E12               	movlw	18
  6177  0014B0  5C1E               	subwf	load_reg_map@i_839,w,c
  6178  0014B2  B0D8               	btfsc	status,0,c
  6179  0014B4  0012               	return	
  6180  0014B6                     l4053:
  6181                           
  6182                           ;main.c: 339: i2c_r_reg[i] = current_pin[i - 9];
  6183  0014B6  0EF7               	movlw	247
  6184  0014B8  6E18               	movwf	??_load_reg_map& (0+255),c
  6185  0014BA  0EFF               	movlw	255
  6186  0014BC  6E19               	movwf	(??_load_reg_map+1)& (0+255),c
  6187  0014BE  C01E  F01A         	movff	load_reg_map@i_839,??_load_reg_map+2
  6188  0014C2  C01F  F01B         	movff	load_reg_map@i_839+1,??_load_reg_map+3
  6189  0014C6  5018               	movf	??_load_reg_map,w,c
  6190  0014C8  261A               	addwf	??_load_reg_map+2,f,c
  6191  0014CA  5019               	movf	??_load_reg_map+1,w,c
  6192  0014CC  221B               	addwfc	??_load_reg_map+3,f,c
  6193  0014CE  0EBA               	movlw	low _current_pin
  6194  0014D0  241A               	addwf	??_load_reg_map+2,w,c
  6195  0014D2  6ED9               	movwf	fsr2l,c
  6196  0014D4  0E00               	movlw	high _current_pin
  6197  0014D6  201B               	addwfc	??_load_reg_map+3,w,c
  6198  0014D8  6EDA               	movwf	fsr2h,c
  6199  0014DA  0E00               	movlw	low _i2c_r_reg
  6200  0014DC  241E               	addwf	load_reg_map@i_839,w,c
  6201  0014DE  6EE1               	movwf	fsr1l,c
  6202  0014E0  0E01               	movlw	high _i2c_r_reg
  6203  0014E2  201F               	addwfc	load_reg_map@i_839+1,w,c
  6204  0014E4  6EE2               	movwf	fsr1h,c
  6205  0014E6  CFDF FFE7          	movff	indf2,indf1
  6206  0014EA  4A1E               	infsnz	load_reg_map@i_839,f,c
  6207  0014EC  2A1F               	incf	load_reg_map@i_839+1,f,c
  6208  0014EE  D7DB               	goto	l4049
  6209  0014F0                     l286:
  6210  0014F0  0012               	return		;funcret
  6211  0014F2                     __end_of_load_reg_map:
  6212                           	opt stack 0
  6213                           tblptru	equ	0xFF8
  6214                           tblptrh	equ	0xFF7
  6215                           tblptrl	equ	0xFF6
  6216                           tablat	equ	0xFF5
  6217                           prodh	equ	0xFF4
  6218                           prodl	equ	0xFF3
  6219                           intcon	equ	0xFF2
  6220                           indf0	equ	0xFEF
  6221                           postinc0	equ	0xFEE
  6222                           fsr0h	equ	0xFEA
  6223                           fsr0l	equ	0xFE9
  6224                           wreg	equ	0xFE8
  6225                           indf1	equ	0xFE7
  6226                           postdec1	equ	0xFE5
  6227                           plusw1	equ	0xFE3
  6228                           fsr1h	equ	0xFE2
  6229                           fsr1l	equ	0xFE1
  6230                           indf2	equ	0xFDF
  6231                           postinc2	equ	0xFDE
  6232                           plusw2	equ	0xFDB
  6233                           fsr2h	equ	0xFDA
  6234                           fsr2l	equ	0xFD9
  6235                           status	equ	0xFD8
  6236                           
  6237 ;; *************** function _Lcd_Init *****************
  6238 ;; Defined at:
  6239 ;;		line 76 in file "lcd.h"
  6240 ;; Parameters:    Size  Location     Type
  6241 ;;		None
  6242 ;; Auto vars:     Size  Location     Type
  6243 ;;		None
  6244 ;; Return value:  Size  Location     Type
  6245 ;;                  1    wreg      void 
  6246 ;; Registers used:
  6247 ;;		wreg, status,2, cstack
  6248 ;; Tracked objects:
  6249 ;;		On entry : 0/0
  6250 ;;		On exit  : 0/0
  6251 ;;		Unchanged: 0/0
  6252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6253 ;;      Params:         0       0       0       0       0       0       0
  6254 ;;      Locals:         0       0       0       0       0       0       0
  6255 ;;      Temps:          1       0       0       0       0       0       0
  6256 ;;      Totals:         1       0       0       0       0       0       0
  6257 ;;Total ram usage:        1 bytes
  6258 ;; Hardware stack levels used:    1
  6259 ;; Hardware stack levels required when called:    4
  6260 ;; This function calls:
  6261 ;;		_Lcd_Cmd
  6262 ;;		_Lcd_Port
  6263 ;; This function is called by:
  6264 ;;		_main
  6265 ;; This function uses a non-reentrant model
  6266 ;;
  6267                           
  6268                           	psect	text16
  6269  001682                     __ptext16:
  6270                           	opt stack 0
  6271  001682                     _Lcd_Init:
  6272                           	opt stack 26
  6273                           
  6274                           ;lcd.h: 78: Lcd_Port(0x00);
  6275                           
  6276                           ;incstack = 0
  6277  001682  0E00               	movlw	0
  6278  001684  EC88  F00C         	call	_Lcd_Port
  6279                           
  6280                           ;lcd.h: 79: _delay((unsigned long)((20)*(16000000/4000.0)));
  6281  001688  0E68               	movlw	104
  6282  00168A  6E1A               	movwf	??_Lcd_Init& (0+255),c
  6283  00168C  0EE4               	movlw	228
  6284  00168E                     u4547:
  6285  00168E  2EE8               	decfsz	wreg,f,c
  6286  001690  D7FE               	goto	u4547
  6287  001692  2E1A               	decfsz	??_Lcd_Init& (0+255),f,c
  6288  001694  D7FC               	goto	u4547
  6289  001696  F000 F000          	nop2	
  6290                           
  6291                           ;lcd.h: 80: Lcd_Cmd(0x03);
  6292  00169A  0E03               	movlw	3
  6293  00169C  ECE7  F00C         	call	_Lcd_Cmd
  6294                           
  6295                           ;lcd.h: 81: _delay((unsigned long)((5)*(16000000/4000.0)));
  6296  0016A0  0E1A               	movlw	26
  6297  0016A2  6E1A               	movwf	??_Lcd_Init& (0+255),c
  6298  0016A4  0EF8               	movlw	248
  6299  0016A6                     u4557:
  6300  0016A6  2EE8               	decfsz	wreg,f,c
  6301  0016A8  D7FE               	goto	u4557
  6302  0016AA  2E1A               	decfsz	??_Lcd_Init& (0+255),f,c
  6303  0016AC  D7FC               	goto	u4557
  6304  0016AE  F000 F000          	nop2	
  6305                           
  6306                           ;lcd.h: 82: Lcd_Cmd(0x03);
  6307  0016B2  0E03               	movlw	3
  6308  0016B4  ECE7  F00C         	call	_Lcd_Cmd
  6309                           
  6310                           ;lcd.h: 83: _delay((unsigned long)((11)*(16000000/4000.0)));
  6311  0016B8  0E3A               	movlw	58
  6312  0016BA  6E1A               	movwf	??_Lcd_Init& (0+255),c
  6313  0016BC  0E23               	movlw	35
  6314  0016BE                     u4567:
  6315  0016BE  2EE8               	decfsz	wreg,f,c
  6316  0016C0  D7FE               	goto	u4567
  6317  0016C2  2E1A               	decfsz	??_Lcd_Init& (0+255),f,c
  6318  0016C4  D7FC               	goto	u4567
  6319  0016C6  F000               	nop	
  6320                           
  6321                           ;lcd.h: 84: Lcd_Cmd(0x03);
  6322  0016C8  0E03               	movlw	3
  6323  0016CA  ECE7  F00C         	call	_Lcd_Cmd
  6324                           
  6325                           ;lcd.h: 86: Lcd_Cmd(0x02);
  6326  0016CE  0E02               	movlw	2
  6327  0016D0  ECE7  F00C         	call	_Lcd_Cmd
  6328                           
  6329                           ;lcd.h: 87: Lcd_Cmd(0x02);
  6330  0016D4  0E02               	movlw	2
  6331  0016D6  ECE7  F00C         	call	_Lcd_Cmd
  6332                           
  6333                           ;lcd.h: 88: Lcd_Cmd(0x08);
  6334  0016DA  0E08               	movlw	8
  6335  0016DC  ECE7  F00C         	call	_Lcd_Cmd
  6336                           
  6337                           ;lcd.h: 89: Lcd_Cmd(0x00);
  6338  0016E0  0E00               	movlw	0
  6339  0016E2  ECE7  F00C         	call	_Lcd_Cmd
  6340                           
  6341                           ;lcd.h: 90: Lcd_Cmd(0x0C);
  6342  0016E6  0E0C               	movlw	12
  6343  0016E8  ECE7  F00C         	call	_Lcd_Cmd
  6344                           
  6345                           ;lcd.h: 91: Lcd_Cmd(0x00);
  6346  0016EC  0E00               	movlw	0
  6347  0016EE  ECE7  F00C         	call	_Lcd_Cmd
  6348                           
  6349                           ;lcd.h: 92: Lcd_Cmd(0x06);
  6350  0016F2  0E06               	movlw	6
  6351  0016F4  ECE7  F00C         	call	_Lcd_Cmd
  6352  0016F8  0012               	return		;funcret
  6353  0016FA                     __end_of_Lcd_Init:
  6354                           	opt stack 0
  6355                           tblptru	equ	0xFF8
  6356                           tblptrh	equ	0xFF7
  6357                           tblptrl	equ	0xFF6
  6358                           tablat	equ	0xFF5
  6359                           prodh	equ	0xFF4
  6360                           prodl	equ	0xFF3
  6361                           intcon	equ	0xFF2
  6362                           indf0	equ	0xFEF
  6363                           postinc0	equ	0xFEE
  6364                           fsr0h	equ	0xFEA
  6365                           fsr0l	equ	0xFE9
  6366                           wreg	equ	0xFE8
  6367                           indf1	equ	0xFE7
  6368                           postdec1	equ	0xFE5
  6369                           plusw1	equ	0xFE3
  6370                           fsr1h	equ	0xFE2
  6371                           fsr1l	equ	0xFE1
  6372                           indf2	equ	0xFDF
  6373                           postinc2	equ	0xFDE
  6374                           plusw2	equ	0xFDB
  6375                           fsr2h	equ	0xFDA
  6376                           fsr2l	equ	0xFD9
  6377                           status	equ	0xFD8
  6378                           
  6379 ;; *************** function _Lcd_Cmd *****************
  6380 ;; Defined at:
  6381 ;;		line 38 in file "lcd.h"
  6382 ;; Parameters:    Size  Location     Type
  6383 ;;  a               1    wreg     unsigned char 
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;  a               1   24[COMRAM] unsigned char 
  6386 ;; Return value:  Size  Location     Type
  6387 ;;                  1    wreg      void 
  6388 ;; Registers used:
  6389 ;;		wreg, status,2, cstack
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6395 ;;      Params:         0       0       0       0       0       0       0
  6396 ;;      Locals:         1       0       0       0       0       0       0
  6397 ;;      Temps:          0       0       0       0       0       0       0
  6398 ;;      Totals:         1       0       0       0       0       0       0
  6399 ;;Total ram usage:        1 bytes
  6400 ;; Hardware stack levels used:    1
  6401 ;; Hardware stack levels required when called:    3
  6402 ;; This function calls:
  6403 ;;		_Lcd_Port
  6404 ;; This function is called by:
  6405 ;;		_Lcd_Clear
  6406 ;;		_Lcd_Set_Cursor
  6407 ;;		_Lcd_Init
  6408 ;;		_Lcd_Shift_Right
  6409 ;;		_Lcd_Shift_Left
  6410 ;; This function uses a non-reentrant model
  6411 ;;
  6412                           
  6413                           	psect	text17
  6414  0019CE                     __ptext17:
  6415                           	opt stack 0
  6416  0019CE                     _Lcd_Cmd:
  6417                           	opt stack 24
  6418                           
  6419                           ;incstack = 0
  6420                           ;Lcd_Cmd@a stored from wreg
  6421  0019CE  6E19               	movwf	Lcd_Cmd@a,c
  6422                           
  6423                           ;lcd.h: 40: PORTDbits.RD5 = 0;
  6424  0019D0  9A83               	bcf	3971,5,c	;volatile
  6425                           
  6426                           ;lcd.h: 41: Lcd_Port(a);
  6427  0019D2  5019               	movf	Lcd_Cmd@a,w,c
  6428  0019D4  EC88  F00C         	call	_Lcd_Port
  6429                           
  6430                           ;lcd.h: 42: PORTDbits.RD4 = 1;
  6431  0019D8  8883               	bsf	3971,4,c	;volatile
  6432                           
  6433                           ;lcd.h: 44: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6434  0019DA  0EC8               	movlw	200
  6435  0019DC                     u4577:
  6436  0019DC  F000               	nop	
  6437  0019DE  2EE8               	decfsz	wreg,f,c
  6438  0019E0  D7FD               	goto	u4577
  6439                           
  6440                           ;lcd.h: 45: PORTDbits.RD4 = 0;
  6441  0019E2  9883               	bcf	3971,4,c	;volatile
  6442  0019E4  0012               	return		;funcret
  6443  0019E6                     __end_of_Lcd_Cmd:
  6444                           	opt stack 0
  6445                           tblptru	equ	0xFF8
  6446                           tblptrh	equ	0xFF7
  6447                           tblptrl	equ	0xFF6
  6448                           tablat	equ	0xFF5
  6449                           prodh	equ	0xFF4
  6450                           prodl	equ	0xFF3
  6451                           intcon	equ	0xFF2
  6452                           indf0	equ	0xFEF
  6453                           postinc0	equ	0xFEE
  6454                           fsr0h	equ	0xFEA
  6455                           fsr0l	equ	0xFE9
  6456                           wreg	equ	0xFE8
  6457                           indf1	equ	0xFE7
  6458                           postdec1	equ	0xFE5
  6459                           plusw1	equ	0xFE3
  6460                           fsr1h	equ	0xFE2
  6461                           fsr1l	equ	0xFE1
  6462                           indf2	equ	0xFDF
  6463                           postinc2	equ	0xFDE
  6464                           plusw2	equ	0xFDB
  6465                           fsr2h	equ	0xFDA
  6466                           fsr2l	equ	0xFD9
  6467                           status	equ	0xFD8
  6468                           
  6469 ;; *************** function _Lcd_Port *****************
  6470 ;; Defined at:
  6471 ;;		line 16 in file "lcd.h"
  6472 ;; Parameters:    Size  Location     Type
  6473 ;;  a               1    wreg     unsigned char 
  6474 ;; Auto vars:     Size  Location     Type
  6475 ;;  a               1   23[COMRAM] unsigned char 
  6476 ;; Return value:  Size  Location     Type
  6477 ;;                  1    wreg      void 
  6478 ;; Registers used:
  6479 ;;		wreg
  6480 ;; Tracked objects:
  6481 ;;		On entry : 0/0
  6482 ;;		On exit  : 0/0
  6483 ;;		Unchanged: 0/0
  6484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6485 ;;      Params:         0       0       0       0       0       0       0
  6486 ;;      Locals:         1       0       0       0       0       0       0
  6487 ;;      Temps:          0       0       0       0       0       0       0
  6488 ;;      Totals:         1       0       0       0       0       0       0
  6489 ;;Total ram usage:        1 bytes
  6490 ;; Hardware stack levels used:    1
  6491 ;; Hardware stack levels required when called:    2
  6492 ;; This function calls:
  6493 ;;		Nothing
  6494 ;; This function is called by:
  6495 ;;		_Lcd_Cmd
  6496 ;;		_Lcd_Init
  6497 ;;		_Lcd_Write_Char
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           	psect	text18
  6502  001910                     __ptext18:
  6503                           	opt stack 0
  6504  001910                     _Lcd_Port:
  6505                           	opt stack 24
  6506                           
  6507                           ;incstack = 0
  6508                           ;Lcd_Port@a stored from wreg
  6509  001910  6E18               	movwf	Lcd_Port@a,c
  6510                           
  6511                           ;lcd.h: 18: if(a & 1)
  6512  001912  A018               	btfss	Lcd_Port@a,0,c
  6513  001914  D002               	goto	l69
  6514                           
  6515                           ;lcd.h: 19: PORTDbits.RD0 = 1;
  6516  001916  8083               	bsf	3971,0,c	;volatile
  6517  001918  D001               	goto	l3361
  6518  00191A                     l69:
  6519                           
  6520                           ;lcd.h: 20: else
  6521                           ;lcd.h: 21: PORTDbits.RD0 = 0;
  6522  00191A  9083               	bcf	3971,0,c	;volatile
  6523  00191C                     l3361:
  6524                           
  6525                           ;lcd.h: 23: if(a & 2)
  6526  00191C  A218               	btfss	Lcd_Port@a,1,c
  6527  00191E  D002               	goto	l71
  6528                           
  6529                           ;lcd.h: 24: PORTDbits.RD1 = 1;
  6530  001920  8283               	bsf	3971,1,c	;volatile
  6531  001922  D001               	goto	l3365
  6532  001924                     l71:
  6533                           
  6534                           ;lcd.h: 25: else
  6535                           ;lcd.h: 26: PORTDbits.RD1 = 0;
  6536  001924  9283               	bcf	3971,1,c	;volatile
  6537  001926                     l3365:
  6538                           
  6539                           ;lcd.h: 28: if(a & 4)
  6540  001926  A418               	btfss	Lcd_Port@a,2,c
  6541  001928  D002               	goto	l73
  6542                           
  6543                           ;lcd.h: 29: PORTDbits.RD2 = 1;
  6544  00192A  8483               	bsf	3971,2,c	;volatile
  6545  00192C  D001               	goto	l3369
  6546  00192E                     l73:
  6547                           
  6548                           ;lcd.h: 30: else
  6549                           ;lcd.h: 31: PORTDbits.RD2 = 0;
  6550  00192E  9483               	bcf	3971,2,c	;volatile
  6551  001930                     l3369:
  6552                           
  6553                           ;lcd.h: 33: if(a & 8)
  6554  001930  A618               	btfss	Lcd_Port@a,3,c
  6555  001932  D002               	goto	l75
  6556                           
  6557                           ;lcd.h: 34: PORTDbits.RD3 = 1;
  6558  001934  8683               	bsf	3971,3,c	;volatile
  6559  001936  0012               	return	
  6560  001938                     l75:
  6561                           
  6562                           ;lcd.h: 35: else
  6563                           ;lcd.h: 36: PORTDbits.RD3 = 0;
  6564  001938  9683               	bcf	3971,3,c	;volatile
  6565  00193A  0012               	return	
  6566  00193C                     __end_of_Lcd_Port:
  6567                           	opt stack 0
  6568                           tblptru	equ	0xFF8
  6569                           tblptrh	equ	0xFF7
  6570                           tblptrl	equ	0xFF6
  6571                           tablat	equ	0xFF5
  6572                           prodh	equ	0xFF4
  6573                           prodl	equ	0xFF3
  6574                           intcon	equ	0xFF2
  6575                           indf0	equ	0xFEF
  6576                           postinc0	equ	0xFEE
  6577                           fsr0h	equ	0xFEA
  6578                           fsr0l	equ	0xFE9
  6579                           wreg	equ	0xFE8
  6580                           indf1	equ	0xFE7
  6581                           postdec1	equ	0xFE5
  6582                           plusw1	equ	0xFE3
  6583                           fsr1h	equ	0xFE2
  6584                           fsr1l	equ	0xFE1
  6585                           indf2	equ	0xFDF
  6586                           postinc2	equ	0xFDE
  6587                           plusw2	equ	0xFDB
  6588                           fsr2h	equ	0xFDA
  6589                           fsr2l	equ	0xFD9
  6590                           status	equ	0xFD8
  6591                           
  6592 ;; *************** function _ISR *****************
  6593 ;; Defined at:
  6594 ;;		line 342 in file "main.c"
  6595 ;; Parameters:    Size  Location     Type
  6596 ;;		None
  6597 ;; Auto vars:     Size  Location     Type
  6598 ;;  sspBuf          1   22[COMRAM] unsigned char 
  6599 ;; Return value:  Size  Location     Type
  6600 ;;                  1    wreg      void 
  6601 ;; Registers used:
  6602 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6603 ;; Tracked objects:
  6604 ;;		On entry : 0/0
  6605 ;;		On exit  : 0/0
  6606 ;;		Unchanged: 0/0
  6607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6608 ;;      Params:         0       0       0       0       0       0       0
  6609 ;;      Locals:         1       0       0       0       0       0       0
  6610 ;;      Temps:         14       0       0       0       0       0       0
  6611 ;;      Totals:        15       0       0       0       0       0       0
  6612 ;;Total ram usage:       15 bytes
  6613 ;; Hardware stack levels used:    1
  6614 ;; Hardware stack levels required when called:    1
  6615 ;; This function calls:
  6616 ;;		i2_load_reg_map
  6617 ;; This function is called by:
  6618 ;;		Interrupt level 2
  6619 ;; This function uses a non-reentrant model
  6620 ;;
  6621                           
  6622                           	psect	intcode
  6623  000008                     __pintcode:
  6624                           	opt stack 0
  6625  000008                     _ISR:
  6626                           	opt stack 24
  6627                           
  6628                           ;incstack = 0
  6629  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6630  00000A  CFFA F009          	movff	pclath,??_ISR
  6631  00000E  CFFB F00A          	movff	pclatu,??_ISR+1
  6632  000012  CFE9 F00B          	movff	fsr0l,??_ISR+2
  6633  000016  CFEA F00C          	movff	fsr0h,??_ISR+3
  6634  00001A  CFE1 F00D          	movff	fsr1l,??_ISR+4
  6635  00001E  CFE2 F00E          	movff	fsr1h,??_ISR+5
  6636  000022  CFD9 F00F          	movff	fsr2l,??_ISR+6
  6637  000026  CFDA F010          	movff	fsr2h,??_ISR+7
  6638  00002A  CFF3 F011          	movff	prodl,??_ISR+8
  6639  00002E  CFF4 F012          	movff	prodh,??_ISR+9
  6640  000032  CFF6 F013          	movff	tblptrl,??_ISR+10
  6641  000036  CFF7 F014          	movff	tblptrh,??_ISR+11
  6642  00003A  CFF8 F015          	movff	tblptru,??_ISR+12
  6643  00003E  CFF5 F016          	movff	tablat,??_ISR+13
  6644                           
  6645                           ;main.c: 344: unsigned char sspBuf;
  6646                           ;main.c: 345: load_reg_map();
  6647  000042  EC79  F00A         	call	i2_load_reg_map	;wreg free
  6648                           
  6649                           ;main.c: 346: if (PIR1bits.SSPIF) {
  6650  000046  A69E               	btfss	3998,3,c	;volatile
  6651  000048  D03E               	goto	i2l299
  6652                           
  6653                           ;main.c: 348: if (!SSPSTATbits.D_NOT_A) {
  6654  00004A  BAC7               	btfsc	4039,5,c	;volatile
  6655  00004C  D013               	goto	i2l3329
  6656                           
  6657                           ;main.c: 352: i2c_byte_count = 0;
  6658  00004E  0E00               	movlw	0
  6659  000050  6E46               	movwf	_i2c_byte_count,c	;volatile
  6660                           
  6661                           ;main.c: 354: if (SSPSTATbits.BF) {
  6662  000052  B0C7               	btfsc	4039,0,c	;volatile
  6663                           
  6664                           ;main.c: 356: sspBuf = SSPBUF;
  6665  000054  CFC9 F017          	movff	4041,ISR@sspBuf	;volatile
  6666                           
  6667                           ;main.c: 357: }
  6668                           ;main.c: 359: if (SSPSTATbits.R_NOT_W) {
  6669  000058  A4C7               	btfss	4039,2,c	;volatile
  6670  00005A  D031               	goto	i2l3351
  6671                           
  6672                           ;main.c: 361: SSPCON1bits.WCOL = 0;
  6673  00005C  9EC6               	bcf	4038,7,c	;volatile
  6674                           
  6675                           ;main.c: 362: SSPBUF = i2c_r_reg[i2c_reg_addr++];
  6676  00005E  5047               	movf	_i2c_reg_addr,w,c	;volatile
  6677  000060  0D01               	mullw	1
  6678  000062  0E00               	movlw	low _i2c_r_reg
  6679  000064  24F3               	addwf	prodl,w,c
  6680  000066  6ED9               	movwf	fsr2l,c
  6681  000068  0E01               	movlw	high _i2c_r_reg
  6682  00006A  20F4               	addwfc	prodh,w,c
  6683  00006C  6EDA               	movwf	fsr2h,c
  6684  00006E  50DF               	movf	indf2,w,c
  6685  000070  6EC9               	movwf	4041,c	;volatile
  6686  000072  D024               	goto	i2l3349
  6687  000074                     i2l3329:
  6688                           
  6689                           ;main.c: 369: i2c_byte_count++;
  6690  000074  2A46               	incf	_i2c_byte_count,f,c	;volatile
  6691                           
  6692                           ;main.c: 371: if (SSPSTATbits.BF) {
  6693  000076  B0C7               	btfsc	4039,0,c	;volatile
  6694                           
  6695                           ;main.c: 372: sspBuf = SSPBUF;
  6696  000078  CFC9 F017          	movff	4041,ISR@sspBuf	;volatile
  6697                           
  6698                           ;main.c: 373: }
  6699                           ;main.c: 375: if (SSPSTATbits.R_NOT_W) {
  6700  00007C  A4C7               	btfss	4039,2,c	;volatile
  6701  00007E  D00E               	goto	i2l3343
  6702                           
  6703                           ;main.c: 378: SSPCON1bits.WCOL = 0;
  6704  000080  9EC6               	bcf	4038,7,c	;volatile
  6705                           
  6706                           ;main.c: 379: SSPBUF = i2c_r_reg[i2c_reg_addr++];
  6707  000082  5047               	movf	_i2c_reg_addr,w,c	;volatile
  6708  000084  0D01               	mullw	1
  6709  000086  0E00               	movlw	low _i2c_r_reg
  6710  000088  24F3               	addwf	prodl,w,c
  6711  00008A  6ED9               	movwf	fsr2l,c
  6712  00008C  0E01               	movlw	high _i2c_r_reg
  6713  00008E  20F4               	addwfc	prodh,w,c
  6714  000090  6EDA               	movwf	fsr2h,c
  6715  000092  50DF               	movf	indf2,w,c
  6716  000094  6EC9               	movwf	4041,c	;volatile
  6717  000096  2A47               	incf	_i2c_reg_addr,f,c	;volatile
  6718                           
  6719                           ;main.c: 380: LATDbits.LATD6 = 1;
  6720  000098  8C8C               	bsf	3980,6,c	;volatile
  6721                           
  6722                           ;main.c: 382: } else {
  6723  00009A  D011               	goto	i2l3351
  6724  00009C                     i2l3343:
  6725                           
  6726                           ;main.c: 384: if (i2c_byte_count == 1) {
  6727  00009C  0446               	decf	_i2c_byte_count,w,c	;volatile
  6728  00009E  A4D8               	btfss	status,2,c
  6729  0000A0  D003               	goto	i2l3347
  6730                           
  6731                           ;main.c: 386: i2c_reg_addr = sspBuf;
  6732  0000A2  C017  F047         	movff	ISR@sspBuf,_i2c_reg_addr	;volatile
  6733                           
  6734                           ;main.c: 388: } else {
  6735  0000A6  D00B               	goto	i2l3351
  6736  0000A8                     i2l3347:
  6737                           
  6738                           ;main.c: 391: i2c_w_reg[i2c_reg_addr++] = sspBuf;
  6739  0000A8  5047               	movf	_i2c_reg_addr,w,c	;volatile
  6740  0000AA  0D01               	mullw	1
  6741  0000AC  0E20               	movlw	low _i2c_w_reg
  6742  0000AE  24F3               	addwf	prodl,w,c
  6743  0000B0  6ED9               	movwf	fsr2l,c
  6744  0000B2  0E01               	movlw	high _i2c_w_reg
  6745  0000B4  20F4               	addwfc	prodh,w,c
  6746  0000B6  6EDA               	movwf	fsr2h,c
  6747  0000B8  C017  FFDF         	movff	ISR@sspBuf,indf2
  6748  0000BC                     i2l3349:
  6749  0000BC  2A47               	incf	_i2c_reg_addr,f,c	;volatile
  6750  0000BE                     i2l3351:
  6751                           
  6752                           ;main.c: 392: }
  6753                           ;main.c: 393: }
  6754                           ;main.c: 394: }
  6755                           ;main.c: 396: i2c_reg_addr %= sizeof(i2c_r_reg);
  6756  0000BE  0E1F               	movlw	31
  6757  0000C0  1647               	andwf	_i2c_reg_addr,f,c	;volatile
  6758                           
  6759                           ;main.c: 399: PIR1bits.SSPIF = 0;
  6760  0000C2  969E               	bcf	3998,3,c	;volatile
  6761                           
  6762                           ;main.c: 400: SSPCON1bits.CKP = 1;
  6763  0000C4  88C6               	bsf	4038,4,c	;volatile
  6764  0000C6                     i2l299:
  6765  0000C6  C016  FFF5         	movff	??_ISR+13,tablat
  6766  0000CA  C015  FFF8         	movff	??_ISR+12,tblptru
  6767  0000CE  C014  FFF7         	movff	??_ISR+11,tblptrh
  6768  0000D2  C013  FFF6         	movff	??_ISR+10,tblptrl
  6769  0000D6  C012  FFF4         	movff	??_ISR+9,prodh
  6770  0000DA  C011  FFF3         	movff	??_ISR+8,prodl
  6771  0000DE  C010  FFDA         	movff	??_ISR+7,fsr2h
  6772  0000E2  C00F  FFD9         	movff	??_ISR+6,fsr2l
  6773  0000E6  C00E  FFE2         	movff	??_ISR+5,fsr1h
  6774  0000EA  C00D  FFE1         	movff	??_ISR+4,fsr1l
  6775  0000EE  C00C  FFEA         	movff	??_ISR+3,fsr0h
  6776  0000F2  C00B  FFE9         	movff	??_ISR+2,fsr0l
  6777  0000F6  C00A  FFFB         	movff	??_ISR+1,pclatu
  6778  0000FA  C009  FFFA         	movff	??_ISR,pclath
  6779  0000FE  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6780  000100  0011               	retfie		f
  6781  000102                     __end_of_ISR:
  6782                           	opt stack 0
  6783                           pclatu	equ	0xFFB
  6784                           pclath	equ	0xFFA
  6785                           tblptru	equ	0xFF8
  6786                           tblptrh	equ	0xFF7
  6787                           tblptrl	equ	0xFF6
  6788                           tablat	equ	0xFF5
  6789                           prodh	equ	0xFF4
  6790                           prodl	equ	0xFF3
  6791                           intcon	equ	0xFF2
  6792                           indf0	equ	0xFEF
  6793                           postinc0	equ	0xFEE
  6794                           fsr0h	equ	0xFEA
  6795                           fsr0l	equ	0xFE9
  6796                           wreg	equ	0xFE8
  6797                           indf1	equ	0xFE7
  6798                           postdec1	equ	0xFE5
  6799                           plusw1	equ	0xFE3
  6800                           fsr1h	equ	0xFE2
  6801                           fsr1l	equ	0xFE1
  6802                           indf2	equ	0xFDF
  6803                           postinc2	equ	0xFDE
  6804                           plusw2	equ	0xFDB
  6805                           fsr2h	equ	0xFDA
  6806                           fsr2l	equ	0xFD9
  6807                           status	equ	0xFD8
  6808                           
  6809 ;; *************** function i2_load_reg_map *****************
  6810 ;; Defined at:
  6811 ;;		line 327 in file "main.c"
  6812 ;; Parameters:    Size  Location     Type
  6813 ;;		None
  6814 ;; Auto vars:     Size  Location     Type
  6815 ;;  load_reg_map    2    6[COMRAM] int 
  6816 ;;  load_reg_map    2    4[COMRAM] int 
  6817 ;; Return value:  Size  Location     Type
  6818 ;;                  1    wreg      void 
  6819 ;; Registers used:
  6820 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6821 ;; Tracked objects:
  6822 ;;		On entry : 0/0
  6823 ;;		On exit  : 0/0
  6824 ;;		Unchanged: 0/0
  6825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6826 ;;      Params:         0       0       0       0       0       0       0
  6827 ;;      Locals:         4       0       0       0       0       0       0
  6828 ;;      Temps:          4       0       0       0       0       0       0
  6829 ;;      Totals:         8       0       0       0       0       0       0
  6830 ;;Total ram usage:        8 bytes
  6831 ;; Hardware stack levels used:    1
  6832 ;; This function calls:
  6833 ;;		Nothing
  6834 ;; This function is called by:
  6835 ;;		_ISR
  6836 ;; This function uses a non-reentrant model
  6837 ;;
  6838                           
  6839                           	psect	text20
  6840  0014F2                     __ptext20:
  6841                           	opt stack 0
  6842  0014F2                     i2_load_reg_map:
  6843                           	opt stack 24
  6844                           
  6845                           ;main.c: 335: for (int i = 0; i < 9; i++)
  6846                           
  6847                           ;incstack = 0
  6848  0014F2  0E00               	movlw	0
  6849  0014F4  6E06               	movwf	i2load_reg_map@i+1,c
  6850  0014F6  0E00               	movlw	0
  6851  0014F8  6E05               	movwf	i2load_reg_map@i,c
  6852  0014FA                     i2l2863:
  6853  0014FA  BE06               	btfsc	i2load_reg_map@i+1,7,c
  6854  0014FC  D006               	goto	i2l2867
  6855  0014FE  5006               	movf	i2load_reg_map@i+1,w,c
  6856  001500  E115               	bnz	i2l2873
  6857  001502  0E09               	movlw	9
  6858  001504  5C05               	subwf	i2load_reg_map@i,w,c
  6859  001506  B0D8               	btfsc	status,0,c
  6860  001508  D011               	goto	i2l2873
  6861  00150A                     i2l2867:
  6862                           
  6863                           ;main.c: 336: i2c_r_reg[i] = current_user[i];
  6864  00150A  0EC3               	movlw	low _current_user
  6865  00150C  2405               	addwf	i2load_reg_map@i,w,c
  6866  00150E  6ED9               	movwf	fsr2l,c
  6867  001510  0E00               	movlw	high _current_user
  6868  001512  2006               	addwfc	i2load_reg_map@i+1,w,c
  6869  001514  6EDA               	movwf	fsr2h,c
  6870  001516  0E00               	movlw	low _i2c_r_reg
  6871  001518  2405               	addwf	i2load_reg_map@i,w,c
  6872  00151A  6EE1               	movwf	fsr1l,c
  6873  00151C  0E01               	movlw	high _i2c_r_reg
  6874  00151E  2006               	addwfc	i2load_reg_map@i+1,w,c
  6875  001520  6EE2               	movwf	fsr1h,c
  6876  001522  CFDF FFE7          	movff	indf2,indf1
  6877  001526  4A05               	infsnz	i2load_reg_map@i,f,c
  6878  001528  2A06               	incf	i2load_reg_map@i+1,f,c
  6879  00152A  D7E7               	goto	i2l2863
  6880  00152C                     i2l2873:
  6881                           
  6882                           ;main.c: 338: for (int i = 9; i < 18; i++)
  6883  00152C  0E00               	movlw	0
  6884  00152E  6E08               	movwf	i2load_reg_map@i_839+1,c
  6885  001530  0E09               	movlw	9
  6886  001532  6E07               	movwf	i2load_reg_map@i_839,c
  6887  001534                     i2l2875:
  6888  001534  BE08               	btfsc	i2load_reg_map@i_839+1,7,c
  6889  001536  D006               	goto	i2l2879
  6890  001538  5008               	movf	i2load_reg_map@i_839+1,w,c
  6891  00153A  E121               	bnz	i2l286
  6892  00153C  0E12               	movlw	18
  6893  00153E  5C07               	subwf	i2load_reg_map@i_839,w,c
  6894  001540  B0D8               	btfsc	status,0,c
  6895  001542  0012               	return	
  6896  001544                     i2l2879:
  6897                           
  6898                           ;main.c: 339: i2c_r_reg[i] = current_pin[i - 9];
  6899  001544  0EF7               	movlw	247
  6900  001546  6E01               	movwf	??i2_load_reg_map& (0+255),c
  6901  001548  0EFF               	movlw	255
  6902  00154A  6E02               	movwf	(??i2_load_reg_map+1)& (0+255),c
  6903  00154C  C007  F003         	movff	i2load_reg_map@i_839,??i2_load_reg_map+2
  6904  001550  C008  F004         	movff	i2load_reg_map@i_839+1,??i2_load_reg_map+3
  6905  001554  5001               	movf	??i2_load_reg_map,w,c
  6906  001556  2603               	addwf	??i2_load_reg_map+2,f,c
  6907  001558  5002               	movf	??i2_load_reg_map+1,w,c
  6908  00155A  2204               	addwfc	??i2_load_reg_map+3,f,c
  6909  00155C  0EBA               	movlw	low _current_pin
  6910  00155E  2403               	addwf	??i2_load_reg_map+2,w,c
  6911  001560  6ED9               	movwf	fsr2l,c
  6912  001562  0E00               	movlw	high _current_pin
  6913  001564  2004               	addwfc	??i2_load_reg_map+3,w,c
  6914  001566  6EDA               	movwf	fsr2h,c
  6915  001568  0E00               	movlw	low _i2c_r_reg
  6916  00156A  2407               	addwf	i2load_reg_map@i_839,w,c
  6917  00156C  6EE1               	movwf	fsr1l,c
  6918  00156E  0E01               	movlw	high _i2c_r_reg
  6919  001570  2008               	addwfc	i2load_reg_map@i_839+1,w,c
  6920  001572  6EE2               	movwf	fsr1h,c
  6921  001574  CFDF FFE7          	movff	indf2,indf1
  6922  001578  4A07               	infsnz	i2load_reg_map@i_839,f,c
  6923  00157A  2A08               	incf	i2load_reg_map@i_839+1,f,c
  6924  00157C  D7DB               	goto	i2l2875
  6925  00157E                     i2l286:
  6926  00157E  0012               	return		;funcret
  6927  001580                     __end_ofi2_load_reg_map:
  6928                           	opt stack 0
  6929                           pclatu	equ	0xFFB
  6930                           pclath	equ	0xFFA
  6931                           tblptru	equ	0xFF8
  6932                           tblptrh	equ	0xFF7
  6933                           tblptrl	equ	0xFF6
  6934                           tablat	equ	0xFF5
  6935                           prodh	equ	0xFF4
  6936                           prodl	equ	0xFF3
  6937                           intcon	equ	0xFF2
  6938                           indf0	equ	0xFEF
  6939                           postinc0	equ	0xFEE
  6940                           fsr0h	equ	0xFEA
  6941                           fsr0l	equ	0xFE9
  6942                           wreg	equ	0xFE8
  6943                           indf1	equ	0xFE7
  6944                           postdec1	equ	0xFE5
  6945                           plusw1	equ	0xFE3
  6946                           fsr1h	equ	0xFE2
  6947                           fsr1l	equ	0xFE1
  6948                           indf2	equ	0xFDF
  6949                           postinc2	equ	0xFDE
  6950                           plusw2	equ	0xFDB
  6951                           fsr2h	equ	0xFDA
  6952                           fsr2l	equ	0xFD9
  6953                           status	equ	0xFD8
  6954                           pclatu	equ	0xFFB
  6955                           pclath	equ	0xFFA
  6956                           tblptru	equ	0xFF8
  6957                           tblptrh	equ	0xFF7
  6958                           tblptrl	equ	0xFF6
  6959                           tablat	equ	0xFF5
  6960                           prodh	equ	0xFF4
  6961                           prodl	equ	0xFF3
  6962                           intcon	equ	0xFF2
  6963                           indf0	equ	0xFEF
  6964                           postinc0	equ	0xFEE
  6965                           fsr0h	equ	0xFEA
  6966                           fsr0l	equ	0xFE9
  6967                           wreg	equ	0xFE8
  6968                           indf1	equ	0xFE7
  6969                           postdec1	equ	0xFE5
  6970                           plusw1	equ	0xFE3
  6971                           fsr1h	equ	0xFE2
  6972                           fsr1l	equ	0xFE1
  6973                           indf2	equ	0xFDF
  6974                           postinc2	equ	0xFDE
  6975                           plusw2	equ	0xFDB
  6976                           fsr2h	equ	0xFDA
  6977                           fsr2l	equ	0xFD9
  6978                           status	equ	0xFD8
  6979                           
  6980                           	psect	rparam
  6981  0000                     pclatu	equ	0xFFB
  6982                           pclath	equ	0xFFA
  6983                           tblptru	equ	0xFF8
  6984                           tblptrh	equ	0xFF7
  6985                           tblptrl	equ	0xFF6
  6986                           tablat	equ	0xFF5
  6987                           prodh	equ	0xFF4
  6988                           prodl	equ	0xFF3
  6989                           intcon	equ	0xFF2
  6990                           indf0	equ	0xFEF
  6991                           postinc0	equ	0xFEE
  6992                           fsr0h	equ	0xFEA
  6993                           fsr0l	equ	0xFE9
  6994                           wreg	equ	0xFE8
  6995                           indf1	equ	0xFE7
  6996                           postdec1	equ	0xFE5
  6997                           plusw1	equ	0xFE3
  6998                           fsr1h	equ	0xFE2
  6999                           fsr1l	equ	0xFE1
  7000                           indf2	equ	0xFDF
  7001                           postinc2	equ	0xFDE
  7002                           plusw2	equ	0xFDB
  7003                           fsr2h	equ	0xFDA
  7004                           fsr2l	equ	0xFD9
  7005                           status	equ	0xFD8
  7006                           
  7007                           	psect	temp
  7008  000048                     btemp:
  7009                           	opt stack 0
  7010  000048                     	ds	1
  7011  0000                     int$flags	set	btemp
  7012                           pclatu	equ	0xFFB
  7013                           pclath	equ	0xFFA
  7014                           tblptru	equ	0xFF8
  7015                           tblptrh	equ	0xFF7
  7016                           tblptrl	equ	0xFF6
  7017                           tablat	equ	0xFF5
  7018                           prodh	equ	0xFF4
  7019                           prodl	equ	0xFF3
  7020                           intcon	equ	0xFF2
  7021                           indf0	equ	0xFEF
  7022                           postinc0	equ	0xFEE
  7023                           fsr0h	equ	0xFEA
  7024                           fsr0l	equ	0xFE9
  7025                           wreg	equ	0xFE8
  7026                           indf1	equ	0xFE7
  7027                           postdec1	equ	0xFE5
  7028                           plusw1	equ	0xFE3
  7029                           fsr1h	equ	0xFE2
  7030                           fsr1l	equ	0xFE1
  7031                           indf2	equ	0xFDF
  7032                           postinc2	equ	0xFDE
  7033                           plusw2	equ	0xFDB
  7034                           fsr2h	equ	0xFDA
  7035                           fsr2l	equ	0xFD9
  7036                           status	equ	0xFD8


Data Sizes:
    Strings     318
    Constant    0
    Data        119
    BSS         22
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      71
    BANK0           160     50     112
    BANK1           256     51     115
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    start_routine@error_msg	PTR unsigned char  size(2) Largest target is 17
		 -> STR_27(CODE[17]), STR_26(CODE[17]), 

    latch_keypad@x	PTR unsigned char  size(2) Largest target is 1
		 -> start_routine@x(BANK0[1]), main@x(BANK1[1]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 1535
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[2]), 
		 -> STR_23(CODE[5]), STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), 
		 -> STR_19(CODE[17]), STR_18(CODE[17]), STR_17(CODE[11]), STR_16(CODE[6]), 
		 -> STR_15(CODE[5]), STR_14(CODE[17]), STR_13(CODE[17]), STR_12(CODE[17]), 
		 -> STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[17]), 
		 -> STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[2]), RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    _main->_start_routine
    _start_routine->_menu_progress_bar
    _menu_progress_bar->___wmul
    ___wmul->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _mcu_initialise->_Eeprom_Read_Byte
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR in COMRAM

    _ISR->i2_load_reg_map

Critical Paths under _main in BANK0

    _main->_start_routine
    _start_routine->_menu_progress_bar

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                59    59      0   47686
                                             46 COMRAM     8     8      0
                                              0 BANK1     51    51      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awdiv
                       _latch_keypad
                       _load_reg_map
                     _mcu_initialise
                  _menu_progress_bar
                        _read_keypad
                      _start_routine
 ---------------------------------------------------------------------------------
 (1) _start_routine                                       40    40      0   23208
                                             42 COMRAM     4     4      0
                                             14 BANK0     36    36      0
                  _Eeprom_Write_Byte
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awdiv
                       _latch_keypad
                  _menu_progress_bar
                        _read_keypad
 ---------------------------------------------------------------------------------
 (2) _menu_progress_bar                                   20    18      2   10655
                                             36 COMRAM     6     4      2
                                              0 BANK0     14    14      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     848
                                             30 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1781
                                             23 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_String                                     6     4      2    2463
                                             27 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_Char                                       3     3      0     254
                                             24 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Set_Cursor                                       5     4      1    4395
                                             25 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Clear                                            1     1      0     155
                                             25 COMRAM     1     1      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _latch_keypad                                         4     2      2     524
                                             23 COMRAM     4     2      2
                        _read_keypad
 ---------------------------------------------------------------------------------
 (2) _read_keypad                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1985
                                             23 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Write_Byte                                    2     1      1     139
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _mcu_initialise                                       0     0      0      31
                   _Eeprom_Read_Byte
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Read_Byte                                     1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _load_reg_map                                         8     8      0     260
                                             23 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     279
                                             25 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Cmd                                              1     1      0     155
                                             24 COMRAM     1     1      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (5) _Lcd_Port                                             1     1      0     124
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 15    15      0     226
                                              8 COMRAM    15    15      0
                     i2_load_reg_map
 ---------------------------------------------------------------------------------
 (7) i2_load_reg_map                                       8     8      0     180
                                              0 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___awdiv
   _latch_keypad
     _read_keypad
   _load_reg_map
   _mcu_initialise
     _Eeprom_Read_Byte
   _menu_progress_bar
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___lwdiv
     ___wmul
       ___lwdiv (ARG)
   _read_keypad
   _start_routine
     _Eeprom_Write_Byte
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___awdiv
     _latch_keypad
       _read_keypad
     _menu_progress_bar
       _Lcd_Clear
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Write_Char
         _Lcd_Port
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___lwdiv
       ___wmul
         ___lwdiv (ARG)
     _read_keypad

 _ISR (ROOT)
   i2_load_reg_map

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     33      73       7       44.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     32      70       5       70.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      47       1       75.5%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     12A      15        0.0%
DATA                 0      0     12A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Sep 27 17:41:29 2016

          i2load_reg_map@i_839 0007                              _c 00A2                 start_routine@a 008A  
               start_routine@b 0080                 start_routine@h 006E                 start_routine@i 0074  
               start_routine@l 006F                 start_routine@n 0090                 start_routine@v 0073  
               start_routine@x 008F                    _SSPSTATbits 000FC7                             l71 1924  
                           l73 192E                             l75 1938                             l69 191A  
                 ___awdiv@sign 001D                             _hx 0092                start_routine@d1 0072  
          ___wmul@multiplicand 0021                start_routine@dh 008E                start_routine@dt 008B  
                 __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000  
       __size_of_start_routine 0780                   __CFG_CP3$OFF 000000                            l230 088A  
                          l153 19A4                            l226 074C                            l147 19F2  
                          l261 13D4                            l270 143C                            l271 1448  
                          l263 13E0                            l335 10E0                            l272 1454  
                          l264 13EC                            l266 1408                            l267 1414  
                          l268 1420                            l286 14F0                            l750 17B4  
                 __CFG_CPB$OFF 000000                   __CFG_CPD$OFF 000000                            _ISR 0008  
                 __CFG_BORV$30 000000                            prod 000FF3                            wreg 000FE8  
      Eeprom_Read_Byte@address 0018                   __CFG_LVP$OFF 000000                           ?_ISR 0001  
                         l4001 1168                           l4013 11AA                           l4023 11E4  
                         l4031 120C                           l4041 147C                           l4017 11C4  
                         l4009 1194                           l4033 1216                           l4019 11CE  
                         l4053 14B6                           l4037 146C                           l4029 1200  
                         l4213 02EC                           l4047 149E                           l3415 1838  
                         l4303 05C0                           l4231 0374                           l4151 0148  
                         l3361 191C                           l4049 14A6                           l3425 1704  
                         l3601 138A                           l4321 0646                           l4233 037C  
                         l4145 0124                           l3515 1460                           l3531 1782  
                         l4323 064E                           l4251 0468                           l4243 03B2  
                         l4235 0386                           l4163 0192                           l4403 088C  
                         l3365 1926                           l3429 1738                           l3533 178A  
                         l3605 13A0                           l4413 08B4                           l4325 065A  
                         l4245 03BE                           l4181 0214                           l4157 0172  
                         l3543 17AA                           l3535 178E                           l4431 090C  
                         l4239 039C                           l4159 017C                           l3369 1930  
                         l3609 13BA                           l3561 12A6                           l3553 127E  
                         l4441 092C                           l4425 08EC                           l4417 08CA  
                         l4345 0724                           l4337 06F8                           l4329 06C4  
                         l4169 01D6                           l3651 1594                           l3459 13F8  
                         l3571 12F8                           l4435 0914                           l3637 18DA  
                         l3581 132E                           l3565 12C2                           l3557 1294  
                         l3821 0CD8                           l3813 0CA8                           l4437 0920  
                         l4365 07A6                           l4269 04D6                           l3663 15BA  
                         l3487 142C                           l3639 18EC                           l3903 0EB0  
                         l4463 09FE                           l4383 0812                           l3665 15C2  
                         l3657 15A4                           l3593 1372                           l3585 1348  
                         l3577 1318                           l3817 0CBE                           l4473 0A60  
                         l4481 0A84                           l4369 07BC                           l3683 15FA  
                         l3675 15E2                           l3667 15C6                           l3923 0F28  
                         l3843 0D42                           l3763 0AD8                           l4459 09E8  
                         l4395 085E                           l4379 07FC                           l4387 0828  
                         l3589 135C                           l3909 0EDE                           l3853 0D80  
                         l4477 0A7C                           l3679 15EC                           l3599 1380  
                         l3791 0B74                           l3783 0B4E                           l3775 0B1E  
                         l3767 0AF2                           l3759 0AC2                           l4399 0874  
                         l3953 1020                           l3929 0F40                           l3779 0B34  
                         l3949 100A                           l3877 0E10                           l3991 112A  
                         l3975 10BA                           l3959 103E                           l3895 0E82  
                         l3897 0E8A                           l3995 1144                           l3987 1114  
                         l3899 0E9A                           l3997 1154                           STR_2 7EC1  
                         STR_3 7F27                           STR_4 7ED2                           STR_5 7F5A  
                         STR_6 7ED2                           STR_7 7FD1                           STR_8 7F05  
                         STR_9 7FC0                           _LATC 000F8B                           u3050 1730  
                         u3060 1764                           u3057 1726                           u3067 175A  
                         u3235 123C                           u4071 04EA                           u4180 074C  
                         u4407 087A                           u4417 0ADE                           u4507 18BC  
                         u4427 0B3A                           u4517 18CE                           u4437 0CC4  
                         u3910 0146                           u4527 19C0                           u4447 10C0  
                         u3680 10E0                           u3920 0170                           u4537 18E0  
                         u4457 1130                           u4377 03A2                           u4547 168E  
                         u4467 11B0                           u4387 07AC                           u4557 16A6  
                         u4477 12AC                           u4397 0818                           u4567 16BE  
                         u4487 1334                           u4577 19DC                           u4497 13A6  
            ?_Lcd_Write_String 001C                           _main 0106                           fsr0h 000FEA  
                         fsr1h 000FE2                           indf0 000FEF                           fsr0l 000FE9  
                         fsr2h 000FDA                           indf1 000FE7                           fsr1l 000FE1  
                         indf2 000FDF                           fsr2l 000FD9                           btemp 0048  
                         pclat 000FFA                           prodh 000FF4                           prodl 000FF3  
                         start 0102             ??_Lcd_Write_String 001E                  __CFG_IESO$OFF 000000  
              __end_of_Lcd_Cmd 19E6                  __CFG_MCLRE$ON 000000                   ___param_bank 000010  
                        ??_ISR 0009                          ?_main 0001                __end_of___awdiv 1604  
                        _EEADR 000FA9                          STR_10 7EF4                          STR_11 7F9E  
                        STR_12 7EF4                          STR_20 7F49                          STR_13 7EC1  
                        STR_21 7FAF                          STR_22 7F49                          STR_14 7EE3  
                        STR_23 7FF8                          STR_15 7FF3                          STR_24 7FFD  
                        STR_16 7FED                          STR_17 7FE2                          STR_25 7F8D  
                        STR_26 7F6B                          STR_18 7F38                          STR_19 7F7C  
                        STR_27 7F16                ___awdiv@divisor 001A                __end_of___lwdiv 17BE  
                        i2l286 157E                          i2l299 00C6                ___awdiv@counter 001C  
                        _PORTB 000F81        __size_of_Lcd_Set_Cursor 0050                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94                          _TRISD 000F95  
               _i2c_byte_count 0046                  __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000  
                ?_latch_keypad 0018                  __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000  
                __CFG_WRT3$OFF 000000                 __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000  
               __CFG_EBTR1$OFF 000000                     _Machine_ID 00CF             start_routine@F3721 00B6  
               __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000  
                __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000                   ?_read_keypad 0001  
               __CFG_EBTRB$OFF 000000                          main@a 0160                          main@c 0140  
                        main@i 0161                          main@n 0171                          main@p 0170  
                        main@x 0172                          tablat 000FF5             start_routine@i_902 007C  
           start_routine@i_905 007E             start_routine@i_906 0085             start_routine@i_881 0078  
           start_routine@i_873 0076             start_routine@i_893 008C             start_routine@i_896 0083  
           start_routine@i_899 007A                  _start_routine 0A9E                          plusw1 000FE3  
                        plusw2 000FDB                          status 000FD8  menu_progress_bar@load_time_ms 0025  
               __CFG_HFOFST$ON 000000               __end_of_Lcd_Init 16FA               __end_of_Lcd_Port 193C  
              __initialization 1604                   __end_of_main 0A9E                         ??_main 002F  
           __size_of_Lcd_Clear 0020                  __activetblptr 000002           _credentials_accepted 00CD  
               ??_latch_keypad 001A                  ?_load_reg_map 0001                         _EEDATA 000FA8  
                       _EECON2 000FA7               ___awdiv@dividend 0018                 ?_start_routine 0001  
               __CFG_WDTEN$OFF 000000                         i2l3343 009C                         i2l3351 00BE  
                       i2l3329 0074                         i2l3347 00A8                         i2l3349 00BC  
                       i2l2863 14FA                         i2l2873 152C                         i2l2875 1534  
                       i2l2867 150A                         i2l2879 1544                         _OSCCON 000FD3  
                    ??_Lcd_Cmd 0019        __size_of_Lcd_Write_Char 0038                         _SSPADD 000FC8  
                       _SSPBUF 000FC9                 __CFG_XINST$OFF 000000                         ___wmul 1964  
                    ??___awdiv 001C                 __CFG_STVREN$ON 000000                      ??___lwdiv 001C  
            ?_Eeprom_Read_Byte 0001                         clear_0 160A               ___awdiv@quotient 001E  
           ??_Eeprom_Read_Byte 0018                   __pdataCOMRAM 0037               ??i2_load_reg_map 0001  
                 __mediumconst 7EC0                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                 ??_load_reg_map 0018                Lcd_Set_Cursor@a 001B  
              Lcd_Set_Cursor@b 001A                Lcd_Set_Cursor@y 001D                Lcd_Set_Cursor@z 001C  
              i2load_reg_map@i 0005                     __accesstop 0060        __end_of__initialization 1674  
              __CFG_PBADEN$OFF 000000              __end_of_Lcd_Clear 19CE                  ___rparam_used 000001  
            _menu_progress_bar 121E                 __pcstackCOMRAM 0001                   __pidataBANK0 193C  
                 __pidataBANK1 1860             ?_menu_progress_bar 0025                 _Lcd_Set_Cursor 1810  
          ??_menu_progress_bar 0027                   _EEP_I2C_ADDR 00CC                      ?_Lcd_Init 0001  
                    ?_Lcd_Port 0001              load_reg_map@i_839 001E                ??_start_routine 002B  
         __size_of_read_keypad 00A4                     __pbssBANK0 00BA      __end_of_menu_progress_bar 13C0  
                    ISR@sspBuf 0017           __end_of_latch_keypad 1910                        ?___wmul 001F  
 start_routine@new_I2C_address 0091      __size_of_Lcd_Write_String 0072         __end_of_Lcd_Set_Cursor 1860  
       menu_progress_bar@i_722 0068         menu_progress_bar@i_723 006A         menu_progress_bar@i_724 006C  
                   ??_Lcd_Init 001A                     ??_Lcd_Port 0018                        _SSPCON1 000FC6  
                      _SSPCON2 000FC5        __size_of_mcu_initialise 0052                        _SSPSTAT 000FC7  
               _Lcd_Write_Char 18A0                        _Lcd_Cmd 19CE                        __Hparam 0000  
                      __Lparam 0000           __end_of_load_reg_map 14F2                        ___awdiv 1580  
              __size_of___wmul 0026                        ___lwdiv 176C                        __pcinit 1604  
                      __ramtop 0600                ?_Lcd_Set_Cursor 001A                        __ptext0 0106  
                      __ptext1 0A9E                        __ptext2 121E                        __ptext3 1964  
                      __ptext4 176C                        __ptext5 16FA                        __ptext6 18A0  
                      __ptext7 1810                        __ptext8 19AE                        __ptext9 18D8  
          menu_progress_bar@ii 0064                   __size_of_ISR 00FA                        main@n_c 0155  
       __end_of_Lcd_Write_Char 18D8           end_of_initialization 1674                  __Lmediumconst 7EC0  
   __size_of_menu_progress_bar 01A2                        postdec1 000FE5                        postinc0 000FEE  
                      postinc2 000FDE                      Lcd_Port@a 0018                      _PORTBbits 000F81  
                    _PORTDbits 000F83                ?_Lcd_Write_Char 0001      __size_of_Eeprom_Read_Byte 0014  
            Lcd_Write_String@a 001C              Lcd_Write_String@i 0020          __size_of_latch_keypad 0038  
                   main@digits 016F                     main@buffer 014A                   _i2c_reg_addr 0047  
                latch_keypad@x 0018                      _Lcd_Clear 19AE                 __end_of___wmul 198A  
             _Lcd_Write_String 16FA                  __pidataCOMRAM 19FA              _Eeprom_Write_Byte 198A  
           ?_Eeprom_Write_Byte 0018            start_initialization 1604                   _latch_keypad 18D8  
                  __end_of_ISR 0102                      _i2c_r_reg 0100                      _i2c_w_reg 0120  
               _mcu_initialise 17BE            ??_Eeprom_Write_Byte 0019              __size_of_Lcd_Init 0078  
            __size_of_Lcd_Port 002C          __size_of_load_reg_map 008E                     ?_Lcd_Clear 0001  
                     ??___wmul 0023                    __pdataBANK0 0092                    __pdataBANK1 0100  
             __CFG_LPT1OSC$OFF 000000      __end_of_Eeprom_Write_Byte 19AE                Lcd_Write_Char@a 001B  
              Lcd_Write_Char@y 001A      menu_seconds_to_mmss@F3627 0037                    __pbssCOMRAM 0046  
       __end_of_mcu_initialise 1810                  __pcstackBANK0 0060                  __pcstackBANK1 0140  
                ??_read_keypad 0018                   _load_reg_map 1464          __end_of_start_routine 121E  
                     ?_Lcd_Cmd 0001        __size_ofi2_load_reg_map 008E                      __pnvBANK0 00CE  
                 _current_user 00C3               ___lwdiv@dividend 0018              __CFG_CCP2MX$PORTC 000000  
             ??_Lcd_Set_Cursor 001B                      __pintcode 0008                  __pmediumconst 7EC0  
                     ?___awdiv 0018                       ?___lwdiv 0018                       _I2C_ADDR 00CE  
              ?_mcu_initialise 0001               ___lwdiv@quotient 001D               _Eeprom_Read_Byte 19E6  
           menu_progress_bar@d 0060             menu_progress_bar@i 0066            __end_of_read_keypad 1464  
               ___wmul@product 0023                       _LATDbits 000F8C                       _PIE1bits 000F9D  
                     Lcd_Cmd@a 0019                       _PIR1bits 000F9E                       _PIR2bits 000FA1  
                  ??_Lcd_Clear 001A               __CFG_WDTPS$32768 000000                      main@F3695 00B9  
                    main@F3679 00AC     __size_of_Eeprom_Write_Byte 0024                      main@i_803 016D  
                    main@i_770 0167                      main@i_766 016B                      main@i_776 0163  
                    main@i_792 015B                      main@i_785 0165                      main@i_769 0157  
                    main@i_795 015D              ___wmul@multiplier 001F                      main@i_789 0159  
                    main@i_798 0169                      main@i_799 0153               ??_Lcd_Write_Char 0019  
                     _Lcd_Init 1682                       _Lcd_Port 1910                      copy_data0 1628  
                    copy_data1 1648                      copy_data2 1668       __end_of_Lcd_Write_String 176C  
             __size_of_Lcd_Cmd 0018                     _EECON1bits 000FA6                       __Hrparam 0000  
                     __Lrparam 0000             __CFG_BOREN$SBORDIS 000000               __size_of___awdiv 0084  
             __size_of___lwdiv 0052      start_routine@I2C_new_ADDR 0087                    _current_pin 00BA  
                load_reg_map@i 001C                ___lwdiv@divisor 001A                ___lwdiv@counter 001C  
                  _read_keypad 13C0                       __ptext10 13C0                       __ptext11 1580  
                     __ptext20 14F2                       __ptext12 198A                       __ptext13 17BE  
                     __ptext14 19E6                       __ptext15 1464                       __ptext16 1682  
                     __ptext17 19CE                       __ptext18 1910                 i2_load_reg_map 14F2  
                __size_of_main 0998           main@credential_state 0156          Eeprom_Write_Byte@data 0018  
     Eeprom_Write_Byte@address 0019                       int$flags 0048            main@is_leading_zero 015F  
                  _OSCTUNEbits 000F9B                     _INTCONbits 000FF2         __end_ofi2_load_reg_map 1580  
           Lcd_Write_Char@temp 0019                       intlevel2 0000       __end_of_Eeprom_Read_Byte 19FA  
           Lcd_Set_Cursor@temp 001E               ??_mcu_initialise 0019                 menu_main@F3618 0041  
       start_routine@error_msg 0070                    _SSPCON1bits 000FC6                ?i2_load_reg_map 0001  
            __CFG_FOSC$INTIO67 000000  
