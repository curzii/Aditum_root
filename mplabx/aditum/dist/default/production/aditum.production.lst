

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Oct 14 15:19:44 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	idataBANK0,global,class=CODE,delta=1
     8                           	psect	idataBANK1,global,class=CODE,delta=1
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           	psect	eeprom_data
    45  F00000  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    46                           
    47                           	psect	idataCOMRAM
    48  001AB4                     __pidataCOMRAM:
    49                           	opt stack 0
    50                           
    51                           ;initializer for main@F3679
    52  001AB4  30                 	db	48
    53  001AB5  31                 	db	49
    54  001AB6  32                 	db	50
    55  001AB7  33                 	db	51
    56  001AB8  34                 	db	52
    57  001AB9  35                 	db	53
    58  001ABA  36                 	db	54
    59  001ABB  37                 	db	55
    60  001ABC  38                 	db	56
    61  001ABD  39                 	db	57
    62                           
    63                           ;initializer for menu_seconds_to_mmss@F3627
    64  001ABE  30                 	db	48
    65  001ABF  31                 	db	49
    66  001AC0  32                 	db	50
    67  001AC1  33                 	db	51
    68  001AC2  34                 	db	52
    69  001AC3  35                 	db	53
    70  001AC4  36                 	db	54
    71  001AC5  37                 	db	55
    72  001AC6  38                 	db	56
    73  001AC7  39                 	db	57
    74                           
    75                           ;initializer for menu_main@F3618
    76  001AC8  30                 	db	48
    77  001AC9  30                 	db	48
    78  001ACA  3A                 	db	58
    79  001ACB  30                 	db	48
    80  001ACC  30                 	db	48
    81                           
    82                           	psect	idataBANK0
    83  0019F0                     __pidataBANK0:
    84                           	opt stack 0
    85                           
    86                           ;initializer for _i2c_r_reg
    87  0019F0  2D                 	db	45
    88  0019F1  2D                 	db	45
    89  0019F2  2D                 	db	45
    90  0019F3  2D                 	db	45
    91  0019F4  2D                 	db	45
    92  0019F5  2D                 	db	45
    93  0019F6  2D                 	db	45
    94  0019F7  2D                 	db	45
    95  0019F8  2D                 	db	45
    96  0019F9  2D                 	db	45
    97  0019FA  2D                 	db	45
    98  0019FB  2D                 	db	45
    99  0019FC  2D                 	db	45
   100  0019FD  2D                 	db	45
   101  0019FE  2D                 	db	45
   102  0019FF  2D                 	db	45
   103  001A00  2D                 	db	45
   104  001A01  2D                 	db	45
   105  001A02  2D                 	db	45
   106  001A03  2D                 	db	45
   107  001A04  2D                 	db	45
   108  001A05  2D                 	db	45
   109  001A06  2D                 	db	45
   110  001A07  2D                 	db	45
   111  001A08  2D                 	db	45
   112  001A09  2D                 	db	45
   113  001A0A  2D                 	db	45
   114  001A0B  2D                 	db	45
   115  001A0C  2D                 	db	45
   116  001A0D  2D                 	db	45
   117  001A0E  2D                 	db	45
   118  001A0F  2D                 	db	45
   119                           
   120                           ;initializer for _c
   121  001A10  30                 	db	48
   122  001A11  31                 	db	49
   123  001A12  32                 	db	50
   124  001A13  33                 	db	51
   125  001A14  34                 	db	52
   126  001A15  35                 	db	53
   127  001A16  36                 	db	54
   128  001A17  37                 	db	55
   129  001A18  38                 	db	56
   130  001A19  39                 	db	57
   131                           
   132                           ;initializer for start_routine@F3723
   133  001A1A  30                 	db	48
   134  001A1B  30                 	db	48
   135  001A1C  30                 	db	48
   136                           
   137                           ;initializer for main@F3695
   138  001A1D  20                 	db	32
   139                           
   140                           	psect	idataBANK1
   141  0019C0                     __pidataBANK1:
   142                           	opt stack 0
   143                           
   144                           ;initializer for _i2c_w_reg
   145  0019C0  2D                 	db	45
   146  0019C1  2D                 	db	45
   147  0019C2  2D                 	db	45
   148  0019C3  2D                 	db	45
   149  0019C4  2D                 	db	45
   150  0019C5  2D                 	db	45
   151  0019C6  2D                 	db	45
   152  0019C7  2D                 	db	45
   153  0019C8  2D                 	db	45
   154  0019C9  2D                 	db	45
   155  0019CA  2D                 	db	45
   156  0019CB  2D                 	db	45
   157  0019CC  2D                 	db	45
   158  0019CD  2D                 	db	45
   159  0019CE  2D                 	db	45
   160  0019CF  2D                 	db	45
   161  0019D0  2D                 	db	45
   162  0019D1  2D                 	db	45
   163  0019D2  2D                 	db	45
   164  0019D3  2D                 	db	45
   165  0019D4  2D                 	db	45
   166  0019D5  2D                 	db	45
   167  0019D6  2D                 	db	45
   168  0019D7  2D                 	db	45
   169  0019D8  2D                 	db	45
   170  0019D9  2D                 	db	45
   171  0019DA  2D                 	db	45
   172  0019DB  2D                 	db	45
   173  0019DC  2D                 	db	45
   174  0019DD  2D                 	db	45
   175  0019DE  2D                 	db	45
   176  0019DF  2D                 	db	45
   177                           
   178                           ;initializer for _hx
   179  0019E0  30                 	db	48
   180  0019E1  31                 	db	49
   181  0019E2  32                 	db	50
   182  0019E3  33                 	db	51
   183  0019E4  34                 	db	52
   184  0019E5  35                 	db	53
   185  0019E6  36                 	db	54
   186  0019E7  37                 	db	55
   187  0019E8  38                 	db	56
   188  0019E9  39                 	db	57
   189  0019EA  41                 	db	65
   190  0019EB  42                 	db	66
   191  0019EC  43                 	db	67
   192  0019ED  44                 	db	68
   193  0019EE  45                 	db	69
   194  0019EF  46                 	db	70
   195                           
   196                           	psect	nvBANK0
   197  0000CE                     __pnvBANK0:
   198                           	opt stack 0
   199  0000CE                     _I2C_ADDR:
   200                           	opt stack 0
   201  0000CE                     	ds	1
   202  0000CF                     _Machine_ID:
   203                           	opt stack 0
   204  0000CF                     	ds	1
   205  0000                     _EEADR	set	4009
   206  0000                     _EECON1bits	set	4006
   207  0000                     _EECON2	set	4007
   208  0000                     _EEDATA	set	4008
   209  0000                     _INTCONbits	set	4082
   210  0000                     _LATC	set	3979
   211  0000                     _LATDbits	set	3980
   212  0000                     _OSCCON	set	4051
   213  0000                     _OSCTUNEbits	set	3995
   214  0000                     _PIE1bits	set	3997
   215  0000                     _PIR1bits	set	3998
   216  0000                     _PIR2bits	set	4001
   217  0000                     _PORTB	set	3969
   218  0000                     _PORTBbits	set	3969
   219  0000                     _PORTDbits	set	3971
   220  0000                     _SSPADD	set	4040
   221  0000                     _SSPBUF	set	4041
   222  0000                     _SSPCON1	set	4038
   223  0000                     _SSPCON1bits	set	4038
   224  0000                     _SSPCON2	set	4037
   225  0000                     _SSPSTAT	set	4039
   226  0000                     _SSPSTATbits	set	4039
   227  0000                     _TRISA	set	3986
   228  0000                     _TRISB	set	3987
   229  0000                     _TRISC	set	3988
   230  0000                     _TRISD	set	3989
   231                           
   232                           	psect	mediumconst
   233  007EC2                     __pmediumconst:
   234                           	opt stack 0
   235  007EC2  00                 	db	0
   236  007EC3                     STR_2:
   237  007EC3  20                 	db	32
   238  007EC4  20                 	db	32
   239  007EC5  20                 	db	32
   240  007EC6  20                 	db	32
   241  007EC7  20                 	db	32
   242  007EC8  20                 	db	32
   243  007EC9  20                 	db	32
   244  007ECA  20                 	db	32
   245  007ECB  20                 	db	32
   246  007ECC  20                 	db	32
   247  007ECD  20                 	db	32
   248  007ECE  20                 	db	32
   249  007ECF  20                 	db	32
   250  007ED0  20                 	db	32
   251  007ED1  20                 	db	32
   252  007ED2  20                 	db	32
   253  007ED3  00                 	db	0
   254  007ED4                     STR_4:
   255  007ED4  5B                 	db	91	;'['
   256  007ED5  20                 	db	32
   257  007ED6  5D                 	db	93	;']'
   258  007ED7  20                 	db	32
   259  007ED8  20                 	db	32
   260  007ED9  20                 	db	32
   261  007EDA  20                 	db	32
   262  007EDB  20                 	db	32
   263  007EDC  20                 	db	32
   264  007EDD  20                 	db	32
   265  007EDE  20                 	db	32
   266  007EDF  20                 	db	32
   267  007EE0  20                 	db	32
   268  007EE1  20                 	db	32
   269  007EE2  20                 	db	32
   270  007EE3  20                 	db	32
   271  007EE4  00                 	db	0
   272  007EE5                     STR_15:
   273  007EE5  20                 	db	32
   274  007EE6  20                 	db	32
   275  007EE7  20                 	db	32
   276  007EE8  5B                 	db	91	;'['
   277  007EE9  20                 	db	32
   278  007EEA  41                 	db	65	;'A'
   279  007EEB  64                 	db	100	;'d'
   280  007EEC  69                 	db	105	;'i'
   281  007EED  74                 	db	116	;'t'
   282  007EEE  75                 	db	117	;'u'
   283  007EEF  6D                 	db	109	;'m'
   284  007EF0  20                 	db	32
   285  007EF1  5D                 	db	93	;']'
   286  007EF2  20                 	db	32
   287  007EF3  20                 	db	32
   288  007EF4  20                 	db	32
   289  007EF5  00                 	db	0
   290  007EF6                     STR_10:
   291  007EF6  20                 	db	32
   292  007EF7  20                 	db	32
   293  007EF8  20                 	db	32
   294  007EF9  20                 	db	32
   295  007EFA  5B                 	db	91	;'['
   296  007EFB  20                 	db	32
   297  007EFC  52                 	db	82	;'R'
   298  007EFD  65                 	db	101	;'e'
   299  007EFE  74                 	db	116	;'t'
   300  007EFF  72                 	db	114	;'r'
   301  007F00  79                 	db	121	;'y'
   302  007F01  20                 	db	32
   303  007F02  5D                 	db	93	;']'
   304  007F03  20                 	db	32
   305  007F04  20                 	db	32
   306  007F05  20                 	db	32
   307  007F06  00                 	db	0
   308  007F07                     STR_8:
   309  007F07  20                 	db	32
   310  007F08  20                 	db	32
   311  007F09  20                 	db	32
   312  007F0A  20                 	db	32
   313  007F0B  5B                 	db	91	;'['
   314  007F0C  57                 	db	87	;'W'
   315  007F0D  65                 	db	101	;'e'
   316  007F0E  6C                 	db	108	;'l'
   317  007F0F  63                 	db	99	;'c'
   318  007F10  6F                 	db	111	;'o'
   319  007F11  6D                 	db	109	;'m'
   320  007F12  65                 	db	101	;'e'
   321  007F13  5D                 	db	93	;']'
   322  007F14  20                 	db	32
   323  007F15  20                 	db	32
   324  007F16  20                 	db	32
   325  007F17  00                 	db	0
   326  007F18                     STR_28:
   327  007F18  4F                 	db	79	;'O'
   328  007F19  75                 	db	117	;'u'
   329  007F1A  74                 	db	116	;'t'
   330  007F1B  20                 	db	32
   331  007F1C  6F                 	db	111	;'o'
   332  007F1D  66                 	db	102	;'f'
   333  007F1E  20                 	db	32
   334  007F1F  62                 	db	98	;'b'
   335  007F20  6F                 	db	111	;'o'
   336  007F21  75                 	db	117	;'u'
   337  007F22  6E                 	db	110	;'n'
   338  007F23  64                 	db	100	;'d'
   339  007F24  73                 	db	115	;'s'
   340  007F25  21                 	db	33
   341  007F26  20                 	db	32
   342  007F27  20                 	db	32
   343  007F28  00                 	db	0
   344  007F29                     STR_3:
   345  007F29  45                 	db	69	;'E'
   346  007F2A  6E                 	db	110	;'n'
   347  007F2B  74                 	db	116	;'t'
   348  007F2C  65                 	db	101	;'e'
   349  007F2D  72                 	db	114	;'r'
   350  007F2E  20                 	db	32
   351  007F2F  79                 	db	121	;'y'
   352  007F30  6F                 	db	111	;'o'
   353  007F31  75                 	db	117	;'u'
   354  007F32  72                 	db	114	;'r'
   355  007F33  20                 	db	32
   356  007F34  49                 	db	73	;'I'
   357  007F35  44                 	db	68	;'D'
   358  007F36  3A                 	db	58	;':'
   359  007F37  20                 	db	32
   360  007F38  20                 	db	32
   361  007F39  00                 	db	0
   362  007F3A                     STR_19:
   363  007F3A  20                 	db	32
   364  007F3B  20                 	db	32
   365  007F3C  5B                 	db	91	;'['
   366  007F3D  20                 	db	32
   367  007F3E  20                 	db	32
   368  007F3F  41                 	db	65	;'A'
   369  007F40  64                 	db	100	;'d'
   370  007F41  69                 	db	105	;'i'
   371  007F42  74                 	db	116	;'t'
   372  007F43  75                 	db	117	;'u'
   373  007F44  6D                 	db	109	;'m'
   374  007F45  20                 	db	32
   375  007F46  20                 	db	32
   376  007F47  5D                 	db	93	;']'
   377  007F48  20                 	db	32
   378  007F49  20                 	db	32
   379  007F4A  00                 	db	0
   380  007F4B                     STR_21:
   381  007F4B  4E                 	db	78	;'N'
   382  007F4C  65                 	db	101	;'e'
   383  007F4D  77                 	db	119	;'w'
   384  007F4E  20                 	db	32
   385  007F4F  4D                 	db	77	;'M'
   386  007F50  61                 	db	97	;'a'
   387  007F51  63                 	db	99	;'c'
   388  007F52  68                 	db	104	;'h'
   389  007F53  69                 	db	105	;'i'
   390  007F54  6E                 	db	110	;'n'
   391  007F55  65                 	db	101	;'e'
   392  007F56  20                 	db	32
   393  007F57  49                 	db	73	;'I'
   394  007F58  44                 	db	68	;'D'
   395  007F59  3A                 	db	58	;':'
   396  007F5A  20                 	db	32
   397  007F5B  00                 	db	0
   398  007F5C                     STR_5:
   399  007F5C  45                 	db	69	;'E'
   400  007F5D  6E                 	db	110	;'n'
   401  007F5E  74                 	db	116	;'t'
   402  007F5F  65                 	db	101	;'e'
   403  007F60  72                 	db	114	;'r'
   404  007F61  20                 	db	32
   405  007F62  79                 	db	121	;'y'
   406  007F63  6F                 	db	111	;'o'
   407  007F64  75                 	db	117	;'u'
   408  007F65  72                 	db	114	;'r'
   409  007F66  20                 	db	32
   410  007F67  50                 	db	80	;'P'
   411  007F68  49                 	db	73	;'I'
   412  007F69  4E                 	db	78	;'N'
   413  007F6A  3A                 	db	58	;':'
   414  007F6B  20                 	db	32
   415  007F6C  00                 	db	0
   416  007F6D                     STR_27:
   417  007F6D  4D                 	db	77	;'M'
   418  007F6E  61                 	db	97	;'a'
   419  007F6F  79                 	db	121	;'y'
   420  007F70  20                 	db	32
   421  007F71  6E                 	db	110	;'n'
   422  007F72  6F                 	db	111	;'o'
   423  007F73  74                 	db	116	;'t'
   424  007F74  20                 	db	32
   425  007F75  62                 	db	98	;'b'
   426  007F76  65                 	db	101	;'e'
   427  007F77  20                 	db	32
   428  007F78  7A                 	db	122	;'z'
   429  007F79  65                 	db	101	;'e'
   430  007F7A  72                 	db	114	;'r'
   431  007F7B  6F                 	db	111	;'o'
   432  007F7C  21                 	db	33
   433  007F7D  00                 	db	0
   434  007F7E                     STR_20:
   435  007F7E  4C                 	db	76	;'L'
   436  007F7F  6F                 	db	111	;'o'
   437  007F80  61                 	db	97	;'a'
   438  007F81  64                 	db	100	;'d'
   439  007F82  20                 	db	32
   440  007F83  49                 	db	73	;'I'
   441  007F84  32                 	db	50	;'2'
   442  007F85  43                 	db	67	;'C'
   443  007F86  20                 	db	32
   444  007F87  73                 	db	115	;'s'
   445  007F88  65                 	db	101	;'e'
   446  007F89  74                 	db	116	;'t'
   447  007F8A  75                 	db	117	;'u'
   448  007F8B  70                 	db	112	;'p'
   449  007F8C  2E                 	db	46
   450  007F8D  2E                 	db	46
   451  007F8E  00                 	db	0
   452  007F8F                     STR_26:
   453  007F8F  49                 	db	73	;'I'
   454  007F90  32                 	db	50	;'2'
   455  007F91  43                 	db	67	;'C'
   456  007F92  5F                 	db	95	;'_'
   457  007F93  41                 	db	65	;'A'
   458  007F94  44                 	db	68	;'D'
   459  007F95  44                 	db	68	;'D'
   460  007F96  52                 	db	82	;'R'
   461  007F97  3E                 	db	62	;'>'
   462  007F98  3E                 	db	62	;'>'
   463  007F99  45                 	db	69	;'E'
   464  007F9A  45                 	db	69	;'E'
   465  007F9B  50                 	db	80	;'P'
   466  007F9C  52                 	db	82	;'R'
   467  007F9D  4F                 	db	79	;'O'
   468  007F9E  4D                 	db	77	;'M'
   469  007F9F  00                 	db	0
   470  007FA0                     STR_22:
   471  007FA0  20                 	db	32
   472  007FA1  20                 	db	32
   473  007FA2  20                 	db	32
   474  007FA3  20                 	db	32
   475  007FA4  20                 	db	32
   476  007FA5  20                 	db	32
   477  007FA6  20                 	db	32
   478  007FA7  5B                 	db	91	;'['
   479  007FA8  30                 	db	48	;'0'
   480  007FA9  30                 	db	48	;'0'
   481  007FAA  31                 	db	49	;'1'
   482  007FAB  2D                 	db	45
   483  007FAC  31                 	db	49	;'1'
   484  007FAD  30                 	db	48	;'0'
   485  007FAE  30                 	db	48	;'0'
   486  007FAF  5D                 	db	93	;']'
   487  007FB0  00                 	db	0
   488  007FB1                     STR_9:
   489  007FB1  5B                 	db	91	;'['
   490  007FB2  41                 	db	65	;'A'
   491  007FB3  63                 	db	99	;'c'
   492  007FB4  63                 	db	99	;'c'
   493  007FB5  65                 	db	101	;'e'
   494  007FB6  73                 	db	115	;'s'
   495  007FB7  73                 	db	115	;'s'
   496  007FB8  20                 	db	32
   497  007FB9  20                 	db	32
   498  007FBA  44                 	db	68	;'D'
   499  007FBB  65                 	db	101	;'e'
   500  007FBC  6E                 	db	110	;'n'
   501  007FBD  69                 	db	105	;'i'
   502  007FBE  65                 	db	101	;'e'
   503  007FBF  64                 	db	100	;'d'
   504  007FC0  5D                 	db	93	;']'
   505  007FC1  00                 	db	0
   506  007FC2                     STR_7:
   507  007FC2  5B                 	db	91	;'['
   508  007FC3  41                 	db	65	;'A'
   509  007FC4  63                 	db	99	;'c'
   510  007FC5  63                 	db	99	;'c'
   511  007FC6  65                 	db	101	;'e'
   512  007FC7  73                 	db	115	;'s'
   513  007FC8  73                 	db	115	;'s'
   514  007FC9  20                 	db	32
   515  007FCA  47                 	db	71	;'G'
   516  007FCB  72                 	db	114	;'r'
   517  007FCC  61                 	db	97	;'a'
   518  007FCD  6E                 	db	110	;'n'
   519  007FCE  74                 	db	116	;'t'
   520  007FCF  65                 	db	101	;'e'
   521  007FD0  64                 	db	100	;'d'
   522  007FD1  5D                 	db	93	;']'
   523  007FD2  00                 	db	0
   524  007FD3                     STR_11:
   525  007FD3  5B                 	db	91	;'['
   526  007FD4  53                 	db	83	;'S'
   527  007FD5  79                 	db	121	;'y'
   528  007FD6  73                 	db	115	;'s'
   529  007FD7  74                 	db	116	;'t'
   530  007FD8  65                 	db	101	;'e'
   531  007FD9  6D                 	db	109	;'m'
   532  007FDA  20                 	db	32
   533  007FDB  45                 	db	69	;'E'
   534  007FDC  72                 	db	114	;'r'
   535  007FDD  72                 	db	114	;'r'
   536  007FDE  6F                 	db	111	;'o'
   537  007FDF  72                 	db	114	;'r'
   538  007FE0  20                 	db	32
   539  007FE1  00                 	db	0
   540  007FE2                     STR_18:
   541  007FE2  44                 	db	68	;'D'
   542  007FE3  65                 	db	101	;'e'
   543  007FE4  76                 	db	118	;'v'
   544  007FE5  69                 	db	105	;'i'
   545  007FE6  63                 	db	99	;'c'
   546  007FE7  65                 	db	101	;'e'
   547  007FE8  20                 	db	32
   548  007FE9  49                 	db	73	;'I'
   549  007FEA  44                 	db	68	;'D'
   550  007FEB  20                 	db	32
   551  007FEC  00                 	db	0
   552  007FED                     STR_17:
   553  007FED  31                 	db	49	;'1'
   554  007FEE  2E                 	db	46
   555  007FEF  30                 	db	48	;'0'
   556  007FF0  2E                 	db	46
   557  007FF1  30                 	db	48	;'0'
   558  007FF2  00                 	db	0
   559  007FF3                     STR_16:
   560  007FF3  52                 	db	82	;'R'
   561  007FF4  65                 	db	101	;'e'
   562  007FF5  76                 	db	118	;'v'
   563  007FF6  20                 	db	32
   564  007FF7  00                 	db	0
   565  007FF8                     STR_24:
   566  007FF8  5B                 	db	91	;'['
   567  007FF9  4F                 	db	79	;'O'
   568  007FFA  4B                 	db	75	;'K'
   569  007FFB  5D                 	db	93	;']'
   570  007FFC  00                 	db	0
   571  007FFD                     STR_25:
   572  007FFD  78                 	db	120	;'x'
   573  007FFE  00                 	db	0
   574  0000                     
   575                           ; #config settings
   576  007FFF  00                 	db	0	; dummy byte at the end
   577  0000                     
   578                           	psect	cinit
   579  0016F4                     __pcinit:
   580                           	opt stack 0
   581  0016F4                     start_initialization:
   582                           	opt stack 0
   583  0016F4                     __initialization:
   584                           	opt stack 0
   585                           
   586                           ; Clear objects allocated to BANK0 (20 bytes)
   587  0016F4  EE00  F0BA         	lfsr	0,__pbssBANK0
   588  0016F8  0E14               	movlw	20
   589  0016FA                     clear_0:
   590  0016FA  6AEE               	clrf	postinc0,c
   591  0016FC  06E8               	decf	wreg,f,c
   592  0016FE  E1FD               	bnz	clear_0
   593                           
   594                           ; Clear objects allocated to COMRAM (2 bytes)
   595  001700  6A4F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   596  001702  6A4E               	clrf	__pbssCOMRAM& (0+255),c
   597                           
   598                           ; Initialize objects allocated to BANK1 (48 bytes)
   599                           ; load TBLPTR registers with __pidataBANK1
   600  001704  0EC0               	movlw	low __pidataBANK1
   601  001706  6EF6               	movwf	tblptrl,c
   602  001708  0E19               	movlw	high __pidataBANK1
   603  00170A  6EF7               	movwf	tblptrh,c
   604  00170C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   605  00170E  6EF8               	movwf	tblptru,c
   606  001710  EE01  F033         	lfsr	0,__pdataBANK1
   607  001714  EE10 F030          	lfsr	1,48
   608  001718                     copy_data0:
   609  001718  0009               	tblrd		*+
   610  00171A  CFF5 FFEE          	movff	tablat,postinc0
   611  00171E  50E5               	movf	postdec1,w,c
   612  001720  50E1               	movf	fsr1l,w,c
   613  001722  E1FA               	bnz	copy_data0
   614                           
   615                           ; Initialize objects allocated to BANK0 (46 bytes)
   616                           ; load TBLPTR registers with __pidataBANK0
   617  001724  0EF0               	movlw	low __pidataBANK0
   618  001726  6EF6               	movwf	tblptrl,c
   619  001728  0E19               	movlw	high __pidataBANK0
   620  00172A  6EF7               	movwf	tblptrh,c
   621  00172C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   622  00172E  6EF8               	movwf	tblptru,c
   623  001730  EE00  F060         	lfsr	0,__pdataBANK0
   624  001734  EE10 F02E          	lfsr	1,46
   625  001738                     copy_data1:
   626  001738  0009               	tblrd		*+
   627  00173A  CFF5 FFEE          	movff	tablat,postinc0
   628  00173E  50E5               	movf	postdec1,w,c
   629  001740  50E1               	movf	fsr1l,w,c
   630  001742  E1FA               	bnz	copy_data1
   631                           
   632                           ; Initialize objects allocated to COMRAM (25 bytes)
   633                           ; load TBLPTR registers with __pidataCOMRAM
   634  001744  0EB4               	movlw	low __pidataCOMRAM
   635  001746  6EF6               	movwf	tblptrl,c
   636  001748  0E1A               	movlw	high __pidataCOMRAM
   637  00174A  6EF7               	movwf	tblptrh,c
   638  00174C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   639  00174E  6EF8               	movwf	tblptru,c
   640  001750  EE00  F035         	lfsr	0,__pdataCOMRAM
   641  001754  EE10 F019          	lfsr	1,25
   642  001758                     copy_data2:
   643  001758  0009               	tblrd		*+
   644  00175A  CFF5 FFEE          	movff	tablat,postinc0
   645  00175E  50E5               	movf	postdec1,w,c
   646  001760  50E1               	movf	fsr1l,w,c
   647  001762  E1FA               	bnz	copy_data2
   648  001764                     end_of_initialization:
   649                           	opt stack 0
   650  001764                     __end_of__initialization:
   651                           	opt stack 0
   652  001764  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   653  001766  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   654  001768  0E00               	movlw	low (__Lmediumconst shr (0+16))
   655  00176A  6EF8               	movwf	tblptru,c
   656  00176C  0100               	movlb	0
   657  00176E  EF81  F000         	goto	_main	;jump to C main() function
   658                           tblptru	equ	0xFF8
   659                           tblptrh	equ	0xFF7
   660                           tblptrl	equ	0xFF6
   661                           tablat	equ	0xFF5
   662                           postinc0	equ	0xFEE
   663                           wreg	equ	0xFE8
   664                           postdec1	equ	0xFE5
   665                           fsr1l	equ	0xFE1
   666                           
   667                           	psect	bssCOMRAM
   668  00004E                     __pbssCOMRAM:
   669                           	opt stack 0
   670  00004E                     _i2c_byte_count:
   671                           	opt stack 0
   672  00004E                     	ds	1
   673  00004F                     _i2c_reg_addr:
   674                           	opt stack 0
   675  00004F                     	ds	1
   676                           tblptru	equ	0xFF8
   677                           tblptrh	equ	0xFF7
   678                           tblptrl	equ	0xFF6
   679                           tablat	equ	0xFF5
   680                           postinc0	equ	0xFEE
   681                           wreg	equ	0xFE8
   682                           postdec1	equ	0xFE5
   683                           fsr1l	equ	0xFE1
   684                           
   685                           	psect	dataCOMRAM
   686  000035                     __pdataCOMRAM:
   687                           	opt stack 0
   688  000035                     main@F3679:
   689                           	opt stack 0
   690  000035                     	ds	10
   691  00003F                     menu_seconds_to_mmss@F3627:
   692                           	opt stack 0
   693  00003F                     	ds	10
   694  000049                     menu_main@F3618:
   695                           	opt stack 0
   696  000049                     	ds	5
   697                           tblptru	equ	0xFF8
   698                           tblptrh	equ	0xFF7
   699                           tblptrl	equ	0xFF6
   700                           tablat	equ	0xFF5
   701                           postinc0	equ	0xFEE
   702                           wreg	equ	0xFE8
   703                           postdec1	equ	0xFE5
   704                           fsr1l	equ	0xFE1
   705                           
   706                           	psect	bssBANK0
   707  0000BA                     __pbssBANK0:
   708                           	opt stack 0
   709  0000BA                     _current_pin:
   710                           	opt stack 0
   711  0000BA                     	ds	9
   712  0000C3                     _current_user:
   713                           	opt stack 0
   714  0000C3                     	ds	9
   715  0000CC                     _EEP_I2C_ADDR:
   716                           	opt stack 0
   717  0000CC                     	ds	1
   718  0000CD                     _credentials_accepted:
   719                           	opt stack 0
   720  0000CD                     	ds	1
   721                           tblptru	equ	0xFF8
   722                           tblptrh	equ	0xFF7
   723                           tblptrl	equ	0xFF6
   724                           tablat	equ	0xFF5
   725                           postinc0	equ	0xFEE
   726                           wreg	equ	0xFE8
   727                           postdec1	equ	0xFE5
   728                           fsr1l	equ	0xFE1
   729                           
   730                           	psect	dataBANK0
   731  000060                     __pdataBANK0:
   732                           	opt stack 0
   733  000060                     _i2c_r_reg:
   734                           	opt stack 0
   735  000060                     	ds	32
   736  000080                     _c:
   737                           	opt stack 0
   738  000080                     	ds	10
   739  00008A                     start_routine@F3723:
   740                           	opt stack 0
   741  00008A                     	ds	3
   742  00008D                     main@F3695:
   743                           	opt stack 0
   744  00008D                     	ds	1
   745                           tblptru	equ	0xFF8
   746                           tblptrh	equ	0xFF7
   747                           tblptrl	equ	0xFF6
   748                           tablat	equ	0xFF5
   749                           postinc0	equ	0xFEE
   750                           wreg	equ	0xFE8
   751                           postdec1	equ	0xFE5
   752                           fsr1l	equ	0xFE1
   753                           
   754                           	psect	dataBANK1
   755  000133                     __pdataBANK1:
   756                           	opt stack 0
   757  000133                     _i2c_w_reg:
   758                           	opt stack 0
   759  000133                     	ds	32
   760  000153                     _hx:
   761                           	opt stack 0
   762  000153                     	ds	16
   763                           tblptru	equ	0xFF8
   764                           tblptrh	equ	0xFF7
   765                           tblptrl	equ	0xFF6
   766                           tablat	equ	0xFF5
   767                           postinc0	equ	0xFEE
   768                           wreg	equ	0xFE8
   769                           postdec1	equ	0xFE5
   770                           fsr1l	equ	0xFE1
   771                           
   772                           	psect	cstackBANK1
   773  000100                     __pcstackBANK1:
   774                           	opt stack 0
   775  000100                     main@c:
   776                           	opt stack 0
   777                           
   778                           ; 10 bytes @ 0x0
   779  000100                     	ds	10
   780  00010A                     main@buffer:
   781                           	opt stack 0
   782                           
   783                           ; 9 bytes @ 0xA
   784  00010A                     	ds	9
   785  000113                     main@i_800:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0x13
   789  000113                     	ds	2
   790  000115                     main@n_c:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x15
   794  000115                     	ds	1
   795  000116                     main@i_769:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x16
   799  000116                     	ds	2
   800  000118                     main@i_789:
   801                           	opt stack 0
   802                           
   803                           ; 2 bytes @ 0x18
   804  000118                     	ds	2
   805  00011A                     main@i_792:
   806                           	opt stack 0
   807                           
   808                           ; 2 bytes @ 0x1A
   809  00011A                     	ds	2
   810  00011C                     main@i_796:
   811                           	opt stack 0
   812                           
   813                           ; 2 bytes @ 0x1C
   814  00011C                     	ds	2
   815  00011E                     main@is_leading_zero:
   816                           	opt stack 0
   817                           
   818                           ; 1 bytes @ 0x1E
   819  00011E                     	ds	1
   820  00011F                     main@credential_state:
   821                           	opt stack 0
   822                           
   823                           ; 1 bytes @ 0x1F
   824  00011F                     	ds	1
   825  000120                     main@a:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x20
   829  000120                     	ds	1
   830  000121                     main@i_776:
   831                           	opt stack 0
   832                           
   833                           ; 2 bytes @ 0x21
   834  000121                     	ds	2
   835  000123                     main@i_785:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x23
   839  000123                     	ds	2
   840  000125                     main@i:
   841                           	opt stack 0
   842                           
   843                           ; 2 bytes @ 0x25
   844  000125                     	ds	2
   845  000127                     main@i_770:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x27
   849  000127                     	ds	2
   850  000129                     main@i_799:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x29
   854  000129                     	ds	2
   855  00012B                     main@i_766:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0x2B
   859  00012B                     	ds	2
   860  00012D                     main@i_804:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x2D
   864  00012D                     	ds	2
   865  00012F                     main@digits:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x2F
   869  00012F                     	ds	1
   870  000130                     main@p:
   871                           	opt stack 0
   872                           
   873                           ; 1 bytes @ 0x30
   874  000130                     	ds	1
   875  000131                     main@n:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0x31
   879  000131                     	ds	1
   880  000132                     main@x:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x32
   884  000132                     	ds	1
   885                           tblptru	equ	0xFF8
   886                           tblptrh	equ	0xFF7
   887                           tblptrl	equ	0xFF6
   888                           tablat	equ	0xFF5
   889                           postinc0	equ	0xFEE
   890                           wreg	equ	0xFE8
   891                           postdec1	equ	0xFE5
   892                           fsr1l	equ	0xFE1
   893                           
   894                           	psect	cstackBANK0
   895  00008E                     __pcstackBANK0:
   896                           	opt stack 0
   897  00008E                     start_routine@h:
   898                           	opt stack 0
   899                           
   900                           ; 1 bytes @ 0x0
   901  00008E                     	ds	1
   902  00008F                     start_routine@l:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x1
   906  00008F                     	ds	1
   907  000090                     start_routine@error_msg:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0x2
   911  000090                     	ds	2
   912  000092                     start_routine@d1:
   913                           	opt stack 0
   914                           
   915                           ; 1 bytes @ 0x4
   916  000092                     	ds	1
   917  000093                     start_routine@v:
   918                           	opt stack 0
   919                           
   920                           ; 1 bytes @ 0x5
   921  000093                     	ds	1
   922  000094                     start_routine@i:
   923                           	opt stack 0
   924                           
   925                           ; 2 bytes @ 0x6
   926  000094                     	ds	2
   927  000096                     start_routine@i_876:
   928                           	opt stack 0
   929                           
   930                           ; 2 bytes @ 0x8
   931  000096                     	ds	2
   932  000098                     start_routine@i_884:
   933                           	opt stack 0
   934                           
   935                           ; 2 bytes @ 0xA
   936  000098                     	ds	2
   937  00009A                     start_routine@i_902:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0xC
   941  00009A                     	ds	2
   942  00009C                     start_routine@i_905:
   943                           	opt stack 0
   944                           
   945                           ; 2 bytes @ 0xE
   946  00009C                     	ds	2
   947  00009E                     start_routine@i_908:
   948                           	opt stack 0
   949                           
   950                           ; 2 bytes @ 0x10
   951  00009E                     	ds	2
   952  0000A0                     start_routine@b:
   953                           	opt stack 0
   954                           
   955                           ; 3 bytes @ 0x12
   956  0000A0                     	ds	3
   957  0000A3                     start_routine@i_899:
   958                           	opt stack 0
   959                           
   960                           ; 2 bytes @ 0x15
   961  0000A3                     	ds	2
   962  0000A5                     start_routine@i_909:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0x17
   966  0000A5                     	ds	2
   967  0000A7                     start_routine@I2C_new_ADDR:
   968                           	opt stack 0
   969                           
   970                           ; 3 bytes @ 0x19
   971  0000A7                     	ds	3
   972  0000AA                     start_routine@a:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0x1C
   976  0000AA                     	ds	1
   977  0000AB                     start_routine@dt:
   978                           	opt stack 0
   979                           
   980                           ; 1 bytes @ 0x1D
   981  0000AB                     	ds	1
   982  0000AC                     start_routine@i_896:
   983                           	opt stack 0
   984                           
   985                           ; 2 bytes @ 0x1E
   986  0000AC                     	ds	2
   987  0000AE                     start_routine@dh:
   988                           	opt stack 0
   989                           
   990                           ; 1 bytes @ 0x20
   991  0000AE                     	ds	1
   992  0000AF                     start_routine@x:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x21
   996  0000AF                     	ds	1
   997  0000B0                     start_routine@n:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x22
  1001  0000B0                     	ds	1
  1002  0000B1                     start_routine@new_I2C_address:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x23
  1006  0000B1                     	ds	1
  1007  0000B2                     ??_main:
  1008                           
  1009                           ; 1 bytes @ 0x24
  1010  0000B2                     	ds	8
  1011                           tblptru	equ	0xFF8
  1012                           tblptrh	equ	0xFF7
  1013                           tblptrl	equ	0xFF6
  1014                           tablat	equ	0xFF5
  1015                           postinc0	equ	0xFEE
  1016                           wreg	equ	0xFE8
  1017                           postdec1	equ	0xFE5
  1018                           fsr1l	equ	0xFE1
  1019                           
  1020                           	psect	cstackCOMRAM
  1021  000001                     __pcstackCOMRAM:
  1022                           	opt stack 0
  1023  000001                     ??_ISR:
  1024                           
  1025                           ; 1 bytes @ 0x0
  1026  000001                     	ds	14
  1027  00000F                     ISR@sspBuf:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0xE
  1031  00000F                     	ds	1
  1032  000010                     ?___awdiv:
  1033                           	opt stack 0
  1034  000010                     ?___lwdiv:
  1035                           	opt stack 0
  1036  000010                     Lcd_Port@a:
  1037                           	opt stack 0
  1038  000010                     Eeprom_Read_Byte@address:
  1039                           	opt stack 0
  1040  000010                     Eeprom_Write_Byte@data:
  1041                           	opt stack 0
  1042  000010                     latch_keypad@x:
  1043                           	opt stack 0
  1044  000010                     ___awdiv@dividend:
  1045                           	opt stack 0
  1046  000010                     ___lwdiv@dividend:
  1047                           	opt stack 0
  1048                           
  1049                           ; 2 bytes @ 0xF
  1050  000010                     	ds	1
  1051  000011                     Lcd_Cmd@a:
  1052                           	opt stack 0
  1053  000011                     Lcd_Write_Char@temp:
  1054                           	opt stack 0
  1055  000011                     Eeprom_Write_Byte@address:
  1056                           	opt stack 0
  1057                           
  1058                           ; 1 bytes @ 0x10
  1059  000011                     	ds	1
  1060  000012                     ??_latch_keypad:
  1061  000012                     ??_Lcd_Clear:
  1062  000012                     ??_Lcd_Init:
  1063  000012                     Lcd_Set_Cursor@b:
  1064                           	opt stack 0
  1065  000012                     Lcd_Write_Char@y:
  1066                           	opt stack 0
  1067  000012                     ___awdiv@divisor:
  1068                           	opt stack 0
  1069  000012                     ___lwdiv@divisor:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x11
  1073  000012                     	ds	1
  1074  000013                     Lcd_Set_Cursor@a:
  1075                           	opt stack 0
  1076  000013                     Lcd_Write_Char@a:
  1077                           	opt stack 0
  1078                           
  1079                           ; 1 bytes @ 0x12
  1080  000013                     	ds	1
  1081  000014                     Lcd_Set_Cursor@z:
  1082                           	opt stack 0
  1083  000014                     ___awdiv@counter:
  1084                           	opt stack 0
  1085  000014                     ___lwdiv@counter:
  1086                           	opt stack 0
  1087  000014                     Lcd_Write_String@a:
  1088                           	opt stack 0
  1089                           
  1090                           ; 2 bytes @ 0x13
  1091  000014                     	ds	1
  1092  000015                     Lcd_Set_Cursor@y:
  1093                           	opt stack 0
  1094  000015                     ___awdiv@sign:
  1095                           	opt stack 0
  1096  000015                     ___lwdiv@quotient:
  1097                           	opt stack 0
  1098                           
  1099                           ; 2 bytes @ 0x14
  1100  000015                     	ds	1
  1101  000016                     ??_Lcd_Write_String:
  1102  000016                     Lcd_Set_Cursor@temp:
  1103                           	opt stack 0
  1104  000016                     ___awdiv@quotient:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0x15
  1108  000016                     	ds	1
  1109  000017                     ?___wmul:
  1110                           	opt stack 0
  1111  000017                     ___wmul@multiplier:
  1112                           	opt stack 0
  1113                           
  1114                           ; 2 bytes @ 0x16
  1115  000017                     	ds	1
  1116  000018                     ??_load_i2c_registers:
  1117  000018                     Lcd_Write_String@i:
  1118                           	opt stack 0
  1119                           
  1120                           ; 2 bytes @ 0x17
  1121  000018                     	ds	1
  1122  000019                     ___wmul@multiplicand:
  1123                           	opt stack 0
  1124                           
  1125                           ; 2 bytes @ 0x18
  1126  000019                     	ds	2
  1127  00001B                     ___wmul@product:
  1128                           	opt stack 0
  1129                           
  1130                           ; 2 bytes @ 0x1A
  1131  00001B                     	ds	1
  1132  00001C                     load_i2c_registers@checksum:
  1133                           	opt stack 0
  1134                           
  1135                           ; 2 bytes @ 0x1B
  1136  00001C                     	ds	1
  1137  00001D                     menu_progress_bar@load_time_ms:
  1138                           	opt stack 0
  1139                           
  1140                           ; 2 bytes @ 0x1C
  1141  00001D                     	ds	1
  1142  00001E                     load_i2c_registers@i_842:
  1143                           	opt stack 0
  1144                           
  1145                           ; 2 bytes @ 0x1D
  1146  00001E                     	ds	1
  1147  00001F                     ??_menu_progress_bar:
  1148                           
  1149                           ; 1 bytes @ 0x1E
  1150  00001F                     	ds	1
  1151  000020                     load_i2c_registers@i:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0x1F
  1155  000020                     	ds	2
  1156  000022                     load_i2c_registers@i_840:
  1157                           	opt stack 0
  1158                           
  1159                           ; 2 bytes @ 0x21
  1160  000022                     	ds	1
  1161  000023                     menu_progress_bar@d:
  1162                           	opt stack 0
  1163                           
  1164                           ; 4 bytes @ 0x22
  1165  000023                     	ds	4
  1166  000027                     menu_progress_bar@ii:
  1167                           	opt stack 0
  1168                           
  1169                           ; 2 bytes @ 0x26
  1170  000027                     	ds	2
  1171  000029                     menu_progress_bar@i:
  1172                           	opt stack 0
  1173                           
  1174                           ; 2 bytes @ 0x28
  1175  000029                     	ds	2
  1176  00002B                     menu_progress_bar@i_722:
  1177                           	opt stack 0
  1178                           
  1179                           ; 2 bytes @ 0x2A
  1180  00002B                     	ds	2
  1181  00002D                     menu_progress_bar@i_723:
  1182                           	opt stack 0
  1183                           
  1184                           ; 2 bytes @ 0x2C
  1185  00002D                     	ds	2
  1186  00002F                     menu_progress_bar@i_724:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x2E
  1190  00002F                     	ds	2
  1191  000031                     ??_start_routine:
  1192                           
  1193                           ; 1 bytes @ 0x30
  1194  000031                     	ds	4
  1195                           tblptru	equ	0xFF8
  1196                           tblptrh	equ	0xFF7
  1197                           tblptrl	equ	0xFF6
  1198                           tablat	equ	0xFF5
  1199                           postinc0	equ	0xFEE
  1200                           wreg	equ	0xFE8
  1201                           postdec1	equ	0xFE5
  1202                           fsr1l	equ	0xFE1
  1203                           
  1204 ;;
  1205 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  1206 ;;
  1207 ;; *************** function _main *****************
  1208 ;; Defined at:
  1209 ;;		line 47 in file "main.c"
  1210 ;; Parameters:    Size  Location     Type
  1211 ;;		None
  1212 ;; Auto vars:     Size  Location     Type
  1213 ;;  i               2   28[BANK1 ] int 
  1214 ;;  i               2   26[BANK1 ] int 
  1215 ;;  i               2   24[BANK1 ] int 
  1216 ;;  i               2   35[BANK1 ] int 
  1217 ;;  i               2   33[BANK1 ] int 
  1218 ;;  c              10    0[BANK1 ] unsigned char [10]
  1219 ;;  i               2   39[BANK1 ] int 
  1220 ;;  i               2   22[BANK1 ] int 
  1221 ;;  i               2   43[BANK1 ] int 
  1222 ;;  i               2   45[BANK1 ] int 
  1223 ;;  i               2   19[BANK1 ] int 
  1224 ;;  i               2   41[BANK1 ] int 
  1225 ;;  buffer          9   10[BANK1 ] unsigned char [9]
  1226 ;;  credential_s    1   31[BANK1 ] unsigned char 
  1227 ;;  i               2   37[BANK1 ] int 
  1228 ;;  digits          1   47[BANK1 ] unsigned char 
  1229 ;;  a               1   32[BANK1 ] unsigned char 
  1230 ;;  is_leading_z    1   30[BANK1 ] unsigned char 
  1231 ;;  n_c             1   21[BANK1 ] unsigned char 
  1232 ;;  x               1   50[BANK1 ] unsigned char 
  1233 ;;  n               1   49[BANK1 ] unsigned char 
  1234 ;;  p               1   48[BANK1 ] unsigned char 
  1235 ;; Return value:  Size  Location     Type
  1236 ;;                  1    wreg      void 
  1237 ;; Registers used:
  1238 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1239 ;; Tracked objects:
  1240 ;;		On entry : 0/0
  1241 ;;		On exit  : 0/0
  1242 ;;		Unchanged: 0/0
  1243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1244 ;;      Params:         0       0       0       0       0       0       0
  1245 ;;      Locals:         0       0      51       0       0       0       0
  1246 ;;      Temps:          0       8       0       0       0       0       0
  1247 ;;      Totals:         0       8      51       0       0       0       0
  1248 ;;Total ram usage:       59 bytes
  1249 ;; Hardware stack levels required when called:    6
  1250 ;; This function calls:
  1251 ;;		_Lcd_Clear
  1252 ;;		_Lcd_Init
  1253 ;;		_Lcd_Set_Cursor
  1254 ;;		_Lcd_Write_Char
  1255 ;;		_Lcd_Write_String
  1256 ;;		___awdiv
  1257 ;;		_latch_keypad
  1258 ;;		_load_i2c_registers
  1259 ;;		_mcu_initialise
  1260 ;;		_menu_progress_bar
  1261 ;;		_read_keypad
  1262 ;;		_start_routine
  1263 ;; This function is called by:
  1264 ;;		Startup code after reset
  1265 ;; This function uses a non-reentrant model
  1266 ;;
  1267                           
  1268                           	psect	text0
  1269  000102                     __ptext0:
  1270                           	opt stack 0
  1271  000102                     _main:
  1272                           	opt stack 25
  1273                           
  1274                           ;main.c: 51: unsigned char n = 0, p = 0;
  1275                           
  1276                           ;incstack = 0
  1277  000102  0E00               	movlw	0
  1278  000104  0101               	movlb	1	; () banked
  1279  000106  6F31               	movwf	main@n& (0+255),b
  1280  000108  0E00               	movlw	0
  1281  00010A  0101               	movlb	1	; () banked
  1282  00010C  6F30               	movwf	main@p& (0+255),b
  1283                           
  1284                           ;main.c: 52: unsigned char x = '_';
  1285  00010E  0E5F               	movlw	95
  1286  000110  0101               	movlb	1	; () banked
  1287  000112  6F32               	movwf	main@x& (0+255),b
  1288                           
  1289                           ; BSR set to: 1
  1290                           ;main.c: 55: mcu_initialise();
  1291  000114  EC57  F00C         	call	_mcu_initialise	;wreg free
  1292                           
  1293                           ;main.c: 56: Lcd_Init();
  1294  000118  ECB9  F00B         	call	_Lcd_Init	;wreg free
  1295                           
  1296                           ;main.c: 60: start_routine();
  1297  00011C  ECFA  F005         	call	_start_routine	;wreg free
  1298  000120                     l4155:
  1299                           
  1300                           ;main.c: 64: {
  1301                           ;main.c: 65: for (int i = 0; i < 32; i++)
  1302  000120  0E00               	movlw	0
  1303  000122  0101               	movlb	1	; () banked
  1304  000124  6F26               	movwf	(main@i+1)& (0+255),b
  1305  000126  0E00               	movlw	0
  1306  000128  6F25               	movwf	main@i& (0+255),b
  1307                           
  1308                           ; BSR set to: 1
  1309  00012A  0101               	movlb	1	; () banked
  1310  00012C  BF26               	btfsc	(main@i+1)& (0+255),7,b
  1311  00012E  D00C               	goto	l4161
  1312  000130  0101               	movlb	1	; () banked
  1313  000132  5126               	movf	(main@i+1)& (0+255),w,b
  1314  000134  E107               	bnz	u3890
  1315  000136  0E20               	movlw	32
  1316  000138  0101               	movlb	1	; () banked
  1317  00013A  5D25               	subwf	main@i& (0+255),w,b
  1318  00013C  B0D8               	btfsc	status,0,c
  1319  00013E  EFE6  F004         	goto	l4419
  1320  000142  D002               	goto	l4161
  1321  000144                     u3890:
  1322                           
  1323                           ; BSR set to: 1
  1324  000144  EFE6  F004         	goto	l4419
  1325  000148                     l4161:
  1326                           
  1327                           ; BSR set to: 1
  1328                           ;main.c: 66: {
  1329                           ;main.c: 67: i2c_w_reg[i] = '-';
  1330  000148  0E33               	movlw	low _i2c_w_reg
  1331  00014A  0101               	movlb	1	; () banked
  1332  00014C  2525               	addwf	main@i& (0+255),w,b
  1333  00014E  6ED9               	movwf	fsr2l,c
  1334  000150  0E01               	movlw	high _i2c_w_reg
  1335  000152  0101               	movlb	1	; () banked
  1336  000154  2126               	addwfc	(main@i+1)& (0+255),w,b
  1337  000156  6EDA               	movwf	fsr2h,c
  1338  000158  0E2D               	movlw	45
  1339  00015A  6EDF               	movwf	indf2,c
  1340                           
  1341                           ;main.c: 68: i2c_r_reg[i] = '-';
  1342  00015C  0E60               	movlw	low _i2c_r_reg
  1343  00015E  0101               	movlb	1	; () banked
  1344  000160  2525               	addwf	main@i& (0+255),w,b
  1345  000162  6ED9               	movwf	fsr2l,c
  1346  000164  0E00               	movlw	high _i2c_r_reg
  1347  000166  0101               	movlb	1	; () banked
  1348  000168  2126               	addwfc	(main@i+1)& (0+255),w,b
  1349  00016A  6EDA               	movwf	fsr2h,c
  1350  00016C  0E2D               	movlw	45
  1351  00016E  6EDF               	movwf	indf2,c
  1352                           
  1353                           ; BSR set to: 1
  1354  000170  0101               	movlb	1	; () banked
  1355  000172  4B25               	infsnz	main@i& (0+255),f,b
  1356  000174  2B26               	incf	(main@i+1)& (0+255),f,b
  1357                           
  1358                           ; BSR set to: 1
  1359  000176  0101               	movlb	1	; () banked
  1360  000178  BF26               	btfsc	(main@i+1)& (0+255),7,b
  1361  00017A  D7E6               	goto	l4161
  1362  00017C  0101               	movlb	1	; () banked
  1363  00017E  5126               	movf	(main@i+1)& (0+255),w,b
  1364  000180  E101               	bnz	u3900
  1365  000182  D7D9               	goto	L1
  1366  000184                     u3900:
  1367                           
  1368                           ; BSR set to: 1
  1369                           ;main.c: 69: }
  1370                           ;main.c: 70: while (credentials_accepted == 0 )
  1371  000184  EFE6  F004         	goto	l4419
  1372  000188                     l4167:
  1373                           
  1374                           ;main.c: 71: {
  1375                           ;main.c: 72: unsigned char buffer[9];
  1376                           ;main.c: 73: for (int i = 0; i < 9; i++)
  1377  000188  0E00               	movlw	0
  1378  00018A  0101               	movlb	1	; () banked
  1379  00018C  6F2C               	movwf	(main@i_766+1)& (0+255),b
  1380  00018E  0E00               	movlw	0
  1381  000190  6F2B               	movwf	main@i_766& (0+255),b
  1382  000192                     l4169:
  1383                           
  1384                           ; BSR set to: 1
  1385  000192  0101               	movlb	1	; () banked
  1386  000194  BF2C               	btfsc	(main@i_766+1)& (0+255),7,b
  1387  000196  D008               	goto	l4173
  1388  000198  0101               	movlb	1	; () banked
  1389  00019A  512C               	movf	(main@i_766+1)& (0+255),w,b
  1390  00019C  E127               	bnz	l4179
  1391  00019E  0E09               	movlw	9
  1392  0001A0  0101               	movlb	1	; () banked
  1393  0001A2  5D2B               	subwf	main@i_766& (0+255),w,b
  1394  0001A4  B0D8               	btfsc	status,0,c
  1395  0001A6  D022               	goto	l4179
  1396  0001A8                     l4173:
  1397                           
  1398                           ; BSR set to: 1
  1399                           ;main.c: 74: {
  1400                           ;main.c: 75: current_user[i] = '0';
  1401  0001A8  0EC3               	movlw	low _current_user
  1402  0001AA  0101               	movlb	1	; () banked
  1403  0001AC  252B               	addwf	main@i_766& (0+255),w,b
  1404  0001AE  6ED9               	movwf	fsr2l,c
  1405  0001B0  0E00               	movlw	high _current_user
  1406  0001B2  0101               	movlb	1	; () banked
  1407  0001B4  212C               	addwfc	(main@i_766+1)& (0+255),w,b
  1408  0001B6  6EDA               	movwf	fsr2h,c
  1409  0001B8  0E30               	movlw	48
  1410  0001BA  6EDF               	movwf	indf2,c
  1411                           
  1412                           ;main.c: 76: current_pin[i] = '0';
  1413  0001BC  0EBA               	movlw	low _current_pin
  1414  0001BE  0101               	movlb	1	; () banked
  1415  0001C0  252B               	addwf	main@i_766& (0+255),w,b
  1416  0001C2  6ED9               	movwf	fsr2l,c
  1417  0001C4  0E00               	movlw	high _current_pin
  1418  0001C6  0101               	movlb	1	; () banked
  1419  0001C8  212C               	addwfc	(main@i_766+1)& (0+255),w,b
  1420  0001CA  6EDA               	movwf	fsr2h,c
  1421  0001CC  0E30               	movlw	48
  1422  0001CE  6EDF               	movwf	indf2,c
  1423                           
  1424                           ;main.c: 77: buffer[i] = '0';
  1425  0001D0  0E0A               	movlw	low main@buffer
  1426  0001D2  0101               	movlb	1	; () banked
  1427  0001D4  252B               	addwf	main@i_766& (0+255),w,b
  1428  0001D6  6ED9               	movwf	fsr2l,c
  1429  0001D8  0E01               	movlw	high main@buffer
  1430  0001DA  0101               	movlb	1	; () banked
  1431  0001DC  212C               	addwfc	(main@i_766+1)& (0+255),w,b
  1432  0001DE  6EDA               	movwf	fsr2h,c
  1433  0001E0  0E30               	movlw	48
  1434  0001E2  6EDF               	movwf	indf2,c
  1435                           
  1436                           ; BSR set to: 1
  1437  0001E4  0101               	movlb	1	; () banked
  1438  0001E6  4B2B               	infsnz	main@i_766& (0+255),f,b
  1439  0001E8  2B2C               	incf	(main@i_766+1)& (0+255),f,b
  1440  0001EA  D7D3               	goto	l4169
  1441  0001EC                     l4179:
  1442                           
  1443                           ; BSR set to: 1
  1444                           ;main.c: 78: }
  1445                           ;main.c: 79: n = 0;
  1446  0001EC  0E00               	movlw	0
  1447  0001EE  0101               	movlb	1	; () banked
  1448  0001F0  6F31               	movwf	main@n& (0+255),b
  1449                           
  1450                           ; BSR set to: 1
  1451                           ;main.c: 80: Lcd_Set_Cursor(1,1);
  1452  0001F2  0E01               	movlw	1
  1453  0001F4  6E12               	movwf	Lcd_Set_Cursor@b,c
  1454  0001F6  0E01               	movlw	1
  1455  0001F8  EC80  F00C         	call	_Lcd_Set_Cursor
  1456                           
  1457                           ;main.c: 81: Lcd_Write_String("Enter your ID:  ");
  1458  0001FC  0E29               	movlw	low STR_3
  1459  0001FE  6E14               	movwf	Lcd_Write_String@a,c
  1460  000200  0E7F               	movlw	high STR_3
  1461  000202  6E15               	movwf	Lcd_Write_String@a+1,c
  1462  000204  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  1463                           
  1464                           ;main.c: 82: Lcd_Set_Cursor(2,1);
  1465  000208  0E01               	movlw	1
  1466  00020A  6E12               	movwf	Lcd_Set_Cursor@b,c
  1467  00020C  0E02               	movlw	2
  1468  00020E  EC80  F00C         	call	_Lcd_Set_Cursor
  1469                           
  1470                           ;main.c: 83: Lcd_Write_String("[ ]             ");
  1471  000212  0ED4               	movlw	low STR_4
  1472  000214  6E14               	movwf	Lcd_Write_String@a,c
  1473  000216  0E7E               	movlw	high STR_4
  1474  000218  6E15               	movwf	Lcd_Write_String@a+1,c
  1475  00021A  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  1476                           
  1477                           ;main.c: 84: Lcd_Set_Cursor(2,1);
  1478  00021E  0E01               	movlw	1
  1479  000220  6E12               	movwf	Lcd_Set_Cursor@b,c
  1480  000222  0E02               	movlw	2
  1481  000224  EC80  F00C         	call	_Lcd_Set_Cursor
  1482                           
  1483                           ;main.c: 86: while (n < 10)
  1484  000228  D0D0               	goto	l4241
  1485  00022A                     l4191:
  1486                           
  1487                           ;main.c: 87: {
  1488                           ;main.c: 88: if (n == 9)
  1489  00022A  0E09               	movlw	9
  1490  00022C  0101               	movlb	1	; () banked
  1491  00022E  1931               	xorwf	main@n& (0+255),w,b
  1492  000230  B4D8               	btfsc	status,2,c
  1493  000232  D0CF               	goto	l4243
  1494                           
  1495                           ; BSR set to: 1
  1496                           ;main.c: 90: Lcd_Set_Cursor(2,2);
  1497                           
  1498                           ; BSR set to: 1
  1499                           
  1500                           ; BSR set to: 1
  1501                           ;main.c: 89: break;
  1502  000234  0E02               	movlw	2
  1503  000236  6E12               	movwf	Lcd_Set_Cursor@b,c
  1504  000238  0E02               	movlw	2
  1505  00023A  EC80  F00C         	call	_Lcd_Set_Cursor
  1506                           
  1507                           ;main.c: 91: Lcd_Write_Char(c[9-n]);
  1508  00023E  0101               	movlb	1	; () banked
  1509  000240  5131               	movf	main@n& (0+255),w,b
  1510  000242  0100               	movlb	0	; () banked
  1511  000244  6FB2               	movwf	??_main& (0+255),b
  1512  000246  6BB3               	clrf	(??_main+1)& (0+255),b
  1513  000248  0100               	movlb	0	; () banked
  1514  00024A  1FB2               	comf	??_main& (0+255),f,b
  1515  00024C  1FB3               	comf	(??_main+1)& (0+255),f,b
  1516  00024E  4BB2               	infsnz	??_main& (0+255),f,b
  1517  000250  2BB3               	incf	(??_main+1)& (0+255),f,b
  1518  000252  0E09               	movlw	9
  1519  000254  0100               	movlb	0	; () banked
  1520  000256  27B2               	addwf	??_main& (0+255),f,b
  1521  000258  0E00               	movlw	0
  1522  00025A  23B3               	addwfc	(??_main+1)& (0+255),f,b
  1523  00025C  0E80               	movlw	low _c
  1524  00025E  0100               	movlb	0	; () banked
  1525  000260  25B2               	addwf	??_main& (0+255),w,b
  1526  000262  6ED9               	movwf	fsr2l,c
  1527  000264  0E00               	movlw	high _c
  1528  000266  0100               	movlb	0	; () banked
  1529  000268  21B3               	addwfc	(??_main+1)& (0+255),w,b
  1530  00026A  6EDA               	movwf	fsr2h,c
  1531  00026C  50DF               	movf	indf2,w,c
  1532  00026E  ECA8  F00C         	call	_Lcd_Write_Char
  1533                           
  1534                           ;main.c: 92: x = read_keypad();
  1535  000272  ECE6  F00A         	call	_read_keypad	;wreg free
  1536  000276  0101               	movlb	1	; () banked
  1537  000278  6F32               	movwf	main@x& (0+255),b
  1538                           
  1539                           ; BSR set to: 1
  1540                           ;main.c: 93: if (x != '_')
  1541  00027A  0E5F               	movlw	95
  1542  00027C  0101               	movlb	1	; () banked
  1543  00027E  1932               	xorwf	main@x& (0+255),w,b
  1544  000280  B4D8               	btfsc	status,2,c
  1545  000282  D0A3               	goto	l4241
  1546                           
  1547                           ; BSR set to: 1
  1548                           ;main.c: 94: {
  1549                           ;main.c: 95: if (((x - '#') == 0)&&(n > 0))
  1550  000284  0EDD               	movlw	221
  1551  000286  0100               	movlb	0	; () banked
  1552  000288  6FB2               	movwf	??_main& (0+255),b
  1553  00028A  0EFF               	movlw	255
  1554  00028C  0100               	movlb	0	; () banked
  1555  00028E  6FB3               	movwf	(??_main+1)& (0+255),b
  1556  000290  0101               	movlb	1	; () banked
  1557  000292  5132               	movf	main@x& (0+255),w,b
  1558  000294  0100               	movlb	0	; () banked
  1559  000296  6FB4               	movwf	(??_main+2)& (0+255),b
  1560  000298  6BB5               	clrf	(??_main+3)& (0+255),b
  1561  00029A  0100               	movlb	0	; () banked
  1562  00029C  51B2               	movf	??_main& (0+255),w,b
  1563  00029E  0100               	movlb	0	; () banked
  1564  0002A0  27B4               	addwf	(??_main+2)& (0+255),f,b
  1565  0002A2  0100               	movlb	0	; () banked
  1566  0002A4  51B3               	movf	(??_main+1)& (0+255),w,b
  1567  0002A6  0100               	movlb	0	; () banked
  1568  0002A8  23B5               	addwfc	(??_main+3)& (0+255),f,b
  1569  0002AA  0100               	movlb	0	; () banked
  1570  0002AC  51B4               	movf	(??_main+2)& (0+255),w,b
  1571  0002AE  0100               	movlb	0	; () banked
  1572  0002B0  11B5               	iorwf	(??_main+3)& (0+255),w,b
  1573  0002B2  A4D8               	btfss	status,2,c
  1574  0002B4  D034               	goto	l4223
  1575                           
  1576                           ; BSR set to: 0
  1577  0002B6  0101               	movlb	1	; () banked
  1578  0002B8  5131               	movf	main@n& (0+255),w,b
  1579  0002BA  0101               	movlb	1	; () banked
  1580  0002BC  B4D8               	btfsc	status,2,c
  1581  0002BE  D02F               	goto	l4223
  1582                           
  1583                           ; BSR set to: 1
  1584                           ;main.c: 96: {
  1585                           ;main.c: 97: buffer[n] = '?';
  1586  0002C0  0101               	movlb	1	; () banked
  1587  0002C2  5131               	movf	main@n& (0+255),w,b
  1588  0002C4  0D01               	mullw	1
  1589  0002C6  0E0A               	movlw	low main@buffer
  1590  0002C8  24F3               	addwf	prodl,w,c
  1591  0002CA  6ED9               	movwf	fsr2l,c
  1592  0002CC  0E01               	movlw	high main@buffer
  1593  0002CE  20F4               	addwfc	prodh,w,c
  1594  0002D0  6EDA               	movwf	fsr2h,c
  1595  0002D2  0E3F               	movlw	63
  1596  0002D4  6EDF               	movwf	indf2,c
  1597                           
  1598                           ; BSR set to: 1
  1599                           ;main.c: 98: Lcd_Set_Cursor(2, 7 + n);
  1600  0002D6  0101               	movlb	1	; () banked
  1601  0002D8  5131               	movf	main@n& (0+255),w,b
  1602  0002DA  0F07               	addlw	7
  1603  0002DC  6E12               	movwf	Lcd_Set_Cursor@b,c
  1604  0002DE  0E02               	movlw	2
  1605  0002E0  EC80  F00C         	call	_Lcd_Set_Cursor
  1606                           
  1607                           ;main.c: 99: Lcd_Write_Char('_');
  1608  0002E4  0E5F               	movlw	95
  1609  0002E6  ECA8  F00C         	call	_Lcd_Write_Char
  1610                           
  1611                           ;main.c: 100: latch_keypad(&x);
  1612  0002EA  0E32               	movlw	low main@x
  1613  0002EC  6E10               	movwf	latch_keypad@x,c
  1614  0002EE  0E01               	movlw	high main@x
  1615  0002F0  6E11               	movwf	latch_keypad@x+1,c
  1616  0002F2  ECC4  F00C         	call	_latch_keypad	;wreg free
  1617                           
  1618                           ;main.c: 101: Lcd_Set_Cursor(2, 8 + n);
  1619  0002F6  0101               	movlb	1	; () banked
  1620  0002F8  5131               	movf	main@n& (0+255),w,b
  1621  0002FA  0F08               	addlw	8
  1622  0002FC  6E12               	movwf	Lcd_Set_Cursor@b,c
  1623  0002FE  0E02               	movlw	2
  1624  000300  EC80  F00C         	call	_Lcd_Set_Cursor
  1625                           
  1626                           ;main.c: 102: Lcd_Write_Char(' ');
  1627  000304  0E20               	movlw	32
  1628  000306  ECA8  F00C         	call	_Lcd_Write_Char
  1629                           
  1630                           ;main.c: 103: Lcd_Set_Cursor(2, 7 + n);
  1631  00030A  0101               	movlb	1	; () banked
  1632  00030C  5131               	movf	main@n& (0+255),w,b
  1633  00030E  0F07               	addlw	7
  1634  000310  6E12               	movwf	Lcd_Set_Cursor@b,c
  1635  000312  0E02               	movlw	2
  1636  000314  EC80  F00C         	call	_Lcd_Set_Cursor
  1637                           
  1638                           ;main.c: 104: n--;
  1639  000318  0101               	movlb	1	; () banked
  1640  00031A  0731               	decf	main@n& (0+255),f,b
  1641                           
  1642                           ;main.c: 105: }
  1643  00031C  D056               	goto	l4241
  1644  00031E                     l4223:
  1645                           
  1646                           ;main.c: 106: else if ((x - '#') != 0)
  1647  00031E  0EDD               	movlw	221
  1648  000320  0100               	movlb	0	; () banked
  1649  000322  6FB2               	movwf	??_main& (0+255),b
  1650  000324  0EFF               	movlw	255
  1651  000326  0100               	movlb	0	; () banked
  1652  000328  6FB3               	movwf	(??_main+1)& (0+255),b
  1653  00032A  0101               	movlb	1	; () banked
  1654  00032C  5132               	movf	main@x& (0+255),w,b
  1655  00032E  0100               	movlb	0	; () banked
  1656  000330  6FB4               	movwf	(??_main+2)& (0+255),b
  1657  000332  6BB5               	clrf	(??_main+3)& (0+255),b
  1658  000334  0100               	movlb	0	; () banked
  1659  000336  51B2               	movf	??_main& (0+255),w,b
  1660  000338  0100               	movlb	0	; () banked
  1661  00033A  27B4               	addwf	(??_main+2)& (0+255),f,b
  1662  00033C  0100               	movlb	0	; () banked
  1663  00033E  51B3               	movf	(??_main+1)& (0+255),w,b
  1664  000340  0100               	movlb	0	; () banked
  1665  000342  23B5               	addwfc	(??_main+3)& (0+255),f,b
  1666  000344  0100               	movlb	0	; () banked
  1667  000346  51B4               	movf	(??_main+2)& (0+255),w,b
  1668  000348  0100               	movlb	0	; () banked
  1669  00034A  11B5               	iorwf	(??_main+3)& (0+255),w,b
  1670  00034C  B4D8               	btfsc	status,2,c
  1671  00034E  D03D               	goto	l4241
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;main.c: 107: {
  1675                           ;main.c: 108: if ((x == '*')|(n == 9))
  1676  000350  0E2A               	movlw	42
  1677  000352  0101               	movlb	1	; () banked
  1678  000354  1932               	xorwf	main@x& (0+255),w,b
  1679  000356  B4D8               	btfsc	status,2,c
  1680  000358  D03C               	goto	l4243
  1681                           
  1682                           ; BSR set to: 1
  1683  00035A  0E09               	movlw	9
  1684  00035C  0101               	movlb	1	; () banked
  1685  00035E  1931               	xorwf	main@n& (0+255),w,b
  1686  000360  B4D8               	btfsc	status,2,c
  1687  000362  D037               	goto	l4243
  1688                           
  1689                           ; BSR set to: 1
  1690                           ;main.c: 111: }
  1691                           ;main.c: 112: n++;
  1692                           
  1693                           ; BSR set to: 1
  1694                           
  1695                           ; BSR set to: 1
  1696                           ;main.c: 109: {
  1697                           ;main.c: 110: break;
  1698  000364  0101               	movlb	1	; () banked
  1699  000366  2B31               	incf	main@n& (0+255),f,b
  1700                           
  1701                           ; BSR set to: 1
  1702                           ;main.c: 113: buffer[n-1] = x;
  1703  000368  0EFF               	movlw	255
  1704  00036A  0100               	movlb	0	; () banked
  1705  00036C  6FB2               	movwf	??_main& (0+255),b
  1706  00036E  0EFF               	movlw	255
  1707  000370  0100               	movlb	0	; () banked
  1708  000372  6FB3               	movwf	(??_main+1)& (0+255),b
  1709  000374  0101               	movlb	1	; () banked
  1710  000376  5131               	movf	main@n& (0+255),w,b
  1711  000378  0100               	movlb	0	; () banked
  1712  00037A  6FB4               	movwf	(??_main+2)& (0+255),b
  1713  00037C  6BB5               	clrf	(??_main+3)& (0+255),b
  1714  00037E  0100               	movlb	0	; () banked
  1715  000380  51B2               	movf	??_main& (0+255),w,b
  1716  000382  0100               	movlb	0	; () banked
  1717  000384  27B4               	addwf	(??_main+2)& (0+255),f,b
  1718  000386  0100               	movlb	0	; () banked
  1719  000388  51B3               	movf	(??_main+1)& (0+255),w,b
  1720  00038A  0100               	movlb	0	; () banked
  1721  00038C  23B5               	addwfc	(??_main+3)& (0+255),f,b
  1722  00038E  0E0A               	movlw	low main@buffer
  1723  000390  0100               	movlb	0	; () banked
  1724  000392  25B4               	addwf	(??_main+2)& (0+255),w,b
  1725  000394  6ED9               	movwf	fsr2l,c
  1726  000396  0E01               	movlw	high main@buffer
  1727  000398  0100               	movlb	0	; () banked
  1728  00039A  21B5               	addwfc	(??_main+3)& (0+255),w,b
  1729  00039C  6EDA               	movwf	fsr2h,c
  1730  00039E  C132  FFDF         	movff	main@x,indf2
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;main.c: 114: Lcd_Set_Cursor(2, 7 + n);
  1734  0003A2  0101               	movlb	1	; () banked
  1735  0003A4  5131               	movf	main@n& (0+255),w,b
  1736  0003A6  0F07               	addlw	7
  1737  0003A8  6E12               	movwf	Lcd_Set_Cursor@b,c
  1738  0003AA  0E02               	movlw	2
  1739  0003AC  EC80  F00C         	call	_Lcd_Set_Cursor
  1740                           
  1741                           ;main.c: 115: Lcd_Write_Char(x);
  1742  0003B0  0101               	movlb	1	; () banked
  1743  0003B2  5132               	movf	main@x& (0+255),w,b
  1744  0003B4  ECA8  F00C         	call	_Lcd_Write_Char
  1745                           
  1746                           ;main.c: 116: Lcd_Write_Char('_');
  1747  0003B8  0E5F               	movlw	95
  1748  0003BA  ECA8  F00C         	call	_Lcd_Write_Char
  1749                           
  1750                           ;main.c: 117: latch_keypad(&x);
  1751  0003BE  0E32               	movlw	low main@x
  1752  0003C0  6E10               	movwf	latch_keypad@x,c
  1753  0003C2  0E01               	movlw	high main@x
  1754  0003C4  6E11               	movwf	latch_keypad@x+1,c
  1755  0003C6  ECC4  F00C         	call	_latch_keypad	;wreg free
  1756  0003CA                     l4241:
  1757  0003CA  0E09               	movlw	9
  1758  0003CC  0101               	movlb	1	; () banked
  1759  0003CE  6531               	cpfsgt	main@n& (0+255),b
  1760  0003D0  D72C               	goto	l4191
  1761  0003D2                     l4243:
  1762                           
  1763                           ; BSR set to: 1
  1764                           ;main.c: 118: }
  1765                           ;main.c: 119: }
  1766                           ;main.c: 120: }
  1767                           ;main.c: 121: for (int i = 0; i < 10; i++)
  1768  0003D2  0E00               	movlw	0
  1769  0003D4  0101               	movlb	1	; () banked
  1770  0003D6  6F17               	movwf	(main@i_769+1)& (0+255),b
  1771  0003D8  0E00               	movlw	0
  1772  0003DA  6F16               	movwf	main@i_769& (0+255),b
  1773  0003DC                     l4245:
  1774                           
  1775                           ; BSR set to: 1
  1776  0003DC  0101               	movlb	1	; () banked
  1777  0003DE  BF17               	btfsc	(main@i_769+1)& (0+255),7,b
  1778  0003E0  D008               	goto	l4249
  1779  0003E2  0101               	movlb	1	; () banked
  1780  0003E4  5117               	movf	(main@i_769+1)& (0+255),w,b
  1781  0003E6  E111               	bnz	l4253
  1782  0003E8  0E0A               	movlw	10
  1783  0003EA  0101               	movlb	1	; () banked
  1784  0003EC  5D16               	subwf	main@i_769& (0+255),w,b
  1785  0003EE  B0D8               	btfsc	status,0,c
  1786  0003F0  D00C               	goto	l4253
  1787  0003F2                     l4249:
  1788                           
  1789                           ; BSR set to: 1
  1790                           ;main.c: 122: _delay((unsigned long)((10)*(16000000/4000.0)));
  1791  0003F2  0E34               	movlw	52
  1792  0003F4  0100               	movlb	0	; () banked
  1793  0003F6  6FB2               	movwf	??_main& (0+255),b
  1794  0003F8  0EF2               	movlw	242
  1795  0003FA                     u4357:
  1796  0003FA  2EE8               	decfsz	wreg,f,c
  1797  0003FC  D7FE               	goto	u4357
  1798  0003FE  2FB2               	decfsz	??_main& (0+255),f,b
  1799  000400  D7FC               	goto	u4357
  1800  000402  0101               	movlb	1	; () banked
  1801  000404  4B16               	infsnz	main@i_769& (0+255),f,b
  1802  000406  2B17               	incf	(main@i_769+1)& (0+255),f,b
  1803  000408  D7E9               	goto	l4245
  1804  00040A                     l4253:
  1805                           
  1806                           ; BSR set to: 1
  1807                           ;main.c: 123: for (int i = 0; i < n; i++)
  1808  00040A  0E00               	movlw	0
  1809  00040C  0101               	movlb	1	; () banked
  1810  00040E  6F28               	movwf	(main@i_770+1)& (0+255),b
  1811  000410  0E00               	movlw	0
  1812  000412  6F27               	movwf	main@i_770& (0+255),b
  1813  000414  D075               	goto	l4261
  1814  000416                     l4255:
  1815                           
  1816                           ;main.c: 124: {
  1817                           ;main.c: 125: current_user[8 - i] = buffer[(n-1) - i];
  1818  000416  0EFF               	movlw	255
  1819  000418  0100               	movlb	0	; () banked
  1820  00041A  6FB2               	movwf	??_main& (0+255),b
  1821  00041C  0EFF               	movlw	255
  1822  00041E  0100               	movlb	0	; () banked
  1823  000420  6FB3               	movwf	(??_main+1)& (0+255),b
  1824  000422  C127  F0B4         	movff	main@i_770,??_main+2
  1825  000426  C128  F0B5         	movff	main@i_770+1,??_main+3
  1826  00042A  0100               	movlb	0	; () banked
  1827  00042C  1FB4               	comf	(??_main+2)& (0+255),f,b
  1828  00042E  1FB5               	comf	(??_main+3)& (0+255),f,b
  1829  000430  4BB4               	infsnz	(??_main+2)& (0+255),f,b
  1830  000432  2BB5               	incf	(??_main+3)& (0+255),f,b
  1831  000434  0101               	movlb	1	; () banked
  1832  000436  5131               	movf	main@n& (0+255),w,b
  1833  000438  0100               	movlb	0	; () banked
  1834  00043A  6FB6               	movwf	(??_main+4)& (0+255),b
  1835  00043C  6BB7               	clrf	(??_main+5)& (0+255),b
  1836  00043E  0100               	movlb	0	; () banked
  1837  000440  51B4               	movf	(??_main+2)& (0+255),w,b
  1838  000442  0100               	movlb	0	; () banked
  1839  000444  27B6               	addwf	(??_main+4)& (0+255),f,b
  1840  000446  0100               	movlb	0	; () banked
  1841  000448  51B5               	movf	(??_main+3)& (0+255),w,b
  1842  00044A  0100               	movlb	0	; () banked
  1843  00044C  23B7               	addwfc	(??_main+5)& (0+255),f,b
  1844  00044E  0100               	movlb	0	; () banked
  1845  000450  51B2               	movf	??_main& (0+255),w,b
  1846  000452  0100               	movlb	0	; () banked
  1847  000454  27B6               	addwf	(??_main+4)& (0+255),f,b
  1848  000456  0100               	movlb	0	; () banked
  1849  000458  51B3               	movf	(??_main+1)& (0+255),w,b
  1850  00045A  0100               	movlb	0	; () banked
  1851  00045C  23B7               	addwfc	(??_main+5)& (0+255),f,b
  1852  00045E  0E0A               	movlw	low main@buffer
  1853  000460  0100               	movlb	0	; () banked
  1854  000462  25B6               	addwf	(??_main+4)& (0+255),w,b
  1855  000464  6ED9               	movwf	fsr2l,c
  1856  000466  0E01               	movlw	high main@buffer
  1857  000468  0100               	movlb	0	; () banked
  1858  00046A  21B7               	addwfc	(??_main+5)& (0+255),w,b
  1859  00046C  6EDA               	movwf	fsr2h,c
  1860  00046E  C127  F0B8         	movff	main@i_770,??_main+6
  1861  000472  C128  F0B9         	movff	main@i_770+1,??_main+7
  1862  000476  0100               	movlb	0	; () banked
  1863  000478  1FB8               	comf	(??_main+6)& (0+255),f,b
  1864  00047A  1FB9               	comf	(??_main+7)& (0+255),f,b
  1865  00047C  4BB8               	infsnz	(??_main+6)& (0+255),f,b
  1866  00047E  2BB9               	incf	(??_main+7)& (0+255),f,b
  1867  000480  0E08               	movlw	8
  1868  000482  0100               	movlb	0	; () banked
  1869  000484  27B8               	addwf	(??_main+6)& (0+255),f,b
  1870  000486  0E00               	movlw	0
  1871  000488  23B9               	addwfc	(??_main+7)& (0+255),f,b
  1872  00048A  0EC3               	movlw	low _current_user
  1873  00048C  0100               	movlb	0	; () banked
  1874  00048E  25B8               	addwf	(??_main+6)& (0+255),w,b
  1875  000490  6EE1               	movwf	fsr1l,c
  1876  000492  0E00               	movlw	high _current_user
  1877  000494  0100               	movlb	0	; () banked
  1878  000496  21B9               	addwfc	(??_main+7)& (0+255),w,b
  1879  000498  6EE2               	movwf	fsr1h,c
  1880  00049A  CFDF FFE7          	movff	indf2,indf1
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;main.c: 126: buffer[(n-1) - i] = '0';
  1884  00049E  0EFF               	movlw	255
  1885  0004A0  0100               	movlb	0	; () banked
  1886  0004A2  6FB2               	movwf	??_main& (0+255),b
  1887  0004A4  0EFF               	movlw	255
  1888  0004A6  0100               	movlb	0	; () banked
  1889  0004A8  6FB3               	movwf	(??_main+1)& (0+255),b
  1890  0004AA  C127  F0B4         	movff	main@i_770,??_main+2
  1891  0004AE  C128  F0B5         	movff	main@i_770+1,??_main+3
  1892  0004B2  0100               	movlb	0	; () banked
  1893  0004B4  1FB4               	comf	(??_main+2)& (0+255),f,b
  1894  0004B6  1FB5               	comf	(??_main+3)& (0+255),f,b
  1895  0004B8  4BB4               	infsnz	(??_main+2)& (0+255),f,b
  1896  0004BA  2BB5               	incf	(??_main+3)& (0+255),f,b
  1897  0004BC  0101               	movlb	1	; () banked
  1898  0004BE  5131               	movf	main@n& (0+255),w,b
  1899  0004C0  0100               	movlb	0	; () banked
  1900  0004C2  6FB6               	movwf	(??_main+4)& (0+255),b
  1901  0004C4  6BB7               	clrf	(??_main+5)& (0+255),b
  1902  0004C6  0100               	movlb	0	; () banked
  1903  0004C8  51B4               	movf	(??_main+2)& (0+255),w,b
  1904  0004CA  0100               	movlb	0	; () banked
  1905  0004CC  27B6               	addwf	(??_main+4)& (0+255),f,b
  1906  0004CE  0100               	movlb	0	; () banked
  1907  0004D0  51B5               	movf	(??_main+3)& (0+255),w,b
  1908  0004D2  0100               	movlb	0	; () banked
  1909  0004D4  23B7               	addwfc	(??_main+5)& (0+255),f,b
  1910  0004D6  0100               	movlb	0	; () banked
  1911  0004D8  51B2               	movf	??_main& (0+255),w,b
  1912  0004DA  0100               	movlb	0	; () banked
  1913  0004DC  27B6               	addwf	(??_main+4)& (0+255),f,b
  1914  0004DE  0100               	movlb	0	; () banked
  1915  0004E0  51B3               	movf	(??_main+1)& (0+255),w,b
  1916  0004E2  0100               	movlb	0	; () banked
  1917  0004E4  23B7               	addwfc	(??_main+5)& (0+255),f,b
  1918  0004E6  0E0A               	movlw	low main@buffer
  1919  0004E8  0100               	movlb	0	; () banked
  1920  0004EA  25B6               	addwf	(??_main+4)& (0+255),w,b
  1921  0004EC  6ED9               	movwf	fsr2l,c
  1922  0004EE  0E01               	movlw	high main@buffer
  1923  0004F0  0100               	movlb	0	; () banked
  1924  0004F2  21B7               	addwfc	(??_main+5)& (0+255),w,b
  1925  0004F4  6EDA               	movwf	fsr2h,c
  1926  0004F6  0E30               	movlw	48
  1927  0004F8  6EDF               	movwf	indf2,c
  1928                           
  1929                           ; BSR set to: 0
  1930  0004FA  0101               	movlb	1	; () banked
  1931  0004FC  4B27               	infsnz	main@i_770& (0+255),f,b
  1932  0004FE  2B28               	incf	(main@i_770+1)& (0+255),f,b
  1933  000500                     l4261:
  1934                           
  1935                           ; BSR set to: 1
  1936  000500  0101               	movlb	1	; () banked
  1937  000502  5131               	movf	main@n& (0+255),w,b
  1938  000504  0100               	movlb	0	; () banked
  1939  000506  6FB2               	movwf	??_main& (0+255),b
  1940  000508  6BB3               	clrf	(??_main+1)& (0+255),b
  1941  00050A  0100               	movlb	0	; () banked
  1942  00050C  51B2               	movf	??_main& (0+255),w,b
  1943  00050E  0101               	movlb	1	; () banked
  1944  000510  5D27               	subwf	main@i_770& (0+255),w,b
  1945  000512  0101               	movlb	1	; () banked
  1946  000514  5128               	movf	(main@i_770+1)& (0+255),w,b
  1947  000516  0A80               	xorlw	128
  1948  000518  0100               	movlb	0	; () banked
  1949  00051A  6FB4               	movwf	(??_main+2)& (0+255),b
  1950  00051C  0100               	movlb	0	; () banked
  1951  00051E  51B3               	movf	(??_main+1)& (0+255),w,b
  1952  000520  0A80               	xorlw	128
  1953  000522  0100               	movlb	0	; () banked
  1954  000524  59B4               	subwfb	(??_main+2)& (0+255),w,b
  1955  000526  A0D8               	btfss	status,0,c
  1956  000528  D776               	goto	l4255
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;main.c: 127: }
  1960                           ;main.c: 128: Lcd_Clear();
  1961                           
  1962                           ; BSR set to: 0
  1963  00052A  EC4A  F00D         	call	_Lcd_Clear	;wreg free
  1964                           
  1965                           ;main.c: 129: menu_progress_bar(100);
  1966  00052E  0E00               	movlw	0
  1967  000530  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  1968  000532  0E64               	movlw	100
  1969  000534  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  1970  000536  ECBA  F009         	call	_menu_progress_bar	;wreg free
  1971                           
  1972                           ;main.c: 131: p = 0;
  1973  00053A  0E00               	movlw	0
  1974  00053C  0101               	movlb	1	; () banked
  1975  00053E  6F30               	movwf	main@p& (0+255),b
  1976                           
  1977                           ; BSR set to: 1
  1978                           ;main.c: 132: Lcd_Set_Cursor(1,1);
  1979  000540  0E01               	movlw	1
  1980  000542  6E12               	movwf	Lcd_Set_Cursor@b,c
  1981  000544  0E01               	movlw	1
  1982  000546  EC80  F00C         	call	_Lcd_Set_Cursor
  1983                           
  1984                           ;main.c: 133: Lcd_Write_String("Enter your PIN: ");
  1985  00054A  0E5C               	movlw	low STR_5
  1986  00054C  6E14               	movwf	Lcd_Write_String@a,c
  1987  00054E  0E7F               	movlw	high STR_5
  1988  000550  6E15               	movwf	Lcd_Write_String@a+1,c
  1989  000552  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  1990                           
  1991                           ;main.c: 134: Lcd_Set_Cursor(2,1);
  1992  000556  0E01               	movlw	1
  1993  000558  6E12               	movwf	Lcd_Set_Cursor@b,c
  1994  00055A  0E02               	movlw	2
  1995  00055C  EC80  F00C         	call	_Lcd_Set_Cursor
  1996                           
  1997                           ;main.c: 135: Lcd_Write_String("[ ]             ");
  1998  000560  0ED4               	movlw	low STR_4
  1999  000562  6E14               	movwf	Lcd_Write_String@a,c
  2000  000564  0E7E               	movlw	high STR_4
  2001  000566  6E15               	movwf	Lcd_Write_String@a+1,c
  2002  000568  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  2003                           
  2004                           ;main.c: 136: Lcd_Set_Cursor(2,1);
  2005  00056C  0E01               	movlw	1
  2006  00056E  6E12               	movwf	Lcd_Set_Cursor@b,c
  2007  000570  0E02               	movlw	2
  2008  000572  EC80  F00C         	call	_Lcd_Set_Cursor
  2009                           
  2010                           ;main.c: 137: while (p < 10)
  2011  000576  D0D8               	goto	l4331
  2012  000578                     l4279:
  2013                           
  2014                           ;main.c: 138: {
  2015                           ;main.c: 139: if (p == 9)
  2016  000578  0E09               	movlw	9
  2017  00057A  0101               	movlb	1	; () banked
  2018  00057C  1930               	xorwf	main@p& (0+255),w,b
  2019  00057E  B4D8               	btfsc	status,2,c
  2020  000580  D0D7               	goto	l4333
  2021                           
  2022                           ; BSR set to: 1
  2023                           ;main.c: 141: char c[] = {'0','1','2','3','4','5','6','7','8','9'};
  2024                           
  2025                           ; BSR set to: 1
  2026                           
  2027                           ; BSR set to: 1
  2028                           ;main.c: 140: break;
  2029  000582  EE20  F035         	lfsr	2,main@F3679
  2030  000586  EE11  F000         	lfsr	1,main@c
  2031  00058A  0E09               	movlw	9
  2032  00058C                     u4051:
  2033  00058C  CFDB FFE3          	movff	plusw2,plusw1
  2034  000590  06E8               	decf	wreg,f,c
  2035  000592  E2FC               	bc	u4051
  2036                           
  2037                           ; BSR set to: 1
  2038                           ;main.c: 142: Lcd_Set_Cursor(2,2);
  2039  000594  0E02               	movlw	2
  2040  000596  6E12               	movwf	Lcd_Set_Cursor@b,c
  2041  000598  0E02               	movlw	2
  2042  00059A  EC80  F00C         	call	_Lcd_Set_Cursor
  2043                           
  2044                           ;main.c: 143: Lcd_Write_Char(c[9-p]);
  2045  00059E  0101               	movlb	1	; () banked
  2046  0005A0  5130               	movf	main@p& (0+255),w,b
  2047  0005A2  0100               	movlb	0	; () banked
  2048  0005A4  6FB2               	movwf	??_main& (0+255),b
  2049  0005A6  6BB3               	clrf	(??_main+1)& (0+255),b
  2050  0005A8  0100               	movlb	0	; () banked
  2051  0005AA  1FB2               	comf	??_main& (0+255),f,b
  2052  0005AC  1FB3               	comf	(??_main+1)& (0+255),f,b
  2053  0005AE  4BB2               	infsnz	??_main& (0+255),f,b
  2054  0005B0  2BB3               	incf	(??_main+1)& (0+255),f,b
  2055  0005B2  0E09               	movlw	9
  2056  0005B4  0100               	movlb	0	; () banked
  2057  0005B6  27B2               	addwf	??_main& (0+255),f,b
  2058  0005B8  0E00               	movlw	0
  2059  0005BA  23B3               	addwfc	(??_main+1)& (0+255),f,b
  2060  0005BC  0E00               	movlw	low main@c
  2061  0005BE  0100               	movlb	0	; () banked
  2062  0005C0  25B2               	addwf	??_main& (0+255),w,b
  2063  0005C2  6ED9               	movwf	fsr2l,c
  2064  0005C4  0E01               	movlw	high main@c
  2065  0005C6  0100               	movlb	0	; () banked
  2066  0005C8  21B3               	addwfc	(??_main+1)& (0+255),w,b
  2067  0005CA  6EDA               	movwf	fsr2h,c
  2068  0005CC  50DF               	movf	indf2,w,c
  2069  0005CE  ECA8  F00C         	call	_Lcd_Write_Char
  2070                           
  2071                           ;main.c: 144: x = read_keypad();
  2072  0005D2  ECE6  F00A         	call	_read_keypad	;wreg free
  2073  0005D6  0101               	movlb	1	; () banked
  2074  0005D8  6F32               	movwf	main@x& (0+255),b
  2075                           
  2076                           ; BSR set to: 1
  2077                           ;main.c: 145: if (x != '_')
  2078  0005DA  0E5F               	movlw	95
  2079  0005DC  0101               	movlb	1	; () banked
  2080  0005DE  1932               	xorwf	main@x& (0+255),w,b
  2081  0005E0  B4D8               	btfsc	status,2,c
  2082  0005E2  D0A2               	goto	l4331
  2083                           
  2084                           ; BSR set to: 1
  2085                           ;main.c: 146: {
  2086                           ;main.c: 147: if (((x - '#') == 0)&&(p > 0))
  2087  0005E4  0EDD               	movlw	221
  2088  0005E6  0100               	movlb	0	; () banked
  2089  0005E8  6FB2               	movwf	??_main& (0+255),b
  2090  0005EA  0EFF               	movlw	255
  2091  0005EC  0100               	movlb	0	; () banked
  2092  0005EE  6FB3               	movwf	(??_main+1)& (0+255),b
  2093  0005F0  0101               	movlb	1	; () banked
  2094  0005F2  5132               	movf	main@x& (0+255),w,b
  2095  0005F4  0100               	movlb	0	; () banked
  2096  0005F6  6FB4               	movwf	(??_main+2)& (0+255),b
  2097  0005F8  6BB5               	clrf	(??_main+3)& (0+255),b
  2098  0005FA  0100               	movlb	0	; () banked
  2099  0005FC  51B2               	movf	??_main& (0+255),w,b
  2100  0005FE  0100               	movlb	0	; () banked
  2101  000600  27B4               	addwf	(??_main+2)& (0+255),f,b
  2102  000602  0100               	movlb	0	; () banked
  2103  000604  51B3               	movf	(??_main+1)& (0+255),w,b
  2104  000606  0100               	movlb	0	; () banked
  2105  000608  23B5               	addwfc	(??_main+3)& (0+255),f,b
  2106  00060A  0100               	movlb	0	; () banked
  2107  00060C  51B4               	movf	(??_main+2)& (0+255),w,b
  2108  00060E  0100               	movlb	0	; () banked
  2109  000610  11B5               	iorwf	(??_main+3)& (0+255),w,b
  2110  000612  A4D8               	btfss	status,2,c
  2111  000614  D034               	goto	l4313
  2112                           
  2113                           ; BSR set to: 0
  2114  000616  0101               	movlb	1	; () banked
  2115  000618  5130               	movf	main@p& (0+255),w,b
  2116  00061A  0101               	movlb	1	; () banked
  2117  00061C  B4D8               	btfsc	status,2,c
  2118  00061E  D02F               	goto	l4313
  2119                           
  2120                           ; BSR set to: 1
  2121                           ;main.c: 148: {
  2122                           ;main.c: 149: buffer[p] = '?';
  2123  000620  0101               	movlb	1	; () banked
  2124  000622  5130               	movf	main@p& (0+255),w,b
  2125  000624  0D01               	mullw	1
  2126  000626  0E0A               	movlw	low main@buffer
  2127  000628  24F3               	addwf	prodl,w,c
  2128  00062A  6ED9               	movwf	fsr2l,c
  2129  00062C  0E01               	movlw	high main@buffer
  2130  00062E  20F4               	addwfc	prodh,w,c
  2131  000630  6EDA               	movwf	fsr2h,c
  2132  000632  0E3F               	movlw	63
  2133  000634  6EDF               	movwf	indf2,c
  2134                           
  2135                           ; BSR set to: 1
  2136                           ;main.c: 150: Lcd_Set_Cursor(2, 7 + p);
  2137  000636  0101               	movlb	1	; () banked
  2138  000638  5130               	movf	main@p& (0+255),w,b
  2139  00063A  0F07               	addlw	7
  2140  00063C  6E12               	movwf	Lcd_Set_Cursor@b,c
  2141  00063E  0E02               	movlw	2
  2142  000640  EC80  F00C         	call	_Lcd_Set_Cursor
  2143                           
  2144                           ;main.c: 151: Lcd_Write_Char('_');
  2145  000644  0E5F               	movlw	95
  2146  000646  ECA8  F00C         	call	_Lcd_Write_Char
  2147                           
  2148                           ;main.c: 152: latch_keypad(&x);
  2149  00064A  0E32               	movlw	low main@x
  2150  00064C  6E10               	movwf	latch_keypad@x,c
  2151  00064E  0E01               	movlw	high main@x
  2152  000650  6E11               	movwf	latch_keypad@x+1,c
  2153  000652  ECC4  F00C         	call	_latch_keypad	;wreg free
  2154                           
  2155                           ;main.c: 153: Lcd_Set_Cursor(2, 8 + p);
  2156  000656  0101               	movlb	1	; () banked
  2157  000658  5130               	movf	main@p& (0+255),w,b
  2158  00065A  0F08               	addlw	8
  2159  00065C  6E12               	movwf	Lcd_Set_Cursor@b,c
  2160  00065E  0E02               	movlw	2
  2161  000660  EC80  F00C         	call	_Lcd_Set_Cursor
  2162                           
  2163                           ;main.c: 154: Lcd_Write_Char(' ');
  2164  000664  0E20               	movlw	32
  2165  000666  ECA8  F00C         	call	_Lcd_Write_Char
  2166                           
  2167                           ;main.c: 155: Lcd_Set_Cursor(2, 7 + p);
  2168  00066A  0101               	movlb	1	; () banked
  2169  00066C  5130               	movf	main@p& (0+255),w,b
  2170  00066E  0F07               	addlw	7
  2171  000670  6E12               	movwf	Lcd_Set_Cursor@b,c
  2172  000672  0E02               	movlw	2
  2173  000674  EC80  F00C         	call	_Lcd_Set_Cursor
  2174                           
  2175                           ;main.c: 156: p--;
  2176  000678  0101               	movlb	1	; () banked
  2177  00067A  0730               	decf	main@p& (0+255),f,b
  2178                           
  2179                           ;main.c: 157: }
  2180  00067C  D055               	goto	l4331
  2181  00067E                     l4313:
  2182                           
  2183                           ;main.c: 158: else if ((x - '#') != 0)
  2184  00067E  0EDD               	movlw	221
  2185  000680  0100               	movlb	0	; () banked
  2186  000682  6FB2               	movwf	??_main& (0+255),b
  2187  000684  0EFF               	movlw	255
  2188  000686  0100               	movlb	0	; () banked
  2189  000688  6FB3               	movwf	(??_main+1)& (0+255),b
  2190  00068A  0101               	movlb	1	; () banked
  2191  00068C  5132               	movf	main@x& (0+255),w,b
  2192  00068E  0100               	movlb	0	; () banked
  2193  000690  6FB4               	movwf	(??_main+2)& (0+255),b
  2194  000692  6BB5               	clrf	(??_main+3)& (0+255),b
  2195  000694  0100               	movlb	0	; () banked
  2196  000696  51B2               	movf	??_main& (0+255),w,b
  2197  000698  0100               	movlb	0	; () banked
  2198  00069A  27B4               	addwf	(??_main+2)& (0+255),f,b
  2199  00069C  0100               	movlb	0	; () banked
  2200  00069E  51B3               	movf	(??_main+1)& (0+255),w,b
  2201  0006A0  0100               	movlb	0	; () banked
  2202  0006A2  23B5               	addwfc	(??_main+3)& (0+255),f,b
  2203  0006A4  0100               	movlb	0	; () banked
  2204  0006A6  51B4               	movf	(??_main+2)& (0+255),w,b
  2205  0006A8  0100               	movlb	0	; () banked
  2206  0006AA  11B5               	iorwf	(??_main+3)& (0+255),w,b
  2207  0006AC  B4D8               	btfsc	status,2,c
  2208  0006AE  D03C               	goto	l4331
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;main.c: 159: {
  2212                           ;main.c: 160: if ((x == '*')|(p == 9))
  2213  0006B0  0E2A               	movlw	42
  2214  0006B2  0101               	movlb	1	; () banked
  2215  0006B4  1932               	xorwf	main@x& (0+255),w,b
  2216  0006B6  B4D8               	btfsc	status,2,c
  2217  0006B8  D03B               	goto	l4333
  2218                           
  2219                           ; BSR set to: 1
  2220  0006BA  0E09               	movlw	9
  2221  0006BC  0101               	movlb	1	; () banked
  2222  0006BE  1930               	xorwf	main@p& (0+255),w,b
  2223  0006C0  B4D8               	btfsc	status,2,c
  2224  0006C2  D036               	goto	l4333
  2225                           
  2226                           ; BSR set to: 1
  2227                           ;main.c: 163: }
  2228                           ;main.c: 164: p++;
  2229                           
  2230                           ; BSR set to: 1
  2231                           
  2232                           ; BSR set to: 1
  2233                           ;main.c: 161: {
  2234                           ;main.c: 162: break;
  2235  0006C4  0101               	movlb	1	; () banked
  2236  0006C6  2B30               	incf	main@p& (0+255),f,b
  2237                           
  2238                           ; BSR set to: 1
  2239                           ;main.c: 165: buffer[p-1] = x;
  2240  0006C8  0EFF               	movlw	255
  2241  0006CA  0100               	movlb	0	; () banked
  2242  0006CC  6FB2               	movwf	??_main& (0+255),b
  2243  0006CE  0EFF               	movlw	255
  2244  0006D0  0100               	movlb	0	; () banked
  2245  0006D2  6FB3               	movwf	(??_main+1)& (0+255),b
  2246  0006D4  0101               	movlb	1	; () banked
  2247  0006D6  5130               	movf	main@p& (0+255),w,b
  2248  0006D8  0100               	movlb	0	; () banked
  2249  0006DA  6FB4               	movwf	(??_main+2)& (0+255),b
  2250  0006DC  6BB5               	clrf	(??_main+3)& (0+255),b
  2251  0006DE  0100               	movlb	0	; () banked
  2252  0006E0  51B2               	movf	??_main& (0+255),w,b
  2253  0006E2  0100               	movlb	0	; () banked
  2254  0006E4  27B4               	addwf	(??_main+2)& (0+255),f,b
  2255  0006E6  0100               	movlb	0	; () banked
  2256  0006E8  51B3               	movf	(??_main+1)& (0+255),w,b
  2257  0006EA  0100               	movlb	0	; () banked
  2258  0006EC  23B5               	addwfc	(??_main+3)& (0+255),f,b
  2259  0006EE  0E0A               	movlw	low main@buffer
  2260  0006F0  0100               	movlb	0	; () banked
  2261  0006F2  25B4               	addwf	(??_main+2)& (0+255),w,b
  2262  0006F4  6ED9               	movwf	fsr2l,c
  2263  0006F6  0E01               	movlw	high main@buffer
  2264  0006F8  0100               	movlb	0	; () banked
  2265  0006FA  21B5               	addwfc	(??_main+3)& (0+255),w,b
  2266  0006FC  6EDA               	movwf	fsr2h,c
  2267  0006FE  C132  FFDF         	movff	main@x,indf2
  2268                           
  2269                           ; BSR set to: 0
  2270                           ;main.c: 166: Lcd_Set_Cursor(2, 7 + p);
  2271  000702  0101               	movlb	1	; () banked
  2272  000704  5130               	movf	main@p& (0+255),w,b
  2273  000706  0F07               	addlw	7
  2274  000708  6E12               	movwf	Lcd_Set_Cursor@b,c
  2275  00070A  0E02               	movlw	2
  2276  00070C  EC80  F00C         	call	_Lcd_Set_Cursor
  2277                           
  2278                           ;main.c: 167: Lcd_Write_Char('*');
  2279  000710  0E2A               	movlw	42
  2280  000712  ECA8  F00C         	call	_Lcd_Write_Char
  2281                           
  2282                           ;main.c: 168: Lcd_Write_Char('_');
  2283  000716  0E5F               	movlw	95
  2284  000718  ECA8  F00C         	call	_Lcd_Write_Char
  2285                           
  2286                           ;main.c: 169: latch_keypad(&x);
  2287  00071C  0E32               	movlw	low main@x
  2288  00071E  6E10               	movwf	latch_keypad@x,c
  2289  000720  0E01               	movlw	high main@x
  2290  000722  6E11               	movwf	latch_keypad@x+1,c
  2291  000724  ECC4  F00C         	call	_latch_keypad	;wreg free
  2292  000728                     l4331:
  2293  000728  0E09               	movlw	9
  2294  00072A  0101               	movlb	1	; () banked
  2295  00072C  6530               	cpfsgt	main@p& (0+255),b
  2296  00072E  D724               	goto	l4279
  2297  000730                     l4333:
  2298                           
  2299                           ; BSR set to: 1
  2300                           ;main.c: 170: }
  2301                           ;main.c: 171: }
  2302                           ;main.c: 172: }
  2303                           ;main.c: 173: for (int i = 0; i < p; i++)
  2304  000730  0E00               	movlw	0
  2305  000732  0101               	movlb	1	; () banked
  2306  000734  6F22               	movwf	(main@i_776+1)& (0+255),b
  2307  000736  0E00               	movlw	0
  2308  000738  6F21               	movwf	main@i_776& (0+255),b
  2309  00073A  D047               	goto	l4339
  2310  00073C                     l4335:
  2311                           
  2312                           ;main.c: 174: current_pin[8 - i] = buffer[(p-1) - i];
  2313  00073C  0EFF               	movlw	255
  2314  00073E  0100               	movlb	0	; () banked
  2315  000740  6FB2               	movwf	??_main& (0+255),b
  2316  000742  0EFF               	movlw	255
  2317  000744  0100               	movlb	0	; () banked
  2318  000746  6FB3               	movwf	(??_main+1)& (0+255),b
  2319  000748  C121  F0B4         	movff	main@i_776,??_main+2
  2320  00074C  C122  F0B5         	movff	main@i_776+1,??_main+3
  2321  000750  0100               	movlb	0	; () banked
  2322  000752  1FB4               	comf	(??_main+2)& (0+255),f,b
  2323  000754  1FB5               	comf	(??_main+3)& (0+255),f,b
  2324  000756  4BB4               	infsnz	(??_main+2)& (0+255),f,b
  2325  000758  2BB5               	incf	(??_main+3)& (0+255),f,b
  2326  00075A  0101               	movlb	1	; () banked
  2327  00075C  5130               	movf	main@p& (0+255),w,b
  2328  00075E  0100               	movlb	0	; () banked
  2329  000760  6FB6               	movwf	(??_main+4)& (0+255),b
  2330  000762  6BB7               	clrf	(??_main+5)& (0+255),b
  2331  000764  0100               	movlb	0	; () banked
  2332  000766  51B4               	movf	(??_main+2)& (0+255),w,b
  2333  000768  0100               	movlb	0	; () banked
  2334  00076A  27B6               	addwf	(??_main+4)& (0+255),f,b
  2335  00076C  0100               	movlb	0	; () banked
  2336  00076E  51B5               	movf	(??_main+3)& (0+255),w,b
  2337  000770  0100               	movlb	0	; () banked
  2338  000772  23B7               	addwfc	(??_main+5)& (0+255),f,b
  2339  000774  0100               	movlb	0	; () banked
  2340  000776  51B2               	movf	??_main& (0+255),w,b
  2341  000778  0100               	movlb	0	; () banked
  2342  00077A  27B6               	addwf	(??_main+4)& (0+255),f,b
  2343  00077C  0100               	movlb	0	; () banked
  2344  00077E  51B3               	movf	(??_main+1)& (0+255),w,b
  2345  000780  0100               	movlb	0	; () banked
  2346  000782  23B7               	addwfc	(??_main+5)& (0+255),f,b
  2347  000784  0E0A               	movlw	low main@buffer
  2348  000786  0100               	movlb	0	; () banked
  2349  000788  25B6               	addwf	(??_main+4)& (0+255),w,b
  2350  00078A  6ED9               	movwf	fsr2l,c
  2351  00078C  0E01               	movlw	high main@buffer
  2352  00078E  0100               	movlb	0	; () banked
  2353  000790  21B7               	addwfc	(??_main+5)& (0+255),w,b
  2354  000792  6EDA               	movwf	fsr2h,c
  2355  000794  C121  F0B8         	movff	main@i_776,??_main+6
  2356  000798  C122  F0B9         	movff	main@i_776+1,??_main+7
  2357  00079C  0100               	movlb	0	; () banked
  2358  00079E  1FB8               	comf	(??_main+6)& (0+255),f,b
  2359  0007A0  1FB9               	comf	(??_main+7)& (0+255),f,b
  2360  0007A2  4BB8               	infsnz	(??_main+6)& (0+255),f,b
  2361  0007A4  2BB9               	incf	(??_main+7)& (0+255),f,b
  2362  0007A6  0E08               	movlw	8
  2363  0007A8  0100               	movlb	0	; () banked
  2364  0007AA  27B8               	addwf	(??_main+6)& (0+255),f,b
  2365  0007AC  0E00               	movlw	0
  2366  0007AE  23B9               	addwfc	(??_main+7)& (0+255),f,b
  2367  0007B0  0EBA               	movlw	low _current_pin
  2368  0007B2  0100               	movlb	0	; () banked
  2369  0007B4  25B8               	addwf	(??_main+6)& (0+255),w,b
  2370  0007B6  6EE1               	movwf	fsr1l,c
  2371  0007B8  0E00               	movlw	high _current_pin
  2372  0007BA  0100               	movlb	0	; () banked
  2373  0007BC  21B9               	addwfc	(??_main+7)& (0+255),w,b
  2374  0007BE  6EE2               	movwf	fsr1h,c
  2375  0007C0  CFDF FFE7          	movff	indf2,indf1
  2376                           
  2377                           ; BSR set to: 0
  2378  0007C4  0101               	movlb	1	; () banked
  2379  0007C6  4B21               	infsnz	main@i_776& (0+255),f,b
  2380  0007C8  2B22               	incf	(main@i_776+1)& (0+255),f,b
  2381  0007CA                     l4339:
  2382                           
  2383                           ; BSR set to: 1
  2384  0007CA  0101               	movlb	1	; () banked
  2385  0007CC  5130               	movf	main@p& (0+255),w,b
  2386  0007CE  0100               	movlb	0	; () banked
  2387  0007D0  6FB2               	movwf	??_main& (0+255),b
  2388  0007D2  6BB3               	clrf	(??_main+1)& (0+255),b
  2389  0007D4  0100               	movlb	0	; () banked
  2390  0007D6  51B2               	movf	??_main& (0+255),w,b
  2391  0007D8  0101               	movlb	1	; () banked
  2392  0007DA  5D21               	subwf	main@i_776& (0+255),w,b
  2393  0007DC  0101               	movlb	1	; () banked
  2394  0007DE  5122               	movf	(main@i_776+1)& (0+255),w,b
  2395  0007E0  0A80               	xorlw	128
  2396  0007E2  0100               	movlb	0	; () banked
  2397  0007E4  6FB4               	movwf	(??_main+2)& (0+255),b
  2398  0007E6  0100               	movlb	0	; () banked
  2399  0007E8  51B3               	movf	(??_main+1)& (0+255),w,b
  2400  0007EA  0A80               	xorlw	128
  2401  0007EC  0100               	movlb	0	; () banked
  2402  0007EE  59B4               	subwfb	(??_main+2)& (0+255),w,b
  2403  0007F0  A0D8               	btfss	status,0,c
  2404  0007F2  D7A4               	goto	l4335
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;main.c: 175: Lcd_Clear();
  2408                           
  2409                           ; BSR set to: 0
  2410  0007F4  EC4A  F00D         	call	_Lcd_Clear	;wreg free
  2411                           
  2412                           ;main.c: 176: menu_progress_bar(100);
  2413  0007F8  0E00               	movlw	0
  2414  0007FA  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  2415  0007FC  0E64               	movlw	100
  2416  0007FE  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  2417  000800  ECBA  F009         	call	_menu_progress_bar	;wreg free
  2418                           
  2419                           ;main.c: 180: load_i2c_registers();
  2420  000804  EC70  F00A         	call	_load_i2c_registers	;wreg free
  2421                           
  2422                           ;main.c: 181: i2c_w_reg[0] = '-';
  2423  000808  0E2D               	movlw	45
  2424  00080A  0101               	movlb	1	; () banked
  2425  00080C  6F33               	movwf	_i2c_w_reg& (0+255),b	;volatile
  2426  00080E                     l4349:
  2427                           
  2428                           ; BSR set to: 1
  2429  00080E  0E2D               	movlw	45
  2430  000810  0101               	movlb	1	; () banked
  2431  000812  1933               	xorwf	_i2c_w_reg& (0+255),w,b	;volatile
  2432  000814  B4D8               	btfsc	status,2,c
  2433  000816  D7FB               	goto	l4349
  2434                           
  2435                           ; BSR set to: 1
  2436                           ;main.c: 185: }
  2437                           ;main.c: 186: INTCONbits.GIE_GIEH = 0;
  2438  000818  9EF2               	bcf	intcon,7,c	;volatile
  2439                           
  2440                           ; BSR set to: 1
  2441                           ;main.c: 187: for (int i = 0; i < 32; i++)
  2442  00081A  0E00               	movlw	0
  2443  00081C  0101               	movlb	1	; () banked
  2444  00081E  6F24               	movwf	(main@i_785+1)& (0+255),b
  2445  000820  0E00               	movlw	0
  2446  000822  6F23               	movwf	main@i_785& (0+255),b
  2447                           
  2448                           ; BSR set to: 1
  2449  000824  0101               	movlb	1	; () banked
  2450  000826  BF24               	btfsc	(main@i_785+1)& (0+255),7,b
  2451  000828  D008               	goto	l4357
  2452  00082A  0101               	movlb	1	; () banked
  2453  00082C  5124               	movf	(main@i_785+1)& (0+255),w,b
  2454  00082E  E119               	bnz	l226
  2455  000830  0E20               	movlw	32
  2456  000832  0101               	movlb	1	; () banked
  2457  000834  5D23               	subwf	main@i_785& (0+255),w,b
  2458  000836  B0D8               	btfsc	status,0,c
  2459  000838  D014               	goto	l226
  2460  00083A                     l4357:
  2461                           
  2462                           ; BSR set to: 1
  2463                           ;main.c: 188: i2c_r_reg[i] = '-';
  2464  00083A  0E60               	movlw	low _i2c_r_reg
  2465  00083C  0101               	movlb	1	; () banked
  2466  00083E  2523               	addwf	main@i_785& (0+255),w,b
  2467  000840  6ED9               	movwf	fsr2l,c
  2468  000842  0E00               	movlw	high _i2c_r_reg
  2469  000844  0101               	movlb	1	; () banked
  2470  000846  2124               	addwfc	(main@i_785+1)& (0+255),w,b
  2471  000848  6EDA               	movwf	fsr2h,c
  2472  00084A  0E2D               	movlw	45
  2473  00084C  6EDF               	movwf	indf2,c
  2474                           
  2475                           ; BSR set to: 1
  2476  00084E  0101               	movlb	1	; () banked
  2477  000850  4B23               	infsnz	main@i_785& (0+255),f,b
  2478  000852  2B24               	incf	(main@i_785+1)& (0+255),f,b
  2479                           
  2480                           ; BSR set to: 1
  2481  000854  0101               	movlb	1	; () banked
  2482  000856  BF24               	btfsc	(main@i_785+1)& (0+255),7,b
  2483  000858  D7F0               	goto	l4357
  2484  00085A  0101               	movlb	1	; () banked
  2485  00085C  5124               	movf	(main@i_785+1)& (0+255),w,b
  2486  00085E  E101               	bnz	u4160
  2487  000860  D7E7               	goto	L2
  2488  000862                     u4160:
  2489  000862                     l226:
  2490                           
  2491                           ; BSR set to: 1
  2492                           ;main.c: 189: unsigned char credential_state = i2c_w_reg[0];
  2493  000862  C133  F11F         	movff	_i2c_w_reg,main@credential_state	;volatile
  2494                           
  2495                           ; BSR set to: 1
  2496                           ;main.c: 190: if (credential_state == 0xA1)
  2497  000866  0EA1               	movlw	161
  2498  000868  0101               	movlb	1	; () banked
  2499  00086A  191F               	xorwf	main@credential_state& (0+255),w,b
  2500  00086C  A4D8               	btfss	status,2,c
  2501  00086E  D03A               	goto	l4381
  2502                           
  2503                           ; BSR set to: 1
  2504                           ;main.c: 191: {
  2505                           ;main.c: 192: Lcd_Set_Cursor(1,1);
  2506  000870  0E01               	movlw	1
  2507  000872  6E12               	movwf	Lcd_Set_Cursor@b,c
  2508  000874  0E01               	movlw	1
  2509  000876  EC80  F00C         	call	_Lcd_Set_Cursor
  2510                           
  2511                           ;main.c: 193: Lcd_Write_String("[Access Granted]");
  2512  00087A  0EC2               	movlw	low STR_7
  2513  00087C  6E14               	movwf	Lcd_Write_String@a,c
  2514  00087E  0E7F               	movlw	high STR_7
  2515  000880  6E15               	movwf	Lcd_Write_String@a+1,c
  2516  000882  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  2517                           
  2518                           ;main.c: 194: Lcd_Set_Cursor(2,1);
  2519  000886  0E01               	movlw	1
  2520  000888  6E12               	movwf	Lcd_Set_Cursor@b,c
  2521  00088A  0E02               	movlw	2
  2522  00088C  EC80  F00C         	call	_Lcd_Set_Cursor
  2523                           
  2524                           ;main.c: 195: Lcd_Write_String("    [Welcome]   ");
  2525  000890  0E07               	movlw	low STR_8
  2526  000892  6E14               	movwf	Lcd_Write_String@a,c
  2527  000894  0E7F               	movlw	high STR_8
  2528  000896  6E15               	movwf	Lcd_Write_String@a+1,c
  2529  000898  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  2530                           
  2531                           ;main.c: 196: for (int i = 0; i < 100; i++)
  2532  00089C  0E00               	movlw	0
  2533  00089E  0101               	movlb	1	; () banked
  2534  0008A0  6F19               	movwf	(main@i_789+1)& (0+255),b
  2535  0008A2  0E00               	movlw	0
  2536  0008A4  6F18               	movwf	main@i_789& (0+255),b
  2537                           
  2538                           ; BSR set to: 1
  2539  0008A6  0101               	movlb	1	; () banked
  2540  0008A8  BF19               	btfsc	(main@i_789+1)& (0+255),7,b
  2541  0008AA  D00A               	goto	l4377
  2542  0008AC  0101               	movlb	1	; () banked
  2543  0008AE  5119               	movf	(main@i_789+1)& (0+255),w,b
  2544  0008B0  E106               	bnz	u4180
  2545  0008B2  0E64               	movlw	100
  2546  0008B4  0101               	movlb	1	; () banked
  2547  0008B6  5D18               	subwf	main@i_789& (0+255),w,b
  2548  0008B8  B0D8               	btfsc	status,0,c
  2549  0008BA  D087               	goto	l230
  2550  0008BC  D001               	goto	l4377
  2551  0008BE                     u4180:
  2552                           
  2553                           ; BSR set to: 1
  2554  0008BE  D085               	goto	l230
  2555  0008C0                     l4377:
  2556                           
  2557                           ; BSR set to: 1
  2558                           ;main.c: 197: {
  2559                           ;main.c: 198: _delay((unsigned long)((10)*(16000000/4000.0)));
  2560  0008C0  0E34               	movlw	52
  2561  0008C2  0100               	movlb	0	; () banked
  2562  0008C4  6FB2               	movwf	??_main& (0+255),b
  2563  0008C6  0EF2               	movlw	242
  2564  0008C8                     u4367:
  2565  0008C8  2EE8               	decfsz	wreg,f,c
  2566  0008CA  D7FE               	goto	u4367
  2567  0008CC  2FB2               	decfsz	??_main& (0+255),f,b
  2568  0008CE  D7FC               	goto	u4367
  2569  0008D0  0101               	movlb	1	; () banked
  2570  0008D2  4B18               	infsnz	main@i_789& (0+255),f,b
  2571  0008D4  2B19               	incf	(main@i_789+1)& (0+255),f,b
  2572  0008D6  0101               	movlb	1	; () banked
  2573  0008D8  BF19               	btfsc	(main@i_789+1)& (0+255),7,b
  2574  0008DA  D7F2               	goto	l4377
  2575  0008DC  0101               	movlb	1	; () banked
  2576  0008DE  5119               	movf	(main@i_789+1)& (0+255),w,b
  2577  0008E0  E174               	bnz	l230
  2578  0008E2  D7E7               	goto	L3
  2579  0008E4                     l4381:
  2580                           
  2581                           ; BSR set to: 1
  2582                           ;main.c: 201: else if (credential_state == 0xA0)
  2583  0008E4  0EA0               	movlw	160
  2584  0008E6  0101               	movlb	1	; () banked
  2585  0008E8  191F               	xorwf	main@credential_state& (0+255),w,b
  2586  0008EA  A4D8               	btfss	status,2,c
  2587  0008EC  D032               	goto	l4399
  2588                           
  2589                           ; BSR set to: 1
  2590                           ;main.c: 202: {
  2591                           ;main.c: 203: Lcd_Set_Cursor(1,1);
  2592  0008EE  0E01               	movlw	1
  2593  0008F0  6E12               	movwf	Lcd_Set_Cursor@b,c
  2594  0008F2  0E01               	movlw	1
  2595  0008F4  EC80  F00C         	call	_Lcd_Set_Cursor
  2596                           
  2597                           ;main.c: 204: Lcd_Write_String("[Access  Denied]");
  2598  0008F8  0EB1               	movlw	low STR_9
  2599  0008FA  6E14               	movwf	Lcd_Write_String@a,c
  2600  0008FC  0E7F               	movlw	high STR_9
  2601  0008FE  6E15               	movwf	Lcd_Write_String@a+1,c
  2602  000900  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  2603                           
  2604                           ;main.c: 205: Lcd_Set_Cursor(2,1);
  2605  000904  0E01               	movlw	1
  2606  000906  6E12               	movwf	Lcd_Set_Cursor@b,c
  2607  000908  0E02               	movlw	2
  2608  00090A  EC80  F00C         	call	_Lcd_Set_Cursor
  2609                           
  2610                           ;main.c: 206: Lcd_Write_String("    [ Retry ]   ");
  2611  00090E  0EF6               	movlw	low STR_10
  2612  000910  6E14               	movwf	Lcd_Write_String@a,c
  2613  000912  0E7E               	movlw	high STR_10
  2614  000914  6E15               	movwf	Lcd_Write_String@a+1,c
  2615  000916  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  2616                           
  2617                           ;main.c: 207: for (int i = 0; i < 100; i++)
  2618  00091A  0E00               	movlw	0
  2619  00091C  0101               	movlb	1	; () banked
  2620  00091E  6F1B               	movwf	(main@i_792+1)& (0+255),b
  2621  000920  0E00               	movlw	0
  2622  000922  6F1A               	movwf	main@i_792& (0+255),b
  2623  000924                     l4391:
  2624                           
  2625                           ; BSR set to: 1
  2626  000924  0101               	movlb	1	; () banked
  2627  000926  BF1B               	btfsc	(main@i_792+1)& (0+255),7,b
  2628  000928  D008               	goto	l4395
  2629  00092A  0101               	movlb	1	; () banked
  2630  00092C  511B               	movf	(main@i_792+1)& (0+255),w,b
  2631  00092E  E14D               	bnz	l230
  2632  000930  0E64               	movlw	100
  2633  000932  0101               	movlb	1	; () banked
  2634  000934  5D1A               	subwf	main@i_792& (0+255),w,b
  2635  000936  B0D8               	btfsc	status,0,c
  2636  000938  D048               	goto	l230
  2637  00093A                     l4395:
  2638                           
  2639                           ; BSR set to: 1
  2640                           ;main.c: 208: {
  2641                           ;main.c: 209: _delay((unsigned long)((10)*(16000000/4000.0)));
  2642  00093A  0E34               	movlw	52
  2643  00093C  0100               	movlb	0	; () banked
  2644  00093E  6FB2               	movwf	??_main& (0+255),b
  2645  000940  0EF2               	movlw	242
  2646  000942                     u4377:
  2647  000942  2EE8               	decfsz	wreg,f,c
  2648  000944  D7FE               	goto	u4377
  2649  000946  2FB2               	decfsz	??_main& (0+255),f,b
  2650  000948  D7FC               	goto	u4377
  2651  00094A  0101               	movlb	1	; () banked
  2652  00094C  4B1A               	infsnz	main@i_792& (0+255),f,b
  2653  00094E  2B1B               	incf	(main@i_792+1)& (0+255),f,b
  2654  000950  D7E9               	goto	l4391
  2655  000952                     l4399:
  2656                           
  2657                           ; BSR set to: 1
  2658                           ;main.c: 212: else
  2659                           ;main.c: 213: {
  2660                           ;main.c: 214: Lcd_Set_Cursor(1,1);
  2661  000952  0E01               	movlw	1
  2662  000954  6E12               	movwf	Lcd_Set_Cursor@b,c
  2663  000956  0E01               	movlw	1
  2664  000958  EC80  F00C         	call	_Lcd_Set_Cursor
  2665                           
  2666                           ;main.c: 215: Lcd_Write_String("[System Error ");
  2667  00095C  0ED3               	movlw	low STR_11
  2668  00095E  6E14               	movwf	Lcd_Write_String@a,c
  2669  000960  0E7F               	movlw	high STR_11
  2670  000962  6E15               	movwf	Lcd_Write_String@a+1,c
  2671  000964  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  2672                           
  2673                           ;main.c: 216: Lcd_Write_Char(credential_state);
  2674  000968  0101               	movlb	1	; () banked
  2675  00096A  511F               	movf	main@credential_state& (0+255),w,b
  2676  00096C  ECA8  F00C         	call	_Lcd_Write_Char
  2677                           
  2678                           ;main.c: 217: Lcd_Write_String("]");
  2679  000970  0EAF               	movlw	low (STR_22+15)
  2680  000972  6E14               	movwf	Lcd_Write_String@a,c
  2681  000974  0E7F               	movlw	high (STR_22+15)
  2682  000976  6E15               	movwf	Lcd_Write_String@a+1,c
  2683  000978  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  2684                           
  2685                           ;main.c: 218: Lcd_Set_Cursor(2,1);
  2686  00097C  0E01               	movlw	1
  2687  00097E  6E12               	movwf	Lcd_Set_Cursor@b,c
  2688  000980  0E02               	movlw	2
  2689  000982  EC80  F00C         	call	_Lcd_Set_Cursor
  2690                           
  2691                           ;main.c: 219: Lcd_Write_String("    [ Retry ]   ");
  2692  000986  0EF6               	movlw	low STR_10
  2693  000988  6E14               	movwf	Lcd_Write_String@a,c
  2694  00098A  0E7E               	movlw	high STR_10
  2695  00098C  6E15               	movwf	Lcd_Write_String@a+1,c
  2696  00098E  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  2697                           
  2698                           ;main.c: 220: for (int i = 0; i < 100; i++)
  2699  000992  0E00               	movlw	0
  2700  000994  0101               	movlb	1	; () banked
  2701  000996  6F1D               	movwf	(main@i_796+1)& (0+255),b
  2702  000998  0E00               	movlw	0
  2703  00099A  6F1C               	movwf	main@i_796& (0+255),b
  2704  00099C                     l4411:
  2705                           
  2706                           ; BSR set to: 1
  2707  00099C  0101               	movlb	1	; () banked
  2708  00099E  BF1D               	btfsc	(main@i_796+1)& (0+255),7,b
  2709  0009A0  D008               	goto	l4415
  2710  0009A2  0101               	movlb	1	; () banked
  2711  0009A4  511D               	movf	(main@i_796+1)& (0+255),w,b
  2712  0009A6  E111               	bnz	l230
  2713  0009A8  0E64               	movlw	100
  2714  0009AA  0101               	movlb	1	; () banked
  2715  0009AC  5D1C               	subwf	main@i_796& (0+255),w,b
  2716  0009AE  B0D8               	btfsc	status,0,c
  2717  0009B0  D00C               	goto	l230
  2718  0009B2                     l4415:
  2719                           
  2720                           ; BSR set to: 1
  2721                           ;main.c: 221: {
  2722                           ;main.c: 222: _delay((unsigned long)((10)*(16000000/4000.0)));
  2723  0009B2  0E34               	movlw	52
  2724  0009B4  0100               	movlb	0	; () banked
  2725  0009B6  6FB2               	movwf	??_main& (0+255),b
  2726  0009B8  0EF2               	movlw	242
  2727  0009BA                     u4387:
  2728  0009BA  2EE8               	decfsz	wreg,f,c
  2729  0009BC  D7FE               	goto	u4387
  2730  0009BE  2FB2               	decfsz	??_main& (0+255),f,b
  2731  0009C0  D7FC               	goto	u4387
  2732  0009C2  0101               	movlb	1	; () banked
  2733  0009C4  4B1C               	infsnz	main@i_796& (0+255),f,b
  2734  0009C6  2B1D               	incf	(main@i_796+1)& (0+255),f,b
  2735  0009C8  D7E9               	goto	l4411
  2736  0009CA                     l230:
  2737                           
  2738                           ; BSR set to: 1
  2739                           ;main.c: 223: }
  2740                           ;main.c: 224: }
  2741                           ;main.c: 225: INTCONbits.GIE_GIEH = 1;
  2742  0009CA  8EF2               	bsf	intcon,7,c	;volatile
  2743  0009CC                     l4419:
  2744                           
  2745                           ; BSR set to: 1
  2746  0009CC  0100               	movlb	0	; () banked
  2747  0009CE  51CD               	movf	_credentials_accepted& (0+255),w,b	;volatile
  2748  0009D0  B4D8               	btfsc	status,2,c
  2749  0009D2  EFC4  F000         	goto	l4167
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;main.c: 226: }
  2753                           ;main.c: 230: Lcd_Set_Cursor(1,1);
  2754                           
  2755                           ; BSR set to: 0
  2756  0009D6  0E01               	movlw	1
  2757  0009D8  6E12               	movwf	Lcd_Set_Cursor@b,c
  2758  0009DA  0E01               	movlw	1
  2759  0009DC  EC80  F00C         	call	_Lcd_Set_Cursor
  2760                           
  2761                           ;main.c: 231: unsigned char is_leading_zero = 1, n_c = 0;
  2762  0009E0  0E01               	movlw	1
  2763  0009E2  0101               	movlb	1	; () banked
  2764  0009E4  6F1E               	movwf	main@is_leading_zero& (0+255),b
  2765                           
  2766                           ; BSR set to: 1
  2767  0009E6  0E00               	movlw	0
  2768  0009E8  0101               	movlb	1	; () banked
  2769  0009EA  6F15               	movwf	main@n_c& (0+255),b
  2770                           
  2771                           ; BSR set to: 1
  2772                           ;main.c: 232: for (int i = 0; i < 9; i++)
  2773  0009EC  0E00               	movlw	0
  2774  0009EE  0101               	movlb	1	; () banked
  2775  0009F0  6F2A               	movwf	(main@i_799+1)& (0+255),b
  2776  0009F2  0E00               	movlw	0
  2777  0009F4  6F29               	movwf	main@i_799& (0+255),b
  2778  0009F6                     l4429:
  2779                           
  2780                           ; BSR set to: 1
  2781  0009F6  0101               	movlb	1	; () banked
  2782  0009F8  BF2A               	btfsc	(main@i_799+1)& (0+255),7,b
  2783  0009FA  D008               	goto	l4433
  2784  0009FC  0101               	movlb	1	; () banked
  2785  0009FE  512A               	movf	(main@i_799+1)& (0+255),w,b
  2786  000A00  E12A               	bnz	l4451
  2787  000A02  0E09               	movlw	9
  2788  000A04  0101               	movlb	1	; () banked
  2789  000A06  5D29               	subwf	main@i_799& (0+255),w,b
  2790  000A08  B0D8               	btfsc	status,0,c
  2791  000A0A  D025               	goto	l4451
  2792  000A0C                     l4433:
  2793                           
  2794                           ; BSR set to: 1
  2795                           ;main.c: 233: {
  2796                           ;main.c: 234: if ((current_user[i] == '0')&&(is_leading_zero))
  2797  000A0C  0EC3               	movlw	low _current_user
  2798  000A0E  0101               	movlb	1	; () banked
  2799  000A10  2529               	addwf	main@i_799& (0+255),w,b
  2800  000A12  6ED9               	movwf	fsr2l,c
  2801  000A14  0E00               	movlw	high _current_user
  2802  000A16  0101               	movlb	1	; () banked
  2803  000A18  212A               	addwfc	(main@i_799+1)& (0+255),w,b
  2804  000A1A  6EDA               	movwf	fsr2h,c
  2805  000A1C  0E30               	movlw	48
  2806  000A1E  18DE               	xorwf	postinc2,w,c
  2807  000A20  A4D8               	btfss	status,2,c
  2808  000A22  D005               	goto	l4441
  2809                           
  2810                           ; BSR set to: 1
  2811  000A24  0101               	movlb	1	; () banked
  2812  000A26  511E               	movf	main@is_leading_zero& (0+255),w,b
  2813  000A28  0101               	movlb	1	; () banked
  2814  000A2A  A4D8               	btfss	status,2,c
  2815  000A2C  D010               	goto	l4447
  2816  000A2E                     l4441:
  2817                           
  2818                           ; BSR set to: 1
  2819                           ;main.c: 236: else
  2820                           ;main.c: 237: {
  2821                           ;main.c: 238: is_leading_zero = 0;
  2822  000A2E  0E00               	movlw	0
  2823  000A30  0101               	movlb	1	; () banked
  2824  000A32  6F1E               	movwf	main@is_leading_zero& (0+255),b
  2825                           
  2826                           ; BSR set to: 1
  2827                           ;main.c: 239: n_c++;
  2828  000A34  0101               	movlb	1	; () banked
  2829  000A36  2B15               	incf	main@n_c& (0+255),f,b
  2830                           
  2831                           ; BSR set to: 1
  2832                           ;main.c: 240: Lcd_Write_Char(current_user[i]);
  2833  000A38  0EC3               	movlw	low _current_user
  2834  000A3A  0101               	movlb	1	; () banked
  2835  000A3C  2529               	addwf	main@i_799& (0+255),w,b
  2836  000A3E  6ED9               	movwf	fsr2l,c
  2837  000A40  0E00               	movlw	high _current_user
  2838  000A42  0101               	movlb	1	; () banked
  2839  000A44  212A               	addwfc	(main@i_799+1)& (0+255),w,b
  2840  000A46  6EDA               	movwf	fsr2h,c
  2841  000A48  50DF               	movf	indf2,w,c
  2842  000A4A  ECA8  F00C         	call	_Lcd_Write_Char
  2843  000A4E                     l4447:
  2844  000A4E  0101               	movlb	1	; () banked
  2845  000A50  4B29               	infsnz	main@i_799& (0+255),f,b
  2846  000A52  2B2A               	incf	(main@i_799+1)& (0+255),f,b
  2847  000A54  D7D0               	goto	l4429
  2848  000A56                     l4451:
  2849                           
  2850                           ; BSR set to: 1
  2851                           ;main.c: 241: }
  2852                           ;main.c: 242: }
  2853                           ;main.c: 243: for (int i = 0; i < 13 - n_c; i++)
  2854  000A56  0E00               	movlw	0
  2855  000A58  0101               	movlb	1	; () banked
  2856  000A5A  6F14               	movwf	(main@i_800+1)& (0+255),b
  2857  000A5C  0E00               	movlw	0
  2858  000A5E  6F13               	movwf	main@i_800& (0+255),b
  2859  000A60  D006               	goto	l4457
  2860  000A62                     l4453:
  2861                           
  2862                           ;main.c: 244: Lcd_Write_Char(' ');
  2863  000A62  0E20               	movlw	32
  2864  000A64  ECA8  F00C         	call	_Lcd_Write_Char
  2865  000A68  0101               	movlb	1	; () banked
  2866  000A6A  4B13               	infsnz	main@i_800& (0+255),f,b
  2867  000A6C  2B14               	incf	(main@i_800+1)& (0+255),f,b
  2868  000A6E                     l4457:
  2869                           
  2870                           ; BSR set to: 1
  2871  000A6E  0101               	movlb	1	; () banked
  2872  000A70  5115               	movf	main@n_c& (0+255),w,b
  2873  000A72  0100               	movlb	0	; () banked
  2874  000A74  6FB2               	movwf	??_main& (0+255),b
  2875  000A76  6BB3               	clrf	(??_main+1)& (0+255),b
  2876  000A78  0100               	movlb	0	; () banked
  2877  000A7A  1FB2               	comf	??_main& (0+255),f,b
  2878  000A7C  1FB3               	comf	(??_main+1)& (0+255),f,b
  2879  000A7E  4BB2               	infsnz	??_main& (0+255),f,b
  2880  000A80  2BB3               	incf	(??_main+1)& (0+255),f,b
  2881  000A82  0E0D               	movlw	13
  2882  000A84  0100               	movlb	0	; () banked
  2883  000A86  27B2               	addwf	??_main& (0+255),f,b
  2884  000A88  0E00               	movlw	0
  2885  000A8A  23B3               	addwfc	(??_main+1)& (0+255),f,b
  2886  000A8C  0100               	movlb	0	; () banked
  2887  000A8E  51B2               	movf	??_main& (0+255),w,b
  2888  000A90  0101               	movlb	1	; () banked
  2889  000A92  5D13               	subwf	main@i_800& (0+255),w,b
  2890  000A94  0101               	movlb	1	; () banked
  2891  000A96  5114               	movf	(main@i_800+1)& (0+255),w,b
  2892  000A98  0A80               	xorlw	128
  2893  000A9A  0100               	movlb	0	; () banked
  2894  000A9C  6FB4               	movwf	(??_main+2)& (0+255),b
  2895  000A9E  0100               	movlb	0	; () banked
  2896  000AA0  51B3               	movf	(??_main+1)& (0+255),w,b
  2897  000AA2  0A80               	xorlw	128
  2898  000AA4  0100               	movlb	0	; () banked
  2899  000AA6  59B4               	subwfb	(??_main+2)& (0+255),w,b
  2900  000AA8  A0D8               	btfss	status,0,c
  2901  000AAA  D7DB               	goto	l4453
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;main.c: 245: Lcd_Set_Cursor(1,14);
  2905                           
  2906                           ; BSR set to: 0
  2907  000AAC  0E0E               	movlw	14
  2908  000AAE  6E12               	movwf	Lcd_Set_Cursor@b,c
  2909  000AB0  0E01               	movlw	1
  2910  000AB2  EC80  F00C         	call	_Lcd_Set_Cursor
  2911                           
  2912                           ;main.c: 246: unsigned char a, digits[] = {' '};
  2913  000AB6  C08D  F12F         	movff	main@F3695,main@digits
  2914                           
  2915                           ;main.c: 247: a = I2C_ADDR - 0x0F;
  2916  000ABA  0100               	movlb	0	; () banked
  2917  000ABC  51CE               	movf	_I2C_ADDR& (0+255),w,b
  2918  000ABE  0FF1               	addlw	241
  2919  000AC0  0101               	movlb	1	; () banked
  2920  000AC2  6F20               	movwf	main@a& (0+255),b
  2921                           
  2922                           ; BSR set to: 1
  2923                           ;main.c: 248: digits[0] = (a / 100);
  2924  000AC4  C120  F010         	movff	main@a,___awdiv@dividend
  2925  000AC8  6A11               	clrf	___awdiv@dividend+1,c
  2926  000ACA  0E00               	movlw	0
  2927  000ACC  6E13               	movwf	___awdiv@divisor+1,c
  2928  000ACE  0E64               	movlw	100
  2929  000AD0  6E12               	movwf	___awdiv@divisor,c
  2930  000AD2  EC38  F00B         	call	___awdiv	;wreg free
  2931  000AD6  5010               	movf	?___awdiv,w,c
  2932  000AD8  0101               	movlb	1	; () banked
  2933  000ADA  6F2F               	movwf	main@digits& (0+255),b
  2934                           
  2935                           ; BSR set to: 1
  2936                           ;main.c: 249: digits[1] = (((a-(digits[0]*100))) / 10);
  2937  000ADC  0101               	movlb	1	; () banked
  2938  000ADE  512F               	movf	main@digits& (0+255),w,b
  2939  000AE0  0D64               	mullw	100
  2940  000AE2  1EF3               	comf	prodl,f,c
  2941  000AE4  1EF4               	comf	prodh,f,c
  2942  000AE6  4AF3               	infsnz	prodl,f,c
  2943  000AE8  2AF4               	incf	prodh,f,c
  2944  000AEA  0101               	movlb	1	; () banked
  2945  000AEC  5120               	movf	main@a& (0+255),w,b
  2946  000AEE  24F3               	addwf	prodl,w,c
  2947  000AF0  6E10               	movwf	___awdiv@dividend,c
  2948  000AF2  0E00               	movlw	0
  2949  000AF4  20F4               	addwfc	prodh,w,c
  2950  000AF6  6E11               	movwf	___awdiv@dividend+1,c
  2951  000AF8  0E00               	movlw	0
  2952  000AFA  6E13               	movwf	___awdiv@divisor+1,c
  2953  000AFC  0E0A               	movlw	10
  2954  000AFE  6E12               	movwf	___awdiv@divisor,c
  2955  000B00  EC38  F00B         	call	___awdiv	;wreg free
  2956  000B04  5010               	movf	?___awdiv,w,c
  2957  000B06  0101               	movlb	1	; () banked
  2958  000B08  6F30               	movwf	(main@digits+1)& (0+255),b
  2959                           
  2960                           ; BSR set to: 1
  2961                           ;main.c: 250: digits[2] = (a - (digits[0]*100+digits[1]*10));
  2962  000B0A  0101               	movlb	1	; () banked
  2963  000B0C  5130               	movf	(main@digits+1)& (0+255),w,b
  2964  000B0E  0D0A               	mullw	10
  2965  000B10  CFF3 F0B2          	movff	prodl,??_main
  2966  000B14  0101               	movlb	1	; () banked
  2967  000B16  512F               	movf	main@digits& (0+255),w,b
  2968  000B18  0D64               	mullw	100
  2969  000B1A  50F3               	movf	prodl,w,c
  2970  000B1C  0100               	movlb	0	; () banked
  2971  000B1E  25B2               	addwf	??_main& (0+255),w,b
  2972  000B20  0800               	sublw	0
  2973  000B22  0101               	movlb	1	; () banked
  2974  000B24  2520               	addwf	main@a& (0+255),w,b
  2975  000B26  0101               	movlb	1	; () banked
  2976  000B28  6F31               	movwf	(main@digits+2)& (0+255),b
  2977                           
  2978                           ; BSR set to: 1
  2979                           ;main.c: 251: is_leading_zero = 1;
  2980  000B2A  0E01               	movlw	1
  2981  000B2C  0101               	movlb	1	; () banked
  2982  000B2E  6F1E               	movwf	main@is_leading_zero& (0+255),b
  2983                           
  2984                           ; BSR set to: 1
  2985                           ;main.c: 252: for (int i = 0; i < 3; i++)
  2986  000B30  0E00               	movlw	0
  2987  000B32  0101               	movlb	1	; () banked
  2988  000B34  6F2E               	movwf	(main@i_804+1)& (0+255),b
  2989  000B36  0E00               	movlw	0
  2990  000B38  6F2D               	movwf	main@i_804& (0+255),b
  2991  000B3A                     l4475:
  2992                           
  2993                           ; BSR set to: 1
  2994  000B3A  0101               	movlb	1	; () banked
  2995  000B3C  BF2E               	btfsc	(main@i_804+1)& (0+255),7,b
  2996  000B3E  D008               	goto	l4479
  2997  000B40  0101               	movlb	1	; () banked
  2998  000B42  512E               	movf	(main@i_804+1)& (0+255),w,b
  2999  000B44  E14A               	bnz	l4497
  3000  000B46  0E03               	movlw	3
  3001  000B48  0101               	movlb	1	; () banked
  3002  000B4A  5D2D               	subwf	main@i_804& (0+255),w,b
  3003  000B4C  B0D8               	btfsc	status,0,c
  3004  000B4E  D045               	goto	l4497
  3005  000B50                     l4479:
  3006                           
  3007                           ; BSR set to: 1
  3008                           ;main.c: 253: {
  3009                           ;main.c: 254: digits[i] = c[digits[i]];
  3010  000B50  0E2F               	movlw	low main@digits
  3011  000B52  0101               	movlb	1	; () banked
  3012  000B54  252D               	addwf	main@i_804& (0+255),w,b
  3013  000B56  6ED9               	movwf	fsr2l,c
  3014  000B58  0E01               	movlw	high main@digits
  3015  000B5A  0101               	movlb	1	; () banked
  3016  000B5C  212E               	addwfc	(main@i_804+1)& (0+255),w,b
  3017  000B5E  6EDA               	movwf	fsr2h,c
  3018  000B60  50DF               	movf	indf2,w,c
  3019  000B62  0100               	movlb	0	; () banked
  3020  000B64  6FB2               	movwf	??_main& (0+255),b
  3021  000B66  0100               	movlb	0	; () banked
  3022  000B68  51B2               	movf	??_main& (0+255),w,b
  3023  000B6A  0D01               	mullw	1
  3024  000B6C  0E80               	movlw	low _c
  3025  000B6E  24F3               	addwf	prodl,w,c
  3026  000B70  6ED9               	movwf	fsr2l,c
  3027  000B72  0E00               	movlw	high _c
  3028  000B74  20F4               	addwfc	prodh,w,c
  3029  000B76  6EDA               	movwf	fsr2h,c
  3030  000B78  0E2F               	movlw	low main@digits
  3031  000B7A  0101               	movlb	1	; () banked
  3032  000B7C  252D               	addwf	main@i_804& (0+255),w,b
  3033  000B7E  6EE1               	movwf	fsr1l,c
  3034  000B80  0E01               	movlw	high main@digits
  3035  000B82  0101               	movlb	1	; () banked
  3036  000B84  212E               	addwfc	(main@i_804+1)& (0+255),w,b
  3037  000B86  6EE2               	movwf	fsr1h,c
  3038  000B88  CFDF FFE7          	movff	indf2,indf1
  3039                           
  3040                           ; BSR set to: 1
  3041                           ;main.c: 255: if ((digits[i] == '0')&&(is_leading_zero))
  3042  000B8C  0E2F               	movlw	low main@digits
  3043  000B8E  0101               	movlb	1	; () banked
  3044  000B90  252D               	addwf	main@i_804& (0+255),w,b
  3045  000B92  6ED9               	movwf	fsr2l,c
  3046  000B94  0E01               	movlw	high main@digits
  3047  000B96  0101               	movlb	1	; () banked
  3048  000B98  212E               	addwfc	(main@i_804+1)& (0+255),w,b
  3049  000B9A  6EDA               	movwf	fsr2h,c
  3050  000B9C  0E30               	movlw	48
  3051  000B9E  18DE               	xorwf	postinc2,w,c
  3052  000BA0  A4D8               	btfss	status,2,c
  3053  000BA2  D009               	goto	l4489
  3054                           
  3055                           ; BSR set to: 1
  3056  000BA4  0101               	movlb	1	; () banked
  3057  000BA6  511E               	movf	main@is_leading_zero& (0+255),w,b
  3058  000BA8  0101               	movlb	1	; () banked
  3059  000BAA  B4D8               	btfsc	status,2,c
  3060  000BAC  D004               	goto	l4489
  3061                           
  3062                           ; BSR set to: 1
  3063                           ;main.c: 256: {
  3064                           ;main.c: 257: Lcd_Write_Char(' ');
  3065  000BAE  0E20               	movlw	32
  3066  000BB0  ECA8  F00C         	call	_Lcd_Write_Char
  3067                           
  3068                           ;main.c: 259: }
  3069                           
  3070                           ;main.c: 258: continue;
  3071  000BB4  D00E               	goto	l4493
  3072  000BB6                     l4489:
  3073                           
  3074                           ;main.c: 260: else
  3075                           ;main.c: 261: {
  3076                           ;main.c: 262: is_leading_zero = 0;
  3077  000BB6  0E00               	movlw	0
  3078  000BB8  0101               	movlb	1	; () banked
  3079  000BBA  6F1E               	movwf	main@is_leading_zero& (0+255),b
  3080                           
  3081                           ; BSR set to: 1
  3082                           ;main.c: 263: Lcd_Write_Char(digits[i]);
  3083  000BBC  0E2F               	movlw	low main@digits
  3084  000BBE  0101               	movlb	1	; () banked
  3085  000BC0  252D               	addwf	main@i_804& (0+255),w,b
  3086  000BC2  6ED9               	movwf	fsr2l,c
  3087  000BC4  0E01               	movlw	high main@digits
  3088  000BC6  0101               	movlb	1	; () banked
  3089  000BC8  212E               	addwfc	(main@i_804+1)& (0+255),w,b
  3090  000BCA  6EDA               	movwf	fsr2h,c
  3091  000BCC  50DF               	movf	indf2,w,c
  3092  000BCE  ECA8  F00C         	call	_Lcd_Write_Char
  3093  000BD2                     l4493:
  3094  000BD2  0101               	movlb	1	; () banked
  3095  000BD4  4B2D               	infsnz	main@i_804& (0+255),f,b
  3096  000BD6  2B2E               	incf	(main@i_804+1)& (0+255),f,b
  3097  000BD8  D7B0               	goto	l4475
  3098  000BDA                     l4497:
  3099                           
  3100                           ; BSR set to: 1
  3101                           ;main.c: 264: }
  3102                           ;main.c: 265: }
  3103                           ;main.c: 266: Lcd_Set_Cursor(2,1);
  3104  000BDA  0E01               	movlw	1
  3105  000BDC  6E12               	movwf	Lcd_Set_Cursor@b,c
  3106  000BDE  0E02               	movlw	2
  3107  000BE0  EC80  F00C         	call	_Lcd_Set_Cursor
  3108                           
  3109                           ;main.c: 267: Lcd_Write_String("                ");
  3110  000BE4  0EC3               	movlw	low STR_2
  3111  000BE6  6E14               	movwf	Lcd_Write_String@a,c
  3112  000BE8  0E7E               	movlw	high STR_2
  3113  000BEA  6E15               	movwf	Lcd_Write_String@a+1,c
  3114  000BEC  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  3115  000BF0  EF90  F000         	goto	l4155
  3116  000BF4                     __end_of_main:
  3117                           	opt stack 0
  3118                           tblptru	equ	0xFF8
  3119                           tblptrh	equ	0xFF7
  3120                           tblptrl	equ	0xFF6
  3121                           tablat	equ	0xFF5
  3122                           prodh	equ	0xFF4
  3123                           prodl	equ	0xFF3
  3124                           intcon	equ	0xFF2
  3125                           postinc0	equ	0xFEE
  3126                           wreg	equ	0xFE8
  3127                           indf1	equ	0xFE7
  3128                           postdec1	equ	0xFE5
  3129                           plusw1	equ	0xFE3
  3130                           fsr1h	equ	0xFE2
  3131                           fsr1l	equ	0xFE1
  3132                           indf2	equ	0xFDF
  3133                           postinc2	equ	0xFDE
  3134                           plusw2	equ	0xFDB
  3135                           fsr2h	equ	0xFDA
  3136                           fsr2l	equ	0xFD9
  3137                           status	equ	0xFD8
  3138                           
  3139 ;; *************** function _start_routine *****************
  3140 ;; Defined at:
  3141 ;;		line 423 in file "main.c"
  3142 ;; Parameters:    Size  Location     Type
  3143 ;;		None
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;  i               2   23[BANK0 ] int 
  3146 ;;  i               2   16[BANK0 ] int 
  3147 ;;  i               2   14[BANK0 ] int 
  3148 ;;  i               2   12[BANK0 ] int 
  3149 ;;  i               2   21[BANK0 ] int 
  3150 ;;  i               2   30[BANK0 ] int 
  3151 ;;  b               3   18[BANK0 ] unsigned char [3]
  3152 ;;  error_msg       2    2[BANK0 ] PTR unsigned char 
  3153 ;;		 -> STR_28(17), STR_27(17), 
  3154 ;;  new_I2C_addr    1   35[BANK0 ] unsigned char 
  3155 ;;  I2C_new_ADDR    3   25[BANK0 ] unsigned char [3]
  3156 ;;  i               2   10[BANK0 ] int 
  3157 ;;  i               2    8[BANK0 ] int 
  3158 ;;  i               2    6[BANK0 ] int 
  3159 ;;  n               1   34[BANK0 ] unsigned char 
  3160 ;;  x               1   33[BANK0 ] unsigned char 
  3161 ;;  dh              1   32[BANK0 ] unsigned char 
  3162 ;;  dt              1   29[BANK0 ] unsigned char 
  3163 ;;  a               1   28[BANK0 ] unsigned char 
  3164 ;;  v               1    5[BANK0 ] unsigned char 
  3165 ;;  d1              1    4[BANK0 ] unsigned char 
  3166 ;;  l               1    1[BANK0 ] unsigned char 
  3167 ;;  h               1    0[BANK0 ] unsigned char 
  3168 ;; Return value:  Size  Location     Type
  3169 ;;                  1    wreg      void 
  3170 ;; Registers used:
  3171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3172 ;; Tracked objects:
  3173 ;;		On entry : 0/0
  3174 ;;		On exit  : 0/0
  3175 ;;		Unchanged: 0/0
  3176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3177 ;;      Params:         0       0       0       0       0       0       0
  3178 ;;      Locals:         0      36       0       0       0       0       0
  3179 ;;      Temps:          4       0       0       0       0       0       0
  3180 ;;      Totals:         4      36       0       0       0       0       0
  3181 ;;Total ram usage:       40 bytes
  3182 ;; Hardware stack levels used:    1
  3183 ;; Hardware stack levels required when called:    5
  3184 ;; This function calls:
  3185 ;;		_Eeprom_Write_Byte
  3186 ;;		_Lcd_Clear
  3187 ;;		_Lcd_Set_Cursor
  3188 ;;		_Lcd_Write_Char
  3189 ;;		_Lcd_Write_String
  3190 ;;		___awdiv
  3191 ;;		_latch_keypad
  3192 ;;		_menu_progress_bar
  3193 ;;		_read_keypad
  3194 ;; This function is called by:
  3195 ;;		_main
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198                           
  3199                           	psect	text1
  3200  000BF4                     __ptext1:
  3201                           	opt stack 0
  3202  000BF4                     _start_routine:
  3203                           	opt stack 25
  3204                           
  3205                           ;main.c: 428: Lcd_Clear();
  3206                           
  3207                           ;incstack = 0
  3208  000BF4  EC4A  F00D         	call	_Lcd_Clear	;wreg free
  3209                           
  3210                           ;main.c: 429: Lcd_Set_Cursor(1, 1);
  3211  000BF8  0E01               	movlw	1
  3212  000BFA  6E12               	movwf	Lcd_Set_Cursor@b,c
  3213  000BFC  0E01               	movlw	1
  3214  000BFE  EC80  F00C         	call	_Lcd_Set_Cursor
  3215                           
  3216                           ;main.c: 430: Lcd_Write_String("   [ Aditum ]   ");
  3217  000C02  0EE5               	movlw	low STR_15
  3218  000C04  6E14               	movwf	Lcd_Write_String@a,c
  3219  000C06  0E7E               	movlw	high STR_15
  3220  000C08  6E15               	movwf	Lcd_Write_String@a+1,c
  3221  000C0A  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  3222                           
  3223                           ;main.c: 431: for (int i = 0; i < 20; i++)
  3224  000C0E  0E00               	movlw	0
  3225  000C10  0100               	movlb	0	; () banked
  3226  000C12  6F95               	movwf	(start_routine@i+1)& (0+255),b
  3227  000C14  0E00               	movlw	0
  3228  000C16  6F94               	movwf	start_routine@i& (0+255),b
  3229  000C18                     l3753:
  3230                           
  3231                           ; BSR set to: 0
  3232  000C18  0100               	movlb	0	; () banked
  3233  000C1A  BF95               	btfsc	(start_routine@i+1)& (0+255),7,b
  3234  000C1C  D008               	goto	l3757
  3235  000C1E  0100               	movlb	0	; () banked
  3236  000C20  5195               	movf	(start_routine@i+1)& (0+255),w,b
  3237  000C22  E112               	bnz	l3761
  3238  000C24  0E14               	movlw	20
  3239  000C26  0100               	movlb	0	; () banked
  3240  000C28  5D94               	subwf	start_routine@i& (0+255),w,b
  3241  000C2A  B0D8               	btfsc	status,0,c
  3242  000C2C  D00D               	goto	l3761
  3243  000C2E                     l3757:
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;main.c: 432: _delay((unsigned long)((20)*(16000000/4000.0)));
  3247  000C2E  0E68               	movlw	104
  3248  000C30  6E31               	movwf	??_start_routine& (0+255),c
  3249  000C32  0EE4               	movlw	228
  3250  000C34                     u4397:
  3251  000C34  2EE8               	decfsz	wreg,f,c
  3252  000C36  D7FE               	goto	u4397
  3253  000C38  2E31               	decfsz	??_start_routine& (0+255),f,c
  3254  000C3A  D7FC               	goto	u4397
  3255  000C3C  F000 F000          	nop2	
  3256  000C40  0100               	movlb	0	; () banked
  3257  000C42  4B94               	infsnz	start_routine@i& (0+255),f,b
  3258  000C44  2B95               	incf	(start_routine@i+1)& (0+255),f,b
  3259  000C46  D7E8               	goto	l3753
  3260  000C48                     l3761:
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;main.c: 433: Lcd_Set_Cursor(2,1);
  3264  000C48  0E01               	movlw	1
  3265  000C4A  6E12               	movwf	Lcd_Set_Cursor@b,c
  3266  000C4C  0E02               	movlw	2
  3267  000C4E  EC80  F00C         	call	_Lcd_Set_Cursor
  3268                           
  3269                           ;main.c: 434: Lcd_Write_String("Rev ");
  3270  000C52  0EF3               	movlw	low STR_16
  3271  000C54  6E14               	movwf	Lcd_Write_String@a,c
  3272  000C56  0E7F               	movlw	high STR_16
  3273  000C58  6E15               	movwf	Lcd_Write_String@a+1,c
  3274  000C5A  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  3275                           
  3276                           ;main.c: 435: Lcd_Write_String("1.0.0");
  3277  000C5E  0EED               	movlw	low STR_17
  3278  000C60  6E14               	movwf	Lcd_Write_String@a,c
  3279  000C62  0E7F               	movlw	high STR_17
  3280  000C64  6E15               	movwf	Lcd_Write_String@a+1,c
  3281  000C66  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  3282                           
  3283                           ;main.c: 436: for (int i = 0; i < 50; i++)
  3284  000C6A  0E00               	movlw	0
  3285  000C6C  0100               	movlb	0	; () banked
  3286  000C6E  6F97               	movwf	(start_routine@i_876+1)& (0+255),b
  3287  000C70  0E00               	movlw	0
  3288  000C72  6F96               	movwf	start_routine@i_876& (0+255),b
  3289  000C74                     l3769:
  3290                           
  3291                           ; BSR set to: 0
  3292  000C74  0100               	movlb	0	; () banked
  3293  000C76  BF97               	btfsc	(start_routine@i_876+1)& (0+255),7,b
  3294  000C78  D008               	goto	l3773
  3295  000C7A  0100               	movlb	0	; () banked
  3296  000C7C  5197               	movf	(start_routine@i_876+1)& (0+255),w,b
  3297  000C7E  E112               	bnz	l3777
  3298  000C80  0E32               	movlw	50
  3299  000C82  0100               	movlb	0	; () banked
  3300  000C84  5D96               	subwf	start_routine@i_876& (0+255),w,b
  3301  000C86  B0D8               	btfsc	status,0,c
  3302  000C88  D00D               	goto	l3777
  3303  000C8A                     l3773:
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;main.c: 437: _delay((unsigned long)((20)*(16000000/4000.0)));
  3307  000C8A  0E68               	movlw	104
  3308  000C8C  6E31               	movwf	??_start_routine& (0+255),c
  3309  000C8E  0EE4               	movlw	228
  3310  000C90                     u4407:
  3311  000C90  2EE8               	decfsz	wreg,f,c
  3312  000C92  D7FE               	goto	u4407
  3313  000C94  2E31               	decfsz	??_start_routine& (0+255),f,c
  3314  000C96  D7FC               	goto	u4407
  3315  000C98  F000 F000          	nop2	
  3316  000C9C  0100               	movlb	0	; () banked
  3317  000C9E  4B96               	infsnz	start_routine@i_876& (0+255),f,b
  3318  000CA0  2B97               	incf	(start_routine@i_876+1)& (0+255),f,b
  3319  000CA2  D7E8               	goto	l3769
  3320  000CA4                     l3777:
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;main.c: 438: Lcd_Set_Cursor(2,1);
  3324  000CA4  0E01               	movlw	1
  3325  000CA6  6E12               	movwf	Lcd_Set_Cursor@b,c
  3326  000CA8  0E02               	movlw	2
  3327  000CAA  EC80  F00C         	call	_Lcd_Set_Cursor
  3328                           
  3329                           ;main.c: 439: Lcd_Write_String("Device ID ");
  3330  000CAE  0EE2               	movlw	low STR_18
  3331  000CB0  6E14               	movwf	Lcd_Write_String@a,c
  3332  000CB2  0E7F               	movlw	high STR_18
  3333  000CB4  6E15               	movwf	Lcd_Write_String@a+1,c
  3334  000CB6  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  3335                           
  3336                           ;main.c: 440: unsigned char a, h, l, dh, dt, d1;
  3337                           ;main.c: 441: if (I2C_ADDR != 0)
  3338  000CBA  0100               	movlb	0	; () banked
  3339  000CBC  51CE               	movf	_I2C_ADDR& (0+255),w,b
  3340  000CBE  B4D8               	btfsc	status,2,c
  3341  000CC0  D004               	goto	l3785
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;main.c: 442: a = I2C_ADDR - 0x0F;
  3345  000CC2  0100               	movlb	0	; () banked
  3346  000CC4  51CE               	movf	_I2C_ADDR& (0+255),w,b
  3347  000CC6  0FF1               	addlw	241
  3348  000CC8  D001               	goto	L4
  3349  000CCA                     l3785:
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;main.c: 443: else
  3353                           ;main.c: 444: a = 0;
  3354  000CCA  0E00               	movlw	0
  3355  000CCC                     L4:
  3356  000CCC  0100               	movlb	0	; () banked
  3357  000CCE  6FAA               	movwf	start_routine@a& (0+255),b
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;main.c: 446: dh = (a / 100);
  3361                           
  3362                           ; BSR set to: 0
  3363  000CD0  C0AA  F010         	movff	start_routine@a,___awdiv@dividend
  3364  000CD4  6A11               	clrf	___awdiv@dividend+1,c
  3365  000CD6  0E00               	movlw	0
  3366  000CD8  6E13               	movwf	___awdiv@divisor+1,c
  3367  000CDA  0E64               	movlw	100
  3368  000CDC  6E12               	movwf	___awdiv@divisor,c
  3369  000CDE  EC38  F00B         	call	___awdiv	;wreg free
  3370  000CE2  5010               	movf	?___awdiv,w,c
  3371  000CE4  0100               	movlb	0	; () banked
  3372  000CE6  6FAE               	movwf	start_routine@dh& (0+255),b
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;main.c: 447: dt = (a - dh*100) / 10;
  3376  000CE8  0100               	movlb	0	; () banked
  3377  000CEA  51AE               	movf	start_routine@dh& (0+255),w,b
  3378  000CEC  0D64               	mullw	100
  3379  000CEE  1EF3               	comf	prodl,f,c
  3380  000CF0  1EF4               	comf	prodh,f,c
  3381  000CF2  4AF3               	infsnz	prodl,f,c
  3382  000CF4  2AF4               	incf	prodh,f,c
  3383  000CF6  0100               	movlb	0	; () banked
  3384  000CF8  51AA               	movf	start_routine@a& (0+255),w,b
  3385  000CFA  24F3               	addwf	prodl,w,c
  3386  000CFC  6E10               	movwf	___awdiv@dividend,c
  3387  000CFE  0E00               	movlw	0
  3388  000D00  20F4               	addwfc	prodh,w,c
  3389  000D02  6E11               	movwf	___awdiv@dividend+1,c
  3390  000D04  0E00               	movlw	0
  3391  000D06  6E13               	movwf	___awdiv@divisor+1,c
  3392  000D08  0E0A               	movlw	10
  3393  000D0A  6E12               	movwf	___awdiv@divisor,c
  3394  000D0C  EC38  F00B         	call	___awdiv	;wreg free
  3395  000D10  5010               	movf	?___awdiv,w,c
  3396  000D12  0100               	movlb	0	; () banked
  3397  000D14  6FAB               	movwf	start_routine@dt& (0+255),b
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;main.c: 448: d1 = (a - (dh*100+dt*10));
  3401  000D16  0100               	movlb	0	; () banked
  3402  000D18  51AB               	movf	start_routine@dt& (0+255),w,b
  3403  000D1A  0D0A               	mullw	10
  3404  000D1C  CFF3 F031          	movff	prodl,??_start_routine
  3405  000D20  0100               	movlb	0	; () banked
  3406  000D22  51AE               	movf	start_routine@dh& (0+255),w,b
  3407  000D24  0D64               	mullw	100
  3408  000D26  50F3               	movf	prodl,w,c
  3409  000D28  2431               	addwf	??_start_routine,w,c
  3410  000D2A  0800               	sublw	0
  3411  000D2C  0100               	movlb	0	; () banked
  3412  000D2E  25AA               	addwf	start_routine@a& (0+255),w,b
  3413  000D30  0100               	movlb	0	; () banked
  3414  000D32  6F92               	movwf	start_routine@d1& (0+255),b
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;main.c: 449: Lcd_Write_Char(c[dh]);
  3418  000D34  0100               	movlb	0	; () banked
  3419  000D36  51AE               	movf	start_routine@dh& (0+255),w,b
  3420  000D38  0D01               	mullw	1
  3421  000D3A  0E80               	movlw	low _c
  3422  000D3C  24F3               	addwf	prodl,w,c
  3423  000D3E  6ED9               	movwf	fsr2l,c
  3424  000D40  0E00               	movlw	high _c
  3425  000D42  20F4               	addwfc	prodh,w,c
  3426  000D44  6EDA               	movwf	fsr2h,c
  3427  000D46  50DF               	movf	indf2,w,c
  3428  000D48  ECA8  F00C         	call	_Lcd_Write_Char
  3429                           
  3430                           ;main.c: 450: Lcd_Write_Char(c[dt]);
  3431  000D4C  0100               	movlb	0	; () banked
  3432  000D4E  51AB               	movf	start_routine@dt& (0+255),w,b
  3433  000D50  0D01               	mullw	1
  3434  000D52  0E80               	movlw	low _c
  3435  000D54  24F3               	addwf	prodl,w,c
  3436  000D56  6ED9               	movwf	fsr2l,c
  3437  000D58  0E00               	movlw	high _c
  3438  000D5A  20F4               	addwfc	prodh,w,c
  3439  000D5C  6EDA               	movwf	fsr2h,c
  3440  000D5E  50DF               	movf	indf2,w,c
  3441  000D60  ECA8  F00C         	call	_Lcd_Write_Char
  3442                           
  3443                           ;main.c: 451: Lcd_Write_Char(c[d1]);
  3444  000D64  0100               	movlb	0	; () banked
  3445  000D66  5192               	movf	start_routine@d1& (0+255),w,b
  3446  000D68  0D01               	mullw	1
  3447  000D6A  0E80               	movlw	low _c
  3448  000D6C  24F3               	addwf	prodl,w,c
  3449  000D6E  6ED9               	movwf	fsr2l,c
  3450  000D70  0E00               	movlw	high _c
  3451  000D72  20F4               	addwfc	prodh,w,c
  3452  000D74  6EDA               	movwf	fsr2h,c
  3453  000D76  50DF               	movf	indf2,w,c
  3454  000D78  ECA8  F00C         	call	_Lcd_Write_Char
  3455                           
  3456                           ;main.c: 452: Lcd_Write_Char('|');
  3457  000D7C  0E7C               	movlw	124
  3458  000D7E  ECA8  F00C         	call	_Lcd_Write_Char
  3459                           
  3460                           ;main.c: 453: Lcd_Write_Char(hx[I2C_ADDR/16]);
  3461  000D82  C0CE  F010         	movff	_I2C_ADDR,___awdiv@dividend
  3462  000D86  6A11               	clrf	___awdiv@dividend+1,c
  3463  000D88  0E00               	movlw	0
  3464  000D8A  6E13               	movwf	___awdiv@divisor+1,c
  3465  000D8C  0E10               	movlw	16
  3466  000D8E  6E12               	movwf	___awdiv@divisor,c
  3467  000D90  EC38  F00B         	call	___awdiv	;wreg free
  3468  000D94  0E53               	movlw	low _hx
  3469  000D96  2410               	addwf	?___awdiv,w,c
  3470  000D98  6ED9               	movwf	fsr2l,c
  3471  000D9A  0E01               	movlw	high _hx
  3472  000D9C  2011               	addwfc	?___awdiv+1,w,c
  3473  000D9E  6EDA               	movwf	fsr2h,c
  3474  000DA0  50DF               	movf	indf2,w,c
  3475  000DA2  ECA8  F00C         	call	_Lcd_Write_Char
  3476                           
  3477                           ;main.c: 454: Lcd_Write_Char(hx[I2C_ADDR - (I2C_ADDR/16)*16]);
  3478  000DA6  C0CE  F010         	movff	_I2C_ADDR,___awdiv@dividend
  3479  000DAA  6A11               	clrf	___awdiv@dividend+1,c
  3480  000DAC  0E00               	movlw	0
  3481  000DAE  6E13               	movwf	___awdiv@divisor+1,c
  3482  000DB0  0E10               	movlw	16
  3483  000DB2  6E12               	movwf	___awdiv@divisor,c
  3484  000DB4  EC38  F00B         	call	___awdiv	;wreg free
  3485  000DB8  3A10               	swapf	?___awdiv,f,c
  3486  000DBA  3A11               	swapf	?___awdiv+1,f,c
  3487  000DBC  0EF0               	movlw	240
  3488  000DBE  1611               	andwf	?___awdiv+1,f,c
  3489  000DC0  5010               	movf	?___awdiv,w,c
  3490  000DC2  0B0F               	andlw	15
  3491  000DC4  1211               	iorwf	?___awdiv+1,f,c
  3492  000DC6  0EF0               	movlw	240
  3493  000DC8  1610               	andwf	?___awdiv,f,c
  3494  000DCA  1E10               	comf	?___awdiv,f,c
  3495  000DCC  1E11               	comf	?___awdiv+1,f,c
  3496  000DCE  4A10               	infsnz	?___awdiv,f,c
  3497  000DD0  2A11               	incf	?___awdiv+1,f,c
  3498  000DD2  0100               	movlb	0	; () banked
  3499  000DD4  51CE               	movf	_I2C_ADDR& (0+255),w,b
  3500  000DD6  6E31               	movwf	??_start_routine& (0+255),c
  3501  000DD8  6A32               	clrf	(??_start_routine+1)& (0+255),c
  3502  000DDA  5010               	movf	?___awdiv,w,c
  3503  000DDC  2631               	addwf	??_start_routine,f,c
  3504  000DDE  5011               	movf	?___awdiv+1,w,c
  3505  000DE0  2232               	addwfc	??_start_routine+1,f,c
  3506  000DE2  0E53               	movlw	low _hx
  3507  000DE4  2431               	addwf	??_start_routine,w,c
  3508  000DE6  6ED9               	movwf	fsr2l,c
  3509  000DE8  0E01               	movlw	high _hx
  3510  000DEA  2032               	addwfc	??_start_routine+1,w,c
  3511  000DEC  6EDA               	movwf	fsr2h,c
  3512  000DEE  50DF               	movf	indf2,w,c
  3513  000DF0  ECA8  F00C         	call	_Lcd_Write_Char
  3514                           
  3515                           ;main.c: 455: for (int i = 0; i < 40; i++)
  3516  000DF4  0E00               	movlw	0
  3517  000DF6  0100               	movlb	0	; () banked
  3518  000DF8  6F99               	movwf	(start_routine@i_884+1)& (0+255),b
  3519  000DFA  0E00               	movlw	0
  3520  000DFC  6F98               	movwf	start_routine@i_884& (0+255),b
  3521  000DFE                     l3807:
  3522                           
  3523                           ; BSR set to: 0
  3524  000DFE  0100               	movlb	0	; () banked
  3525  000E00  BF99               	btfsc	(start_routine@i_884+1)& (0+255),7,b
  3526  000E02  D008               	goto	l3811
  3527  000E04  0100               	movlb	0	; () banked
  3528  000E06  5199               	movf	(start_routine@i_884+1)& (0+255),w,b
  3529  000E08  E112               	bnz	l3815
  3530  000E0A  0E28               	movlw	40
  3531  000E0C  0100               	movlb	0	; () banked
  3532  000E0E  5D98               	subwf	start_routine@i_884& (0+255),w,b
  3533  000E10  B0D8               	btfsc	status,0,c
  3534  000E12  D00D               	goto	l3815
  3535  000E14                     l3811:
  3536                           
  3537                           ; BSR set to: 0
  3538                           ;main.c: 456: _delay((unsigned long)((20)*(16000000/4000.0)));
  3539  000E14  0E68               	movlw	104
  3540  000E16  6E31               	movwf	??_start_routine& (0+255),c
  3541  000E18  0EE4               	movlw	228
  3542  000E1A                     u4417:
  3543  000E1A  2EE8               	decfsz	wreg,f,c
  3544  000E1C  D7FE               	goto	u4417
  3545  000E1E  2E31               	decfsz	??_start_routine& (0+255),f,c
  3546  000E20  D7FC               	goto	u4417
  3547  000E22  F000 F000          	nop2	
  3548  000E26  0100               	movlb	0	; () banked
  3549  000E28  4B98               	infsnz	start_routine@i_884& (0+255),f,b
  3550  000E2A  2B99               	incf	(start_routine@i_884+1)& (0+255),f,b
  3551  000E2C  D7E8               	goto	l3807
  3552  000E2E                     l3815:
  3553                           
  3554                           ; BSR set to: 0
  3555                           ;main.c: 457: Lcd_Clear();
  3556  000E2E  EC4A  F00D         	call	_Lcd_Clear	;wreg free
  3557                           
  3558                           ;main.c: 458: Lcd_Set_Cursor(1, 1);
  3559  000E32  0E01               	movlw	1
  3560  000E34  6E12               	movwf	Lcd_Set_Cursor@b,c
  3561  000E36  0E01               	movlw	1
  3562  000E38  EC80  F00C         	call	_Lcd_Set_Cursor
  3563                           
  3564                           ;main.c: 459: Lcd_Write_String("  [  Aditum  ]  ");
  3565  000E3C  0E3A               	movlw	low STR_19
  3566  000E3E  6E14               	movwf	Lcd_Write_String@a,c
  3567  000E40  0E7F               	movlw	high STR_19
  3568  000E42  6E15               	movwf	Lcd_Write_String@a+1,c
  3569  000E44  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  3570                           
  3571                           ;main.c: 460: menu_progress_bar(700);
  3572  000E48  0E02               	movlw	2
  3573  000E4A  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  3574  000E4C  0EBC               	movlw	188
  3575  000E4E  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  3576  000E50  ECBA  F009         	call	_menu_progress_bar	;wreg free
  3577                           
  3578                           ;main.c: 463: unsigned char x, n = 0, v;
  3579  000E54  0E00               	movlw	0
  3580  000E56  0100               	movlb	0	; () banked
  3581  000E58  6FB0               	movwf	start_routine@n& (0+255),b
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;main.c: 464: if (I2C_ADDR == 0x00)
  3585  000E5A  0100               	movlb	0	; () banked
  3586  000E5C  51CE               	movf	_I2C_ADDR& (0+255),w,b
  3587  000E5E  A4D8               	btfss	status,2,c
  3588  000E60  D285               	goto	l4027
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;main.c: 465: {
  3592                           ;main.c: 466: v = 0;
  3593  000E62  0E00               	movlw	0
  3594  000E64  0100               	movlb	0	; () banked
  3595  000E66  6F93               	movwf	start_routine@v& (0+255),b
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;main.c: 467: Lcd_Set_Cursor(1,1);
  3599  000E68  0E01               	movlw	1
  3600  000E6A  6E12               	movwf	Lcd_Set_Cursor@b,c
  3601  000E6C  0E01               	movlw	1
  3602  000E6E  EC80  F00C         	call	_Lcd_Set_Cursor
  3603                           
  3604                           ;main.c: 468: Lcd_Write_String("Load I2C setup..");
  3605  000E72  0E7E               	movlw	low STR_20
  3606  000E74  6E14               	movwf	Lcd_Write_String@a,c
  3607  000E76  0E7F               	movlw	high STR_20
  3608  000E78  6E15               	movwf	Lcd_Write_String@a+1,c
  3609  000E7A  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  3610                           
  3611                           ;main.c: 469: menu_progress_bar(300);
  3612  000E7E  0E01               	movlw	1
  3613  000E80  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  3614  000E82  0E2C               	movlw	44
  3615  000E84  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  3616  000E86  ECBA  F009         	call	_menu_progress_bar	;wreg free
  3617                           
  3618                           ;main.c: 470: unsigned char I2C_new_ADDR[] = {'0', '0', '0'};
  3619  000E8A  C08A  F0A7         	movff	start_routine@F3723,start_routine@I2C_new_ADDR
  3620  000E8E  C08B  F0A8         	movff	start_routine@F3723+1,start_routine@I2C_new_ADDR+1
  3621  000E92  C08C  F0A9         	movff	start_routine@F3723+2,start_routine@I2C_new_ADDR+2
  3622                           
  3623                           ;main.c: 471: while (v != 1)
  3624  000E96  D265               	goto	l4025
  3625  000E98                     l3837:
  3626                           
  3627                           ;main.c: 472: {
  3628                           ;main.c: 473: Lcd_Set_Cursor(1,1);
  3629  000E98  0E01               	movlw	1
  3630  000E9A  6E12               	movwf	Lcd_Set_Cursor@b,c
  3631  000E9C  0E01               	movlw	1
  3632  000E9E  EC80  F00C         	call	_Lcd_Set_Cursor
  3633                           
  3634                           ;main.c: 474: Lcd_Write_String("New Machine ID: ");
  3635  000EA2  0E4B               	movlw	low STR_21
  3636  000EA4  6E14               	movwf	Lcd_Write_String@a,c
  3637  000EA6  0E7F               	movlw	high STR_21
  3638  000EA8  6E15               	movwf	Lcd_Write_String@a+1,c
  3639  000EAA  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  3640                           
  3641                           ;main.c: 475: Lcd_Set_Cursor(2,1);
  3642  000EAE  0E01               	movlw	1
  3643  000EB0  6E12               	movwf	Lcd_Set_Cursor@b,c
  3644  000EB2  0E02               	movlw	2
  3645  000EB4  EC80  F00C         	call	_Lcd_Set_Cursor
  3646                           
  3647                           ;main.c: 476: Lcd_Write_String("       [001-100]");
  3648  000EB8  0EA0               	movlw	low STR_22
  3649  000EBA  6E14               	movwf	Lcd_Write_String@a,c
  3650  000EBC  0E7F               	movlw	high STR_22
  3651  000EBE  6E15               	movwf	Lcd_Write_String@a+1,c
  3652  000EC0  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  3653                           
  3654                           ;main.c: 477: Lcd_Set_Cursor(2,1);
  3655  000EC4  0E01               	movlw	1
  3656  000EC6  6E12               	movwf	Lcd_Set_Cursor@b,c
  3657  000EC8  0E02               	movlw	2
  3658  000ECA  EC80  F00C         	call	_Lcd_Set_Cursor
  3659                           
  3660                           ;main.c: 478: Lcd_Write_Char('_');
  3661  000ECE  0E5F               	movlw	95
  3662  000ED0  ECA8  F00C         	call	_Lcd_Write_Char
  3663                           
  3664                           ;main.c: 479: while (n < 3)
  3665  000ED4  D081               	goto	l3889
  3666  000ED6                     l3847:
  3667                           
  3668                           ;main.c: 480: {
  3669                           ;main.c: 481: x = read_keypad();
  3670  000ED6  ECE6  F00A         	call	_read_keypad	;wreg free
  3671  000EDA  0100               	movlb	0	; () banked
  3672  000EDC  6FAF               	movwf	start_routine@x& (0+255),b
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;main.c: 482: if (x != '_')
  3676  000EDE  0E5F               	movlw	95
  3677  000EE0  0100               	movlb	0	; () banked
  3678  000EE2  19AF               	xorwf	start_routine@x& (0+255),w,b
  3679  000EE4  B4D8               	btfsc	status,2,c
  3680  000EE6  D078               	goto	l3889
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;main.c: 483: {
  3684                           ;main.c: 484: if (((x - '#') == 0)&&(n > 0))
  3685  000EE8  0EDD               	movlw	221
  3686  000EEA  6E31               	movwf	??_start_routine& (0+255),c
  3687  000EEC  0EFF               	movlw	255
  3688  000EEE  6E32               	movwf	(??_start_routine+1)& (0+255),c
  3689  000EF0  0100               	movlb	0	; () banked
  3690  000EF2  51AF               	movf	start_routine@x& (0+255),w,b
  3691  000EF4  6E33               	movwf	(??_start_routine+2)& (0+255),c
  3692  000EF6  6A34               	clrf	(??_start_routine+3)& (0+255),c
  3693  000EF8  5031               	movf	??_start_routine,w,c
  3694  000EFA  2633               	addwf	??_start_routine+2,f,c
  3695  000EFC  5032               	movf	??_start_routine+1,w,c
  3696  000EFE  2234               	addwfc	??_start_routine+3,f,c
  3697  000F00  5033               	movf	??_start_routine+2,w,c
  3698  000F02  1034               	iorwf	??_start_routine+3,w,c
  3699  000F04  A4D8               	btfss	status,2,c
  3700  000F06  D02F               	goto	l3871
  3701                           
  3702                           ; BSR set to: 0
  3703  000F08  0100               	movlb	0	; () banked
  3704  000F0A  51B0               	movf	start_routine@n& (0+255),w,b
  3705  000F0C  0100               	movlb	0	; () banked
  3706  000F0E  B4D8               	btfsc	status,2,c
  3707  000F10  D02A               	goto	l3871
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;main.c: 485: {
  3711                           ;main.c: 486: I2C_new_ADDR[n] = 0;
  3712  000F12  0100               	movlb	0	; () banked
  3713  000F14  51B0               	movf	start_routine@n& (0+255),w,b
  3714  000F16  0D01               	mullw	1
  3715  000F18  0EA7               	movlw	low start_routine@I2C_new_ADDR
  3716  000F1A  24F3               	addwf	prodl,w,c
  3717  000F1C  6ED9               	movwf	fsr2l,c
  3718  000F1E  0E00               	movlw	high start_routine@I2C_new_ADDR
  3719  000F20  20F4               	addwfc	prodh,w,c
  3720  000F22  6EDA               	movwf	fsr2h,c
  3721  000F24  0E00               	movlw	0
  3722  000F26  6EDF               	movwf	indf2,c
  3723                           
  3724                           ; BSR set to: 0
  3725                           ;main.c: 487: Lcd_Set_Cursor(2, n);
  3726  000F28  C0B0  F012         	movff	start_routine@n,Lcd_Set_Cursor@b
  3727  000F2C  0E02               	movlw	2
  3728  000F2E  EC80  F00C         	call	_Lcd_Set_Cursor
  3729                           
  3730                           ;main.c: 488: Lcd_Write_Char('_');
  3731  000F32  0E5F               	movlw	95
  3732  000F34  ECA8  F00C         	call	_Lcd_Write_Char
  3733                           
  3734                           ;main.c: 489: latch_keypad(&x);
  3735  000F38  0EAF               	movlw	low start_routine@x
  3736  000F3A  6E10               	movwf	latch_keypad@x,c
  3737  000F3C  0E00               	movlw	high start_routine@x
  3738  000F3E  6E11               	movwf	latch_keypad@x+1,c
  3739  000F40  ECC4  F00C         	call	_latch_keypad	;wreg free
  3740                           
  3741                           ;main.c: 490: Lcd_Set_Cursor(2, 1 + n);
  3742  000F44  0100               	movlb	0	; () banked
  3743  000F46  29B0               	incf	start_routine@n& (0+255),w,b
  3744  000F48  6E12               	movwf	Lcd_Set_Cursor@b,c
  3745  000F4A  0E02               	movlw	2
  3746  000F4C  EC80  F00C         	call	_Lcd_Set_Cursor
  3747                           
  3748                           ;main.c: 491: Lcd_Write_Char(' ');
  3749  000F50  0E20               	movlw	32
  3750  000F52  ECA8  F00C         	call	_Lcd_Write_Char
  3751                           
  3752                           ;main.c: 492: Lcd_Set_Cursor(2, n);
  3753  000F56  C0B0  F012         	movff	start_routine@n,Lcd_Set_Cursor@b
  3754  000F5A  0E02               	movlw	2
  3755  000F5C  EC80  F00C         	call	_Lcd_Set_Cursor
  3756                           
  3757                           ;main.c: 493: n--;
  3758  000F60  0100               	movlb	0	; () banked
  3759  000F62  07B0               	decf	start_routine@n& (0+255),f,b
  3760                           
  3761                           ;main.c: 494: }
  3762  000F64  D039               	goto	l3889
  3763  000F66                     l3871:
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;main.c: 495: else if ((x - '#') != 0)
  3767  000F66  0EDD               	movlw	221
  3768  000F68  6E31               	movwf	??_start_routine& (0+255),c
  3769  000F6A  0EFF               	movlw	255
  3770  000F6C  6E32               	movwf	(??_start_routine+1)& (0+255),c
  3771  000F6E  0100               	movlb	0	; () banked
  3772  000F70  51AF               	movf	start_routine@x& (0+255),w,b
  3773  000F72  6E33               	movwf	(??_start_routine+2)& (0+255),c
  3774  000F74  6A34               	clrf	(??_start_routine+3)& (0+255),c
  3775  000F76  5031               	movf	??_start_routine,w,c
  3776  000F78  2633               	addwf	??_start_routine+2,f,c
  3777  000F7A  5032               	movf	??_start_routine+1,w,c
  3778  000F7C  2234               	addwfc	??_start_routine+3,f,c
  3779  000F7E  5033               	movf	??_start_routine+2,w,c
  3780  000F80  1034               	iorwf	??_start_routine+3,w,c
  3781  000F82  B4D8               	btfsc	status,2,c
  3782  000F84  D029               	goto	l3889
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;main.c: 496: {
  3786                           ;main.c: 497: if ((x == '*')|(n == 3))
  3787  000F86  0E2A               	movlw	42
  3788  000F88  0100               	movlb	0	; () banked
  3789  000F8A  19AF               	xorwf	start_routine@x& (0+255),w,b
  3790  000F8C  B4D8               	btfsc	status,2,c
  3791  000F8E  D028               	goto	l3891
  3792                           
  3793                           ; BSR set to: 0
  3794  000F90  0E03               	movlw	3
  3795  000F92  0100               	movlb	0	; () banked
  3796  000F94  19B0               	xorwf	start_routine@n& (0+255),w,b
  3797  000F96  B4D8               	btfsc	status,2,c
  3798  000F98  D023               	goto	l3891
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;main.c: 500: }
  3802                           ;main.c: 501: I2C_new_ADDR[n] = x;
  3803                           
  3804                           ; BSR set to: 0
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;main.c: 498: {
  3808                           ;main.c: 499: break;
  3809  000F9A  0100               	movlb	0	; () banked
  3810  000F9C  51B0               	movf	start_routine@n& (0+255),w,b
  3811  000F9E  0D01               	mullw	1
  3812  000FA0  0EA7               	movlw	low start_routine@I2C_new_ADDR
  3813  000FA2  24F3               	addwf	prodl,w,c
  3814  000FA4  6ED9               	movwf	fsr2l,c
  3815  000FA6  0E00               	movlw	high start_routine@I2C_new_ADDR
  3816  000FA8  20F4               	addwfc	prodh,w,c
  3817  000FAA  6EDA               	movwf	fsr2h,c
  3818  000FAC  C0AF  FFDF         	movff	start_routine@x,indf2
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;main.c: 502: n++;
  3822  000FB0  0100               	movlb	0	; () banked
  3823  000FB2  2BB0               	incf	start_routine@n& (0+255),f,b
  3824                           
  3825                           ; BSR set to: 0
  3826                           ;main.c: 503: Lcd_Set_Cursor(2, n);
  3827  000FB4  C0B0  F012         	movff	start_routine@n,Lcd_Set_Cursor@b
  3828  000FB8  0E02               	movlw	2
  3829  000FBA  EC80  F00C         	call	_Lcd_Set_Cursor
  3830                           
  3831                           ;main.c: 504: Lcd_Write_Char(x);
  3832  000FBE  0100               	movlb	0	; () banked
  3833  000FC0  51AF               	movf	start_routine@x& (0+255),w,b
  3834  000FC2  ECA8  F00C         	call	_Lcd_Write_Char
  3835                           
  3836                           ;main.c: 505: Lcd_Write_Char('_');
  3837  000FC6  0E5F               	movlw	95
  3838  000FC8  ECA8  F00C         	call	_Lcd_Write_Char
  3839                           
  3840                           ;main.c: 506: latch_keypad(&x);
  3841  000FCC  0EAF               	movlw	low start_routine@x
  3842  000FCE  6E10               	movwf	latch_keypad@x,c
  3843  000FD0  0E00               	movlw	high start_routine@x
  3844  000FD2  6E11               	movwf	latch_keypad@x+1,c
  3845  000FD4  ECC4  F00C         	call	_latch_keypad	;wreg free
  3846  000FD8                     l3889:
  3847  000FD8  0E02               	movlw	2
  3848  000FDA  0100               	movlb	0	; () banked
  3849  000FDC  65B0               	cpfsgt	start_routine@n& (0+255),b
  3850  000FDE  D77B               	goto	l3847
  3851  000FE0                     l3891:
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;main.c: 507: }
  3855                           ;main.c: 508: }
  3856                           ;main.c: 509: }
  3857                           ;main.c: 511: unsigned char new_I2C_address = 0;
  3858  000FE0  0E00               	movlw	0
  3859  000FE2  0100               	movlb	0	; () banked
  3860  000FE4  6FB1               	movwf	start_routine@new_I2C_address& (0+255),b
  3861                           
  3862                           ;main.c: 512: unsigned char b[3];
  3863                           ;main.c: 513: for (int i = 0; i < 3; i++)
  3864  000FE6  0E00               	movlw	0
  3865  000FE8  0100               	movlb	0	; () banked
  3866  000FEA  6FAD               	movwf	(start_routine@i_896+1)& (0+255),b
  3867  000FEC  0E00               	movlw	0
  3868  000FEE  6FAC               	movwf	start_routine@i_896& (0+255),b
  3869  000FF0                     l3893:
  3870                           
  3871                           ; BSR set to: 0
  3872  000FF0  0100               	movlb	0	; () banked
  3873  000FF2  BFAD               	btfsc	(start_routine@i_896+1)& (0+255),7,b
  3874  000FF4  D008               	goto	l3897
  3875  000FF6  0100               	movlb	0	; () banked
  3876  000FF8  51AD               	movf	(start_routine@i_896+1)& (0+255),w,b
  3877  000FFA  E11C               	bnz	l3903
  3878  000FFC  0E03               	movlw	3
  3879  000FFE  0100               	movlb	0	; () banked
  3880  001000  5DAC               	subwf	start_routine@i_896& (0+255),w,b
  3881  001002  B0D8               	btfsc	status,0,c
  3882  001004  D017               	goto	l3903
  3883  001006                     l3897:
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;main.c: 514: b[i] = I2C_new_ADDR[i] - '0';
  3887  001006  0EA0               	movlw	low start_routine@b
  3888  001008  0100               	movlb	0	; () banked
  3889  00100A  25AC               	addwf	start_routine@i_896& (0+255),w,b
  3890  00100C  6ED9               	movwf	fsr2l,c
  3891  00100E  0E00               	movlw	high start_routine@b
  3892  001010  0100               	movlb	0	; () banked
  3893  001012  21AD               	addwfc	(start_routine@i_896+1)& (0+255),w,b
  3894  001014  6EDA               	movwf	fsr2h,c
  3895  001016  0EA7               	movlw	low start_routine@I2C_new_ADDR
  3896  001018  0100               	movlb	0	; () banked
  3897  00101A  25AC               	addwf	start_routine@i_896& (0+255),w,b
  3898  00101C  6EE1               	movwf	fsr1l,c
  3899  00101E  0E00               	movlw	high start_routine@I2C_new_ADDR
  3900  001020  0100               	movlb	0	; () banked
  3901  001022  21AD               	addwfc	(start_routine@i_896+1)& (0+255),w,b
  3902  001024  6EE2               	movwf	fsr1h,c
  3903  001026  50E7               	movf	indf1,w,c
  3904  001028  0FD0               	addlw	208
  3905  00102A  6EDF               	movwf	indf2,c
  3906                           
  3907                           ; BSR set to: 0
  3908  00102C  0100               	movlb	0	; () banked
  3909  00102E  4BAC               	infsnz	start_routine@i_896& (0+255),f,b
  3910  001030  2BAD               	incf	(start_routine@i_896+1)& (0+255),f,b
  3911  001032  D7DE               	goto	l3893
  3912  001034                     l3903:
  3913                           
  3914                           ; BSR set to: 0
  3915                           ;main.c: 515: new_I2C_address += (100)*(I2C_new_ADDR[0] - '0');
  3916  001034  0100               	movlb	0	; () banked
  3917  001036  51A7               	movf	start_routine@I2C_new_ADDR& (0+255),w,b
  3918  001038  0FD0               	addlw	208
  3919  00103A  0D64               	mullw	100
  3920  00103C  50F3               	movf	prodl,w,c
  3921  00103E  0100               	movlb	0	; () banked
  3922  001040  27B1               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3923                           
  3924                           ;main.c: 516: new_I2C_address += (10)*(I2C_new_ADDR[1] - '0');
  3925  001042  0100               	movlb	0	; () banked
  3926  001044  51A8               	movf	(start_routine@I2C_new_ADDR+1)& (0+255),w,b
  3927  001046  0FD0               	addlw	208
  3928  001048  0D0A               	mullw	10
  3929  00104A  50F3               	movf	prodl,w,c
  3930  00104C  0100               	movlb	0	; () banked
  3931  00104E  27B1               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;main.c: 517: new_I2C_address += (1)*(I2C_new_ADDR[2] - '0');
  3935  001050  0100               	movlb	0	; () banked
  3936  001052  51A9               	movf	(start_routine@I2C_new_ADDR+2)& (0+255),w,b
  3937  001054  0FD0               	addlw	208
  3938  001056  0100               	movlb	0	; () banked
  3939  001058  27B1               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;main.c: 518: Machine_ID = new_I2C_address;
  3943  00105A  C0B1  F0CF         	movff	start_routine@new_I2C_address,_Machine_ID
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;main.c: 519: new_I2C_address += 0x0F;
  3947  00105E  0E0F               	movlw	15
  3948  001060  0100               	movlb	0	; () banked
  3949  001062  27B1               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;main.c: 521: char* error_msg;
  3953                           ;main.c: 522: if ( ((b[0]==0)&&((b[1]!=0)|(b[2]!=0))) | ((b[0]==1)&&(b[1]==0)&&(b[2]==0)
      +                          ) )
  3954  001064  0100               	movlb	0	; () banked
  3955  001066  51A0               	movf	start_routine@b& (0+255),w,b
  3956  001068  0100               	movlb	0	; () banked
  3957  00106A  A4D8               	btfss	status,2,c
  3958  00106C  D008               	goto	l3917
  3959                           
  3960                           ; BSR set to: 0
  3961  00106E  0100               	movlb	0	; () banked
  3962  001070  51A1               	movf	(start_routine@b+1)& (0+255),w,b
  3963  001072  A4D8               	btfss	status,2,c
  3964  001074  D010               	goto	l3923
  3965                           
  3966                           ; BSR set to: 0
  3967  001076  0100               	movlb	0	; () banked
  3968  001078  51A2               	movf	(start_routine@b+2)& (0+255),w,b
  3969  00107A  A4D8               	btfss	status,2,c
  3970  00107C  D00C               	goto	l3923
  3971  00107E                     l3917:
  3972                           
  3973                           ; BSR set to: 0
  3974  00107E  0100               	movlb	0	; () banked
  3975  001080  05A0               	decf	start_routine@b& (0+255),w,b
  3976  001082  A4D8               	btfss	status,2,c
  3977  001084  D112               	goto	l3991
  3978                           
  3979                           ; BSR set to: 0
  3980  001086  0100               	movlb	0	; () banked
  3981  001088  51A1               	movf	(start_routine@b+1)& (0+255),w,b
  3982  00108A  A4D8               	btfss	status,2,c
  3983  00108C  D10E               	goto	l3991
  3984                           
  3985                           ; BSR set to: 0
  3986  00108E  0100               	movlb	0	; () banked
  3987  001090  51A2               	movf	(start_routine@b+2)& (0+255),w,b
  3988  001092  A4D8               	btfss	status,2,c
  3989  001094  D10A               	goto	l3991
  3990  001096                     l3923:
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;main.c: 523: {
  3994                           ;main.c: 525: dh = (new_I2C_address / 100);
  3995  001096  C0B1  F010         	movff	start_routine@new_I2C_address,___awdiv@dividend
  3996  00109A  6A11               	clrf	___awdiv@dividend+1,c
  3997  00109C  0E00               	movlw	0
  3998  00109E  6E13               	movwf	___awdiv@divisor+1,c
  3999  0010A0  0E64               	movlw	100
  4000  0010A2  6E12               	movwf	___awdiv@divisor,c
  4001  0010A4  EC38  F00B         	call	___awdiv	;wreg free
  4002  0010A8  5010               	movf	?___awdiv,w,c
  4003  0010AA  0100               	movlb	0	; () banked
  4004  0010AC  6FAE               	movwf	start_routine@dh& (0+255),b
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;main.c: 526: dt = (new_I2C_address - dh*100) / 10;
  4008  0010AE  0100               	movlb	0	; () banked
  4009  0010B0  51AE               	movf	start_routine@dh& (0+255),w,b
  4010  0010B2  0D64               	mullw	100
  4011  0010B4  1EF3               	comf	prodl,f,c
  4012  0010B6  1EF4               	comf	prodh,f,c
  4013  0010B8  4AF3               	infsnz	prodl,f,c
  4014  0010BA  2AF4               	incf	prodh,f,c
  4015  0010BC  0100               	movlb	0	; () banked
  4016  0010BE  51B1               	movf	start_routine@new_I2C_address& (0+255),w,b
  4017  0010C0  24F3               	addwf	prodl,w,c
  4018  0010C2  6E10               	movwf	___awdiv@dividend,c
  4019  0010C4  0E00               	movlw	0
  4020  0010C6  20F4               	addwfc	prodh,w,c
  4021  0010C8  6E11               	movwf	___awdiv@dividend+1,c
  4022  0010CA  0E00               	movlw	0
  4023  0010CC  6E13               	movwf	___awdiv@divisor+1,c
  4024  0010CE  0E0A               	movlw	10
  4025  0010D0  6E12               	movwf	___awdiv@divisor,c
  4026  0010D2  EC38  F00B         	call	___awdiv	;wreg free
  4027  0010D6  5010               	movf	?___awdiv,w,c
  4028  0010D8  0100               	movlb	0	; () banked
  4029  0010DA  6FAB               	movwf	start_routine@dt& (0+255),b
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;main.c: 527: d1 = (new_I2C_address - (dh*100+dt*10));
  4033  0010DC  0100               	movlb	0	; () banked
  4034  0010DE  51AB               	movf	start_routine@dt& (0+255),w,b
  4035  0010E0  0D0A               	mullw	10
  4036  0010E2  CFF3 F031          	movff	prodl,??_start_routine
  4037  0010E6  0100               	movlb	0	; () banked
  4038  0010E8  51AE               	movf	start_routine@dh& (0+255),w,b
  4039  0010EA  0D64               	mullw	100
  4040  0010EC  50F3               	movf	prodl,w,c
  4041  0010EE  2431               	addwf	??_start_routine,w,c
  4042  0010F0  0800               	sublw	0
  4043  0010F2  0100               	movlb	0	; () banked
  4044  0010F4  25B1               	addwf	start_routine@new_I2C_address& (0+255),w,b
  4045  0010F6  0100               	movlb	0	; () banked
  4046  0010F8  6F92               	movwf	start_routine@d1& (0+255),b
  4047                           
  4048                           ; BSR set to: 0
  4049                           ;main.c: 529: h = new_I2C_address/16;
  4050  0010FA  C0B1  F010         	movff	start_routine@new_I2C_address,___awdiv@dividend
  4051  0010FE  6A11               	clrf	___awdiv@dividend+1,c
  4052  001100  0E00               	movlw	0
  4053  001102  6E13               	movwf	___awdiv@divisor+1,c
  4054  001104  0E10               	movlw	16
  4055  001106  6E12               	movwf	___awdiv@divisor,c
  4056  001108  EC38  F00B         	call	___awdiv	;wreg free
  4057  00110C  5010               	movf	?___awdiv,w,c
  4058  00110E  0100               	movlb	0	; () banked
  4059  001110  6F8E               	movwf	start_routine@h& (0+255),b
  4060                           
  4061                           ; BSR set to: 0
  4062                           ;main.c: 530: l = new_I2C_address - (new_I2C_address/16)*16;
  4063  001112  C0B1  F010         	movff	start_routine@new_I2C_address,___awdiv@dividend
  4064  001116  6A11               	clrf	___awdiv@dividend+1,c
  4065  001118  0E00               	movlw	0
  4066  00111A  6E13               	movwf	___awdiv@divisor+1,c
  4067  00111C  0E10               	movlw	16
  4068  00111E  6E12               	movwf	___awdiv@divisor,c
  4069  001120  EC38  F00B         	call	___awdiv	;wreg free
  4070  001124  3810               	swapf	?___awdiv,w,c
  4071  001126  0BF0               	andlw	240
  4072  001128  0800               	sublw	0
  4073  00112A  0100               	movlb	0	; () banked
  4074  00112C  25B1               	addwf	start_routine@new_I2C_address& (0+255),w,b
  4075  00112E  0100               	movlb	0	; () banked
  4076  001130  6F8F               	movwf	start_routine@l& (0+255),b
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;main.c: 531: Lcd_Clear();
  4080  001132  EC4A  F00D         	call	_Lcd_Clear	;wreg free
  4081                           
  4082                           ;main.c: 532: Lcd_Set_Cursor(1,1);
  4083  001136  0E01               	movlw	1
  4084  001138  6E12               	movwf	Lcd_Set_Cursor@b,c
  4085  00113A  0E01               	movlw	1
  4086  00113C  EC80  F00C         	call	_Lcd_Set_Cursor
  4087                           
  4088                           ;main.c: 533: Lcd_Write_String("New Machine ID: ");
  4089  001140  0E4B               	movlw	low STR_21
  4090  001142  6E14               	movwf	Lcd_Write_String@a,c
  4091  001144  0E7F               	movlw	high STR_21
  4092  001146  6E15               	movwf	Lcd_Write_String@a+1,c
  4093  001148  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  4094                           
  4095                           ;main.c: 534: Lcd_Set_Cursor(2,1);
  4096  00114C  0E01               	movlw	1
  4097  00114E  6E12               	movwf	Lcd_Set_Cursor@b,c
  4098  001150  0E02               	movlw	2
  4099  001152  EC80  F00C         	call	_Lcd_Set_Cursor
  4100                           
  4101                           ;main.c: 535: for (int i = 0; i < 3; i++)
  4102  001156  0E00               	movlw	0
  4103  001158  0100               	movlb	0	; () banked
  4104  00115A  6FA4               	movwf	(start_routine@i_899+1)& (0+255),b
  4105  00115C  0E00               	movlw	0
  4106  00115E  6FA3               	movwf	start_routine@i_899& (0+255),b
  4107  001160                     l3943:
  4108                           
  4109                           ; BSR set to: 0
  4110  001160  0100               	movlb	0	; () banked
  4111  001162  BFA4               	btfsc	(start_routine@i_899+1)& (0+255),7,b
  4112  001164  D008               	goto	l3947
  4113  001166  0100               	movlb	0	; () banked
  4114  001168  51A4               	movf	(start_routine@i_899+1)& (0+255),w,b
  4115  00116A  E114               	bnz	l3953
  4116  00116C  0E03               	movlw	3
  4117  00116E  0100               	movlb	0	; () banked
  4118  001170  5DA3               	subwf	start_routine@i_899& (0+255),w,b
  4119  001172  B0D8               	btfsc	status,0,c
  4120  001174  D00F               	goto	l3953
  4121  001176                     l3947:
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;main.c: 536: Lcd_Write_Char(I2C_new_ADDR[i]);
  4125  001176  0EA7               	movlw	low start_routine@I2C_new_ADDR
  4126  001178  0100               	movlb	0	; () banked
  4127  00117A  25A3               	addwf	start_routine@i_899& (0+255),w,b
  4128  00117C  6ED9               	movwf	fsr2l,c
  4129  00117E  0E00               	movlw	high start_routine@I2C_new_ADDR
  4130  001180  0100               	movlb	0	; () banked
  4131  001182  21A4               	addwfc	(start_routine@i_899+1)& (0+255),w,b
  4132  001184  6EDA               	movwf	fsr2h,c
  4133  001186  50DF               	movf	indf2,w,c
  4134  001188  ECA8  F00C         	call	_Lcd_Write_Char
  4135  00118C  0100               	movlb	0	; () banked
  4136  00118E  4BA3               	infsnz	start_routine@i_899& (0+255),f,b
  4137  001190  2BA4               	incf	(start_routine@i_899+1)& (0+255),f,b
  4138  001192  D7E6               	goto	l3943
  4139  001194                     l3953:
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;main.c: 537: Lcd_Set_Cursor(2, 7);
  4143  001194  0E07               	movlw	7
  4144  001196  6E12               	movwf	Lcd_Set_Cursor@b,c
  4145  001198  0E02               	movlw	2
  4146  00119A  EC80  F00C         	call	_Lcd_Set_Cursor
  4147                           
  4148                           ;main.c: 538: Lcd_Write_String("[OK]");
  4149  00119E  0EF8               	movlw	low STR_24
  4150  0011A0  6E14               	movwf	Lcd_Write_String@a,c
  4151  0011A2  0E7F               	movlw	high STR_24
  4152  0011A4  6E15               	movwf	Lcd_Write_String@a+1,c
  4153  0011A6  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  4154                           
  4155                           ;main.c: 539: Lcd_Set_Cursor(2,14);
  4156  0011AA  0E0E               	movlw	14
  4157  0011AC  6E12               	movwf	Lcd_Set_Cursor@b,c
  4158  0011AE  0E02               	movlw	2
  4159  0011B0  EC80  F00C         	call	_Lcd_Set_Cursor
  4160                           
  4161                           ;main.c: 540: Lcd_Write_String("x");
  4162  0011B4  0EFD               	movlw	low STR_25
  4163  0011B6  6E14               	movwf	Lcd_Write_String@a,c
  4164  0011B8  0E7F               	movlw	high STR_25
  4165  0011BA  6E15               	movwf	Lcd_Write_String@a+1,c
  4166  0011BC  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  4167                           
  4168                           ;main.c: 541: Lcd_Write_Char(hx[h]);
  4169  0011C0  0100               	movlb	0	; () banked
  4170  0011C2  518E               	movf	start_routine@h& (0+255),w,b
  4171  0011C4  0D01               	mullw	1
  4172  0011C6  0E53               	movlw	low _hx
  4173  0011C8  24F3               	addwf	prodl,w,c
  4174  0011CA  6ED9               	movwf	fsr2l,c
  4175  0011CC  0E01               	movlw	high _hx
  4176  0011CE  20F4               	addwfc	prodh,w,c
  4177  0011D0  6EDA               	movwf	fsr2h,c
  4178  0011D2  50DF               	movf	indf2,w,c
  4179  0011D4  ECA8  F00C         	call	_Lcd_Write_Char
  4180                           
  4181                           ;main.c: 542: Lcd_Write_Char(hx[l]);
  4182  0011D8  0100               	movlb	0	; () banked
  4183  0011DA  518F               	movf	start_routine@l& (0+255),w,b
  4184  0011DC  0D01               	mullw	1
  4185  0011DE  0E53               	movlw	low _hx
  4186  0011E0  24F3               	addwf	prodl,w,c
  4187  0011E2  6ED9               	movwf	fsr2l,c
  4188  0011E4  0E01               	movlw	high _hx
  4189  0011E6  20F4               	addwfc	prodh,w,c
  4190  0011E8  6EDA               	movwf	fsr2h,c
  4191  0011EA  50DF               	movf	indf2,w,c
  4192  0011EC  ECA8  F00C         	call	_Lcd_Write_Char
  4193                           
  4194                           ;main.c: 543: for (int i = 0; i < 50; i++)
  4195  0011F0  0E00               	movlw	0
  4196  0011F2  0100               	movlb	0	; () banked
  4197  0011F4  6F9B               	movwf	(start_routine@i_902+1)& (0+255),b
  4198  0011F6  0E00               	movlw	0
  4199  0011F8  6F9A               	movwf	start_routine@i_902& (0+255),b
  4200                           
  4201                           ; BSR set to: 0
  4202  0011FA  0100               	movlb	0	; () banked
  4203  0011FC  BF9B               	btfsc	(start_routine@i_902+1)& (0+255),7,b
  4204  0011FE  D008               	goto	l3969
  4205  001200  0100               	movlb	0	; () banked
  4206  001202  519B               	movf	(start_routine@i_902+1)& (0+255),w,b
  4207  001204  E118               	bnz	l337
  4208  001206  0E32               	movlw	50
  4209  001208  0100               	movlb	0	; () banked
  4210  00120A  5D9A               	subwf	start_routine@i_902& (0+255),w,b
  4211  00120C  B0D8               	btfsc	status,0,c
  4212  00120E  D013               	goto	l337
  4213  001210                     l3969:
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;main.c: 544: _delay((unsigned long)((20)*(16000000/4000.0)));
  4217  001210  0E68               	movlw	104
  4218  001212  6E31               	movwf	??_start_routine& (0+255),c
  4219  001214  0EE4               	movlw	228
  4220  001216                     u4427:
  4221  001216  2EE8               	decfsz	wreg,f,c
  4222  001218  D7FE               	goto	u4427
  4223  00121A  2E31               	decfsz	??_start_routine& (0+255),f,c
  4224  00121C  D7FC               	goto	u4427
  4225  00121E  F000 F000          	nop2	
  4226  001222  0100               	movlb	0	; () banked
  4227  001224  4B9A               	infsnz	start_routine@i_902& (0+255),f,b
  4228  001226  2B9B               	incf	(start_routine@i_902+1)& (0+255),f,b
  4229  001228  0100               	movlb	0	; () banked
  4230  00122A  BF9B               	btfsc	(start_routine@i_902+1)& (0+255),7,b
  4231  00122C  D7F1               	goto	l3969
  4232  00122E  0100               	movlb	0	; () banked
  4233  001230  519B               	movf	(start_routine@i_902+1)& (0+255),w,b
  4234  001232  E101               	bnz	u3640
  4235  001234  D7E8               	goto	L5
  4236  001236                     u3640:
  4237  001236                     l337:
  4238                           
  4239                           ; BSR set to: 0
  4240                           ;main.c: 545: I2C_ADDR = new_I2C_address;
  4241  001236  C0B1  F0CE         	movff	start_routine@new_I2C_address,_I2C_ADDR
  4242                           
  4243                           ; BSR set to: 0
  4244                           ;main.c: 546: Eeprom_Write_Byte(EEP_I2C_ADDR, I2C_ADDR);
  4245  00123A  C0CE  F010         	movff	_I2C_ADDR,Eeprom_Write_Byte@data
  4246  00123E  0100               	movlb	0	; () banked
  4247  001240  51CC               	movf	_EEP_I2C_ADDR& (0+255),w,b
  4248  001242  EC38  F00D         	call	_Eeprom_Write_Byte
  4249                           
  4250                           ;main.c: 547: Lcd_Clear();
  4251  001246  EC4A  F00D         	call	_Lcd_Clear	;wreg free
  4252                           
  4253                           ;main.c: 548: Lcd_Set_Cursor(1,1);
  4254  00124A  0E01               	movlw	1
  4255  00124C  6E12               	movwf	Lcd_Set_Cursor@b,c
  4256  00124E  0E01               	movlw	1
  4257  001250  EC80  F00C         	call	_Lcd_Set_Cursor
  4258                           
  4259                           ;main.c: 549: Lcd_Write_String("I2C_ADDR>>EEPROM");
  4260  001254  0E8F               	movlw	low STR_26
  4261  001256  6E14               	movwf	Lcd_Write_String@a,c
  4262  001258  0E7F               	movlw	high STR_26
  4263  00125A  6E15               	movwf	Lcd_Write_String@a+1,c
  4264  00125C  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  4265                           
  4266                           ;main.c: 556: for (int i = 0; i < 10; i++)
  4267  001260  0E00               	movlw	0
  4268  001262  0100               	movlb	0	; () banked
  4269  001264  6F9D               	movwf	(start_routine@i_905+1)& (0+255),b
  4270  001266  0E00               	movlw	0
  4271  001268  6F9C               	movwf	start_routine@i_905& (0+255),b
  4272  00126A                     l3981:
  4273                           
  4274                           ; BSR set to: 0
  4275  00126A  0100               	movlb	0	; () banked
  4276  00126C  BF9D               	btfsc	(start_routine@i_905+1)& (0+255),7,b
  4277  00126E  D008               	goto	l3985
  4278  001270  0100               	movlb	0	; () banked
  4279  001272  519D               	movf	(start_routine@i_905+1)& (0+255),w,b
  4280  001274  E112               	bnz	l3989
  4281  001276  0E0A               	movlw	10
  4282  001278  0100               	movlb	0	; () banked
  4283  00127A  5D9C               	subwf	start_routine@i_905& (0+255),w,b
  4284  00127C  B0D8               	btfsc	status,0,c
  4285  00127E  D00D               	goto	l3989
  4286  001280                     l3985:
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;main.c: 557: _delay((unsigned long)((20)*(16000000/4000.0)));
  4290  001280  0E68               	movlw	104
  4291  001282  6E31               	movwf	??_start_routine& (0+255),c
  4292  001284  0EE4               	movlw	228
  4293  001286                     u4437:
  4294  001286  2EE8               	decfsz	wreg,f,c
  4295  001288  D7FE               	goto	u4437
  4296  00128A  2E31               	decfsz	??_start_routine& (0+255),f,c
  4297  00128C  D7FC               	goto	u4437
  4298  00128E  F000 F000          	nop2	
  4299  001292  0100               	movlb	0	; () banked
  4300  001294  4B9C               	infsnz	start_routine@i_905& (0+255),f,b
  4301  001296  2B9D               	incf	(start_routine@i_905+1)& (0+255),f,b
  4302  001298  D7E8               	goto	l3981
  4303  00129A                     l3989:
  4304                           
  4305                           ; BSR set to: 0
  4306                           ;main.c: 558: menu_progress_bar(500);
  4307  00129A  0E01               	movlw	1
  4308  00129C  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  4309  00129E  0EF4               	movlw	244
  4310  0012A0  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  4311  0012A2  ECBA  F009         	call	_menu_progress_bar	;wreg free
  4312  0012A6  00FF               	reset		;# 
  4313                           
  4314                           ;main.c: 560: }
  4315  0012A8  D05C               	goto	l4025
  4316  0012AA                     l3991:
  4317                           
  4318                           ;main.c: 561: else
  4319                           ;main.c: 562: {
  4320                           ;main.c: 563: if (new_I2C_address == 0)
  4321  0012AA  0100               	movlb	0	; () banked
  4322  0012AC  51B1               	movf	start_routine@new_I2C_address& (0+255),w,b
  4323  0012AE  0100               	movlb	0	; () banked
  4324  0012B0  A4D8               	btfss	status,2,c
  4325  0012B2  D005               	goto	l3995
  4326                           
  4327                           ; BSR set to: 0
  4328                           ;main.c: 564: error_msg = "May not be zero!";
  4329  0012B4  0E6D               	movlw	low STR_27
  4330  0012B6  0100               	movlb	0	; () banked
  4331  0012B8  6F90               	movwf	start_routine@error_msg& (0+255),b
  4332  0012BA  0E7F               	movlw	high STR_27
  4333  0012BC  D004               	goto	L6
  4334  0012BE                     l3995:
  4335                           
  4336                           ; BSR set to: 0
  4337                           ;main.c: 565: else
  4338                           ;main.c: 566: error_msg = "Out of bounds!  ";
  4339  0012BE  0E18               	movlw	low STR_28
  4340  0012C0  0100               	movlb	0	; () banked
  4341  0012C2  6F90               	movwf	start_routine@error_msg& (0+255),b
  4342  0012C4  0E7F               	movlw	high STR_28
  4343  0012C6                     L6:
  4344  0012C6  0100               	movlb	0	; () banked
  4345  0012C8  6F91               	movwf	(start_routine@error_msg+1)& (0+255),b
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;main.c: 567: Lcd_Set_Cursor(2,1);
  4349                           
  4350                           ; BSR set to: 0
  4351  0012CA  0E01               	movlw	1
  4352  0012CC  6E12               	movwf	Lcd_Set_Cursor@b,c
  4353  0012CE  0E02               	movlw	2
  4354  0012D0  EC80  F00C         	call	_Lcd_Set_Cursor
  4355                           
  4356                           ;main.c: 568: Lcd_Write_String(error_msg);
  4357  0012D4  C090  F014         	movff	start_routine@error_msg,Lcd_Write_String@a
  4358  0012D8  C091  F015         	movff	start_routine@error_msg+1,Lcd_Write_String@a+1
  4359  0012DC  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  4360                           
  4361                           ;main.c: 569: for (int i = 0; i < 50; i++)
  4362  0012E0  0E00               	movlw	0
  4363  0012E2  0100               	movlb	0	; () banked
  4364  0012E4  6F9F               	movwf	(start_routine@i_908+1)& (0+255),b
  4365  0012E6  0E00               	movlw	0
  4366  0012E8  6F9E               	movwf	start_routine@i_908& (0+255),b
  4367  0012EA                     l4003:
  4368                           
  4369                           ; BSR set to: 0
  4370  0012EA  0100               	movlb	0	; () banked
  4371  0012EC  BF9F               	btfsc	(start_routine@i_908+1)& (0+255),7,b
  4372  0012EE  D008               	goto	l4007
  4373  0012F0  0100               	movlb	0	; () banked
  4374  0012F2  519F               	movf	(start_routine@i_908+1)& (0+255),w,b
  4375  0012F4  E112               	bnz	l4011
  4376  0012F6  0E32               	movlw	50
  4377  0012F8  0100               	movlb	0	; () banked
  4378  0012FA  5D9E               	subwf	start_routine@i_908& (0+255),w,b
  4379  0012FC  B0D8               	btfsc	status,0,c
  4380  0012FE  D00D               	goto	l4011
  4381  001300                     l4007:
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;main.c: 570: _delay((unsigned long)((20)*(16000000/4000.0)));
  4385  001300  0E68               	movlw	104
  4386  001302  6E31               	movwf	??_start_routine& (0+255),c
  4387  001304  0EE4               	movlw	228
  4388  001306                     u4447:
  4389  001306  2EE8               	decfsz	wreg,f,c
  4390  001308  D7FE               	goto	u4447
  4391  00130A  2E31               	decfsz	??_start_routine& (0+255),f,c
  4392  00130C  D7FC               	goto	u4447
  4393  00130E  F000 F000          	nop2	
  4394  001312  0100               	movlb	0	; () banked
  4395  001314  4B9E               	infsnz	start_routine@i_908& (0+255),f,b
  4396  001316  2B9F               	incf	(start_routine@i_908+1)& (0+255),f,b
  4397  001318  D7E8               	goto	l4003
  4398  00131A                     l4011:
  4399                           
  4400                           ; BSR set to: 0
  4401                           ;main.c: 571: for (int i = 0; i < 3; i++)
  4402  00131A  0E00               	movlw	0
  4403  00131C  0100               	movlb	0	; () banked
  4404  00131E  6FA6               	movwf	(start_routine@i_909+1)& (0+255),b
  4405  001320  0E00               	movlw	0
  4406  001322  6FA5               	movwf	start_routine@i_909& (0+255),b
  4407  001324                     l4013:
  4408                           
  4409                           ; BSR set to: 0
  4410  001324  0100               	movlb	0	; () banked
  4411  001326  BFA6               	btfsc	(start_routine@i_909+1)& (0+255),7,b
  4412  001328  D008               	goto	l4017
  4413  00132A  0100               	movlb	0	; () banked
  4414  00132C  51A6               	movf	(start_routine@i_909+1)& (0+255),w,b
  4415  00132E  E113               	bnz	l4023
  4416  001330  0E03               	movlw	3
  4417  001332  0100               	movlb	0	; () banked
  4418  001334  5DA5               	subwf	start_routine@i_909& (0+255),w,b
  4419  001336  B0D8               	btfsc	status,0,c
  4420  001338  D00E               	goto	l4023
  4421  00133A                     l4017:
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;main.c: 572: I2C_new_ADDR[i] = '0';
  4425  00133A  0EA7               	movlw	low start_routine@I2C_new_ADDR
  4426  00133C  0100               	movlb	0	; () banked
  4427  00133E  25A5               	addwf	start_routine@i_909& (0+255),w,b
  4428  001340  6ED9               	movwf	fsr2l,c
  4429  001342  0E00               	movlw	high start_routine@I2C_new_ADDR
  4430  001344  0100               	movlb	0	; () banked
  4431  001346  21A6               	addwfc	(start_routine@i_909+1)& (0+255),w,b
  4432  001348  6EDA               	movwf	fsr2h,c
  4433  00134A  0E30               	movlw	48
  4434  00134C  6EDF               	movwf	indf2,c
  4435                           
  4436                           ; BSR set to: 0
  4437  00134E  0100               	movlb	0	; () banked
  4438  001350  4BA5               	infsnz	start_routine@i_909& (0+255),f,b
  4439  001352  2BA6               	incf	(start_routine@i_909+1)& (0+255),f,b
  4440  001354  D7E7               	goto	l4013
  4441  001356                     l4023:
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;main.c: 573: v = 0;
  4445  001356  0E00               	movlw	0
  4446  001358  0100               	movlb	0	; () banked
  4447  00135A  6F93               	movwf	start_routine@v& (0+255),b
  4448                           
  4449                           ;main.c: 574: n = 0;
  4450  00135C  0E00               	movlw	0
  4451  00135E  0100               	movlb	0	; () banked
  4452  001360  6FB0               	movwf	start_routine@n& (0+255),b
  4453  001362                     l4025:
  4454  001362  0100               	movlb	0	; () banked
  4455  001364  0593               	decf	start_routine@v& (0+255),w,b
  4456  001366  B4D8               	btfsc	status,2,c
  4457  001368  0012               	return	
  4458  00136A  D596               	goto	l3837
  4459  00136C                     l4027:
  4460                           
  4461                           ; BSR set to: 0
  4462                           ;main.c: 578: else
  4463                           ;main.c: 579: {
  4464                           ;main.c: 580: v = 1;
  4465  00136C  0E01               	movlw	1
  4466  00136E  0100               	movlb	0	; () banked
  4467  001370  6F93               	movwf	start_routine@v& (0+255),b
  4468  001372  0012               	return	
  4469  001374                     __end_of_start_routine:
  4470                           	opt stack 0
  4471                           tblptru	equ	0xFF8
  4472                           tblptrh	equ	0xFF7
  4473                           tblptrl	equ	0xFF6
  4474                           tablat	equ	0xFF5
  4475                           prodh	equ	0xFF4
  4476                           prodl	equ	0xFF3
  4477                           intcon	equ	0xFF2
  4478                           postinc0	equ	0xFEE
  4479                           wreg	equ	0xFE8
  4480                           indf1	equ	0xFE7
  4481                           postdec1	equ	0xFE5
  4482                           plusw1	equ	0xFE3
  4483                           fsr1h	equ	0xFE2
  4484                           fsr1l	equ	0xFE1
  4485                           indf2	equ	0xFDF
  4486                           postinc2	equ	0xFDE
  4487                           plusw2	equ	0xFDB
  4488                           fsr2h	equ	0xFDA
  4489                           fsr2l	equ	0xFD9
  4490                           status	equ	0xFD8
  4491                           
  4492 ;; *************** function _menu_progress_bar *****************
  4493 ;; Defined at:
  4494 ;;		line 85 in file "menu.h"
  4495 ;; Parameters:    Size  Location     Type
  4496 ;;  load_time_ms    2   28[COMRAM] unsigned short 
  4497 ;; Auto vars:     Size  Location     Type
  4498 ;;  ii              2   38[COMRAM] int 
  4499 ;;  i               2   46[COMRAM] int 
  4500 ;;  i               2   44[COMRAM] int 
  4501 ;;  i               2   42[COMRAM] int 
  4502 ;;  i               2   40[COMRAM] int 
  4503 ;;  d               4   34[COMRAM] unsigned long 
  4504 ;; Return value:  Size  Location     Type
  4505 ;;                  1    wreg      void 
  4506 ;; Registers used:
  4507 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4508 ;; Tracked objects:
  4509 ;;		On entry : 0/0
  4510 ;;		On exit  : 0/0
  4511 ;;		Unchanged: 0/0
  4512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4513 ;;      Params:         2       0       0       0       0       0       0
  4514 ;;      Locals:        14       0       0       0       0       0       0
  4515 ;;      Temps:          4       0       0       0       0       0       0
  4516 ;;      Totals:        20       0       0       0       0       0       0
  4517 ;;Total ram usage:       20 bytes
  4518 ;; Hardware stack levels used:    1
  4519 ;; Hardware stack levels required when called:    4
  4520 ;; This function calls:
  4521 ;;		_Lcd_Clear
  4522 ;;		_Lcd_Set_Cursor
  4523 ;;		_Lcd_Write_Char
  4524 ;;		_Lcd_Write_String
  4525 ;;		___lwdiv
  4526 ;;		___wmul
  4527 ;; This function is called by:
  4528 ;;		_main
  4529 ;;		_start_routine
  4530 ;; This function uses a non-reentrant model
  4531 ;;
  4532                           
  4533                           	psect	text2
  4534  001374                     __ptext2:
  4535                           	opt stack 0
  4536  001374                     _menu_progress_bar:
  4537                           	opt stack 25
  4538                           
  4539                           ;menu.h: 87: Lcd_Set_Cursor(2,1);
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;incstack = 0
  4543  001374  0E01               	movlw	1
  4544  001376  6E12               	movwf	Lcd_Set_Cursor@b,c
  4545  001378  0E02               	movlw	2
  4546  00137A  EC80  F00C         	call	_Lcd_Set_Cursor
  4547                           
  4548                           ;menu.h: 88: unsigned long d = (((load_time_ms/16)/20)*20);
  4549  00137E  0E00               	movlw	0
  4550  001380  6E13               	movwf	___lwdiv@divisor+1,c
  4551  001382  0E14               	movlw	20
  4552  001384  6E12               	movwf	___lwdiv@divisor,c
  4553  001386  C01D  F01F         	movff	menu_progress_bar@load_time_ms,??_menu_progress_bar
  4554  00138A  C01E  F020         	movff	menu_progress_bar@load_time_ms+1,??_menu_progress_bar+1
  4555  00138E  0E04               	movlw	4
  4556  001390  6E21               	movwf	(??_menu_progress_bar+2)& (0+255),c
  4557  001392                     u3195:
  4558  001392  90D8               	bcf	status,0,c
  4559  001394  3220               	rrcf	??_menu_progress_bar+1,f,c
  4560  001396  321F               	rrcf	??_menu_progress_bar,f,c
  4561  001398  2E21               	decfsz	(??_menu_progress_bar+2)& (0+255),f,c
  4562  00139A  D7FB               	goto	u3195
  4563  00139C  C01F  F010         	movff	??_menu_progress_bar,___lwdiv@dividend
  4564  0013A0  C020  F011         	movff	??_menu_progress_bar+1,___lwdiv@dividend+1
  4565  0013A4  EC2E  F00C         	call	___lwdiv	;wreg free
  4566  0013A8  C010  F017         	movff	?___lwdiv,___wmul@multiplier
  4567  0013AC  C011  F018         	movff	?___lwdiv+1,___wmul@multiplier+1
  4568  0013B0  0E00               	movlw	0
  4569  0013B2  6E1A               	movwf	___wmul@multiplicand+1,c
  4570  0013B4  0E14               	movlw	20
  4571  0013B6  6E19               	movwf	___wmul@multiplicand,c
  4572  0013B8  EC25  F00D         	call	___wmul	;wreg free
  4573  0013BC  C017  F023         	movff	?___wmul,menu_progress_bar@d
  4574  0013C0  C018  F024         	movff	?___wmul+1,menu_progress_bar@d+1
  4575  0013C4  6A25               	clrf	menu_progress_bar@d+2,c
  4576  0013C6  6A26               	clrf	menu_progress_bar@d+3,c
  4577                           
  4578                           ;menu.h: 89: for (int i = 0; i < 16; i++)
  4579  0013C8  0E00               	movlw	0
  4580  0013CA  6E2A               	movwf	menu_progress_bar@i+1,c
  4581  0013CC  0E00               	movlw	0
  4582  0013CE  6E29               	movwf	menu_progress_bar@i,c
  4583  0013D0                     l3547:
  4584  0013D0  BE2A               	btfsc	menu_progress_bar@i+1,7,c
  4585  0013D2  D006               	goto	l3551
  4586  0013D4  502A               	movf	menu_progress_bar@i+1,w,c
  4587  0013D6  E12F               	bnz	l3565
  4588  0013D8  0E10               	movlw	16
  4589  0013DA  5C29               	subwf	menu_progress_bar@i,w,c
  4590  0013DC  B0D8               	btfsc	status,0,c
  4591  0013DE  D02B               	goto	l3565
  4592  0013E0                     l3551:
  4593                           
  4594                           ;menu.h: 90: {
  4595                           ;menu.h: 91: Lcd_Write_Char(0xFF);
  4596  0013E0  0EFF               	movlw	255
  4597  0013E2  ECA8  F00C         	call	_Lcd_Write_Char
  4598                           
  4599                           ;menu.h: 92: for (int ii = 0; ii < d; ii+=20)
  4600  0013E6  0E00               	movlw	0
  4601  0013E8  6E28               	movwf	menu_progress_bar@ii+1,c
  4602  0013EA  0E00               	movlw	0
  4603  0013EC  6E27               	movwf	menu_progress_bar@ii,c
  4604  0013EE  D00D               	goto	l3559
  4605  0013F0                     l3555:
  4606                           
  4607                           ;menu.h: 93: _delay((unsigned long)((20)*(16000000/4000.0)));
  4608  0013F0  0E68               	movlw	104
  4609  0013F2  6E1F               	movwf	??_menu_progress_bar& (0+255),c
  4610  0013F4  0EE4               	movlw	228
  4611  0013F6                     u4457:
  4612  0013F6  2EE8               	decfsz	wreg,f,c
  4613  0013F8  D7FE               	goto	u4457
  4614  0013FA  2E1F               	decfsz	??_menu_progress_bar& (0+255),f,c
  4615  0013FC  D7FC               	goto	u4457
  4616  0013FE  F000 F000          	nop2	
  4617  001402  0E14               	movlw	20
  4618  001404  2627               	addwf	menu_progress_bar@ii,f,c
  4619  001406  0E00               	movlw	0
  4620  001408  2228               	addwfc	menu_progress_bar@ii+1,f,c
  4621  00140A                     l3559:
  4622  00140A  C027  F01F         	movff	menu_progress_bar@ii,??_menu_progress_bar
  4623  00140E  C028  F020         	movff	menu_progress_bar@ii+1,??_menu_progress_bar+1
  4624  001412  0E00               	movlw	0
  4625  001414  BE20               	btfsc	(??_menu_progress_bar+1)& (0+255),7,c
  4626  001416  0EFF               	movlw	255
  4627  001418  6E21               	movwf	(??_menu_progress_bar+2)& (0+255),c
  4628  00141A  6E22               	movwf	(??_menu_progress_bar+3)& (0+255),c
  4629  00141C  5023               	movf	menu_progress_bar@d,w,c
  4630  00141E  5C1F               	subwf	??_menu_progress_bar,w,c
  4631  001420  5024               	movf	menu_progress_bar@d+1,w,c
  4632  001422  5820               	subwfb	??_menu_progress_bar+1,w,c
  4633  001424  5025               	movf	menu_progress_bar@d+2,w,c
  4634  001426  5821               	subwfb	??_menu_progress_bar+2,w,c
  4635  001428  5026               	movf	menu_progress_bar@d+3,w,c
  4636  00142A  5822               	subwfb	??_menu_progress_bar+3,w,c
  4637  00142C  A0D8               	btfss	status,0,c
  4638  00142E  D7E0               	goto	l3555
  4639  001430  4A29               	infsnz	menu_progress_bar@i,f,c
  4640  001432  2A2A               	incf	menu_progress_bar@i+1,f,c
  4641  001434  D7CD               	goto	l3547
  4642  001436                     l3565:
  4643                           
  4644                           ;menu.h: 94: }
  4645                           ;menu.h: 95: Lcd_Set_Cursor(2,1);
  4646  001436  0E01               	movlw	1
  4647  001438  6E12               	movwf	Lcd_Set_Cursor@b,c
  4648  00143A  0E02               	movlw	2
  4649  00143C  EC80  F00C         	call	_Lcd_Set_Cursor
  4650                           
  4651                           ;menu.h: 96: Lcd_Write_String("                ");
  4652  001440  0EC3               	movlw	low STR_2
  4653  001442  6E14               	movwf	Lcd_Write_String@a,c
  4654  001444  0E7E               	movlw	high STR_2
  4655  001446  6E15               	movwf	Lcd_Write_String@a+1,c
  4656  001448  ECF5  F00B         	call	_Lcd_Write_String	;wreg free
  4657                           
  4658                           ;menu.h: 97: for (int i = 0; i < 5; i++)
  4659  00144C  0E00               	movlw	0
  4660  00144E  6E2C               	movwf	menu_progress_bar@i_722+1,c
  4661  001450  0E00               	movlw	0
  4662  001452  6E2B               	movwf	menu_progress_bar@i_722,c
  4663  001454                     l3571:
  4664  001454  BE2C               	btfsc	menu_progress_bar@i_722+1,7,c
  4665  001456  D006               	goto	l3575
  4666  001458  502C               	movf	menu_progress_bar@i_722+1,w,c
  4667  00145A  E110               	bnz	l3579
  4668  00145C  0E05               	movlw	5
  4669  00145E  5C2B               	subwf	menu_progress_bar@i_722,w,c
  4670  001460  B0D8               	btfsc	status,0,c
  4671  001462  D00C               	goto	l3579
  4672  001464                     l3575:
  4673                           
  4674                           ;menu.h: 98: {
  4675                           ;menu.h: 99: _delay((unsigned long)((20)*(16000000/4000.0)));
  4676  001464  0E68               	movlw	104
  4677  001466  6E1F               	movwf	??_menu_progress_bar& (0+255),c
  4678  001468  0EE4               	movlw	228
  4679  00146A                     u4467:
  4680  00146A  2EE8               	decfsz	wreg,f,c
  4681  00146C  D7FE               	goto	u4467
  4682  00146E  2E1F               	decfsz	??_menu_progress_bar& (0+255),f,c
  4683  001470  D7FC               	goto	u4467
  4684  001472  F000 F000          	nop2	
  4685  001476  4A2B               	infsnz	menu_progress_bar@i_722,f,c
  4686  001478  2A2C               	incf	menu_progress_bar@i_722+1,f,c
  4687  00147A  D7EC               	goto	l3571
  4688  00147C                     l3579:
  4689                           
  4690                           ;menu.h: 100: }
  4691                           ;menu.h: 101: Lcd_Set_Cursor(2,1);
  4692  00147C  0E01               	movlw	1
  4693  00147E  6E12               	movwf	Lcd_Set_Cursor@b,c
  4694  001480  0E02               	movlw	2
  4695  001482  EC80  F00C         	call	_Lcd_Set_Cursor
  4696                           
  4697                           ;menu.h: 102: for (int i = 0; i < 16; i++)
  4698  001486  0E00               	movlw	0
  4699  001488  6E2E               	movwf	menu_progress_bar@i_723+1,c
  4700  00148A  0E00               	movlw	0
  4701  00148C  6E2D               	movwf	menu_progress_bar@i_723,c
  4702  00148E                     l3583:
  4703  00148E  BE2E               	btfsc	menu_progress_bar@i_723+1,7,c
  4704  001490  D006               	goto	l3587
  4705  001492  502E               	movf	menu_progress_bar@i_723+1,w,c
  4706  001494  E10A               	bnz	l3593
  4707  001496  0E10               	movlw	16
  4708  001498  5C2D               	subwf	menu_progress_bar@i_723,w,c
  4709  00149A  B0D8               	btfsc	status,0,c
  4710  00149C  D006               	goto	l3593
  4711  00149E                     l3587:
  4712                           
  4713                           ;menu.h: 103: {
  4714                           ;menu.h: 104: Lcd_Write_Char(0xFF);
  4715  00149E  0EFF               	movlw	255
  4716  0014A0  ECA8  F00C         	call	_Lcd_Write_Char
  4717  0014A4  4A2D               	infsnz	menu_progress_bar@i_723,f,c
  4718  0014A6  2A2E               	incf	menu_progress_bar@i_723+1,f,c
  4719  0014A8  D7F2               	goto	l3583
  4720  0014AA                     l3593:
  4721                           
  4722                           ;menu.h: 105: }
  4723                           ;menu.h: 106: for (int i = 0; i < 5; i++)
  4724  0014AA  0E00               	movlw	0
  4725  0014AC  6E30               	movwf	menu_progress_bar@i_724+1,c
  4726  0014AE  0E00               	movlw	0
  4727  0014B0  6E2F               	movwf	menu_progress_bar@i_724,c
  4728  0014B2                     l3595:
  4729  0014B2  BE30               	btfsc	menu_progress_bar@i_724+1,7,c
  4730  0014B4  D006               	goto	l3599
  4731  0014B6  5030               	movf	menu_progress_bar@i_724+1,w,c
  4732  0014B8  E110               	bnz	l3603
  4733  0014BA  0E05               	movlw	5
  4734  0014BC  5C2F               	subwf	menu_progress_bar@i_724,w,c
  4735  0014BE  B0D8               	btfsc	status,0,c
  4736  0014C0  D00C               	goto	l3603
  4737  0014C2                     l3599:
  4738                           
  4739                           ;menu.h: 107: {
  4740                           ;menu.h: 108: _delay((unsigned long)((20)*(16000000/4000.0)));
  4741  0014C2  0E68               	movlw	104
  4742  0014C4  6E1F               	movwf	??_menu_progress_bar& (0+255),c
  4743  0014C6  0EE4               	movlw	228
  4744  0014C8                     u4477:
  4745  0014C8  2EE8               	decfsz	wreg,f,c
  4746  0014CA  D7FE               	goto	u4477
  4747  0014CC  2E1F               	decfsz	??_menu_progress_bar& (0+255),f,c
  4748  0014CE  D7FC               	goto	u4477
  4749  0014D0  F000 F000          	nop2	
  4750  0014D4  4A2F               	infsnz	menu_progress_bar@i_724,f,c
  4751  0014D6  2A30               	incf	menu_progress_bar@i_724+1,f,c
  4752  0014D8  D7EC               	goto	l3595
  4753  0014DA                     l3603:
  4754                           
  4755                           ;menu.h: 109: }
  4756                           ;menu.h: 110: Lcd_Clear();
  4757  0014DA  EC4A  F00D         	call	_Lcd_Clear	;wreg free
  4758  0014DE  0012               	return		;funcret
  4759  0014E0                     __end_of_menu_progress_bar:
  4760                           	opt stack 0
  4761                           tblptru	equ	0xFF8
  4762                           tblptrh	equ	0xFF7
  4763                           tblptrl	equ	0xFF6
  4764                           tablat	equ	0xFF5
  4765                           prodh	equ	0xFF4
  4766                           prodl	equ	0xFF3
  4767                           intcon	equ	0xFF2
  4768                           postinc0	equ	0xFEE
  4769                           wreg	equ	0xFE8
  4770                           indf1	equ	0xFE7
  4771                           postdec1	equ	0xFE5
  4772                           plusw1	equ	0xFE3
  4773                           fsr1h	equ	0xFE2
  4774                           fsr1l	equ	0xFE1
  4775                           indf2	equ	0xFDF
  4776                           postinc2	equ	0xFDE
  4777                           plusw2	equ	0xFDB
  4778                           fsr2h	equ	0xFDA
  4779                           fsr2l	equ	0xFD9
  4780                           status	equ	0xFD8
  4781                           
  4782 ;; *************** function ___wmul *****************
  4783 ;; Defined at:
  4784 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  4785 ;; Parameters:    Size  Location     Type
  4786 ;;  multiplier      2   22[COMRAM] unsigned int 
  4787 ;;  multiplicand    2   24[COMRAM] unsigned int 
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;  product         2   26[COMRAM] unsigned int 
  4790 ;; Return value:  Size  Location     Type
  4791 ;;                  2   22[COMRAM] unsigned int 
  4792 ;; Registers used:
  4793 ;;		wreg, status,2, status,0, prodl, prodh
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4799 ;;      Params:         4       0       0       0       0       0       0
  4800 ;;      Locals:         2       0       0       0       0       0       0
  4801 ;;      Temps:          0       0       0       0       0       0       0
  4802 ;;      Totals:         6       0       0       0       0       0       0
  4803 ;;Total ram usage:        6 bytes
  4804 ;; Hardware stack levels used:    1
  4805 ;; Hardware stack levels required when called:    1
  4806 ;; This function calls:
  4807 ;;		Nothing
  4808 ;; This function is called by:
  4809 ;;		_menu_progress_bar
  4810 ;;		_menu_seconds_to_mmss
  4811 ;; This function uses a non-reentrant model
  4812 ;;
  4813                           
  4814                           	psect	text3
  4815  001A4A                     __ptext3:
  4816                           	opt stack 0
  4817  001A4A                     ___wmul:
  4818                           	opt stack 27
  4819                           
  4820                           ;incstack = 0
  4821  001A4A  5017               	movf	___wmul@multiplier,w,c
  4822  001A4C  0219               	mulwf	___wmul@multiplicand,c
  4823  001A4E  CFF3 F01B          	movff	prodl,___wmul@product
  4824  001A52  CFF4 F01C          	movff	prodh,___wmul@product+1
  4825  001A56  5017               	movf	___wmul@multiplier,w,c
  4826  001A58  021A               	mulwf	___wmul@multiplicand+1,c
  4827  001A5A  50F3               	movf	prodl,w,c
  4828  001A5C  261C               	addwf	___wmul@product+1,f,c
  4829  001A5E  5018               	movf	___wmul@multiplier+1,w,c
  4830  001A60  0219               	mulwf	___wmul@multiplicand,c
  4831  001A62  50F3               	movf	prodl,w,c
  4832  001A64  261C               	addwf	___wmul@product+1,f,c
  4833  001A66  C01B  F017         	movff	___wmul@product,?___wmul
  4834  001A6A  C01C  F018         	movff	___wmul@product+1,?___wmul+1
  4835  001A6E  0012               	return	
  4836  001A70                     __end_of___wmul:
  4837                           	opt stack 0
  4838                           tblptru	equ	0xFF8
  4839                           tblptrh	equ	0xFF7
  4840                           tblptrl	equ	0xFF6
  4841                           tablat	equ	0xFF5
  4842                           prodh	equ	0xFF4
  4843                           prodl	equ	0xFF3
  4844                           intcon	equ	0xFF2
  4845                           postinc0	equ	0xFEE
  4846                           wreg	equ	0xFE8
  4847                           indf1	equ	0xFE7
  4848                           postdec1	equ	0xFE5
  4849                           plusw1	equ	0xFE3
  4850                           fsr1h	equ	0xFE2
  4851                           fsr1l	equ	0xFE1
  4852                           indf2	equ	0xFDF
  4853                           postinc2	equ	0xFDE
  4854                           plusw2	equ	0xFDB
  4855                           fsr2h	equ	0xFDA
  4856                           fsr2l	equ	0xFD9
  4857                           status	equ	0xFD8
  4858                           
  4859 ;; *************** function ___lwdiv *****************
  4860 ;; Defined at:
  4861 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  4862 ;; Parameters:    Size  Location     Type
  4863 ;;  dividend        2   15[COMRAM] unsigned int 
  4864 ;;  divisor         2   17[COMRAM] unsigned int 
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;  quotient        2   20[COMRAM] unsigned int 
  4867 ;;  counter         1   19[COMRAM] unsigned char 
  4868 ;; Return value:  Size  Location     Type
  4869 ;;                  2   15[COMRAM] unsigned int 
  4870 ;; Registers used:
  4871 ;;		wreg, status,2, status,0
  4872 ;; Tracked objects:
  4873 ;;		On entry : 0/0
  4874 ;;		On exit  : 0/0
  4875 ;;		Unchanged: 0/0
  4876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4877 ;;      Params:         4       0       0       0       0       0       0
  4878 ;;      Locals:         3       0       0       0       0       0       0
  4879 ;;      Temps:          0       0       0       0       0       0       0
  4880 ;;      Totals:         7       0       0       0       0       0       0
  4881 ;;Total ram usage:        7 bytes
  4882 ;; Hardware stack levels used:    1
  4883 ;; Hardware stack levels required when called:    1
  4884 ;; This function calls:
  4885 ;;		Nothing
  4886 ;; This function is called by:
  4887 ;;		_menu_progress_bar
  4888 ;;		_menu_seconds_to_mmss
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           	psect	text4
  4893  00185C                     __ptext4:
  4894                           	opt stack 0
  4895  00185C                     ___lwdiv:
  4896                           	opt stack 27
  4897                           
  4898                           ;incstack = 0
  4899  00185C  0E00               	movlw	0
  4900  00185E  6E16               	movwf	___lwdiv@quotient+1,c
  4901  001860  0E00               	movlw	0
  4902  001862  6E15               	movwf	___lwdiv@quotient,c
  4903  001864  5012               	movf	___lwdiv@divisor,w,c
  4904  001866  1013               	iorwf	___lwdiv@divisor+1,w,c
  4905  001868  B4D8               	btfsc	status,2,c
  4906  00186A  D01C               	goto	l752
  4907  00186C  0E01               	movlw	1
  4908  00186E  6E14               	movwf	___lwdiv@counter,c
  4909  001870  D004               	goto	l3527
  4910  001872                     l3525:
  4911  001872  90D8               	bcf	status,0,c
  4912  001874  3612               	rlcf	___lwdiv@divisor,f,c
  4913  001876  3613               	rlcf	___lwdiv@divisor+1,f,c
  4914  001878  2A14               	incf	___lwdiv@counter,f,c
  4915  00187A                     l3527:
  4916  00187A  AE13               	btfss	___lwdiv@divisor+1,7,c
  4917  00187C  D7FA               	goto	l3525
  4918  00187E                     l3529:
  4919  00187E  90D8               	bcf	status,0,c
  4920  001880  3615               	rlcf	___lwdiv@quotient,f,c
  4921  001882  3616               	rlcf	___lwdiv@quotient+1,f,c
  4922  001884  5012               	movf	___lwdiv@divisor,w,c
  4923  001886  5C10               	subwf	___lwdiv@dividend,w,c
  4924  001888  5013               	movf	___lwdiv@divisor+1,w,c
  4925  00188A  5811               	subwfb	___lwdiv@dividend+1,w,c
  4926  00188C  A0D8               	btfss	status,0,c
  4927  00188E  D005               	goto	l3537
  4928  001890  5012               	movf	___lwdiv@divisor,w,c
  4929  001892  5E10               	subwf	___lwdiv@dividend,f,c
  4930  001894  5013               	movf	___lwdiv@divisor+1,w,c
  4931  001896  5A11               	subwfb	___lwdiv@dividend+1,f,c
  4932  001898  8015               	bsf	___lwdiv@quotient,0,c
  4933  00189A                     l3537:
  4934  00189A  90D8               	bcf	status,0,c
  4935  00189C  3213               	rrcf	___lwdiv@divisor+1,f,c
  4936  00189E  3212               	rrcf	___lwdiv@divisor,f,c
  4937  0018A0  2E14               	decfsz	___lwdiv@counter,f,c
  4938  0018A2  D7ED               	goto	l3529
  4939  0018A4                     l752:
  4940  0018A4  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
  4941  0018A8  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4942  0018AC  0012               	return		;funcret
  4943  0018AE                     __end_of___lwdiv:
  4944                           	opt stack 0
  4945                           tblptru	equ	0xFF8
  4946                           tblptrh	equ	0xFF7
  4947                           tblptrl	equ	0xFF6
  4948                           tablat	equ	0xFF5
  4949                           prodh	equ	0xFF4
  4950                           prodl	equ	0xFF3
  4951                           intcon	equ	0xFF2
  4952                           postinc0	equ	0xFEE
  4953                           wreg	equ	0xFE8
  4954                           indf1	equ	0xFE7
  4955                           postdec1	equ	0xFE5
  4956                           plusw1	equ	0xFE3
  4957                           fsr1h	equ	0xFE2
  4958                           fsr1l	equ	0xFE1
  4959                           indf2	equ	0xFDF
  4960                           postinc2	equ	0xFDE
  4961                           plusw2	equ	0xFDB
  4962                           fsr2h	equ	0xFDA
  4963                           fsr2l	equ	0xFD9
  4964                           status	equ	0xFD8
  4965                           
  4966 ;; *************** function _Lcd_Write_String *****************
  4967 ;; Defined at:
  4968 ;;		line 111 in file "lcd.h"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;  a               2   19[COMRAM] PTR unsigned char 
  4971 ;;		 -> STR_28(17), STR_27(17), STR_26(17), STR_25(2), 
  4972 ;;		 -> STR_24(5), STR_23(17), STR_22(17), STR_21(17), 
  4973 ;;		 -> STR_20(17), STR_19(17), STR_18(11), STR_17(6), 
  4974 ;;		 -> STR_16(5), STR_15(17), STR_14(17), STR_13(17), 
  4975 ;;		 -> STR_12(2), STR_11(15), STR_10(17), STR_9(17), 
  4976 ;;		 -> STR_8(17), STR_7(17), STR_6(17), STR_5(17), 
  4977 ;;		 -> STR_4(17), STR_3(17), STR_2(17), STR_1(2), 
  4978 ;;		 -> RAM(1535), 
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;  i               2   23[COMRAM] int 
  4981 ;; Return value:  Size  Location     Type
  4982 ;;                  1    wreg      void 
  4983 ;; Registers used:
  4984 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4985 ;; Tracked objects:
  4986 ;;		On entry : 0/0
  4987 ;;		On exit  : 0/0
  4988 ;;		Unchanged: 0/0
  4989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4990 ;;      Params:         2       0       0       0       0       0       0
  4991 ;;      Locals:         2       0       0       0       0       0       0
  4992 ;;      Temps:          2       0       0       0       0       0       0
  4993 ;;      Totals:         6       0       0       0       0       0       0
  4994 ;;Total ram usage:        6 bytes
  4995 ;; Hardware stack levels used:    1
  4996 ;; Hardware stack levels required when called:    3
  4997 ;; This function calls:
  4998 ;;		_Lcd_Write_Char
  4999 ;; This function is called by:
  5000 ;;		_menu_progress_bar
  5001 ;;		_main
  5002 ;;		_start_routine
  5003 ;;		_menu_animation_i2c
  5004 ;; This function uses a non-reentrant model
  5005 ;;
  5006                           
  5007                           	psect	text5
  5008  0017EA                     __ptext5:
  5009                           	opt stack 0
  5010  0017EA                     _Lcd_Write_String:
  5011                           	opt stack 25
  5012                           
  5013                           ;lcd.h: 113: int i;
  5014                           ;lcd.h: 114: for(i=0;a[i]!='\0';i++)
  5015                           
  5016                           ;incstack = 0
  5017  0017EA  0E00               	movlw	0
  5018  0017EC  6E19               	movwf	Lcd_Write_String@i+1,c
  5019  0017EE  0E00               	movlw	0
  5020  0017F0  6E18               	movwf	Lcd_Write_String@i,c
  5021  0017F2  D01A               	goto	l3423
  5022  0017F4                     l3419:
  5023                           
  5024                           ;lcd.h: 115: Lcd_Write_Char(a[i]);
  5025  0017F4  5018               	movf	Lcd_Write_String@i,w,c
  5026  0017F6  2414               	addwf	Lcd_Write_String@a,w,c
  5027  0017F8  6E16               	movwf	??_Lcd_Write_String& (0+255),c
  5028  0017FA  5019               	movf	Lcd_Write_String@i+1,w,c
  5029  0017FC  2015               	addwfc	Lcd_Write_String@a+1,w,c
  5030  0017FE  6E17               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  5031  001800  C016  FFF6         	movff	??_Lcd_Write_String,tblptrl
  5032  001804  C017  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  5033  001808  6AF8               	clrf	tblptru,c
  5034  00180A  0E05               	movlw	(high __ramtop+-1)
  5035  00180C  64F7               	cpfsgt	tblptrh,c
  5036  00180E  D003               	bra	u3017
  5037  001810  0008               	tblrd		*
  5038  001812  50F5               	movf	tablat,w,c
  5039  001814  D005               	bra	u3010
  5040  001816                     u3017:
  5041  001816  CFF6 FFE9          	movff	tblptrl,fsr0l
  5042  00181A  CFF7 FFEA          	movff	tblptrh,fsr0h
  5043  00181E  50EF               	movf	indf0,w,c
  5044  001820                     u3010:
  5045  001820  ECA8  F00C         	call	_Lcd_Write_Char
  5046  001824  4A18               	infsnz	Lcd_Write_String@i,f,c
  5047  001826  2A19               	incf	Lcd_Write_String@i+1,f,c
  5048  001828                     l3423:
  5049  001828  5018               	movf	Lcd_Write_String@i,w,c
  5050  00182A  2414               	addwf	Lcd_Write_String@a,w,c
  5051  00182C  6E16               	movwf	??_Lcd_Write_String& (0+255),c
  5052  00182E  5019               	movf	Lcd_Write_String@i+1,w,c
  5053  001830  2015               	addwfc	Lcd_Write_String@a+1,w,c
  5054  001832  6E17               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  5055  001834  C016  FFF6         	movff	??_Lcd_Write_String,tblptrl
  5056  001838  C017  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  5057  00183C  6AF8               	clrf	tblptru,c
  5058  00183E  0E05               	movlw	(high __ramtop+-1)
  5059  001840  64F7               	cpfsgt	tblptrh,c
  5060  001842  D003               	bra	u3027
  5061  001844  0008               	tblrd		*
  5062  001846  50F5               	movf	tablat,w,c
  5063  001848  D005               	bra	u3020
  5064  00184A                     u3027:
  5065  00184A  CFF6 FFE9          	movff	tblptrl,fsr0l
  5066  00184E  CFF7 FFEA          	movff	tblptrh,fsr0h
  5067  001852  50EF               	movf	indf0,w,c
  5068  001854                     u3020:
  5069  001854  0900               	iorlw	0
  5070  001856  B4D8               	btfsc	status,2,c
  5071  001858  0012               	return	
  5072  00185A  D7CC               	goto	l3419
  5073  00185C                     __end_of_Lcd_Write_String:
  5074                           	opt stack 0
  5075                           tblptru	equ	0xFF8
  5076                           tblptrh	equ	0xFF7
  5077                           tblptrl	equ	0xFF6
  5078                           tablat	equ	0xFF5
  5079                           prodh	equ	0xFF4
  5080                           prodl	equ	0xFF3
  5081                           intcon	equ	0xFF2
  5082                           indf0	equ	0xFEF
  5083                           postinc0	equ	0xFEE
  5084                           fsr0h	equ	0xFEA
  5085                           fsr0l	equ	0xFE9
  5086                           wreg	equ	0xFE8
  5087                           indf1	equ	0xFE7
  5088                           postdec1	equ	0xFE5
  5089                           plusw1	equ	0xFE3
  5090                           fsr1h	equ	0xFE2
  5091                           fsr1l	equ	0xFE1
  5092                           indf2	equ	0xFDF
  5093                           postinc2	equ	0xFDE
  5094                           plusw2	equ	0xFDB
  5095                           fsr2h	equ	0xFDA
  5096                           fsr2l	equ	0xFD9
  5097                           status	equ	0xFD8
  5098                           
  5099 ;; *************** function _Lcd_Write_Char *****************
  5100 ;; Defined at:
  5101 ;;		line 95 in file "lcd.h"
  5102 ;; Parameters:    Size  Location     Type
  5103 ;;  a               1    wreg     unsigned char 
  5104 ;; Auto vars:     Size  Location     Type
  5105 ;;  a               1   18[COMRAM] unsigned char 
  5106 ;;  y               1   17[COMRAM] unsigned char 
  5107 ;;  temp            1   16[COMRAM] unsigned char 
  5108 ;; Return value:  Size  Location     Type
  5109 ;;                  1    wreg      void 
  5110 ;; Registers used:
  5111 ;;		wreg, status,2, status,0, cstack
  5112 ;; Tracked objects:
  5113 ;;		On entry : 0/0
  5114 ;;		On exit  : 0/0
  5115 ;;		Unchanged: 0/0
  5116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5117 ;;      Params:         0       0       0       0       0       0       0
  5118 ;;      Locals:         3       0       0       0       0       0       0
  5119 ;;      Temps:          0       0       0       0       0       0       0
  5120 ;;      Totals:         3       0       0       0       0       0       0
  5121 ;;Total ram usage:        3 bytes
  5122 ;; Hardware stack levels used:    1
  5123 ;; Hardware stack levels required when called:    2
  5124 ;; This function calls:
  5125 ;;		_Lcd_Port
  5126 ;; This function is called by:
  5127 ;;		_Lcd_Write_String
  5128 ;;		_menu_progress_bar
  5129 ;;		_main
  5130 ;;		_start_routine
  5131 ;;		_menu_main
  5132 ;; This function uses a non-reentrant model
  5133 ;;
  5134                           
  5135                           	psect	text6
  5136  001950                     __ptext6:
  5137                           	opt stack 0
  5138  001950                     _Lcd_Write_Char:
  5139                           	opt stack 25
  5140                           
  5141                           ;incstack = 0
  5142                           ;Lcd_Write_Char@a stored from wreg
  5143  001950  6E13               	movwf	Lcd_Write_Char@a,c
  5144                           
  5145                           ;lcd.h: 97: char temp,y;
  5146                           ;lcd.h: 98: temp = a&0x0F;
  5147  001952  5013               	movf	Lcd_Write_Char@a,w,c
  5148  001954  0B0F               	andlw	15
  5149  001956  6E11               	movwf	Lcd_Write_Char@temp,c
  5150                           
  5151                           ;lcd.h: 99: y = a&0xF0;
  5152  001958  5013               	movf	Lcd_Write_Char@a,w,c
  5153  00195A  0BF0               	andlw	240
  5154  00195C  6E12               	movwf	Lcd_Write_Char@y,c
  5155                           
  5156                           ;lcd.h: 100: PORTDbits.RD5 = 1;
  5157  00195E  8A83               	bsf	3971,5,c	;volatile
  5158                           
  5159                           ;lcd.h: 101: Lcd_Port(y>>4);
  5160  001960  3812               	swapf	Lcd_Write_Char@y,w,c
  5161  001962  0B0F               	andlw	15
  5162  001964  EC0F  F00D         	call	_Lcd_Port
  5163                           
  5164                           ;lcd.h: 102: PORTDbits.RD4 = 1;
  5165  001968  8883               	bsf	3971,4,c	;volatile
  5166                           
  5167                           ;lcd.h: 103: _delay((unsigned long)((40)*(16000000/4000000.0)));
  5168  00196A  0E35               	movlw	53
  5169  00196C                     u4487:
  5170  00196C  2EE8               	decfsz	wreg,f,c
  5171  00196E  D7FE               	goto	u4487
  5172  001970  F000               	nop	
  5173                           
  5174                           ;lcd.h: 104: PORTDbits.RD4 = 0;
  5175  001972  9883               	bcf	3971,4,c	;volatile
  5176                           
  5177                           ;lcd.h: 105: Lcd_Port(temp);
  5178  001974  5011               	movf	Lcd_Write_Char@temp,w,c
  5179  001976  EC0F  F00D         	call	_Lcd_Port
  5180                           
  5181                           ;lcd.h: 106: PORTDbits.RD4 = 1;
  5182  00197A  8883               	bsf	3971,4,c	;volatile
  5183                           
  5184                           ;lcd.h: 107: _delay((unsigned long)((40)*(16000000/4000000.0)));
  5185  00197C  0E35               	movlw	53
  5186  00197E                     u4497:
  5187  00197E  2EE8               	decfsz	wreg,f,c
  5188  001980  D7FE               	goto	u4497
  5189  001982  F000               	nop	
  5190                           
  5191                           ;lcd.h: 108: PORTDbits.RD4 = 0;
  5192  001984  9883               	bcf	3971,4,c	;volatile
  5193  001986  0012               	return		;funcret
  5194  001988                     __end_of_Lcd_Write_Char:
  5195                           	opt stack 0
  5196                           tblptru	equ	0xFF8
  5197                           tblptrh	equ	0xFF7
  5198                           tblptrl	equ	0xFF6
  5199                           tablat	equ	0xFF5
  5200                           prodh	equ	0xFF4
  5201                           prodl	equ	0xFF3
  5202                           intcon	equ	0xFF2
  5203                           indf0	equ	0xFEF
  5204                           postinc0	equ	0xFEE
  5205                           fsr0h	equ	0xFEA
  5206                           fsr0l	equ	0xFE9
  5207                           wreg	equ	0xFE8
  5208                           indf1	equ	0xFE7
  5209                           postdec1	equ	0xFE5
  5210                           plusw1	equ	0xFE3
  5211                           fsr1h	equ	0xFE2
  5212                           fsr1l	equ	0xFE1
  5213                           indf2	equ	0xFDF
  5214                           postinc2	equ	0xFDE
  5215                           plusw2	equ	0xFDB
  5216                           fsr2h	equ	0xFDA
  5217                           fsr2l	equ	0xFD9
  5218                           status	equ	0xFD8
  5219                           
  5220 ;; *************** function _Lcd_Set_Cursor *****************
  5221 ;; Defined at:
  5222 ;;		line 55 in file "lcd.h"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;  a               1    wreg     unsigned char 
  5225 ;;  b               1   17[COMRAM] unsigned char 
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;  a               1   18[COMRAM] unsigned char 
  5228 ;;  temp            1   21[COMRAM] unsigned char 
  5229 ;;  y               1   20[COMRAM] unsigned char 
  5230 ;;  z               1   19[COMRAM] unsigned char 
  5231 ;; Return value:  Size  Location     Type
  5232 ;;                  1    wreg      void 
  5233 ;; Registers used:
  5234 ;;		wreg, status,2, status,0, cstack
  5235 ;; Tracked objects:
  5236 ;;		On entry : 0/0
  5237 ;;		On exit  : 0/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5240 ;;      Params:         1       0       0       0       0       0       0
  5241 ;;      Locals:         4       0       0       0       0       0       0
  5242 ;;      Temps:          0       0       0       0       0       0       0
  5243 ;;      Totals:         5       0       0       0       0       0       0
  5244 ;;Total ram usage:        5 bytes
  5245 ;; Hardware stack levels used:    1
  5246 ;; Hardware stack levels required when called:    3
  5247 ;; This function calls:
  5248 ;;		_Lcd_Cmd
  5249 ;; This function is called by:
  5250 ;;		_menu_progress_bar
  5251 ;;		_main
  5252 ;;		_start_routine
  5253 ;;		_menu_main
  5254 ;;		_menu_animation_i2c
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           	psect	text7
  5259  001900                     __ptext7:
  5260                           	opt stack 0
  5261  001900                     _Lcd_Set_Cursor:
  5262                           	opt stack 25
  5263                           
  5264                           ;incstack = 0
  5265                           ;Lcd_Set_Cursor@a stored from wreg
  5266  001900  6E13               	movwf	Lcd_Set_Cursor@a,c
  5267                           
  5268                           ;lcd.h: 57: char temp,z,y;
  5269                           ;lcd.h: 58: if(a == 1)
  5270  001902  0413               	decf	Lcd_Set_Cursor@a,w,c
  5271  001904  A4D8               	btfss	status,2,c
  5272  001906  D010               	goto	l3409
  5273                           
  5274                           ;lcd.h: 59: {
  5275                           ;lcd.h: 60: temp = 0x80 + b - 1;
  5276  001908  5012               	movf	Lcd_Set_Cursor@b,w,c
  5277  00190A  0F7F               	addlw	127
  5278  00190C  6E16               	movwf	Lcd_Set_Cursor@temp,c
  5279                           
  5280                           ;lcd.h: 61: z = temp>>4;
  5281  00190E  3816               	swapf	Lcd_Set_Cursor@temp,w,c
  5282  001910  0B0F               	andlw	15
  5283  001912  6E14               	movwf	Lcd_Set_Cursor@z,c
  5284                           
  5285                           ;lcd.h: 62: y = temp & 0x0F;
  5286  001914  5016               	movf	Lcd_Set_Cursor@temp,w,c
  5287  001916  0B0F               	andlw	15
  5288  001918  6E15               	movwf	Lcd_Set_Cursor@y,c
  5289                           
  5290                           ;lcd.h: 63: Lcd_Cmd(z);
  5291  00191A  5014               	movf	Lcd_Set_Cursor@z,w,c
  5292  00191C  EC67  F00D         	call	_Lcd_Cmd
  5293                           
  5294                           ;lcd.h: 64: Lcd_Cmd(y);
  5295  001920  5015               	movf	Lcd_Set_Cursor@y,w,c
  5296  001922  EC67  F00D         	call	_Lcd_Cmd
  5297                           
  5298                           ;lcd.h: 65: }
  5299  001926  0012               	return	
  5300  001928                     l3409:
  5301                           
  5302                           ;lcd.h: 66: else if(a == 2)
  5303  001928  0E02               	movlw	2
  5304  00192A  1813               	xorwf	Lcd_Set_Cursor@a,w,c
  5305  00192C  A4D8               	btfss	status,2,c
  5306  00192E  0012               	return	
  5307                           
  5308                           ;lcd.h: 67: {
  5309                           ;lcd.h: 68: temp = 0xC0 + b - 1;
  5310  001930  5012               	movf	Lcd_Set_Cursor@b,w,c
  5311  001932  0FBF               	addlw	191
  5312  001934  6E16               	movwf	Lcd_Set_Cursor@temp,c
  5313                           
  5314                           ;lcd.h: 69: z = temp>>4;
  5315  001936  3816               	swapf	Lcd_Set_Cursor@temp,w,c
  5316  001938  0B0F               	andlw	15
  5317  00193A  6E14               	movwf	Lcd_Set_Cursor@z,c
  5318                           
  5319                           ;lcd.h: 70: y = temp & 0x0F;
  5320  00193C  5016               	movf	Lcd_Set_Cursor@temp,w,c
  5321  00193E  0B0F               	andlw	15
  5322  001940  6E15               	movwf	Lcd_Set_Cursor@y,c
  5323                           
  5324                           ;lcd.h: 71: Lcd_Cmd(z);
  5325  001942  5014               	movf	Lcd_Set_Cursor@z,w,c
  5326  001944  EC67  F00D         	call	_Lcd_Cmd
  5327                           
  5328                           ;lcd.h: 72: Lcd_Cmd(y);
  5329  001948  5015               	movf	Lcd_Set_Cursor@y,w,c
  5330  00194A  EC67  F00D         	call	_Lcd_Cmd
  5331  00194E  0012               	return	
  5332  001950                     __end_of_Lcd_Set_Cursor:
  5333                           	opt stack 0
  5334                           tblptru	equ	0xFF8
  5335                           tblptrh	equ	0xFF7
  5336                           tblptrl	equ	0xFF6
  5337                           tablat	equ	0xFF5
  5338                           prodh	equ	0xFF4
  5339                           prodl	equ	0xFF3
  5340                           intcon	equ	0xFF2
  5341                           indf0	equ	0xFEF
  5342                           postinc0	equ	0xFEE
  5343                           fsr0h	equ	0xFEA
  5344                           fsr0l	equ	0xFE9
  5345                           wreg	equ	0xFE8
  5346                           indf1	equ	0xFE7
  5347                           postdec1	equ	0xFE5
  5348                           plusw1	equ	0xFE3
  5349                           fsr1h	equ	0xFE2
  5350                           fsr1l	equ	0xFE1
  5351                           indf2	equ	0xFDF
  5352                           postinc2	equ	0xFDE
  5353                           plusw2	equ	0xFDB
  5354                           fsr2h	equ	0xFDA
  5355                           fsr2l	equ	0xFD9
  5356                           status	equ	0xFD8
  5357                           
  5358 ;; *************** function _Lcd_Clear *****************
  5359 ;; Defined at:
  5360 ;;		line 48 in file "lcd.h"
  5361 ;; Parameters:    Size  Location     Type
  5362 ;;		None
  5363 ;; Auto vars:     Size  Location     Type
  5364 ;;		None
  5365 ;; Return value:  Size  Location     Type
  5366 ;;                  1    wreg      void 
  5367 ;; Registers used:
  5368 ;;		wreg, status,2, cstack
  5369 ;; Tracked objects:
  5370 ;;		On entry : 0/0
  5371 ;;		On exit  : 0/0
  5372 ;;		Unchanged: 0/0
  5373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5374 ;;      Params:         0       0       0       0       0       0       0
  5375 ;;      Locals:         0       0       0       0       0       0       0
  5376 ;;      Temps:          1       0       0       0       0       0       0
  5377 ;;      Totals:         1       0       0       0       0       0       0
  5378 ;;Total ram usage:        1 bytes
  5379 ;; Hardware stack levels used:    1
  5380 ;; Hardware stack levels required when called:    3
  5381 ;; This function calls:
  5382 ;;		_Lcd_Cmd
  5383 ;; This function is called by:
  5384 ;;		_menu_progress_bar
  5385 ;;		_main
  5386 ;;		_start_routine
  5387 ;; This function uses a non-reentrant model
  5388 ;;
  5389                           
  5390                           	psect	text8
  5391  001A94                     __ptext8:
  5392                           	opt stack 0
  5393  001A94                     _Lcd_Clear:
  5394                           	opt stack 25
  5395                           
  5396                           ;lcd.h: 50: Lcd_Cmd(0);
  5397                           
  5398                           ;incstack = 0
  5399  001A94  0E00               	movlw	0
  5400  001A96  EC67  F00D         	call	_Lcd_Cmd
  5401                           
  5402                           ;lcd.h: 51: Lcd_Cmd(1);
  5403  001A9A  0E01               	movlw	1
  5404  001A9C  EC67  F00D         	call	_Lcd_Cmd
  5405                           
  5406                           ;lcd.h: 52: _delay((unsigned long)((5)*(16000000/4000.0)));
  5407  001AA0  0E1A               	movlw	26
  5408  001AA2  6E12               	movwf	??_Lcd_Clear& (0+255),c
  5409  001AA4  0EF8               	movlw	248
  5410  001AA6                     u4507:
  5411  001AA6  2EE8               	decfsz	wreg,f,c
  5412  001AA8  D7FE               	goto	u4507
  5413  001AAA  2E12               	decfsz	??_Lcd_Clear& (0+255),f,c
  5414  001AAC  D7FC               	goto	u4507
  5415  001AAE  F000 F000          	nop2	
  5416  001AB2  0012               	return		;funcret
  5417  001AB4                     __end_of_Lcd_Clear:
  5418                           	opt stack 0
  5419                           tblptru	equ	0xFF8
  5420                           tblptrh	equ	0xFF7
  5421                           tblptrl	equ	0xFF6
  5422                           tablat	equ	0xFF5
  5423                           prodh	equ	0xFF4
  5424                           prodl	equ	0xFF3
  5425                           intcon	equ	0xFF2
  5426                           indf0	equ	0xFEF
  5427                           postinc0	equ	0xFEE
  5428                           fsr0h	equ	0xFEA
  5429                           fsr0l	equ	0xFE9
  5430                           wreg	equ	0xFE8
  5431                           indf1	equ	0xFE7
  5432                           postdec1	equ	0xFE5
  5433                           plusw1	equ	0xFE3
  5434                           fsr1h	equ	0xFE2
  5435                           fsr1l	equ	0xFE1
  5436                           indf2	equ	0xFDF
  5437                           postinc2	equ	0xFDE
  5438                           plusw2	equ	0xFDB
  5439                           fsr2h	equ	0xFDA
  5440                           fsr2l	equ	0xFD9
  5441                           status	equ	0xFD8
  5442                           
  5443 ;; *************** function _latch_keypad *****************
  5444 ;; Defined at:
  5445 ;;		line 324 in file "main.c"
  5446 ;; Parameters:    Size  Location     Type
  5447 ;;  x               2   15[COMRAM] PTR unsigned char 
  5448 ;;		 -> start_routine@x(1), main@x(1), 
  5449 ;; Auto vars:     Size  Location     Type
  5450 ;;		None
  5451 ;; Return value:  Size  Location     Type
  5452 ;;                  1    wreg      void 
  5453 ;; Registers used:
  5454 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5455 ;; Tracked objects:
  5456 ;;		On entry : 0/0
  5457 ;;		On exit  : 0/0
  5458 ;;		Unchanged: 0/0
  5459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5460 ;;      Params:         2       0       0       0       0       0       0
  5461 ;;      Locals:         0       0       0       0       0       0       0
  5462 ;;      Temps:          2       0       0       0       0       0       0
  5463 ;;      Totals:         4       0       0       0       0       0       0
  5464 ;;Total ram usage:        4 bytes
  5465 ;; Hardware stack levels used:    1
  5466 ;; Hardware stack levels required when called:    2
  5467 ;; This function calls:
  5468 ;;		_read_keypad
  5469 ;; This function is called by:
  5470 ;;		_main
  5471 ;;		_start_routine
  5472 ;; This function uses a non-reentrant model
  5473 ;;
  5474                           
  5475                           	psect	text9
  5476  001988                     __ptext9:
  5477                           	opt stack 0
  5478  001988                     _latch_keypad:
  5479                           	opt stack 27
  5480                           
  5481                           ;main.c: 326: while (*x == read_keypad())
  5482                           
  5483                           ;incstack = 0
  5484  001988  D009               	goto	l3633
  5485  00198A                     l3631:
  5486                           
  5487                           ;main.c: 327: {
  5488                           ;main.c: 328: _delay((unsigned long)((20)*(16000000/4000.0)));
  5489  00198A  0E68               	movlw	104
  5490  00198C  6E12               	movwf	??_latch_keypad& (0+255),c
  5491  00198E  0EE4               	movlw	228
  5492  001990                     u4517:
  5493  001990  2EE8               	decfsz	wreg,f,c
  5494  001992  D7FE               	goto	u4517
  5495  001994  2E12               	decfsz	??_latch_keypad& (0+255),f,c
  5496  001996  D7FC               	goto	u4517
  5497  001998  F000 F000          	nop2	
  5498  00199C                     l3633:
  5499  00199C  C010  FFD9         	movff	latch_keypad@x,fsr2l
  5500  0019A0  C011  FFDA         	movff	latch_keypad@x+1,fsr2h
  5501  0019A4  ECE6  F00A         	call	_read_keypad	;wreg free
  5502  0019A8  6E13               	movwf	(??_latch_keypad+1)& (0+255),c
  5503  0019AA  50DE               	movf	postinc2,w,c
  5504  0019AC  1813               	xorwf	??_latch_keypad+1,w,c
  5505  0019AE  B4D8               	btfsc	status,2,c
  5506  0019B0  D7EC               	goto	l3631
  5507                           
  5508                           ;main.c: 329: }
  5509                           ;main.c: 330: *x = '_';
  5510  0019B2  C010  FFD9         	movff	latch_keypad@x,fsr2l
  5511  0019B6  C011  FFDA         	movff	latch_keypad@x+1,fsr2h
  5512  0019BA  0E5F               	movlw	95
  5513  0019BC  6EDF               	movwf	indf2,c
  5514  0019BE  0012               	return		;funcret
  5515  0019C0                     __end_of_latch_keypad:
  5516                           	opt stack 0
  5517                           tblptru	equ	0xFF8
  5518                           tblptrh	equ	0xFF7
  5519                           tblptrl	equ	0xFF6
  5520                           tablat	equ	0xFF5
  5521                           prodh	equ	0xFF4
  5522                           prodl	equ	0xFF3
  5523                           intcon	equ	0xFF2
  5524                           indf0	equ	0xFEF
  5525                           postinc0	equ	0xFEE
  5526                           fsr0h	equ	0xFEA
  5527                           fsr0l	equ	0xFE9
  5528                           wreg	equ	0xFE8
  5529                           indf1	equ	0xFE7
  5530                           postdec1	equ	0xFE5
  5531                           plusw1	equ	0xFE3
  5532                           fsr1h	equ	0xFE2
  5533                           fsr1l	equ	0xFE1
  5534                           indf2	equ	0xFDF
  5535                           postinc2	equ	0xFDE
  5536                           plusw2	equ	0xFDB
  5537                           fsr2h	equ	0xFDA
  5538                           fsr2l	equ	0xFD9
  5539                           status	equ	0xFD8
  5540                           
  5541 ;; *************** function _read_keypad *****************
  5542 ;; Defined at:
  5543 ;;		line 301 in file "main.c"
  5544 ;; Parameters:    Size  Location     Type
  5545 ;;		None
  5546 ;; Auto vars:     Size  Location     Type
  5547 ;;		None
  5548 ;; Return value:  Size  Location     Type
  5549 ;;                  1    wreg      unsigned char 
  5550 ;; Registers used:
  5551 ;;		wreg, status,2
  5552 ;; Tracked objects:
  5553 ;;		On entry : 0/0
  5554 ;;		On exit  : 0/0
  5555 ;;		Unchanged: 0/0
  5556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5557 ;;      Params:         0       0       0       0       0       0       0
  5558 ;;      Locals:         0       0       0       0       0       0       0
  5559 ;;      Temps:          0       0       0       0       0       0       0
  5560 ;;      Totals:         0       0       0       0       0       0       0
  5561 ;;Total ram usage:        0 bytes
  5562 ;; Hardware stack levels used:    1
  5563 ;; Hardware stack levels required when called:    1
  5564 ;; This function calls:
  5565 ;;		Nothing
  5566 ;; This function is called by:
  5567 ;;		_main
  5568 ;;		_latch_keypad
  5569 ;;		_start_routine
  5570 ;; This function uses a non-reentrant model
  5571 ;;
  5572                           
  5573                           	psect	text10
  5574  0015CC                     __ptext10:
  5575                           	opt stack 0
  5576  0015CC                     _read_keypad:
  5577                           	opt stack 28
  5578                           
  5579                           ;main.c: 303: TRISB = 0b01111000;
  5580                           
  5581                           ;incstack = 0
  5582  0015CC  0E78               	movlw	120
  5583  0015CE  6E93               	movwf	3987,c	;volatile
  5584                           
  5585                           ;main.c: 304: PORTB = 0b00000001;
  5586  0015D0  0E01               	movlw	1
  5587  0015D2  6E81               	movwf	3969,c	;volatile
  5588                           
  5589                           ;main.c: 306: if (PORTBbits.RB6) {PORTB = 0x00; return '*';}
  5590  0015D4  AC81               	btfss	3969,6,c	;volatile
  5591  0015D6  D004               	goto	l261
  5592  0015D8  0E00               	movlw	0
  5593  0015DA  6E81               	movwf	3969,c	;volatile
  5594  0015DC  0E2A               	movlw	42
  5595  0015DE  0012               	return	
  5596  0015E0                     l261:
  5597                           
  5598                           ;main.c: 307: if (PORTBbits.RB3) {PORTB = 0x00; return '1';}
  5599  0015E0  A681               	btfss	3969,3,c	;volatile
  5600  0015E2  D004               	goto	l263
  5601  0015E4  0E00               	movlw	0
  5602  0015E6  6E81               	movwf	3969,c	;volatile
  5603  0015E8  0E31               	movlw	49
  5604  0015EA  0012               	return	
  5605  0015EC                     l263:
  5606                           
  5607                           ;main.c: 308: if (PORTBbits.RB4) {PORTB = 0x00; return '4';}
  5608  0015EC  A881               	btfss	3969,4,c	;volatile
  5609  0015EE  D004               	goto	l264
  5610  0015F0  0E00               	movlw	0
  5611  0015F2  6E81               	movwf	3969,c	;volatile
  5612  0015F4  0E34               	movlw	52
  5613  0015F6  0012               	return	
  5614  0015F8                     l264:
  5615                           
  5616                           ;main.c: 309: if (PORTBbits.RB5) {PORTB = 0x00; return '7';}
  5617  0015F8  AA81               	btfss	3969,5,c	;volatile
  5618  0015FA  D004               	goto	l3453
  5619  0015FC  0E00               	movlw	0
  5620  0015FE  6E81               	movwf	3969,c	;volatile
  5621  001600  0E37               	movlw	55
  5622  001602  0012               	return	
  5623  001604                     l3453:
  5624                           
  5625                           ;main.c: 310: PORTB = 0b00000010;
  5626  001604  0E02               	movlw	2
  5627  001606  6E81               	movwf	3969,c	;volatile
  5628                           
  5629                           ;main.c: 312: if (PORTBbits.RB3) {PORTB = 0x00; return '2';}
  5630  001608  A681               	btfss	3969,3,c	;volatile
  5631  00160A  D004               	goto	l266
  5632  00160C  0E00               	movlw	0
  5633  00160E  6E81               	movwf	3969,c	;volatile
  5634  001610  0E32               	movlw	50
  5635  001612  0012               	return	
  5636  001614                     l266:
  5637                           
  5638                           ;main.c: 313: if (PORTBbits.RB4) {PORTB = 0x00; return '5';}
  5639  001614  A881               	btfss	3969,4,c	;volatile
  5640  001616  D004               	goto	l267
  5641  001618  0E00               	movlw	0
  5642  00161A  6E81               	movwf	3969,c	;volatile
  5643  00161C  0E35               	movlw	53
  5644  00161E  0012               	return	
  5645  001620                     l267:
  5646                           
  5647                           ;main.c: 314: if (PORTBbits.RB5) {PORTB = 0x00; return '8';}
  5648  001620  AA81               	btfss	3969,5,c	;volatile
  5649  001622  D004               	goto	l268
  5650  001624  0E00               	movlw	0
  5651  001626  6E81               	movwf	3969,c	;volatile
  5652  001628  0E38               	movlw	56
  5653  00162A  0012               	return	
  5654  00162C                     l268:
  5655                           
  5656                           ;main.c: 315: if (PORTBbits.RB6) {PORTB = 0x00; return '0';}
  5657  00162C  AC81               	btfss	3969,6,c	;volatile
  5658  00162E  D004               	goto	l3481
  5659  001630  0E00               	movlw	0
  5660  001632  6E81               	movwf	3969,c	;volatile
  5661  001634  0E30               	movlw	48
  5662  001636  0012               	return	
  5663  001638                     l3481:
  5664                           
  5665                           ;main.c: 316: PORTB = 0b00000100;
  5666  001638  0E04               	movlw	4
  5667  00163A  6E81               	movwf	3969,c	;volatile
  5668                           
  5669                           ;main.c: 318: if (PORTBbits.RB3) {PORTB = 0x00; return '3';}
  5670  00163C  A681               	btfss	3969,3,c	;volatile
  5671  00163E  D004               	goto	l270
  5672  001640  0E00               	movlw	0
  5673  001642  6E81               	movwf	3969,c	;volatile
  5674  001644  0E33               	movlw	51
  5675  001646  0012               	return	
  5676  001648                     l270:
  5677                           
  5678                           ;main.c: 319: if (PORTBbits.RB4) {PORTB = 0x00; return '6';}
  5679  001648  A881               	btfss	3969,4,c	;volatile
  5680  00164A  D004               	goto	l271
  5681  00164C  0E00               	movlw	0
  5682  00164E  6E81               	movwf	3969,c	;volatile
  5683  001650  0E36               	movlw	54
  5684  001652  0012               	return	
  5685  001654                     l271:
  5686                           
  5687                           ;main.c: 320: if (PORTBbits.RB5) {PORTB = 0x00; return '9';}
  5688  001654  AA81               	btfss	3969,5,c	;volatile
  5689  001656  D004               	goto	l272
  5690  001658  0E00               	movlw	0
  5691  00165A  6E81               	movwf	3969,c	;volatile
  5692  00165C  0E39               	movlw	57
  5693  00165E  0012               	return	
  5694  001660                     l272:
  5695                           
  5696                           ;main.c: 321: if (PORTBbits.RB6) {PORTB = 0x00; return '#';}
  5697  001660  AC81               	btfss	3969,6,c	;volatile
  5698  001662  D004               	goto	l3509
  5699  001664  0E00               	movlw	0
  5700  001666  6E81               	movwf	3969,c	;volatile
  5701  001668  0E23               	movlw	35
  5702  00166A  0012               	return	
  5703  00166C                     l3509:
  5704                           
  5705                           ;main.c: 322: return '_';
  5706  00166C  0E5F               	movlw	95
  5707  00166E  0012               	return	
  5708  001670                     __end_of_read_keypad:
  5709                           	opt stack 0
  5710                           tblptru	equ	0xFF8
  5711                           tblptrh	equ	0xFF7
  5712                           tblptrl	equ	0xFF6
  5713                           tablat	equ	0xFF5
  5714                           prodh	equ	0xFF4
  5715                           prodl	equ	0xFF3
  5716                           intcon	equ	0xFF2
  5717                           indf0	equ	0xFEF
  5718                           postinc0	equ	0xFEE
  5719                           fsr0h	equ	0xFEA
  5720                           fsr0l	equ	0xFE9
  5721                           wreg	equ	0xFE8
  5722                           indf1	equ	0xFE7
  5723                           postdec1	equ	0xFE5
  5724                           plusw1	equ	0xFE3
  5725                           fsr1h	equ	0xFE2
  5726                           fsr1l	equ	0xFE1
  5727                           indf2	equ	0xFDF
  5728                           postinc2	equ	0xFDE
  5729                           plusw2	equ	0xFDB
  5730                           fsr2h	equ	0xFDA
  5731                           fsr2l	equ	0xFD9
  5732                           status	equ	0xFD8
  5733                           
  5734 ;; *************** function _Eeprom_Write_Byte *****************
  5735 ;; Defined at:
  5736 ;;		line 43 in file "eeprom.h"
  5737 ;; Parameters:    Size  Location     Type
  5738 ;;  address         1    wreg     unsigned char 
  5739 ;;  data            1   15[COMRAM] unsigned char 
  5740 ;; Auto vars:     Size  Location     Type
  5741 ;;  address         1   16[COMRAM] unsigned char 
  5742 ;; Return value:  Size  Location     Type
  5743 ;;                  1    wreg      void 
  5744 ;; Registers used:
  5745 ;;		wreg, status,2
  5746 ;; Tracked objects:
  5747 ;;		On entry : 0/0
  5748 ;;		On exit  : 0/0
  5749 ;;		Unchanged: 0/0
  5750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5751 ;;      Params:         1       0       0       0       0       0       0
  5752 ;;      Locals:         1       0       0       0       0       0       0
  5753 ;;      Temps:          0       0       0       0       0       0       0
  5754 ;;      Totals:         2       0       0       0       0       0       0
  5755 ;;Total ram usage:        2 bytes
  5756 ;; Hardware stack levels used:    1
  5757 ;; Hardware stack levels required when called:    1
  5758 ;; This function calls:
  5759 ;;		Nothing
  5760 ;; This function is called by:
  5761 ;;		_start_routine
  5762 ;; This function uses a non-reentrant model
  5763 ;;
  5764                           
  5765                           	psect	text11
  5766  001A70                     __ptext11:
  5767                           	opt stack 0
  5768  001A70                     _Eeprom_Write_Byte:
  5769                           	opt stack 28
  5770                           
  5771                           ;incstack = 0
  5772                           ;Eeprom_Write_Byte@address stored from wreg
  5773  001A70  6E11               	movwf	Eeprom_Write_Byte@address,c
  5774                           
  5775                           ;eeprom.h: 46: EEADR = (unsigned char)address;
  5776  001A72  C011  FFA9         	movff	Eeprom_Write_Byte@address,4009	;volatile
  5777                           
  5778                           ;eeprom.h: 48: EEDATA = data;
  5779  001A76  C010  FFA8         	movff	Eeprom_Write_Byte@data,4008	;volatile
  5780                           
  5781                           ;eeprom.h: 49: EECON1bits.EEPGD = 0;
  5782  001A7A  9EA6               	bcf	4006,7,c	;volatile
  5783                           
  5784                           ;eeprom.h: 50: EECON1bits.CFGS = 0;
  5785  001A7C  9CA6               	bcf	4006,6,c	;volatile
  5786                           
  5787                           ;eeprom.h: 51: EECON1bits.WREN = 1;
  5788  001A7E  84A6               	bsf	4006,2,c	;volatile
  5789                           
  5790                           ;eeprom.h: 55: EECON2 = 0x55;
  5791  001A80  0E55               	movlw	85
  5792  001A82  6EA7               	movwf	4007,c	;volatile
  5793                           
  5794                           ;eeprom.h: 56: EECON2 = 0xAA;
  5795  001A84  0EAA               	movlw	170
  5796  001A86  6EA7               	movwf	4007,c	;volatile
  5797                           
  5798                           ;eeprom.h: 57: EECON1bits.WR = 1;
  5799  001A88  82A6               	bsf	4006,1,c	;volatile
  5800  001A8A                     l153:
  5801  001A8A  A8A1               	btfss	4001,4,c	;volatile
  5802  001A8C  D7FE               	goto	l153
  5803                           
  5804                           ;eeprom.h: 63: }
  5805                           ;eeprom.h: 65: PIR2bits.EEIF = 0;
  5806  001A8E  98A1               	bcf	4001,4,c	;volatile
  5807                           
  5808                           ;eeprom.h: 66: EECON1bits.WREN = 0;
  5809  001A90  94A6               	bcf	4006,2,c	;volatile
  5810  001A92  0012               	return		;funcret
  5811  001A94                     __end_of_Eeprom_Write_Byte:
  5812                           	opt stack 0
  5813                           tblptru	equ	0xFF8
  5814                           tblptrh	equ	0xFF7
  5815                           tblptrl	equ	0xFF6
  5816                           tablat	equ	0xFF5
  5817                           prodh	equ	0xFF4
  5818                           prodl	equ	0xFF3
  5819                           intcon	equ	0xFF2
  5820                           indf0	equ	0xFEF
  5821                           postinc0	equ	0xFEE
  5822                           fsr0h	equ	0xFEA
  5823                           fsr0l	equ	0xFE9
  5824                           wreg	equ	0xFE8
  5825                           indf1	equ	0xFE7
  5826                           postdec1	equ	0xFE5
  5827                           plusw1	equ	0xFE3
  5828                           fsr1h	equ	0xFE2
  5829                           fsr1l	equ	0xFE1
  5830                           indf2	equ	0xFDF
  5831                           postinc2	equ	0xFDE
  5832                           plusw2	equ	0xFDB
  5833                           fsr2h	equ	0xFDA
  5834                           fsr2l	equ	0xFD9
  5835                           status	equ	0xFD8
  5836                           
  5837 ;; *************** function _mcu_initialise *****************
  5838 ;; Defined at:
  5839 ;;		line 271 in file "main.c"
  5840 ;; Parameters:    Size  Location     Type
  5841 ;;		None
  5842 ;; Auto vars:     Size  Location     Type
  5843 ;;		None
  5844 ;; Return value:  Size  Location     Type
  5845 ;;                  1    wreg      void 
  5846 ;; Registers used:
  5847 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5848 ;; Tracked objects:
  5849 ;;		On entry : 0/0
  5850 ;;		On exit  : 0/0
  5851 ;;		Unchanged: 0/0
  5852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5853 ;;      Params:         0       0       0       0       0       0       0
  5854 ;;      Locals:         0       0       0       0       0       0       0
  5855 ;;      Temps:          0       0       0       0       0       0       0
  5856 ;;      Totals:         0       0       0       0       0       0       0
  5857 ;;Total ram usage:        0 bytes
  5858 ;; Hardware stack levels used:    1
  5859 ;; Hardware stack levels required when called:    2
  5860 ;; This function calls:
  5861 ;;		_Eeprom_Read_Byte
  5862 ;; This function is called by:
  5863 ;;		_main
  5864 ;; This function uses a non-reentrant model
  5865 ;;
  5866                           
  5867                           	psect	text12
  5868  0018AE                     __ptext12:
  5869                           	opt stack 0
  5870  0018AE                     _mcu_initialise:
  5871                           	opt stack 28
  5872                           
  5873                           ;main.c: 274: I2C_ADDR = Eeprom_Read_Byte(EEP_I2C_ADDR);
  5874                           
  5875                           ;incstack = 0
  5876  0018AE  0100               	movlb	0	; () banked
  5877  0018B0  51CC               	movf	_EEP_I2C_ADDR& (0+255),w,b
  5878  0018B2  EC73  F00D         	call	_Eeprom_Read_Byte
  5879  0018B6  0100               	movlb	0	; () banked
  5880  0018B8  6FCE               	movwf	_I2C_ADDR& (0+255),b
  5881                           
  5882                           ; BSR set to: 0
  5883                           ;main.c: 275: Machine_ID = I2C_ADDR - 0x0F;
  5884  0018BA  0100               	movlb	0	; () banked
  5885  0018BC  51CE               	movf	_I2C_ADDR& (0+255),w,b
  5886  0018BE  0FF1               	addlw	241
  5887  0018C0  0100               	movlb	0	; () banked
  5888  0018C2  6FCF               	movwf	_Machine_ID& (0+255),b
  5889                           
  5890                           ; BSR set to: 0
  5891                           ;main.c: 278: OSCCON = 0x60;
  5892  0018C4  0E60               	movlw	96
  5893  0018C6  6ED3               	movwf	4051,c	;volatile
  5894                           
  5895                           ; BSR set to: 0
  5896                           ;main.c: 279: OSCTUNEbits.PLLEN = 0;
  5897  0018C8  9C9B               	bcf	3995,6,c	;volatile
  5898                           
  5899                           ; BSR set to: 0
  5900                           ;main.c: 281: TRISA = 0x00;
  5901  0018CA  0E00               	movlw	0
  5902  0018CC  6E92               	movwf	3986,c	;volatile
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;main.c: 282: TRISB = 0x01;
  5906  0018CE  0E01               	movlw	1
  5907  0018D0  6E93               	movwf	3987,c	;volatile
  5908                           
  5909                           ; BSR set to: 0
  5910                           ;main.c: 283: TRISC = 0b00011000;
  5911  0018D2  0E18               	movlw	24
  5912  0018D4  6E94               	movwf	3988,c	;volatile
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;main.c: 284: TRISD = 0x00;
  5916  0018D6  0E00               	movlw	0
  5917  0018D8  6E95               	movwf	3989,c	;volatile
  5918                           
  5919                           ; BSR set to: 0
  5920                           ;main.c: 285: LATC = 0b00011000;
  5921  0018DA  0E18               	movlw	24
  5922  0018DC  6E8B               	movwf	3979,c	;volatile
  5923                           
  5924                           ; BSR set to: 0
  5925                           ;main.c: 287: SSPADD = I2C_ADDR * 2;
  5926  0018DE  0100               	movlb	0	; () banked
  5927  0018E0  51CE               	movf	_I2C_ADDR& (0+255),w,b
  5928  0018E2  0D02               	mullw	2
  5929  0018E4  CFF3 FFC8          	movff	prodl,4040	;volatile
  5930                           
  5931                           ; BSR set to: 0
  5932                           ;main.c: 288: SSPCON1 = 0x36;
  5933  0018E8  0E36               	movlw	54
  5934  0018EA  6EC6               	movwf	4038,c	;volatile
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;main.c: 291: SSPSTAT = 0x00;
  5938  0018EC  0E00               	movlw	0
  5939  0018EE  6EC7               	movwf	4039,c	;volatile
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;main.c: 292: SSPCON2 = 0x01;
  5943  0018F0  0E01               	movlw	1
  5944  0018F2  6EC5               	movwf	4037,c	;volatile
  5945                           
  5946                           ; BSR set to: 0
  5947                           ;main.c: 294: PIR1bits.SSPIF = 0;
  5948  0018F4  969E               	bcf	3998,3,c	;volatile
  5949                           
  5950                           ; BSR set to: 0
  5951                           ;main.c: 295: PIE1bits.SSPIE = 1;
  5952  0018F6  869D               	bsf	3997,3,c	;volatile
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;main.c: 296: INTCONbits.GIE_GIEH = 1;
  5956  0018F8  8EF2               	bsf	intcon,7,c	;volatile
  5957                           
  5958                           ; BSR set to: 0
  5959                           ;main.c: 297: INTCONbits.PEIE_GIEL = 1;
  5960  0018FA  8CF2               	bsf	intcon,6,c	;volatile
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;main.c: 298: INTCONbits.RBIE = 0;
  5964  0018FC  96F2               	bcf	intcon,3,c	;volatile
  5965                           
  5966                           ; BSR set to: 0
  5967  0018FE  0012               	return		;funcret
  5968  001900                     __end_of_mcu_initialise:
  5969                           	opt stack 0
  5970                           tblptru	equ	0xFF8
  5971                           tblptrh	equ	0xFF7
  5972                           tblptrl	equ	0xFF6
  5973                           tablat	equ	0xFF5
  5974                           prodh	equ	0xFF4
  5975                           prodl	equ	0xFF3
  5976                           intcon	equ	0xFF2
  5977                           indf0	equ	0xFEF
  5978                           postinc0	equ	0xFEE
  5979                           fsr0h	equ	0xFEA
  5980                           fsr0l	equ	0xFE9
  5981                           wreg	equ	0xFE8
  5982                           indf1	equ	0xFE7
  5983                           postdec1	equ	0xFE5
  5984                           plusw1	equ	0xFE3
  5985                           fsr1h	equ	0xFE2
  5986                           fsr1l	equ	0xFE1
  5987                           indf2	equ	0xFDF
  5988                           postinc2	equ	0xFDE
  5989                           plusw2	equ	0xFDB
  5990                           fsr2h	equ	0xFDA
  5991                           fsr2l	equ	0xFD9
  5992                           status	equ	0xFD8
  5993                           
  5994 ;; *************** function _Eeprom_Read_Byte *****************
  5995 ;; Defined at:
  5996 ;;		line 20 in file "eeprom.h"
  5997 ;; Parameters:    Size  Location     Type
  5998 ;;  address         1    wreg     unsigned char 
  5999 ;; Auto vars:     Size  Location     Type
  6000 ;;  address         1   15[COMRAM] unsigned char 
  6001 ;; Return value:  Size  Location     Type
  6002 ;;                  1    wreg      unsigned char 
  6003 ;; Registers used:
  6004 ;;		wreg, status,2
  6005 ;; Tracked objects:
  6006 ;;		On entry : 0/0
  6007 ;;		On exit  : 0/0
  6008 ;;		Unchanged: 0/0
  6009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6010 ;;      Params:         0       0       0       0       0       0       0
  6011 ;;      Locals:         1       0       0       0       0       0       0
  6012 ;;      Temps:          0       0       0       0       0       0       0
  6013 ;;      Totals:         1       0       0       0       0       0       0
  6014 ;;Total ram usage:        1 bytes
  6015 ;; Hardware stack levels used:    1
  6016 ;; Hardware stack levels required when called:    1
  6017 ;; This function calls:
  6018 ;;		Nothing
  6019 ;; This function is called by:
  6020 ;;		_mcu_initialise
  6021 ;; This function uses a non-reentrant model
  6022 ;;
  6023                           
  6024                           	psect	text13
  6025  001AE6                     __ptext13:
  6026                           	opt stack 0
  6027  001AE6                     _Eeprom_Read_Byte:
  6028                           	opt stack 28
  6029                           
  6030                           ; BSR set to: 0
  6031                           ;incstack = 0
  6032                           ;Eeprom_Read_Byte@address stored from wreg
  6033  001AE6  6E10               	movwf	Eeprom_Read_Byte@address,c
  6034                           
  6035                           ;eeprom.h: 24: EEADR = (unsigned char)address;
  6036  001AE8  C010  FFA9         	movff	Eeprom_Read_Byte@address,4009	;volatile
  6037                           
  6038                           ;eeprom.h: 26: EECON1bits.EEPGD = 0;
  6039  001AEC  9EA6               	bcf	4006,7,c	;volatile
  6040                           
  6041                           ;eeprom.h: 27: EECON1bits.CFGS = 0;
  6042  001AEE  9CA6               	bcf	4006,6,c	;volatile
  6043                           
  6044                           ;eeprom.h: 28: EECON1bits.RD = 1;
  6045  001AF0  80A6               	bsf	4006,0,c	;volatile
  6046  001AF2                     l147:
  6047  001AF2  B0A6               	btfsc	4006,0,c	;volatile
  6048  001AF4  D7FE               	goto	l147
  6049                           
  6050                           ;eeprom.h: 34: return EEDATA;
  6051  001AF6  50A8               	movf	4008,w,c	;volatile
  6052  001AF8  0012               	return		;funcret
  6053  001AFA                     __end_of_Eeprom_Read_Byte:
  6054                           	opt stack 0
  6055                           tblptru	equ	0xFF8
  6056                           tblptrh	equ	0xFF7
  6057                           tblptrl	equ	0xFF6
  6058                           tablat	equ	0xFF5
  6059                           prodh	equ	0xFF4
  6060                           prodl	equ	0xFF3
  6061                           intcon	equ	0xFF2
  6062                           indf0	equ	0xFEF
  6063                           postinc0	equ	0xFEE
  6064                           fsr0h	equ	0xFEA
  6065                           fsr0l	equ	0xFE9
  6066                           wreg	equ	0xFE8
  6067                           indf1	equ	0xFE7
  6068                           postdec1	equ	0xFE5
  6069                           plusw1	equ	0xFE3
  6070                           fsr1h	equ	0xFE2
  6071                           fsr1l	equ	0xFE1
  6072                           indf2	equ	0xFDF
  6073                           postinc2	equ	0xFDE
  6074                           plusw2	equ	0xFDB
  6075                           fsr2h	equ	0xFDA
  6076                           fsr2l	equ	0xFD9
  6077                           status	equ	0xFD8
  6078                           
  6079 ;; *************** function _load_i2c_registers *****************
  6080 ;; Defined at:
  6081 ;;		line 333 in file "main.c"
  6082 ;; Parameters:    Size  Location     Type
  6083 ;;		None
  6084 ;; Auto vars:     Size  Location     Type
  6085 ;;  i               2   29[COMRAM] int 
  6086 ;;  i               2   33[COMRAM] int 
  6087 ;;  i               2   31[COMRAM] int 
  6088 ;;  checksum        2   27[COMRAM] int 
  6089 ;; Return value:  Size  Location     Type
  6090 ;;                  1    wreg      void 
  6091 ;; Registers used:
  6092 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6093 ;; Tracked objects:
  6094 ;;		On entry : 0/0
  6095 ;;		On exit  : 0/0
  6096 ;;		Unchanged: 0/0
  6097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6098 ;;      Params:         0       0       0       0       0       0       0
  6099 ;;      Locals:         8       0       0       0       0       0       0
  6100 ;;      Temps:          4       0       0       0       0       0       0
  6101 ;;      Totals:        12       0       0       0       0       0       0
  6102 ;;Total ram usage:       12 bytes
  6103 ;; Hardware stack levels used:    1
  6104 ;; Hardware stack levels required when called:    2
  6105 ;; This function calls:
  6106 ;;		___awdiv
  6107 ;; This function is called by:
  6108 ;;		_main
  6109 ;; This function uses a non-reentrant model
  6110 ;;
  6111                           
  6112                           	psect	text14
  6113  0014E0                     __ptext14:
  6114                           	opt stack 0
  6115  0014E0                     _load_i2c_registers:
  6116                           	opt stack 28
  6117                           
  6118                           ;main.c: 342: for (int i = 0; i < 9; i++)
  6119                           
  6120                           ;incstack = 0
  6121  0014E0  0E00               	movlw	0
  6122  0014E2  6E21               	movwf	load_i2c_registers@i+1,c
  6123  0014E4  0E00               	movlw	0
  6124  0014E6  6E20               	movwf	load_i2c_registers@i,c
  6125  0014E8                     l4031:
  6126  0014E8  BE21               	btfsc	load_i2c_registers@i+1,7,c
  6127  0014EA  D006               	goto	l4035
  6128  0014EC  5021               	movf	load_i2c_registers@i+1,w,c
  6129  0014EE  E115               	bnz	l4041
  6130  0014F0  0E09               	movlw	9
  6131  0014F2  5C20               	subwf	load_i2c_registers@i,w,c
  6132  0014F4  B0D8               	btfsc	status,0,c
  6133  0014F6  D011               	goto	l4041
  6134  0014F8                     l4035:
  6135                           
  6136                           ;main.c: 343: i2c_r_reg[i] = current_user[i];
  6137  0014F8  0EC3               	movlw	low _current_user
  6138  0014FA  2420               	addwf	load_i2c_registers@i,w,c
  6139  0014FC  6ED9               	movwf	fsr2l,c
  6140  0014FE  0E00               	movlw	high _current_user
  6141  001500  2021               	addwfc	load_i2c_registers@i+1,w,c
  6142  001502  6EDA               	movwf	fsr2h,c
  6143  001504  0E60               	movlw	low _i2c_r_reg
  6144  001506  2420               	addwf	load_i2c_registers@i,w,c
  6145  001508  6EE1               	movwf	fsr1l,c
  6146  00150A  0E00               	movlw	high _i2c_r_reg
  6147  00150C  2021               	addwfc	load_i2c_registers@i+1,w,c
  6148  00150E  6EE2               	movwf	fsr1h,c
  6149  001510  CFDF FFE7          	movff	indf2,indf1
  6150  001514  4A20               	infsnz	load_i2c_registers@i,f,c
  6151  001516  2A21               	incf	load_i2c_registers@i+1,f,c
  6152  001518  D7E7               	goto	l4031
  6153  00151A                     l4041:
  6154                           
  6155                           ;main.c: 345: for (int i = 9; i < 18; i++)
  6156  00151A  0E00               	movlw	0
  6157  00151C  6E23               	movwf	load_i2c_registers@i_840+1,c
  6158  00151E  0E09               	movlw	9
  6159  001520  6E22               	movwf	load_i2c_registers@i_840,c
  6160  001522                     l4043:
  6161  001522  BE23               	btfsc	load_i2c_registers@i_840+1,7,c
  6162  001524  D006               	goto	l4047
  6163  001526  5023               	movf	load_i2c_registers@i_840+1,w,c
  6164  001528  E121               	bnz	l4053
  6165  00152A  0E12               	movlw	18
  6166  00152C  5C22               	subwf	load_i2c_registers@i_840,w,c
  6167  00152E  B0D8               	btfsc	status,0,c
  6168  001530  D01D               	goto	l4053
  6169  001532                     l4047:
  6170                           
  6171                           ;main.c: 346: i2c_r_reg[i] = current_pin[i - 9];
  6172  001532  0EF7               	movlw	247
  6173  001534  6E18               	movwf	??_load_i2c_registers& (0+255),c
  6174  001536  0EFF               	movlw	255
  6175  001538  6E19               	movwf	(??_load_i2c_registers+1)& (0+255),c
  6176  00153A  C022  F01A         	movff	load_i2c_registers@i_840,??_load_i2c_registers+2
  6177  00153E  C023  F01B         	movff	load_i2c_registers@i_840+1,??_load_i2c_registers+3
  6178  001542  5018               	movf	??_load_i2c_registers,w,c
  6179  001544  261A               	addwf	??_load_i2c_registers+2,f,c
  6180  001546  5019               	movf	??_load_i2c_registers+1,w,c
  6181  001548  221B               	addwfc	??_load_i2c_registers+3,f,c
  6182  00154A  0EBA               	movlw	low _current_pin
  6183  00154C  241A               	addwf	??_load_i2c_registers+2,w,c
  6184  00154E  6ED9               	movwf	fsr2l,c
  6185  001550  0E00               	movlw	high _current_pin
  6186  001552  201B               	addwfc	??_load_i2c_registers+3,w,c
  6187  001554  6EDA               	movwf	fsr2h,c
  6188  001556  0E60               	movlw	low _i2c_r_reg
  6189  001558  2422               	addwf	load_i2c_registers@i_840,w,c
  6190  00155A  6EE1               	movwf	fsr1l,c
  6191  00155C  0E00               	movlw	high _i2c_r_reg
  6192  00155E  2023               	addwfc	load_i2c_registers@i_840+1,w,c
  6193  001560  6EE2               	movwf	fsr1h,c
  6194  001562  CFDF FFE7          	movff	indf2,indf1
  6195  001566  4A22               	infsnz	load_i2c_registers@i_840,f,c
  6196  001568  2A23               	incf	load_i2c_registers@i_840+1,f,c
  6197  00156A  D7DB               	goto	l4043
  6198  00156C                     l4053:
  6199                           
  6200                           ;main.c: 349: int checksum = 0x00;
  6201  00156C  0E00               	movlw	0
  6202  00156E  6E1D               	movwf	load_i2c_registers@checksum+1,c
  6203  001570  0E00               	movlw	0
  6204  001572  6E1C               	movwf	load_i2c_registers@checksum,c
  6205                           
  6206                           ;main.c: 350: for (int i = 0; i < 31; i++)
  6207  001574  0E00               	movlw	0
  6208  001576  6E1F               	movwf	load_i2c_registers@i_842+1,c
  6209  001578  0E00               	movlw	0
  6210  00157A  6E1E               	movwf	load_i2c_registers@i_842,c
  6211  00157C                     l4055:
  6212  00157C  BE1F               	btfsc	load_i2c_registers@i_842+1,7,c
  6213  00157E  D006               	goto	l4059
  6214  001580  501F               	movf	load_i2c_registers@i_842+1,w,c
  6215  001582  E113               	bnz	l4065
  6216  001584  0E1F               	movlw	31
  6217  001586  5C1E               	subwf	load_i2c_registers@i_842,w,c
  6218  001588  B0D8               	btfsc	status,0,c
  6219  00158A  D00F               	goto	l4065
  6220  00158C                     l4059:
  6221                           
  6222                           ;main.c: 351: {
  6223                           ;main.c: 352: checksum += i2c_r_reg[i];
  6224  00158C  0E60               	movlw	low _i2c_r_reg
  6225  00158E  241E               	addwf	load_i2c_registers@i_842,w,c
  6226  001590  6ED9               	movwf	fsr2l,c
  6227  001592  0E00               	movlw	high _i2c_r_reg
  6228  001594  201F               	addwfc	load_i2c_registers@i_842+1,w,c
  6229  001596  6EDA               	movwf	fsr2h,c
  6230  001598  50DF               	movf	indf2,w,c
  6231  00159A  6E18               	movwf	??_load_i2c_registers& (0+255),c
  6232  00159C  5018               	movf	??_load_i2c_registers,w,c
  6233  00159E  261C               	addwf	load_i2c_registers@checksum,f,c
  6234  0015A0  0E00               	movlw	0
  6235  0015A2  221D               	addwfc	load_i2c_registers@checksum+1,f,c
  6236  0015A4  4A1E               	infsnz	load_i2c_registers@i_842,f,c
  6237  0015A6  2A1F               	incf	load_i2c_registers@i_842+1,f,c
  6238  0015A8  D7E9               	goto	l4055
  6239  0015AA                     l4065:
  6240                           
  6241                           ;main.c: 353: }
  6242                           ;main.c: 354: checksum /= 32;
  6243  0015AA  C01C  F010         	movff	load_i2c_registers@checksum,___awdiv@dividend
  6244  0015AE  C01D  F011         	movff	load_i2c_registers@checksum+1,___awdiv@dividend+1
  6245  0015B2  0E00               	movlw	0
  6246  0015B4  6E13               	movwf	___awdiv@divisor+1,c
  6247  0015B6  0E20               	movlw	32
  6248  0015B8  6E12               	movwf	___awdiv@divisor,c
  6249  0015BA  EC38  F00B         	call	___awdiv	;wreg free
  6250  0015BE  C010  F01C         	movff	?___awdiv,load_i2c_registers@checksum
  6251  0015C2  C011  F01D         	movff	?___awdiv+1,load_i2c_registers@checksum+1
  6252                           
  6253                           ;main.c: 355: i2c_r_reg[31] = checksum;
  6254  0015C6  C01C  F07F         	movff	load_i2c_registers@checksum,_i2c_r_reg+31	;volatile
  6255  0015CA  0012               	return		;funcret
  6256  0015CC                     __end_of_load_i2c_registers:
  6257                           	opt stack 0
  6258                           tblptru	equ	0xFF8
  6259                           tblptrh	equ	0xFF7
  6260                           tblptrl	equ	0xFF6
  6261                           tablat	equ	0xFF5
  6262                           prodh	equ	0xFF4
  6263                           prodl	equ	0xFF3
  6264                           intcon	equ	0xFF2
  6265                           indf0	equ	0xFEF
  6266                           postinc0	equ	0xFEE
  6267                           fsr0h	equ	0xFEA
  6268                           fsr0l	equ	0xFE9
  6269                           wreg	equ	0xFE8
  6270                           indf1	equ	0xFE7
  6271                           postdec1	equ	0xFE5
  6272                           plusw1	equ	0xFE3
  6273                           fsr1h	equ	0xFE2
  6274                           fsr1l	equ	0xFE1
  6275                           indf2	equ	0xFDF
  6276                           postinc2	equ	0xFDE
  6277                           plusw2	equ	0xFDB
  6278                           fsr2h	equ	0xFDA
  6279                           fsr2l	equ	0xFD9
  6280                           status	equ	0xFD8
  6281                           
  6282 ;; *************** function ___awdiv *****************
  6283 ;; Defined at:
  6284 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  6285 ;; Parameters:    Size  Location     Type
  6286 ;;  dividend        2   15[COMRAM] int 
  6287 ;;  divisor         2   17[COMRAM] int 
  6288 ;; Auto vars:     Size  Location     Type
  6289 ;;  quotient        2   21[COMRAM] int 
  6290 ;;  sign            1   20[COMRAM] unsigned char 
  6291 ;;  counter         1   19[COMRAM] unsigned char 
  6292 ;; Return value:  Size  Location     Type
  6293 ;;                  2   15[COMRAM] int 
  6294 ;; Registers used:
  6295 ;;		wreg, status,2, status,0
  6296 ;; Tracked objects:
  6297 ;;		On entry : 0/0
  6298 ;;		On exit  : 0/0
  6299 ;;		Unchanged: 0/0
  6300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6301 ;;      Params:         4       0       0       0       0       0       0
  6302 ;;      Locals:         4       0       0       0       0       0       0
  6303 ;;      Temps:          0       0       0       0       0       0       0
  6304 ;;      Totals:         8       0       0       0       0       0       0
  6305 ;;Total ram usage:        8 bytes
  6306 ;; Hardware stack levels used:    1
  6307 ;; Hardware stack levels required when called:    1
  6308 ;; This function calls:
  6309 ;;		Nothing
  6310 ;; This function is called by:
  6311 ;;		_main
  6312 ;;		_load_i2c_registers
  6313 ;;		_start_routine
  6314 ;; This function uses a non-reentrant model
  6315 ;;
  6316                           
  6317                           	psect	text15
  6318  001670                     __ptext15:
  6319                           	opt stack 0
  6320  001670                     ___awdiv:
  6321                           	opt stack 28
  6322                           
  6323                           ;incstack = 0
  6324  001670  0E00               	movlw	0
  6325  001672  6E15               	movwf	___awdiv@sign,c
  6326  001674  AE13               	btfss	___awdiv@divisor+1,7,c
  6327  001676  D006               	goto	l3645
  6328  001678  6C12               	negf	___awdiv@divisor,c
  6329  00167A  1E13               	comf	___awdiv@divisor+1,f,c
  6330  00167C  B0D8               	btfsc	status,0,c
  6331  00167E  2A13               	incf	___awdiv@divisor+1,f,c
  6332  001680  0E01               	movlw	1
  6333  001682  6E15               	movwf	___awdiv@sign,c
  6334  001684                     l3645:
  6335  001684  AE11               	btfss	___awdiv@dividend+1,7,c
  6336  001686  D006               	goto	l3651
  6337  001688  6C10               	negf	___awdiv@dividend,c
  6338  00168A  1E11               	comf	___awdiv@dividend+1,f,c
  6339  00168C  B0D8               	btfsc	status,0,c
  6340  00168E  2A11               	incf	___awdiv@dividend+1,f,c
  6341  001690  0E01               	movlw	1
  6342  001692  1A15               	xorwf	___awdiv@sign,f,c
  6343  001694                     l3651:
  6344  001694  0E00               	movlw	0
  6345  001696  6E17               	movwf	___awdiv@quotient+1,c
  6346  001698  0E00               	movlw	0
  6347  00169A  6E16               	movwf	___awdiv@quotient,c
  6348  00169C  5012               	movf	___awdiv@divisor,w,c
  6349  00169E  1013               	iorwf	___awdiv@divisor+1,w,c
  6350  0016A0  B4D8               	btfsc	status,2,c
  6351  0016A2  D01C               	goto	l3673
  6352  0016A4  0E01               	movlw	1
  6353  0016A6  6E14               	movwf	___awdiv@counter,c
  6354  0016A8  D004               	goto	l3659
  6355  0016AA                     l3657:
  6356  0016AA  90D8               	bcf	status,0,c
  6357  0016AC  3612               	rlcf	___awdiv@divisor,f,c
  6358  0016AE  3613               	rlcf	___awdiv@divisor+1,f,c
  6359  0016B0  2A14               	incf	___awdiv@counter,f,c
  6360  0016B2                     l3659:
  6361  0016B2  AE13               	btfss	___awdiv@divisor+1,7,c
  6362  0016B4  D7FA               	goto	l3657
  6363  0016B6                     l3661:
  6364  0016B6  90D8               	bcf	status,0,c
  6365  0016B8  3616               	rlcf	___awdiv@quotient,f,c
  6366  0016BA  3617               	rlcf	___awdiv@quotient+1,f,c
  6367  0016BC  5012               	movf	___awdiv@divisor,w,c
  6368  0016BE  5C10               	subwf	___awdiv@dividend,w,c
  6369  0016C0  5013               	movf	___awdiv@divisor+1,w,c
  6370  0016C2  5811               	subwfb	___awdiv@dividend+1,w,c
  6371  0016C4  A0D8               	btfss	status,0,c
  6372  0016C6  D005               	goto	l3669
  6373  0016C8  5012               	movf	___awdiv@divisor,w,c
  6374  0016CA  5E10               	subwf	___awdiv@dividend,f,c
  6375  0016CC  5013               	movf	___awdiv@divisor+1,w,c
  6376  0016CE  5A11               	subwfb	___awdiv@dividend+1,f,c
  6377  0016D0  8016               	bsf	___awdiv@quotient,0,c
  6378  0016D2                     l3669:
  6379  0016D2  90D8               	bcf	status,0,c
  6380  0016D4  3213               	rrcf	___awdiv@divisor+1,f,c
  6381  0016D6  3212               	rrcf	___awdiv@divisor,f,c
  6382  0016D8  2E14               	decfsz	___awdiv@counter,f,c
  6383  0016DA  D7ED               	goto	l3661
  6384  0016DC                     l3673:
  6385  0016DC  5015               	movf	___awdiv@sign,w,c
  6386  0016DE  B4D8               	btfsc	status,2,c
  6387  0016E0  D004               	goto	l3677
  6388  0016E2  6C16               	negf	___awdiv@quotient,c
  6389  0016E4  1E17               	comf	___awdiv@quotient+1,f,c
  6390  0016E6  B0D8               	btfsc	status,0,c
  6391  0016E8  2A17               	incf	___awdiv@quotient+1,f,c
  6392  0016EA                     l3677:
  6393  0016EA  C016  F010         	movff	___awdiv@quotient,?___awdiv
  6394  0016EE  C017  F011         	movff	___awdiv@quotient+1,?___awdiv+1
  6395  0016F2  0012               	return	
  6396  0016F4                     __end_of___awdiv:
  6397                           	opt stack 0
  6398                           tblptru	equ	0xFF8
  6399                           tblptrh	equ	0xFF7
  6400                           tblptrl	equ	0xFF6
  6401                           tablat	equ	0xFF5
  6402                           prodh	equ	0xFF4
  6403                           prodl	equ	0xFF3
  6404                           intcon	equ	0xFF2
  6405                           indf0	equ	0xFEF
  6406                           postinc0	equ	0xFEE
  6407                           fsr0h	equ	0xFEA
  6408                           fsr0l	equ	0xFE9
  6409                           wreg	equ	0xFE8
  6410                           indf1	equ	0xFE7
  6411                           postdec1	equ	0xFE5
  6412                           plusw1	equ	0xFE3
  6413                           fsr1h	equ	0xFE2
  6414                           fsr1l	equ	0xFE1
  6415                           indf2	equ	0xFDF
  6416                           postinc2	equ	0xFDE
  6417                           plusw2	equ	0xFDB
  6418                           fsr2h	equ	0xFDA
  6419                           fsr2l	equ	0xFD9
  6420                           status	equ	0xFD8
  6421                           
  6422 ;; *************** function _Lcd_Init *****************
  6423 ;; Defined at:
  6424 ;;		line 76 in file "lcd.h"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;		None
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;		None
  6429 ;; Return value:  Size  Location     Type
  6430 ;;                  1    wreg      void 
  6431 ;; Registers used:
  6432 ;;		wreg, status,2, cstack
  6433 ;; Tracked objects:
  6434 ;;		On entry : 0/0
  6435 ;;		On exit  : 0/0
  6436 ;;		Unchanged: 0/0
  6437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6438 ;;      Params:         0       0       0       0       0       0       0
  6439 ;;      Locals:         0       0       0       0       0       0       0
  6440 ;;      Temps:          1       0       0       0       0       0       0
  6441 ;;      Totals:         1       0       0       0       0       0       0
  6442 ;;Total ram usage:        1 bytes
  6443 ;; Hardware stack levels used:    1
  6444 ;; Hardware stack levels required when called:    3
  6445 ;; This function calls:
  6446 ;;		_Lcd_Cmd
  6447 ;;		_Lcd_Port
  6448 ;; This function is called by:
  6449 ;;		_main
  6450 ;; This function uses a non-reentrant model
  6451 ;;
  6452                           
  6453                           	psect	text16
  6454  001772                     __ptext16:
  6455                           	opt stack 0
  6456  001772                     _Lcd_Init:
  6457                           	opt stack 27
  6458                           
  6459                           ;lcd.h: 78: Lcd_Port(0x00);
  6460                           
  6461                           ;incstack = 0
  6462  001772  0E00               	movlw	0
  6463  001774  EC0F  F00D         	call	_Lcd_Port
  6464                           
  6465                           ;lcd.h: 79: _delay((unsigned long)((20)*(16000000/4000.0)));
  6466  001778  0E68               	movlw	104
  6467  00177A  6E12               	movwf	??_Lcd_Init& (0+255),c
  6468  00177C  0EE4               	movlw	228
  6469  00177E                     u4527:
  6470  00177E  2EE8               	decfsz	wreg,f,c
  6471  001780  D7FE               	goto	u4527
  6472  001782  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
  6473  001784  D7FC               	goto	u4527
  6474  001786  F000 F000          	nop2	
  6475                           
  6476                           ;lcd.h: 80: Lcd_Cmd(0x03);
  6477  00178A  0E03               	movlw	3
  6478  00178C  EC67  F00D         	call	_Lcd_Cmd
  6479                           
  6480                           ;lcd.h: 81: _delay((unsigned long)((5)*(16000000/4000.0)));
  6481  001790  0E1A               	movlw	26
  6482  001792  6E12               	movwf	??_Lcd_Init& (0+255),c
  6483  001794  0EF8               	movlw	248
  6484  001796                     u4537:
  6485  001796  2EE8               	decfsz	wreg,f,c
  6486  001798  D7FE               	goto	u4537
  6487  00179A  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
  6488  00179C  D7FC               	goto	u4537
  6489  00179E  F000 F000          	nop2	
  6490                           
  6491                           ;lcd.h: 82: Lcd_Cmd(0x03);
  6492  0017A2  0E03               	movlw	3
  6493  0017A4  EC67  F00D         	call	_Lcd_Cmd
  6494                           
  6495                           ;lcd.h: 83: _delay((unsigned long)((11)*(16000000/4000.0)));
  6496  0017A8  0E3A               	movlw	58
  6497  0017AA  6E12               	movwf	??_Lcd_Init& (0+255),c
  6498  0017AC  0E23               	movlw	35
  6499  0017AE                     u4547:
  6500  0017AE  2EE8               	decfsz	wreg,f,c
  6501  0017B0  D7FE               	goto	u4547
  6502  0017B2  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
  6503  0017B4  D7FC               	goto	u4547
  6504  0017B6  F000               	nop	
  6505                           
  6506                           ;lcd.h: 84: Lcd_Cmd(0x03);
  6507  0017B8  0E03               	movlw	3
  6508  0017BA  EC67  F00D         	call	_Lcd_Cmd
  6509                           
  6510                           ;lcd.h: 86: Lcd_Cmd(0x02);
  6511  0017BE  0E02               	movlw	2
  6512  0017C0  EC67  F00D         	call	_Lcd_Cmd
  6513                           
  6514                           ;lcd.h: 87: Lcd_Cmd(0x02);
  6515  0017C4  0E02               	movlw	2
  6516  0017C6  EC67  F00D         	call	_Lcd_Cmd
  6517                           
  6518                           ;lcd.h: 88: Lcd_Cmd(0x08);
  6519  0017CA  0E08               	movlw	8
  6520  0017CC  EC67  F00D         	call	_Lcd_Cmd
  6521                           
  6522                           ;lcd.h: 89: Lcd_Cmd(0x00);
  6523  0017D0  0E00               	movlw	0
  6524  0017D2  EC67  F00D         	call	_Lcd_Cmd
  6525                           
  6526                           ;lcd.h: 90: Lcd_Cmd(0x0C);
  6527  0017D6  0E0C               	movlw	12
  6528  0017D8  EC67  F00D         	call	_Lcd_Cmd
  6529                           
  6530                           ;lcd.h: 91: Lcd_Cmd(0x00);
  6531  0017DC  0E00               	movlw	0
  6532  0017DE  EC67  F00D         	call	_Lcd_Cmd
  6533                           
  6534                           ;lcd.h: 92: Lcd_Cmd(0x06);
  6535  0017E2  0E06               	movlw	6
  6536  0017E4  EC67  F00D         	call	_Lcd_Cmd
  6537  0017E8  0012               	return		;funcret
  6538  0017EA                     __end_of_Lcd_Init:
  6539                           	opt stack 0
  6540                           tblptru	equ	0xFF8
  6541                           tblptrh	equ	0xFF7
  6542                           tblptrl	equ	0xFF6
  6543                           tablat	equ	0xFF5
  6544                           prodh	equ	0xFF4
  6545                           prodl	equ	0xFF3
  6546                           intcon	equ	0xFF2
  6547                           indf0	equ	0xFEF
  6548                           postinc0	equ	0xFEE
  6549                           fsr0h	equ	0xFEA
  6550                           fsr0l	equ	0xFE9
  6551                           wreg	equ	0xFE8
  6552                           indf1	equ	0xFE7
  6553                           postdec1	equ	0xFE5
  6554                           plusw1	equ	0xFE3
  6555                           fsr1h	equ	0xFE2
  6556                           fsr1l	equ	0xFE1
  6557                           indf2	equ	0xFDF
  6558                           postinc2	equ	0xFDE
  6559                           plusw2	equ	0xFDB
  6560                           fsr2h	equ	0xFDA
  6561                           fsr2l	equ	0xFD9
  6562                           status	equ	0xFD8
  6563                           
  6564 ;; *************** function _Lcd_Cmd *****************
  6565 ;; Defined at:
  6566 ;;		line 38 in file "lcd.h"
  6567 ;; Parameters:    Size  Location     Type
  6568 ;;  a               1    wreg     unsigned char 
  6569 ;; Auto vars:     Size  Location     Type
  6570 ;;  a               1   16[COMRAM] unsigned char 
  6571 ;; Return value:  Size  Location     Type
  6572 ;;                  1    wreg      void 
  6573 ;; Registers used:
  6574 ;;		wreg, status,2, cstack
  6575 ;; Tracked objects:
  6576 ;;		On entry : 0/0
  6577 ;;		On exit  : 0/0
  6578 ;;		Unchanged: 0/0
  6579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6580 ;;      Params:         0       0       0       0       0       0       0
  6581 ;;      Locals:         1       0       0       0       0       0       0
  6582 ;;      Temps:          0       0       0       0       0       0       0
  6583 ;;      Totals:         1       0       0       0       0       0       0
  6584 ;;Total ram usage:        1 bytes
  6585 ;; Hardware stack levels used:    1
  6586 ;; Hardware stack levels required when called:    2
  6587 ;; This function calls:
  6588 ;;		_Lcd_Port
  6589 ;; This function is called by:
  6590 ;;		_Lcd_Clear
  6591 ;;		_Lcd_Set_Cursor
  6592 ;;		_Lcd_Init
  6593 ;;		_Lcd_Shift_Right
  6594 ;;		_Lcd_Shift_Left
  6595 ;; This function uses a non-reentrant model
  6596 ;;
  6597                           
  6598                           	psect	text17
  6599  001ACE                     __ptext17:
  6600                           	opt stack 0
  6601  001ACE                     _Lcd_Cmd:
  6602                           	opt stack 25
  6603                           
  6604                           ;incstack = 0
  6605                           ;Lcd_Cmd@a stored from wreg
  6606  001ACE  6E11               	movwf	Lcd_Cmd@a,c
  6607                           
  6608                           ;lcd.h: 40: PORTDbits.RD5 = 0;
  6609  001AD0  9A83               	bcf	3971,5,c	;volatile
  6610                           
  6611                           ;lcd.h: 41: Lcd_Port(a);
  6612  001AD2  5011               	movf	Lcd_Cmd@a,w,c
  6613  001AD4  EC0F  F00D         	call	_Lcd_Port
  6614                           
  6615                           ;lcd.h: 42: PORTDbits.RD4 = 1;
  6616  001AD8  8883               	bsf	3971,4,c	;volatile
  6617                           
  6618                           ;lcd.h: 44: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6619  001ADA  0EC8               	movlw	200
  6620  001ADC                     u4557:
  6621  001ADC  F000               	nop	
  6622  001ADE  2EE8               	decfsz	wreg,f,c
  6623  001AE0  D7FD               	goto	u4557
  6624                           
  6625                           ;lcd.h: 45: PORTDbits.RD4 = 0;
  6626  001AE2  9883               	bcf	3971,4,c	;volatile
  6627  001AE4  0012               	return		;funcret
  6628  001AE6                     __end_of_Lcd_Cmd:
  6629                           	opt stack 0
  6630                           tblptru	equ	0xFF8
  6631                           tblptrh	equ	0xFF7
  6632                           tblptrl	equ	0xFF6
  6633                           tablat	equ	0xFF5
  6634                           prodh	equ	0xFF4
  6635                           prodl	equ	0xFF3
  6636                           intcon	equ	0xFF2
  6637                           indf0	equ	0xFEF
  6638                           postinc0	equ	0xFEE
  6639                           fsr0h	equ	0xFEA
  6640                           fsr0l	equ	0xFE9
  6641                           wreg	equ	0xFE8
  6642                           indf1	equ	0xFE7
  6643                           postdec1	equ	0xFE5
  6644                           plusw1	equ	0xFE3
  6645                           fsr1h	equ	0xFE2
  6646                           fsr1l	equ	0xFE1
  6647                           indf2	equ	0xFDF
  6648                           postinc2	equ	0xFDE
  6649                           plusw2	equ	0xFDB
  6650                           fsr2h	equ	0xFDA
  6651                           fsr2l	equ	0xFD9
  6652                           status	equ	0xFD8
  6653                           
  6654 ;; *************** function _Lcd_Port *****************
  6655 ;; Defined at:
  6656 ;;		line 16 in file "lcd.h"
  6657 ;; Parameters:    Size  Location     Type
  6658 ;;  a               1    wreg     unsigned char 
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;  a               1   15[COMRAM] unsigned char 
  6661 ;; Return value:  Size  Location     Type
  6662 ;;                  1    wreg      void 
  6663 ;; Registers used:
  6664 ;;		wreg
  6665 ;; Tracked objects:
  6666 ;;		On entry : 0/0
  6667 ;;		On exit  : 0/0
  6668 ;;		Unchanged: 0/0
  6669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6670 ;;      Params:         0       0       0       0       0       0       0
  6671 ;;      Locals:         1       0       0       0       0       0       0
  6672 ;;      Temps:          0       0       0       0       0       0       0
  6673 ;;      Totals:         1       0       0       0       0       0       0
  6674 ;;Total ram usage:        1 bytes
  6675 ;; Hardware stack levels used:    1
  6676 ;; Hardware stack levels required when called:    1
  6677 ;; This function calls:
  6678 ;;		Nothing
  6679 ;; This function is called by:
  6680 ;;		_Lcd_Cmd
  6681 ;;		_Lcd_Init
  6682 ;;		_Lcd_Write_Char
  6683 ;; This function uses a non-reentrant model
  6684 ;;
  6685                           
  6686                           	psect	text18
  6687  001A1E                     __ptext18:
  6688                           	opt stack 0
  6689  001A1E                     _Lcd_Port:
  6690                           	opt stack 25
  6691                           
  6692                           ;incstack = 0
  6693                           ;Lcd_Port@a stored from wreg
  6694  001A1E  6E10               	movwf	Lcd_Port@a,c
  6695                           
  6696                           ;lcd.h: 18: if(a & 1)
  6697  001A20  A010               	btfss	Lcd_Port@a,0,c
  6698  001A22  D002               	goto	l69
  6699                           
  6700                           ;lcd.h: 19: PORTDbits.RD0 = 1;
  6701  001A24  8083               	bsf	3971,0,c	;volatile
  6702  001A26  D001               	goto	l3355
  6703  001A28                     l69:
  6704                           
  6705                           ;lcd.h: 20: else
  6706                           ;lcd.h: 21: PORTDbits.RD0 = 0;
  6707  001A28  9083               	bcf	3971,0,c	;volatile
  6708  001A2A                     l3355:
  6709                           
  6710                           ;lcd.h: 23: if(a & 2)
  6711  001A2A  A210               	btfss	Lcd_Port@a,1,c
  6712  001A2C  D002               	goto	l71
  6713                           
  6714                           ;lcd.h: 24: PORTDbits.RD1 = 1;
  6715  001A2E  8283               	bsf	3971,1,c	;volatile
  6716  001A30  D001               	goto	l3359
  6717  001A32                     l71:
  6718                           
  6719                           ;lcd.h: 25: else
  6720                           ;lcd.h: 26: PORTDbits.RD1 = 0;
  6721  001A32  9283               	bcf	3971,1,c	;volatile
  6722  001A34                     l3359:
  6723                           
  6724                           ;lcd.h: 28: if(a & 4)
  6725  001A34  A410               	btfss	Lcd_Port@a,2,c
  6726  001A36  D002               	goto	l73
  6727                           
  6728                           ;lcd.h: 29: PORTDbits.RD2 = 1;
  6729  001A38  8483               	bsf	3971,2,c	;volatile
  6730  001A3A  D001               	goto	l3363
  6731  001A3C                     l73:
  6732                           
  6733                           ;lcd.h: 30: else
  6734                           ;lcd.h: 31: PORTDbits.RD2 = 0;
  6735  001A3C  9483               	bcf	3971,2,c	;volatile
  6736  001A3E                     l3363:
  6737                           
  6738                           ;lcd.h: 33: if(a & 8)
  6739  001A3E  A610               	btfss	Lcd_Port@a,3,c
  6740  001A40  D002               	goto	l75
  6741                           
  6742                           ;lcd.h: 34: PORTDbits.RD3 = 1;
  6743  001A42  8683               	bsf	3971,3,c	;volatile
  6744  001A44  0012               	return	
  6745  001A46                     l75:
  6746                           
  6747                           ;lcd.h: 35: else
  6748                           ;lcd.h: 36: PORTDbits.RD3 = 0;
  6749  001A46  9683               	bcf	3971,3,c	;volatile
  6750  001A48  0012               	return	
  6751  001A4A                     __end_of_Lcd_Port:
  6752                           	opt stack 0
  6753                           tblptru	equ	0xFF8
  6754                           tblptrh	equ	0xFF7
  6755                           tblptrl	equ	0xFF6
  6756                           tablat	equ	0xFF5
  6757                           prodh	equ	0xFF4
  6758                           prodl	equ	0xFF3
  6759                           intcon	equ	0xFF2
  6760                           indf0	equ	0xFEF
  6761                           postinc0	equ	0xFEE
  6762                           fsr0h	equ	0xFEA
  6763                           fsr0l	equ	0xFE9
  6764                           wreg	equ	0xFE8
  6765                           indf1	equ	0xFE7
  6766                           postdec1	equ	0xFE5
  6767                           plusw1	equ	0xFE3
  6768                           fsr1h	equ	0xFE2
  6769                           fsr1l	equ	0xFE1
  6770                           indf2	equ	0xFDF
  6771                           postinc2	equ	0xFDE
  6772                           plusw2	equ	0xFDB
  6773                           fsr2h	equ	0xFDA
  6774                           fsr2l	equ	0xFD9
  6775                           status	equ	0xFD8
  6776                           
  6777 ;; *************** function _ISR *****************
  6778 ;; Defined at:
  6779 ;;		line 361 in file "main.c"
  6780 ;; Parameters:    Size  Location     Type
  6781 ;;		None
  6782 ;; Auto vars:     Size  Location     Type
  6783 ;;  sspBuf          1   14[COMRAM] unsigned char 
  6784 ;; Return value:  Size  Location     Type
  6785 ;;                  1    wreg      void 
  6786 ;; Registers used:
  6787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6788 ;; Tracked objects:
  6789 ;;		On entry : 0/0
  6790 ;;		On exit  : 0/0
  6791 ;;		Unchanged: 0/0
  6792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6793 ;;      Params:         0       0       0       0       0       0       0
  6794 ;;      Locals:         1       0       0       0       0       0       0
  6795 ;;      Temps:         14       0       0       0       0       0       0
  6796 ;;      Totals:        15       0       0       0       0       0       0
  6797 ;;Total ram usage:       15 bytes
  6798 ;; Hardware stack levels used:    1
  6799 ;; This function calls:
  6800 ;;		Nothing
  6801 ;; This function is called by:
  6802 ;;		Interrupt level 2
  6803 ;; This function uses a non-reentrant model
  6804 ;;
  6805                           
  6806                           	psect	intcode
  6807  000008                     __pintcode:
  6808                           	opt stack 0
  6809  000008                     _ISR:
  6810                           	opt stack 25
  6811                           
  6812                           ;incstack = 0
  6813  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6814  00000A  CFFA F001          	movff	pclath,??_ISR
  6815  00000E  CFFB F002          	movff	pclatu,??_ISR+1
  6816  000012  CFE9 F003          	movff	fsr0l,??_ISR+2
  6817  000016  CFEA F004          	movff	fsr0h,??_ISR+3
  6818  00001A  CFE1 F005          	movff	fsr1l,??_ISR+4
  6819  00001E  CFE2 F006          	movff	fsr1h,??_ISR+5
  6820  000022  CFD9 F007          	movff	fsr2l,??_ISR+6
  6821  000026  CFDA F008          	movff	fsr2h,??_ISR+7
  6822  00002A  CFF3 F009          	movff	prodl,??_ISR+8
  6823  00002E  CFF4 F00A          	movff	prodh,??_ISR+9
  6824  000032  CFF6 F00B          	movff	tblptrl,??_ISR+10
  6825  000036  CFF7 F00C          	movff	tblptrh,??_ISR+11
  6826  00003A  CFF8 F00D          	movff	tblptru,??_ISR+12
  6827  00003E  CFF5 F00E          	movff	tablat,??_ISR+13
  6828                           
  6829                           ;main.c: 363: unsigned char sspBuf;
  6830                           ;main.c: 365: if (PIR1bits.SSPIF) {
  6831  000042  A69E               	btfss	3998,3,c	;volatile
  6832  000044  D03E               	goto	i2l301
  6833                           
  6834                           ;main.c: 367: if (!SSPSTATbits.D_NOT_A) {
  6835  000046  BAC7               	btfsc	4039,5,c	;volatile
  6836  000048  D013               	goto	i2l3323
  6837                           
  6838                           ;main.c: 371: i2c_byte_count = 0;
  6839  00004A  0E00               	movlw	0
  6840  00004C  6E4E               	movwf	_i2c_byte_count,c	;volatile
  6841                           
  6842                           ;main.c: 373: if (SSPSTATbits.BF) {
  6843  00004E  B0C7               	btfsc	4039,0,c	;volatile
  6844                           
  6845                           ;main.c: 375: sspBuf = SSPBUF;
  6846  000050  CFC9 F00F          	movff	4041,ISR@sspBuf	;volatile
  6847                           
  6848                           ;main.c: 376: }
  6849                           ;main.c: 378: if (SSPSTATbits.R_NOT_W) {
  6850  000054  A4C7               	btfss	4039,2,c	;volatile
  6851  000056  D031               	goto	i2l3345
  6852                           
  6853                           ;main.c: 380: SSPCON1bits.WCOL = 0;
  6854  000058  9EC6               	bcf	4038,7,c	;volatile
  6855                           
  6856                           ;main.c: 381: SSPBUF = i2c_r_reg[i2c_reg_addr++];
  6857  00005A  504F               	movf	_i2c_reg_addr,w,c	;volatile
  6858  00005C  0D01               	mullw	1
  6859  00005E  0E60               	movlw	low _i2c_r_reg
  6860  000060  24F3               	addwf	prodl,w,c
  6861  000062  6ED9               	movwf	fsr2l,c
  6862  000064  0E00               	movlw	high _i2c_r_reg
  6863  000066  20F4               	addwfc	prodh,w,c
  6864  000068  6EDA               	movwf	fsr2h,c
  6865  00006A  50DF               	movf	indf2,w,c
  6866  00006C  6EC9               	movwf	4041,c	;volatile
  6867  00006E  D024               	goto	i2l3343
  6868  000070                     i2l3323:
  6869                           
  6870                           ;main.c: 388: i2c_byte_count++;
  6871  000070  2A4E               	incf	_i2c_byte_count,f,c	;volatile
  6872                           
  6873                           ;main.c: 390: if (SSPSTATbits.BF) {
  6874  000072  B0C7               	btfsc	4039,0,c	;volatile
  6875                           
  6876                           ;main.c: 391: sspBuf = SSPBUF;
  6877  000074  CFC9 F00F          	movff	4041,ISR@sspBuf	;volatile
  6878                           
  6879                           ;main.c: 392: }
  6880                           ;main.c: 394: if (SSPSTATbits.R_NOT_W) {
  6881  000078  A4C7               	btfss	4039,2,c	;volatile
  6882  00007A  D00E               	goto	i2l3337
  6883                           
  6884                           ;main.c: 397: SSPCON1bits.WCOL = 0;
  6885  00007C  9EC6               	bcf	4038,7,c	;volatile
  6886                           
  6887                           ;main.c: 398: SSPBUF = i2c_r_reg[i2c_reg_addr++];
  6888  00007E  504F               	movf	_i2c_reg_addr,w,c	;volatile
  6889  000080  0D01               	mullw	1
  6890  000082  0E60               	movlw	low _i2c_r_reg
  6891  000084  24F3               	addwf	prodl,w,c
  6892  000086  6ED9               	movwf	fsr2l,c
  6893  000088  0E00               	movlw	high _i2c_r_reg
  6894  00008A  20F4               	addwfc	prodh,w,c
  6895  00008C  6EDA               	movwf	fsr2h,c
  6896  00008E  50DF               	movf	indf2,w,c
  6897  000090  6EC9               	movwf	4041,c	;volatile
  6898  000092  2A4F               	incf	_i2c_reg_addr,f,c	;volatile
  6899                           
  6900                           ;main.c: 399: LATDbits.LATD6 = 1;
  6901  000094  8C8C               	bsf	3980,6,c	;volatile
  6902                           
  6903                           ;main.c: 401: } else {
  6904  000096  D011               	goto	i2l3345
  6905  000098                     i2l3337:
  6906                           
  6907                           ;main.c: 403: if (i2c_byte_count == 1) {
  6908  000098  044E               	decf	_i2c_byte_count,w,c	;volatile
  6909  00009A  A4D8               	btfss	status,2,c
  6910  00009C  D003               	goto	i2l3341
  6911                           
  6912                           ;main.c: 405: i2c_reg_addr = sspBuf;
  6913  00009E  C00F  F04F         	movff	ISR@sspBuf,_i2c_reg_addr	;volatile
  6914                           
  6915                           ;main.c: 407: } else {
  6916  0000A2  D00B               	goto	i2l3345
  6917  0000A4                     i2l3341:
  6918                           
  6919                           ;main.c: 410: i2c_w_reg[i2c_reg_addr++] = sspBuf;
  6920  0000A4  504F               	movf	_i2c_reg_addr,w,c	;volatile
  6921  0000A6  0D01               	mullw	1
  6922  0000A8  0E33               	movlw	low _i2c_w_reg
  6923  0000AA  24F3               	addwf	prodl,w,c
  6924  0000AC  6ED9               	movwf	fsr2l,c
  6925  0000AE  0E01               	movlw	high _i2c_w_reg
  6926  0000B0  20F4               	addwfc	prodh,w,c
  6927  0000B2  6EDA               	movwf	fsr2h,c
  6928  0000B4  C00F  FFDF         	movff	ISR@sspBuf,indf2
  6929  0000B8                     i2l3343:
  6930  0000B8  2A4F               	incf	_i2c_reg_addr,f,c	;volatile
  6931  0000BA                     i2l3345:
  6932                           
  6933                           ;main.c: 411: }
  6934                           ;main.c: 412: }
  6935                           ;main.c: 413: }
  6936                           ;main.c: 415: i2c_reg_addr %= sizeof(i2c_r_reg);
  6937  0000BA  0E1F               	movlw	31
  6938  0000BC  164F               	andwf	_i2c_reg_addr,f,c	;volatile
  6939                           
  6940                           ;main.c: 418: PIR1bits.SSPIF = 0;
  6941  0000BE  969E               	bcf	3998,3,c	;volatile
  6942                           
  6943                           ;main.c: 419: SSPCON1bits.CKP = 1;
  6944  0000C0  88C6               	bsf	4038,4,c	;volatile
  6945  0000C2                     i2l301:
  6946  0000C2  C00E  FFF5         	movff	??_ISR+13,tablat
  6947  0000C6  C00D  FFF8         	movff	??_ISR+12,tblptru
  6948  0000CA  C00C  FFF7         	movff	??_ISR+11,tblptrh
  6949  0000CE  C00B  FFF6         	movff	??_ISR+10,tblptrl
  6950  0000D2  C00A  FFF4         	movff	??_ISR+9,prodh
  6951  0000D6  C009  FFF3         	movff	??_ISR+8,prodl
  6952  0000DA  C008  FFDA         	movff	??_ISR+7,fsr2h
  6953  0000DE  C007  FFD9         	movff	??_ISR+6,fsr2l
  6954  0000E2  C006  FFE2         	movff	??_ISR+5,fsr1h
  6955  0000E6  C005  FFE1         	movff	??_ISR+4,fsr1l
  6956  0000EA  C004  FFEA         	movff	??_ISR+3,fsr0h
  6957  0000EE  C003  FFE9         	movff	??_ISR+2,fsr0l
  6958  0000F2  C002  FFFB         	movff	??_ISR+1,pclatu
  6959  0000F6  C001  FFFA         	movff	??_ISR,pclath
  6960  0000FA  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6961  0000FC  0011               	retfie		f
  6962  0000FE                     __end_of_ISR:
  6963                           	opt stack 0
  6964                           pclatu	equ	0xFFB
  6965                           pclath	equ	0xFFA
  6966                           tblptru	equ	0xFF8
  6967                           tblptrh	equ	0xFF7
  6968                           tblptrl	equ	0xFF6
  6969                           tablat	equ	0xFF5
  6970                           prodh	equ	0xFF4
  6971                           prodl	equ	0xFF3
  6972                           intcon	equ	0xFF2
  6973                           indf0	equ	0xFEF
  6974                           postinc0	equ	0xFEE
  6975                           fsr0h	equ	0xFEA
  6976                           fsr0l	equ	0xFE9
  6977                           wreg	equ	0xFE8
  6978                           indf1	equ	0xFE7
  6979                           postdec1	equ	0xFE5
  6980                           plusw1	equ	0xFE3
  6981                           fsr1h	equ	0xFE2
  6982                           fsr1l	equ	0xFE1
  6983                           indf2	equ	0xFDF
  6984                           postinc2	equ	0xFDE
  6985                           plusw2	equ	0xFDB
  6986                           fsr2h	equ	0xFDA
  6987                           fsr2l	equ	0xFD9
  6988                           status	equ	0xFD8
  6989                           pclatu	equ	0xFFB
  6990                           pclath	equ	0xFFA
  6991                           tblptru	equ	0xFF8
  6992                           tblptrh	equ	0xFF7
  6993                           tblptrl	equ	0xFF6
  6994                           tablat	equ	0xFF5
  6995                           prodh	equ	0xFF4
  6996                           prodl	equ	0xFF3
  6997                           intcon	equ	0xFF2
  6998                           indf0	equ	0xFEF
  6999                           postinc0	equ	0xFEE
  7000                           fsr0h	equ	0xFEA
  7001                           fsr0l	equ	0xFE9
  7002                           wreg	equ	0xFE8
  7003                           indf1	equ	0xFE7
  7004                           postdec1	equ	0xFE5
  7005                           plusw1	equ	0xFE3
  7006                           fsr1h	equ	0xFE2
  7007                           fsr1l	equ	0xFE1
  7008                           indf2	equ	0xFDF
  7009                           postinc2	equ	0xFDE
  7010                           plusw2	equ	0xFDB
  7011                           fsr2h	equ	0xFDA
  7012                           fsr2l	equ	0xFD9
  7013                           status	equ	0xFD8
  7014                           
  7015                           	psect	rparam
  7016  0000                     pclatu	equ	0xFFB
  7017                           pclath	equ	0xFFA
  7018                           tblptru	equ	0xFF8
  7019                           tblptrh	equ	0xFF7
  7020                           tblptrl	equ	0xFF6
  7021                           tablat	equ	0xFF5
  7022                           prodh	equ	0xFF4
  7023                           prodl	equ	0xFF3
  7024                           intcon	equ	0xFF2
  7025                           indf0	equ	0xFEF
  7026                           postinc0	equ	0xFEE
  7027                           fsr0h	equ	0xFEA
  7028                           fsr0l	equ	0xFE9
  7029                           wreg	equ	0xFE8
  7030                           indf1	equ	0xFE7
  7031                           postdec1	equ	0xFE5
  7032                           plusw1	equ	0xFE3
  7033                           fsr1h	equ	0xFE2
  7034                           fsr1l	equ	0xFE1
  7035                           indf2	equ	0xFDF
  7036                           postinc2	equ	0xFDE
  7037                           plusw2	equ	0xFDB
  7038                           fsr2h	equ	0xFDA
  7039                           fsr2l	equ	0xFD9
  7040                           status	equ	0xFD8
  7041                           
  7042                           	psect	temp
  7043  000050                     btemp:
  7044                           	opt stack 0
  7045  000050                     	ds	1
  7046  0000                     int$flags	set	btemp
  7047                           pclatu	equ	0xFFB
  7048                           pclath	equ	0xFFA
  7049                           tblptru	equ	0xFF8
  7050                           tblptrh	equ	0xFF7
  7051                           tblptrl	equ	0xFF6
  7052                           tablat	equ	0xFF5
  7053                           prodh	equ	0xFF4
  7054                           prodl	equ	0xFF3
  7055                           intcon	equ	0xFF2
  7056                           indf0	equ	0xFEF
  7057                           postinc0	equ	0xFEE
  7058                           fsr0h	equ	0xFEA
  7059                           fsr0l	equ	0xFE9
  7060                           wreg	equ	0xFE8
  7061                           indf1	equ	0xFE7
  7062                           postdec1	equ	0xFE5
  7063                           plusw1	equ	0xFE3
  7064                           fsr1h	equ	0xFE2
  7065                           fsr1l	equ	0xFE1
  7066                           indf2	equ	0xFDF
  7067                           postinc2	equ	0xFDE
  7068                           plusw2	equ	0xFDB
  7069                           fsr2h	equ	0xFDA
  7070                           fsr2l	equ	0xFD9
  7071                           status	equ	0xFD8


Data Sizes:
    Strings     316
    Constant    0
    Data        119
    BSS         22
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     52      79
    BANK0           160     44     112
    BANK1           256     51      99
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    start_routine@error_msg	PTR unsigned char  size(2) Largest target is 17
		 -> STR_28(CODE[17]), STR_27(CODE[17]), 

    latch_keypad@x	PTR unsigned char  size(2) Largest target is 1
		 -> start_routine@x(BANK0[1]), main@x(BANK1[1]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 1535
		 -> STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[2]), 
		 -> STR_24(CODE[5]), STR_23(CODE[17]), STR_22(CODE[17]), STR_21(CODE[17]), 
		 -> STR_20(CODE[17]), STR_19(CODE[17]), STR_18(CODE[11]), STR_17(CODE[6]), 
		 -> STR_16(CODE[5]), STR_15(CODE[17]), STR_14(CODE[17]), STR_13(CODE[17]), 
		 -> STR_12(CODE[2]), STR_11(CODE[15]), STR_10(CODE[17]), STR_9(CODE[17]), 
		 -> STR_8(CODE[17]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), 
		 -> STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[2]), 
		 -> RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    _main->_start_routine
    _start_routine->_menu_progress_bar
    _menu_progress_bar->___wmul
    ___wmul->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _mcu_initialise->_Eeprom_Read_Byte
    _load_i2c_registers->___awdiv
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_start_routine

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                59    59      0   50673
                                             36 BANK0      8     8      0
                                              0 BANK1     51    51      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awdiv
                       _latch_keypad
                 _load_i2c_registers
                     _mcu_initialise
                  _menu_progress_bar
                        _read_keypad
                      _start_routine
 ---------------------------------------------------------------------------------
 (1) _start_routine                                       40    40      0   23516
                                             48 COMRAM     4     4      0
                                              0 BANK0     36    36      0
                  _Eeprom_Write_Byte
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awdiv
                       _latch_keypad
                  _menu_progress_bar
                        _read_keypad
 ---------------------------------------------------------------------------------
 (2) _menu_progress_bar                                   20    18      2   10732
                                             28 COMRAM    20    18      2
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     848
                                             22 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1781
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_String                                     6     4      2    2540
                                             19 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_Char                                       3     3      0     254
                                             16 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Set_Cursor                                       5     4      1    4395
                                             17 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Clear                                            1     1      0     155
                                             17 COMRAM     1     1      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _latch_keypad                                         4     2      2     524
                                             15 COMRAM     4     2      2
                        _read_keypad
 ---------------------------------------------------------------------------------
 (2) _read_keypad                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Write_Byte                                    2     1      1     139
                                             15 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _mcu_initialise                                       0     0      0      31
                   _Eeprom_Read_Byte
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Read_Byte                                     1     1      0      31
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _load_i2c_registers                                  12    12      0    2569
                                             23 COMRAM    12    12      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2139
                                             15 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     279
                                             17 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Cmd                                              1     1      0     155
                                             16 COMRAM     1     1      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (5) _Lcd_Port                                             1     1      0     124
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 15    15      0      46
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___awdiv
   _latch_keypad
     _read_keypad
   _load_i2c_registers
     ___awdiv
   _mcu_initialise
     _Eeprom_Read_Byte
   _menu_progress_bar
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___lwdiv
     ___wmul
       ___lwdiv (ARG)
   _read_keypad
   _start_routine
     _Eeprom_Write_Byte
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___awdiv
     _latch_keypad
       _read_keypad
     _menu_progress_bar
       _Lcd_Clear
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Write_Char
         _Lcd_Port
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___lwdiv
       ___wmul
         ___lwdiv (ARG)
     _read_keypad

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     33      63       7       38.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2C      70       5       70.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     34      4F       1       84.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     122      15        0.0%
DATA                 0      0     122       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Oct 14 15:19:44 2016

                            _c 0080                 start_routine@a 00AA                 start_routine@b 00A0  
               start_routine@h 008E                 start_routine@i 0094                 start_routine@l 008F  
               start_routine@n 00B0                 start_routine@v 0093                 start_routine@x 00AF  
                  _SSPSTATbits 000FC7                             l71 1A32                             l73 1A3C  
                           l75 1A46                             l69 1A28                   ___awdiv@sign 0015  
                           _hx 0153                start_routine@d1 0092            ___wmul@multiplicand 0019  
              start_routine@dh 00AE                start_routine@dt 00AB    __size_of_load_i2c_registers 00EC  
                 __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000  
       __size_of_start_routine 0780                   __CFG_CP3$OFF 000000                            l230 09CA  
                          l153 1A8A                            l226 0862                            l147 1AF2  
                          l261 15E0                            l270 1648                            l271 1654  
                          l263 15EC                            l272 1660                            l264 15F8  
                          l337 1236                            l266 1614                            l267 1620  
                          l268 162C                            l752 18A4                   __CFG_CPB$OFF 000000  
                 __CFG_CPD$OFF 000000                            _ISR 0008                   __CFG_BORV$30 000000  
                          prod 000FF3                            wreg 000FE8        Eeprom_Read_Byte@address 0010  
                 __CFG_LVP$OFF 000000                           ?_ISR 0001                           l4011 131A  
                         l4003 12EA                           l4013 1324                           l4031 14E8  
                         l4023 1356                           l4007 1300                           l4041 151A  
                         l4017 133A                           l4025 1362                           l4043 1522  
                         l4035 14F8                           l4027 136C                           l4053 156C  
                         l4055 157C                           l4047 1532                           l3423 1828  
                         l4223 031E                           l4065 15AA                           l3409 1928  
                         l4313 067E                           l4241 03CA                           l4161 0148  
                         l3363 1A3E                           l3355 1A2A                           l4059 158C  
                         l3419 17F4                           l3603 14DA                           l4411 099C  
                         l4331 0728                           l4243 03D2                           l4155 0120  
                         l3509 166C                           l3453 1604                           l3525 1872  
                         l4333 0730                           l4261 0500                           l4253 040A  
                         l4245 03DC                           l4173 01A8                           l3359 1A34  
                         l3631 198A                           l3527 187A                           l3551 13E0  
                         l4415 09B2                           l4335 073C                           l4255 0416  
                         l4191 022A                           l4167 0188                           l3481 1638  
                         l3633 199C                           l3537 189A                           l3529 187E  
                         l4441 0A2E                           l4433 0A0C                           l4249 03F2  
                         l4169 0192                           l3651 1694                           l3571 1454  
                         l3555 13F0                           l3547 13D0                           l3811 0E14  
                         l4451 0A56                           l4339 07CA                           l4179 01EC  
                         l4419 09CC                           l3661 16B6                           l3645 1684  
                         l3565 1436                           l4453 0A62                           l4429 09F6  
                         l4381 08E4                           l4357 083A                           l4349 080E  
                         l3583 148E                           l3575 1464                           l3559 140A  
                         l3903 1034                           l3815 0E2E                           l3807 0DFE  
                         l4447 0A4E                           l4391 0924                           l4279 0578  
                         l3657 16AA                           l3673 16DC                           l3593 14AA  
                         l3761 0C48                           l3753 0C18                           l4457 0A6E  
                         l4377 08C0                           l3659 16B2                           l3595 14B2  
                         l3587 149E                           l3579 147C                           l3923 1096  
                         l4475 0B3A                           l4395 093A                           l3677 16EA  
                         l3669 16D2                           l3917 107E                           l3837 0E98  
                         l3773 0C8A                           l3757 0C2E                           l4493 0BD2  
                         l3599 14C2                           l3943 1160                           l3871 0F66  
                         l3847 0ED6                           l4479 0B50                           l4399 0952  
                         l3953 1194                           l3785 0CCA                           l3777 0CA4  
                         l3769 0C74                           l4489 0BB6                           l4497 0BDA  
                         l3947 1176                           l3891 0FE0                           l3981 126A  
                         l3893 0FF0                           l3991 12AA                           l3985 1280  
                         l3969 1210                           l3897 1006                           l3889 0FD8  
                         l3995 12BE                           l3989 129A                           STR_2 7EC3  
                         STR_3 7F29                           STR_4 7ED4                           STR_5 7F5C  
                         STR_6 7ED4                           STR_7 7FC2                           STR_8 7F07  
                         STR_9 7FB1                           u3010 1820                           u3020 1854  
                         _LATC 000F8B                           u3017 1816                           u3027 184A  
                         u4051 058C                           u4160 0862                           u3195 1392  
                         u4180 08BE                           u4407 0C90                           u3640 1236  
                         u4417 0E1A                           u4507 1AA6                           u4427 1216  
                         u3900 0184                           u4517 1990                           u4437 1286  
                         u4357 03FA                           u4527 177E                           u4447 1306  
                         u4367 08C8                           u4537 1796                           u4457 13F6  
                         u4377 0942                           u4547 17AE                           u4467 146A  
                         u4387 09BA                           u4557 1ADC                           u4477 14C8  
                         u4397 0C34                           u4487 196C                           u4497 197E  
                         u3890 0144              ?_Lcd_Write_String 0014                           _main 0102  
                         fsr0h 000FEA                           fsr1h 000FE2                           indf0 000FEF  
                         fsr0l 000FE9                           fsr2h 000FDA                           indf1 000FE7  
                         fsr1l 000FE1                           indf2 000FDF                           fsr2l 000FD9  
                         btemp 0050                           pclat 000FFA                           prodh 000FF4  
                         prodl 000FF3                           start 00FE             ??_Lcd_Write_String 0016  
                __CFG_IESO$OFF 000000                __end_of_Lcd_Cmd 1AE6                  __CFG_MCLRE$ON 000000  
                 ___param_bank 000010                          ??_ISR 0001                          ?_main 0001  
              __end_of___awdiv 16F4                          _EEADR 000FA9                          STR_10 7EF6  
                        STR_11 7FD3                          STR_12 7FAF                          STR_20 7F7E  
                        STR_13 7EF6                          STR_21 7F4B                          STR_14 7EC3  
                        STR_22 7FA0                          STR_23 7F4B                          STR_15 7EE5  
                        STR_24 7FF8                          STR_16 7FF3                          STR_25 7FFD  
                        STR_17 7FED                          STR_18 7FE2                          STR_26 7F8F  
                        STR_27 7F6D                          STR_19 7F3A                          STR_28 7F18  
              ___awdiv@divisor 0012                __end_of___lwdiv 18AE                          i2l301 00C2  
              ___awdiv@counter 0014                          _PORTB 000F81        __size_of_Lcd_Set_Cursor 0050  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TRISD 000F95                 _i2c_byte_count 004E                  __CFG_PWRT$OFF 000000  
                __CFG_WRT0$OFF 000000                  ?_latch_keypad 0010                  __CFG_WRT1$OFF 000000  
                __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000                 __CFG_EBTR0$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000                     _Machine_ID 00CF  
           start_routine@F3723 008A                 __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000  
                __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
                 ?_read_keypad 0001                 __CFG_EBTRB$OFF 000000                          main@a 0120  
                        main@c 0100                          main@i 0125                          main@n 0131  
                        main@p 0130                          main@x 0132                          tablat 000FF5  
           start_routine@i_902 009A             start_routine@i_905 009C             start_routine@i_908 009E  
           start_routine@i_909 00A5             start_routine@i_884 0098             start_routine@i_876 0096  
           start_routine@i_896 00AC             start_routine@i_899 00A3        load_i2c_registers@i_840 0022  
      load_i2c_registers@i_842 001E                  _start_routine 0BF4                          plusw1 000FE3  
                        plusw2 000FDB                          status 000FD8  menu_progress_bar@load_time_ms 001D  
               __CFG_HFOFST$ON 000000               __end_of_Lcd_Init 17EA               __end_of_Lcd_Port 1A4A  
              __initialization 16F4                   __end_of_main 0BF4                         ??_main 00B2  
           __size_of_Lcd_Clear 0020                  __activetblptr 000002           _credentials_accepted 00CD  
               ??_latch_keypad 0012                         _EEDATA 000FA8                         _EECON2 000FA7  
             ___awdiv@dividend 0010                 ?_start_routine 0001                         i2l3323 0070  
                       i2l3341 00A4                 __CFG_WDTEN$OFF 000000                         i2l3343 00B8  
                       i2l3337 0098                         i2l3345 00BA                         _OSCCON 000FD3  
                    ??_Lcd_Cmd 0011        __size_of_Lcd_Write_Char 0038                         _SSPADD 000FC8  
                       _SSPBUF 000FC9                 __CFG_XINST$OFF 000000                         ___wmul 1A4A  
                    ??___awdiv 0014                 __CFG_STVREN$ON 000000                      ??___lwdiv 0014  
            ?_Eeprom_Read_Byte 0001                         clear_0 16FA               ___awdiv@quotient 0016  
           ??_Eeprom_Read_Byte 0010                   __pdataCOMRAM 0035                   __mediumconst 7EC2  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
              Lcd_Set_Cursor@a 0013                Lcd_Set_Cursor@b 0012                Lcd_Set_Cursor@y 0015  
              Lcd_Set_Cursor@z 0014                     __accesstop 0060        __end_of__initialization 1764  
              __CFG_PBADEN$OFF 000000              __end_of_Lcd_Clear 1AB4                  ___rparam_used 000001  
            _menu_progress_bar 1374                 __pcstackCOMRAM 0001                   __pidataBANK0 19F0  
                 __pidataBANK1 19C0             ?_menu_progress_bar 001D                 _Lcd_Set_Cursor 1900  
          ??_menu_progress_bar 001F                   _EEP_I2C_ADDR 00CC                      ?_Lcd_Init 0001  
                    ?_Lcd_Port 0001                ??_start_routine 0031           __size_of_read_keypad 00A4  
                   __pbssBANK0 00BA      __end_of_menu_progress_bar 14E0                      ISR@sspBuf 000F  
         __end_of_latch_keypad 19C0                        ?___wmul 0017     __end_of_load_i2c_registers 15CC  
 start_routine@new_I2C_address 00B1      __size_of_Lcd_Write_String 0072         __end_of_Lcd_Set_Cursor 1950  
       menu_progress_bar@i_722 002B         menu_progress_bar@i_723 002D         menu_progress_bar@i_724 002F  
                   ??_Lcd_Init 0012                     ??_Lcd_Port 0010                        _SSPCON1 000FC6  
                      _SSPCON2 000FC5        __size_of_mcu_initialise 0052                        _SSPSTAT 000FC7  
               _Lcd_Write_Char 1950                        _Lcd_Cmd 1ACE                        __Hparam 0000  
                      __Lparam 0000                        ___awdiv 1670                __size_of___wmul 0026  
                      ___lwdiv 185C                        __pcinit 16F4                        __ramtop 0600  
              ?_Lcd_Set_Cursor 0012                        __ptext0 0102                        __ptext1 0BF4  
                      __ptext2 1374                        __ptext3 1A4A                        __ptext4 185C  
                      __ptext5 17EA                        __ptext6 1950                        __ptext7 1900  
                      __ptext8 1A94                        __ptext9 1988            menu_progress_bar@ii 0027  
                 __size_of_ISR 00F6                        main@n_c 0115         __end_of_Lcd_Write_Char 1988  
         end_of_initialization 1764                  __Lmediumconst 7EC2     __size_of_menu_progress_bar 016C  
                      postdec1 000FE5                        postinc0 000FEE                        postinc2 000FDE  
                    Lcd_Port@a 0010                      _PORTBbits 000F81                      _PORTDbits 000F83  
              ?_Lcd_Write_Char 0001      __size_of_Eeprom_Read_Byte 0014              Lcd_Write_String@a 0014  
            Lcd_Write_String@i 0018          __size_of_latch_keypad 0038                     main@digits 012F  
                   main@buffer 010A                   _i2c_reg_addr 004F                  latch_keypad@x 0010  
                    _Lcd_Clear 1A94                 __end_of___wmul 1A70               _Lcd_Write_String 17EA  
                __pidataCOMRAM 1AB4              _Eeprom_Write_Byte 1A70             ?_Eeprom_Write_Byte 0010  
          start_initialization 16F4                   _latch_keypad 1988                    __end_of_ISR 00FE  
                    _i2c_r_reg 0060                      _i2c_w_reg 0133                 _mcu_initialise 18AE  
          ??_Eeprom_Write_Byte 0011              __size_of_Lcd_Init 0078              __size_of_Lcd_Port 002C  
                   ?_Lcd_Clear 0001                       ??___wmul 001B                    __pdataBANK0 0060  
                  __pdataBANK1 0133               __CFG_LPT1OSC$OFF 000000      __end_of_Eeprom_Write_Byte 1A94  
              Lcd_Write_Char@a 0013                Lcd_Write_Char@y 0012      menu_seconds_to_mmss@F3627 003F  
                  __pbssCOMRAM 004E         __end_of_mcu_initialise 1900                  __pcstackBANK0 008E  
                __pcstackBANK1 0100                  ??_read_keypad 0010             _load_i2c_registers 14E0  
        __end_of_start_routine 1374            ?_load_i2c_registers 0001                       ?_Lcd_Cmd 0001  
                    __pnvBANK0 00CE                   _current_user 00C3               ___lwdiv@dividend 0010  
            __CFG_CCP2MX$PORTC 000000               ??_Lcd_Set_Cursor 0013                      __pintcode 0008  
                __pmediumconst 7EC2                       ?___awdiv 0010                       ?___lwdiv 0010  
         ??_load_i2c_registers 0018                       _I2C_ADDR 00CE                ?_mcu_initialise 0001  
             ___lwdiv@quotient 0015               _Eeprom_Read_Byte 1AE6             menu_progress_bar@d 0023  
           menu_progress_bar@i 0029            __end_of_read_keypad 1670                 ___wmul@product 001B  
                     _LATDbits 000F8C                       _PIE1bits 000F9D                       Lcd_Cmd@a 0011  
                     _PIR1bits 000F9E                       _PIR2bits 000FA1                    ??_Lcd_Clear 0012  
             __CFG_WDTPS$32768 000000     load_i2c_registers@checksum 001C                      main@F3695 008D  
                    main@F3679 0035     __size_of_Eeprom_Write_Byte 0024                      main@i_800 0113  
                    main@i_804 012D                      main@i_770 0127                      main@i_766 012B  
                    main@i_776 0121                      main@i_792 011A                      main@i_785 0123  
                    main@i_769 0116              ___wmul@multiplier 0017                      main@i_796 011C  
                    main@i_789 0118                      main@i_799 0129               ??_Lcd_Write_Char 0011  
                     _Lcd_Init 1772                       _Lcd_Port 1A1E                      copy_data0 1718  
                    copy_data1 1738                      copy_data2 1758       __end_of_Lcd_Write_String 185C  
             __size_of_Lcd_Cmd 0018                     _EECON1bits 000FA6                       __Hrparam 0000  
                     __Lrparam 0000             __CFG_BOREN$SBORDIS 000000               __size_of___awdiv 0084  
             __size_of___lwdiv 0052            load_i2c_registers@i 0020      start_routine@I2C_new_ADDR 00A7  
                  _current_pin 00BA                ___lwdiv@divisor 0012                ___lwdiv@counter 0014  
                  _read_keypad 15CC                       __ptext10 15CC                       __ptext11 1A70  
                     __ptext12 18AE                       __ptext13 1AE6                       __ptext14 14E0  
                     __ptext15 1670                       __ptext16 1772                       __ptext17 1ACE  
                     __ptext18 1A1E                  __size_of_main 0AF2           main@credential_state 011F  
        Eeprom_Write_Byte@data 0010       Eeprom_Write_Byte@address 0011                       int$flags 0050  
          main@is_leading_zero 011E                    _OSCTUNEbits 000F9B                     _INTCONbits 000FF2  
           Lcd_Write_Char@temp 0011                       intlevel2 0000       __end_of_Eeprom_Read_Byte 1AFA  
           Lcd_Set_Cursor@temp 0016               ??_mcu_initialise 0011                 menu_main@F3618 0049  
       start_routine@error_msg 0090                    _SSPCON1bits 000FC6              __CFG_FOSC$INTIO67 000000  
