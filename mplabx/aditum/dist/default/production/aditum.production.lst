

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Oct 14 21:48:58 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	idataBANK0,global,class=CODE,delta=1
     8                           	psect	idataBANK1,global,class=CODE,delta=1
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           	psect	eeprom_data
    48  F00000  10 00 00 00 00 00 00 00 	db	16,0,0,0,0,0,0,0	;# 
    49                           
    50                           	psect	idataCOMRAM
    51  001C5C                     __pidataCOMRAM:
    52                           	opt stack 0
    53                           
    54                           ;initializer for main@F3681
    55  001C5C  30                 	db	48
    56  001C5D  31                 	db	49
    57  001C5E  32                 	db	50
    58  001C5F  33                 	db	51
    59  001C60  34                 	db	52
    60  001C61  35                 	db	53
    61  001C62  36                 	db	54
    62  001C63  37                 	db	55
    63  001C64  38                 	db	56
    64  001C65  39                 	db	57
    65                           
    66                           ;initializer for menu_seconds_to_mmss@F3627
    67  001C66  30                 	db	48
    68  001C67  31                 	db	49
    69  001C68  32                 	db	50
    70  001C69  33                 	db	51
    71  001C6A  34                 	db	52
    72  001C6B  35                 	db	53
    73  001C6C  36                 	db	54
    74  001C6D  37                 	db	55
    75  001C6E  38                 	db	56
    76  001C6F  39                 	db	57
    77                           
    78                           ;initializer for menu_main@F3618
    79  001C70  30                 	db	48
    80  001C71  30                 	db	48
    81  001C72  3A                 	db	58
    82  001C73  30                 	db	48
    83  001C74  30                 	db	48
    84                           
    85                           	psect	idataBANK0
    86  001B92                     __pidataBANK0:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _i2c_r_reg
    90  001B92  2D                 	db	45
    91  001B93  2D                 	db	45
    92  001B94  2D                 	db	45
    93  001B95  2D                 	db	45
    94  001B96  2D                 	db	45
    95  001B97  2D                 	db	45
    96  001B98  2D                 	db	45
    97  001B99  2D                 	db	45
    98  001B9A  2D                 	db	45
    99  001B9B  2D                 	db	45
   100  001B9C  2D                 	db	45
   101  001B9D  2D                 	db	45
   102  001B9E  2D                 	db	45
   103  001B9F  2D                 	db	45
   104  001BA0  2D                 	db	45
   105  001BA1  2D                 	db	45
   106  001BA2  2D                 	db	45
   107  001BA3  2D                 	db	45
   108  001BA4  2D                 	db	45
   109  001BA5  2D                 	db	45
   110  001BA6  2D                 	db	45
   111  001BA7  2D                 	db	45
   112  001BA8  2D                 	db	45
   113  001BA9  2D                 	db	45
   114  001BAA  2D                 	db	45
   115  001BAB  2D                 	db	45
   116  001BAC  2D                 	db	45
   117  001BAD  2D                 	db	45
   118  001BAE  2D                 	db	45
   119  001BAF  2D                 	db	45
   120  001BB0  2D                 	db	45
   121  001BB1  2D                 	db	45
   122                           
   123                           ;initializer for _c
   124  001BB2  30                 	db	48
   125  001BB3  31                 	db	49
   126  001BB4  32                 	db	50
   127  001BB5  33                 	db	51
   128  001BB6  34                 	db	52
   129  001BB7  35                 	db	53
   130  001BB8  36                 	db	54
   131  001BB9  37                 	db	55
   132  001BBA  38                 	db	56
   133  001BBB  39                 	db	57
   134                           
   135                           ;initializer for running_display@F3742
   136  001BBC  30                 	db	48
   137  001BBD  30                 	db	48
   138  001BBE  3A                 	db	58
   139  001BBF  30                 	db	48
   140  001BC0  30                 	db	48
   141                           
   142                           ;initializer for start_routine@F3719
   143  001BC1  30                 	db	48
   144  001BC2  30                 	db	48
   145  001BC3  30                 	db	48
   146                           
   147                           ;initializer for _login_timeout
   148  001BC4  0708               	dw	1800
   149                           
   150                           	psect	idataBANK1
   151  001AE8                     __pidataBANK1:
   152                           	opt stack 0
   153                           
   154                           ;initializer for _i2c_w_reg
   155  001AE8  2D                 	db	45
   156  001AE9  2D                 	db	45
   157  001AEA  2D                 	db	45
   158  001AEB  2D                 	db	45
   159  001AEC  2D                 	db	45
   160  001AED  2D                 	db	45
   161  001AEE  2D                 	db	45
   162  001AEF  2D                 	db	45
   163  001AF0  2D                 	db	45
   164  001AF1  2D                 	db	45
   165  001AF2  2D                 	db	45
   166  001AF3  2D                 	db	45
   167  001AF4  2D                 	db	45
   168  001AF5  2D                 	db	45
   169  001AF6  2D                 	db	45
   170  001AF7  2D                 	db	45
   171  001AF8  2D                 	db	45
   172  001AF9  2D                 	db	45
   173  001AFA  2D                 	db	45
   174  001AFB  2D                 	db	45
   175  001AFC  2D                 	db	45
   176  001AFD  2D                 	db	45
   177  001AFE  2D                 	db	45
   178  001AFF  2D                 	db	45
   179  001B00  2D                 	db	45
   180  001B01  2D                 	db	45
   181  001B02  2D                 	db	45
   182  001B03  2D                 	db	45
   183  001B04  2D                 	db	45
   184  001B05  2D                 	db	45
   185  001B06  2D                 	db	45
   186  001B07  2D                 	db	45
   187                           
   188                           ;initializer for _hx
   189  001B08  30                 	db	48
   190  001B09  31                 	db	49
   191  001B0A  32                 	db	50
   192  001B0B  33                 	db	51
   193  001B0C  34                 	db	52
   194  001B0D  35                 	db	53
   195  001B0E  36                 	db	54
   196  001B0F  37                 	db	55
   197  001B10  38                 	db	56
   198  001B11  39                 	db	57
   199  001B12  41                 	db	65
   200  001B13  42                 	db	66
   201  001B14  43                 	db	67
   202  001B15  44                 	db	68
   203  001B16  45                 	db	69
   204  001B17  46                 	db	70
   205                           
   206                           ;initializer for running_display@F3745
   207  001B18  30                 	db	48
   208  001B19  31                 	db	49
   209  001B1A  32                 	db	50
   210  001B1B  33                 	db	51
   211  001B1C  34                 	db	52
   212  001B1D  35                 	db	53
   213  001B1E  36                 	db	54
   214  001B1F  37                 	db	55
   215  001B20  38                 	db	56
   216  001B21  39                 	db	57
   217                           
   218                           	psect	nvBANK0
   219  0000D4                     __pnvBANK0:
   220                           	opt stack 0
   221  0000D4                     _I2C_ADDR:
   222                           	opt stack 0
   223  0000D4                     	ds	1
   224  0000D5                     _Machine_ID:
   225                           	opt stack 0
   226  0000D5                     	ds	1
   227  0000                     _EEADR	set	4009
   228  0000                     _EECON1bits	set	4006
   229  0000                     _EECON2	set	4007
   230  0000                     _EEDATA	set	4008
   231  0000                     _INTCONbits	set	4082
   232  0000                     _LATC	set	3979
   233  0000                     _LATDbits	set	3980
   234  0000                     _OSCCON	set	4051
   235  0000                     _OSCTUNEbits	set	3995
   236  0000                     _PIE1bits	set	3997
   237  0000                     _PIR1bits	set	3998
   238  0000                     _PIR2bits	set	4001
   239  0000                     _PORTB	set	3969
   240  0000                     _PORTBbits	set	3969
   241  0000                     _PORTDbits	set	3971
   242  0000                     _SSPADD	set	4040
   243  0000                     _SSPBUF	set	4041
   244  0000                     _SSPCON1	set	4038
   245  0000                     _SSPCON1bits	set	4038
   246  0000                     _SSPCON2	set	4037
   247  0000                     _SSPSTAT	set	4039
   248  0000                     _SSPSTATbits	set	4039
   249  0000                     _TRISA	set	3986
   250  0000                     _TRISB	set	3987
   251  0000                     _TRISC	set	3988
   252  0000                     _TRISD	set	3989
   253                           
   254                           	psect	mediumconst
   255  007EA8                     __pmediumconst:
   256                           	opt stack 0
   257  007EA8  00                 	db	0
   258  007EA9                     STR_2:
   259  007EA9  20                 	db	32
   260  007EAA  20                 	db	32
   261  007EAB  20                 	db	32
   262  007EAC  20                 	db	32
   263  007EAD  20                 	db	32
   264  007EAE  20                 	db	32
   265  007EAF  20                 	db	32
   266  007EB0  20                 	db	32
   267  007EB1  20                 	db	32
   268  007EB2  20                 	db	32
   269  007EB3  20                 	db	32
   270  007EB4  20                 	db	32
   271  007EB5  20                 	db	32
   272  007EB6  20                 	db	32
   273  007EB7  20                 	db	32
   274  007EB8  20                 	db	32
   275  007EB9  00                 	db	0
   276  007EBA                     STR_4:
   277  007EBA  5B                 	db	91	;'['
   278  007EBB  20                 	db	32
   279  007EBC  5D                 	db	93	;']'
   280  007EBD  20                 	db	32
   281  007EBE  20                 	db	32
   282  007EBF  20                 	db	32
   283  007EC0  20                 	db	32
   284  007EC1  20                 	db	32
   285  007EC2  20                 	db	32
   286  007EC3  20                 	db	32
   287  007EC4  20                 	db	32
   288  007EC5  20                 	db	32
   289  007EC6  20                 	db	32
   290  007EC7  20                 	db	32
   291  007EC8  20                 	db	32
   292  007EC9  20                 	db	32
   293  007ECA  00                 	db	0
   294  007ECB                     STR_13:
   295  007ECB  20                 	db	32
   296  007ECC  20                 	db	32
   297  007ECD  20                 	db	32
   298  007ECE  5B                 	db	91	;'['
   299  007ECF  20                 	db	32
   300  007ED0  41                 	db	65	;'A'
   301  007ED1  64                 	db	100	;'d'
   302  007ED2  69                 	db	105	;'i'
   303  007ED3  74                 	db	116	;'t'
   304  007ED4  75                 	db	117	;'u'
   305  007ED5  6D                 	db	109	;'m'
   306  007ED6  20                 	db	32
   307  007ED7  5D                 	db	93	;']'
   308  007ED8  20                 	db	32
   309  007ED9  20                 	db	32
   310  007EDA  20                 	db	32
   311  007EDB  00                 	db	0
   312  007EDC                     STR_10:
   313  007EDC  20                 	db	32
   314  007EDD  20                 	db	32
   315  007EDE  20                 	db	32
   316  007EDF  20                 	db	32
   317  007EE0  5B                 	db	91	;'['
   318  007EE1  20                 	db	32
   319  007EE2  52                 	db	82	;'R'
   320  007EE3  65                 	db	101	;'e'
   321  007EE4  74                 	db	116	;'t'
   322  007EE5  72                 	db	114	;'r'
   323  007EE6  79                 	db	121	;'y'
   324  007EE7  20                 	db	32
   325  007EE8  5D                 	db	93	;']'
   326  007EE9  20                 	db	32
   327  007EEA  20                 	db	32
   328  007EEB  20                 	db	32
   329  007EEC  00                 	db	0
   330  007EED                     STR_26:
   331  007EED  4F                 	db	79	;'O'
   332  007EEE  75                 	db	117	;'u'
   333  007EEF  74                 	db	116	;'t'
   334  007EF0  20                 	db	32
   335  007EF1  6F                 	db	111	;'o'
   336  007EF2  66                 	db	102	;'f'
   337  007EF3  20                 	db	32
   338  007EF4  62                 	db	98	;'b'
   339  007EF5  6F                 	db	111	;'o'
   340  007EF6  75                 	db	117	;'u'
   341  007EF7  6E                 	db	110	;'n'
   342  007EF8  64                 	db	100	;'d'
   343  007EF9  73                 	db	115	;'s'
   344  007EFA  21                 	db	33
   345  007EFB  20                 	db	32
   346  007EFC  20                 	db	32
   347  007EFD  00                 	db	0
   348  007EFE                     STR_3:
   349  007EFE  45                 	db	69	;'E'
   350  007EFF  6E                 	db	110	;'n'
   351  007F00  74                 	db	116	;'t'
   352  007F01  65                 	db	101	;'e'
   353  007F02  72                 	db	114	;'r'
   354  007F03  20                 	db	32
   355  007F04  79                 	db	121	;'y'
   356  007F05  6F                 	db	111	;'o'
   357  007F06  75                 	db	117	;'u'
   358  007F07  72                 	db	114	;'r'
   359  007F08  20                 	db	32
   360  007F09  49                 	db	73	;'I'
   361  007F0A  44                 	db	68	;'D'
   362  007F0B  3A                 	db	58	;':'
   363  007F0C  20                 	db	32
   364  007F0D  20                 	db	32
   365  007F0E  00                 	db	0
   366  007F0F                     STR_17:
   367  007F0F  20                 	db	32
   368  007F10  20                 	db	32
   369  007F11  5B                 	db	91	;'['
   370  007F12  20                 	db	32
   371  007F13  20                 	db	32
   372  007F14  41                 	db	65	;'A'
   373  007F15  64                 	db	100	;'d'
   374  007F16  69                 	db	105	;'i'
   375  007F17  74                 	db	116	;'t'
   376  007F18  75                 	db	117	;'u'
   377  007F19  6D                 	db	109	;'m'
   378  007F1A  20                 	db	32
   379  007F1B  20                 	db	32
   380  007F1C  5D                 	db	93	;']'
   381  007F1D  20                 	db	32
   382  007F1E  20                 	db	32
   383  007F1F  00                 	db	0
   384  007F20                     STR_8:
   385  007F20  20                 	db	32
   386  007F21  20                 	db	32
   387  007F22  20                 	db	32
   388  007F23  5B                 	db	91	;'['
   389  007F24  20                 	db	32
   390  007F25  57                 	db	87	;'W'
   391  007F26  65                 	db	101	;'e'
   392  007F27  6C                 	db	108	;'l'
   393  007F28  63                 	db	99	;'c'
   394  007F29  6F                 	db	111	;'o'
   395  007F2A  6D                 	db	109	;'m'
   396  007F2B  65                 	db	101	;'e'
   397  007F2C  20                 	db	32
   398  007F2D  5D                 	db	93	;']'
   399  007F2E  20                 	db	32
   400  007F2F  20                 	db	32
   401  007F30  00                 	db	0
   402  007F31                     STR_19:
   403  007F31  4E                 	db	78	;'N'
   404  007F32  65                 	db	101	;'e'
   405  007F33  77                 	db	119	;'w'
   406  007F34  20                 	db	32
   407  007F35  4D                 	db	77	;'M'
   408  007F36  61                 	db	97	;'a'
   409  007F37  63                 	db	99	;'c'
   410  007F38  68                 	db	104	;'h'
   411  007F39  69                 	db	105	;'i'
   412  007F3A  6E                 	db	110	;'n'
   413  007F3B  65                 	db	101	;'e'
   414  007F3C  20                 	db	32
   415  007F3D  49                 	db	73	;'I'
   416  007F3E  44                 	db	68	;'D'
   417  007F3F  3A                 	db	58	;':'
   418  007F40  20                 	db	32
   419  007F41  00                 	db	0
   420  007F42                     STR_5:
   421  007F42  45                 	db	69	;'E'
   422  007F43  6E                 	db	110	;'n'
   423  007F44  74                 	db	116	;'t'
   424  007F45  65                 	db	101	;'e'
   425  007F46  72                 	db	114	;'r'
   426  007F47  20                 	db	32
   427  007F48  79                 	db	121	;'y'
   428  007F49  6F                 	db	111	;'o'
   429  007F4A  75                 	db	117	;'u'
   430  007F4B  72                 	db	114	;'r'
   431  007F4C  20                 	db	32
   432  007F4D  50                 	db	80	;'P'
   433  007F4E  49                 	db	73	;'I'
   434  007F4F  4E                 	db	78	;'N'
   435  007F50  3A                 	db	58	;':'
   436  007F51  20                 	db	32
   437  007F52  00                 	db	0
   438  007F53                     STR_25:
   439  007F53  4D                 	db	77	;'M'
   440  007F54  61                 	db	97	;'a'
   441  007F55  79                 	db	121	;'y'
   442  007F56  20                 	db	32
   443  007F57  6E                 	db	110	;'n'
   444  007F58  6F                 	db	111	;'o'
   445  007F59  74                 	db	116	;'t'
   446  007F5A  20                 	db	32
   447  007F5B  62                 	db	98	;'b'
   448  007F5C  65                 	db	101	;'e'
   449  007F5D  20                 	db	32
   450  007F5E  7A                 	db	122	;'z'
   451  007F5F  65                 	db	101	;'e'
   452  007F60  72                 	db	114	;'r'
   453  007F61  6F                 	db	111	;'o'
   454  007F62  21                 	db	33
   455  007F63  00                 	db	0
   456  007F64                     STR_18:
   457  007F64  4C                 	db	76	;'L'
   458  007F65  6F                 	db	111	;'o'
   459  007F66  61                 	db	97	;'a'
   460  007F67  64                 	db	100	;'d'
   461  007F68  20                 	db	32
   462  007F69  49                 	db	73	;'I'
   463  007F6A  32                 	db	50	;'2'
   464  007F6B  43                 	db	67	;'C'
   465  007F6C  20                 	db	32
   466  007F6D  73                 	db	115	;'s'
   467  007F6E  65                 	db	101	;'e'
   468  007F6F  74                 	db	116	;'t'
   469  007F70  75                 	db	117	;'u'
   470  007F71  70                 	db	112	;'p'
   471  007F72  2E                 	db	46
   472  007F73  2E                 	db	46
   473  007F74  00                 	db	0
   474  007F75                     STR_28:
   475  007F75  4C                 	db	76	;'L'
   476  007F76  6F                 	db	111	;'o'
   477  007F77  67                 	db	103	;'g'
   478  007F78  67                 	db	103	;'g'
   479  007F79  69                 	db	105	;'i'
   480  007F7A  6E                 	db	110	;'n'
   481  007F7B  67                 	db	103	;'g'
   482  007F7C  20                 	db	32
   483  007F7D  79                 	db	121	;'y'
   484  007F7E  6F                 	db	111	;'o'
   485  007F7F  75                 	db	117	;'u'
   486  007F80  20                 	db	32
   487  007F81  6F                 	db	111	;'o'
   488  007F82  75                 	db	117	;'u'
   489  007F83  74                 	db	116	;'t'
   490  007F84  2E                 	db	46
   491  007F85  00                 	db	0
   492  007F86                     STR_24:
   493  007F86  49                 	db	73	;'I'
   494  007F87  32                 	db	50	;'2'
   495  007F88  43                 	db	67	;'C'
   496  007F89  5F                 	db	95	;'_'
   497  007F8A  41                 	db	65	;'A'
   498  007F8B  44                 	db	68	;'D'
   499  007F8C  44                 	db	68	;'D'
   500  007F8D  52                 	db	82	;'R'
   501  007F8E  3E                 	db	62	;'>'
   502  007F8F  3E                 	db	62	;'>'
   503  007F90  45                 	db	69	;'E'
   504  007F91  45                 	db	69	;'E'
   505  007F92  50                 	db	80	;'P'
   506  007F93  52                 	db	82	;'R'
   507  007F94  4F                 	db	79	;'O'
   508  007F95  4D                 	db	77	;'M'
   509  007F96  00                 	db	0
   510  007F97                     STR_11:
   511  007F97  5B                 	db	91	;'['
   512  007F98  20                 	db	32
   513  007F99  53                 	db	83	;'S'
   514  007F9A  79                 	db	121	;'y'
   515  007F9B  73                 	db	115	;'s'
   516  007F9C  74                 	db	116	;'t'
   517  007F9D  65                 	db	101	;'e'
   518  007F9E  6D                 	db	109	;'m'
   519  007F9F  20                 	db	32
   520  007FA0  45                 	db	69	;'E'
   521  007FA1  72                 	db	114	;'r'
   522  007FA2  72                 	db	114	;'r'
   523  007FA3  6F                 	db	111	;'o'
   524  007FA4  72                 	db	114	;'r'
   525  007FA5  20                 	db	32
   526  007FA6  5D                 	db	93	;']'
   527  007FA7  00                 	db	0
   528  007FA8                     STR_20:
   529  007FA8  20                 	db	32
   530  007FA9  20                 	db	32
   531  007FAA  20                 	db	32
   532  007FAB  20                 	db	32
   533  007FAC  20                 	db	32
   534  007FAD  20                 	db	32
   535  007FAE  20                 	db	32
   536  007FAF  5B                 	db	91	;'['
   537  007FB0  30                 	db	48	;'0'
   538  007FB1  30                 	db	48	;'0'
   539  007FB2  31                 	db	49	;'1'
   540  007FB3  2D                 	db	45
   541  007FB4  31                 	db	49	;'1'
   542  007FB5  30                 	db	48	;'0'
   543  007FB6  30                 	db	48	;'0'
   544  007FB7  5D                 	db	93	;']'
   545  007FB8  00                 	db	0
   546  007FB9                     STR_9:
   547  007FB9  5B                 	db	91	;'['
   548  007FBA  41                 	db	65	;'A'
   549  007FBB  63                 	db	99	;'c'
   550  007FBC  63                 	db	99	;'c'
   551  007FBD  65                 	db	101	;'e'
   552  007FBE  73                 	db	115	;'s'
   553  007FBF  73                 	db	115	;'s'
   554  007FC0  20                 	db	32
   555  007FC1  20                 	db	32
   556  007FC2  44                 	db	68	;'D'
   557  007FC3  65                 	db	101	;'e'
   558  007FC4  6E                 	db	110	;'n'
   559  007FC5  69                 	db	105	;'i'
   560  007FC6  65                 	db	101	;'e'
   561  007FC7  64                 	db	100	;'d'
   562  007FC8  5D                 	db	93	;']'
   563  007FC9  00                 	db	0
   564  007FCA                     STR_7:
   565  007FCA  5B                 	db	91	;'['
   566  007FCB  41                 	db	65	;'A'
   567  007FCC  63                 	db	99	;'c'
   568  007FCD  63                 	db	99	;'c'
   569  007FCE  65                 	db	101	;'e'
   570  007FCF  73                 	db	115	;'s'
   571  007FD0  73                 	db	115	;'s'
   572  007FD1  20                 	db	32
   573  007FD2  47                 	db	71	;'G'
   574  007FD3  72                 	db	114	;'r'
   575  007FD4  61                 	db	97	;'a'
   576  007FD5  6E                 	db	110	;'n'
   577  007FD6  74                 	db	116	;'t'
   578  007FD7  65                 	db	101	;'e'
   579  007FD8  64                 	db	100	;'d'
   580  007FD9  5D                 	db	93	;']'
   581  007FDA  00                 	db	0
   582  007FDB                     STR_16:
   583  007FDB  44                 	db	68	;'D'
   584  007FDC  65                 	db	101	;'e'
   585  007FDD  76                 	db	118	;'v'
   586  007FDE  69                 	db	105	;'i'
   587  007FDF  63                 	db	99	;'c'
   588  007FE0  65                 	db	101	;'e'
   589  007FE1  20                 	db	32
   590  007FE2  49                 	db	73	;'I'
   591  007FE3  44                 	db	68	;'D'
   592  007FE4  20                 	db	32
   593  007FE5  00                 	db	0
   594  007FE6                     STR_15:
   595  007FE6  31                 	db	49	;'1'
   596  007FE7  2E                 	db	46
   597  007FE8  30                 	db	48	;'0'
   598  007FE9  2E                 	db	46
   599  007FEA  30                 	db	48	;'0'
   600  007FEB  00                 	db	0
   601  007FEC                     STR_27:
   602  007FEC  30                 	db	48	;'0'
   603  007FED  30                 	db	48	;'0'
   604  007FEE  3A                 	db	58	;':'
   605  007FEF  30                 	db	48	;'0'
   606  007FF0  30                 	db	48	;'0'
   607  007FF1  00                 	db	0
   608  007FF2                     STR_14:
   609  007FF2  52                 	db	82	;'R'
   610  007FF3  65                 	db	101	;'e'
   611  007FF4  76                 	db	118	;'v'
   612  007FF5  20                 	db	32
   613  007FF6  00                 	db	0
   614  007FF7                     STR_22:
   615  007FF7  5B                 	db	91	;'['
   616  007FF8  4F                 	db	79	;'O'
   617  007FF9  4B                 	db	75	;'K'
   618  007FFA  5D                 	db	93	;']'
   619  007FFB  00                 	db	0
   620  007FFC                     STR_23:
   621  007FFC  78                 	db	120	;'x'
   622  007FFD  00                 	db	0
   623  0000                     
   624                           ; #config settings
   625  007FFE  00                 	db	0	; dummy byte at the end
   626  0000                     
   627                           	psect	cinit
   628  00178C                     __pcinit:
   629                           	opt stack 0
   630  00178C                     start_initialization:
   631                           	opt stack 0
   632  00178C                     __initialization:
   633                           	opt stack 0
   634                           
   635                           ; Clear objects allocated to BANK1 (16 bytes)
   636  00178C  EE01  F065         	lfsr	0,__pbssBANK1
   637  001790  0E10               	movlw	16
   638  001792                     clear_0:
   639  001792  6AEE               	clrf	postinc0,c
   640  001794  06E8               	decf	wreg,f,c
   641  001796  E1FD               	bnz	clear_0
   642                           
   643                           ; Clear objects allocated to BANK0 (20 bytes)
   644  001798  EE00  F0C0         	lfsr	0,__pbssBANK0
   645  00179C  0E14               	movlw	20
   646  00179E                     clear_1:
   647  00179E  6AEE               	clrf	postinc0,c
   648  0017A0  06E8               	decf	wreg,f,c
   649  0017A2  E1FD               	bnz	clear_1
   650                           
   651                           ; Clear objects allocated to COMRAM (2 bytes)
   652  0017A4  6A4F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   653  0017A6  6A4E               	clrf	__pbssCOMRAM& (0+255),c
   654                           
   655                           ; Initialize objects allocated to BANK1 (58 bytes)
   656                           ; load TBLPTR registers with __pidataBANK1
   657  0017A8  0EE8               	movlw	low __pidataBANK1
   658  0017AA  6EF6               	movwf	tblptrl,c
   659  0017AC  0E1A               	movlw	high __pidataBANK1
   660  0017AE  6EF7               	movwf	tblptrh,c
   661  0017B0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   662  0017B2  6EF8               	movwf	tblptru,c
   663  0017B4  EE01  F000         	lfsr	0,__pdataBANK1
   664  0017B8  EE10 F03A          	lfsr	1,58
   665  0017BC                     copy_data0:
   666  0017BC  0009               	tblrd		*+
   667  0017BE  CFF5 FFEE          	movff	tablat,postinc0
   668  0017C2  50E5               	movf	postdec1,w,c
   669  0017C4  50E1               	movf	fsr1l,w,c
   670  0017C6  E1FA               	bnz	copy_data0
   671                           
   672                           ; Initialize objects allocated to BANK0 (52 bytes)
   673                           ; load TBLPTR registers with __pidataBANK0
   674  0017C8  0E92               	movlw	low __pidataBANK0
   675  0017CA  6EF6               	movwf	tblptrl,c
   676  0017CC  0E1B               	movlw	high __pidataBANK0
   677  0017CE  6EF7               	movwf	tblptrh,c
   678  0017D0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   679  0017D2  6EF8               	movwf	tblptru,c
   680  0017D4  EE00  F060         	lfsr	0,__pdataBANK0
   681  0017D8  EE10 F034          	lfsr	1,52
   682  0017DC                     copy_data1:
   683  0017DC  0009               	tblrd		*+
   684  0017DE  CFF5 FFEE          	movff	tablat,postinc0
   685  0017E2  50E5               	movf	postdec1,w,c
   686  0017E4  50E1               	movf	fsr1l,w,c
   687  0017E6  E1FA               	bnz	copy_data1
   688                           
   689                           ; Initialize objects allocated to COMRAM (25 bytes)
   690                           ; load TBLPTR registers with __pidataCOMRAM
   691  0017E8  0E5C               	movlw	low __pidataCOMRAM
   692  0017EA  6EF6               	movwf	tblptrl,c
   693  0017EC  0E1C               	movlw	high __pidataCOMRAM
   694  0017EE  6EF7               	movwf	tblptrh,c
   695  0017F0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   696  0017F2  6EF8               	movwf	tblptru,c
   697  0017F4  EE00  F035         	lfsr	0,__pdataCOMRAM
   698  0017F8  EE10 F019          	lfsr	1,25
   699  0017FC                     copy_data2:
   700  0017FC  0009               	tblrd		*+
   701  0017FE  CFF5 FFEE          	movff	tablat,postinc0
   702  001802  50E5               	movf	postdec1,w,c
   703  001804  50E1               	movf	fsr1l,w,c
   704  001806  E1FA               	bnz	copy_data2
   705  001808                     end_of_initialization:
   706                           	opt stack 0
   707  001808                     __end_of__initialization:
   708                           	opt stack 0
   709  001808  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   710  00180A  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   711  00180C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   712  00180E  6EF8               	movwf	tblptru,c
   713  001810  0100               	movlb	0
   714  001812  EF81  F000         	goto	_main	;jump to C main() function
   715                           tblptru	equ	0xFF8
   716                           tblptrh	equ	0xFF7
   717                           tblptrl	equ	0xFF6
   718                           tablat	equ	0xFF5
   719                           postinc0	equ	0xFEE
   720                           wreg	equ	0xFE8
   721                           postdec1	equ	0xFE5
   722                           fsr1l	equ	0xFE1
   723                           
   724                           	psect	bssCOMRAM
   725  00004E                     __pbssCOMRAM:
   726                           	opt stack 0
   727  00004E                     _i2c_byte_count:
   728                           	opt stack 0
   729  00004E                     	ds	1
   730  00004F                     _i2c_reg_addr:
   731                           	opt stack 0
   732  00004F                     	ds	1
   733                           tblptru	equ	0xFF8
   734                           tblptrh	equ	0xFF7
   735                           tblptrl	equ	0xFF6
   736                           tablat	equ	0xFF5
   737                           postinc0	equ	0xFEE
   738                           wreg	equ	0xFE8
   739                           postdec1	equ	0xFE5
   740                           fsr1l	equ	0xFE1
   741                           
   742                           	psect	dataCOMRAM
   743  000035                     __pdataCOMRAM:
   744                           	opt stack 0
   745  000035                     main@F3681:
   746                           	opt stack 0
   747  000035                     	ds	10
   748  00003F                     menu_seconds_to_mmss@F3627:
   749                           	opt stack 0
   750  00003F                     	ds	10
   751  000049                     menu_main@F3618:
   752                           	opt stack 0
   753  000049                     	ds	5
   754                           tblptru	equ	0xFF8
   755                           tblptrh	equ	0xFF7
   756                           tblptrl	equ	0xFF6
   757                           tablat	equ	0xFF5
   758                           postinc0	equ	0xFEE
   759                           wreg	equ	0xFE8
   760                           postdec1	equ	0xFE5
   761                           fsr1l	equ	0xFE1
   762                           
   763                           	psect	bssBANK0
   764  0000C0                     __pbssBANK0:
   765                           	opt stack 0
   766  0000C0                     _current_pin:
   767                           	opt stack 0
   768  0000C0                     	ds	9
   769  0000C9                     _current_user:
   770                           	opt stack 0
   771  0000C9                     	ds	9
   772  0000D2                     _EEP_I2C_ADDR:
   773                           	opt stack 0
   774  0000D2                     	ds	1
   775  0000D3                     _credentials_accepted:
   776                           	opt stack 0
   777  0000D3                     	ds	1
   778                           tblptru	equ	0xFF8
   779                           tblptrh	equ	0xFF7
   780                           tblptrl	equ	0xFF6
   781                           tablat	equ	0xFF5
   782                           postinc0	equ	0xFEE
   783                           wreg	equ	0xFE8
   784                           postdec1	equ	0xFE5
   785                           fsr1l	equ	0xFE1
   786                           
   787                           	psect	dataBANK0
   788  000060                     __pdataBANK0:
   789                           	opt stack 0
   790  000060                     _i2c_r_reg:
   791                           	opt stack 0
   792  000060                     	ds	32
   793  000080                     _c:
   794                           	opt stack 0
   795  000080                     	ds	10
   796  00008A                     running_display@F3742:
   797                           	opt stack 0
   798  00008A                     	ds	5
   799  00008F                     start_routine@F3719:
   800                           	opt stack 0
   801  00008F                     	ds	3
   802  000092                     _login_timeout:
   803                           	opt stack 0
   804  000092                     	ds	2
   805                           tblptru	equ	0xFF8
   806                           tblptrh	equ	0xFF7
   807                           tblptrl	equ	0xFF6
   808                           tablat	equ	0xFF5
   809                           postinc0	equ	0xFEE
   810                           wreg	equ	0xFE8
   811                           postdec1	equ	0xFE5
   812                           fsr1l	equ	0xFE1
   813                           
   814                           	psect	bssBANK1
   815  000165                     __pbssBANK1:
   816                           	opt stack 0
   817  000165                     _logged_user:
   818                           	opt stack 0
   819  000165                     	ds	16
   820                           tblptru	equ	0xFF8
   821                           tblptrh	equ	0xFF7
   822                           tblptrl	equ	0xFF6
   823                           tablat	equ	0xFF5
   824                           postinc0	equ	0xFEE
   825                           wreg	equ	0xFE8
   826                           postdec1	equ	0xFE5
   827                           fsr1l	equ	0xFE1
   828                           
   829                           	psect	dataBANK1
   830  000100                     __pdataBANK1:
   831                           	opt stack 0
   832  000100                     _i2c_w_reg:
   833                           	opt stack 0
   834  000100                     	ds	32
   835  000120                     _hx:
   836                           	opt stack 0
   837  000120                     	ds	16
   838  000130                     running_display@F3745:
   839                           	opt stack 0
   840  000130                     	ds	10
   841                           tblptru	equ	0xFF8
   842                           tblptrh	equ	0xFF7
   843                           tblptrl	equ	0xFF6
   844                           tablat	equ	0xFF5
   845                           postinc0	equ	0xFEE
   846                           wreg	equ	0xFE8
   847                           postdec1	equ	0xFE5
   848                           fsr1l	equ	0xFE1
   849                           
   850                           	psect	cstackBANK1
   851  00013A                     __pcstackBANK1:
   852                           	opt stack 0
   853  00013A                     main@c:
   854                           	opt stack 0
   855                           
   856                           ; 10 bytes @ 0x0
   857  00013A                     	ds	10
   858  000144                     main@buffer:
   859                           	opt stack 0
   860                           
   861                           ; 9 bytes @ 0xA
   862  000144                     	ds	9
   863  00014D                     main@i_788:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x13
   867  00014D                     	ds	2
   868  00014F                     main@i_791:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0x15
   872  00014F                     	ds	2
   873  000151                     main@i_794:
   874                           	opt stack 0
   875                           
   876                           ; 2 bytes @ 0x17
   877  000151                     	ds	2
   878  000153                     main@credential_state:
   879                           	opt stack 0
   880                           
   881                           ; 1 bytes @ 0x19
   882  000153                     	ds	1
   883  000154                     main@i_781:
   884                           	opt stack 0
   885                           
   886                           ; 2 bytes @ 0x1A
   887  000154                     	ds	2
   888  000156                     main@i_783:
   889                           	opt stack 0
   890                           
   891                           ; 2 bytes @ 0x1C
   892  000156                     	ds	2
   893  000158                     main@i_785:
   894                           	opt stack 0
   895                           
   896                           ; 2 bytes @ 0x1E
   897  000158                     	ds	2
   898  00015A                     main@i:
   899                           	opt stack 0
   900                           
   901                           ; 2 bytes @ 0x20
   902  00015A                     	ds	2
   903  00015C                     main@i_775:
   904                           	opt stack 0
   905                           
   906                           ; 2 bytes @ 0x22
   907  00015C                     	ds	2
   908  00015E                     main@u:
   909                           	opt stack 0
   910                           
   911                           ; 2 bytes @ 0x24
   912  00015E                     	ds	2
   913  000160                     main@i_772:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x26
   917  000160                     	ds	2
   918  000162                     main@p:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x28
   922  000162                     	ds	1
   923  000163                     main@n:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x29
   927  000163                     	ds	1
   928  000164                     main@x:
   929                           	opt stack 0
   930                           
   931                           ; 1 bytes @ 0x2A
   932  000164                     	ds	1
   933                           tblptru	equ	0xFF8
   934                           tblptrh	equ	0xFF7
   935                           tblptrl	equ	0xFF6
   936                           tablat	equ	0xFF5
   937                           postinc0	equ	0xFEE
   938                           wreg	equ	0xFE8
   939                           postdec1	equ	0xFE5
   940                           fsr1l	equ	0xFE1
   941                           
   942                           	psect	cstackBANK0
   943  000094                     __pcstackBANK0:
   944                           	opt stack 0
   945  000094                     start_routine@h:
   946                           	opt stack 0
   947  000094                     running_display@t:
   948                           	opt stack 0
   949                           
   950                           ; 5 bytes @ 0x0
   951  000094                     	ds	1
   952  000095                     start_routine@l:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0x1
   956  000095                     	ds	1
   957  000096                     start_routine@error_msg:
   958                           	opt stack 0
   959                           
   960                           ; 2 bytes @ 0x2
   961  000096                     	ds	2
   962  000098                     start_routine@d1:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x4
   966  000098                     	ds	1
   967  000099                     start_routine@v:
   968                           	opt stack 0
   969  000099                     running_display@hour:
   970                           	opt stack 0
   971                           
   972                           ; 2 bytes @ 0x5
   973  000099                     	ds	1
   974  00009A                     start_routine@i:
   975                           	opt stack 0
   976                           
   977                           ; 2 bytes @ 0x6
   978  00009A                     	ds	1
   979  00009B                     running_display@n:
   980                           	opt stack 0
   981                           
   982                           ; 10 bytes @ 0x7
   983  00009B                     	ds	1
   984  00009C                     start_routine@i_873:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0x8
   988  00009C                     	ds	2
   989  00009E                     start_routine@i_881:
   990                           	opt stack 0
   991                           
   992                           ; 2 bytes @ 0xA
   993  00009E                     	ds	2
   994  0000A0                     start_routine@i_899:
   995                           	opt stack 0
   996                           
   997                           ; 2 bytes @ 0xC
   998  0000A0                     	ds	2
   999  0000A2                     start_routine@i_902:
  1000                           	opt stack 0
  1001                           
  1002                           ; 2 bytes @ 0xE
  1003  0000A2                     	ds	2
  1004  0000A4                     start_routine@i_905:
  1005                           	opt stack 0
  1006                           
  1007                           ; 2 bytes @ 0x10
  1008  0000A4                     	ds	1
  1009  0000A5                     running_display@exit_running:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x11
  1013  0000A5                     	ds	1
  1014  0000A6                     running_display@i_912:
  1015                           	opt stack 0
  1016  0000A6                     start_routine@b:
  1017                           	opt stack 0
  1018                           
  1019                           ; 3 bytes @ 0x12
  1020  0000A6                     	ds	2
  1021  0000A8                     running_display@is_leading_zero:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x14
  1025  0000A8                     	ds	1
  1026  0000A9                     running_display@n_c:
  1027                           	opt stack 0
  1028  0000A9                     start_routine@i_896:
  1029                           	opt stack 0
  1030                           
  1031                           ; 2 bytes @ 0x15
  1032  0000A9                     	ds	1
  1033  0000AA                     running_display@ms:
  1034                           	opt stack 0
  1035                           
  1036                           ; 2 bytes @ 0x16
  1037  0000AA                     	ds	1
  1038  0000AB                     start_routine@i_906:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x17
  1042  0000AB                     	ds	1
  1043  0000AC                     running_display@minute:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x18
  1047  0000AC                     	ds	1
  1048  0000AD                     start_routine@I2C_new_ADDR:
  1049                           	opt stack 0
  1050                           
  1051                           ; 3 bytes @ 0x19
  1052  0000AD                     	ds	1
  1053  0000AE                     running_display@i_913:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x1A
  1057  0000AE                     	ds	2
  1058  0000B0                     start_routine@a:
  1059                           	opt stack 0
  1060  0000B0                     running_display@s:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x1C
  1064  0000B0                     	ds	1
  1065  0000B1                     start_routine@dt:
  1066                           	opt stack 0
  1067                           
  1068                           ; 1 bytes @ 0x1D
  1069  0000B1                     	ds	1
  1070  0000B2                     start_routine@i_893:
  1071                           	opt stack 0
  1072  0000B2                     running_display@i:
  1073                           	opt stack 0
  1074                           
  1075                           ; 2 bytes @ 0x1E
  1076  0000B2                     	ds	2
  1077  0000B4                     start_routine@dh:
  1078                           	opt stack 0
  1079  0000B4                     running_display@second:
  1080                           	opt stack 0
  1081                           
  1082                           ; 2 bytes @ 0x20
  1083  0000B4                     	ds	1
  1084  0000B5                     start_routine@x:
  1085                           	opt stack 0
  1086                           
  1087                           ; 1 bytes @ 0x21
  1088  0000B5                     	ds	1
  1089  0000B6                     start_routine@n:
  1090                           	opt stack 0
  1091                           
  1092                           ; 1 bytes @ 0x22
  1093  0000B6                     	ds	1
  1094  0000B7                     start_routine@new_I2C_address:
  1095                           	opt stack 0
  1096                           
  1097                           ; 1 bytes @ 0x23
  1098  0000B7                     	ds	1
  1099  0000B8                     ??_main:
  1100                           
  1101                           ; 1 bytes @ 0x24
  1102  0000B8                     	ds	8
  1103                           tblptru	equ	0xFF8
  1104                           tblptrh	equ	0xFF7
  1105                           tblptrl	equ	0xFF6
  1106                           tablat	equ	0xFF5
  1107                           postinc0	equ	0xFEE
  1108                           wreg	equ	0xFE8
  1109                           postdec1	equ	0xFE5
  1110                           fsr1l	equ	0xFE1
  1111                           
  1112                           	psect	cstackCOMRAM
  1113  000001                     __pcstackCOMRAM:
  1114                           	opt stack 0
  1115  000001                     ??_ISR:
  1116                           
  1117                           ; 1 bytes @ 0x0
  1118  000001                     	ds	14
  1119  00000F                     ISR@sspBuf:
  1120                           	opt stack 0
  1121                           
  1122                           ; 1 bytes @ 0xE
  1123  00000F                     	ds	1
  1124  000010                     ?___awdiv:
  1125                           	opt stack 0
  1126  000010                     ?___awmod:
  1127                           	opt stack 0
  1128  000010                     ?___lwdiv:
  1129                           	opt stack 0
  1130  000010                     Lcd_Port@a:
  1131                           	opt stack 0
  1132  000010                     Eeprom_Read_Byte@address:
  1133                           	opt stack 0
  1134  000010                     Eeprom_Write_Byte@data:
  1135                           	opt stack 0
  1136  000010                     latch_keypad@x:
  1137                           	opt stack 0
  1138  000010                     ___awdiv@dividend:
  1139                           	opt stack 0
  1140  000010                     ___awmod@dividend:
  1141                           	opt stack 0
  1142  000010                     ___lwdiv@dividend:
  1143                           	opt stack 0
  1144                           
  1145                           ; 2 bytes @ 0xF
  1146  000010                     	ds	1
  1147  000011                     Lcd_Cmd@a:
  1148                           	opt stack 0
  1149  000011                     Lcd_Write_Char@temp:
  1150                           	opt stack 0
  1151  000011                     Eeprom_Write_Byte@address:
  1152                           	opt stack 0
  1153                           
  1154                           ; 1 bytes @ 0x10
  1155  000011                     	ds	1
  1156  000012                     ??_latch_keypad:
  1157  000012                     ??_Lcd_Clear:
  1158  000012                     ??_Lcd_Init:
  1159  000012                     Lcd_Set_Cursor@b:
  1160                           	opt stack 0
  1161  000012                     Lcd_Write_Char@y:
  1162                           	opt stack 0
  1163  000012                     ___awdiv@divisor:
  1164                           	opt stack 0
  1165  000012                     ___awmod@divisor:
  1166                           	opt stack 0
  1167  000012                     ___lwdiv@divisor:
  1168                           	opt stack 0
  1169                           
  1170                           ; 2 bytes @ 0x11
  1171  000012                     	ds	1
  1172  000013                     Lcd_Set_Cursor@a:
  1173                           	opt stack 0
  1174  000013                     Lcd_Write_Char@a:
  1175                           	opt stack 0
  1176                           
  1177                           ; 1 bytes @ 0x12
  1178  000013                     	ds	1
  1179  000014                     Lcd_Set_Cursor@z:
  1180                           	opt stack 0
  1181  000014                     ___awdiv@counter:
  1182                           	opt stack 0
  1183  000014                     ___awmod@counter:
  1184                           	opt stack 0
  1185  000014                     ___lwdiv@counter:
  1186                           	opt stack 0
  1187  000014                     Lcd_Write_String@a:
  1188                           	opt stack 0
  1189                           
  1190                           ; 2 bytes @ 0x13
  1191  000014                     	ds	1
  1192  000015                     Lcd_Set_Cursor@y:
  1193                           	opt stack 0
  1194  000015                     ___awdiv@sign:
  1195                           	opt stack 0
  1196  000015                     ___awmod@sign:
  1197                           	opt stack 0
  1198  000015                     ___lwdiv@quotient:
  1199                           	opt stack 0
  1200                           
  1201                           ; 2 bytes @ 0x14
  1202  000015                     	ds	1
  1203  000016                     ??_Lcd_Write_String:
  1204  000016                     Lcd_Set_Cursor@temp:
  1205                           	opt stack 0
  1206  000016                     ___awdiv@quotient:
  1207                           	opt stack 0
  1208                           
  1209                           ; 2 bytes @ 0x15
  1210  000016                     	ds	1
  1211  000017                     ?___wmul:
  1212                           	opt stack 0
  1213  000017                     ___wmul@multiplier:
  1214                           	opt stack 0
  1215                           
  1216                           ; 2 bytes @ 0x16
  1217  000017                     	ds	1
  1218  000018                     ??_load_i2c_registers:
  1219  000018                     Lcd_Write_String@i:
  1220                           	opt stack 0
  1221                           
  1222                           ; 2 bytes @ 0x17
  1223  000018                     	ds	1
  1224  000019                     ___wmul@multiplicand:
  1225                           	opt stack 0
  1226                           
  1227                           ; 2 bytes @ 0x18
  1228  000019                     	ds	2
  1229  00001B                     ___wmul@product:
  1230                           	opt stack 0
  1231                           
  1232                           ; 2 bytes @ 0x1A
  1233  00001B                     	ds	1
  1234  00001C                     load_i2c_registers@checksum:
  1235                           	opt stack 0
  1236                           
  1237                           ; 2 bytes @ 0x1B
  1238  00001C                     	ds	1
  1239  00001D                     menu_progress_bar@load_time_ms:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x1C
  1243  00001D                     	ds	1
  1244  00001E                     load_i2c_registers@i_839:
  1245                           	opt stack 0
  1246                           
  1247                           ; 2 bytes @ 0x1D
  1248  00001E                     	ds	1
  1249  00001F                     ??_menu_progress_bar:
  1250                           
  1251                           ; 1 bytes @ 0x1E
  1252  00001F                     	ds	1
  1253  000020                     load_i2c_registers@i:
  1254                           	opt stack 0
  1255                           
  1256                           ; 2 bytes @ 0x1F
  1257  000020                     	ds	2
  1258  000022                     load_i2c_registers@i_837:
  1259                           	opt stack 0
  1260                           
  1261                           ; 2 bytes @ 0x21
  1262  000022                     	ds	1
  1263  000023                     menu_progress_bar@d:
  1264                           	opt stack 0
  1265                           
  1266                           ; 4 bytes @ 0x22
  1267  000023                     	ds	4
  1268  000027                     menu_progress_bar@ii:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0x26
  1272  000027                     	ds	2
  1273  000029                     menu_progress_bar@i:
  1274                           	opt stack 0
  1275                           
  1276                           ; 2 bytes @ 0x28
  1277  000029                     	ds	2
  1278  00002B                     menu_progress_bar@i_726:
  1279                           	opt stack 0
  1280                           
  1281                           ; 2 bytes @ 0x2A
  1282  00002B                     	ds	2
  1283  00002D                     menu_progress_bar@i_727:
  1284                           	opt stack 0
  1285                           
  1286                           ; 2 bytes @ 0x2C
  1287  00002D                     	ds	2
  1288  00002F                     menu_progress_bar@i_728:
  1289                           	opt stack 0
  1290                           
  1291                           ; 2 bytes @ 0x2E
  1292  00002F                     	ds	2
  1293  000031                     ??_start_routine:
  1294  000031                     ??_running_display:
  1295                           
  1296                           ; 1 bytes @ 0x30
  1297  000031                     	ds	4
  1298                           tblptru	equ	0xFF8
  1299                           tblptrh	equ	0xFF7
  1300                           tblptrl	equ	0xFF6
  1301                           tablat	equ	0xFF5
  1302                           postinc0	equ	0xFEE
  1303                           wreg	equ	0xFE8
  1304                           postdec1	equ	0xFE5
  1305                           fsr1l	equ	0xFE1
  1306                           
  1307 ;;
  1308 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  1309 ;;
  1310 ;; *************** function _main *****************
  1311 ;; Defined at:
  1312 ;;		line 50 in file "main.c"
  1313 ;; Parameters:    Size  Location     Type
  1314 ;;		None
  1315 ;; Auto vars:     Size  Location     Type
  1316 ;;  i               2   23[BANK1 ] int 
  1317 ;;  i               2   21[BANK1 ] int 
  1318 ;;  i               2   19[BANK1 ] int 
  1319 ;;  u               2   36[BANK1 ] int 
  1320 ;;  i               2   30[BANK1 ] int 
  1321 ;;  i               2   28[BANK1 ] int 
  1322 ;;  i               2   26[BANK1 ] int 
  1323 ;;  c              10    0[BANK1 ] unsigned char [10]
  1324 ;;  i               2   34[BANK1 ] int 
  1325 ;;  i               2   38[BANK1 ] int 
  1326 ;;  buffer          9   10[BANK1 ] unsigned char [9]
  1327 ;;  credential_s    1   25[BANK1 ] unsigned char 
  1328 ;;  i               2   32[BANK1 ] int 
  1329 ;;  x               1   42[BANK1 ] unsigned char 
  1330 ;;  n               1   41[BANK1 ] unsigned char 
  1331 ;;  p               1   40[BANK1 ] unsigned char 
  1332 ;; Return value:  Size  Location     Type
  1333 ;;                  1    wreg      void 
  1334 ;; Registers used:
  1335 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1336 ;; Tracked objects:
  1337 ;;		On entry : 0/0
  1338 ;;		On exit  : 0/0
  1339 ;;		Unchanged: 0/0
  1340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1341 ;;      Params:         0       0       0       0       0       0       0
  1342 ;;      Locals:         0       0      43       0       0       0       0
  1343 ;;      Temps:          0       8       0       0       0       0       0
  1344 ;;      Totals:         0       8      43       0       0       0       0
  1345 ;;Total ram usage:       51 bytes
  1346 ;; Hardware stack levels required when called:    6
  1347 ;; This function calls:
  1348 ;;		_Lcd_Init
  1349 ;;		_Lcd_Set_Cursor
  1350 ;;		_Lcd_Write_Char
  1351 ;;		_Lcd_Write_String
  1352 ;;		_latch_keypad
  1353 ;;		_load_i2c_registers
  1354 ;;		_mcu_initialise
  1355 ;;		_menu_progress_bar
  1356 ;;		_read_keypad
  1357 ;;		_running_display
  1358 ;;		_start_routine
  1359 ;; This function is called by:
  1360 ;;		Startup code after reset
  1361 ;; This function uses a non-reentrant model
  1362 ;;
  1363                           
  1364                           	psect	text0
  1365  000102                     __ptext0:
  1366                           	opt stack 0
  1367  000102                     _main:
  1368                           	opt stack 25
  1369                           
  1370                           ;main.c: 54: unsigned char n = 0, p = 0;
  1371                           
  1372                           ;incstack = 0
  1373  000102  0E00               	movlw	0
  1374  000104  0101               	movlb	1	; () banked
  1375  000106  6F63               	movwf	main@n& (0+255),b
  1376  000108  0E00               	movlw	0
  1377  00010A  0101               	movlb	1	; () banked
  1378  00010C  6F62               	movwf	main@p& (0+255),b
  1379                           
  1380                           ;main.c: 55: unsigned char x = '_';
  1381  00010E  0E5F               	movlw	95
  1382  000110  0101               	movlb	1	; () banked
  1383  000112  6F64               	movwf	main@x& (0+255),b
  1384                           
  1385                           ; BSR set to: 1
  1386                           ;main.c: 58: mcu_initialise();
  1387  000114  EC23  F00D         	call	_mcu_initialise	;wreg free
  1388                           
  1389                           ;main.c: 59: Lcd_Init();
  1390  000118  EC4D  F00C         	call	_Lcd_Init	;wreg free
  1391                           
  1392                           ;main.c: 63: start_routine();
  1393  00011C  EC0F  F005         	call	_start_routine	;wreg free
  1394  000120                     l4482:
  1395                           
  1396                           ;main.c: 67: {
  1397                           ;main.c: 68: for (int i = 0; i < 32; i++)
  1398  000120  0E00               	movlw	0
  1399  000122  0101               	movlb	1	; () banked
  1400  000124  6F5B               	movwf	(main@i+1)& (0+255),b
  1401  000126  0E00               	movlw	0
  1402  000128  6F5A               	movwf	main@i& (0+255),b
  1403                           
  1404                           ; BSR set to: 1
  1405  00012A  0101               	movlb	1	; () banked
  1406  00012C  BF5B               	btfsc	(main@i+1)& (0+255),7,b
  1407  00012E  D00C               	goto	l4488
  1408  000130  0101               	movlb	1	; () banked
  1409  000132  515B               	movf	(main@i+1)& (0+255),w,b
  1410  000134  E107               	bnz	u4310
  1411  000136  0E20               	movlw	32
  1412  000138  0101               	movlb	1	; () banked
  1413  00013A  5D5A               	subwf	main@i& (0+255),w,b
  1414  00013C  B0D8               	btfsc	status,0,c
  1415  00013E  EF08  F005         	goto	l4760
  1416  000142  D002               	goto	l4488
  1417  000144                     u4310:
  1418                           
  1419                           ; BSR set to: 1
  1420  000144  EF08  F005         	goto	l4760
  1421  000148                     l4488:
  1422                           
  1423                           ; BSR set to: 1
  1424                           ;main.c: 69: {
  1425                           ;main.c: 70: i2c_w_reg[i] = '-';
  1426  000148  0E00               	movlw	low _i2c_w_reg
  1427  00014A  0101               	movlb	1	; () banked
  1428  00014C  255A               	addwf	main@i& (0+255),w,b
  1429  00014E  6ED9               	movwf	fsr2l,c
  1430  000150  0E01               	movlw	high _i2c_w_reg
  1431  000152  0101               	movlb	1	; () banked
  1432  000154  215B               	addwfc	(main@i+1)& (0+255),w,b
  1433  000156  6EDA               	movwf	fsr2h,c
  1434  000158  0E2D               	movlw	45
  1435  00015A  6EDF               	movwf	indf2,c
  1436                           
  1437                           ;main.c: 71: i2c_r_reg[i] = '-';
  1438  00015C  0E60               	movlw	low _i2c_r_reg
  1439  00015E  0101               	movlb	1	; () banked
  1440  000160  255A               	addwf	main@i& (0+255),w,b
  1441  000162  6ED9               	movwf	fsr2l,c
  1442  000164  0E00               	movlw	high _i2c_r_reg
  1443  000166  0101               	movlb	1	; () banked
  1444  000168  215B               	addwfc	(main@i+1)& (0+255),w,b
  1445  00016A  6EDA               	movwf	fsr2h,c
  1446  00016C  0E2D               	movlw	45
  1447  00016E  6EDF               	movwf	indf2,c
  1448                           
  1449                           ; BSR set to: 1
  1450  000170  0101               	movlb	1	; () banked
  1451  000172  4B5A               	infsnz	main@i& (0+255),f,b
  1452  000174  2B5B               	incf	(main@i+1)& (0+255),f,b
  1453                           
  1454                           ; BSR set to: 1
  1455  000176  0101               	movlb	1	; () banked
  1456  000178  BF5B               	btfsc	(main@i+1)& (0+255),7,b
  1457  00017A  D7E6               	goto	l4488
  1458  00017C  0101               	movlb	1	; () banked
  1459  00017E  515B               	movf	(main@i+1)& (0+255),w,b
  1460  000180  E101               	bnz	u4320
  1461  000182  D7D9               	goto	L1
  1462  000184                     u4320:
  1463                           
  1464                           ; BSR set to: 1
  1465                           ;main.c: 72: }
  1466                           ;main.c: 73: while (credentials_accepted == 0 )
  1467  000184  EF08  F005         	goto	l4760
  1468  000188                     l4494:
  1469                           
  1470                           ;main.c: 74: {
  1471                           ;main.c: 75: unsigned char buffer[9];
  1472                           ;main.c: 76: for (int i = 0; i < 9; i++)
  1473  000188  0E00               	movlw	0
  1474  00018A  0101               	movlb	1	; () banked
  1475  00018C  6F61               	movwf	(main@i_772+1)& (0+255),b
  1476  00018E  0E00               	movlw	0
  1477  000190  6F60               	movwf	main@i_772& (0+255),b
  1478  000192                     l4496:
  1479                           
  1480                           ; BSR set to: 1
  1481  000192  0101               	movlb	1	; () banked
  1482  000194  BF61               	btfsc	(main@i_772+1)& (0+255),7,b
  1483  000196  D008               	goto	l4500
  1484  000198  0101               	movlb	1	; () banked
  1485  00019A  5161               	movf	(main@i_772+1)& (0+255),w,b
  1486  00019C  E127               	bnz	l4506
  1487  00019E  0E09               	movlw	9
  1488  0001A0  0101               	movlb	1	; () banked
  1489  0001A2  5D60               	subwf	main@i_772& (0+255),w,b
  1490  0001A4  B0D8               	btfsc	status,0,c
  1491  0001A6  D022               	goto	l4506
  1492  0001A8                     l4500:
  1493                           
  1494                           ; BSR set to: 1
  1495                           ;main.c: 77: {
  1496                           ;main.c: 78: current_user[i] = '0';
  1497  0001A8  0EC9               	movlw	low _current_user
  1498  0001AA  0101               	movlb	1	; () banked
  1499  0001AC  2560               	addwf	main@i_772& (0+255),w,b
  1500  0001AE  6ED9               	movwf	fsr2l,c
  1501  0001B0  0E00               	movlw	high _current_user
  1502  0001B2  0101               	movlb	1	; () banked
  1503  0001B4  2161               	addwfc	(main@i_772+1)& (0+255),w,b
  1504  0001B6  6EDA               	movwf	fsr2h,c
  1505  0001B8  0E30               	movlw	48
  1506  0001BA  6EDF               	movwf	indf2,c
  1507                           
  1508                           ;main.c: 79: current_pin[i] = '0';
  1509  0001BC  0EC0               	movlw	low _current_pin
  1510  0001BE  0101               	movlb	1	; () banked
  1511  0001C0  2560               	addwf	main@i_772& (0+255),w,b
  1512  0001C2  6ED9               	movwf	fsr2l,c
  1513  0001C4  0E00               	movlw	high _current_pin
  1514  0001C6  0101               	movlb	1	; () banked
  1515  0001C8  2161               	addwfc	(main@i_772+1)& (0+255),w,b
  1516  0001CA  6EDA               	movwf	fsr2h,c
  1517  0001CC  0E30               	movlw	48
  1518  0001CE  6EDF               	movwf	indf2,c
  1519                           
  1520                           ;main.c: 80: buffer[i] = '0';
  1521  0001D0  0E44               	movlw	low main@buffer
  1522  0001D2  0101               	movlb	1	; () banked
  1523  0001D4  2560               	addwf	main@i_772& (0+255),w,b
  1524  0001D6  6ED9               	movwf	fsr2l,c
  1525  0001D8  0E01               	movlw	high main@buffer
  1526  0001DA  0101               	movlb	1	; () banked
  1527  0001DC  2161               	addwfc	(main@i_772+1)& (0+255),w,b
  1528  0001DE  6EDA               	movwf	fsr2h,c
  1529  0001E0  0E30               	movlw	48
  1530  0001E2  6EDF               	movwf	indf2,c
  1531                           
  1532                           ; BSR set to: 1
  1533  0001E4  0101               	movlb	1	; () banked
  1534  0001E6  4B60               	infsnz	main@i_772& (0+255),f,b
  1535  0001E8  2B61               	incf	(main@i_772+1)& (0+255),f,b
  1536  0001EA  D7D3               	goto	l4496
  1537  0001EC                     l4506:
  1538                           
  1539                           ; BSR set to: 1
  1540                           ;main.c: 81: }
  1541                           ;main.c: 82: n = 0;
  1542  0001EC  0E00               	movlw	0
  1543  0001EE  0101               	movlb	1	; () banked
  1544  0001F0  6F63               	movwf	main@n& (0+255),b
  1545                           
  1546                           ; BSR set to: 1
  1547                           ;main.c: 83: Lcd_Set_Cursor(1,1);
  1548  0001F2  0E01               	movlw	1
  1549  0001F4  6E12               	movwf	Lcd_Set_Cursor@b,c
  1550  0001F6  0E01               	movlw	1
  1551  0001F8  EC4C  F00D         	call	_Lcd_Set_Cursor
  1552                           
  1553                           ;main.c: 84: Lcd_Write_String("Enter your ID:  ");
  1554  0001FC  0EFE               	movlw	low STR_3
  1555  0001FE  6E14               	movwf	Lcd_Write_String@a,c
  1556  000200  0E7E               	movlw	high STR_3
  1557  000202  6E15               	movwf	Lcd_Write_String@a+1,c
  1558  000204  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  1559                           
  1560                           ;main.c: 85: Lcd_Set_Cursor(2,1);
  1561  000208  0E01               	movlw	1
  1562  00020A  6E12               	movwf	Lcd_Set_Cursor@b,c
  1563  00020C  0E02               	movlw	2
  1564  00020E  EC4C  F00D         	call	_Lcd_Set_Cursor
  1565                           
  1566                           ;main.c: 86: Lcd_Write_String("[ ]             ");
  1567  000212  0EBA               	movlw	low STR_4
  1568  000214  6E14               	movwf	Lcd_Write_String@a,c
  1569  000216  0E7E               	movlw	high STR_4
  1570  000218  6E15               	movwf	Lcd_Write_String@a+1,c
  1571  00021A  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  1572                           
  1573                           ;main.c: 87: Lcd_Set_Cursor(2,1);
  1574  00021E  0E01               	movlw	1
  1575  000220  6E12               	movwf	Lcd_Set_Cursor@b,c
  1576  000222  0E02               	movlw	2
  1577  000224  EC4C  F00D         	call	_Lcd_Set_Cursor
  1578                           
  1579                           ;main.c: 89: while (n < 10)
  1580  000228  D0D0               	goto	l4568
  1581  00022A                     l4518:
  1582                           
  1583                           ;main.c: 90: {
  1584                           ;main.c: 91: if (n == 9)
  1585  00022A  0E09               	movlw	9
  1586  00022C  0101               	movlb	1	; () banked
  1587  00022E  1963               	xorwf	main@n& (0+255),w,b
  1588  000230  B4D8               	btfsc	status,2,c
  1589  000232  D0CF               	goto	l4570
  1590                           
  1591                           ; BSR set to: 1
  1592                           ;main.c: 93: Lcd_Set_Cursor(2,2);
  1593                           
  1594                           ; BSR set to: 1
  1595                           
  1596                           ; BSR set to: 1
  1597                           ;main.c: 92: break;
  1598  000234  0E02               	movlw	2
  1599  000236  6E12               	movwf	Lcd_Set_Cursor@b,c
  1600  000238  0E02               	movlw	2
  1601  00023A  EC4C  F00D         	call	_Lcd_Set_Cursor
  1602                           
  1603                           ;main.c: 94: Lcd_Write_Char(c[9-n]);
  1604  00023E  0101               	movlb	1	; () banked
  1605  000240  5163               	movf	main@n& (0+255),w,b
  1606  000242  0100               	movlb	0	; () banked
  1607  000244  6FB8               	movwf	??_main& (0+255),b
  1608  000246  6BB9               	clrf	(??_main+1)& (0+255),b
  1609  000248  0100               	movlb	0	; () banked
  1610  00024A  1FB8               	comf	??_main& (0+255),f,b
  1611  00024C  1FB9               	comf	(??_main+1)& (0+255),f,b
  1612  00024E  4BB8               	infsnz	??_main& (0+255),f,b
  1613  000250  2BB9               	incf	(??_main+1)& (0+255),f,b
  1614  000252  0E09               	movlw	9
  1615  000254  0100               	movlb	0	; () banked
  1616  000256  27B8               	addwf	??_main& (0+255),f,b
  1617  000258  0E00               	movlw	0
  1618  00025A  23B9               	addwfc	(??_main+1)& (0+255),f,b
  1619  00025C  0E80               	movlw	low _c
  1620  00025E  0100               	movlb	0	; () banked
  1621  000260  25B8               	addwf	??_main& (0+255),w,b
  1622  000262  6ED9               	movwf	fsr2l,c
  1623  000264  0E00               	movlw	high _c
  1624  000266  0100               	movlb	0	; () banked
  1625  000268  21B9               	addwfc	(??_main+1)& (0+255),w,b
  1626  00026A  6EDA               	movwf	fsr2h,c
  1627  00026C  50DF               	movf	indf2,w,c
  1628  00026E  ECAD  F00D         	call	_Lcd_Write_Char
  1629                           
  1630                           ;main.c: 95: x = read_keypad();
  1631  000272  EC74  F00B         	call	_read_keypad	;wreg free
  1632  000276  0101               	movlb	1	; () banked
  1633  000278  6F64               	movwf	main@x& (0+255),b
  1634                           
  1635                           ; BSR set to: 1
  1636                           ;main.c: 96: if (x != '_')
  1637  00027A  0E5F               	movlw	95
  1638  00027C  0101               	movlb	1	; () banked
  1639  00027E  1964               	xorwf	main@x& (0+255),w,b
  1640  000280  B4D8               	btfsc	status,2,c
  1641  000282  D0A3               	goto	l4568
  1642                           
  1643                           ; BSR set to: 1
  1644                           ;main.c: 97: {
  1645                           ;main.c: 98: if (((x - '#') == 0)&&(n > 0))
  1646  000284  0EDD               	movlw	221
  1647  000286  0100               	movlb	0	; () banked
  1648  000288  6FB8               	movwf	??_main& (0+255),b
  1649  00028A  0EFF               	movlw	255
  1650  00028C  0100               	movlb	0	; () banked
  1651  00028E  6FB9               	movwf	(??_main+1)& (0+255),b
  1652  000290  0101               	movlb	1	; () banked
  1653  000292  5164               	movf	main@x& (0+255),w,b
  1654  000294  0100               	movlb	0	; () banked
  1655  000296  6FBA               	movwf	(??_main+2)& (0+255),b
  1656  000298  6BBB               	clrf	(??_main+3)& (0+255),b
  1657  00029A  0100               	movlb	0	; () banked
  1658  00029C  51B8               	movf	??_main& (0+255),w,b
  1659  00029E  0100               	movlb	0	; () banked
  1660  0002A0  27BA               	addwf	(??_main+2)& (0+255),f,b
  1661  0002A2  0100               	movlb	0	; () banked
  1662  0002A4  51B9               	movf	(??_main+1)& (0+255),w,b
  1663  0002A6  0100               	movlb	0	; () banked
  1664  0002A8  23BB               	addwfc	(??_main+3)& (0+255),f,b
  1665  0002AA  0100               	movlb	0	; () banked
  1666  0002AC  51BA               	movf	(??_main+2)& (0+255),w,b
  1667  0002AE  0100               	movlb	0	; () banked
  1668  0002B0  11BB               	iorwf	(??_main+3)& (0+255),w,b
  1669  0002B2  A4D8               	btfss	status,2,c
  1670  0002B4  D034               	goto	l4550
  1671                           
  1672                           ; BSR set to: 0
  1673  0002B6  0101               	movlb	1	; () banked
  1674  0002B8  5163               	movf	main@n& (0+255),w,b
  1675  0002BA  0101               	movlb	1	; () banked
  1676  0002BC  B4D8               	btfsc	status,2,c
  1677  0002BE  D02F               	goto	l4550
  1678                           
  1679                           ; BSR set to: 1
  1680                           ;main.c: 99: {
  1681                           ;main.c: 100: buffer[n] = '?';
  1682  0002C0  0101               	movlb	1	; () banked
  1683  0002C2  5163               	movf	main@n& (0+255),w,b
  1684  0002C4  0D01               	mullw	1
  1685  0002C6  0E44               	movlw	low main@buffer
  1686  0002C8  24F3               	addwf	prodl,w,c
  1687  0002CA  6ED9               	movwf	fsr2l,c
  1688  0002CC  0E01               	movlw	high main@buffer
  1689  0002CE  20F4               	addwfc	prodh,w,c
  1690  0002D0  6EDA               	movwf	fsr2h,c
  1691  0002D2  0E3F               	movlw	63
  1692  0002D4  6EDF               	movwf	indf2,c
  1693                           
  1694                           ; BSR set to: 1
  1695                           ;main.c: 101: Lcd_Set_Cursor(2, 7 + n);
  1696  0002D6  0101               	movlb	1	; () banked
  1697  0002D8  5163               	movf	main@n& (0+255),w,b
  1698  0002DA  0F07               	addlw	7
  1699  0002DC  6E12               	movwf	Lcd_Set_Cursor@b,c
  1700  0002DE  0E02               	movlw	2
  1701  0002E0  EC4C  F00D         	call	_Lcd_Set_Cursor
  1702                           
  1703                           ;main.c: 102: Lcd_Write_Char('_');
  1704  0002E4  0E5F               	movlw	95
  1705  0002E6  ECAD  F00D         	call	_Lcd_Write_Char
  1706                           
  1707                           ;main.c: 103: latch_keypad(&x);
  1708  0002EA  0E64               	movlw	low main@x
  1709  0002EC  6E10               	movwf	latch_keypad@x,c
  1710  0002EE  0E01               	movlw	high main@x
  1711  0002F0  6E11               	movwf	latch_keypad@x+1,c
  1712  0002F2  EC91  F00D         	call	_latch_keypad	;wreg free
  1713                           
  1714                           ;main.c: 104: Lcd_Set_Cursor(2, 8 + n);
  1715  0002F6  0101               	movlb	1	; () banked
  1716  0002F8  5163               	movf	main@n& (0+255),w,b
  1717  0002FA  0F08               	addlw	8
  1718  0002FC  6E12               	movwf	Lcd_Set_Cursor@b,c
  1719  0002FE  0E02               	movlw	2
  1720  000300  EC4C  F00D         	call	_Lcd_Set_Cursor
  1721                           
  1722                           ;main.c: 105: Lcd_Write_Char(' ');
  1723  000304  0E20               	movlw	32
  1724  000306  ECAD  F00D         	call	_Lcd_Write_Char
  1725                           
  1726                           ;main.c: 106: Lcd_Set_Cursor(2, 7 + n);
  1727  00030A  0101               	movlb	1	; () banked
  1728  00030C  5163               	movf	main@n& (0+255),w,b
  1729  00030E  0F07               	addlw	7
  1730  000310  6E12               	movwf	Lcd_Set_Cursor@b,c
  1731  000312  0E02               	movlw	2
  1732  000314  EC4C  F00D         	call	_Lcd_Set_Cursor
  1733                           
  1734                           ;main.c: 107: n--;
  1735  000318  0101               	movlb	1	; () banked
  1736  00031A  0763               	decf	main@n& (0+255),f,b
  1737                           
  1738                           ;main.c: 108: }
  1739  00031C  D056               	goto	l4568
  1740  00031E                     l4550:
  1741                           
  1742                           ;main.c: 109: else if ((x - '#') != 0)
  1743  00031E  0EDD               	movlw	221
  1744  000320  0100               	movlb	0	; () banked
  1745  000322  6FB8               	movwf	??_main& (0+255),b
  1746  000324  0EFF               	movlw	255
  1747  000326  0100               	movlb	0	; () banked
  1748  000328  6FB9               	movwf	(??_main+1)& (0+255),b
  1749  00032A  0101               	movlb	1	; () banked
  1750  00032C  5164               	movf	main@x& (0+255),w,b
  1751  00032E  0100               	movlb	0	; () banked
  1752  000330  6FBA               	movwf	(??_main+2)& (0+255),b
  1753  000332  6BBB               	clrf	(??_main+3)& (0+255),b
  1754  000334  0100               	movlb	0	; () banked
  1755  000336  51B8               	movf	??_main& (0+255),w,b
  1756  000338  0100               	movlb	0	; () banked
  1757  00033A  27BA               	addwf	(??_main+2)& (0+255),f,b
  1758  00033C  0100               	movlb	0	; () banked
  1759  00033E  51B9               	movf	(??_main+1)& (0+255),w,b
  1760  000340  0100               	movlb	0	; () banked
  1761  000342  23BB               	addwfc	(??_main+3)& (0+255),f,b
  1762  000344  0100               	movlb	0	; () banked
  1763  000346  51BA               	movf	(??_main+2)& (0+255),w,b
  1764  000348  0100               	movlb	0	; () banked
  1765  00034A  11BB               	iorwf	(??_main+3)& (0+255),w,b
  1766  00034C  B4D8               	btfsc	status,2,c
  1767  00034E  D03D               	goto	l4568
  1768                           
  1769                           ; BSR set to: 0
  1770                           ;main.c: 110: {
  1771                           ;main.c: 111: if ((x == '*')|(n == 9))
  1772  000350  0E2A               	movlw	42
  1773  000352  0101               	movlb	1	; () banked
  1774  000354  1964               	xorwf	main@x& (0+255),w,b
  1775  000356  B4D8               	btfsc	status,2,c
  1776  000358  D03C               	goto	l4570
  1777                           
  1778                           ; BSR set to: 1
  1779  00035A  0E09               	movlw	9
  1780  00035C  0101               	movlb	1	; () banked
  1781  00035E  1963               	xorwf	main@n& (0+255),w,b
  1782  000360  B4D8               	btfsc	status,2,c
  1783  000362  D037               	goto	l4570
  1784                           
  1785                           ; BSR set to: 1
  1786                           ;main.c: 114: }
  1787                           ;main.c: 115: n++;
  1788                           
  1789                           ; BSR set to: 1
  1790                           
  1791                           ; BSR set to: 1
  1792                           ;main.c: 112: {
  1793                           ;main.c: 113: break;
  1794  000364  0101               	movlb	1	; () banked
  1795  000366  2B63               	incf	main@n& (0+255),f,b
  1796                           
  1797                           ; BSR set to: 1
  1798                           ;main.c: 116: buffer[n-1] = x;
  1799  000368  0EFF               	movlw	255
  1800  00036A  0100               	movlb	0	; () banked
  1801  00036C  6FB8               	movwf	??_main& (0+255),b
  1802  00036E  0EFF               	movlw	255
  1803  000370  0100               	movlb	0	; () banked
  1804  000372  6FB9               	movwf	(??_main+1)& (0+255),b
  1805  000374  0101               	movlb	1	; () banked
  1806  000376  5163               	movf	main@n& (0+255),w,b
  1807  000378  0100               	movlb	0	; () banked
  1808  00037A  6FBA               	movwf	(??_main+2)& (0+255),b
  1809  00037C  6BBB               	clrf	(??_main+3)& (0+255),b
  1810  00037E  0100               	movlb	0	; () banked
  1811  000380  51B8               	movf	??_main& (0+255),w,b
  1812  000382  0100               	movlb	0	; () banked
  1813  000384  27BA               	addwf	(??_main+2)& (0+255),f,b
  1814  000386  0100               	movlb	0	; () banked
  1815  000388  51B9               	movf	(??_main+1)& (0+255),w,b
  1816  00038A  0100               	movlb	0	; () banked
  1817  00038C  23BB               	addwfc	(??_main+3)& (0+255),f,b
  1818  00038E  0E44               	movlw	low main@buffer
  1819  000390  0100               	movlb	0	; () banked
  1820  000392  25BA               	addwf	(??_main+2)& (0+255),w,b
  1821  000394  6ED9               	movwf	fsr2l,c
  1822  000396  0E01               	movlw	high main@buffer
  1823  000398  0100               	movlb	0	; () banked
  1824  00039A  21BB               	addwfc	(??_main+3)& (0+255),w,b
  1825  00039C  6EDA               	movwf	fsr2h,c
  1826  00039E  C164  FFDF         	movff	main@x,indf2
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;main.c: 117: Lcd_Set_Cursor(2, 7 + n);
  1830  0003A2  0101               	movlb	1	; () banked
  1831  0003A4  5163               	movf	main@n& (0+255),w,b
  1832  0003A6  0F07               	addlw	7
  1833  0003A8  6E12               	movwf	Lcd_Set_Cursor@b,c
  1834  0003AA  0E02               	movlw	2
  1835  0003AC  EC4C  F00D         	call	_Lcd_Set_Cursor
  1836                           
  1837                           ;main.c: 118: Lcd_Write_Char(x);
  1838  0003B0  0101               	movlb	1	; () banked
  1839  0003B2  5164               	movf	main@x& (0+255),w,b
  1840  0003B4  ECAD  F00D         	call	_Lcd_Write_Char
  1841                           
  1842                           ;main.c: 119: Lcd_Write_Char('_');
  1843  0003B8  0E5F               	movlw	95
  1844  0003BA  ECAD  F00D         	call	_Lcd_Write_Char
  1845                           
  1846                           ;main.c: 120: latch_keypad(&x);
  1847  0003BE  0E64               	movlw	low main@x
  1848  0003C0  6E10               	movwf	latch_keypad@x,c
  1849  0003C2  0E01               	movlw	high main@x
  1850  0003C4  6E11               	movwf	latch_keypad@x+1,c
  1851  0003C6  EC91  F00D         	call	_latch_keypad	;wreg free
  1852  0003CA                     l4568:
  1853  0003CA  0E09               	movlw	9
  1854  0003CC  0101               	movlb	1	; () banked
  1855  0003CE  6563               	cpfsgt	main@n& (0+255),b
  1856  0003D0  D72C               	goto	l4518
  1857  0003D2                     l4570:
  1858                           
  1859                           ; BSR set to: 1
  1860                           ;main.c: 121: }
  1861                           ;main.c: 122: }
  1862                           ;main.c: 123: }
  1863                           ;main.c: 124: for (int i = 0; i < n; i++)
  1864  0003D2  0E00               	movlw	0
  1865  0003D4  0101               	movlb	1	; () banked
  1866  0003D6  6F5D               	movwf	(main@i_775+1)& (0+255),b
  1867  0003D8  0E00               	movlw	0
  1868  0003DA  6F5C               	movwf	main@i_775& (0+255),b
  1869  0003DC  D075               	goto	l4578
  1870  0003DE                     l4572:
  1871                           
  1872                           ;main.c: 125: {
  1873                           ;main.c: 126: current_user[8 - i] = buffer[(n-1) - i];
  1874  0003DE  0EFF               	movlw	255
  1875  0003E0  0100               	movlb	0	; () banked
  1876  0003E2  6FB8               	movwf	??_main& (0+255),b
  1877  0003E4  0EFF               	movlw	255
  1878  0003E6  0100               	movlb	0	; () banked
  1879  0003E8  6FB9               	movwf	(??_main+1)& (0+255),b
  1880  0003EA  C15C  F0BA         	movff	main@i_775,??_main+2
  1881  0003EE  C15D  F0BB         	movff	main@i_775+1,??_main+3
  1882  0003F2  0100               	movlb	0	; () banked
  1883  0003F4  1FBA               	comf	(??_main+2)& (0+255),f,b
  1884  0003F6  1FBB               	comf	(??_main+3)& (0+255),f,b
  1885  0003F8  4BBA               	infsnz	(??_main+2)& (0+255),f,b
  1886  0003FA  2BBB               	incf	(??_main+3)& (0+255),f,b
  1887  0003FC  0101               	movlb	1	; () banked
  1888  0003FE  5163               	movf	main@n& (0+255),w,b
  1889  000400  0100               	movlb	0	; () banked
  1890  000402  6FBC               	movwf	(??_main+4)& (0+255),b
  1891  000404  6BBD               	clrf	(??_main+5)& (0+255),b
  1892  000406  0100               	movlb	0	; () banked
  1893  000408  51BA               	movf	(??_main+2)& (0+255),w,b
  1894  00040A  0100               	movlb	0	; () banked
  1895  00040C  27BC               	addwf	(??_main+4)& (0+255),f,b
  1896  00040E  0100               	movlb	0	; () banked
  1897  000410  51BB               	movf	(??_main+3)& (0+255),w,b
  1898  000412  0100               	movlb	0	; () banked
  1899  000414  23BD               	addwfc	(??_main+5)& (0+255),f,b
  1900  000416  0100               	movlb	0	; () banked
  1901  000418  51B8               	movf	??_main& (0+255),w,b
  1902  00041A  0100               	movlb	0	; () banked
  1903  00041C  27BC               	addwf	(??_main+4)& (0+255),f,b
  1904  00041E  0100               	movlb	0	; () banked
  1905  000420  51B9               	movf	(??_main+1)& (0+255),w,b
  1906  000422  0100               	movlb	0	; () banked
  1907  000424  23BD               	addwfc	(??_main+5)& (0+255),f,b
  1908  000426  0E44               	movlw	low main@buffer
  1909  000428  0100               	movlb	0	; () banked
  1910  00042A  25BC               	addwf	(??_main+4)& (0+255),w,b
  1911  00042C  6ED9               	movwf	fsr2l,c
  1912  00042E  0E01               	movlw	high main@buffer
  1913  000430  0100               	movlb	0	; () banked
  1914  000432  21BD               	addwfc	(??_main+5)& (0+255),w,b
  1915  000434  6EDA               	movwf	fsr2h,c
  1916  000436  C15C  F0BE         	movff	main@i_775,??_main+6
  1917  00043A  C15D  F0BF         	movff	main@i_775+1,??_main+7
  1918  00043E  0100               	movlb	0	; () banked
  1919  000440  1FBE               	comf	(??_main+6)& (0+255),f,b
  1920  000442  1FBF               	comf	(??_main+7)& (0+255),f,b
  1921  000444  4BBE               	infsnz	(??_main+6)& (0+255),f,b
  1922  000446  2BBF               	incf	(??_main+7)& (0+255),f,b
  1923  000448  0E08               	movlw	8
  1924  00044A  0100               	movlb	0	; () banked
  1925  00044C  27BE               	addwf	(??_main+6)& (0+255),f,b
  1926  00044E  0E00               	movlw	0
  1927  000450  23BF               	addwfc	(??_main+7)& (0+255),f,b
  1928  000452  0EC9               	movlw	low _current_user
  1929  000454  0100               	movlb	0	; () banked
  1930  000456  25BE               	addwf	(??_main+6)& (0+255),w,b
  1931  000458  6EE1               	movwf	fsr1l,c
  1932  00045A  0E00               	movlw	high _current_user
  1933  00045C  0100               	movlb	0	; () banked
  1934  00045E  21BF               	addwfc	(??_main+7)& (0+255),w,b
  1935  000460  6EE2               	movwf	fsr1h,c
  1936  000462  CFDF FFE7          	movff	indf2,indf1
  1937                           
  1938                           ; BSR set to: 0
  1939                           ;main.c: 127: buffer[(n-1) - i] = '0';
  1940  000466  0EFF               	movlw	255
  1941  000468  0100               	movlb	0	; () banked
  1942  00046A  6FB8               	movwf	??_main& (0+255),b
  1943  00046C  0EFF               	movlw	255
  1944  00046E  0100               	movlb	0	; () banked
  1945  000470  6FB9               	movwf	(??_main+1)& (0+255),b
  1946  000472  C15C  F0BA         	movff	main@i_775,??_main+2
  1947  000476  C15D  F0BB         	movff	main@i_775+1,??_main+3
  1948  00047A  0100               	movlb	0	; () banked
  1949  00047C  1FBA               	comf	(??_main+2)& (0+255),f,b
  1950  00047E  1FBB               	comf	(??_main+3)& (0+255),f,b
  1951  000480  4BBA               	infsnz	(??_main+2)& (0+255),f,b
  1952  000482  2BBB               	incf	(??_main+3)& (0+255),f,b
  1953  000484  0101               	movlb	1	; () banked
  1954  000486  5163               	movf	main@n& (0+255),w,b
  1955  000488  0100               	movlb	0	; () banked
  1956  00048A  6FBC               	movwf	(??_main+4)& (0+255),b
  1957  00048C  6BBD               	clrf	(??_main+5)& (0+255),b
  1958  00048E  0100               	movlb	0	; () banked
  1959  000490  51BA               	movf	(??_main+2)& (0+255),w,b
  1960  000492  0100               	movlb	0	; () banked
  1961  000494  27BC               	addwf	(??_main+4)& (0+255),f,b
  1962  000496  0100               	movlb	0	; () banked
  1963  000498  51BB               	movf	(??_main+3)& (0+255),w,b
  1964  00049A  0100               	movlb	0	; () banked
  1965  00049C  23BD               	addwfc	(??_main+5)& (0+255),f,b
  1966  00049E  0100               	movlb	0	; () banked
  1967  0004A0  51B8               	movf	??_main& (0+255),w,b
  1968  0004A2  0100               	movlb	0	; () banked
  1969  0004A4  27BC               	addwf	(??_main+4)& (0+255),f,b
  1970  0004A6  0100               	movlb	0	; () banked
  1971  0004A8  51B9               	movf	(??_main+1)& (0+255),w,b
  1972  0004AA  0100               	movlb	0	; () banked
  1973  0004AC  23BD               	addwfc	(??_main+5)& (0+255),f,b
  1974  0004AE  0E44               	movlw	low main@buffer
  1975  0004B0  0100               	movlb	0	; () banked
  1976  0004B2  25BC               	addwf	(??_main+4)& (0+255),w,b
  1977  0004B4  6ED9               	movwf	fsr2l,c
  1978  0004B6  0E01               	movlw	high main@buffer
  1979  0004B8  0100               	movlb	0	; () banked
  1980  0004BA  21BD               	addwfc	(??_main+5)& (0+255),w,b
  1981  0004BC  6EDA               	movwf	fsr2h,c
  1982  0004BE  0E30               	movlw	48
  1983  0004C0  6EDF               	movwf	indf2,c
  1984                           
  1985                           ; BSR set to: 0
  1986  0004C2  0101               	movlb	1	; () banked
  1987  0004C4  4B5C               	infsnz	main@i_775& (0+255),f,b
  1988  0004C6  2B5D               	incf	(main@i_775+1)& (0+255),f,b
  1989  0004C8                     l4578:
  1990                           
  1991                           ; BSR set to: 1
  1992  0004C8  0101               	movlb	1	; () banked
  1993  0004CA  5163               	movf	main@n& (0+255),w,b
  1994  0004CC  0100               	movlb	0	; () banked
  1995  0004CE  6FB8               	movwf	??_main& (0+255),b
  1996  0004D0  6BB9               	clrf	(??_main+1)& (0+255),b
  1997  0004D2  0100               	movlb	0	; () banked
  1998  0004D4  51B8               	movf	??_main& (0+255),w,b
  1999  0004D6  0101               	movlb	1	; () banked
  2000  0004D8  5D5C               	subwf	main@i_775& (0+255),w,b
  2001  0004DA  0101               	movlb	1	; () banked
  2002  0004DC  515D               	movf	(main@i_775+1)& (0+255),w,b
  2003  0004DE  0A80               	xorlw	128
  2004  0004E0  0100               	movlb	0	; () banked
  2005  0004E2  6FBA               	movwf	(??_main+2)& (0+255),b
  2006  0004E4  0100               	movlb	0	; () banked
  2007  0004E6  51B9               	movf	(??_main+1)& (0+255),w,b
  2008  0004E8  0A80               	xorlw	128
  2009  0004EA  0100               	movlb	0	; () banked
  2010  0004EC  59BA               	subwfb	(??_main+2)& (0+255),w,b
  2011  0004EE  A0D8               	btfss	status,0,c
  2012  0004F0  D776               	goto	l4572
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;main.c: 128: }
  2016                           ;main.c: 129: menu_progress_bar(25);
  2017                           
  2018                           ; BSR set to: 0
  2019  0004F2  0E00               	movlw	0
  2020  0004F4  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  2021  0004F6  0E19               	movlw	25
  2022  0004F8  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  2023  0004FA  EC48  F00A         	call	_menu_progress_bar	;wreg free
  2024                           
  2025                           ;main.c: 131: p = 0;
  2026  0004FE  0E00               	movlw	0
  2027  000500  0101               	movlb	1	; () banked
  2028  000502  6F62               	movwf	main@p& (0+255),b
  2029                           
  2030                           ; BSR set to: 1
  2031                           ;main.c: 132: Lcd_Set_Cursor(1,1);
  2032  000504  0E01               	movlw	1
  2033  000506  6E12               	movwf	Lcd_Set_Cursor@b,c
  2034  000508  0E01               	movlw	1
  2035  00050A  EC4C  F00D         	call	_Lcd_Set_Cursor
  2036                           
  2037                           ;main.c: 133: Lcd_Write_String("Enter your PIN: ");
  2038  00050E  0E42               	movlw	low STR_5
  2039  000510  6E14               	movwf	Lcd_Write_String@a,c
  2040  000512  0E7F               	movlw	high STR_5
  2041  000514  6E15               	movwf	Lcd_Write_String@a+1,c
  2042  000516  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  2043                           
  2044                           ;main.c: 134: Lcd_Set_Cursor(2,1);
  2045  00051A  0E01               	movlw	1
  2046  00051C  6E12               	movwf	Lcd_Set_Cursor@b,c
  2047  00051E  0E02               	movlw	2
  2048  000520  EC4C  F00D         	call	_Lcd_Set_Cursor
  2049                           
  2050                           ;main.c: 135: Lcd_Write_String("[ ]             ");
  2051  000524  0EBA               	movlw	low STR_4
  2052  000526  6E14               	movwf	Lcd_Write_String@a,c
  2053  000528  0E7E               	movlw	high STR_4
  2054  00052A  6E15               	movwf	Lcd_Write_String@a+1,c
  2055  00052C  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  2056                           
  2057                           ;main.c: 136: Lcd_Set_Cursor(2,1);
  2058  000530  0E01               	movlw	1
  2059  000532  6E12               	movwf	Lcd_Set_Cursor@b,c
  2060  000534  0E02               	movlw	2
  2061  000536  EC4C  F00D         	call	_Lcd_Set_Cursor
  2062                           
  2063                           ;main.c: 137: while (p < 10)
  2064  00053A  D0D8               	goto	l4646
  2065  00053C                     l4594:
  2066                           
  2067                           ;main.c: 138: {
  2068                           ;main.c: 139: if (p == 9)
  2069  00053C  0E09               	movlw	9
  2070  00053E  0101               	movlb	1	; () banked
  2071  000540  1962               	xorwf	main@p& (0+255),w,b
  2072  000542  B4D8               	btfsc	status,2,c
  2073  000544  D0D7               	goto	l4648
  2074                           
  2075                           ; BSR set to: 1
  2076                           ;main.c: 141: char c[] = {'0','1','2','3','4','5','6','7','8','9'};
  2077                           
  2078                           ; BSR set to: 1
  2079                           
  2080                           ; BSR set to: 1
  2081                           ;main.c: 140: break;
  2082  000546  EE20  F035         	lfsr	2,main@F3681
  2083  00054A  EE11  F03A         	lfsr	1,main@c
  2084  00054E  0E09               	movlw	9
  2085  000550                     u4451:
  2086  000550  CFDB FFE3          	movff	plusw2,plusw1
  2087  000554  06E8               	decf	wreg,f,c
  2088  000556  E2FC               	bc	u4451
  2089                           
  2090                           ; BSR set to: 1
  2091                           ;main.c: 142: Lcd_Set_Cursor(2,2);
  2092  000558  0E02               	movlw	2
  2093  00055A  6E12               	movwf	Lcd_Set_Cursor@b,c
  2094  00055C  0E02               	movlw	2
  2095  00055E  EC4C  F00D         	call	_Lcd_Set_Cursor
  2096                           
  2097                           ;main.c: 143: Lcd_Write_Char(c[9-p]);
  2098  000562  0101               	movlb	1	; () banked
  2099  000564  5162               	movf	main@p& (0+255),w,b
  2100  000566  0100               	movlb	0	; () banked
  2101  000568  6FB8               	movwf	??_main& (0+255),b
  2102  00056A  6BB9               	clrf	(??_main+1)& (0+255),b
  2103  00056C  0100               	movlb	0	; () banked
  2104  00056E  1FB8               	comf	??_main& (0+255),f,b
  2105  000570  1FB9               	comf	(??_main+1)& (0+255),f,b
  2106  000572  4BB8               	infsnz	??_main& (0+255),f,b
  2107  000574  2BB9               	incf	(??_main+1)& (0+255),f,b
  2108  000576  0E09               	movlw	9
  2109  000578  0100               	movlb	0	; () banked
  2110  00057A  27B8               	addwf	??_main& (0+255),f,b
  2111  00057C  0E00               	movlw	0
  2112  00057E  23B9               	addwfc	(??_main+1)& (0+255),f,b
  2113  000580  0E3A               	movlw	low main@c
  2114  000582  0100               	movlb	0	; () banked
  2115  000584  25B8               	addwf	??_main& (0+255),w,b
  2116  000586  6ED9               	movwf	fsr2l,c
  2117  000588  0E01               	movlw	high main@c
  2118  00058A  0100               	movlb	0	; () banked
  2119  00058C  21B9               	addwfc	(??_main+1)& (0+255),w,b
  2120  00058E  6EDA               	movwf	fsr2h,c
  2121  000590  50DF               	movf	indf2,w,c
  2122  000592  ECAD  F00D         	call	_Lcd_Write_Char
  2123                           
  2124                           ;main.c: 144: x = read_keypad();
  2125  000596  EC74  F00B         	call	_read_keypad	;wreg free
  2126  00059A  0101               	movlb	1	; () banked
  2127  00059C  6F64               	movwf	main@x& (0+255),b
  2128                           
  2129                           ; BSR set to: 1
  2130                           ;main.c: 145: if (x != '_')
  2131  00059E  0E5F               	movlw	95
  2132  0005A0  0101               	movlb	1	; () banked
  2133  0005A2  1964               	xorwf	main@x& (0+255),w,b
  2134  0005A4  B4D8               	btfsc	status,2,c
  2135  0005A6  D0A2               	goto	l4646
  2136                           
  2137                           ; BSR set to: 1
  2138                           ;main.c: 146: {
  2139                           ;main.c: 147: if (((x - '#') == 0)&&(p > 0))
  2140  0005A8  0EDD               	movlw	221
  2141  0005AA  0100               	movlb	0	; () banked
  2142  0005AC  6FB8               	movwf	??_main& (0+255),b
  2143  0005AE  0EFF               	movlw	255
  2144  0005B0  0100               	movlb	0	; () banked
  2145  0005B2  6FB9               	movwf	(??_main+1)& (0+255),b
  2146  0005B4  0101               	movlb	1	; () banked
  2147  0005B6  5164               	movf	main@x& (0+255),w,b
  2148  0005B8  0100               	movlb	0	; () banked
  2149  0005BA  6FBA               	movwf	(??_main+2)& (0+255),b
  2150  0005BC  6BBB               	clrf	(??_main+3)& (0+255),b
  2151  0005BE  0100               	movlb	0	; () banked
  2152  0005C0  51B8               	movf	??_main& (0+255),w,b
  2153  0005C2  0100               	movlb	0	; () banked
  2154  0005C4  27BA               	addwf	(??_main+2)& (0+255),f,b
  2155  0005C6  0100               	movlb	0	; () banked
  2156  0005C8  51B9               	movf	(??_main+1)& (0+255),w,b
  2157  0005CA  0100               	movlb	0	; () banked
  2158  0005CC  23BB               	addwfc	(??_main+3)& (0+255),f,b
  2159  0005CE  0100               	movlb	0	; () banked
  2160  0005D0  51BA               	movf	(??_main+2)& (0+255),w,b
  2161  0005D2  0100               	movlb	0	; () banked
  2162  0005D4  11BB               	iorwf	(??_main+3)& (0+255),w,b
  2163  0005D6  A4D8               	btfss	status,2,c
  2164  0005D8  D034               	goto	l4628
  2165                           
  2166                           ; BSR set to: 0
  2167  0005DA  0101               	movlb	1	; () banked
  2168  0005DC  5162               	movf	main@p& (0+255),w,b
  2169  0005DE  0101               	movlb	1	; () banked
  2170  0005E0  B4D8               	btfsc	status,2,c
  2171  0005E2  D02F               	goto	l4628
  2172                           
  2173                           ; BSR set to: 1
  2174                           ;main.c: 148: {
  2175                           ;main.c: 149: buffer[p] = '?';
  2176  0005E4  0101               	movlb	1	; () banked
  2177  0005E6  5162               	movf	main@p& (0+255),w,b
  2178  0005E8  0D01               	mullw	1
  2179  0005EA  0E44               	movlw	low main@buffer
  2180  0005EC  24F3               	addwf	prodl,w,c
  2181  0005EE  6ED9               	movwf	fsr2l,c
  2182  0005F0  0E01               	movlw	high main@buffer
  2183  0005F2  20F4               	addwfc	prodh,w,c
  2184  0005F4  6EDA               	movwf	fsr2h,c
  2185  0005F6  0E3F               	movlw	63
  2186  0005F8  6EDF               	movwf	indf2,c
  2187                           
  2188                           ; BSR set to: 1
  2189                           ;main.c: 150: Lcd_Set_Cursor(2, 7 + p);
  2190  0005FA  0101               	movlb	1	; () banked
  2191  0005FC  5162               	movf	main@p& (0+255),w,b
  2192  0005FE  0F07               	addlw	7
  2193  000600  6E12               	movwf	Lcd_Set_Cursor@b,c
  2194  000602  0E02               	movlw	2
  2195  000604  EC4C  F00D         	call	_Lcd_Set_Cursor
  2196                           
  2197                           ;main.c: 151: Lcd_Write_Char('_');
  2198  000608  0E5F               	movlw	95
  2199  00060A  ECAD  F00D         	call	_Lcd_Write_Char
  2200                           
  2201                           ;main.c: 152: latch_keypad(&x);
  2202  00060E  0E64               	movlw	low main@x
  2203  000610  6E10               	movwf	latch_keypad@x,c
  2204  000612  0E01               	movlw	high main@x
  2205  000614  6E11               	movwf	latch_keypad@x+1,c
  2206  000616  EC91  F00D         	call	_latch_keypad	;wreg free
  2207                           
  2208                           ;main.c: 153: Lcd_Set_Cursor(2, 8 + p);
  2209  00061A  0101               	movlb	1	; () banked
  2210  00061C  5162               	movf	main@p& (0+255),w,b
  2211  00061E  0F08               	addlw	8
  2212  000620  6E12               	movwf	Lcd_Set_Cursor@b,c
  2213  000622  0E02               	movlw	2
  2214  000624  EC4C  F00D         	call	_Lcd_Set_Cursor
  2215                           
  2216                           ;main.c: 154: Lcd_Write_Char(' ');
  2217  000628  0E20               	movlw	32
  2218  00062A  ECAD  F00D         	call	_Lcd_Write_Char
  2219                           
  2220                           ;main.c: 155: Lcd_Set_Cursor(2, 7 + p);
  2221  00062E  0101               	movlb	1	; () banked
  2222  000630  5162               	movf	main@p& (0+255),w,b
  2223  000632  0F07               	addlw	7
  2224  000634  6E12               	movwf	Lcd_Set_Cursor@b,c
  2225  000636  0E02               	movlw	2
  2226  000638  EC4C  F00D         	call	_Lcd_Set_Cursor
  2227                           
  2228                           ;main.c: 156: p--;
  2229  00063C  0101               	movlb	1	; () banked
  2230  00063E  0762               	decf	main@p& (0+255),f,b
  2231                           
  2232                           ;main.c: 157: }
  2233  000640  D055               	goto	l4646
  2234  000642                     l4628:
  2235                           
  2236                           ;main.c: 158: else if ((x - '#') != 0)
  2237  000642  0EDD               	movlw	221
  2238  000644  0100               	movlb	0	; () banked
  2239  000646  6FB8               	movwf	??_main& (0+255),b
  2240  000648  0EFF               	movlw	255
  2241  00064A  0100               	movlb	0	; () banked
  2242  00064C  6FB9               	movwf	(??_main+1)& (0+255),b
  2243  00064E  0101               	movlb	1	; () banked
  2244  000650  5164               	movf	main@x& (0+255),w,b
  2245  000652  0100               	movlb	0	; () banked
  2246  000654  6FBA               	movwf	(??_main+2)& (0+255),b
  2247  000656  6BBB               	clrf	(??_main+3)& (0+255),b
  2248  000658  0100               	movlb	0	; () banked
  2249  00065A  51B8               	movf	??_main& (0+255),w,b
  2250  00065C  0100               	movlb	0	; () banked
  2251  00065E  27BA               	addwf	(??_main+2)& (0+255),f,b
  2252  000660  0100               	movlb	0	; () banked
  2253  000662  51B9               	movf	(??_main+1)& (0+255),w,b
  2254  000664  0100               	movlb	0	; () banked
  2255  000666  23BB               	addwfc	(??_main+3)& (0+255),f,b
  2256  000668  0100               	movlb	0	; () banked
  2257  00066A  51BA               	movf	(??_main+2)& (0+255),w,b
  2258  00066C  0100               	movlb	0	; () banked
  2259  00066E  11BB               	iorwf	(??_main+3)& (0+255),w,b
  2260  000670  B4D8               	btfsc	status,2,c
  2261  000672  D03C               	goto	l4646
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;main.c: 159: {
  2265                           ;main.c: 160: if ((x == '*')|(p == 9))
  2266  000674  0E2A               	movlw	42
  2267  000676  0101               	movlb	1	; () banked
  2268  000678  1964               	xorwf	main@x& (0+255),w,b
  2269  00067A  B4D8               	btfsc	status,2,c
  2270  00067C  D03B               	goto	l4648
  2271                           
  2272                           ; BSR set to: 1
  2273  00067E  0E09               	movlw	9
  2274  000680  0101               	movlb	1	; () banked
  2275  000682  1962               	xorwf	main@p& (0+255),w,b
  2276  000684  B4D8               	btfsc	status,2,c
  2277  000686  D036               	goto	l4648
  2278                           
  2279                           ; BSR set to: 1
  2280                           ;main.c: 163: }
  2281                           ;main.c: 164: p++;
  2282                           
  2283                           ; BSR set to: 1
  2284                           
  2285                           ; BSR set to: 1
  2286                           ;main.c: 161: {
  2287                           ;main.c: 162: break;
  2288  000688  0101               	movlb	1	; () banked
  2289  00068A  2B62               	incf	main@p& (0+255),f,b
  2290                           
  2291                           ; BSR set to: 1
  2292                           ;main.c: 165: buffer[p-1] = x;
  2293  00068C  0EFF               	movlw	255
  2294  00068E  0100               	movlb	0	; () banked
  2295  000690  6FB8               	movwf	??_main& (0+255),b
  2296  000692  0EFF               	movlw	255
  2297  000694  0100               	movlb	0	; () banked
  2298  000696  6FB9               	movwf	(??_main+1)& (0+255),b
  2299  000698  0101               	movlb	1	; () banked
  2300  00069A  5162               	movf	main@p& (0+255),w,b
  2301  00069C  0100               	movlb	0	; () banked
  2302  00069E  6FBA               	movwf	(??_main+2)& (0+255),b
  2303  0006A0  6BBB               	clrf	(??_main+3)& (0+255),b
  2304  0006A2  0100               	movlb	0	; () banked
  2305  0006A4  51B8               	movf	??_main& (0+255),w,b
  2306  0006A6  0100               	movlb	0	; () banked
  2307  0006A8  27BA               	addwf	(??_main+2)& (0+255),f,b
  2308  0006AA  0100               	movlb	0	; () banked
  2309  0006AC  51B9               	movf	(??_main+1)& (0+255),w,b
  2310  0006AE  0100               	movlb	0	; () banked
  2311  0006B0  23BB               	addwfc	(??_main+3)& (0+255),f,b
  2312  0006B2  0E44               	movlw	low main@buffer
  2313  0006B4  0100               	movlb	0	; () banked
  2314  0006B6  25BA               	addwf	(??_main+2)& (0+255),w,b
  2315  0006B8  6ED9               	movwf	fsr2l,c
  2316  0006BA  0E01               	movlw	high main@buffer
  2317  0006BC  0100               	movlb	0	; () banked
  2318  0006BE  21BB               	addwfc	(??_main+3)& (0+255),w,b
  2319  0006C0  6EDA               	movwf	fsr2h,c
  2320  0006C2  C164  FFDF         	movff	main@x,indf2
  2321                           
  2322                           ; BSR set to: 0
  2323                           ;main.c: 166: Lcd_Set_Cursor(2, 7 + p);
  2324  0006C6  0101               	movlb	1	; () banked
  2325  0006C8  5162               	movf	main@p& (0+255),w,b
  2326  0006CA  0F07               	addlw	7
  2327  0006CC  6E12               	movwf	Lcd_Set_Cursor@b,c
  2328  0006CE  0E02               	movlw	2
  2329  0006D0  EC4C  F00D         	call	_Lcd_Set_Cursor
  2330                           
  2331                           ;main.c: 167: Lcd_Write_Char('*');
  2332  0006D4  0E2A               	movlw	42
  2333  0006D6  ECAD  F00D         	call	_Lcd_Write_Char
  2334                           
  2335                           ;main.c: 168: Lcd_Write_Char('_');
  2336  0006DA  0E5F               	movlw	95
  2337  0006DC  ECAD  F00D         	call	_Lcd_Write_Char
  2338                           
  2339                           ;main.c: 169: latch_keypad(&x);
  2340  0006E0  0E64               	movlw	low main@x
  2341  0006E2  6E10               	movwf	latch_keypad@x,c
  2342  0006E4  0E01               	movlw	high main@x
  2343  0006E6  6E11               	movwf	latch_keypad@x+1,c
  2344  0006E8  EC91  F00D         	call	_latch_keypad	;wreg free
  2345  0006EC                     l4646:
  2346  0006EC  0E09               	movlw	9
  2347  0006EE  0101               	movlb	1	; () banked
  2348  0006F0  6562               	cpfsgt	main@p& (0+255),b
  2349  0006F2  D724               	goto	l4594
  2350  0006F4                     l4648:
  2351                           
  2352                           ; BSR set to: 1
  2353                           ;main.c: 170: }
  2354                           ;main.c: 171: }
  2355                           ;main.c: 172: }
  2356                           ;main.c: 173: for (int i = 0; i < p; i++)
  2357  0006F4  0E00               	movlw	0
  2358  0006F6  0101               	movlb	1	; () banked
  2359  0006F8  6F55               	movwf	(main@i_781+1)& (0+255),b
  2360  0006FA  0E00               	movlw	0
  2361  0006FC  6F54               	movwf	main@i_781& (0+255),b
  2362  0006FE  D047               	goto	l4654
  2363  000700                     l4650:
  2364                           
  2365                           ;main.c: 174: current_pin[8 - i] = buffer[(p-1) - i];
  2366  000700  0EFF               	movlw	255
  2367  000702  0100               	movlb	0	; () banked
  2368  000704  6FB8               	movwf	??_main& (0+255),b
  2369  000706  0EFF               	movlw	255
  2370  000708  0100               	movlb	0	; () banked
  2371  00070A  6FB9               	movwf	(??_main+1)& (0+255),b
  2372  00070C  C154  F0BA         	movff	main@i_781,??_main+2
  2373  000710  C155  F0BB         	movff	main@i_781+1,??_main+3
  2374  000714  0100               	movlb	0	; () banked
  2375  000716  1FBA               	comf	(??_main+2)& (0+255),f,b
  2376  000718  1FBB               	comf	(??_main+3)& (0+255),f,b
  2377  00071A  4BBA               	infsnz	(??_main+2)& (0+255),f,b
  2378  00071C  2BBB               	incf	(??_main+3)& (0+255),f,b
  2379  00071E  0101               	movlb	1	; () banked
  2380  000720  5162               	movf	main@p& (0+255),w,b
  2381  000722  0100               	movlb	0	; () banked
  2382  000724  6FBC               	movwf	(??_main+4)& (0+255),b
  2383  000726  6BBD               	clrf	(??_main+5)& (0+255),b
  2384  000728  0100               	movlb	0	; () banked
  2385  00072A  51BA               	movf	(??_main+2)& (0+255),w,b
  2386  00072C  0100               	movlb	0	; () banked
  2387  00072E  27BC               	addwf	(??_main+4)& (0+255),f,b
  2388  000730  0100               	movlb	0	; () banked
  2389  000732  51BB               	movf	(??_main+3)& (0+255),w,b
  2390  000734  0100               	movlb	0	; () banked
  2391  000736  23BD               	addwfc	(??_main+5)& (0+255),f,b
  2392  000738  0100               	movlb	0	; () banked
  2393  00073A  51B8               	movf	??_main& (0+255),w,b
  2394  00073C  0100               	movlb	0	; () banked
  2395  00073E  27BC               	addwf	(??_main+4)& (0+255),f,b
  2396  000740  0100               	movlb	0	; () banked
  2397  000742  51B9               	movf	(??_main+1)& (0+255),w,b
  2398  000744  0100               	movlb	0	; () banked
  2399  000746  23BD               	addwfc	(??_main+5)& (0+255),f,b
  2400  000748  0E44               	movlw	low main@buffer
  2401  00074A  0100               	movlb	0	; () banked
  2402  00074C  25BC               	addwf	(??_main+4)& (0+255),w,b
  2403  00074E  6ED9               	movwf	fsr2l,c
  2404  000750  0E01               	movlw	high main@buffer
  2405  000752  0100               	movlb	0	; () banked
  2406  000754  21BD               	addwfc	(??_main+5)& (0+255),w,b
  2407  000756  6EDA               	movwf	fsr2h,c
  2408  000758  C154  F0BE         	movff	main@i_781,??_main+6
  2409  00075C  C155  F0BF         	movff	main@i_781+1,??_main+7
  2410  000760  0100               	movlb	0	; () banked
  2411  000762  1FBE               	comf	(??_main+6)& (0+255),f,b
  2412  000764  1FBF               	comf	(??_main+7)& (0+255),f,b
  2413  000766  4BBE               	infsnz	(??_main+6)& (0+255),f,b
  2414  000768  2BBF               	incf	(??_main+7)& (0+255),f,b
  2415  00076A  0E08               	movlw	8
  2416  00076C  0100               	movlb	0	; () banked
  2417  00076E  27BE               	addwf	(??_main+6)& (0+255),f,b
  2418  000770  0E00               	movlw	0
  2419  000772  23BF               	addwfc	(??_main+7)& (0+255),f,b
  2420  000774  0EC0               	movlw	low _current_pin
  2421  000776  0100               	movlb	0	; () banked
  2422  000778  25BE               	addwf	(??_main+6)& (0+255),w,b
  2423  00077A  6EE1               	movwf	fsr1l,c
  2424  00077C  0E00               	movlw	high _current_pin
  2425  00077E  0100               	movlb	0	; () banked
  2426  000780  21BF               	addwfc	(??_main+7)& (0+255),w,b
  2427  000782  6EE2               	movwf	fsr1h,c
  2428  000784  CFDF FFE7          	movff	indf2,indf1
  2429                           
  2430                           ; BSR set to: 0
  2431  000788  0101               	movlb	1	; () banked
  2432  00078A  4B54               	infsnz	main@i_781& (0+255),f,b
  2433  00078C  2B55               	incf	(main@i_781+1)& (0+255),f,b
  2434  00078E                     l4654:
  2435                           
  2436                           ; BSR set to: 1
  2437  00078E  0101               	movlb	1	; () banked
  2438  000790  5162               	movf	main@p& (0+255),w,b
  2439  000792  0100               	movlb	0	; () banked
  2440  000794  6FB8               	movwf	??_main& (0+255),b
  2441  000796  6BB9               	clrf	(??_main+1)& (0+255),b
  2442  000798  0100               	movlb	0	; () banked
  2443  00079A  51B8               	movf	??_main& (0+255),w,b
  2444  00079C  0101               	movlb	1	; () banked
  2445  00079E  5D54               	subwf	main@i_781& (0+255),w,b
  2446  0007A0  0101               	movlb	1	; () banked
  2447  0007A2  5155               	movf	(main@i_781+1)& (0+255),w,b
  2448  0007A4  0A80               	xorlw	128
  2449  0007A6  0100               	movlb	0	; () banked
  2450  0007A8  6FBA               	movwf	(??_main+2)& (0+255),b
  2451  0007AA  0100               	movlb	0	; () banked
  2452  0007AC  51B9               	movf	(??_main+1)& (0+255),w,b
  2453  0007AE  0A80               	xorlw	128
  2454  0007B0  0100               	movlb	0	; () banked
  2455  0007B2  59BA               	subwfb	(??_main+2)& (0+255),w,b
  2456  0007B4  A0D8               	btfss	status,0,c
  2457  0007B6  D7A4               	goto	l4650
  2458                           
  2459                           ; BSR set to: 0
  2460                           ;main.c: 175: menu_progress_bar(25);
  2461                           
  2462                           ; BSR set to: 0
  2463  0007B8  0E00               	movlw	0
  2464  0007BA  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  2465  0007BC  0E19               	movlw	25
  2466  0007BE  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  2467  0007C0  EC48  F00A         	call	_menu_progress_bar	;wreg free
  2468                           
  2469                           ;main.c: 179: load_i2c_registers();
  2470  0007C4  ECFE  F00A         	call	_load_i2c_registers	;wreg free
  2471                           
  2472                           ;main.c: 180: unsigned char credential_state = 0;
  2473  0007C8  0E00               	movlw	0
  2474  0007CA  0101               	movlb	1	; () banked
  2475  0007CC  6F53               	movwf	main@credential_state& (0+255),b
  2476                           
  2477                           ; BSR set to: 1
  2478                           ;main.c: 181: for (int i = 0; i < 32; i++)
  2479  0007CE  0E00               	movlw	0
  2480  0007D0  0101               	movlb	1	; () banked
  2481  0007D2  6F57               	movwf	(main@i_783+1)& (0+255),b
  2482  0007D4  0E00               	movlw	0
  2483  0007D6  6F56               	movwf	main@i_783& (0+255),b
  2484  0007D8                     l4664:
  2485                           
  2486                           ; BSR set to: 1
  2487  0007D8  0101               	movlb	1	; () banked
  2488  0007DA  BF57               	btfsc	(main@i_783+1)& (0+255),7,b
  2489  0007DC  D008               	goto	l4668
  2490  0007DE  0101               	movlb	1	; () banked
  2491  0007E0  5157               	movf	(main@i_783+1)& (0+255),w,b
  2492  0007E2  E145               	bnz	l4686
  2493  0007E4  0E20               	movlw	32
  2494  0007E6  0101               	movlb	1	; () banked
  2495  0007E8  5D56               	subwf	main@i_783& (0+255),w,b
  2496  0007EA  B0D8               	btfsc	status,0,c
  2497  0007EC  D040               	goto	l4686
  2498  0007EE                     l4668:
  2499                           
  2500                           ; BSR set to: 1
  2501                           ;main.c: 182: i2c_w_reg[i] = '-';
  2502  0007EE  0E00               	movlw	low _i2c_w_reg
  2503  0007F0  0101               	movlb	1	; () banked
  2504  0007F2  2556               	addwf	main@i_783& (0+255),w,b
  2505  0007F4  6ED9               	movwf	fsr2l,c
  2506  0007F6  0E01               	movlw	high _i2c_w_reg
  2507  0007F8  0101               	movlb	1	; () banked
  2508  0007FA  2157               	addwfc	(main@i_783+1)& (0+255),w,b
  2509  0007FC  6EDA               	movwf	fsr2h,c
  2510  0007FE  0E2D               	movlw	45
  2511  000800  6EDF               	movwf	indf2,c
  2512                           
  2513                           ; BSR set to: 1
  2514  000802  0101               	movlb	1	; () banked
  2515  000804  4B56               	infsnz	main@i_783& (0+255),f,b
  2516  000806  2B57               	incf	(main@i_783+1)& (0+255),f,b
  2517  000808  D7E7               	goto	l4664
  2518  00080A                     l229:
  2519                           
  2520                           ; BSR set to: 1
  2521                           ;main.c: 184: {
  2522                           ;main.c: 185: credential_state = i2c_w_reg[0];
  2523  00080A  C100  F153         	movff	_i2c_w_reg,main@credential_state	;volatile
  2524                           
  2525                           ; BSR set to: 1
  2526                           ;main.c: 186: for (int u = 0; u < 16; u++)
  2527  00080E  0E00               	movlw	0
  2528  000810  0101               	movlb	1	; () banked
  2529  000812  6F5F               	movwf	(main@u+1)& (0+255),b
  2530  000814  0E00               	movlw	0
  2531  000816  6F5E               	movwf	main@u& (0+255),b
  2532  000818                     l4676:
  2533                           
  2534                           ; BSR set to: 1
  2535  000818  0101               	movlb	1	; () banked
  2536  00081A  BF5F               	btfsc	(main@u+1)& (0+255),7,b
  2537  00081C  D008               	goto	l4680
  2538  00081E  0101               	movlb	1	; () banked
  2539  000820  515F               	movf	(main@u+1)& (0+255),w,b
  2540  000822  E125               	bnz	l4686
  2541  000824  0E10               	movlw	16
  2542  000826  0101               	movlb	1	; () banked
  2543  000828  5D5E               	subwf	main@u& (0+255),w,b
  2544  00082A  B0D8               	btfsc	status,0,c
  2545  00082C  D020               	goto	l4686
  2546  00082E                     l4680:
  2547                           
  2548                           ; BSR set to: 1
  2549                           ;main.c: 187: logged_user[u] = i2c_w_reg[u+1];
  2550  00082E  0E01               	movlw	1
  2551  000830  0101               	movlb	1	; () banked
  2552  000832  255E               	addwf	main@u& (0+255),w,b
  2553  000834  0100               	movlb	0	; () banked
  2554  000836  6FB8               	movwf	??_main& (0+255),b
  2555  000838  0E00               	movlw	0
  2556  00083A  0101               	movlb	1	; () banked
  2557  00083C  215F               	addwfc	(main@u+1)& (0+255),w,b
  2558  00083E  0100               	movlb	0	; () banked
  2559  000840  6FB9               	movwf	(??_main+1)& (0+255),b
  2560  000842  0E00               	movlw	low _i2c_w_reg
  2561  000844  0100               	movlb	0	; () banked
  2562  000846  25B8               	addwf	??_main& (0+255),w,b
  2563  000848  6ED9               	movwf	fsr2l,c
  2564  00084A  0E01               	movlw	high _i2c_w_reg
  2565  00084C  0100               	movlb	0	; () banked
  2566  00084E  21B9               	addwfc	(??_main+1)& (0+255),w,b
  2567  000850  6EDA               	movwf	fsr2h,c
  2568  000852  0E65               	movlw	low _logged_user
  2569  000854  0101               	movlb	1	; () banked
  2570  000856  255E               	addwf	main@u& (0+255),w,b
  2571  000858  6EE1               	movwf	fsr1l,c
  2572  00085A  0E01               	movlw	high _logged_user
  2573  00085C  0101               	movlb	1	; () banked
  2574  00085E  215F               	addwfc	(main@u+1)& (0+255),w,b
  2575  000860  6EE2               	movwf	fsr1h,c
  2576  000862  CFDF FFE7          	movff	indf2,indf1
  2577                           
  2578                           ; BSR set to: 1
  2579  000866  0101               	movlb	1	; () banked
  2580  000868  4B5E               	infsnz	main@u& (0+255),f,b
  2581  00086A  2B5F               	incf	(main@u+1)& (0+255),f,b
  2582  00086C  D7D5               	goto	l4676
  2583  00086E                     l4686:
  2584                           
  2585                           ; BSR set to: 1
  2586  00086E  0E2D               	movlw	45
  2587  000870  0101               	movlb	1	; () banked
  2588  000872  1900               	xorwf	_i2c_w_reg& (0+255),w,b	;volatile
  2589  000874  B4D8               	btfsc	status,2,c
  2590  000876  D7C9               	goto	l229
  2591                           
  2592                           ; BSR set to: 1
  2593  000878  0E2D               	movlw	45
  2594  00087A  0101               	movlb	1	; () banked
  2595  00087C  191F               	xorwf	(_i2c_w_reg+31)& (0+255),w,b	;volatile
  2596  00087E  B4D8               	btfsc	status,2,c
  2597  000880  D7C4               	goto	l229
  2598                           
  2599                           ; BSR set to: 1
  2600                           ;main.c: 188: }
  2601                           ;main.c: 189: for (int i = 0; i < 32; i++)
  2602                           
  2603                           ; BSR set to: 1
  2604  000882  0E00               	movlw	0
  2605  000884  0101               	movlb	1	; () banked
  2606  000886  6F59               	movwf	(main@i_785+1)& (0+255),b
  2607  000888  0E00               	movlw	0
  2608  00088A  6F58               	movwf	main@i_785& (0+255),b
  2609  00088C                     l4692:
  2610                           
  2611                           ; BSR set to: 1
  2612  00088C  0101               	movlb	1	; () banked
  2613  00088E  BF59               	btfsc	(main@i_785+1)& (0+255),7,b
  2614  000890  D008               	goto	l4696
  2615  000892  0101               	movlb	1	; () banked
  2616  000894  5159               	movf	(main@i_785+1)& (0+255),w,b
  2617  000896  E113               	bnz	l4702
  2618  000898  0E20               	movlw	32
  2619  00089A  0101               	movlb	1	; () banked
  2620  00089C  5D58               	subwf	main@i_785& (0+255),w,b
  2621  00089E  B0D8               	btfsc	status,0,c
  2622  0008A0  D00E               	goto	l4702
  2623  0008A2                     l4696:
  2624                           
  2625                           ; BSR set to: 1
  2626                           ;main.c: 190: i2c_r_reg[i] = '-';
  2627  0008A2  0E60               	movlw	low _i2c_r_reg
  2628  0008A4  0101               	movlb	1	; () banked
  2629  0008A6  2558               	addwf	main@i_785& (0+255),w,b
  2630  0008A8  6ED9               	movwf	fsr2l,c
  2631  0008AA  0E00               	movlw	high _i2c_r_reg
  2632  0008AC  0101               	movlb	1	; () banked
  2633  0008AE  2159               	addwfc	(main@i_785+1)& (0+255),w,b
  2634  0008B0  6EDA               	movwf	fsr2h,c
  2635  0008B2  0E2D               	movlw	45
  2636  0008B4  6EDF               	movwf	indf2,c
  2637                           
  2638                           ; BSR set to: 1
  2639  0008B6  0101               	movlb	1	; () banked
  2640  0008B8  4B58               	infsnz	main@i_785& (0+255),f,b
  2641  0008BA  2B59               	incf	(main@i_785+1)& (0+255),f,b
  2642  0008BC  D7E7               	goto	l4692
  2643  0008BE                     l4702:
  2644                           
  2645                           ; BSR set to: 1
  2646                           ;main.c: 191: if (credential_state == 0xA1)
  2647  0008BE  0EA1               	movlw	161
  2648  0008C0  0101               	movlb	1	; () banked
  2649  0008C2  1953               	xorwf	main@credential_state& (0+255),w,b
  2650  0008C4  A4D8               	btfss	status,2,c
  2651  0008C6  D03B               	goto	l4726
  2652                           
  2653                           ; BSR set to: 1
  2654                           ;main.c: 192: {
  2655                           ;main.c: 193: Lcd_Set_Cursor(1,1);
  2656  0008C8  0E01               	movlw	1
  2657  0008CA  6E12               	movwf	Lcd_Set_Cursor@b,c
  2658  0008CC  0E01               	movlw	1
  2659  0008CE  EC4C  F00D         	call	_Lcd_Set_Cursor
  2660                           
  2661                           ;main.c: 194: Lcd_Write_String("[Access Granted]");
  2662  0008D2  0ECA               	movlw	low STR_7
  2663  0008D4  6E14               	movwf	Lcd_Write_String@a,c
  2664  0008D6  0E7F               	movlw	high STR_7
  2665  0008D8  6E15               	movwf	Lcd_Write_String@a+1,c
  2666  0008DA  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  2667                           
  2668                           ;main.c: 195: menu_progress_bar(100);
  2669  0008DE  0E00               	movlw	0
  2670  0008E0  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  2671  0008E2  0E64               	movlw	100
  2672  0008E4  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  2673  0008E6  EC48  F00A         	call	_menu_progress_bar	;wreg free
  2674                           
  2675                           ;main.c: 196: Lcd_Set_Cursor(1,1);
  2676  0008EA  0E01               	movlw	1
  2677  0008EC  6E12               	movwf	Lcd_Set_Cursor@b,c
  2678  0008EE  0E01               	movlw	1
  2679  0008F0  EC4C  F00D         	call	_Lcd_Set_Cursor
  2680                           
  2681                           ;main.c: 197: Lcd_Write_String("   [ Welcome ]  ");
  2682  0008F4  0E20               	movlw	low STR_8
  2683  0008F6  6E14               	movwf	Lcd_Write_String@a,c
  2684  0008F8  0E7F               	movlw	high STR_8
  2685  0008FA  6E15               	movwf	Lcd_Write_String@a+1,c
  2686  0008FC  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  2687                           
  2688                           ;main.c: 198: for (int i = 0; i < 30; i++)
  2689  000900  0E00               	movlw	0
  2690  000902  0101               	movlb	1	; () banked
  2691  000904  6F4E               	movwf	(main@i_788+1)& (0+255),b
  2692  000906  0E00               	movlw	0
  2693  000908  6F4D               	movwf	main@i_788& (0+255),b
  2694  00090A                     l4716:
  2695                           
  2696                           ; BSR set to: 1
  2697  00090A  0101               	movlb	1	; () banked
  2698  00090C  BF4E               	btfsc	(main@i_788+1)& (0+255),7,b
  2699  00090E  D008               	goto	l4720
  2700  000910  0101               	movlb	1	; () banked
  2701  000912  514E               	movf	(main@i_788+1)& (0+255),w,b
  2702  000914  E111               	bnz	l4724
  2703  000916  0E1E               	movlw	30
  2704  000918  0101               	movlb	1	; () banked
  2705  00091A  5D4D               	subwf	main@i_788& (0+255),w,b
  2706  00091C  B0D8               	btfsc	status,0,c
  2707  00091E  D00C               	goto	l4724
  2708  000920                     l4720:
  2709                           
  2710                           ; BSR set to: 1
  2711                           ;main.c: 199: {
  2712                           ;main.c: 200: _delay((unsigned long)((10)*(16000000/4000.0)));
  2713  000920  0E34               	movlw	52
  2714  000922  0100               	movlb	0	; () banked
  2715  000924  6FB8               	movwf	??_main& (0+255),b
  2716  000926  0EF2               	movlw	242
  2717  000928                     u4717:
  2718  000928  2EE8               	decfsz	wreg,f,c
  2719  00092A  D7FE               	goto	u4717
  2720  00092C  2FB8               	decfsz	??_main& (0+255),f,b
  2721  00092E  D7FC               	goto	u4717
  2722  000930  0101               	movlb	1	; () banked
  2723  000932  4B4D               	infsnz	main@i_788& (0+255),f,b
  2724  000934  2B4E               	incf	(main@i_788+1)& (0+255),f,b
  2725  000936  D7E9               	goto	l4716
  2726  000938                     l4724:
  2727                           
  2728                           ; BSR set to: 1
  2729                           ;main.c: 201: }
  2730                           ;main.c: 202: running_display();
  2731  000938  ECCF  F008         	call	_running_display	;wreg free
  2732                           
  2733                           ;main.c: 203: }
  2734  00093C  D069               	goto	l4760
  2735  00093E                     l4726:
  2736                           
  2737                           ;main.c: 204: else if (credential_state == 0xA0)
  2738  00093E  0EA0               	movlw	160
  2739  000940  0101               	movlb	1	; () banked
  2740  000942  1953               	xorwf	main@credential_state& (0+255),w,b
  2741  000944  A4D8               	btfss	status,2,c
  2742  000946  D032               	goto	l4744
  2743                           
  2744                           ; BSR set to: 1
  2745                           ;main.c: 205: {
  2746                           ;main.c: 206: Lcd_Set_Cursor(1,1);
  2747  000948  0E01               	movlw	1
  2748  00094A  6E12               	movwf	Lcd_Set_Cursor@b,c
  2749  00094C  0E01               	movlw	1
  2750  00094E  EC4C  F00D         	call	_Lcd_Set_Cursor
  2751                           
  2752                           ;main.c: 207: Lcd_Write_String("[Access  Denied]");
  2753  000952  0EB9               	movlw	low STR_9
  2754  000954  6E14               	movwf	Lcd_Write_String@a,c
  2755  000956  0E7F               	movlw	high STR_9
  2756  000958  6E15               	movwf	Lcd_Write_String@a+1,c
  2757  00095A  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  2758                           
  2759                           ;main.c: 208: Lcd_Set_Cursor(2,1);
  2760  00095E  0E01               	movlw	1
  2761  000960  6E12               	movwf	Lcd_Set_Cursor@b,c
  2762  000962  0E02               	movlw	2
  2763  000964  EC4C  F00D         	call	_Lcd_Set_Cursor
  2764                           
  2765                           ;main.c: 209: Lcd_Write_String("    [ Retry ]   ");
  2766  000968  0EDC               	movlw	low STR_10
  2767  00096A  6E14               	movwf	Lcd_Write_String@a,c
  2768  00096C  0E7E               	movlw	high STR_10
  2769  00096E  6E15               	movwf	Lcd_Write_String@a+1,c
  2770  000970  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  2771                           
  2772                           ;main.c: 210: for (int i = 0; i < 100; i++)
  2773  000974  0E00               	movlw	0
  2774  000976  0101               	movlb	1	; () banked
  2775  000978  6F50               	movwf	(main@i_791+1)& (0+255),b
  2776  00097A  0E00               	movlw	0
  2777  00097C  6F4F               	movwf	main@i_791& (0+255),b
  2778  00097E                     l4736:
  2779                           
  2780                           ; BSR set to: 1
  2781  00097E  0101               	movlb	1	; () banked
  2782  000980  BF50               	btfsc	(main@i_791+1)& (0+255),7,b
  2783  000982  D008               	goto	l4740
  2784  000984  0101               	movlb	1	; () banked
  2785  000986  5150               	movf	(main@i_791+1)& (0+255),w,b
  2786  000988  E143               	bnz	l4760
  2787  00098A  0E64               	movlw	100
  2788  00098C  0101               	movlb	1	; () banked
  2789  00098E  5D4F               	subwf	main@i_791& (0+255),w,b
  2790  000990  B0D8               	btfsc	status,0,c
  2791  000992  D03E               	goto	l4760
  2792  000994                     l4740:
  2793                           
  2794                           ; BSR set to: 1
  2795                           ;main.c: 211: {
  2796                           ;main.c: 212: _delay((unsigned long)((10)*(16000000/4000.0)));
  2797  000994  0E34               	movlw	52
  2798  000996  0100               	movlb	0	; () banked
  2799  000998  6FB8               	movwf	??_main& (0+255),b
  2800  00099A  0EF2               	movlw	242
  2801  00099C                     u4727:
  2802  00099C  2EE8               	decfsz	wreg,f,c
  2803  00099E  D7FE               	goto	u4727
  2804  0009A0  2FB8               	decfsz	??_main& (0+255),f,b
  2805  0009A2  D7FC               	goto	u4727
  2806  0009A4  0101               	movlb	1	; () banked
  2807  0009A6  4B4F               	infsnz	main@i_791& (0+255),f,b
  2808  0009A8  2B50               	incf	(main@i_791+1)& (0+255),f,b
  2809  0009AA  D7E9               	goto	l4736
  2810  0009AC                     l4744:
  2811                           
  2812                           ; BSR set to: 1
  2813                           ;main.c: 215: else
  2814                           ;main.c: 216: {
  2815                           ;main.c: 217: Lcd_Set_Cursor(1,1);
  2816  0009AC  0E01               	movlw	1
  2817  0009AE  6E12               	movwf	Lcd_Set_Cursor@b,c
  2818  0009B0  0E01               	movlw	1
  2819  0009B2  EC4C  F00D         	call	_Lcd_Set_Cursor
  2820                           
  2821                           ;main.c: 218: Lcd_Write_String("[ System Error ]");
  2822  0009B6  0E97               	movlw	low STR_11
  2823  0009B8  6E14               	movwf	Lcd_Write_String@a,c
  2824  0009BA  0E7F               	movlw	high STR_11
  2825  0009BC  6E15               	movwf	Lcd_Write_String@a+1,c
  2826  0009BE  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  2827                           
  2828                           ;main.c: 219: Lcd_Set_Cursor(2,1);
  2829  0009C2  0E01               	movlw	1
  2830  0009C4  6E12               	movwf	Lcd_Set_Cursor@b,c
  2831  0009C6  0E02               	movlw	2
  2832  0009C8  EC4C  F00D         	call	_Lcd_Set_Cursor
  2833                           
  2834                           ;main.c: 220: Lcd_Write_String("    [ Retry ]   ");
  2835  0009CC  0EDC               	movlw	low STR_10
  2836  0009CE  6E14               	movwf	Lcd_Write_String@a,c
  2837  0009D0  0E7E               	movlw	high STR_10
  2838  0009D2  6E15               	movwf	Lcd_Write_String@a+1,c
  2839  0009D4  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  2840                           
  2841                           ;main.c: 221: for (int i = 0; i < 100; i++)
  2842  0009D8  0E00               	movlw	0
  2843  0009DA  0101               	movlb	1	; () banked
  2844  0009DC  6F52               	movwf	(main@i_794+1)& (0+255),b
  2845  0009DE  0E00               	movlw	0
  2846  0009E0  6F51               	movwf	main@i_794& (0+255),b
  2847  0009E2                     l4752:
  2848                           
  2849                           ; BSR set to: 1
  2850  0009E2  0101               	movlb	1	; () banked
  2851  0009E4  BF52               	btfsc	(main@i_794+1)& (0+255),7,b
  2852  0009E6  D008               	goto	l4756
  2853  0009E8  0101               	movlb	1	; () banked
  2854  0009EA  5152               	movf	(main@i_794+1)& (0+255),w,b
  2855  0009EC  E111               	bnz	l4760
  2856  0009EE  0E64               	movlw	100
  2857  0009F0  0101               	movlb	1	; () banked
  2858  0009F2  5D51               	subwf	main@i_794& (0+255),w,b
  2859  0009F4  B0D8               	btfsc	status,0,c
  2860  0009F6  D00C               	goto	l4760
  2861  0009F8                     l4756:
  2862                           
  2863                           ; BSR set to: 1
  2864                           ;main.c: 222: {
  2865                           ;main.c: 223: _delay((unsigned long)((10)*(16000000/4000.0)));
  2866  0009F8  0E34               	movlw	52
  2867  0009FA  0100               	movlb	0	; () banked
  2868  0009FC  6FB8               	movwf	??_main& (0+255),b
  2869  0009FE  0EF2               	movlw	242
  2870  000A00                     u4737:
  2871  000A00  2EE8               	decfsz	wreg,f,c
  2872  000A02  D7FE               	goto	u4737
  2873  000A04  2FB8               	decfsz	??_main& (0+255),f,b
  2874  000A06  D7FC               	goto	u4737
  2875  000A08  0101               	movlb	1	; () banked
  2876  000A0A  4B51               	infsnz	main@i_794& (0+255),f,b
  2877  000A0C  2B52               	incf	(main@i_794+1)& (0+255),f,b
  2878  000A0E  D7E9               	goto	l4752
  2879  000A10                     l4760:
  2880  000A10  0100               	movlb	0	; () banked
  2881  000A12  51D3               	movf	_credentials_accepted& (0+255),w,b	;volatile
  2882  000A14  A4D8               	btfss	status,2,c
  2883  000A16  EF90  F000         	goto	l4482
  2884  000A1A  EFC4  F000         	goto	l4494
  2885  000A1E                     __end_of_main:
  2886                           	opt stack 0
  2887                           tblptru	equ	0xFF8
  2888                           tblptrh	equ	0xFF7
  2889                           tblptrl	equ	0xFF6
  2890                           tablat	equ	0xFF5
  2891                           prodh	equ	0xFF4
  2892                           prodl	equ	0xFF3
  2893                           postinc0	equ	0xFEE
  2894                           wreg	equ	0xFE8
  2895                           indf1	equ	0xFE7
  2896                           postdec1	equ	0xFE5
  2897                           plusw1	equ	0xFE3
  2898                           fsr1h	equ	0xFE2
  2899                           fsr1l	equ	0xFE1
  2900                           indf2	equ	0xFDF
  2901                           plusw2	equ	0xFDB
  2902                           fsr2h	equ	0xFDA
  2903                           fsr2l	equ	0xFD9
  2904                           status	equ	0xFD8
  2905                           
  2906 ;; *************** function _start_routine *****************
  2907 ;; Defined at:
  2908 ;;		line 382 in file "main.c"
  2909 ;; Parameters:    Size  Location     Type
  2910 ;;		None
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;  i               2   23[BANK0 ] int 
  2913 ;;  i               2   16[BANK0 ] int 
  2914 ;;  i               2   14[BANK0 ] int 
  2915 ;;  i               2   12[BANK0 ] int 
  2916 ;;  i               2   21[BANK0 ] int 
  2917 ;;  i               2   30[BANK0 ] int 
  2918 ;;  b               3   18[BANK0 ] unsigned char [3]
  2919 ;;  error_msg       2    2[BANK0 ] PTR unsigned char 
  2920 ;;		 -> STR_26(17), STR_25(17), 
  2921 ;;  new_I2C_addr    1   35[BANK0 ] unsigned char 
  2922 ;;  I2C_new_ADDR    3   25[BANK0 ] unsigned char [3]
  2923 ;;  i               2   10[BANK0 ] int 
  2924 ;;  i               2    8[BANK0 ] int 
  2925 ;;  i               2    6[BANK0 ] int 
  2926 ;;  n               1   34[BANK0 ] unsigned char 
  2927 ;;  x               1   33[BANK0 ] unsigned char 
  2928 ;;  dh              1   32[BANK0 ] unsigned char 
  2929 ;;  dt              1   29[BANK0 ] unsigned char 
  2930 ;;  a               1   28[BANK0 ] unsigned char 
  2931 ;;  v               1    5[BANK0 ] unsigned char 
  2932 ;;  d1              1    4[BANK0 ] unsigned char 
  2933 ;;  l               1    1[BANK0 ] unsigned char 
  2934 ;;  h               1    0[BANK0 ] unsigned char 
  2935 ;; Return value:  Size  Location     Type
  2936 ;;                  1    wreg      void 
  2937 ;; Registers used:
  2938 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2939 ;; Tracked objects:
  2940 ;;		On entry : 0/0
  2941 ;;		On exit  : 0/0
  2942 ;;		Unchanged: 0/0
  2943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2944 ;;      Params:         0       0       0       0       0       0       0
  2945 ;;      Locals:         0      36       0       0       0       0       0
  2946 ;;      Temps:          4       0       0       0       0       0       0
  2947 ;;      Totals:         4      36       0       0       0       0       0
  2948 ;;Total ram usage:       40 bytes
  2949 ;; Hardware stack levels used:    1
  2950 ;; Hardware stack levels required when called:    5
  2951 ;; This function calls:
  2952 ;;		_Eeprom_Write_Byte
  2953 ;;		_Lcd_Clear
  2954 ;;		_Lcd_Set_Cursor
  2955 ;;		_Lcd_Write_Char
  2956 ;;		_Lcd_Write_String
  2957 ;;		___awdiv
  2958 ;;		_latch_keypad
  2959 ;;		_menu_progress_bar
  2960 ;;		_read_keypad
  2961 ;; This function is called by:
  2962 ;;		_main
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           	psect	text1
  2967  000A1E                     __ptext1:
  2968                           	opt stack 0
  2969  000A1E                     _start_routine:
  2970                           	opt stack 25
  2971                           
  2972                           ;main.c: 387: Lcd_Clear();
  2973                           
  2974                           ; BSR set to: 0
  2975                           ;incstack = 0
  2976  000A1E  EC1E  F00E         	call	_Lcd_Clear	;wreg free
  2977                           
  2978                           ;main.c: 388: Lcd_Set_Cursor(1, 1);
  2979  000A22  0E01               	movlw	1
  2980  000A24  6E12               	movwf	Lcd_Set_Cursor@b,c
  2981  000A26  0E01               	movlw	1
  2982  000A28  EC4C  F00D         	call	_Lcd_Set_Cursor
  2983                           
  2984                           ;main.c: 389: Lcd_Write_String("   [ Aditum ]   ");
  2985  000A2C  0ECB               	movlw	low STR_13
  2986  000A2E  6E14               	movwf	Lcd_Write_String@a,c
  2987  000A30  0E7E               	movlw	high STR_13
  2988  000A32  6E15               	movwf	Lcd_Write_String@a+1,c
  2989  000A34  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  2990                           
  2991                           ;main.c: 390: for (int i = 0; i < 20; i++)
  2992  000A38  0E00               	movlw	0
  2993  000A3A  0100               	movlb	0	; () banked
  2994  000A3C  6F9B               	movwf	(start_routine@i+1)& (0+255),b
  2995  000A3E  0E00               	movlw	0
  2996  000A40  6F9A               	movwf	start_routine@i& (0+255),b
  2997  000A42                     l3968:
  2998                           
  2999                           ; BSR set to: 0
  3000  000A42  0100               	movlb	0	; () banked
  3001  000A44  BF9B               	btfsc	(start_routine@i+1)& (0+255),7,b
  3002  000A46  D008               	goto	l3972
  3003  000A48  0100               	movlb	0	; () banked
  3004  000A4A  519B               	movf	(start_routine@i+1)& (0+255),w,b
  3005  000A4C  E112               	bnz	l3976
  3006  000A4E  0E14               	movlw	20
  3007  000A50  0100               	movlb	0	; () banked
  3008  000A52  5D9A               	subwf	start_routine@i& (0+255),w,b
  3009  000A54  B0D8               	btfsc	status,0,c
  3010  000A56  D00D               	goto	l3976
  3011  000A58                     l3972:
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;main.c: 391: _delay((unsigned long)((20)*(16000000/4000.0)));
  3015  000A58  0E68               	movlw	104
  3016  000A5A  6E31               	movwf	??_start_routine& (0+255),c
  3017  000A5C  0EE4               	movlw	228
  3018  000A5E                     u4747:
  3019  000A5E  2EE8               	decfsz	wreg,f,c
  3020  000A60  D7FE               	goto	u4747
  3021  000A62  2E31               	decfsz	??_start_routine& (0+255),f,c
  3022  000A64  D7FC               	goto	u4747
  3023  000A66  F000 F000          	nop2	
  3024  000A6A  0100               	movlb	0	; () banked
  3025  000A6C  4B9A               	infsnz	start_routine@i& (0+255),f,b
  3026  000A6E  2B9B               	incf	(start_routine@i+1)& (0+255),f,b
  3027  000A70  D7E8               	goto	l3968
  3028  000A72                     l3976:
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;main.c: 392: Lcd_Set_Cursor(2,1);
  3032  000A72  0E01               	movlw	1
  3033  000A74  6E12               	movwf	Lcd_Set_Cursor@b,c
  3034  000A76  0E02               	movlw	2
  3035  000A78  EC4C  F00D         	call	_Lcd_Set_Cursor
  3036                           
  3037                           ;main.c: 393: Lcd_Write_String("Rev ");
  3038  000A7C  0EF2               	movlw	low STR_14
  3039  000A7E  6E14               	movwf	Lcd_Write_String@a,c
  3040  000A80  0E7F               	movlw	high STR_14
  3041  000A82  6E15               	movwf	Lcd_Write_String@a+1,c
  3042  000A84  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  3043                           
  3044                           ;main.c: 394: Lcd_Write_String("1.0.0");
  3045  000A88  0EE6               	movlw	low STR_15
  3046  000A8A  6E14               	movwf	Lcd_Write_String@a,c
  3047  000A8C  0E7F               	movlw	high STR_15
  3048  000A8E  6E15               	movwf	Lcd_Write_String@a+1,c
  3049  000A90  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  3050                           
  3051                           ;main.c: 395: for (int i = 0; i < 50; i++)
  3052  000A94  0E00               	movlw	0
  3053  000A96  0100               	movlb	0	; () banked
  3054  000A98  6F9D               	movwf	(start_routine@i_873+1)& (0+255),b
  3055  000A9A  0E00               	movlw	0
  3056  000A9C  6F9C               	movwf	start_routine@i_873& (0+255),b
  3057  000A9E                     l3984:
  3058                           
  3059                           ; BSR set to: 0
  3060  000A9E  0100               	movlb	0	; () banked
  3061  000AA0  BF9D               	btfsc	(start_routine@i_873+1)& (0+255),7,b
  3062  000AA2  D008               	goto	l3988
  3063  000AA4  0100               	movlb	0	; () banked
  3064  000AA6  519D               	movf	(start_routine@i_873+1)& (0+255),w,b
  3065  000AA8  E112               	bnz	l3992
  3066  000AAA  0E32               	movlw	50
  3067  000AAC  0100               	movlb	0	; () banked
  3068  000AAE  5D9C               	subwf	start_routine@i_873& (0+255),w,b
  3069  000AB0  B0D8               	btfsc	status,0,c
  3070  000AB2  D00D               	goto	l3992
  3071  000AB4                     l3988:
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;main.c: 396: _delay((unsigned long)((20)*(16000000/4000.0)));
  3075  000AB4  0E68               	movlw	104
  3076  000AB6  6E31               	movwf	??_start_routine& (0+255),c
  3077  000AB8  0EE4               	movlw	228
  3078  000ABA                     u4757:
  3079  000ABA  2EE8               	decfsz	wreg,f,c
  3080  000ABC  D7FE               	goto	u4757
  3081  000ABE  2E31               	decfsz	??_start_routine& (0+255),f,c
  3082  000AC0  D7FC               	goto	u4757
  3083  000AC2  F000 F000          	nop2	
  3084  000AC6  0100               	movlb	0	; () banked
  3085  000AC8  4B9C               	infsnz	start_routine@i_873& (0+255),f,b
  3086  000ACA  2B9D               	incf	(start_routine@i_873+1)& (0+255),f,b
  3087  000ACC  D7E8               	goto	l3984
  3088  000ACE                     l3992:
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;main.c: 397: Lcd_Set_Cursor(2,1);
  3092  000ACE  0E01               	movlw	1
  3093  000AD0  6E12               	movwf	Lcd_Set_Cursor@b,c
  3094  000AD2  0E02               	movlw	2
  3095  000AD4  EC4C  F00D         	call	_Lcd_Set_Cursor
  3096                           
  3097                           ;main.c: 398: Lcd_Write_String("Device ID ");
  3098  000AD8  0EDB               	movlw	low STR_16
  3099  000ADA  6E14               	movwf	Lcd_Write_String@a,c
  3100  000ADC  0E7F               	movlw	high STR_16
  3101  000ADE  6E15               	movwf	Lcd_Write_String@a+1,c
  3102  000AE0  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  3103                           
  3104                           ;main.c: 399: unsigned char a, h, l, dh, dt, d1;
  3105                           ;main.c: 400: if (I2C_ADDR != 0)
  3106  000AE4  0100               	movlb	0	; () banked
  3107  000AE6  51D4               	movf	_I2C_ADDR& (0+255),w,b
  3108  000AE8  B4D8               	btfsc	status,2,c
  3109  000AEA  D004               	goto	l4000
  3110                           
  3111                           ; BSR set to: 0
  3112                           ;main.c: 401: a = I2C_ADDR - 0x0F;
  3113  000AEC  0100               	movlb	0	; () banked
  3114  000AEE  51D4               	movf	_I2C_ADDR& (0+255),w,b
  3115  000AF0  0FF1               	addlw	241
  3116  000AF2  D001               	goto	L2
  3117  000AF4                     l4000:
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;main.c: 402: else
  3121                           ;main.c: 403: a = 0;
  3122  000AF4  0E00               	movlw	0
  3123  000AF6                     L2:
  3124  000AF6  0100               	movlb	0	; () banked
  3125  000AF8  6FB0               	movwf	start_routine@a& (0+255),b
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;main.c: 405: dh = (a / 100);
  3129                           
  3130                           ; BSR set to: 0
  3131  000AFA  C0B0  F010         	movff	start_routine@a,___awdiv@dividend
  3132  000AFE  6A11               	clrf	___awdiv@dividend+1,c
  3133  000B00  0E00               	movlw	0
  3134  000B02  6E13               	movwf	___awdiv@divisor+1,c
  3135  000B04  0E64               	movlw	100
  3136  000B06  6E12               	movwf	___awdiv@divisor,c
  3137  000B08  EC0B  F00C         	call	___awdiv	;wreg free
  3138  000B0C  5010               	movf	?___awdiv,w,c
  3139  000B0E  0100               	movlb	0	; () banked
  3140  000B10  6FB4               	movwf	start_routine@dh& (0+255),b
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;main.c: 406: dt = (a - dh*100) / 10;
  3144  000B12  0100               	movlb	0	; () banked
  3145  000B14  51B4               	movf	start_routine@dh& (0+255),w,b
  3146  000B16  0D64               	mullw	100
  3147  000B18  1EF3               	comf	prodl,f,c
  3148  000B1A  1EF4               	comf	prodh,f,c
  3149  000B1C  4AF3               	infsnz	prodl,f,c
  3150  000B1E  2AF4               	incf	prodh,f,c
  3151  000B20  0100               	movlb	0	; () banked
  3152  000B22  51B0               	movf	start_routine@a& (0+255),w,b
  3153  000B24  24F3               	addwf	prodl,w,c
  3154  000B26  6E10               	movwf	___awdiv@dividend,c
  3155  000B28  0E00               	movlw	0
  3156  000B2A  20F4               	addwfc	prodh,w,c
  3157  000B2C  6E11               	movwf	___awdiv@dividend+1,c
  3158  000B2E  0E00               	movlw	0
  3159  000B30  6E13               	movwf	___awdiv@divisor+1,c
  3160  000B32  0E0A               	movlw	10
  3161  000B34  6E12               	movwf	___awdiv@divisor,c
  3162  000B36  EC0B  F00C         	call	___awdiv	;wreg free
  3163  000B3A  5010               	movf	?___awdiv,w,c
  3164  000B3C  0100               	movlb	0	; () banked
  3165  000B3E  6FB1               	movwf	start_routine@dt& (0+255),b
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;main.c: 407: d1 = (a - (dh*100+dt*10));
  3169  000B40  0100               	movlb	0	; () banked
  3170  000B42  51B1               	movf	start_routine@dt& (0+255),w,b
  3171  000B44  0D0A               	mullw	10
  3172  000B46  CFF3 F031          	movff	prodl,??_start_routine
  3173  000B4A  0100               	movlb	0	; () banked
  3174  000B4C  51B4               	movf	start_routine@dh& (0+255),w,b
  3175  000B4E  0D64               	mullw	100
  3176  000B50  50F3               	movf	prodl,w,c
  3177  000B52  2431               	addwf	??_start_routine,w,c
  3178  000B54  0800               	sublw	0
  3179  000B56  0100               	movlb	0	; () banked
  3180  000B58  25B0               	addwf	start_routine@a& (0+255),w,b
  3181  000B5A  0100               	movlb	0	; () banked
  3182  000B5C  6F98               	movwf	start_routine@d1& (0+255),b
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;main.c: 408: Lcd_Write_Char(c[dh]);
  3186  000B5E  0100               	movlb	0	; () banked
  3187  000B60  51B4               	movf	start_routine@dh& (0+255),w,b
  3188  000B62  0D01               	mullw	1
  3189  000B64  0E80               	movlw	low _c
  3190  000B66  24F3               	addwf	prodl,w,c
  3191  000B68  6ED9               	movwf	fsr2l,c
  3192  000B6A  0E00               	movlw	high _c
  3193  000B6C  20F4               	addwfc	prodh,w,c
  3194  000B6E  6EDA               	movwf	fsr2h,c
  3195  000B70  50DF               	movf	indf2,w,c
  3196  000B72  ECAD  F00D         	call	_Lcd_Write_Char
  3197                           
  3198                           ;main.c: 409: Lcd_Write_Char(c[dt]);
  3199  000B76  0100               	movlb	0	; () banked
  3200  000B78  51B1               	movf	start_routine@dt& (0+255),w,b
  3201  000B7A  0D01               	mullw	1
  3202  000B7C  0E80               	movlw	low _c
  3203  000B7E  24F3               	addwf	prodl,w,c
  3204  000B80  6ED9               	movwf	fsr2l,c
  3205  000B82  0E00               	movlw	high _c
  3206  000B84  20F4               	addwfc	prodh,w,c
  3207  000B86  6EDA               	movwf	fsr2h,c
  3208  000B88  50DF               	movf	indf2,w,c
  3209  000B8A  ECAD  F00D         	call	_Lcd_Write_Char
  3210                           
  3211                           ;main.c: 410: Lcd_Write_Char(c[d1]);
  3212  000B8E  0100               	movlb	0	; () banked
  3213  000B90  5198               	movf	start_routine@d1& (0+255),w,b
  3214  000B92  0D01               	mullw	1
  3215  000B94  0E80               	movlw	low _c
  3216  000B96  24F3               	addwf	prodl,w,c
  3217  000B98  6ED9               	movwf	fsr2l,c
  3218  000B9A  0E00               	movlw	high _c
  3219  000B9C  20F4               	addwfc	prodh,w,c
  3220  000B9E  6EDA               	movwf	fsr2h,c
  3221  000BA0  50DF               	movf	indf2,w,c
  3222  000BA2  ECAD  F00D         	call	_Lcd_Write_Char
  3223                           
  3224                           ;main.c: 411: Lcd_Write_Char('|');
  3225  000BA6  0E7C               	movlw	124
  3226  000BA8  ECAD  F00D         	call	_Lcd_Write_Char
  3227                           
  3228                           ;main.c: 412: Lcd_Write_Char(hx[I2C_ADDR/16]);
  3229  000BAC  C0D4  F010         	movff	_I2C_ADDR,___awdiv@dividend
  3230  000BB0  6A11               	clrf	___awdiv@dividend+1,c
  3231  000BB2  0E00               	movlw	0
  3232  000BB4  6E13               	movwf	___awdiv@divisor+1,c
  3233  000BB6  0E10               	movlw	16
  3234  000BB8  6E12               	movwf	___awdiv@divisor,c
  3235  000BBA  EC0B  F00C         	call	___awdiv	;wreg free
  3236  000BBE  0E20               	movlw	low _hx
  3237  000BC0  2410               	addwf	?___awdiv,w,c
  3238  000BC2  6ED9               	movwf	fsr2l,c
  3239  000BC4  0E01               	movlw	high _hx
  3240  000BC6  2011               	addwfc	?___awdiv+1,w,c
  3241  000BC8  6EDA               	movwf	fsr2h,c
  3242  000BCA  50DF               	movf	indf2,w,c
  3243  000BCC  ECAD  F00D         	call	_Lcd_Write_Char
  3244                           
  3245                           ;main.c: 413: Lcd_Write_Char(hx[I2C_ADDR - (I2C_ADDR/16)*16]);
  3246  000BD0  C0D4  F010         	movff	_I2C_ADDR,___awdiv@dividend
  3247  000BD4  6A11               	clrf	___awdiv@dividend+1,c
  3248  000BD6  0E00               	movlw	0
  3249  000BD8  6E13               	movwf	___awdiv@divisor+1,c
  3250  000BDA  0E10               	movlw	16
  3251  000BDC  6E12               	movwf	___awdiv@divisor,c
  3252  000BDE  EC0B  F00C         	call	___awdiv	;wreg free
  3253  000BE2  3A10               	swapf	?___awdiv,f,c
  3254  000BE4  3A11               	swapf	?___awdiv+1,f,c
  3255  000BE6  0EF0               	movlw	240
  3256  000BE8  1611               	andwf	?___awdiv+1,f,c
  3257  000BEA  5010               	movf	?___awdiv,w,c
  3258  000BEC  0B0F               	andlw	15
  3259  000BEE  1211               	iorwf	?___awdiv+1,f,c
  3260  000BF0  0EF0               	movlw	240
  3261  000BF2  1610               	andwf	?___awdiv,f,c
  3262  000BF4  1E10               	comf	?___awdiv,f,c
  3263  000BF6  1E11               	comf	?___awdiv+1,f,c
  3264  000BF8  4A10               	infsnz	?___awdiv,f,c
  3265  000BFA  2A11               	incf	?___awdiv+1,f,c
  3266  000BFC  0100               	movlb	0	; () banked
  3267  000BFE  51D4               	movf	_I2C_ADDR& (0+255),w,b
  3268  000C00  6E31               	movwf	??_start_routine& (0+255),c
  3269  000C02  6A32               	clrf	(??_start_routine+1)& (0+255),c
  3270  000C04  5010               	movf	?___awdiv,w,c
  3271  000C06  2631               	addwf	??_start_routine,f,c
  3272  000C08  5011               	movf	?___awdiv+1,w,c
  3273  000C0A  2232               	addwfc	??_start_routine+1,f,c
  3274  000C0C  0E20               	movlw	low _hx
  3275  000C0E  2431               	addwf	??_start_routine,w,c
  3276  000C10  6ED9               	movwf	fsr2l,c
  3277  000C12  0E01               	movlw	high _hx
  3278  000C14  2032               	addwfc	??_start_routine+1,w,c
  3279  000C16  6EDA               	movwf	fsr2h,c
  3280  000C18  50DF               	movf	indf2,w,c
  3281  000C1A  ECAD  F00D         	call	_Lcd_Write_Char
  3282                           
  3283                           ;main.c: 414: for (int i = 0; i < 40; i++)
  3284  000C1E  0E00               	movlw	0
  3285  000C20  0100               	movlb	0	; () banked
  3286  000C22  6F9F               	movwf	(start_routine@i_881+1)& (0+255),b
  3287  000C24  0E00               	movlw	0
  3288  000C26  6F9E               	movwf	start_routine@i_881& (0+255),b
  3289  000C28                     l4022:
  3290                           
  3291                           ; BSR set to: 0
  3292  000C28  0100               	movlb	0	; () banked
  3293  000C2A  BF9F               	btfsc	(start_routine@i_881+1)& (0+255),7,b
  3294  000C2C  D008               	goto	l4026
  3295  000C2E  0100               	movlb	0	; () banked
  3296  000C30  519F               	movf	(start_routine@i_881+1)& (0+255),w,b
  3297  000C32  E112               	bnz	l4030
  3298  000C34  0E28               	movlw	40
  3299  000C36  0100               	movlb	0	; () banked
  3300  000C38  5D9E               	subwf	start_routine@i_881& (0+255),w,b
  3301  000C3A  B0D8               	btfsc	status,0,c
  3302  000C3C  D00D               	goto	l4030
  3303  000C3E                     l4026:
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;main.c: 415: _delay((unsigned long)((20)*(16000000/4000.0)));
  3307  000C3E  0E68               	movlw	104
  3308  000C40  6E31               	movwf	??_start_routine& (0+255),c
  3309  000C42  0EE4               	movlw	228
  3310  000C44                     u4767:
  3311  000C44  2EE8               	decfsz	wreg,f,c
  3312  000C46  D7FE               	goto	u4767
  3313  000C48  2E31               	decfsz	??_start_routine& (0+255),f,c
  3314  000C4A  D7FC               	goto	u4767
  3315  000C4C  F000 F000          	nop2	
  3316  000C50  0100               	movlb	0	; () banked
  3317  000C52  4B9E               	infsnz	start_routine@i_881& (0+255),f,b
  3318  000C54  2B9F               	incf	(start_routine@i_881+1)& (0+255),f,b
  3319  000C56  D7E8               	goto	l4022
  3320  000C58                     l4030:
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;main.c: 416: Lcd_Clear();
  3324  000C58  EC1E  F00E         	call	_Lcd_Clear	;wreg free
  3325                           
  3326                           ;main.c: 417: Lcd_Set_Cursor(1, 1);
  3327  000C5C  0E01               	movlw	1
  3328  000C5E  6E12               	movwf	Lcd_Set_Cursor@b,c
  3329  000C60  0E01               	movlw	1
  3330  000C62  EC4C  F00D         	call	_Lcd_Set_Cursor
  3331                           
  3332                           ;main.c: 418: Lcd_Write_String("  [  Aditum  ]  ");
  3333  000C66  0E0F               	movlw	low STR_17
  3334  000C68  6E14               	movwf	Lcd_Write_String@a,c
  3335  000C6A  0E7F               	movlw	high STR_17
  3336  000C6C  6E15               	movwf	Lcd_Write_String@a+1,c
  3337  000C6E  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  3338                           
  3339                           ;main.c: 419: menu_progress_bar(700);
  3340  000C72  0E02               	movlw	2
  3341  000C74  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  3342  000C76  0EBC               	movlw	188
  3343  000C78  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  3344  000C7A  EC48  F00A         	call	_menu_progress_bar	;wreg free
  3345                           
  3346                           ;main.c: 422: unsigned char x, n = 0, v;
  3347  000C7E  0E00               	movlw	0
  3348  000C80  0100               	movlb	0	; () banked
  3349  000C82  6FB6               	movwf	start_routine@n& (0+255),b
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;main.c: 423: if (I2C_ADDR == 0x00)
  3353  000C84  0100               	movlb	0	; () banked
  3354  000C86  51D4               	movf	_I2C_ADDR& (0+255),w,b
  3355  000C88  A4D8               	btfss	status,2,c
  3356  000C8A  D285               	goto	l4242
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;main.c: 424: {
  3360                           ;main.c: 425: v = 0;
  3361  000C8C  0E00               	movlw	0
  3362  000C8E  0100               	movlb	0	; () banked
  3363  000C90  6F99               	movwf	start_routine@v& (0+255),b
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;main.c: 426: Lcd_Set_Cursor(1,1);
  3367  000C92  0E01               	movlw	1
  3368  000C94  6E12               	movwf	Lcd_Set_Cursor@b,c
  3369  000C96  0E01               	movlw	1
  3370  000C98  EC4C  F00D         	call	_Lcd_Set_Cursor
  3371                           
  3372                           ;main.c: 427: Lcd_Write_String("Load I2C setup..");
  3373  000C9C  0E64               	movlw	low STR_18
  3374  000C9E  6E14               	movwf	Lcd_Write_String@a,c
  3375  000CA0  0E7F               	movlw	high STR_18
  3376  000CA2  6E15               	movwf	Lcd_Write_String@a+1,c
  3377  000CA4  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  3378                           
  3379                           ;main.c: 428: menu_progress_bar(300);
  3380  000CA8  0E01               	movlw	1
  3381  000CAA  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  3382  000CAC  0E2C               	movlw	44
  3383  000CAE  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  3384  000CB0  EC48  F00A         	call	_menu_progress_bar	;wreg free
  3385                           
  3386                           ;main.c: 429: unsigned char I2C_new_ADDR[] = {'0', '0', '0'};
  3387  000CB4  C08F  F0AD         	movff	start_routine@F3719,start_routine@I2C_new_ADDR
  3388  000CB8  C090  F0AE         	movff	start_routine@F3719+1,start_routine@I2C_new_ADDR+1
  3389  000CBC  C091  F0AF         	movff	start_routine@F3719+2,start_routine@I2C_new_ADDR+2
  3390                           
  3391                           ;main.c: 430: while (v != 1)
  3392  000CC0  D265               	goto	l4240
  3393  000CC2                     l4052:
  3394                           
  3395                           ;main.c: 431: {
  3396                           ;main.c: 432: Lcd_Set_Cursor(1,1);
  3397  000CC2  0E01               	movlw	1
  3398  000CC4  6E12               	movwf	Lcd_Set_Cursor@b,c
  3399  000CC6  0E01               	movlw	1
  3400  000CC8  EC4C  F00D         	call	_Lcd_Set_Cursor
  3401                           
  3402                           ;main.c: 433: Lcd_Write_String("New Machine ID: ");
  3403  000CCC  0E31               	movlw	low STR_19
  3404  000CCE  6E14               	movwf	Lcd_Write_String@a,c
  3405  000CD0  0E7F               	movlw	high STR_19
  3406  000CD2  6E15               	movwf	Lcd_Write_String@a+1,c
  3407  000CD4  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  3408                           
  3409                           ;main.c: 434: Lcd_Set_Cursor(2,1);
  3410  000CD8  0E01               	movlw	1
  3411  000CDA  6E12               	movwf	Lcd_Set_Cursor@b,c
  3412  000CDC  0E02               	movlw	2
  3413  000CDE  EC4C  F00D         	call	_Lcd_Set_Cursor
  3414                           
  3415                           ;main.c: 435: Lcd_Write_String("       [001-100]");
  3416  000CE2  0EA8               	movlw	low STR_20
  3417  000CE4  6E14               	movwf	Lcd_Write_String@a,c
  3418  000CE6  0E7F               	movlw	high STR_20
  3419  000CE8  6E15               	movwf	Lcd_Write_String@a+1,c
  3420  000CEA  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  3421                           
  3422                           ;main.c: 436: Lcd_Set_Cursor(2,1);
  3423  000CEE  0E01               	movlw	1
  3424  000CF0  6E12               	movwf	Lcd_Set_Cursor@b,c
  3425  000CF2  0E02               	movlw	2
  3426  000CF4  EC4C  F00D         	call	_Lcd_Set_Cursor
  3427                           
  3428                           ;main.c: 437: Lcd_Write_Char('_');
  3429  000CF8  0E5F               	movlw	95
  3430  000CFA  ECAD  F00D         	call	_Lcd_Write_Char
  3431                           
  3432                           ;main.c: 438: while (n < 3)
  3433  000CFE  D081               	goto	l4104
  3434  000D00                     l4062:
  3435                           
  3436                           ;main.c: 439: {
  3437                           ;main.c: 440: x = read_keypad();
  3438  000D00  EC74  F00B         	call	_read_keypad	;wreg free
  3439  000D04  0100               	movlb	0	; () banked
  3440  000D06  6FB5               	movwf	start_routine@x& (0+255),b
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;main.c: 441: if (x != '_')
  3444  000D08  0E5F               	movlw	95
  3445  000D0A  0100               	movlb	0	; () banked
  3446  000D0C  19B5               	xorwf	start_routine@x& (0+255),w,b
  3447  000D0E  B4D8               	btfsc	status,2,c
  3448  000D10  D078               	goto	l4104
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;main.c: 442: {
  3452                           ;main.c: 443: if (((x - '#') == 0)&&(n > 0))
  3453  000D12  0EDD               	movlw	221
  3454  000D14  6E31               	movwf	??_start_routine& (0+255),c
  3455  000D16  0EFF               	movlw	255
  3456  000D18  6E32               	movwf	(??_start_routine+1)& (0+255),c
  3457  000D1A  0100               	movlb	0	; () banked
  3458  000D1C  51B5               	movf	start_routine@x& (0+255),w,b
  3459  000D1E  6E33               	movwf	(??_start_routine+2)& (0+255),c
  3460  000D20  6A34               	clrf	(??_start_routine+3)& (0+255),c
  3461  000D22  5031               	movf	??_start_routine,w,c
  3462  000D24  2633               	addwf	??_start_routine+2,f,c
  3463  000D26  5032               	movf	??_start_routine+1,w,c
  3464  000D28  2234               	addwfc	??_start_routine+3,f,c
  3465  000D2A  5033               	movf	??_start_routine+2,w,c
  3466  000D2C  1034               	iorwf	??_start_routine+3,w,c
  3467  000D2E  A4D8               	btfss	status,2,c
  3468  000D30  D02F               	goto	l4086
  3469                           
  3470                           ; BSR set to: 0
  3471  000D32  0100               	movlb	0	; () banked
  3472  000D34  51B6               	movf	start_routine@n& (0+255),w,b
  3473  000D36  0100               	movlb	0	; () banked
  3474  000D38  B4D8               	btfsc	status,2,c
  3475  000D3A  D02A               	goto	l4086
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;main.c: 444: {
  3479                           ;main.c: 445: I2C_new_ADDR[n] = 0;
  3480  000D3C  0100               	movlb	0	; () banked
  3481  000D3E  51B6               	movf	start_routine@n& (0+255),w,b
  3482  000D40  0D01               	mullw	1
  3483  000D42  0EAD               	movlw	low start_routine@I2C_new_ADDR
  3484  000D44  24F3               	addwf	prodl,w,c
  3485  000D46  6ED9               	movwf	fsr2l,c
  3486  000D48  0E00               	movlw	high start_routine@I2C_new_ADDR
  3487  000D4A  20F4               	addwfc	prodh,w,c
  3488  000D4C  6EDA               	movwf	fsr2h,c
  3489  000D4E  0E00               	movlw	0
  3490  000D50  6EDF               	movwf	indf2,c
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;main.c: 446: Lcd_Set_Cursor(2, n);
  3494  000D52  C0B6  F012         	movff	start_routine@n,Lcd_Set_Cursor@b
  3495  000D56  0E02               	movlw	2
  3496  000D58  EC4C  F00D         	call	_Lcd_Set_Cursor
  3497                           
  3498                           ;main.c: 447: Lcd_Write_Char('_');
  3499  000D5C  0E5F               	movlw	95
  3500  000D5E  ECAD  F00D         	call	_Lcd_Write_Char
  3501                           
  3502                           ;main.c: 448: latch_keypad(&x);
  3503  000D62  0EB5               	movlw	low start_routine@x
  3504  000D64  6E10               	movwf	latch_keypad@x,c
  3505  000D66  0E00               	movlw	high start_routine@x
  3506  000D68  6E11               	movwf	latch_keypad@x+1,c
  3507  000D6A  EC91  F00D         	call	_latch_keypad	;wreg free
  3508                           
  3509                           ;main.c: 449: Lcd_Set_Cursor(2, 1 + n);
  3510  000D6E  0100               	movlb	0	; () banked
  3511  000D70  29B6               	incf	start_routine@n& (0+255),w,b
  3512  000D72  6E12               	movwf	Lcd_Set_Cursor@b,c
  3513  000D74  0E02               	movlw	2
  3514  000D76  EC4C  F00D         	call	_Lcd_Set_Cursor
  3515                           
  3516                           ;main.c: 450: Lcd_Write_Char(' ');
  3517  000D7A  0E20               	movlw	32
  3518  000D7C  ECAD  F00D         	call	_Lcd_Write_Char
  3519                           
  3520                           ;main.c: 451: Lcd_Set_Cursor(2, n);
  3521  000D80  C0B6  F012         	movff	start_routine@n,Lcd_Set_Cursor@b
  3522  000D84  0E02               	movlw	2
  3523  000D86  EC4C  F00D         	call	_Lcd_Set_Cursor
  3524                           
  3525                           ;main.c: 452: n--;
  3526  000D8A  0100               	movlb	0	; () banked
  3527  000D8C  07B6               	decf	start_routine@n& (0+255),f,b
  3528                           
  3529                           ;main.c: 453: }
  3530  000D8E  D039               	goto	l4104
  3531  000D90                     l4086:
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;main.c: 454: else if ((x - '#') != 0)
  3535  000D90  0EDD               	movlw	221
  3536  000D92  6E31               	movwf	??_start_routine& (0+255),c
  3537  000D94  0EFF               	movlw	255
  3538  000D96  6E32               	movwf	(??_start_routine+1)& (0+255),c
  3539  000D98  0100               	movlb	0	; () banked
  3540  000D9A  51B5               	movf	start_routine@x& (0+255),w,b
  3541  000D9C  6E33               	movwf	(??_start_routine+2)& (0+255),c
  3542  000D9E  6A34               	clrf	(??_start_routine+3)& (0+255),c
  3543  000DA0  5031               	movf	??_start_routine,w,c
  3544  000DA2  2633               	addwf	??_start_routine+2,f,c
  3545  000DA4  5032               	movf	??_start_routine+1,w,c
  3546  000DA6  2234               	addwfc	??_start_routine+3,f,c
  3547  000DA8  5033               	movf	??_start_routine+2,w,c
  3548  000DAA  1034               	iorwf	??_start_routine+3,w,c
  3549  000DAC  B4D8               	btfsc	status,2,c
  3550  000DAE  D029               	goto	l4104
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;main.c: 455: {
  3554                           ;main.c: 456: if ((x == '*')|(n == 3))
  3555  000DB0  0E2A               	movlw	42
  3556  000DB2  0100               	movlb	0	; () banked
  3557  000DB4  19B5               	xorwf	start_routine@x& (0+255),w,b
  3558  000DB6  B4D8               	btfsc	status,2,c
  3559  000DB8  D028               	goto	l4106
  3560                           
  3561                           ; BSR set to: 0
  3562  000DBA  0E03               	movlw	3
  3563  000DBC  0100               	movlb	0	; () banked
  3564  000DBE  19B6               	xorwf	start_routine@n& (0+255),w,b
  3565  000DC0  B4D8               	btfsc	status,2,c
  3566  000DC2  D023               	goto	l4106
  3567                           
  3568                           ; BSR set to: 0
  3569                           ;main.c: 459: }
  3570                           ;main.c: 460: I2C_new_ADDR[n] = x;
  3571                           
  3572                           ; BSR set to: 0
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;main.c: 457: {
  3576                           ;main.c: 458: break;
  3577  000DC4  0100               	movlb	0	; () banked
  3578  000DC6  51B6               	movf	start_routine@n& (0+255),w,b
  3579  000DC8  0D01               	mullw	1
  3580  000DCA  0EAD               	movlw	low start_routine@I2C_new_ADDR
  3581  000DCC  24F3               	addwf	prodl,w,c
  3582  000DCE  6ED9               	movwf	fsr2l,c
  3583  000DD0  0E00               	movlw	high start_routine@I2C_new_ADDR
  3584  000DD2  20F4               	addwfc	prodh,w,c
  3585  000DD4  6EDA               	movwf	fsr2h,c
  3586  000DD6  C0B5  FFDF         	movff	start_routine@x,indf2
  3587                           
  3588                           ; BSR set to: 0
  3589                           ;main.c: 461: n++;
  3590  000DDA  0100               	movlb	0	; () banked
  3591  000DDC  2BB6               	incf	start_routine@n& (0+255),f,b
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;main.c: 462: Lcd_Set_Cursor(2, n);
  3595  000DDE  C0B6  F012         	movff	start_routine@n,Lcd_Set_Cursor@b
  3596  000DE2  0E02               	movlw	2
  3597  000DE4  EC4C  F00D         	call	_Lcd_Set_Cursor
  3598                           
  3599                           ;main.c: 463: Lcd_Write_Char(x);
  3600  000DE8  0100               	movlb	0	; () banked
  3601  000DEA  51B5               	movf	start_routine@x& (0+255),w,b
  3602  000DEC  ECAD  F00D         	call	_Lcd_Write_Char
  3603                           
  3604                           ;main.c: 464: Lcd_Write_Char('_');
  3605  000DF0  0E5F               	movlw	95
  3606  000DF2  ECAD  F00D         	call	_Lcd_Write_Char
  3607                           
  3608                           ;main.c: 465: latch_keypad(&x);
  3609  000DF6  0EB5               	movlw	low start_routine@x
  3610  000DF8  6E10               	movwf	latch_keypad@x,c
  3611  000DFA  0E00               	movlw	high start_routine@x
  3612  000DFC  6E11               	movwf	latch_keypad@x+1,c
  3613  000DFE  EC91  F00D         	call	_latch_keypad	;wreg free
  3614  000E02                     l4104:
  3615  000E02  0E02               	movlw	2
  3616  000E04  0100               	movlb	0	; () banked
  3617  000E06  65B6               	cpfsgt	start_routine@n& (0+255),b
  3618  000E08  D77B               	goto	l4062
  3619  000E0A                     l4106:
  3620                           
  3621                           ; BSR set to: 0
  3622                           ;main.c: 466: }
  3623                           ;main.c: 467: }
  3624                           ;main.c: 468: }
  3625                           ;main.c: 470: unsigned char new_I2C_address = 0;
  3626  000E0A  0E00               	movlw	0
  3627  000E0C  0100               	movlb	0	; () banked
  3628  000E0E  6FB7               	movwf	start_routine@new_I2C_address& (0+255),b
  3629                           
  3630                           ;main.c: 471: unsigned char b[3];
  3631                           ;main.c: 472: for (int i = 0; i < 3; i++)
  3632  000E10  0E00               	movlw	0
  3633  000E12  0100               	movlb	0	; () banked
  3634  000E14  6FB3               	movwf	(start_routine@i_893+1)& (0+255),b
  3635  000E16  0E00               	movlw	0
  3636  000E18  6FB2               	movwf	start_routine@i_893& (0+255),b
  3637  000E1A                     l4108:
  3638                           
  3639                           ; BSR set to: 0
  3640  000E1A  0100               	movlb	0	; () banked
  3641  000E1C  BFB3               	btfsc	(start_routine@i_893+1)& (0+255),7,b
  3642  000E1E  D008               	goto	l4112
  3643  000E20  0100               	movlb	0	; () banked
  3644  000E22  51B3               	movf	(start_routine@i_893+1)& (0+255),w,b
  3645  000E24  E11C               	bnz	l4118
  3646  000E26  0E03               	movlw	3
  3647  000E28  0100               	movlb	0	; () banked
  3648  000E2A  5DB2               	subwf	start_routine@i_893& (0+255),w,b
  3649  000E2C  B0D8               	btfsc	status,0,c
  3650  000E2E  D017               	goto	l4118
  3651  000E30                     l4112:
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;main.c: 473: b[i] = I2C_new_ADDR[i] - '0';
  3655  000E30  0EA6               	movlw	low start_routine@b
  3656  000E32  0100               	movlb	0	; () banked
  3657  000E34  25B2               	addwf	start_routine@i_893& (0+255),w,b
  3658  000E36  6ED9               	movwf	fsr2l,c
  3659  000E38  0E00               	movlw	high start_routine@b
  3660  000E3A  0100               	movlb	0	; () banked
  3661  000E3C  21B3               	addwfc	(start_routine@i_893+1)& (0+255),w,b
  3662  000E3E  6EDA               	movwf	fsr2h,c
  3663  000E40  0EAD               	movlw	low start_routine@I2C_new_ADDR
  3664  000E42  0100               	movlb	0	; () banked
  3665  000E44  25B2               	addwf	start_routine@i_893& (0+255),w,b
  3666  000E46  6EE1               	movwf	fsr1l,c
  3667  000E48  0E00               	movlw	high start_routine@I2C_new_ADDR
  3668  000E4A  0100               	movlb	0	; () banked
  3669  000E4C  21B3               	addwfc	(start_routine@i_893+1)& (0+255),w,b
  3670  000E4E  6EE2               	movwf	fsr1h,c
  3671  000E50  50E7               	movf	indf1,w,c
  3672  000E52  0FD0               	addlw	208
  3673  000E54  6EDF               	movwf	indf2,c
  3674                           
  3675                           ; BSR set to: 0
  3676  000E56  0100               	movlb	0	; () banked
  3677  000E58  4BB2               	infsnz	start_routine@i_893& (0+255),f,b
  3678  000E5A  2BB3               	incf	(start_routine@i_893+1)& (0+255),f,b
  3679  000E5C  D7DE               	goto	l4108
  3680  000E5E                     l4118:
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;main.c: 474: new_I2C_address += (100)*(I2C_new_ADDR[0] - '0');
  3684  000E5E  0100               	movlb	0	; () banked
  3685  000E60  51AD               	movf	start_routine@I2C_new_ADDR& (0+255),w,b
  3686  000E62  0FD0               	addlw	208
  3687  000E64  0D64               	mullw	100
  3688  000E66  50F3               	movf	prodl,w,c
  3689  000E68  0100               	movlb	0	; () banked
  3690  000E6A  27B7               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3691                           
  3692                           ;main.c: 475: new_I2C_address += (10)*(I2C_new_ADDR[1] - '0');
  3693  000E6C  0100               	movlb	0	; () banked
  3694  000E6E  51AE               	movf	(start_routine@I2C_new_ADDR+1)& (0+255),w,b
  3695  000E70  0FD0               	addlw	208
  3696  000E72  0D0A               	mullw	10
  3697  000E74  50F3               	movf	prodl,w,c
  3698  000E76  0100               	movlb	0	; () banked
  3699  000E78  27B7               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;main.c: 476: new_I2C_address += (1)*(I2C_new_ADDR[2] - '0');
  3703  000E7A  0100               	movlb	0	; () banked
  3704  000E7C  51AF               	movf	(start_routine@I2C_new_ADDR+2)& (0+255),w,b
  3705  000E7E  0FD0               	addlw	208
  3706  000E80  0100               	movlb	0	; () banked
  3707  000E82  27B7               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;main.c: 477: Machine_ID = new_I2C_address;
  3711  000E84  C0B7  F0D5         	movff	start_routine@new_I2C_address,_Machine_ID
  3712                           
  3713                           ; BSR set to: 0
  3714                           ;main.c: 478: new_I2C_address += 0x0F;
  3715  000E88  0E0F               	movlw	15
  3716  000E8A  0100               	movlb	0	; () banked
  3717  000E8C  27B7               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;main.c: 480: char* error_msg;
  3721                           ;main.c: 481: if ( ((b[0]==0)&&((b[1]!=0)|(b[2]!=0))) | ((b[0]==1)&&(b[1]==0)&&(b[2]==0)
      +                          ) )
  3722  000E8E  0100               	movlb	0	; () banked
  3723  000E90  51A6               	movf	start_routine@b& (0+255),w,b
  3724  000E92  0100               	movlb	0	; () banked
  3725  000E94  A4D8               	btfss	status,2,c
  3726  000E96  D008               	goto	l4132
  3727                           
  3728                           ; BSR set to: 0
  3729  000E98  0100               	movlb	0	; () banked
  3730  000E9A  51A7               	movf	(start_routine@b+1)& (0+255),w,b
  3731  000E9C  A4D8               	btfss	status,2,c
  3732  000E9E  D010               	goto	l4138
  3733                           
  3734                           ; BSR set to: 0
  3735  000EA0  0100               	movlb	0	; () banked
  3736  000EA2  51A8               	movf	(start_routine@b+2)& (0+255),w,b
  3737  000EA4  A4D8               	btfss	status,2,c
  3738  000EA6  D00C               	goto	l4138
  3739  000EA8                     l4132:
  3740                           
  3741                           ; BSR set to: 0
  3742  000EA8  0100               	movlb	0	; () banked
  3743  000EAA  05A6               	decf	start_routine@b& (0+255),w,b
  3744  000EAC  A4D8               	btfss	status,2,c
  3745  000EAE  D112               	goto	l4206
  3746                           
  3747                           ; BSR set to: 0
  3748  000EB0  0100               	movlb	0	; () banked
  3749  000EB2  51A7               	movf	(start_routine@b+1)& (0+255),w,b
  3750  000EB4  A4D8               	btfss	status,2,c
  3751  000EB6  D10E               	goto	l4206
  3752                           
  3753                           ; BSR set to: 0
  3754  000EB8  0100               	movlb	0	; () banked
  3755  000EBA  51A8               	movf	(start_routine@b+2)& (0+255),w,b
  3756  000EBC  A4D8               	btfss	status,2,c
  3757  000EBE  D10A               	goto	l4206
  3758  000EC0                     l4138:
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;main.c: 482: {
  3762                           ;main.c: 484: dh = (new_I2C_address / 100);
  3763  000EC0  C0B7  F010         	movff	start_routine@new_I2C_address,___awdiv@dividend
  3764  000EC4  6A11               	clrf	___awdiv@dividend+1,c
  3765  000EC6  0E00               	movlw	0
  3766  000EC8  6E13               	movwf	___awdiv@divisor+1,c
  3767  000ECA  0E64               	movlw	100
  3768  000ECC  6E12               	movwf	___awdiv@divisor,c
  3769  000ECE  EC0B  F00C         	call	___awdiv	;wreg free
  3770  000ED2  5010               	movf	?___awdiv,w,c
  3771  000ED4  0100               	movlb	0	; () banked
  3772  000ED6  6FB4               	movwf	start_routine@dh& (0+255),b
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;main.c: 485: dt = (new_I2C_address - dh*100) / 10;
  3776  000ED8  0100               	movlb	0	; () banked
  3777  000EDA  51B4               	movf	start_routine@dh& (0+255),w,b
  3778  000EDC  0D64               	mullw	100
  3779  000EDE  1EF3               	comf	prodl,f,c
  3780  000EE0  1EF4               	comf	prodh,f,c
  3781  000EE2  4AF3               	infsnz	prodl,f,c
  3782  000EE4  2AF4               	incf	prodh,f,c
  3783  000EE6  0100               	movlb	0	; () banked
  3784  000EE8  51B7               	movf	start_routine@new_I2C_address& (0+255),w,b
  3785  000EEA  24F3               	addwf	prodl,w,c
  3786  000EEC  6E10               	movwf	___awdiv@dividend,c
  3787  000EEE  0E00               	movlw	0
  3788  000EF0  20F4               	addwfc	prodh,w,c
  3789  000EF2  6E11               	movwf	___awdiv@dividend+1,c
  3790  000EF4  0E00               	movlw	0
  3791  000EF6  6E13               	movwf	___awdiv@divisor+1,c
  3792  000EF8  0E0A               	movlw	10
  3793  000EFA  6E12               	movwf	___awdiv@divisor,c
  3794  000EFC  EC0B  F00C         	call	___awdiv	;wreg free
  3795  000F00  5010               	movf	?___awdiv,w,c
  3796  000F02  0100               	movlb	0	; () banked
  3797  000F04  6FB1               	movwf	start_routine@dt& (0+255),b
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;main.c: 486: d1 = (new_I2C_address - (dh*100+dt*10));
  3801  000F06  0100               	movlb	0	; () banked
  3802  000F08  51B1               	movf	start_routine@dt& (0+255),w,b
  3803  000F0A  0D0A               	mullw	10
  3804  000F0C  CFF3 F031          	movff	prodl,??_start_routine
  3805  000F10  0100               	movlb	0	; () banked
  3806  000F12  51B4               	movf	start_routine@dh& (0+255),w,b
  3807  000F14  0D64               	mullw	100
  3808  000F16  50F3               	movf	prodl,w,c
  3809  000F18  2431               	addwf	??_start_routine,w,c
  3810  000F1A  0800               	sublw	0
  3811  000F1C  0100               	movlb	0	; () banked
  3812  000F1E  25B7               	addwf	start_routine@new_I2C_address& (0+255),w,b
  3813  000F20  0100               	movlb	0	; () banked
  3814  000F22  6F98               	movwf	start_routine@d1& (0+255),b
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;main.c: 488: h = new_I2C_address/16;
  3818  000F24  C0B7  F010         	movff	start_routine@new_I2C_address,___awdiv@dividend
  3819  000F28  6A11               	clrf	___awdiv@dividend+1,c
  3820  000F2A  0E00               	movlw	0
  3821  000F2C  6E13               	movwf	___awdiv@divisor+1,c
  3822  000F2E  0E10               	movlw	16
  3823  000F30  6E12               	movwf	___awdiv@divisor,c
  3824  000F32  EC0B  F00C         	call	___awdiv	;wreg free
  3825  000F36  5010               	movf	?___awdiv,w,c
  3826  000F38  0100               	movlb	0	; () banked
  3827  000F3A  6F94               	movwf	start_routine@h& (0+255),b
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;main.c: 489: l = new_I2C_address - (new_I2C_address/16)*16;
  3831  000F3C  C0B7  F010         	movff	start_routine@new_I2C_address,___awdiv@dividend
  3832  000F40  6A11               	clrf	___awdiv@dividend+1,c
  3833  000F42  0E00               	movlw	0
  3834  000F44  6E13               	movwf	___awdiv@divisor+1,c
  3835  000F46  0E10               	movlw	16
  3836  000F48  6E12               	movwf	___awdiv@divisor,c
  3837  000F4A  EC0B  F00C         	call	___awdiv	;wreg free
  3838  000F4E  3810               	swapf	?___awdiv,w,c
  3839  000F50  0BF0               	andlw	240
  3840  000F52  0800               	sublw	0
  3841  000F54  0100               	movlb	0	; () banked
  3842  000F56  25B7               	addwf	start_routine@new_I2C_address& (0+255),w,b
  3843  000F58  0100               	movlb	0	; () banked
  3844  000F5A  6F95               	movwf	start_routine@l& (0+255),b
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;main.c: 490: Lcd_Clear();
  3848  000F5C  EC1E  F00E         	call	_Lcd_Clear	;wreg free
  3849                           
  3850                           ;main.c: 491: Lcd_Set_Cursor(1,1);
  3851  000F60  0E01               	movlw	1
  3852  000F62  6E12               	movwf	Lcd_Set_Cursor@b,c
  3853  000F64  0E01               	movlw	1
  3854  000F66  EC4C  F00D         	call	_Lcd_Set_Cursor
  3855                           
  3856                           ;main.c: 492: Lcd_Write_String("New Machine ID: ");
  3857  000F6A  0E31               	movlw	low STR_19
  3858  000F6C  6E14               	movwf	Lcd_Write_String@a,c
  3859  000F6E  0E7F               	movlw	high STR_19
  3860  000F70  6E15               	movwf	Lcd_Write_String@a+1,c
  3861  000F72  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  3862                           
  3863                           ;main.c: 493: Lcd_Set_Cursor(2,1);
  3864  000F76  0E01               	movlw	1
  3865  000F78  6E12               	movwf	Lcd_Set_Cursor@b,c
  3866  000F7A  0E02               	movlw	2
  3867  000F7C  EC4C  F00D         	call	_Lcd_Set_Cursor
  3868                           
  3869                           ;main.c: 494: for (int i = 0; i < 3; i++)
  3870  000F80  0E00               	movlw	0
  3871  000F82  0100               	movlb	0	; () banked
  3872  000F84  6FAA               	movwf	(start_routine@i_896+1)& (0+255),b
  3873  000F86  0E00               	movlw	0
  3874  000F88  6FA9               	movwf	start_routine@i_896& (0+255),b
  3875  000F8A                     l4158:
  3876                           
  3877                           ; BSR set to: 0
  3878  000F8A  0100               	movlb	0	; () banked
  3879  000F8C  BFAA               	btfsc	(start_routine@i_896+1)& (0+255),7,b
  3880  000F8E  D008               	goto	l4162
  3881  000F90  0100               	movlb	0	; () banked
  3882  000F92  51AA               	movf	(start_routine@i_896+1)& (0+255),w,b
  3883  000F94  E114               	bnz	l4168
  3884  000F96  0E03               	movlw	3
  3885  000F98  0100               	movlb	0	; () banked
  3886  000F9A  5DA9               	subwf	start_routine@i_896& (0+255),w,b
  3887  000F9C  B0D8               	btfsc	status,0,c
  3888  000F9E  D00F               	goto	l4168
  3889  000FA0                     l4162:
  3890                           
  3891                           ; BSR set to: 0
  3892                           ;main.c: 495: Lcd_Write_Char(I2C_new_ADDR[i]);
  3893  000FA0  0EAD               	movlw	low start_routine@I2C_new_ADDR
  3894  000FA2  0100               	movlb	0	; () banked
  3895  000FA4  25A9               	addwf	start_routine@i_896& (0+255),w,b
  3896  000FA6  6ED9               	movwf	fsr2l,c
  3897  000FA8  0E00               	movlw	high start_routine@I2C_new_ADDR
  3898  000FAA  0100               	movlb	0	; () banked
  3899  000FAC  21AA               	addwfc	(start_routine@i_896+1)& (0+255),w,b
  3900  000FAE  6EDA               	movwf	fsr2h,c
  3901  000FB0  50DF               	movf	indf2,w,c
  3902  000FB2  ECAD  F00D         	call	_Lcd_Write_Char
  3903  000FB6  0100               	movlb	0	; () banked
  3904  000FB8  4BA9               	infsnz	start_routine@i_896& (0+255),f,b
  3905  000FBA  2BAA               	incf	(start_routine@i_896+1)& (0+255),f,b
  3906  000FBC  D7E6               	goto	l4158
  3907  000FBE                     l4168:
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;main.c: 496: Lcd_Set_Cursor(2, 7);
  3911  000FBE  0E07               	movlw	7
  3912  000FC0  6E12               	movwf	Lcd_Set_Cursor@b,c
  3913  000FC2  0E02               	movlw	2
  3914  000FC4  EC4C  F00D         	call	_Lcd_Set_Cursor
  3915                           
  3916                           ;main.c: 497: Lcd_Write_String("[OK]");
  3917  000FC8  0EF7               	movlw	low STR_22
  3918  000FCA  6E14               	movwf	Lcd_Write_String@a,c
  3919  000FCC  0E7F               	movlw	high STR_22
  3920  000FCE  6E15               	movwf	Lcd_Write_String@a+1,c
  3921  000FD0  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  3922                           
  3923                           ;main.c: 498: Lcd_Set_Cursor(2,14);
  3924  000FD4  0E0E               	movlw	14
  3925  000FD6  6E12               	movwf	Lcd_Set_Cursor@b,c
  3926  000FD8  0E02               	movlw	2
  3927  000FDA  EC4C  F00D         	call	_Lcd_Set_Cursor
  3928                           
  3929                           ;main.c: 499: Lcd_Write_String("x");
  3930  000FDE  0EFC               	movlw	low STR_23
  3931  000FE0  6E14               	movwf	Lcd_Write_String@a,c
  3932  000FE2  0E7F               	movlw	high STR_23
  3933  000FE4  6E15               	movwf	Lcd_Write_String@a+1,c
  3934  000FE6  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  3935                           
  3936                           ;main.c: 500: Lcd_Write_Char(hx[h]);
  3937  000FEA  0100               	movlb	0	; () banked
  3938  000FEC  5194               	movf	start_routine@h& (0+255),w,b
  3939  000FEE  0D01               	mullw	1
  3940  000FF0  0E20               	movlw	low _hx
  3941  000FF2  24F3               	addwf	prodl,w,c
  3942  000FF4  6ED9               	movwf	fsr2l,c
  3943  000FF6  0E01               	movlw	high _hx
  3944  000FF8  20F4               	addwfc	prodh,w,c
  3945  000FFA  6EDA               	movwf	fsr2h,c
  3946  000FFC  50DF               	movf	indf2,w,c
  3947  000FFE  ECAD  F00D         	call	_Lcd_Write_Char
  3948                           
  3949                           ;main.c: 501: Lcd_Write_Char(hx[l]);
  3950  001002  0100               	movlb	0	; () banked
  3951  001004  5195               	movf	start_routine@l& (0+255),w,b
  3952  001006  0D01               	mullw	1
  3953  001008  0E20               	movlw	low _hx
  3954  00100A  24F3               	addwf	prodl,w,c
  3955  00100C  6ED9               	movwf	fsr2l,c
  3956  00100E  0E01               	movlw	high _hx
  3957  001010  20F4               	addwfc	prodh,w,c
  3958  001012  6EDA               	movwf	fsr2h,c
  3959  001014  50DF               	movf	indf2,w,c
  3960  001016  ECAD  F00D         	call	_Lcd_Write_Char
  3961                           
  3962                           ;main.c: 502: for (int i = 0; i < 50; i++)
  3963  00101A  0E00               	movlw	0
  3964  00101C  0100               	movlb	0	; () banked
  3965  00101E  6FA1               	movwf	(start_routine@i_899+1)& (0+255),b
  3966  001020  0E00               	movlw	0
  3967  001022  6FA0               	movwf	start_routine@i_899& (0+255),b
  3968                           
  3969                           ; BSR set to: 0
  3970  001024  0100               	movlb	0	; () banked
  3971  001026  BFA1               	btfsc	(start_routine@i_899+1)& (0+255),7,b
  3972  001028  D008               	goto	l4184
  3973  00102A  0100               	movlb	0	; () banked
  3974  00102C  51A1               	movf	(start_routine@i_899+1)& (0+255),w,b
  3975  00102E  E118               	bnz	l330
  3976  001030  0E32               	movlw	50
  3977  001032  0100               	movlb	0	; () banked
  3978  001034  5DA0               	subwf	start_routine@i_899& (0+255),w,b
  3979  001036  B0D8               	btfsc	status,0,c
  3980  001038  D013               	goto	l330
  3981  00103A                     l4184:
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;main.c: 503: _delay((unsigned long)((20)*(16000000/4000.0)));
  3985  00103A  0E68               	movlw	104
  3986  00103C  6E31               	movwf	??_start_routine& (0+255),c
  3987  00103E  0EE4               	movlw	228
  3988  001040                     u4777:
  3989  001040  2EE8               	decfsz	wreg,f,c
  3990  001042  D7FE               	goto	u4777
  3991  001044  2E31               	decfsz	??_start_routine& (0+255),f,c
  3992  001046  D7FC               	goto	u4777
  3993  001048  F000 F000          	nop2	
  3994  00104C  0100               	movlb	0	; () banked
  3995  00104E  4BA0               	infsnz	start_routine@i_899& (0+255),f,b
  3996  001050  2BA1               	incf	(start_routine@i_899+1)& (0+255),f,b
  3997  001052  0100               	movlb	0	; () banked
  3998  001054  BFA1               	btfsc	(start_routine@i_899+1)& (0+255),7,b
  3999  001056  D7F1               	goto	l4184
  4000  001058  0100               	movlb	0	; () banked
  4001  00105A  51A1               	movf	(start_routine@i_899+1)& (0+255),w,b
  4002  00105C  E101               	bnz	u3940
  4003  00105E  D7E8               	goto	L3
  4004  001060                     u3940:
  4005  001060                     l330:
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;main.c: 504: I2C_ADDR = new_I2C_address;
  4009  001060  C0B7  F0D4         	movff	start_routine@new_I2C_address,_I2C_ADDR
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;main.c: 505: Eeprom_Write_Byte(EEP_I2C_ADDR, I2C_ADDR);
  4013  001064  C0D4  F010         	movff	_I2C_ADDR,Eeprom_Write_Byte@data
  4014  001068  0100               	movlb	0	; () banked
  4015  00106A  51D2               	movf	_EEP_I2C_ADDR& (0+255),w,b
  4016  00106C  EC0C  F00E         	call	_Eeprom_Write_Byte
  4017                           
  4018                           ;main.c: 506: Lcd_Clear();
  4019  001070  EC1E  F00E         	call	_Lcd_Clear	;wreg free
  4020                           
  4021                           ;main.c: 507: Lcd_Set_Cursor(1,1);
  4022  001074  0E01               	movlw	1
  4023  001076  6E12               	movwf	Lcd_Set_Cursor@b,c
  4024  001078  0E01               	movlw	1
  4025  00107A  EC4C  F00D         	call	_Lcd_Set_Cursor
  4026                           
  4027                           ;main.c: 508: Lcd_Write_String("I2C_ADDR>>EEPROM");
  4028  00107E  0E86               	movlw	low STR_24
  4029  001080  6E14               	movwf	Lcd_Write_String@a,c
  4030  001082  0E7F               	movlw	high STR_24
  4031  001084  6E15               	movwf	Lcd_Write_String@a+1,c
  4032  001086  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  4033                           
  4034                           ;main.c: 515: for (int i = 0; i < 10; i++)
  4035  00108A  0E00               	movlw	0
  4036  00108C  0100               	movlb	0	; () banked
  4037  00108E  6FA3               	movwf	(start_routine@i_902+1)& (0+255),b
  4038  001090  0E00               	movlw	0
  4039  001092  6FA2               	movwf	start_routine@i_902& (0+255),b
  4040  001094                     l4196:
  4041                           
  4042                           ; BSR set to: 0
  4043  001094  0100               	movlb	0	; () banked
  4044  001096  BFA3               	btfsc	(start_routine@i_902+1)& (0+255),7,b
  4045  001098  D008               	goto	l4200
  4046  00109A  0100               	movlb	0	; () banked
  4047  00109C  51A3               	movf	(start_routine@i_902+1)& (0+255),w,b
  4048  00109E  E112               	bnz	l4204
  4049  0010A0  0E0A               	movlw	10
  4050  0010A2  0100               	movlb	0	; () banked
  4051  0010A4  5DA2               	subwf	start_routine@i_902& (0+255),w,b
  4052  0010A6  B0D8               	btfsc	status,0,c
  4053  0010A8  D00D               	goto	l4204
  4054  0010AA                     l4200:
  4055                           
  4056                           ; BSR set to: 0
  4057                           ;main.c: 516: _delay((unsigned long)((20)*(16000000/4000.0)));
  4058  0010AA  0E68               	movlw	104
  4059  0010AC  6E31               	movwf	??_start_routine& (0+255),c
  4060  0010AE  0EE4               	movlw	228
  4061  0010B0                     u4787:
  4062  0010B0  2EE8               	decfsz	wreg,f,c
  4063  0010B2  D7FE               	goto	u4787
  4064  0010B4  2E31               	decfsz	??_start_routine& (0+255),f,c
  4065  0010B6  D7FC               	goto	u4787
  4066  0010B8  F000 F000          	nop2	
  4067  0010BC  0100               	movlb	0	; () banked
  4068  0010BE  4BA2               	infsnz	start_routine@i_902& (0+255),f,b
  4069  0010C0  2BA3               	incf	(start_routine@i_902+1)& (0+255),f,b
  4070  0010C2  D7E8               	goto	l4196
  4071  0010C4                     l4204:
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;main.c: 517: menu_progress_bar(500);
  4075  0010C4  0E01               	movlw	1
  4076  0010C6  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  4077  0010C8  0EF4               	movlw	244
  4078  0010CA  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  4079  0010CC  EC48  F00A         	call	_menu_progress_bar	;wreg free
  4080  0010D0  00FF               	reset		;# 
  4081                           
  4082                           ;main.c: 519: }
  4083  0010D2  D05C               	goto	l4240
  4084  0010D4                     l4206:
  4085                           
  4086                           ;main.c: 520: else
  4087                           ;main.c: 521: {
  4088                           ;main.c: 522: if (new_I2C_address == 0)
  4089  0010D4  0100               	movlb	0	; () banked
  4090  0010D6  51B7               	movf	start_routine@new_I2C_address& (0+255),w,b
  4091  0010D8  0100               	movlb	0	; () banked
  4092  0010DA  A4D8               	btfss	status,2,c
  4093  0010DC  D005               	goto	l4210
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;main.c: 523: error_msg = "May not be zero!";
  4097  0010DE  0E53               	movlw	low STR_25
  4098  0010E0  0100               	movlb	0	; () banked
  4099  0010E2  6F96               	movwf	start_routine@error_msg& (0+255),b
  4100  0010E4  0E7F               	movlw	high STR_25
  4101  0010E6  D004               	goto	L4
  4102  0010E8                     l4210:
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;main.c: 524: else
  4106                           ;main.c: 525: error_msg = "Out of bounds!  ";
  4107  0010E8  0EED               	movlw	low STR_26
  4108  0010EA  0100               	movlb	0	; () banked
  4109  0010EC  6F96               	movwf	start_routine@error_msg& (0+255),b
  4110  0010EE  0E7E               	movlw	high STR_26
  4111  0010F0                     L4:
  4112  0010F0  0100               	movlb	0	; () banked
  4113  0010F2  6F97               	movwf	(start_routine@error_msg+1)& (0+255),b
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;main.c: 526: Lcd_Set_Cursor(2,1);
  4117                           
  4118                           ; BSR set to: 0
  4119  0010F4  0E01               	movlw	1
  4120  0010F6  6E12               	movwf	Lcd_Set_Cursor@b,c
  4121  0010F8  0E02               	movlw	2
  4122  0010FA  EC4C  F00D         	call	_Lcd_Set_Cursor
  4123                           
  4124                           ;main.c: 527: Lcd_Write_String(error_msg);
  4125  0010FE  C096  F014         	movff	start_routine@error_msg,Lcd_Write_String@a
  4126  001102  C097  F015         	movff	start_routine@error_msg+1,Lcd_Write_String@a+1
  4127  001106  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  4128                           
  4129                           ;main.c: 528: for (int i = 0; i < 50; i++)
  4130  00110A  0E00               	movlw	0
  4131  00110C  0100               	movlb	0	; () banked
  4132  00110E  6FA5               	movwf	(start_routine@i_905+1)& (0+255),b
  4133  001110  0E00               	movlw	0
  4134  001112  6FA4               	movwf	start_routine@i_905& (0+255),b
  4135  001114                     l4218:
  4136                           
  4137                           ; BSR set to: 0
  4138  001114  0100               	movlb	0	; () banked
  4139  001116  BFA5               	btfsc	(start_routine@i_905+1)& (0+255),7,b
  4140  001118  D008               	goto	l4222
  4141  00111A  0100               	movlb	0	; () banked
  4142  00111C  51A5               	movf	(start_routine@i_905+1)& (0+255),w,b
  4143  00111E  E112               	bnz	l4226
  4144  001120  0E32               	movlw	50
  4145  001122  0100               	movlb	0	; () banked
  4146  001124  5DA4               	subwf	start_routine@i_905& (0+255),w,b
  4147  001126  B0D8               	btfsc	status,0,c
  4148  001128  D00D               	goto	l4226
  4149  00112A                     l4222:
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;main.c: 529: _delay((unsigned long)((20)*(16000000/4000.0)));
  4153  00112A  0E68               	movlw	104
  4154  00112C  6E31               	movwf	??_start_routine& (0+255),c
  4155  00112E  0EE4               	movlw	228
  4156  001130                     u4797:
  4157  001130  2EE8               	decfsz	wreg,f,c
  4158  001132  D7FE               	goto	u4797
  4159  001134  2E31               	decfsz	??_start_routine& (0+255),f,c
  4160  001136  D7FC               	goto	u4797
  4161  001138  F000 F000          	nop2	
  4162  00113C  0100               	movlb	0	; () banked
  4163  00113E  4BA4               	infsnz	start_routine@i_905& (0+255),f,b
  4164  001140  2BA5               	incf	(start_routine@i_905+1)& (0+255),f,b
  4165  001142  D7E8               	goto	l4218
  4166  001144                     l4226:
  4167                           
  4168                           ; BSR set to: 0
  4169                           ;main.c: 530: for (int i = 0; i < 3; i++)
  4170  001144  0E00               	movlw	0
  4171  001146  0100               	movlb	0	; () banked
  4172  001148  6FAC               	movwf	(start_routine@i_906+1)& (0+255),b
  4173  00114A  0E00               	movlw	0
  4174  00114C  6FAB               	movwf	start_routine@i_906& (0+255),b
  4175  00114E                     l4228:
  4176                           
  4177                           ; BSR set to: 0
  4178  00114E  0100               	movlb	0	; () banked
  4179  001150  BFAC               	btfsc	(start_routine@i_906+1)& (0+255),7,b
  4180  001152  D008               	goto	l4232
  4181  001154  0100               	movlb	0	; () banked
  4182  001156  51AC               	movf	(start_routine@i_906+1)& (0+255),w,b
  4183  001158  E113               	bnz	l4238
  4184  00115A  0E03               	movlw	3
  4185  00115C  0100               	movlb	0	; () banked
  4186  00115E  5DAB               	subwf	start_routine@i_906& (0+255),w,b
  4187  001160  B0D8               	btfsc	status,0,c
  4188  001162  D00E               	goto	l4238
  4189  001164                     l4232:
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;main.c: 531: I2C_new_ADDR[i] = '0';
  4193  001164  0EAD               	movlw	low start_routine@I2C_new_ADDR
  4194  001166  0100               	movlb	0	; () banked
  4195  001168  25AB               	addwf	start_routine@i_906& (0+255),w,b
  4196  00116A  6ED9               	movwf	fsr2l,c
  4197  00116C  0E00               	movlw	high start_routine@I2C_new_ADDR
  4198  00116E  0100               	movlb	0	; () banked
  4199  001170  21AC               	addwfc	(start_routine@i_906+1)& (0+255),w,b
  4200  001172  6EDA               	movwf	fsr2h,c
  4201  001174  0E30               	movlw	48
  4202  001176  6EDF               	movwf	indf2,c
  4203                           
  4204                           ; BSR set to: 0
  4205  001178  0100               	movlb	0	; () banked
  4206  00117A  4BAB               	infsnz	start_routine@i_906& (0+255),f,b
  4207  00117C  2BAC               	incf	(start_routine@i_906+1)& (0+255),f,b
  4208  00117E  D7E7               	goto	l4228
  4209  001180                     l4238:
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;main.c: 532: v = 0;
  4213  001180  0E00               	movlw	0
  4214  001182  0100               	movlb	0	; () banked
  4215  001184  6F99               	movwf	start_routine@v& (0+255),b
  4216                           
  4217                           ;main.c: 533: n = 0;
  4218  001186  0E00               	movlw	0
  4219  001188  0100               	movlb	0	; () banked
  4220  00118A  6FB6               	movwf	start_routine@n& (0+255),b
  4221  00118C                     l4240:
  4222  00118C  0100               	movlb	0	; () banked
  4223  00118E  0599               	decf	start_routine@v& (0+255),w,b
  4224  001190  B4D8               	btfsc	status,2,c
  4225  001192  0012               	return	
  4226  001194  D596               	goto	l4052
  4227  001196                     l4242:
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;main.c: 537: else
  4231                           ;main.c: 538: {
  4232                           ;main.c: 539: v = 1;
  4233  001196  0E01               	movlw	1
  4234  001198  0100               	movlb	0	; () banked
  4235  00119A  6F99               	movwf	start_routine@v& (0+255),b
  4236  00119C  0012               	return	
  4237  00119E                     __end_of_start_routine:
  4238                           	opt stack 0
  4239                           tblptru	equ	0xFF8
  4240                           tblptrh	equ	0xFF7
  4241                           tblptrl	equ	0xFF6
  4242                           tablat	equ	0xFF5
  4243                           prodh	equ	0xFF4
  4244                           prodl	equ	0xFF3
  4245                           postinc0	equ	0xFEE
  4246                           wreg	equ	0xFE8
  4247                           indf1	equ	0xFE7
  4248                           postdec1	equ	0xFE5
  4249                           plusw1	equ	0xFE3
  4250                           fsr1h	equ	0xFE2
  4251                           fsr1l	equ	0xFE1
  4252                           indf2	equ	0xFDF
  4253                           plusw2	equ	0xFDB
  4254                           fsr2h	equ	0xFDA
  4255                           fsr2l	equ	0xFD9
  4256                           status	equ	0xFD8
  4257                           
  4258 ;; *************** function _latch_keypad *****************
  4259 ;; Defined at:
  4260 ;;		line 283 in file "main.c"
  4261 ;; Parameters:    Size  Location     Type
  4262 ;;  x               2   15[COMRAM] PTR unsigned char 
  4263 ;;		 -> start_routine@x(1), main@x(1), 
  4264 ;; Auto vars:     Size  Location     Type
  4265 ;;		None
  4266 ;; Return value:  Size  Location     Type
  4267 ;;                  1    wreg      void 
  4268 ;; Registers used:
  4269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4270 ;; Tracked objects:
  4271 ;;		On entry : 0/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4275 ;;      Params:         2       0       0       0       0       0       0
  4276 ;;      Locals:         0       0       0       0       0       0       0
  4277 ;;      Temps:          2       0       0       0       0       0       0
  4278 ;;      Totals:         4       0       0       0       0       0       0
  4279 ;;Total ram usage:        4 bytes
  4280 ;; Hardware stack levels used:    1
  4281 ;; Hardware stack levels required when called:    2
  4282 ;; This function calls:
  4283 ;;		_read_keypad
  4284 ;; This function is called by:
  4285 ;;		_main
  4286 ;;		_start_routine
  4287 ;; This function uses a non-reentrant model
  4288 ;;
  4289                           
  4290                           	psect	text2
  4291  001B22                     __ptext2:
  4292                           	opt stack 0
  4293  001B22                     _latch_keypad:
  4294                           	opt stack 27
  4295                           
  4296                           ;main.c: 285: while (*x == read_keypad())
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;incstack = 0
  4300  001B22  D009               	goto	l3812
  4301  001B24                     l3810:
  4302                           
  4303                           ;main.c: 286: {
  4304                           ;main.c: 287: _delay((unsigned long)((20)*(16000000/4000.0)));
  4305  001B24  0E68               	movlw	104
  4306  001B26  6E12               	movwf	??_latch_keypad& (0+255),c
  4307  001B28  0EE4               	movlw	228
  4308  001B2A                     u4807:
  4309  001B2A  2EE8               	decfsz	wreg,f,c
  4310  001B2C  D7FE               	goto	u4807
  4311  001B2E  2E12               	decfsz	??_latch_keypad& (0+255),f,c
  4312  001B30  D7FC               	goto	u4807
  4313  001B32  F000 F000          	nop2	
  4314  001B36                     l3812:
  4315  001B36  C010  FFD9         	movff	latch_keypad@x,fsr2l
  4316  001B3A  C011  FFDA         	movff	latch_keypad@x+1,fsr2h
  4317  001B3E  EC74  F00B         	call	_read_keypad	;wreg free
  4318  001B42  6E13               	movwf	(??_latch_keypad+1)& (0+255),c
  4319  001B44  50DE               	movf	postinc2,w,c
  4320  001B46  1813               	xorwf	??_latch_keypad+1,w,c
  4321  001B48  B4D8               	btfsc	status,2,c
  4322  001B4A  D7EC               	goto	l3810
  4323                           
  4324                           ;main.c: 288: }
  4325                           ;main.c: 289: *x = '_';
  4326  001B4C  C010  FFD9         	movff	latch_keypad@x,fsr2l
  4327  001B50  C011  FFDA         	movff	latch_keypad@x+1,fsr2h
  4328  001B54  0E5F               	movlw	95
  4329  001B56  6EDF               	movwf	indf2,c
  4330  001B58  0012               	return		;funcret
  4331  001B5A                     __end_of_latch_keypad:
  4332                           	opt stack 0
  4333                           tblptru	equ	0xFF8
  4334                           tblptrh	equ	0xFF7
  4335                           tblptrl	equ	0xFF6
  4336                           tablat	equ	0xFF5
  4337                           prodh	equ	0xFF4
  4338                           prodl	equ	0xFF3
  4339                           postinc0	equ	0xFEE
  4340                           wreg	equ	0xFE8
  4341                           indf1	equ	0xFE7
  4342                           postdec1	equ	0xFE5
  4343                           plusw1	equ	0xFE3
  4344                           fsr1h	equ	0xFE2
  4345                           fsr1l	equ	0xFE1
  4346                           indf2	equ	0xFDF
  4347                           postinc2	equ	0xFDE
  4348                           plusw2	equ	0xFDB
  4349                           fsr2h	equ	0xFDA
  4350                           fsr2l	equ	0xFD9
  4351                           status	equ	0xFD8
  4352                           
  4353 ;; *************** function _Eeprom_Write_Byte *****************
  4354 ;; Defined at:
  4355 ;;		line 43 in file "eeprom.h"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;  address         1    wreg     unsigned char 
  4358 ;;  data            1   15[COMRAM] unsigned char 
  4359 ;; Auto vars:     Size  Location     Type
  4360 ;;  address         1   16[COMRAM] unsigned char 
  4361 ;; Return value:  Size  Location     Type
  4362 ;;                  1    wreg      void 
  4363 ;; Registers used:
  4364 ;;		wreg, status,2
  4365 ;; Tracked objects:
  4366 ;;		On entry : 0/0
  4367 ;;		On exit  : 0/0
  4368 ;;		Unchanged: 0/0
  4369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4370 ;;      Params:         1       0       0       0       0       0       0
  4371 ;;      Locals:         1       0       0       0       0       0       0
  4372 ;;      Temps:          0       0       0       0       0       0       0
  4373 ;;      Totals:         2       0       0       0       0       0       0
  4374 ;;Total ram usage:        2 bytes
  4375 ;; Hardware stack levels used:    1
  4376 ;; Hardware stack levels required when called:    1
  4377 ;; This function calls:
  4378 ;;		Nothing
  4379 ;; This function is called by:
  4380 ;;		_start_routine
  4381 ;; This function uses a non-reentrant model
  4382 ;;
  4383                           
  4384                           	psect	text3
  4385  001C18                     __ptext3:
  4386                           	opt stack 0
  4387  001C18                     _Eeprom_Write_Byte:
  4388                           	opt stack 28
  4389                           
  4390                           ;incstack = 0
  4391                           ;Eeprom_Write_Byte@address stored from wreg
  4392  001C18  6E11               	movwf	Eeprom_Write_Byte@address,c
  4393                           
  4394                           ;eeprom.h: 46: EEADR = (unsigned char)address;
  4395  001C1A  C011  FFA9         	movff	Eeprom_Write_Byte@address,4009	;volatile
  4396                           
  4397                           ;eeprom.h: 48: EEDATA = data;
  4398  001C1E  C010  FFA8         	movff	Eeprom_Write_Byte@data,4008	;volatile
  4399                           
  4400                           ;eeprom.h: 49: EECON1bits.EEPGD = 0;
  4401  001C22  9EA6               	bcf	4006,7,c	;volatile
  4402                           
  4403                           ;eeprom.h: 50: EECON1bits.CFGS = 0;
  4404  001C24  9CA6               	bcf	4006,6,c	;volatile
  4405                           
  4406                           ;eeprom.h: 51: EECON1bits.WREN = 1;
  4407  001C26  84A6               	bsf	4006,2,c	;volatile
  4408                           
  4409                           ;eeprom.h: 55: EECON2 = 0x55;
  4410  001C28  0E55               	movlw	85
  4411  001C2A  6EA7               	movwf	4007,c	;volatile
  4412                           
  4413                           ;eeprom.h: 56: EECON2 = 0xAA;
  4414  001C2C  0EAA               	movlw	170
  4415  001C2E  6EA7               	movwf	4007,c	;volatile
  4416                           
  4417                           ;eeprom.h: 57: EECON1bits.WR = 1;
  4418  001C30  82A6               	bsf	4006,1,c	;volatile
  4419  001C32                     l155:
  4420  001C32  A8A1               	btfss	4001,4,c	;volatile
  4421  001C34  D7FE               	goto	l155
  4422                           
  4423                           ;eeprom.h: 63: }
  4424                           ;eeprom.h: 65: PIR2bits.EEIF = 0;
  4425  001C36  98A1               	bcf	4001,4,c	;volatile
  4426                           
  4427                           ;eeprom.h: 66: EECON1bits.WREN = 0;
  4428  001C38  94A6               	bcf	4006,2,c	;volatile
  4429  001C3A  0012               	return		;funcret
  4430  001C3C                     __end_of_Eeprom_Write_Byte:
  4431                           	opt stack 0
  4432                           tblptru	equ	0xFF8
  4433                           tblptrh	equ	0xFF7
  4434                           tblptrl	equ	0xFF6
  4435                           tablat	equ	0xFF5
  4436                           prodh	equ	0xFF4
  4437                           prodl	equ	0xFF3
  4438                           postinc0	equ	0xFEE
  4439                           wreg	equ	0xFE8
  4440                           indf1	equ	0xFE7
  4441                           postdec1	equ	0xFE5
  4442                           plusw1	equ	0xFE3
  4443                           fsr1h	equ	0xFE2
  4444                           fsr1l	equ	0xFE1
  4445                           indf2	equ	0xFDF
  4446                           postinc2	equ	0xFDE
  4447                           plusw2	equ	0xFDB
  4448                           fsr2h	equ	0xFDA
  4449                           fsr2l	equ	0xFD9
  4450                           status	equ	0xFD8
  4451                           
  4452 ;; *************** function _running_display *****************
  4453 ;; Defined at:
  4454 ;;		line 546 in file "main.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;		None
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;  n              10    7[BANK0 ] unsigned char [10]
  4459 ;;  second          2   32[BANK0 ] int 
  4460 ;;  minute          2   24[BANK0 ] int 
  4461 ;;  hour            2    5[BANK0 ] int 
  4462 ;;  i               2   26[BANK0 ] int 
  4463 ;;  i               2   18[BANK0 ] int 
  4464 ;;  i               2   30[BANK0 ] int 
  4465 ;;  t               5    0[BANK0 ] unsigned char [5]
  4466 ;;  s               2   28[BANK0 ] int 
  4467 ;;  ms              2   22[BANK0 ] int 
  4468 ;;  n_c             1   21[BANK0 ] unsigned char 
  4469 ;;  is_leading_z    1   20[BANK0 ] unsigned char 
  4470 ;;  exit_running    1   17[BANK0 ] unsigned char 
  4471 ;; Return value:  Size  Location     Type
  4472 ;;                  1    wreg      void 
  4473 ;; Registers used:
  4474 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4475 ;; Tracked objects:
  4476 ;;		On entry : 0/0
  4477 ;;		On exit  : 0/0
  4478 ;;		Unchanged: 0/0
  4479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4480 ;;      Params:         0       0       0       0       0       0       0
  4481 ;;      Locals:         0      34       0       0       0       0       0
  4482 ;;      Temps:          3       0       0       0       0       0       0
  4483 ;;      Totals:         3      34       0       0       0       0       0
  4484 ;;Total ram usage:       37 bytes
  4485 ;; Hardware stack levels used:    1
  4486 ;; Hardware stack levels required when called:    5
  4487 ;; This function calls:
  4488 ;;		_Lcd_Clear
  4489 ;;		_Lcd_Set_Cursor
  4490 ;;		_Lcd_Write_Char
  4491 ;;		_Lcd_Write_String
  4492 ;;		___awdiv
  4493 ;;		___awmod
  4494 ;;		_menu_progress_bar
  4495 ;;		_read_keypad
  4496 ;; This function is called by:
  4497 ;;		_main
  4498 ;; This function uses a non-reentrant model
  4499 ;;
  4500                           
  4501                           	psect	text4
  4502  00119E                     __ptext4:
  4503                           	opt stack 0
  4504  00119E                     _running_display:
  4505                           	opt stack 25
  4506                           
  4507                           ;main.c: 548: unsigned char exit_running = 0x00;
  4508                           
  4509                           ;incstack = 0
  4510  00119E  0E00               	movlw	0
  4511  0011A0  0100               	movlb	0	; () banked
  4512  0011A2  6FA5               	movwf	running_display@exit_running& (0+255),b
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;main.c: 549: Lcd_Clear();
  4516  0011A4  EC1E  F00E         	call	_Lcd_Clear	;wreg free
  4517                           
  4518                           ;main.c: 550: Lcd_Set_Cursor(1,1);
  4519  0011A8  0E01               	movlw	1
  4520  0011AA  6E12               	movwf	Lcd_Set_Cursor@b,c
  4521  0011AC  0E01               	movlw	1
  4522  0011AE  EC4C  F00D         	call	_Lcd_Set_Cursor
  4523                           
  4524                           ;main.c: 551: unsigned char is_leading_zero = 1, n_c = 0;
  4525  0011B2  0E01               	movlw	1
  4526  0011B4  0100               	movlb	0	; () banked
  4527  0011B6  6FA8               	movwf	running_display@is_leading_zero& (0+255),b
  4528                           
  4529                           ; BSR set to: 0
  4530  0011B8  0E00               	movlw	0
  4531  0011BA  0100               	movlb	0	; () banked
  4532  0011BC  6FA9               	movwf	running_display@n_c& (0+255),b
  4533                           
  4534                           ; BSR set to: 0
  4535                           ;main.c: 552: for (int i = 0; i < 9; i++)
  4536  0011BE  0E00               	movlw	0
  4537  0011C0  0100               	movlb	0	; () banked
  4538  0011C2  6FB3               	movwf	(running_display@i+1)& (0+255),b
  4539  0011C4  0E00               	movlw	0
  4540  0011C6  6FB2               	movwf	running_display@i& (0+255),b
  4541  0011C8                     l4296:
  4542                           
  4543                           ; BSR set to: 0
  4544  0011C8  0100               	movlb	0	; () banked
  4545  0011CA  BFB3               	btfsc	(running_display@i+1)& (0+255),7,b
  4546  0011CC  D008               	goto	l4300
  4547  0011CE  0100               	movlb	0	; () banked
  4548  0011D0  51B3               	movf	(running_display@i+1)& (0+255),w,b
  4549  0011D2  E12A               	bnz	l4318
  4550  0011D4  0E09               	movlw	9
  4551  0011D6  0100               	movlb	0	; () banked
  4552  0011D8  5DB2               	subwf	running_display@i& (0+255),w,b
  4553  0011DA  B0D8               	btfsc	status,0,c
  4554  0011DC  D025               	goto	l4318
  4555  0011DE                     l4300:
  4556                           
  4557                           ; BSR set to: 0
  4558                           ;main.c: 553: {
  4559                           ;main.c: 554: if ((current_user[i] == '0')&&(is_leading_zero))
  4560  0011DE  0EC9               	movlw	low _current_user
  4561  0011E0  0100               	movlb	0	; () banked
  4562  0011E2  25B2               	addwf	running_display@i& (0+255),w,b
  4563  0011E4  6ED9               	movwf	fsr2l,c
  4564  0011E6  0E00               	movlw	high _current_user
  4565  0011E8  0100               	movlb	0	; () banked
  4566  0011EA  21B3               	addwfc	(running_display@i+1)& (0+255),w,b
  4567  0011EC  6EDA               	movwf	fsr2h,c
  4568  0011EE  0E30               	movlw	48
  4569  0011F0  18DE               	xorwf	postinc2,w,c
  4570  0011F2  A4D8               	btfss	status,2,c
  4571  0011F4  D005               	goto	l4308
  4572                           
  4573                           ; BSR set to: 0
  4574  0011F6  0100               	movlb	0	; () banked
  4575  0011F8  51A8               	movf	running_display@is_leading_zero& (0+255),w,b
  4576  0011FA  0100               	movlb	0	; () banked
  4577  0011FC  A4D8               	btfss	status,2,c
  4578  0011FE  D010               	goto	l4314
  4579  001200                     l4308:
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;main.c: 556: else
  4583                           ;main.c: 557: {
  4584                           ;main.c: 558: is_leading_zero = 0;
  4585  001200  0E00               	movlw	0
  4586  001202  0100               	movlb	0	; () banked
  4587  001204  6FA8               	movwf	running_display@is_leading_zero& (0+255),b
  4588                           
  4589                           ; BSR set to: 0
  4590                           ;main.c: 559: n_c++;
  4591  001206  0100               	movlb	0	; () banked
  4592  001208  2BA9               	incf	running_display@n_c& (0+255),f,b
  4593                           
  4594                           ; BSR set to: 0
  4595                           ;main.c: 560: Lcd_Write_Char(current_user[i]);
  4596  00120A  0EC9               	movlw	low _current_user
  4597  00120C  0100               	movlb	0	; () banked
  4598  00120E  25B2               	addwf	running_display@i& (0+255),w,b
  4599  001210  6ED9               	movwf	fsr2l,c
  4600  001212  0E00               	movlw	high _current_user
  4601  001214  0100               	movlb	0	; () banked
  4602  001216  21B3               	addwfc	(running_display@i+1)& (0+255),w,b
  4603  001218  6EDA               	movwf	fsr2h,c
  4604  00121A  50DF               	movf	indf2,w,c
  4605  00121C  ECAD  F00D         	call	_Lcd_Write_Char
  4606  001220                     l4314:
  4607  001220  0100               	movlb	0	; () banked
  4608  001222  4BB2               	infsnz	running_display@i& (0+255),f,b
  4609  001224  2BB3               	incf	(running_display@i+1)& (0+255),f,b
  4610  001226  D7D0               	goto	l4296
  4611  001228                     l4318:
  4612                           
  4613                           ; BSR set to: 0
  4614                           ;main.c: 561: }
  4615                           ;main.c: 562: }
  4616                           ;main.c: 563: for (int i = 0; i < 13 - n_c; i++)
  4617  001228  0E00               	movlw	0
  4618  00122A  0100               	movlb	0	; () banked
  4619  00122C  6FA7               	movwf	(running_display@i_912+1)& (0+255),b
  4620  00122E  0E00               	movlw	0
  4621  001230  6FA6               	movwf	running_display@i_912& (0+255),b
  4622  001232  D006               	goto	l4324
  4623  001234                     l4320:
  4624                           
  4625                           ; BSR set to: 0
  4626                           ;main.c: 564: Lcd_Write_Char(' ');
  4627  001234  0E20               	movlw	32
  4628  001236  ECAD  F00D         	call	_Lcd_Write_Char
  4629  00123A  0100               	movlb	0	; () banked
  4630  00123C  4BA6               	infsnz	running_display@i_912& (0+255),f,b
  4631  00123E  2BA7               	incf	(running_display@i_912+1)& (0+255),f,b
  4632  001240                     l4324:
  4633                           
  4634                           ; BSR set to: 0
  4635  001240  0100               	movlb	0	; () banked
  4636  001242  51A9               	movf	running_display@n_c& (0+255),w,b
  4637  001244  6E31               	movwf	??_running_display& (0+255),c
  4638  001246  6A32               	clrf	(??_running_display+1)& (0+255),c
  4639  001248  1E31               	comf	??_running_display,f,c
  4640  00124A  1E32               	comf	??_running_display+1,f,c
  4641  00124C  4A31               	infsnz	??_running_display,f,c
  4642  00124E  2A32               	incf	??_running_display+1,f,c
  4643  001250  0E0D               	movlw	13
  4644  001252  2631               	addwf	??_running_display,f,c
  4645  001254  0E00               	movlw	0
  4646  001256  2232               	addwfc	??_running_display+1,f,c
  4647  001258  5031               	movf	??_running_display,w,c
  4648  00125A  0100               	movlb	0	; () banked
  4649  00125C  5DA6               	subwf	running_display@i_912& (0+255),w,b
  4650  00125E  0100               	movlb	0	; () banked
  4651  001260  51A7               	movf	(running_display@i_912+1)& (0+255),w,b
  4652  001262  0A80               	xorlw	128
  4653  001264  6E33               	movwf	(??_running_display+2)& (0+255),c
  4654  001266  5032               	movf	??_running_display+1,w,c
  4655  001268  0A80               	xorlw	128
  4656  00126A  5833               	subwfb	(??_running_display+2)& (0+255),w,c
  4657  00126C  A0D8               	btfss	status,0,c
  4658  00126E  D7E2               	goto	l4320
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;main.c: 565: Lcd_Set_Cursor(2,1);
  4662                           
  4663                           ; BSR set to: 0
  4664  001270  0E01               	movlw	1
  4665  001272  6E12               	movwf	Lcd_Set_Cursor@b,c
  4666  001274  0E02               	movlw	2
  4667  001276  EC4C  F00D         	call	_Lcd_Set_Cursor
  4668                           
  4669                           ;main.c: 566: for (int i = 0; i < 16; i++)
  4670  00127A  0E00               	movlw	0
  4671  00127C  0100               	movlb	0	; () banked
  4672  00127E  6FAF               	movwf	(running_display@i_913+1)& (0+255),b
  4673  001280  0E00               	movlw	0
  4674  001282  6FAE               	movwf	running_display@i_913& (0+255),b
  4675  001284                     l4330:
  4676                           
  4677                           ; BSR set to: 0
  4678  001284  0100               	movlb	0	; () banked
  4679  001286  BFAF               	btfsc	(running_display@i_913+1)& (0+255),7,b
  4680  001288  D008               	goto	l4334
  4681  00128A  0100               	movlb	0	; () banked
  4682  00128C  51AF               	movf	(running_display@i_913+1)& (0+255),w,b
  4683  00128E  E114               	bnz	l4340
  4684  001290  0E10               	movlw	16
  4685  001292  0100               	movlb	0	; () banked
  4686  001294  5DAE               	subwf	running_display@i_913& (0+255),w,b
  4687  001296  B0D8               	btfsc	status,0,c
  4688  001298  D00F               	goto	l4340
  4689  00129A                     l4334:
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;main.c: 567: Lcd_Write_Char(logged_user[i]);
  4693  00129A  0E65               	movlw	low _logged_user
  4694  00129C  0100               	movlb	0	; () banked
  4695  00129E  25AE               	addwf	running_display@i_913& (0+255),w,b
  4696  0012A0  6ED9               	movwf	fsr2l,c
  4697  0012A2  0E01               	movlw	high _logged_user
  4698  0012A4  0100               	movlb	0	; () banked
  4699  0012A6  21AF               	addwfc	(running_display@i_913+1)& (0+255),w,b
  4700  0012A8  6EDA               	movwf	fsr2h,c
  4701  0012AA  50DF               	movf	indf2,w,c
  4702  0012AC  ECAD  F00D         	call	_Lcd_Write_Char
  4703  0012B0  0100               	movlb	0	; () banked
  4704  0012B2  4BAE               	infsnz	running_display@i_913& (0+255),f,b
  4705  0012B4  2BAF               	incf	(running_display@i_913+1)& (0+255),f,b
  4706  0012B6  D7E6               	goto	l4330
  4707  0012B8                     l4340:
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;main.c: 569: Lcd_Set_Cursor(1,12);
  4711  0012B8  0E0C               	movlw	12
  4712  0012BA  6E12               	movwf	Lcd_Set_Cursor@b,c
  4713  0012BC  0E01               	movlw	1
  4714  0012BE  EC4C  F00D         	call	_Lcd_Set_Cursor
  4715                           
  4716                           ;main.c: 570: Lcd_Write_String("00:00");
  4717  0012C2  0EEC               	movlw	low STR_27
  4718  0012C4  6E14               	movwf	Lcd_Write_String@a,c
  4719  0012C6  0E7F               	movlw	high STR_27
  4720  0012C8  6E15               	movwf	Lcd_Write_String@a+1,c
  4721  0012CA  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  4722                           
  4723                           ;main.c: 571: int s = login_timeout, ms = 0;
  4724  0012CE  C092  F0B0         	movff	_login_timeout,running_display@s
  4725  0012D2  C093  F0B1         	movff	_login_timeout+1,running_display@s+1
  4726  0012D6  0E00               	movlw	0
  4727  0012D8  0100               	movlb	0	; () banked
  4728  0012DA  6FAB               	movwf	(running_display@ms+1)& (0+255),b
  4729  0012DC  0E00               	movlw	0
  4730  0012DE  6FAA               	movwf	running_display@ms& (0+255),b
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;main.c: 572: char t[] = {'0', '0', ':', '0', '0'};
  4734  0012E0  EE20  F08A         	lfsr	2,running_display@F3742
  4735  0012E4  EE10  F094         	lfsr	1,running_display@t
  4736  0012E8  0E04               	movlw	4
  4737  0012EA                     u4161:
  4738  0012EA  CFDB FFE3          	movff	plusw2,plusw1
  4739  0012EE  06E8               	decf	wreg,f,c
  4740  0012F0  E2FC               	bc	u4161
  4741                           
  4742                           ;main.c: 573: while (read_keypad() != '#')
  4743  0012F2  D0B5               	goto	l4384
  4744  0012F4                     l4350:
  4745                           
  4746                           ;main.c: 574: {
  4747                           ;main.c: 575: if (s == 0)
  4748  0012F4  0100               	movlb	0	; () banked
  4749  0012F6  51B0               	movf	running_display@s& (0+255),w,b
  4750  0012F8  0100               	movlb	0	; () banked
  4751  0012FA  11B1               	iorwf	(running_display@s+1)& (0+255),w,b
  4752  0012FC  B4D8               	btfsc	status,2,c
  4753  0012FE  D0B4               	goto	l4386
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;main.c: 577: _delay((unsigned long)((265)*(16000000/4000000.0)));
  4757                           
  4758                           ; BSR set to: 0
  4759                           
  4760                           ; BSR set to: 0
  4761                           ;main.c: 576: break;
  4762  001300  0ED4               	movlw	212
  4763  001302                     u4817:
  4764  001302  F000 F000          	nop2	
  4765  001306  2EE8               	decfsz	wreg,f,c
  4766  001308  D7FC               	goto	u4817
  4767                           
  4768                           ;main.c: 578: ms += 1;
  4769  00130A  0100               	movlb	0	; () banked
  4770  00130C  4BAA               	infsnz	running_display@ms& (0+255),f,b
  4771  00130E  2BAB               	incf	(running_display@ms+1)& (0+255),f,b
  4772                           
  4773                           ;main.c: 579: if (ms == 1000)
  4774  001310  0EE8               	movlw	232
  4775  001312  0100               	movlb	0	; () banked
  4776  001314  19AA               	xorwf	running_display@ms& (0+255),w,b
  4777  001316  E104               	bnz	u4181
  4778  001318  0E03               	movlw	3
  4779  00131A  0100               	movlb	0	; () banked
  4780  00131C  19AB               	xorwf	(running_display@ms+1)& (0+255),w,b
  4781  00131E  A4D8               	btfss	status,2,c
  4782  001320                     u4181:
  4783  001320  D09E               	goto	l4384
  4784                           
  4785                           ; BSR set to: 0
  4786                           ;main.c: 580: {
  4787                           ;main.c: 581: s -= 1;
  4788  001322  0100               	movlb	0	; () banked
  4789  001324  07B0               	decf	running_display@s& (0+255),f,b
  4790  001326  A0D8               	btfss	status,0,c
  4791  001328  07B1               	decf	(running_display@s+1)& (0+255),f,b
  4792                           
  4793                           ; BSR set to: 0
  4794                           ;main.c: 582: ms = 0;
  4795  00132A  0E00               	movlw	0
  4796  00132C  0100               	movlb	0	; () banked
  4797  00132E  6FAB               	movwf	(running_display@ms+1)& (0+255),b
  4798  001330  0E00               	movlw	0
  4799  001332  6FAA               	movwf	running_display@ms& (0+255),b
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;main.c: 584: char n[] = {'0','1','2','3','4','5','6','7','8','9'};
  4803  001334  EE21  F030         	lfsr	2,running_display@F3745
  4804  001338  EE10  F09B         	lfsr	1,running_display@n
  4805  00133C  0E09               	movlw	9
  4806  00133E                     u4191:
  4807  00133E  CFDB FFE3          	movff	plusw2,plusw1
  4808  001342  06E8               	decf	wreg,f,c
  4809  001344  E2FC               	bc	u4191
  4810                           
  4811                           ; BSR set to: 0
  4812                           ;main.c: 585: int hour=s/3600;
  4813  001346  C0B0  F010         	movff	running_display@s,___awdiv@dividend
  4814  00134A  C0B1  F011         	movff	running_display@s+1,___awdiv@dividend+1
  4815  00134E  0E0E               	movlw	14
  4816  001350  6E13               	movwf	___awdiv@divisor+1,c
  4817  001352  0E10               	movlw	16
  4818  001354  6E12               	movwf	___awdiv@divisor,c
  4819  001356  EC0B  F00C         	call	___awdiv	;wreg free
  4820  00135A  C010  F099         	movff	?___awdiv,running_display@hour
  4821  00135E  C011  F09A         	movff	?___awdiv+1,running_display@hour+1
  4822                           
  4823                           ;main.c: 586: int second=s % 3600;
  4824  001362  C0B0  F010         	movff	running_display@s,___awmod@dividend
  4825  001366  C0B1  F011         	movff	running_display@s+1,___awmod@dividend+1
  4826  00136A  0E0E               	movlw	14
  4827  00136C  6E13               	movwf	___awmod@divisor+1,c
  4828  00136E  0E10               	movlw	16
  4829  001370  6E12               	movwf	___awmod@divisor,c
  4830  001372  ECC2  F00C         	call	___awmod	;wreg free
  4831  001376  C010  F0B4         	movff	?___awmod,running_display@second
  4832  00137A  C011  F0B5         	movff	?___awmod+1,running_display@second+1
  4833                           
  4834                           ;main.c: 587: int minute=second/60;
  4835  00137E  C0B4  F010         	movff	running_display@second,___awdiv@dividend
  4836  001382  C0B5  F011         	movff	running_display@second+1,___awdiv@dividend+1
  4837  001386  0E00               	movlw	0
  4838  001388  6E13               	movwf	___awdiv@divisor+1,c
  4839  00138A  0E3C               	movlw	60
  4840  00138C  6E12               	movwf	___awdiv@divisor,c
  4841  00138E  EC0B  F00C         	call	___awdiv	;wreg free
  4842  001392  C010  F0AC         	movff	?___awdiv,running_display@minute
  4843  001396  C011  F0AD         	movff	?___awdiv+1,running_display@minute+1
  4844                           
  4845                           ;main.c: 588: second %= 60;
  4846  00139A  C0B4  F010         	movff	running_display@second,___awmod@dividend
  4847  00139E  C0B5  F011         	movff	running_display@second+1,___awmod@dividend+1
  4848  0013A2  0E00               	movlw	0
  4849  0013A4  6E13               	movwf	___awmod@divisor+1,c
  4850  0013A6  0E3C               	movlw	60
  4851  0013A8  6E12               	movwf	___awmod@divisor,c
  4852  0013AA  ECC2  F00C         	call	___awmod	;wreg free
  4853  0013AE  C010  F0B4         	movff	?___awmod,running_display@second
  4854  0013B2  C011  F0B5         	movff	?___awmod+1,running_display@second+1
  4855                           
  4856                           ;main.c: 589: Lcd_Set_Cursor(1,12);
  4857  0013B6  0E0C               	movlw	12
  4858  0013B8  6E12               	movwf	Lcd_Set_Cursor@b,c
  4859  0013BA  0E01               	movlw	1
  4860  0013BC  EC4C  F00D         	call	_Lcd_Set_Cursor
  4861                           
  4862                           ;main.c: 590: Lcd_Write_Char(n[minute/10]);
  4863  0013C0  C0AC  F010         	movff	running_display@minute,___awdiv@dividend
  4864  0013C4  C0AD  F011         	movff	running_display@minute+1,___awdiv@dividend+1
  4865  0013C8  0E00               	movlw	0
  4866  0013CA  6E13               	movwf	___awdiv@divisor+1,c
  4867  0013CC  0E0A               	movlw	10
  4868  0013CE  6E12               	movwf	___awdiv@divisor,c
  4869  0013D0  EC0B  F00C         	call	___awdiv	;wreg free
  4870  0013D4  0E9B               	movlw	low running_display@n
  4871  0013D6  2410               	addwf	?___awdiv,w,c
  4872  0013D8  6ED9               	movwf	fsr2l,c
  4873  0013DA  0E00               	movlw	high running_display@n
  4874  0013DC  2011               	addwfc	?___awdiv+1,w,c
  4875  0013DE  6EDA               	movwf	fsr2h,c
  4876  0013E0  50DF               	movf	indf2,w,c
  4877  0013E2  ECAD  F00D         	call	_Lcd_Write_Char
  4878                           
  4879                           ;main.c: 591: Lcd_Write_Char(n[minute%10]);
  4880  0013E6  C0AC  F010         	movff	running_display@minute,___awmod@dividend
  4881  0013EA  C0AD  F011         	movff	running_display@minute+1,___awmod@dividend+1
  4882  0013EE  0E00               	movlw	0
  4883  0013F0  6E13               	movwf	___awmod@divisor+1,c
  4884  0013F2  0E0A               	movlw	10
  4885  0013F4  6E12               	movwf	___awmod@divisor,c
  4886  0013F6  ECC2  F00C         	call	___awmod	;wreg free
  4887  0013FA  0E9B               	movlw	low running_display@n
  4888  0013FC  2410               	addwf	?___awmod,w,c
  4889  0013FE  6ED9               	movwf	fsr2l,c
  4890  001400  0E00               	movlw	high running_display@n
  4891  001402  2011               	addwfc	?___awmod+1,w,c
  4892  001404  6EDA               	movwf	fsr2h,c
  4893  001406  50DF               	movf	indf2,w,c
  4894  001408  ECAD  F00D         	call	_Lcd_Write_Char
  4895                           
  4896                           ;main.c: 592: Lcd_Write_Char(':');
  4897  00140C  0E3A               	movlw	58
  4898  00140E  ECAD  F00D         	call	_Lcd_Write_Char
  4899                           
  4900                           ;main.c: 593: Lcd_Write_Char(n[second/10]);
  4901  001412  C0B4  F010         	movff	running_display@second,___awdiv@dividend
  4902  001416  C0B5  F011         	movff	running_display@second+1,___awdiv@dividend+1
  4903  00141A  0E00               	movlw	0
  4904  00141C  6E13               	movwf	___awdiv@divisor+1,c
  4905  00141E  0E0A               	movlw	10
  4906  001420  6E12               	movwf	___awdiv@divisor,c
  4907  001422  EC0B  F00C         	call	___awdiv	;wreg free
  4908  001426  0E9B               	movlw	low running_display@n
  4909  001428  2410               	addwf	?___awdiv,w,c
  4910  00142A  6ED9               	movwf	fsr2l,c
  4911  00142C  0E00               	movlw	high running_display@n
  4912  00142E  2011               	addwfc	?___awdiv+1,w,c
  4913  001430  6EDA               	movwf	fsr2h,c
  4914  001432  50DF               	movf	indf2,w,c
  4915  001434  ECAD  F00D         	call	_Lcd_Write_Char
  4916                           
  4917                           ;main.c: 594: Lcd_Write_Char(n[second%10]);
  4918  001438  C0B4  F010         	movff	running_display@second,___awmod@dividend
  4919  00143C  C0B5  F011         	movff	running_display@second+1,___awmod@dividend+1
  4920  001440  0E00               	movlw	0
  4921  001442  6E13               	movwf	___awmod@divisor+1,c
  4922  001444  0E0A               	movlw	10
  4923  001446  6E12               	movwf	___awmod@divisor,c
  4924  001448  ECC2  F00C         	call	___awmod	;wreg free
  4925  00144C  0E9B               	movlw	low running_display@n
  4926  00144E  2410               	addwf	?___awmod,w,c
  4927  001450  6ED9               	movwf	fsr2l,c
  4928  001452  0E00               	movlw	high running_display@n
  4929  001454  2011               	addwfc	?___awmod+1,w,c
  4930  001456  6EDA               	movwf	fsr2h,c
  4931  001458  50DF               	movf	indf2,w,c
  4932  00145A  ECAD  F00D         	call	_Lcd_Write_Char
  4933  00145E                     l4384:
  4934  00145E  EC74  F00B         	call	_read_keypad	;wreg free
  4935  001462  0A23               	xorlw	35
  4936  001464  A4D8               	btfss	status,2,c
  4937  001466  D746               	goto	l4350
  4938  001468                     l4386:
  4939                           
  4940                           ;main.c: 595: }
  4941                           ;main.c: 596: }
  4942                           ;main.c: 597: Lcd_Clear();
  4943  001468  EC1E  F00E         	call	_Lcd_Clear	;wreg free
  4944                           
  4945                           ;main.c: 598: Lcd_Set_Cursor(1,1);
  4946  00146C  0E01               	movlw	1
  4947  00146E  6E12               	movwf	Lcd_Set_Cursor@b,c
  4948  001470  0E01               	movlw	1
  4949  001472  EC4C  F00D         	call	_Lcd_Set_Cursor
  4950                           
  4951                           ;main.c: 599: Lcd_Write_String("Logging you out.");
  4952  001476  0E75               	movlw	low STR_28
  4953  001478  6E14               	movwf	Lcd_Write_String@a,c
  4954  00147A  0E7F               	movlw	high STR_28
  4955  00147C  6E15               	movwf	Lcd_Write_String@a+1,c
  4956  00147E  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  4957                           
  4958                           ;main.c: 600: menu_progress_bar(200);
  4959  001482  0E00               	movlw	0
  4960  001484  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  4961  001486  0EC8               	movlw	200
  4962  001488  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  4963  00148A  EC48  F00A         	call	_menu_progress_bar	;wreg free
  4964  00148E  0012               	return	
  4965  001490                     __end_of_running_display:
  4966                           	opt stack 0
  4967                           tblptru	equ	0xFF8
  4968                           tblptrh	equ	0xFF7
  4969                           tblptrl	equ	0xFF6
  4970                           tablat	equ	0xFF5
  4971                           prodh	equ	0xFF4
  4972                           prodl	equ	0xFF3
  4973                           postinc0	equ	0xFEE
  4974                           wreg	equ	0xFE8
  4975                           indf1	equ	0xFE7
  4976                           postdec1	equ	0xFE5
  4977                           plusw1	equ	0xFE3
  4978                           fsr1h	equ	0xFE2
  4979                           fsr1l	equ	0xFE1
  4980                           indf2	equ	0xFDF
  4981                           postinc2	equ	0xFDE
  4982                           plusw2	equ	0xFDB
  4983                           fsr2h	equ	0xFDA
  4984                           fsr2l	equ	0xFD9
  4985                           status	equ	0xFD8
  4986                           
  4987 ;; *************** function _read_keypad *****************
  4988 ;; Defined at:
  4989 ;;		line 260 in file "main.c"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;		None
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;		None
  4994 ;; Return value:  Size  Location     Type
  4995 ;;                  1    wreg      unsigned char 
  4996 ;; Registers used:
  4997 ;;		wreg, status,2
  4998 ;; Tracked objects:
  4999 ;;		On entry : 0/0
  5000 ;;		On exit  : 0/0
  5001 ;;		Unchanged: 0/0
  5002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5003 ;;      Params:         0       0       0       0       0       0       0
  5004 ;;      Locals:         0       0       0       0       0       0       0
  5005 ;;      Temps:          0       0       0       0       0       0       0
  5006 ;;      Totals:         0       0       0       0       0       0       0
  5007 ;;Total ram usage:        0 bytes
  5008 ;; Hardware stack levels used:    1
  5009 ;; Hardware stack levels required when called:    1
  5010 ;; This function calls:
  5011 ;;		Nothing
  5012 ;; This function is called by:
  5013 ;;		_main
  5014 ;;		_latch_keypad
  5015 ;;		_start_routine
  5016 ;;		_running_display
  5017 ;; This function uses a non-reentrant model
  5018 ;;
  5019                           
  5020                           	psect	text5
  5021  0016E8                     __ptext5:
  5022                           	opt stack 0
  5023  0016E8                     _read_keypad:
  5024                           	opt stack 28
  5025                           
  5026                           ;main.c: 262: TRISB = 0b01111000;
  5027                           
  5028                           ;incstack = 0
  5029  0016E8  0E78               	movlw	120
  5030  0016EA  6E93               	movwf	3987,c	;volatile
  5031                           
  5032                           ;main.c: 263: PORTB = 0b00000001;
  5033  0016EC  0E01               	movlw	1
  5034  0016EE  6E81               	movwf	3969,c	;volatile
  5035                           
  5036                           ;main.c: 265: if (PORTBbits.RB6) {PORTB = 0x00; return '*';}
  5037  0016F0  AC81               	btfss	3969,6,c	;volatile
  5038  0016F2  D004               	goto	l254
  5039  0016F4  0E00               	movlw	0
  5040  0016F6  6E81               	movwf	3969,c	;volatile
  5041  0016F8  0E2A               	movlw	42
  5042  0016FA  0012               	return	
  5043  0016FC                     l254:
  5044                           
  5045                           ;main.c: 266: if (PORTBbits.RB3) {PORTB = 0x00; return '1';}
  5046  0016FC  A681               	btfss	3969,3,c	;volatile
  5047  0016FE  D004               	goto	l256
  5048  001700  0E00               	movlw	0
  5049  001702  6E81               	movwf	3969,c	;volatile
  5050  001704  0E31               	movlw	49
  5051  001706  0012               	return	
  5052  001708                     l256:
  5053                           
  5054                           ;main.c: 267: if (PORTBbits.RB4) {PORTB = 0x00; return '4';}
  5055  001708  A881               	btfss	3969,4,c	;volatile
  5056  00170A  D004               	goto	l257
  5057  00170C  0E00               	movlw	0
  5058  00170E  6E81               	movwf	3969,c	;volatile
  5059  001710  0E34               	movlw	52
  5060  001712  0012               	return	
  5061  001714                     l257:
  5062                           
  5063                           ;main.c: 268: if (PORTBbits.RB5) {PORTB = 0x00; return '7';}
  5064  001714  AA81               	btfss	3969,5,c	;volatile
  5065  001716  D004               	goto	l3632
  5066  001718  0E00               	movlw	0
  5067  00171A  6E81               	movwf	3969,c	;volatile
  5068  00171C  0E37               	movlw	55
  5069  00171E  0012               	return	
  5070  001720                     l3632:
  5071                           
  5072                           ;main.c: 269: PORTB = 0b00000010;
  5073  001720  0E02               	movlw	2
  5074  001722  6E81               	movwf	3969,c	;volatile
  5075                           
  5076                           ;main.c: 271: if (PORTBbits.RB3) {PORTB = 0x00; return '2';}
  5077  001724  A681               	btfss	3969,3,c	;volatile
  5078  001726  D004               	goto	l259
  5079  001728  0E00               	movlw	0
  5080  00172A  6E81               	movwf	3969,c	;volatile
  5081  00172C  0E32               	movlw	50
  5082  00172E  0012               	return	
  5083  001730                     l259:
  5084                           
  5085                           ;main.c: 272: if (PORTBbits.RB4) {PORTB = 0x00; return '5';}
  5086  001730  A881               	btfss	3969,4,c	;volatile
  5087  001732  D004               	goto	l260
  5088  001734  0E00               	movlw	0
  5089  001736  6E81               	movwf	3969,c	;volatile
  5090  001738  0E35               	movlw	53
  5091  00173A  0012               	return	
  5092  00173C                     l260:
  5093                           
  5094                           ;main.c: 273: if (PORTBbits.RB5) {PORTB = 0x00; return '8';}
  5095  00173C  AA81               	btfss	3969,5,c	;volatile
  5096  00173E  D004               	goto	l261
  5097  001740  0E00               	movlw	0
  5098  001742  6E81               	movwf	3969,c	;volatile
  5099  001744  0E38               	movlw	56
  5100  001746  0012               	return	
  5101  001748                     l261:
  5102                           
  5103                           ;main.c: 274: if (PORTBbits.RB6) {PORTB = 0x00; return '0';}
  5104  001748  AC81               	btfss	3969,6,c	;volatile
  5105  00174A  D004               	goto	l3660
  5106  00174C  0E00               	movlw	0
  5107  00174E  6E81               	movwf	3969,c	;volatile
  5108  001750  0E30               	movlw	48
  5109  001752  0012               	return	
  5110  001754                     l3660:
  5111                           
  5112                           ;main.c: 275: PORTB = 0b00000100;
  5113  001754  0E04               	movlw	4
  5114  001756  6E81               	movwf	3969,c	;volatile
  5115                           
  5116                           ;main.c: 277: if (PORTBbits.RB3) {PORTB = 0x00; return '3';}
  5117  001758  A681               	btfss	3969,3,c	;volatile
  5118  00175A  D004               	goto	l263
  5119  00175C  0E00               	movlw	0
  5120  00175E  6E81               	movwf	3969,c	;volatile
  5121  001760  0E33               	movlw	51
  5122  001762  0012               	return	
  5123  001764                     l263:
  5124                           
  5125                           ;main.c: 278: if (PORTBbits.RB4) {PORTB = 0x00; return '6';}
  5126  001764  A881               	btfss	3969,4,c	;volatile
  5127  001766  D004               	goto	l264
  5128  001768  0E00               	movlw	0
  5129  00176A  6E81               	movwf	3969,c	;volatile
  5130  00176C  0E36               	movlw	54
  5131  00176E  0012               	return	
  5132  001770                     l264:
  5133                           
  5134                           ;main.c: 279: if (PORTBbits.RB5) {PORTB = 0x00; return '9';}
  5135  001770  AA81               	btfss	3969,5,c	;volatile
  5136  001772  D004               	goto	l265
  5137  001774  0E00               	movlw	0
  5138  001776  6E81               	movwf	3969,c	;volatile
  5139  001778  0E39               	movlw	57
  5140  00177A  0012               	return	
  5141  00177C                     l265:
  5142                           
  5143                           ;main.c: 280: if (PORTBbits.RB6) {PORTB = 0x00; return '#';}
  5144  00177C  AC81               	btfss	3969,6,c	;volatile
  5145  00177E  D004               	goto	l3688
  5146  001780  0E00               	movlw	0
  5147  001782  6E81               	movwf	3969,c	;volatile
  5148  001784  0E23               	movlw	35
  5149  001786  0012               	return	
  5150  001788                     l3688:
  5151                           
  5152                           ;main.c: 281: return '_';
  5153  001788  0E5F               	movlw	95
  5154  00178A  0012               	return	
  5155  00178C                     __end_of_read_keypad:
  5156                           	opt stack 0
  5157                           tblptru	equ	0xFF8
  5158                           tblptrh	equ	0xFF7
  5159                           tblptrl	equ	0xFF6
  5160                           tablat	equ	0xFF5
  5161                           prodh	equ	0xFF4
  5162                           prodl	equ	0xFF3
  5163                           postinc0	equ	0xFEE
  5164                           wreg	equ	0xFE8
  5165                           indf1	equ	0xFE7
  5166                           postdec1	equ	0xFE5
  5167                           plusw1	equ	0xFE3
  5168                           fsr1h	equ	0xFE2
  5169                           fsr1l	equ	0xFE1
  5170                           indf2	equ	0xFDF
  5171                           postinc2	equ	0xFDE
  5172                           plusw2	equ	0xFDB
  5173                           fsr2h	equ	0xFDA
  5174                           fsr2l	equ	0xFD9
  5175                           status	equ	0xFD8
  5176                           
  5177 ;; *************** function _menu_progress_bar *****************
  5178 ;; Defined at:
  5179 ;;		line 84 in file "menu.h"
  5180 ;; Parameters:    Size  Location     Type
  5181 ;;  load_time_ms    2   28[COMRAM] unsigned short 
  5182 ;; Auto vars:     Size  Location     Type
  5183 ;;  ii              2   38[COMRAM] int 
  5184 ;;  i               2   46[COMRAM] int 
  5185 ;;  i               2   44[COMRAM] int 
  5186 ;;  i               2   42[COMRAM] int 
  5187 ;;  i               2   40[COMRAM] int 
  5188 ;;  d               4   34[COMRAM] unsigned long 
  5189 ;; Return value:  Size  Location     Type
  5190 ;;                  1    wreg      void 
  5191 ;; Registers used:
  5192 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5193 ;; Tracked objects:
  5194 ;;		On entry : 0/0
  5195 ;;		On exit  : 0/0
  5196 ;;		Unchanged: 0/0
  5197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5198 ;;      Params:         2       0       0       0       0       0       0
  5199 ;;      Locals:        14       0       0       0       0       0       0
  5200 ;;      Temps:          4       0       0       0       0       0       0
  5201 ;;      Totals:        20       0       0       0       0       0       0
  5202 ;;Total ram usage:       20 bytes
  5203 ;; Hardware stack levels used:    1
  5204 ;; Hardware stack levels required when called:    4
  5205 ;; This function calls:
  5206 ;;		_Lcd_Clear
  5207 ;;		_Lcd_Set_Cursor
  5208 ;;		_Lcd_Write_Char
  5209 ;;		_Lcd_Write_String
  5210 ;;		___lwdiv
  5211 ;;		___wmul
  5212 ;; This function is called by:
  5213 ;;		_main
  5214 ;;		_start_routine
  5215 ;;		_running_display
  5216 ;; This function uses a non-reentrant model
  5217 ;;
  5218                           
  5219                           	psect	text6
  5220  001490                     __ptext6:
  5221                           	opt stack 0
  5222  001490                     _menu_progress_bar:
  5223                           	opt stack 25
  5224                           
  5225                           ;menu.h: 86: Lcd_Set_Cursor(2,1);
  5226                           
  5227                           ;incstack = 0
  5228  001490  0E01               	movlw	1
  5229  001492  6E12               	movwf	Lcd_Set_Cursor@b,c
  5230  001494  0E02               	movlw	2
  5231  001496  EC4C  F00D         	call	_Lcd_Set_Cursor
  5232                           
  5233                           ;menu.h: 87: unsigned long d = (((load_time_ms/16)/20)*20);
  5234  00149A  0E00               	movlw	0
  5235  00149C  6E13               	movwf	___lwdiv@divisor+1,c
  5236  00149E  0E14               	movlw	20
  5237  0014A0  6E12               	movwf	___lwdiv@divisor,c
  5238  0014A2  C01D  F01F         	movff	menu_progress_bar@load_time_ms,??_menu_progress_bar
  5239  0014A6  C01E  F020         	movff	menu_progress_bar@load_time_ms+1,??_menu_progress_bar+1
  5240  0014AA  0E04               	movlw	4
  5241  0014AC  6E21               	movwf	(??_menu_progress_bar+2)& (0+255),c
  5242  0014AE                     u3435:
  5243  0014AE  90D8               	bcf	status,0,c
  5244  0014B0  3220               	rrcf	??_menu_progress_bar+1,f,c
  5245  0014B2  321F               	rrcf	??_menu_progress_bar,f,c
  5246  0014B4  2E21               	decfsz	(??_menu_progress_bar+2)& (0+255),f,c
  5247  0014B6  D7FB               	goto	u3435
  5248  0014B8  C01F  F010         	movff	??_menu_progress_bar,___lwdiv@dividend
  5249  0014BC  C020  F011         	movff	??_menu_progress_bar+1,___lwdiv@dividend+1
  5250  0014C0  ECFA  F00C         	call	___lwdiv	;wreg free
  5251  0014C4  C010  F017         	movff	?___lwdiv,___wmul@multiplier
  5252  0014C8  C011  F018         	movff	?___lwdiv+1,___wmul@multiplier+1
  5253  0014CC  0E00               	movlw	0
  5254  0014CE  6E1A               	movwf	___wmul@multiplicand+1,c
  5255  0014D0  0E14               	movlw	20
  5256  0014D2  6E19               	movwf	___wmul@multiplicand,c
  5257  0014D4  ECF9  F00D         	call	___wmul	;wreg free
  5258  0014D8  C017  F023         	movff	?___wmul,menu_progress_bar@d
  5259  0014DC  C018  F024         	movff	?___wmul+1,menu_progress_bar@d+1
  5260  0014E0  6A25               	clrf	menu_progress_bar@d+2,c
  5261  0014E2  6A26               	clrf	menu_progress_bar@d+3,c
  5262                           
  5263                           ;menu.h: 88: for (int i = 0; i < 16; i++)
  5264  0014E4  0E00               	movlw	0
  5265  0014E6  6E2A               	movwf	menu_progress_bar@i+1,c
  5266  0014E8  0E00               	movlw	0
  5267  0014EA  6E29               	movwf	menu_progress_bar@i,c
  5268  0014EC                     l3726:
  5269  0014EC  BE2A               	btfsc	menu_progress_bar@i+1,7,c
  5270  0014EE  D006               	goto	l3730
  5271  0014F0  502A               	movf	menu_progress_bar@i+1,w,c
  5272  0014F2  E12F               	bnz	l3744
  5273  0014F4  0E10               	movlw	16
  5274  0014F6  5C29               	subwf	menu_progress_bar@i,w,c
  5275  0014F8  B0D8               	btfsc	status,0,c
  5276  0014FA  D02B               	goto	l3744
  5277  0014FC                     l3730:
  5278                           
  5279                           ;menu.h: 89: {
  5280                           ;menu.h: 90: Lcd_Write_Char(0xFF);
  5281  0014FC  0EFF               	movlw	255
  5282  0014FE  ECAD  F00D         	call	_Lcd_Write_Char
  5283                           
  5284                           ;menu.h: 91: for (int ii = 0; ii < d; ii+=20)
  5285  001502  0E00               	movlw	0
  5286  001504  6E28               	movwf	menu_progress_bar@ii+1,c
  5287  001506  0E00               	movlw	0
  5288  001508  6E27               	movwf	menu_progress_bar@ii,c
  5289  00150A  D00D               	goto	l3738
  5290  00150C                     l3734:
  5291                           
  5292                           ;menu.h: 92: _delay((unsigned long)((20)*(16000000/4000.0)));
  5293  00150C  0E68               	movlw	104
  5294  00150E  6E1F               	movwf	??_menu_progress_bar& (0+255),c
  5295  001510  0EE4               	movlw	228
  5296  001512                     u4827:
  5297  001512  2EE8               	decfsz	wreg,f,c
  5298  001514  D7FE               	goto	u4827
  5299  001516  2E1F               	decfsz	??_menu_progress_bar& (0+255),f,c
  5300  001518  D7FC               	goto	u4827
  5301  00151A  F000 F000          	nop2	
  5302  00151E  0E14               	movlw	20
  5303  001520  2627               	addwf	menu_progress_bar@ii,f,c
  5304  001522  0E00               	movlw	0
  5305  001524  2228               	addwfc	menu_progress_bar@ii+1,f,c
  5306  001526                     l3738:
  5307  001526  C027  F01F         	movff	menu_progress_bar@ii,??_menu_progress_bar
  5308  00152A  C028  F020         	movff	menu_progress_bar@ii+1,??_menu_progress_bar+1
  5309  00152E  0E00               	movlw	0
  5310  001530  BE20               	btfsc	(??_menu_progress_bar+1)& (0+255),7,c
  5311  001532  0EFF               	movlw	255
  5312  001534  6E21               	movwf	(??_menu_progress_bar+2)& (0+255),c
  5313  001536  6E22               	movwf	(??_menu_progress_bar+3)& (0+255),c
  5314  001538  5023               	movf	menu_progress_bar@d,w,c
  5315  00153A  5C1F               	subwf	??_menu_progress_bar,w,c
  5316  00153C  5024               	movf	menu_progress_bar@d+1,w,c
  5317  00153E  5820               	subwfb	??_menu_progress_bar+1,w,c
  5318  001540  5025               	movf	menu_progress_bar@d+2,w,c
  5319  001542  5821               	subwfb	??_menu_progress_bar+2,w,c
  5320  001544  5026               	movf	menu_progress_bar@d+3,w,c
  5321  001546  5822               	subwfb	??_menu_progress_bar+3,w,c
  5322  001548  A0D8               	btfss	status,0,c
  5323  00154A  D7E0               	goto	l3734
  5324  00154C  4A29               	infsnz	menu_progress_bar@i,f,c
  5325  00154E  2A2A               	incf	menu_progress_bar@i+1,f,c
  5326  001550  D7CD               	goto	l3726
  5327  001552                     l3744:
  5328                           
  5329                           ;menu.h: 93: }
  5330                           ;menu.h: 94: Lcd_Set_Cursor(2,1);
  5331  001552  0E01               	movlw	1
  5332  001554  6E12               	movwf	Lcd_Set_Cursor@b,c
  5333  001556  0E02               	movlw	2
  5334  001558  EC4C  F00D         	call	_Lcd_Set_Cursor
  5335                           
  5336                           ;menu.h: 95: Lcd_Write_String("                ");
  5337  00155C  0EA9               	movlw	low STR_2
  5338  00155E  6E14               	movwf	Lcd_Write_String@a,c
  5339  001560  0E7E               	movlw	high STR_2
  5340  001562  6E15               	movwf	Lcd_Write_String@a+1,c
  5341  001564  EC89  F00C         	call	_Lcd_Write_String	;wreg free
  5342                           
  5343                           ;menu.h: 96: for (int i = 0; i < 5; i++)
  5344  001568  0E00               	movlw	0
  5345  00156A  6E2C               	movwf	menu_progress_bar@i_726+1,c
  5346  00156C  0E00               	movlw	0
  5347  00156E  6E2B               	movwf	menu_progress_bar@i_726,c
  5348  001570                     l3750:
  5349  001570  BE2C               	btfsc	menu_progress_bar@i_726+1,7,c
  5350  001572  D006               	goto	l3754
  5351  001574  502C               	movf	menu_progress_bar@i_726+1,w,c
  5352  001576  E110               	bnz	l3758
  5353  001578  0E05               	movlw	5
  5354  00157A  5C2B               	subwf	menu_progress_bar@i_726,w,c
  5355  00157C  B0D8               	btfsc	status,0,c
  5356  00157E  D00C               	goto	l3758
  5357  001580                     l3754:
  5358                           
  5359                           ;menu.h: 97: {
  5360                           ;menu.h: 98: _delay((unsigned long)((20)*(16000000/4000.0)));
  5361  001580  0E68               	movlw	104
  5362  001582  6E1F               	movwf	??_menu_progress_bar& (0+255),c
  5363  001584  0EE4               	movlw	228
  5364  001586                     u4837:
  5365  001586  2EE8               	decfsz	wreg,f,c
  5366  001588  D7FE               	goto	u4837
  5367  00158A  2E1F               	decfsz	??_menu_progress_bar& (0+255),f,c
  5368  00158C  D7FC               	goto	u4837
  5369  00158E  F000 F000          	nop2	
  5370  001592  4A2B               	infsnz	menu_progress_bar@i_726,f,c
  5371  001594  2A2C               	incf	menu_progress_bar@i_726+1,f,c
  5372  001596  D7EC               	goto	l3750
  5373  001598                     l3758:
  5374                           
  5375                           ;menu.h: 99: }
  5376                           ;menu.h: 100: Lcd_Set_Cursor(2,1);
  5377  001598  0E01               	movlw	1
  5378  00159A  6E12               	movwf	Lcd_Set_Cursor@b,c
  5379  00159C  0E02               	movlw	2
  5380  00159E  EC4C  F00D         	call	_Lcd_Set_Cursor
  5381                           
  5382                           ;menu.h: 101: for (int i = 0; i < 16; i++)
  5383  0015A2  0E00               	movlw	0
  5384  0015A4  6E2E               	movwf	menu_progress_bar@i_727+1,c
  5385  0015A6  0E00               	movlw	0
  5386  0015A8  6E2D               	movwf	menu_progress_bar@i_727,c
  5387  0015AA                     l3762:
  5388  0015AA  BE2E               	btfsc	menu_progress_bar@i_727+1,7,c
  5389  0015AC  D006               	goto	l3766
  5390  0015AE  502E               	movf	menu_progress_bar@i_727+1,w,c
  5391  0015B0  E10A               	bnz	l3772
  5392  0015B2  0E10               	movlw	16
  5393  0015B4  5C2D               	subwf	menu_progress_bar@i_727,w,c
  5394  0015B6  B0D8               	btfsc	status,0,c
  5395  0015B8  D006               	goto	l3772
  5396  0015BA                     l3766:
  5397                           
  5398                           ;menu.h: 102: {
  5399                           ;menu.h: 103: Lcd_Write_Char(0xFF);
  5400  0015BA  0EFF               	movlw	255
  5401  0015BC  ECAD  F00D         	call	_Lcd_Write_Char
  5402  0015C0  4A2D               	infsnz	menu_progress_bar@i_727,f,c
  5403  0015C2  2A2E               	incf	menu_progress_bar@i_727+1,f,c
  5404  0015C4  D7F2               	goto	l3762
  5405  0015C6                     l3772:
  5406                           
  5407                           ;menu.h: 104: }
  5408                           ;menu.h: 105: for (int i = 0; i < 5; i++)
  5409  0015C6  0E00               	movlw	0
  5410  0015C8  6E30               	movwf	menu_progress_bar@i_728+1,c
  5411  0015CA  0E00               	movlw	0
  5412  0015CC  6E2F               	movwf	menu_progress_bar@i_728,c
  5413  0015CE                     l3774:
  5414  0015CE  BE30               	btfsc	menu_progress_bar@i_728+1,7,c
  5415  0015D0  D006               	goto	l3778
  5416  0015D2  5030               	movf	menu_progress_bar@i_728+1,w,c
  5417  0015D4  E110               	bnz	l3782
  5418  0015D6  0E05               	movlw	5
  5419  0015D8  5C2F               	subwf	menu_progress_bar@i_728,w,c
  5420  0015DA  B0D8               	btfsc	status,0,c
  5421  0015DC  D00C               	goto	l3782
  5422  0015DE                     l3778:
  5423                           
  5424                           ;menu.h: 106: {
  5425                           ;menu.h: 107: _delay((unsigned long)((20)*(16000000/4000.0)));
  5426  0015DE  0E68               	movlw	104
  5427  0015E0  6E1F               	movwf	??_menu_progress_bar& (0+255),c
  5428  0015E2  0EE4               	movlw	228
  5429  0015E4                     u4847:
  5430  0015E4  2EE8               	decfsz	wreg,f,c
  5431  0015E6  D7FE               	goto	u4847
  5432  0015E8  2E1F               	decfsz	??_menu_progress_bar& (0+255),f,c
  5433  0015EA  D7FC               	goto	u4847
  5434  0015EC  F000 F000          	nop2	
  5435  0015F0  4A2F               	infsnz	menu_progress_bar@i_728,f,c
  5436  0015F2  2A30               	incf	menu_progress_bar@i_728+1,f,c
  5437  0015F4  D7EC               	goto	l3774
  5438  0015F6                     l3782:
  5439                           
  5440                           ;menu.h: 108: }
  5441                           ;menu.h: 109: Lcd_Clear();
  5442  0015F6  EC1E  F00E         	call	_Lcd_Clear	;wreg free
  5443  0015FA  0012               	return		;funcret
  5444  0015FC                     __end_of_menu_progress_bar:
  5445                           	opt stack 0
  5446                           tblptru	equ	0xFF8
  5447                           tblptrh	equ	0xFF7
  5448                           tblptrl	equ	0xFF6
  5449                           tablat	equ	0xFF5
  5450                           prodh	equ	0xFF4
  5451                           prodl	equ	0xFF3
  5452                           postinc0	equ	0xFEE
  5453                           wreg	equ	0xFE8
  5454                           indf1	equ	0xFE7
  5455                           postdec1	equ	0xFE5
  5456                           plusw1	equ	0xFE3
  5457                           fsr1h	equ	0xFE2
  5458                           fsr1l	equ	0xFE1
  5459                           indf2	equ	0xFDF
  5460                           postinc2	equ	0xFDE
  5461                           plusw2	equ	0xFDB
  5462                           fsr2h	equ	0xFDA
  5463                           fsr2l	equ	0xFD9
  5464                           status	equ	0xFD8
  5465                           
  5466 ;; *************** function ___wmul *****************
  5467 ;; Defined at:
  5468 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;  multiplier      2   22[COMRAM] unsigned int 
  5471 ;;  multiplicand    2   24[COMRAM] unsigned int 
  5472 ;; Auto vars:     Size  Location     Type
  5473 ;;  product         2   26[COMRAM] unsigned int 
  5474 ;; Return value:  Size  Location     Type
  5475 ;;                  2   22[COMRAM] unsigned int 
  5476 ;; Registers used:
  5477 ;;		wreg, status,2, status,0, prodl, prodh
  5478 ;; Tracked objects:
  5479 ;;		On entry : 0/0
  5480 ;;		On exit  : 0/0
  5481 ;;		Unchanged: 0/0
  5482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5483 ;;      Params:         4       0       0       0       0       0       0
  5484 ;;      Locals:         2       0       0       0       0       0       0
  5485 ;;      Temps:          0       0       0       0       0       0       0
  5486 ;;      Totals:         6       0       0       0       0       0       0
  5487 ;;Total ram usage:        6 bytes
  5488 ;; Hardware stack levels used:    1
  5489 ;; Hardware stack levels required when called:    1
  5490 ;; This function calls:
  5491 ;;		Nothing
  5492 ;; This function is called by:
  5493 ;;		_menu_progress_bar
  5494 ;;		_menu_seconds_to_mmss
  5495 ;; This function uses a non-reentrant model
  5496 ;;
  5497                           
  5498                           	psect	text7
  5499  001BF2                     __ptext7:
  5500                           	opt stack 0
  5501  001BF2                     ___wmul:
  5502                           	opt stack 27
  5503                           
  5504                           ;incstack = 0
  5505  001BF2  5017               	movf	___wmul@multiplier,w,c
  5506  001BF4  0219               	mulwf	___wmul@multiplicand,c
  5507  001BF6  CFF3 F01B          	movff	prodl,___wmul@product
  5508  001BFA  CFF4 F01C          	movff	prodh,___wmul@product+1
  5509  001BFE  5017               	movf	___wmul@multiplier,w,c
  5510  001C00  021A               	mulwf	___wmul@multiplicand+1,c
  5511  001C02  50F3               	movf	prodl,w,c
  5512  001C04  261C               	addwf	___wmul@product+1,f,c
  5513  001C06  5018               	movf	___wmul@multiplier+1,w,c
  5514  001C08  0219               	mulwf	___wmul@multiplicand,c
  5515  001C0A  50F3               	movf	prodl,w,c
  5516  001C0C  261C               	addwf	___wmul@product+1,f,c
  5517  001C0E  C01B  F017         	movff	___wmul@product,?___wmul
  5518  001C12  C01C  F018         	movff	___wmul@product+1,?___wmul+1
  5519  001C16  0012               	return	
  5520  001C18                     __end_of___wmul:
  5521                           	opt stack 0
  5522                           tblptru	equ	0xFF8
  5523                           tblptrh	equ	0xFF7
  5524                           tblptrl	equ	0xFF6
  5525                           tablat	equ	0xFF5
  5526                           prodh	equ	0xFF4
  5527                           prodl	equ	0xFF3
  5528                           postinc0	equ	0xFEE
  5529                           wreg	equ	0xFE8
  5530                           indf1	equ	0xFE7
  5531                           postdec1	equ	0xFE5
  5532                           plusw1	equ	0xFE3
  5533                           fsr1h	equ	0xFE2
  5534                           fsr1l	equ	0xFE1
  5535                           indf2	equ	0xFDF
  5536                           postinc2	equ	0xFDE
  5537                           plusw2	equ	0xFDB
  5538                           fsr2h	equ	0xFDA
  5539                           fsr2l	equ	0xFD9
  5540                           status	equ	0xFD8
  5541                           
  5542 ;; *************** function ___lwdiv *****************
  5543 ;; Defined at:
  5544 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  5545 ;; Parameters:    Size  Location     Type
  5546 ;;  dividend        2   15[COMRAM] unsigned int 
  5547 ;;  divisor         2   17[COMRAM] unsigned int 
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;  quotient        2   20[COMRAM] unsigned int 
  5550 ;;  counter         1   19[COMRAM] unsigned char 
  5551 ;; Return value:  Size  Location     Type
  5552 ;;                  2   15[COMRAM] unsigned int 
  5553 ;; Registers used:
  5554 ;;		wreg, status,2, status,0
  5555 ;; Tracked objects:
  5556 ;;		On entry : 0/0
  5557 ;;		On exit  : 0/0
  5558 ;;		Unchanged: 0/0
  5559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5560 ;;      Params:         4       0       0       0       0       0       0
  5561 ;;      Locals:         3       0       0       0       0       0       0
  5562 ;;      Temps:          0       0       0       0       0       0       0
  5563 ;;      Totals:         7       0       0       0       0       0       0
  5564 ;;Total ram usage:        7 bytes
  5565 ;; Hardware stack levels used:    1
  5566 ;; Hardware stack levels required when called:    1
  5567 ;; This function calls:
  5568 ;;		Nothing
  5569 ;; This function is called by:
  5570 ;;		_menu_progress_bar
  5571 ;;		_menu_seconds_to_mmss
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           	psect	text8
  5576  0019F4                     __ptext8:
  5577                           	opt stack 0
  5578  0019F4                     ___lwdiv:
  5579                           	opt stack 27
  5580                           
  5581                           ;incstack = 0
  5582  0019F4  0E00               	movlw	0
  5583  0019F6  6E16               	movwf	___lwdiv@quotient+1,c
  5584  0019F8  0E00               	movlw	0
  5585  0019FA  6E15               	movwf	___lwdiv@quotient,c
  5586  0019FC  5012               	movf	___lwdiv@divisor,w,c
  5587  0019FE  1013               	iorwf	___lwdiv@divisor+1,w,c
  5588  001A00  B4D8               	btfsc	status,2,c
  5589  001A02  D01C               	goto	l767
  5590  001A04  0E01               	movlw	1
  5591  001A06  6E14               	movwf	___lwdiv@counter,c
  5592  001A08  D004               	goto	l3706
  5593  001A0A                     l3704:
  5594  001A0A  90D8               	bcf	status,0,c
  5595  001A0C  3612               	rlcf	___lwdiv@divisor,f,c
  5596  001A0E  3613               	rlcf	___lwdiv@divisor+1,f,c
  5597  001A10  2A14               	incf	___lwdiv@counter,f,c
  5598  001A12                     l3706:
  5599  001A12  AE13               	btfss	___lwdiv@divisor+1,7,c
  5600  001A14  D7FA               	goto	l3704
  5601  001A16                     l3708:
  5602  001A16  90D8               	bcf	status,0,c
  5603  001A18  3615               	rlcf	___lwdiv@quotient,f,c
  5604  001A1A  3616               	rlcf	___lwdiv@quotient+1,f,c
  5605  001A1C  5012               	movf	___lwdiv@divisor,w,c
  5606  001A1E  5C10               	subwf	___lwdiv@dividend,w,c
  5607  001A20  5013               	movf	___lwdiv@divisor+1,w,c
  5608  001A22  5811               	subwfb	___lwdiv@dividend+1,w,c
  5609  001A24  A0D8               	btfss	status,0,c
  5610  001A26  D005               	goto	l3716
  5611  001A28  5012               	movf	___lwdiv@divisor,w,c
  5612  001A2A  5E10               	subwf	___lwdiv@dividend,f,c
  5613  001A2C  5013               	movf	___lwdiv@divisor+1,w,c
  5614  001A2E  5A11               	subwfb	___lwdiv@dividend+1,f,c
  5615  001A30  8015               	bsf	___lwdiv@quotient,0,c
  5616  001A32                     l3716:
  5617  001A32  90D8               	bcf	status,0,c
  5618  001A34  3213               	rrcf	___lwdiv@divisor+1,f,c
  5619  001A36  3212               	rrcf	___lwdiv@divisor,f,c
  5620  001A38  2E14               	decfsz	___lwdiv@counter,f,c
  5621  001A3A  D7ED               	goto	l3708
  5622  001A3C                     l767:
  5623  001A3C  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
  5624  001A40  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5625  001A44  0012               	return		;funcret
  5626  001A46                     __end_of___lwdiv:
  5627                           	opt stack 0
  5628                           tblptru	equ	0xFF8
  5629                           tblptrh	equ	0xFF7
  5630                           tblptrl	equ	0xFF6
  5631                           tablat	equ	0xFF5
  5632                           prodh	equ	0xFF4
  5633                           prodl	equ	0xFF3
  5634                           postinc0	equ	0xFEE
  5635                           wreg	equ	0xFE8
  5636                           indf1	equ	0xFE7
  5637                           postdec1	equ	0xFE5
  5638                           plusw1	equ	0xFE3
  5639                           fsr1h	equ	0xFE2
  5640                           fsr1l	equ	0xFE1
  5641                           indf2	equ	0xFDF
  5642                           postinc2	equ	0xFDE
  5643                           plusw2	equ	0xFDB
  5644                           fsr2h	equ	0xFDA
  5645                           fsr2l	equ	0xFD9
  5646                           status	equ	0xFD8
  5647                           
  5648 ;; *************** function _Lcd_Write_String *****************
  5649 ;; Defined at:
  5650 ;;		line 111 in file "lcd.h"
  5651 ;; Parameters:    Size  Location     Type
  5652 ;;  a               2   19[COMRAM] PTR unsigned char 
  5653 ;;		 -> STR_28(17), STR_27(6), STR_26(17), STR_25(17), 
  5654 ;;		 -> STR_24(17), STR_23(2), STR_22(5), STR_21(17), 
  5655 ;;		 -> STR_20(17), STR_19(17), STR_18(17), STR_17(17), 
  5656 ;;		 -> STR_16(11), STR_15(6), STR_14(5), STR_13(17), 
  5657 ;;		 -> STR_12(17), STR_11(17), STR_10(17), STR_9(17), 
  5658 ;;		 -> STR_8(17), STR_7(17), STR_6(17), STR_5(17), 
  5659 ;;		 -> STR_4(17), STR_3(17), STR_2(17), STR_1(2), 
  5660 ;;		 -> RAM(1535), 
  5661 ;; Auto vars:     Size  Location     Type
  5662 ;;  i               2   23[COMRAM] int 
  5663 ;; Return value:  Size  Location     Type
  5664 ;;                  1    wreg      void 
  5665 ;; Registers used:
  5666 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5667 ;; Tracked objects:
  5668 ;;		On entry : 0/0
  5669 ;;		On exit  : 0/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5672 ;;      Params:         2       0       0       0       0       0       0
  5673 ;;      Locals:         2       0       0       0       0       0       0
  5674 ;;      Temps:          2       0       0       0       0       0       0
  5675 ;;      Totals:         6       0       0       0       0       0       0
  5676 ;;Total ram usage:        6 bytes
  5677 ;; Hardware stack levels used:    1
  5678 ;; Hardware stack levels required when called:    3
  5679 ;; This function calls:
  5680 ;;		_Lcd_Write_Char
  5681 ;; This function is called by:
  5682 ;;		_menu_progress_bar
  5683 ;;		_main
  5684 ;;		_start_routine
  5685 ;;		_running_display
  5686 ;;		_menu_animation_i2c
  5687 ;; This function uses a non-reentrant model
  5688 ;;
  5689                           
  5690                           	psect	text9
  5691  001912                     __ptext9:
  5692                           	opt stack 0
  5693  001912                     _Lcd_Write_String:
  5694                           	opt stack 25
  5695                           
  5696                           ;lcd.h: 113: int i;
  5697                           ;lcd.h: 114: for(i=0;a[i]!='\0';i++)
  5698                           
  5699                           ;incstack = 0
  5700  001912  0E00               	movlw	0
  5701  001914  6E19               	movwf	Lcd_Write_String@i+1,c
  5702  001916  0E00               	movlw	0
  5703  001918  6E18               	movwf	Lcd_Write_String@i,c
  5704  00191A  D01A               	goto	l3602
  5705  00191C                     l3598:
  5706                           
  5707                           ;lcd.h: 115: Lcd_Write_Char(a[i]);
  5708  00191C  5018               	movf	Lcd_Write_String@i,w,c
  5709  00191E  2414               	addwf	Lcd_Write_String@a,w,c
  5710  001920  6E16               	movwf	??_Lcd_Write_String& (0+255),c
  5711  001922  5019               	movf	Lcd_Write_String@i+1,w,c
  5712  001924  2015               	addwfc	Lcd_Write_String@a+1,w,c
  5713  001926  6E17               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  5714  001928  C016  FFF6         	movff	??_Lcd_Write_String,tblptrl
  5715  00192C  C017  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  5716  001930  6AF8               	clrf	tblptru,c
  5717  001932  0E05               	movlw	(high __ramtop+-1)
  5718  001934  64F7               	cpfsgt	tblptrh,c
  5719  001936  D003               	bra	u3257
  5720  001938  0008               	tblrd		*
  5721  00193A  50F5               	movf	tablat,w,c
  5722  00193C  D005               	bra	u3250
  5723  00193E                     u3257:
  5724  00193E  CFF6 FFE9          	movff	tblptrl,fsr0l
  5725  001942  CFF7 FFEA          	movff	tblptrh,fsr0h
  5726  001946  50EF               	movf	indf0,w,c
  5727  001948                     u3250:
  5728  001948  ECAD  F00D         	call	_Lcd_Write_Char
  5729  00194C  4A18               	infsnz	Lcd_Write_String@i,f,c
  5730  00194E  2A19               	incf	Lcd_Write_String@i+1,f,c
  5731  001950                     l3602:
  5732  001950  5018               	movf	Lcd_Write_String@i,w,c
  5733  001952  2414               	addwf	Lcd_Write_String@a,w,c
  5734  001954  6E16               	movwf	??_Lcd_Write_String& (0+255),c
  5735  001956  5019               	movf	Lcd_Write_String@i+1,w,c
  5736  001958  2015               	addwfc	Lcd_Write_String@a+1,w,c
  5737  00195A  6E17               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  5738  00195C  C016  FFF6         	movff	??_Lcd_Write_String,tblptrl
  5739  001960  C017  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  5740  001964  6AF8               	clrf	tblptru,c
  5741  001966  0E05               	movlw	(high __ramtop+-1)
  5742  001968  64F7               	cpfsgt	tblptrh,c
  5743  00196A  D003               	bra	u3267
  5744  00196C  0008               	tblrd		*
  5745  00196E  50F5               	movf	tablat,w,c
  5746  001970  D005               	bra	u3260
  5747  001972                     u3267:
  5748  001972  CFF6 FFE9          	movff	tblptrl,fsr0l
  5749  001976  CFF7 FFEA          	movff	tblptrh,fsr0h
  5750  00197A  50EF               	movf	indf0,w,c
  5751  00197C                     u3260:
  5752  00197C  0900               	iorlw	0
  5753  00197E  B4D8               	btfsc	status,2,c
  5754  001980  0012               	return	
  5755  001982  D7CC               	goto	l3598
  5756  001984                     __end_of_Lcd_Write_String:
  5757                           	opt stack 0
  5758                           tblptru	equ	0xFF8
  5759                           tblptrh	equ	0xFF7
  5760                           tblptrl	equ	0xFF6
  5761                           tablat	equ	0xFF5
  5762                           prodh	equ	0xFF4
  5763                           prodl	equ	0xFF3
  5764                           indf0	equ	0xFEF
  5765                           postinc0	equ	0xFEE
  5766                           fsr0h	equ	0xFEA
  5767                           fsr0l	equ	0xFE9
  5768                           wreg	equ	0xFE8
  5769                           indf1	equ	0xFE7
  5770                           postdec1	equ	0xFE5
  5771                           plusw1	equ	0xFE3
  5772                           fsr1h	equ	0xFE2
  5773                           fsr1l	equ	0xFE1
  5774                           indf2	equ	0xFDF
  5775                           postinc2	equ	0xFDE
  5776                           plusw2	equ	0xFDB
  5777                           fsr2h	equ	0xFDA
  5778                           fsr2l	equ	0xFD9
  5779                           status	equ	0xFD8
  5780                           
  5781 ;; *************** function _Lcd_Write_Char *****************
  5782 ;; Defined at:
  5783 ;;		line 95 in file "lcd.h"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;  a               1    wreg     unsigned char 
  5786 ;; Auto vars:     Size  Location     Type
  5787 ;;  a               1   18[COMRAM] unsigned char 
  5788 ;;  y               1   17[COMRAM] unsigned char 
  5789 ;;  temp            1   16[COMRAM] unsigned char 
  5790 ;; Return value:  Size  Location     Type
  5791 ;;                  1    wreg      void 
  5792 ;; Registers used:
  5793 ;;		wreg, status,2, status,0, cstack
  5794 ;; Tracked objects:
  5795 ;;		On entry : 0/0
  5796 ;;		On exit  : 0/0
  5797 ;;		Unchanged: 0/0
  5798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5799 ;;      Params:         0       0       0       0       0       0       0
  5800 ;;      Locals:         3       0       0       0       0       0       0
  5801 ;;      Temps:          0       0       0       0       0       0       0
  5802 ;;      Totals:         3       0       0       0       0       0       0
  5803 ;;Total ram usage:        3 bytes
  5804 ;; Hardware stack levels used:    1
  5805 ;; Hardware stack levels required when called:    2
  5806 ;; This function calls:
  5807 ;;		_Lcd_Port
  5808 ;; This function is called by:
  5809 ;;		_Lcd_Write_String
  5810 ;;		_menu_progress_bar
  5811 ;;		_main
  5812 ;;		_start_routine
  5813 ;;		_running_display
  5814 ;;		_menu_main
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           	psect	text10
  5819  001B5A                     __ptext10:
  5820                           	opt stack 0
  5821  001B5A                     _Lcd_Write_Char:
  5822                           	opt stack 25
  5823                           
  5824                           ;incstack = 0
  5825                           ;Lcd_Write_Char@a stored from wreg
  5826  001B5A  6E13               	movwf	Lcd_Write_Char@a,c
  5827                           
  5828                           ;lcd.h: 97: char temp,y;
  5829                           ;lcd.h: 98: temp = a&0x0F;
  5830  001B5C  5013               	movf	Lcd_Write_Char@a,w,c
  5831  001B5E  0B0F               	andlw	15
  5832  001B60  6E11               	movwf	Lcd_Write_Char@temp,c
  5833                           
  5834                           ;lcd.h: 99: y = a&0xF0;
  5835  001B62  5013               	movf	Lcd_Write_Char@a,w,c
  5836  001B64  0BF0               	andlw	240
  5837  001B66  6E12               	movwf	Lcd_Write_Char@y,c
  5838                           
  5839                           ;lcd.h: 100: PORTDbits.RD5 = 1;
  5840  001B68  8A83               	bsf	3971,5,c	;volatile
  5841                           
  5842                           ;lcd.h: 101: Lcd_Port(y>>4);
  5843  001B6A  3812               	swapf	Lcd_Write_Char@y,w,c
  5844  001B6C  0B0F               	andlw	15
  5845  001B6E  ECE3  F00D         	call	_Lcd_Port
  5846                           
  5847                           ;lcd.h: 102: PORTDbits.RD4 = 1;
  5848  001B72  8883               	bsf	3971,4,c	;volatile
  5849                           
  5850                           ;lcd.h: 103: _delay((unsigned long)((40)*(16000000/4000000.0)));
  5851  001B74  0E35               	movlw	53
  5852  001B76                     u4857:
  5853  001B76  2EE8               	decfsz	wreg,f,c
  5854  001B78  D7FE               	goto	u4857
  5855  001B7A  F000               	nop	
  5856                           
  5857                           ;lcd.h: 104: PORTDbits.RD4 = 0;
  5858  001B7C  9883               	bcf	3971,4,c	;volatile
  5859                           
  5860                           ;lcd.h: 105: Lcd_Port(temp);
  5861  001B7E  5011               	movf	Lcd_Write_Char@temp,w,c
  5862  001B80  ECE3  F00D         	call	_Lcd_Port
  5863                           
  5864                           ;lcd.h: 106: PORTDbits.RD4 = 1;
  5865  001B84  8883               	bsf	3971,4,c	;volatile
  5866                           
  5867                           ;lcd.h: 107: _delay((unsigned long)((40)*(16000000/4000000.0)));
  5868  001B86  0E35               	movlw	53
  5869  001B88                     u4867:
  5870  001B88  2EE8               	decfsz	wreg,f,c
  5871  001B8A  D7FE               	goto	u4867
  5872  001B8C  F000               	nop	
  5873                           
  5874                           ;lcd.h: 108: PORTDbits.RD4 = 0;
  5875  001B8E  9883               	bcf	3971,4,c	;volatile
  5876  001B90  0012               	return		;funcret
  5877  001B92                     __end_of_Lcd_Write_Char:
  5878                           	opt stack 0
  5879                           tblptru	equ	0xFF8
  5880                           tblptrh	equ	0xFF7
  5881                           tblptrl	equ	0xFF6
  5882                           tablat	equ	0xFF5
  5883                           prodh	equ	0xFF4
  5884                           prodl	equ	0xFF3
  5885                           indf0	equ	0xFEF
  5886                           postinc0	equ	0xFEE
  5887                           fsr0h	equ	0xFEA
  5888                           fsr0l	equ	0xFE9
  5889                           wreg	equ	0xFE8
  5890                           indf1	equ	0xFE7
  5891                           postdec1	equ	0xFE5
  5892                           plusw1	equ	0xFE3
  5893                           fsr1h	equ	0xFE2
  5894                           fsr1l	equ	0xFE1
  5895                           indf2	equ	0xFDF
  5896                           postinc2	equ	0xFDE
  5897                           plusw2	equ	0xFDB
  5898                           fsr2h	equ	0xFDA
  5899                           fsr2l	equ	0xFD9
  5900                           status	equ	0xFD8
  5901                           
  5902 ;; *************** function _Lcd_Set_Cursor *****************
  5903 ;; Defined at:
  5904 ;;		line 55 in file "lcd.h"
  5905 ;; Parameters:    Size  Location     Type
  5906 ;;  a               1    wreg     unsigned char 
  5907 ;;  b               1   17[COMRAM] unsigned char 
  5908 ;; Auto vars:     Size  Location     Type
  5909 ;;  a               1   18[COMRAM] unsigned char 
  5910 ;;  temp            1   21[COMRAM] unsigned char 
  5911 ;;  y               1   20[COMRAM] unsigned char 
  5912 ;;  z               1   19[COMRAM] unsigned char 
  5913 ;; Return value:  Size  Location     Type
  5914 ;;                  1    wreg      void 
  5915 ;; Registers used:
  5916 ;;		wreg, status,2, status,0, cstack
  5917 ;; Tracked objects:
  5918 ;;		On entry : 0/0
  5919 ;;		On exit  : 0/0
  5920 ;;		Unchanged: 0/0
  5921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5922 ;;      Params:         1       0       0       0       0       0       0
  5923 ;;      Locals:         4       0       0       0       0       0       0
  5924 ;;      Temps:          0       0       0       0       0       0       0
  5925 ;;      Totals:         5       0       0       0       0       0       0
  5926 ;;Total ram usage:        5 bytes
  5927 ;; Hardware stack levels used:    1
  5928 ;; Hardware stack levels required when called:    3
  5929 ;; This function calls:
  5930 ;;		_Lcd_Cmd
  5931 ;; This function is called by:
  5932 ;;		_menu_progress_bar
  5933 ;;		_main
  5934 ;;		_start_routine
  5935 ;;		_running_display
  5936 ;;		_menu_main
  5937 ;;		_menu_animation_i2c
  5938 ;; This function uses a non-reentrant model
  5939 ;;
  5940                           
  5941                           	psect	text11
  5942  001A98                     __ptext11:
  5943                           	opt stack 0
  5944  001A98                     _Lcd_Set_Cursor:
  5945                           	opt stack 25
  5946                           
  5947                           ;incstack = 0
  5948                           ;Lcd_Set_Cursor@a stored from wreg
  5949  001A98  6E13               	movwf	Lcd_Set_Cursor@a,c
  5950                           
  5951                           ;lcd.h: 57: char temp,z,y;
  5952                           ;lcd.h: 58: if(a == 1)
  5953  001A9A  0413               	decf	Lcd_Set_Cursor@a,w,c
  5954  001A9C  A4D8               	btfss	status,2,c
  5955  001A9E  D010               	goto	l3588
  5956                           
  5957                           ;lcd.h: 59: {
  5958                           ;lcd.h: 60: temp = 0x80 + b - 1;
  5959  001AA0  5012               	movf	Lcd_Set_Cursor@b,w,c
  5960  001AA2  0F7F               	addlw	127
  5961  001AA4  6E16               	movwf	Lcd_Set_Cursor@temp,c
  5962                           
  5963                           ;lcd.h: 61: z = temp>>4;
  5964  001AA6  3816               	swapf	Lcd_Set_Cursor@temp,w,c
  5965  001AA8  0B0F               	andlw	15
  5966  001AAA  6E14               	movwf	Lcd_Set_Cursor@z,c
  5967                           
  5968                           ;lcd.h: 62: y = temp & 0x0F;
  5969  001AAC  5016               	movf	Lcd_Set_Cursor@temp,w,c
  5970  001AAE  0B0F               	andlw	15
  5971  001AB0  6E15               	movwf	Lcd_Set_Cursor@y,c
  5972                           
  5973                           ;lcd.h: 63: Lcd_Cmd(z);
  5974  001AB2  5014               	movf	Lcd_Set_Cursor@z,w,c
  5975  001AB4  EC3B  F00E         	call	_Lcd_Cmd
  5976                           
  5977                           ;lcd.h: 64: Lcd_Cmd(y);
  5978  001AB8  5015               	movf	Lcd_Set_Cursor@y,w,c
  5979  001ABA  EC3B  F00E         	call	_Lcd_Cmd
  5980                           
  5981                           ;lcd.h: 65: }
  5982  001ABE  0012               	return	
  5983  001AC0                     l3588:
  5984                           
  5985                           ;lcd.h: 66: else if(a == 2)
  5986  001AC0  0E02               	movlw	2
  5987  001AC2  1813               	xorwf	Lcd_Set_Cursor@a,w,c
  5988  001AC4  A4D8               	btfss	status,2,c
  5989  001AC6  0012               	return	
  5990                           
  5991                           ;lcd.h: 67: {
  5992                           ;lcd.h: 68: temp = 0xC0 + b - 1;
  5993  001AC8  5012               	movf	Lcd_Set_Cursor@b,w,c
  5994  001ACA  0FBF               	addlw	191
  5995  001ACC  6E16               	movwf	Lcd_Set_Cursor@temp,c
  5996                           
  5997                           ;lcd.h: 69: z = temp>>4;
  5998  001ACE  3816               	swapf	Lcd_Set_Cursor@temp,w,c
  5999  001AD0  0B0F               	andlw	15
  6000  001AD2  6E14               	movwf	Lcd_Set_Cursor@z,c
  6001                           
  6002                           ;lcd.h: 70: y = temp & 0x0F;
  6003  001AD4  5016               	movf	Lcd_Set_Cursor@temp,w,c
  6004  001AD6  0B0F               	andlw	15
  6005  001AD8  6E15               	movwf	Lcd_Set_Cursor@y,c
  6006                           
  6007                           ;lcd.h: 71: Lcd_Cmd(z);
  6008  001ADA  5014               	movf	Lcd_Set_Cursor@z,w,c
  6009  001ADC  EC3B  F00E         	call	_Lcd_Cmd
  6010                           
  6011                           ;lcd.h: 72: Lcd_Cmd(y);
  6012  001AE0  5015               	movf	Lcd_Set_Cursor@y,w,c
  6013  001AE2  EC3B  F00E         	call	_Lcd_Cmd
  6014  001AE6  0012               	return	
  6015  001AE8                     __end_of_Lcd_Set_Cursor:
  6016                           	opt stack 0
  6017                           tblptru	equ	0xFF8
  6018                           tblptrh	equ	0xFF7
  6019                           tblptrl	equ	0xFF6
  6020                           tablat	equ	0xFF5
  6021                           prodh	equ	0xFF4
  6022                           prodl	equ	0xFF3
  6023                           indf0	equ	0xFEF
  6024                           postinc0	equ	0xFEE
  6025                           fsr0h	equ	0xFEA
  6026                           fsr0l	equ	0xFE9
  6027                           wreg	equ	0xFE8
  6028                           indf1	equ	0xFE7
  6029                           postdec1	equ	0xFE5
  6030                           plusw1	equ	0xFE3
  6031                           fsr1h	equ	0xFE2
  6032                           fsr1l	equ	0xFE1
  6033                           indf2	equ	0xFDF
  6034                           postinc2	equ	0xFDE
  6035                           plusw2	equ	0xFDB
  6036                           fsr2h	equ	0xFDA
  6037                           fsr2l	equ	0xFD9
  6038                           status	equ	0xFD8
  6039                           
  6040 ;; *************** function _Lcd_Clear *****************
  6041 ;; Defined at:
  6042 ;;		line 48 in file "lcd.h"
  6043 ;; Parameters:    Size  Location     Type
  6044 ;;		None
  6045 ;; Auto vars:     Size  Location     Type
  6046 ;;		None
  6047 ;; Return value:  Size  Location     Type
  6048 ;;                  1    wreg      void 
  6049 ;; Registers used:
  6050 ;;		wreg, status,2, cstack
  6051 ;; Tracked objects:
  6052 ;;		On entry : 0/0
  6053 ;;		On exit  : 0/0
  6054 ;;		Unchanged: 0/0
  6055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6056 ;;      Params:         0       0       0       0       0       0       0
  6057 ;;      Locals:         0       0       0       0       0       0       0
  6058 ;;      Temps:          1       0       0       0       0       0       0
  6059 ;;      Totals:         1       0       0       0       0       0       0
  6060 ;;Total ram usage:        1 bytes
  6061 ;; Hardware stack levels used:    1
  6062 ;; Hardware stack levels required when called:    3
  6063 ;; This function calls:
  6064 ;;		_Lcd_Cmd
  6065 ;; This function is called by:
  6066 ;;		_menu_progress_bar
  6067 ;;		_start_routine
  6068 ;;		_running_display
  6069 ;; This function uses a non-reentrant model
  6070 ;;
  6071                           
  6072                           	psect	text12
  6073  001C3C                     __ptext12:
  6074                           	opt stack 0
  6075  001C3C                     _Lcd_Clear:
  6076                           	opt stack 25
  6077                           
  6078                           ;lcd.h: 50: Lcd_Cmd(0);
  6079                           
  6080                           ;incstack = 0
  6081  001C3C  0E00               	movlw	0
  6082  001C3E  EC3B  F00E         	call	_Lcd_Cmd
  6083                           
  6084                           ;lcd.h: 51: Lcd_Cmd(1);
  6085  001C42  0E01               	movlw	1
  6086  001C44  EC3B  F00E         	call	_Lcd_Cmd
  6087                           
  6088                           ;lcd.h: 52: _delay((unsigned long)((5)*(16000000/4000.0)));
  6089  001C48  0E1A               	movlw	26
  6090  001C4A  6E12               	movwf	??_Lcd_Clear& (0+255),c
  6091  001C4C  0EF8               	movlw	248
  6092  001C4E                     u4877:
  6093  001C4E  2EE8               	decfsz	wreg,f,c
  6094  001C50  D7FE               	goto	u4877
  6095  001C52  2E12               	decfsz	??_Lcd_Clear& (0+255),f,c
  6096  001C54  D7FC               	goto	u4877
  6097  001C56  F000 F000          	nop2	
  6098  001C5A  0012               	return		;funcret
  6099  001C5C                     __end_of_Lcd_Clear:
  6100                           	opt stack 0
  6101                           tblptru	equ	0xFF8
  6102                           tblptrh	equ	0xFF7
  6103                           tblptrl	equ	0xFF6
  6104                           tablat	equ	0xFF5
  6105                           prodh	equ	0xFF4
  6106                           prodl	equ	0xFF3
  6107                           indf0	equ	0xFEF
  6108                           postinc0	equ	0xFEE
  6109                           fsr0h	equ	0xFEA
  6110                           fsr0l	equ	0xFE9
  6111                           wreg	equ	0xFE8
  6112                           indf1	equ	0xFE7
  6113                           postdec1	equ	0xFE5
  6114                           plusw1	equ	0xFE3
  6115                           fsr1h	equ	0xFE2
  6116                           fsr1l	equ	0xFE1
  6117                           indf2	equ	0xFDF
  6118                           postinc2	equ	0xFDE
  6119                           plusw2	equ	0xFDB
  6120                           fsr2h	equ	0xFDA
  6121                           fsr2l	equ	0xFD9
  6122                           status	equ	0xFD8
  6123                           
  6124 ;; *************** function ___awmod *****************
  6125 ;; Defined at:
  6126 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;  dividend        2   15[COMRAM] int 
  6129 ;;  divisor         2   17[COMRAM] int 
  6130 ;; Auto vars:     Size  Location     Type
  6131 ;;  sign            1   20[COMRAM] unsigned char 
  6132 ;;  counter         1   19[COMRAM] unsigned char 
  6133 ;; Return value:  Size  Location     Type
  6134 ;;                  2   15[COMRAM] int 
  6135 ;; Registers used:
  6136 ;;		wreg, status,2, status,0
  6137 ;; Tracked objects:
  6138 ;;		On entry : 0/0
  6139 ;;		On exit  : 0/0
  6140 ;;		Unchanged: 0/0
  6141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6142 ;;      Params:         4       0       0       0       0       0       0
  6143 ;;      Locals:         2       0       0       0       0       0       0
  6144 ;;      Temps:          0       0       0       0       0       0       0
  6145 ;;      Totals:         6       0       0       0       0       0       0
  6146 ;;Total ram usage:        6 bytes
  6147 ;; Hardware stack levels used:    1
  6148 ;; Hardware stack levels required when called:    1
  6149 ;; This function calls:
  6150 ;;		Nothing
  6151 ;; This function is called by:
  6152 ;;		_running_display
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156                           	psect	text13
  6157  001984                     __ptext13:
  6158                           	opt stack 0
  6159  001984                     ___awmod:
  6160                           	opt stack 28
  6161                           
  6162                           ;incstack = 0
  6163  001984  0E00               	movlw	0
  6164  001986  6E15               	movwf	___awmod@sign,c
  6165  001988  AE11               	btfss	___awmod@dividend+1,7,c
  6166  00198A  D006               	goto	l3868
  6167  00198C  6C10               	negf	___awmod@dividend,c
  6168  00198E  1E11               	comf	___awmod@dividend+1,f,c
  6169  001990  B0D8               	btfsc	status,0,c
  6170  001992  2A11               	incf	___awmod@dividend+1,f,c
  6171  001994  0E01               	movlw	1
  6172  001996  6E15               	movwf	___awmod@sign,c
  6173  001998                     l3868:
  6174  001998  AE13               	btfss	___awmod@divisor+1,7,c
  6175  00199A  D004               	goto	l3872
  6176  00199C  6C12               	negf	___awmod@divisor,c
  6177  00199E  1E13               	comf	___awmod@divisor+1,f,c
  6178  0019A0  B0D8               	btfsc	status,0,c
  6179  0019A2  2A13               	incf	___awmod@divisor+1,f,c
  6180  0019A4                     l3872:
  6181  0019A4  5012               	movf	___awmod@divisor,w,c
  6182  0019A6  1013               	iorwf	___awmod@divisor+1,w,c
  6183  0019A8  B4D8               	btfsc	status,2,c
  6184  0019AA  D018               	goto	l3888
  6185  0019AC  0E01               	movlw	1
  6186  0019AE  6E14               	movwf	___awmod@counter,c
  6187  0019B0  D004               	goto	l3878
  6188  0019B2                     l3876:
  6189  0019B2  90D8               	bcf	status,0,c
  6190  0019B4  3612               	rlcf	___awmod@divisor,f,c
  6191  0019B6  3613               	rlcf	___awmod@divisor+1,f,c
  6192  0019B8  2A14               	incf	___awmod@counter,f,c
  6193  0019BA                     l3878:
  6194  0019BA  AE13               	btfss	___awmod@divisor+1,7,c
  6195  0019BC  D7FA               	goto	l3876
  6196  0019BE                     l3880:
  6197  0019BE  5012               	movf	___awmod@divisor,w,c
  6198  0019C0  5C10               	subwf	___awmod@dividend,w,c
  6199  0019C2  5013               	movf	___awmod@divisor+1,w,c
  6200  0019C4  5811               	subwfb	___awmod@dividend+1,w,c
  6201  0019C6  A0D8               	btfss	status,0,c
  6202  0019C8  D004               	goto	l3884
  6203  0019CA  5012               	movf	___awmod@divisor,w,c
  6204  0019CC  5E10               	subwf	___awmod@dividend,f,c
  6205  0019CE  5013               	movf	___awmod@divisor+1,w,c
  6206  0019D0  5A11               	subwfb	___awmod@dividend+1,f,c
  6207  0019D2                     l3884:
  6208  0019D2  90D8               	bcf	status,0,c
  6209  0019D4  3213               	rrcf	___awmod@divisor+1,f,c
  6210  0019D6  3212               	rrcf	___awmod@divisor,f,c
  6211  0019D8  2E14               	decfsz	___awmod@counter,f,c
  6212  0019DA  D7F1               	goto	l3880
  6213  0019DC                     l3888:
  6214  0019DC  5015               	movf	___awmod@sign,w,c
  6215  0019DE  B4D8               	btfsc	status,2,c
  6216  0019E0  D004               	goto	l3892
  6217  0019E2  6C10               	negf	___awmod@dividend,c
  6218  0019E4  1E11               	comf	___awmod@dividend+1,f,c
  6219  0019E6  B0D8               	btfsc	status,0,c
  6220  0019E8  2A11               	incf	___awmod@dividend+1,f,c
  6221  0019EA                     l3892:
  6222  0019EA  C010  F010         	movff	___awmod@dividend,?___awmod
  6223  0019EE  C011  F011         	movff	___awmod@dividend+1,?___awmod+1
  6224  0019F2  0012               	return	
  6225  0019F4                     __end_of___awmod:
  6226                           	opt stack 0
  6227                           tblptru	equ	0xFF8
  6228                           tblptrh	equ	0xFF7
  6229                           tblptrl	equ	0xFF6
  6230                           tablat	equ	0xFF5
  6231                           prodh	equ	0xFF4
  6232                           prodl	equ	0xFF3
  6233                           indf0	equ	0xFEF
  6234                           postinc0	equ	0xFEE
  6235                           fsr0h	equ	0xFEA
  6236                           fsr0l	equ	0xFE9
  6237                           wreg	equ	0xFE8
  6238                           indf1	equ	0xFE7
  6239                           postdec1	equ	0xFE5
  6240                           plusw1	equ	0xFE3
  6241                           fsr1h	equ	0xFE2
  6242                           fsr1l	equ	0xFE1
  6243                           indf2	equ	0xFDF
  6244                           postinc2	equ	0xFDE
  6245                           plusw2	equ	0xFDB
  6246                           fsr2h	equ	0xFDA
  6247                           fsr2l	equ	0xFD9
  6248                           status	equ	0xFD8
  6249                           
  6250 ;; *************** function _mcu_initialise *****************
  6251 ;; Defined at:
  6252 ;;		line 230 in file "main.c"
  6253 ;; Parameters:    Size  Location     Type
  6254 ;;		None
  6255 ;; Auto vars:     Size  Location     Type
  6256 ;;		None
  6257 ;; Return value:  Size  Location     Type
  6258 ;;                  1    wreg      void 
  6259 ;; Registers used:
  6260 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6261 ;; Tracked objects:
  6262 ;;		On entry : 0/0
  6263 ;;		On exit  : 0/0
  6264 ;;		Unchanged: 0/0
  6265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6266 ;;      Params:         0       0       0       0       0       0       0
  6267 ;;      Locals:         0       0       0       0       0       0       0
  6268 ;;      Temps:          0       0       0       0       0       0       0
  6269 ;;      Totals:         0       0       0       0       0       0       0
  6270 ;;Total ram usage:        0 bytes
  6271 ;; Hardware stack levels used:    1
  6272 ;; Hardware stack levels required when called:    2
  6273 ;; This function calls:
  6274 ;;		_Eeprom_Read_Byte
  6275 ;; This function is called by:
  6276 ;;		_main
  6277 ;; This function uses a non-reentrant model
  6278 ;;
  6279                           
  6280                           	psect	text14
  6281  001A46                     __ptext14:
  6282                           	opt stack 0
  6283  001A46                     _mcu_initialise:
  6284                           	opt stack 28
  6285                           
  6286                           ;main.c: 233: I2C_ADDR = Eeprom_Read_Byte(EEP_I2C_ADDR);
  6287                           
  6288                           ;incstack = 0
  6289  001A46  0100               	movlb	0	; () banked
  6290  001A48  51D2               	movf	_EEP_I2C_ADDR& (0+255),w,b
  6291  001A4A  EC47  F00E         	call	_Eeprom_Read_Byte
  6292  001A4E  0100               	movlb	0	; () banked
  6293  001A50  6FD4               	movwf	_I2C_ADDR& (0+255),b
  6294                           
  6295                           ; BSR set to: 0
  6296                           ;main.c: 234: Machine_ID = I2C_ADDR - 0x0F;
  6297  001A52  0100               	movlb	0	; () banked
  6298  001A54  51D4               	movf	_I2C_ADDR& (0+255),w,b
  6299  001A56  0FF1               	addlw	241
  6300  001A58  0100               	movlb	0	; () banked
  6301  001A5A  6FD5               	movwf	_Machine_ID& (0+255),b
  6302                           
  6303                           ; BSR set to: 0
  6304                           ;main.c: 237: OSCCON = 0x60;
  6305  001A5C  0E60               	movlw	96
  6306  001A5E  6ED3               	movwf	4051,c	;volatile
  6307                           
  6308                           ; BSR set to: 0
  6309                           ;main.c: 238: OSCTUNEbits.PLLEN = 0;
  6310  001A60  9C9B               	bcf	3995,6,c	;volatile
  6311                           
  6312                           ; BSR set to: 0
  6313                           ;main.c: 240: TRISA = 0x00;
  6314  001A62  0E00               	movlw	0
  6315  001A64  6E92               	movwf	3986,c	;volatile
  6316                           
  6317                           ; BSR set to: 0
  6318                           ;main.c: 241: TRISB = 0x01;
  6319  001A66  0E01               	movlw	1
  6320  001A68  6E93               	movwf	3987,c	;volatile
  6321                           
  6322                           ; BSR set to: 0
  6323                           ;main.c: 242: TRISC = 0b00011000;
  6324  001A6A  0E18               	movlw	24
  6325  001A6C  6E94               	movwf	3988,c	;volatile
  6326                           
  6327                           ; BSR set to: 0
  6328                           ;main.c: 243: TRISD = 0x00;
  6329  001A6E  0E00               	movlw	0
  6330  001A70  6E95               	movwf	3989,c	;volatile
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;main.c: 244: LATC = 0b00011000;
  6334  001A72  0E18               	movlw	24
  6335  001A74  6E8B               	movwf	3979,c	;volatile
  6336                           
  6337                           ; BSR set to: 0
  6338                           ;main.c: 246: SSPADD = I2C_ADDR * 2;
  6339  001A76  0100               	movlb	0	; () banked
  6340  001A78  51D4               	movf	_I2C_ADDR& (0+255),w,b
  6341  001A7A  0D02               	mullw	2
  6342  001A7C  CFF3 FFC8          	movff	prodl,4040	;volatile
  6343                           
  6344                           ; BSR set to: 0
  6345                           ;main.c: 247: SSPCON1 = 0x36;
  6346  001A80  0E36               	movlw	54
  6347  001A82  6EC6               	movwf	4038,c	;volatile
  6348                           
  6349                           ; BSR set to: 0
  6350                           ;main.c: 250: SSPSTAT = 0x00;
  6351  001A84  0E00               	movlw	0
  6352  001A86  6EC7               	movwf	4039,c	;volatile
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;main.c: 251: SSPCON2 = 0x01;
  6356  001A88  0E01               	movlw	1
  6357  001A8A  6EC5               	movwf	4037,c	;volatile
  6358                           
  6359                           ; BSR set to: 0
  6360                           ;main.c: 253: PIR1bits.SSPIF = 0;
  6361  001A8C  969E               	bcf	3998,3,c	;volatile
  6362                           
  6363                           ; BSR set to: 0
  6364                           ;main.c: 254: PIE1bits.SSPIE = 1;
  6365  001A8E  869D               	bsf	3997,3,c	;volatile
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;main.c: 255: INTCONbits.GIE_GIEH = 1;
  6369  001A90  8EF2               	bsf	intcon,7,c	;volatile
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;main.c: 256: INTCONbits.PEIE_GIEL = 1;
  6373  001A92  8CF2               	bsf	intcon,6,c	;volatile
  6374                           
  6375                           ; BSR set to: 0
  6376                           ;main.c: 257: INTCONbits.RBIE = 0;
  6377  001A94  96F2               	bcf	intcon,3,c	;volatile
  6378                           
  6379                           ; BSR set to: 0
  6380  001A96  0012               	return		;funcret
  6381  001A98                     __end_of_mcu_initialise:
  6382                           	opt stack 0
  6383                           tblptru	equ	0xFF8
  6384                           tblptrh	equ	0xFF7
  6385                           tblptrl	equ	0xFF6
  6386                           tablat	equ	0xFF5
  6387                           prodh	equ	0xFF4
  6388                           prodl	equ	0xFF3
  6389                           intcon	equ	0xFF2
  6390                           indf0	equ	0xFEF
  6391                           postinc0	equ	0xFEE
  6392                           fsr0h	equ	0xFEA
  6393                           fsr0l	equ	0xFE9
  6394                           wreg	equ	0xFE8
  6395                           indf1	equ	0xFE7
  6396                           postdec1	equ	0xFE5
  6397                           plusw1	equ	0xFE3
  6398                           fsr1h	equ	0xFE2
  6399                           fsr1l	equ	0xFE1
  6400                           indf2	equ	0xFDF
  6401                           postinc2	equ	0xFDE
  6402                           plusw2	equ	0xFDB
  6403                           fsr2h	equ	0xFDA
  6404                           fsr2l	equ	0xFD9
  6405                           status	equ	0xFD8
  6406                           
  6407 ;; *************** function _Eeprom_Read_Byte *****************
  6408 ;; Defined at:
  6409 ;;		line 20 in file "eeprom.h"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;  address         1    wreg     unsigned char 
  6412 ;; Auto vars:     Size  Location     Type
  6413 ;;  address         1   15[COMRAM] unsigned char 
  6414 ;; Return value:  Size  Location     Type
  6415 ;;                  1    wreg      unsigned char 
  6416 ;; Registers used:
  6417 ;;		wreg, status,2
  6418 ;; Tracked objects:
  6419 ;;		On entry : 0/0
  6420 ;;		On exit  : 0/0
  6421 ;;		Unchanged: 0/0
  6422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6423 ;;      Params:         0       0       0       0       0       0       0
  6424 ;;      Locals:         1       0       0       0       0       0       0
  6425 ;;      Temps:          0       0       0       0       0       0       0
  6426 ;;      Totals:         1       0       0       0       0       0       0
  6427 ;;Total ram usage:        1 bytes
  6428 ;; Hardware stack levels used:    1
  6429 ;; Hardware stack levels required when called:    1
  6430 ;; This function calls:
  6431 ;;		Nothing
  6432 ;; This function is called by:
  6433 ;;		_mcu_initialise
  6434 ;; This function uses a non-reentrant model
  6435 ;;
  6436                           
  6437                           	psect	text15
  6438  001C8E                     __ptext15:
  6439                           	opt stack 0
  6440  001C8E                     _Eeprom_Read_Byte:
  6441                           	opt stack 28
  6442                           
  6443                           ; BSR set to: 0
  6444                           ;incstack = 0
  6445                           ;Eeprom_Read_Byte@address stored from wreg
  6446  001C8E  6E10               	movwf	Eeprom_Read_Byte@address,c
  6447                           
  6448                           ;eeprom.h: 24: EEADR = (unsigned char)address;
  6449  001C90  C010  FFA9         	movff	Eeprom_Read_Byte@address,4009	;volatile
  6450                           
  6451                           ;eeprom.h: 26: EECON1bits.EEPGD = 0;
  6452  001C94  9EA6               	bcf	4006,7,c	;volatile
  6453                           
  6454                           ;eeprom.h: 27: EECON1bits.CFGS = 0;
  6455  001C96  9CA6               	bcf	4006,6,c	;volatile
  6456                           
  6457                           ;eeprom.h: 28: EECON1bits.RD = 1;
  6458  001C98  80A6               	bsf	4006,0,c	;volatile
  6459  001C9A                     l149:
  6460  001C9A  B0A6               	btfsc	4006,0,c	;volatile
  6461  001C9C  D7FE               	goto	l149
  6462                           
  6463                           ;eeprom.h: 34: return EEDATA;
  6464  001C9E  50A8               	movf	4008,w,c	;volatile
  6465  001CA0  0012               	return		;funcret
  6466  001CA2                     __end_of_Eeprom_Read_Byte:
  6467                           	opt stack 0
  6468                           tblptru	equ	0xFF8
  6469                           tblptrh	equ	0xFF7
  6470                           tblptrl	equ	0xFF6
  6471                           tablat	equ	0xFF5
  6472                           prodh	equ	0xFF4
  6473                           prodl	equ	0xFF3
  6474                           intcon	equ	0xFF2
  6475                           indf0	equ	0xFEF
  6476                           postinc0	equ	0xFEE
  6477                           fsr0h	equ	0xFEA
  6478                           fsr0l	equ	0xFE9
  6479                           wreg	equ	0xFE8
  6480                           indf1	equ	0xFE7
  6481                           postdec1	equ	0xFE5
  6482                           plusw1	equ	0xFE3
  6483                           fsr1h	equ	0xFE2
  6484                           fsr1l	equ	0xFE1
  6485                           indf2	equ	0xFDF
  6486                           postinc2	equ	0xFDE
  6487                           plusw2	equ	0xFDB
  6488                           fsr2h	equ	0xFDA
  6489                           fsr2l	equ	0xFD9
  6490                           status	equ	0xFD8
  6491                           
  6492 ;; *************** function _load_i2c_registers *****************
  6493 ;; Defined at:
  6494 ;;		line 292 in file "main.c"
  6495 ;; Parameters:    Size  Location     Type
  6496 ;;		None
  6497 ;; Auto vars:     Size  Location     Type
  6498 ;;  i               2   29[COMRAM] int 
  6499 ;;  i               2   33[COMRAM] int 
  6500 ;;  i               2   31[COMRAM] int 
  6501 ;;  checksum        2   27[COMRAM] int 
  6502 ;; Return value:  Size  Location     Type
  6503 ;;                  1    wreg      void 
  6504 ;; Registers used:
  6505 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6506 ;; Tracked objects:
  6507 ;;		On entry : 0/0
  6508 ;;		On exit  : 0/0
  6509 ;;		Unchanged: 0/0
  6510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6511 ;;      Params:         0       0       0       0       0       0       0
  6512 ;;      Locals:         8       0       0       0       0       0       0
  6513 ;;      Temps:          4       0       0       0       0       0       0
  6514 ;;      Totals:        12       0       0       0       0       0       0
  6515 ;;Total ram usage:       12 bytes
  6516 ;; Hardware stack levels used:    1
  6517 ;; Hardware stack levels required when called:    2
  6518 ;; This function calls:
  6519 ;;		___awdiv
  6520 ;; This function is called by:
  6521 ;;		_main
  6522 ;; This function uses a non-reentrant model
  6523 ;;
  6524                           
  6525                           	psect	text16
  6526  0015FC                     __ptext16:
  6527                           	opt stack 0
  6528  0015FC                     _load_i2c_registers:
  6529                           	opt stack 28
  6530                           
  6531                           ;main.c: 301: for (int i = 0; i < 9; i++)
  6532                           
  6533                           ;incstack = 0
  6534  0015FC  0E00               	movlw	0
  6535  0015FE  6E21               	movwf	load_i2c_registers@i+1,c
  6536  001600  0E00               	movlw	0
  6537  001602  6E20               	movwf	load_i2c_registers@i,c
  6538  001604                     l4246:
  6539  001604  BE21               	btfsc	load_i2c_registers@i+1,7,c
  6540  001606  D006               	goto	l4250
  6541  001608  5021               	movf	load_i2c_registers@i+1,w,c
  6542  00160A  E115               	bnz	l4256
  6543  00160C  0E09               	movlw	9
  6544  00160E  5C20               	subwf	load_i2c_registers@i,w,c
  6545  001610  B0D8               	btfsc	status,0,c
  6546  001612  D011               	goto	l4256
  6547  001614                     l4250:
  6548                           
  6549                           ;main.c: 302: i2c_r_reg[i] = current_user[i];
  6550  001614  0EC9               	movlw	low _current_user
  6551  001616  2420               	addwf	load_i2c_registers@i,w,c
  6552  001618  6ED9               	movwf	fsr2l,c
  6553  00161A  0E00               	movlw	high _current_user
  6554  00161C  2021               	addwfc	load_i2c_registers@i+1,w,c
  6555  00161E  6EDA               	movwf	fsr2h,c
  6556  001620  0E60               	movlw	low _i2c_r_reg
  6557  001622  2420               	addwf	load_i2c_registers@i,w,c
  6558  001624  6EE1               	movwf	fsr1l,c
  6559  001626  0E00               	movlw	high _i2c_r_reg
  6560  001628  2021               	addwfc	load_i2c_registers@i+1,w,c
  6561  00162A  6EE2               	movwf	fsr1h,c
  6562  00162C  CFDF FFE7          	movff	indf2,indf1
  6563  001630  4A20               	infsnz	load_i2c_registers@i,f,c
  6564  001632  2A21               	incf	load_i2c_registers@i+1,f,c
  6565  001634  D7E7               	goto	l4246
  6566  001636                     l4256:
  6567                           
  6568                           ;main.c: 304: for (int i = 9; i < 18; i++)
  6569  001636  0E00               	movlw	0
  6570  001638  6E23               	movwf	load_i2c_registers@i_837+1,c
  6571  00163A  0E09               	movlw	9
  6572  00163C  6E22               	movwf	load_i2c_registers@i_837,c
  6573  00163E                     l4258:
  6574  00163E  BE23               	btfsc	load_i2c_registers@i_837+1,7,c
  6575  001640  D006               	goto	l4262
  6576  001642  5023               	movf	load_i2c_registers@i_837+1,w,c
  6577  001644  E121               	bnz	l4268
  6578  001646  0E12               	movlw	18
  6579  001648  5C22               	subwf	load_i2c_registers@i_837,w,c
  6580  00164A  B0D8               	btfsc	status,0,c
  6581  00164C  D01D               	goto	l4268
  6582  00164E                     l4262:
  6583                           
  6584                           ;main.c: 305: i2c_r_reg[i] = current_pin[i - 9];
  6585  00164E  0EF7               	movlw	247
  6586  001650  6E18               	movwf	??_load_i2c_registers& (0+255),c
  6587  001652  0EFF               	movlw	255
  6588  001654  6E19               	movwf	(??_load_i2c_registers+1)& (0+255),c
  6589  001656  C022  F01A         	movff	load_i2c_registers@i_837,??_load_i2c_registers+2
  6590  00165A  C023  F01B         	movff	load_i2c_registers@i_837+1,??_load_i2c_registers+3
  6591  00165E  5018               	movf	??_load_i2c_registers,w,c
  6592  001660  261A               	addwf	??_load_i2c_registers+2,f,c
  6593  001662  5019               	movf	??_load_i2c_registers+1,w,c
  6594  001664  221B               	addwfc	??_load_i2c_registers+3,f,c
  6595  001666  0EC0               	movlw	low _current_pin
  6596  001668  241A               	addwf	??_load_i2c_registers+2,w,c
  6597  00166A  6ED9               	movwf	fsr2l,c
  6598  00166C  0E00               	movlw	high _current_pin
  6599  00166E  201B               	addwfc	??_load_i2c_registers+3,w,c
  6600  001670  6EDA               	movwf	fsr2h,c
  6601  001672  0E60               	movlw	low _i2c_r_reg
  6602  001674  2422               	addwf	load_i2c_registers@i_837,w,c
  6603  001676  6EE1               	movwf	fsr1l,c
  6604  001678  0E00               	movlw	high _i2c_r_reg
  6605  00167A  2023               	addwfc	load_i2c_registers@i_837+1,w,c
  6606  00167C  6EE2               	movwf	fsr1h,c
  6607  00167E  CFDF FFE7          	movff	indf2,indf1
  6608  001682  4A22               	infsnz	load_i2c_registers@i_837,f,c
  6609  001684  2A23               	incf	load_i2c_registers@i_837+1,f,c
  6610  001686  D7DB               	goto	l4258
  6611  001688                     l4268:
  6612                           
  6613                           ;main.c: 308: int checksum = 0x00;
  6614  001688  0E00               	movlw	0
  6615  00168A  6E1D               	movwf	load_i2c_registers@checksum+1,c
  6616  00168C  0E00               	movlw	0
  6617  00168E  6E1C               	movwf	load_i2c_registers@checksum,c
  6618                           
  6619                           ;main.c: 309: for (int i = 0; i < 31; i++)
  6620  001690  0E00               	movlw	0
  6621  001692  6E1F               	movwf	load_i2c_registers@i_839+1,c
  6622  001694  0E00               	movlw	0
  6623  001696  6E1E               	movwf	load_i2c_registers@i_839,c
  6624  001698                     l4270:
  6625  001698  BE1F               	btfsc	load_i2c_registers@i_839+1,7,c
  6626  00169A  D006               	goto	l4274
  6627  00169C  501F               	movf	load_i2c_registers@i_839+1,w,c
  6628  00169E  E113               	bnz	l4280
  6629  0016A0  0E1F               	movlw	31
  6630  0016A2  5C1E               	subwf	load_i2c_registers@i_839,w,c
  6631  0016A4  B0D8               	btfsc	status,0,c
  6632  0016A6  D00F               	goto	l4280
  6633  0016A8                     l4274:
  6634                           
  6635                           ;main.c: 310: {
  6636                           ;main.c: 311: checksum += i2c_r_reg[i];
  6637  0016A8  0E60               	movlw	low _i2c_r_reg
  6638  0016AA  241E               	addwf	load_i2c_registers@i_839,w,c
  6639  0016AC  6ED9               	movwf	fsr2l,c
  6640  0016AE  0E00               	movlw	high _i2c_r_reg
  6641  0016B0  201F               	addwfc	load_i2c_registers@i_839+1,w,c
  6642  0016B2  6EDA               	movwf	fsr2h,c
  6643  0016B4  50DF               	movf	indf2,w,c
  6644  0016B6  6E18               	movwf	??_load_i2c_registers& (0+255),c
  6645  0016B8  5018               	movf	??_load_i2c_registers,w,c
  6646  0016BA  261C               	addwf	load_i2c_registers@checksum,f,c
  6647  0016BC  0E00               	movlw	0
  6648  0016BE  221D               	addwfc	load_i2c_registers@checksum+1,f,c
  6649  0016C0  4A1E               	infsnz	load_i2c_registers@i_839,f,c
  6650  0016C2  2A1F               	incf	load_i2c_registers@i_839+1,f,c
  6651  0016C4  D7E9               	goto	l4270
  6652  0016C6                     l4280:
  6653                           
  6654                           ;main.c: 312: }
  6655                           ;main.c: 313: checksum /= 32;
  6656  0016C6  C01C  F010         	movff	load_i2c_registers@checksum,___awdiv@dividend
  6657  0016CA  C01D  F011         	movff	load_i2c_registers@checksum+1,___awdiv@dividend+1
  6658  0016CE  0E00               	movlw	0
  6659  0016D0  6E13               	movwf	___awdiv@divisor+1,c
  6660  0016D2  0E20               	movlw	32
  6661  0016D4  6E12               	movwf	___awdiv@divisor,c
  6662  0016D6  EC0B  F00C         	call	___awdiv	;wreg free
  6663  0016DA  C010  F01C         	movff	?___awdiv,load_i2c_registers@checksum
  6664  0016DE  C011  F01D         	movff	?___awdiv+1,load_i2c_registers@checksum+1
  6665                           
  6666                           ;main.c: 314: i2c_r_reg[31] = checksum;
  6667  0016E2  C01C  F07F         	movff	load_i2c_registers@checksum,_i2c_r_reg+31	;volatile
  6668  0016E6  0012               	return		;funcret
  6669  0016E8                     __end_of_load_i2c_registers:
  6670                           	opt stack 0
  6671                           tblptru	equ	0xFF8
  6672                           tblptrh	equ	0xFF7
  6673                           tblptrl	equ	0xFF6
  6674                           tablat	equ	0xFF5
  6675                           prodh	equ	0xFF4
  6676                           prodl	equ	0xFF3
  6677                           intcon	equ	0xFF2
  6678                           indf0	equ	0xFEF
  6679                           postinc0	equ	0xFEE
  6680                           fsr0h	equ	0xFEA
  6681                           fsr0l	equ	0xFE9
  6682                           wreg	equ	0xFE8
  6683                           indf1	equ	0xFE7
  6684                           postdec1	equ	0xFE5
  6685                           plusw1	equ	0xFE3
  6686                           fsr1h	equ	0xFE2
  6687                           fsr1l	equ	0xFE1
  6688                           indf2	equ	0xFDF
  6689                           postinc2	equ	0xFDE
  6690                           plusw2	equ	0xFDB
  6691                           fsr2h	equ	0xFDA
  6692                           fsr2l	equ	0xFD9
  6693                           status	equ	0xFD8
  6694                           
  6695 ;; *************** function ___awdiv *****************
  6696 ;; Defined at:
  6697 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  6698 ;; Parameters:    Size  Location     Type
  6699 ;;  dividend        2   15[COMRAM] int 
  6700 ;;  divisor         2   17[COMRAM] int 
  6701 ;; Auto vars:     Size  Location     Type
  6702 ;;  quotient        2   21[COMRAM] int 
  6703 ;;  sign            1   20[COMRAM] unsigned char 
  6704 ;;  counter         1   19[COMRAM] unsigned char 
  6705 ;; Return value:  Size  Location     Type
  6706 ;;                  2   15[COMRAM] int 
  6707 ;; Registers used:
  6708 ;;		wreg, status,2, status,0
  6709 ;; Tracked objects:
  6710 ;;		On entry : 0/0
  6711 ;;		On exit  : 0/0
  6712 ;;		Unchanged: 0/0
  6713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6714 ;;      Params:         4       0       0       0       0       0       0
  6715 ;;      Locals:         4       0       0       0       0       0       0
  6716 ;;      Temps:          0       0       0       0       0       0       0
  6717 ;;      Totals:         8       0       0       0       0       0       0
  6718 ;;Total ram usage:        8 bytes
  6719 ;; Hardware stack levels used:    1
  6720 ;; Hardware stack levels required when called:    1
  6721 ;; This function calls:
  6722 ;;		Nothing
  6723 ;; This function is called by:
  6724 ;;		_load_i2c_registers
  6725 ;;		_start_routine
  6726 ;;		_running_display
  6727 ;; This function uses a non-reentrant model
  6728 ;;
  6729                           
  6730                           	psect	text17
  6731  001816                     __ptext17:
  6732                           	opt stack 0
  6733  001816                     ___awdiv:
  6734                           	opt stack 28
  6735                           
  6736                           ;incstack = 0
  6737  001816  0E00               	movlw	0
  6738  001818  6E15               	movwf	___awdiv@sign,c
  6739  00181A  AE13               	btfss	___awdiv@divisor+1,7,c
  6740  00181C  D006               	goto	l3824
  6741  00181E  6C12               	negf	___awdiv@divisor,c
  6742  001820  1E13               	comf	___awdiv@divisor+1,f,c
  6743  001822  B0D8               	btfsc	status,0,c
  6744  001824  2A13               	incf	___awdiv@divisor+1,f,c
  6745  001826  0E01               	movlw	1
  6746  001828  6E15               	movwf	___awdiv@sign,c
  6747  00182A                     l3824:
  6748  00182A  AE11               	btfss	___awdiv@dividend+1,7,c
  6749  00182C  D006               	goto	l3830
  6750  00182E  6C10               	negf	___awdiv@dividend,c
  6751  001830  1E11               	comf	___awdiv@dividend+1,f,c
  6752  001832  B0D8               	btfsc	status,0,c
  6753  001834  2A11               	incf	___awdiv@dividend+1,f,c
  6754  001836  0E01               	movlw	1
  6755  001838  1A15               	xorwf	___awdiv@sign,f,c
  6756  00183A                     l3830:
  6757  00183A  0E00               	movlw	0
  6758  00183C  6E17               	movwf	___awdiv@quotient+1,c
  6759  00183E  0E00               	movlw	0
  6760  001840  6E16               	movwf	___awdiv@quotient,c
  6761  001842  5012               	movf	___awdiv@divisor,w,c
  6762  001844  1013               	iorwf	___awdiv@divisor+1,w,c
  6763  001846  B4D8               	btfsc	status,2,c
  6764  001848  D01C               	goto	l3852
  6765  00184A  0E01               	movlw	1
  6766  00184C  6E14               	movwf	___awdiv@counter,c
  6767  00184E  D004               	goto	l3838
  6768  001850                     l3836:
  6769  001850  90D8               	bcf	status,0,c
  6770  001852  3612               	rlcf	___awdiv@divisor,f,c
  6771  001854  3613               	rlcf	___awdiv@divisor+1,f,c
  6772  001856  2A14               	incf	___awdiv@counter,f,c
  6773  001858                     l3838:
  6774  001858  AE13               	btfss	___awdiv@divisor+1,7,c
  6775  00185A  D7FA               	goto	l3836
  6776  00185C                     l3840:
  6777  00185C  90D8               	bcf	status,0,c
  6778  00185E  3616               	rlcf	___awdiv@quotient,f,c
  6779  001860  3617               	rlcf	___awdiv@quotient+1,f,c
  6780  001862  5012               	movf	___awdiv@divisor,w,c
  6781  001864  5C10               	subwf	___awdiv@dividend,w,c
  6782  001866  5013               	movf	___awdiv@divisor+1,w,c
  6783  001868  5811               	subwfb	___awdiv@dividend+1,w,c
  6784  00186A  A0D8               	btfss	status,0,c
  6785  00186C  D005               	goto	l3848
  6786  00186E  5012               	movf	___awdiv@divisor,w,c
  6787  001870  5E10               	subwf	___awdiv@dividend,f,c
  6788  001872  5013               	movf	___awdiv@divisor+1,w,c
  6789  001874  5A11               	subwfb	___awdiv@dividend+1,f,c
  6790  001876  8016               	bsf	___awdiv@quotient,0,c
  6791  001878                     l3848:
  6792  001878  90D8               	bcf	status,0,c
  6793  00187A  3213               	rrcf	___awdiv@divisor+1,f,c
  6794  00187C  3212               	rrcf	___awdiv@divisor,f,c
  6795  00187E  2E14               	decfsz	___awdiv@counter,f,c
  6796  001880  D7ED               	goto	l3840
  6797  001882                     l3852:
  6798  001882  5015               	movf	___awdiv@sign,w,c
  6799  001884  B4D8               	btfsc	status,2,c
  6800  001886  D004               	goto	l3856
  6801  001888  6C16               	negf	___awdiv@quotient,c
  6802  00188A  1E17               	comf	___awdiv@quotient+1,f,c
  6803  00188C  B0D8               	btfsc	status,0,c
  6804  00188E  2A17               	incf	___awdiv@quotient+1,f,c
  6805  001890                     l3856:
  6806  001890  C016  F010         	movff	___awdiv@quotient,?___awdiv
  6807  001894  C017  F011         	movff	___awdiv@quotient+1,?___awdiv+1
  6808  001898  0012               	return	
  6809  00189A                     __end_of___awdiv:
  6810                           	opt stack 0
  6811                           tblptru	equ	0xFF8
  6812                           tblptrh	equ	0xFF7
  6813                           tblptrl	equ	0xFF6
  6814                           tablat	equ	0xFF5
  6815                           prodh	equ	0xFF4
  6816                           prodl	equ	0xFF3
  6817                           intcon	equ	0xFF2
  6818                           indf0	equ	0xFEF
  6819                           postinc0	equ	0xFEE
  6820                           fsr0h	equ	0xFEA
  6821                           fsr0l	equ	0xFE9
  6822                           wreg	equ	0xFE8
  6823                           indf1	equ	0xFE7
  6824                           postdec1	equ	0xFE5
  6825                           plusw1	equ	0xFE3
  6826                           fsr1h	equ	0xFE2
  6827                           fsr1l	equ	0xFE1
  6828                           indf2	equ	0xFDF
  6829                           postinc2	equ	0xFDE
  6830                           plusw2	equ	0xFDB
  6831                           fsr2h	equ	0xFDA
  6832                           fsr2l	equ	0xFD9
  6833                           status	equ	0xFD8
  6834                           
  6835 ;; *************** function _Lcd_Init *****************
  6836 ;; Defined at:
  6837 ;;		line 76 in file "lcd.h"
  6838 ;; Parameters:    Size  Location     Type
  6839 ;;		None
  6840 ;; Auto vars:     Size  Location     Type
  6841 ;;		None
  6842 ;; Return value:  Size  Location     Type
  6843 ;;                  1    wreg      void 
  6844 ;; Registers used:
  6845 ;;		wreg, status,2, cstack
  6846 ;; Tracked objects:
  6847 ;;		On entry : 0/0
  6848 ;;		On exit  : 0/0
  6849 ;;		Unchanged: 0/0
  6850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6851 ;;      Params:         0       0       0       0       0       0       0
  6852 ;;      Locals:         0       0       0       0       0       0       0
  6853 ;;      Temps:          1       0       0       0       0       0       0
  6854 ;;      Totals:         1       0       0       0       0       0       0
  6855 ;;Total ram usage:        1 bytes
  6856 ;; Hardware stack levels used:    1
  6857 ;; Hardware stack levels required when called:    3
  6858 ;; This function calls:
  6859 ;;		_Lcd_Cmd
  6860 ;;		_Lcd_Port
  6861 ;; This function is called by:
  6862 ;;		_main
  6863 ;; This function uses a non-reentrant model
  6864 ;;
  6865                           
  6866                           	psect	text18
  6867  00189A                     __ptext18:
  6868                           	opt stack 0
  6869  00189A                     _Lcd_Init:
  6870                           	opt stack 27
  6871                           
  6872                           ;lcd.h: 78: Lcd_Port(0x00);
  6873                           
  6874                           ;incstack = 0
  6875  00189A  0E00               	movlw	0
  6876  00189C  ECE3  F00D         	call	_Lcd_Port
  6877                           
  6878                           ;lcd.h: 79: _delay((unsigned long)((20)*(16000000/4000.0)));
  6879  0018A0  0E68               	movlw	104
  6880  0018A2  6E12               	movwf	??_Lcd_Init& (0+255),c
  6881  0018A4  0EE4               	movlw	228
  6882  0018A6                     u4887:
  6883  0018A6  2EE8               	decfsz	wreg,f,c
  6884  0018A8  D7FE               	goto	u4887
  6885  0018AA  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
  6886  0018AC  D7FC               	goto	u4887
  6887  0018AE  F000 F000          	nop2	
  6888                           
  6889                           ;lcd.h: 80: Lcd_Cmd(0x03);
  6890  0018B2  0E03               	movlw	3
  6891  0018B4  EC3B  F00E         	call	_Lcd_Cmd
  6892                           
  6893                           ;lcd.h: 81: _delay((unsigned long)((5)*(16000000/4000.0)));
  6894  0018B8  0E1A               	movlw	26
  6895  0018BA  6E12               	movwf	??_Lcd_Init& (0+255),c
  6896  0018BC  0EF8               	movlw	248
  6897  0018BE                     u4897:
  6898  0018BE  2EE8               	decfsz	wreg,f,c
  6899  0018C0  D7FE               	goto	u4897
  6900  0018C2  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
  6901  0018C4  D7FC               	goto	u4897
  6902  0018C6  F000 F000          	nop2	
  6903                           
  6904                           ;lcd.h: 82: Lcd_Cmd(0x03);
  6905  0018CA  0E03               	movlw	3
  6906  0018CC  EC3B  F00E         	call	_Lcd_Cmd
  6907                           
  6908                           ;lcd.h: 83: _delay((unsigned long)((11)*(16000000/4000.0)));
  6909  0018D0  0E3A               	movlw	58
  6910  0018D2  6E12               	movwf	??_Lcd_Init& (0+255),c
  6911  0018D4  0E23               	movlw	35
  6912  0018D6                     u4907:
  6913  0018D6  2EE8               	decfsz	wreg,f,c
  6914  0018D8  D7FE               	goto	u4907
  6915  0018DA  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
  6916  0018DC  D7FC               	goto	u4907
  6917  0018DE  F000               	nop	
  6918                           
  6919                           ;lcd.h: 84: Lcd_Cmd(0x03);
  6920  0018E0  0E03               	movlw	3
  6921  0018E2  EC3B  F00E         	call	_Lcd_Cmd
  6922                           
  6923                           ;lcd.h: 86: Lcd_Cmd(0x02);
  6924  0018E6  0E02               	movlw	2
  6925  0018E8  EC3B  F00E         	call	_Lcd_Cmd
  6926                           
  6927                           ;lcd.h: 87: Lcd_Cmd(0x02);
  6928  0018EC  0E02               	movlw	2
  6929  0018EE  EC3B  F00E         	call	_Lcd_Cmd
  6930                           
  6931                           ;lcd.h: 88: Lcd_Cmd(0x08);
  6932  0018F2  0E08               	movlw	8
  6933  0018F4  EC3B  F00E         	call	_Lcd_Cmd
  6934                           
  6935                           ;lcd.h: 89: Lcd_Cmd(0x00);
  6936  0018F8  0E00               	movlw	0
  6937  0018FA  EC3B  F00E         	call	_Lcd_Cmd
  6938                           
  6939                           ;lcd.h: 90: Lcd_Cmd(0x0C);
  6940  0018FE  0E0C               	movlw	12
  6941  001900  EC3B  F00E         	call	_Lcd_Cmd
  6942                           
  6943                           ;lcd.h: 91: Lcd_Cmd(0x00);
  6944  001904  0E00               	movlw	0
  6945  001906  EC3B  F00E         	call	_Lcd_Cmd
  6946                           
  6947                           ;lcd.h: 92: Lcd_Cmd(0x06);
  6948  00190A  0E06               	movlw	6
  6949  00190C  EC3B  F00E         	call	_Lcd_Cmd
  6950  001910  0012               	return		;funcret
  6951  001912                     __end_of_Lcd_Init:
  6952                           	opt stack 0
  6953                           tblptru	equ	0xFF8
  6954                           tblptrh	equ	0xFF7
  6955                           tblptrl	equ	0xFF6
  6956                           tablat	equ	0xFF5
  6957                           prodh	equ	0xFF4
  6958                           prodl	equ	0xFF3
  6959                           intcon	equ	0xFF2
  6960                           indf0	equ	0xFEF
  6961                           postinc0	equ	0xFEE
  6962                           fsr0h	equ	0xFEA
  6963                           fsr0l	equ	0xFE9
  6964                           wreg	equ	0xFE8
  6965                           indf1	equ	0xFE7
  6966                           postdec1	equ	0xFE5
  6967                           plusw1	equ	0xFE3
  6968                           fsr1h	equ	0xFE2
  6969                           fsr1l	equ	0xFE1
  6970                           indf2	equ	0xFDF
  6971                           postinc2	equ	0xFDE
  6972                           plusw2	equ	0xFDB
  6973                           fsr2h	equ	0xFDA
  6974                           fsr2l	equ	0xFD9
  6975                           status	equ	0xFD8
  6976                           
  6977 ;; *************** function _Lcd_Cmd *****************
  6978 ;; Defined at:
  6979 ;;		line 38 in file "lcd.h"
  6980 ;; Parameters:    Size  Location     Type
  6981 ;;  a               1    wreg     unsigned char 
  6982 ;; Auto vars:     Size  Location     Type
  6983 ;;  a               1   16[COMRAM] unsigned char 
  6984 ;; Return value:  Size  Location     Type
  6985 ;;                  1    wreg      void 
  6986 ;; Registers used:
  6987 ;;		wreg, status,2, cstack
  6988 ;; Tracked objects:
  6989 ;;		On entry : 0/0
  6990 ;;		On exit  : 0/0
  6991 ;;		Unchanged: 0/0
  6992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6993 ;;      Params:         0       0       0       0       0       0       0
  6994 ;;      Locals:         1       0       0       0       0       0       0
  6995 ;;      Temps:          0       0       0       0       0       0       0
  6996 ;;      Totals:         1       0       0       0       0       0       0
  6997 ;;Total ram usage:        1 bytes
  6998 ;; Hardware stack levels used:    1
  6999 ;; Hardware stack levels required when called:    2
  7000 ;; This function calls:
  7001 ;;		_Lcd_Port
  7002 ;; This function is called by:
  7003 ;;		_Lcd_Clear
  7004 ;;		_Lcd_Set_Cursor
  7005 ;;		_Lcd_Init
  7006 ;;		_Lcd_Shift_Right
  7007 ;;		_Lcd_Shift_Left
  7008 ;; This function uses a non-reentrant model
  7009 ;;
  7010                           
  7011                           	psect	text19
  7012  001C76                     __ptext19:
  7013                           	opt stack 0
  7014  001C76                     _Lcd_Cmd:
  7015                           	opt stack 25
  7016                           
  7017                           ;incstack = 0
  7018                           ;Lcd_Cmd@a stored from wreg
  7019  001C76  6E11               	movwf	Lcd_Cmd@a,c
  7020                           
  7021                           ;lcd.h: 40: PORTDbits.RD5 = 0;
  7022  001C78  9A83               	bcf	3971,5,c	;volatile
  7023                           
  7024                           ;lcd.h: 41: Lcd_Port(a);
  7025  001C7A  5011               	movf	Lcd_Cmd@a,w,c
  7026  001C7C  ECE3  F00D         	call	_Lcd_Port
  7027                           
  7028                           ;lcd.h: 42: PORTDbits.RD4 = 1;
  7029  001C80  8883               	bsf	3971,4,c	;volatile
  7030                           
  7031                           ;lcd.h: 44: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7032  001C82  0EC8               	movlw	200
  7033  001C84                     u4917:
  7034  001C84  F000               	nop	
  7035  001C86  2EE8               	decfsz	wreg,f,c
  7036  001C88  D7FD               	goto	u4917
  7037                           
  7038                           ;lcd.h: 45: PORTDbits.RD4 = 0;
  7039  001C8A  9883               	bcf	3971,4,c	;volatile
  7040  001C8C  0012               	return		;funcret
  7041  001C8E                     __end_of_Lcd_Cmd:
  7042                           	opt stack 0
  7043                           tblptru	equ	0xFF8
  7044                           tblptrh	equ	0xFF7
  7045                           tblptrl	equ	0xFF6
  7046                           tablat	equ	0xFF5
  7047                           prodh	equ	0xFF4
  7048                           prodl	equ	0xFF3
  7049                           intcon	equ	0xFF2
  7050                           indf0	equ	0xFEF
  7051                           postinc0	equ	0xFEE
  7052                           fsr0h	equ	0xFEA
  7053                           fsr0l	equ	0xFE9
  7054                           wreg	equ	0xFE8
  7055                           indf1	equ	0xFE7
  7056                           postdec1	equ	0xFE5
  7057                           plusw1	equ	0xFE3
  7058                           fsr1h	equ	0xFE2
  7059                           fsr1l	equ	0xFE1
  7060                           indf2	equ	0xFDF
  7061                           postinc2	equ	0xFDE
  7062                           plusw2	equ	0xFDB
  7063                           fsr2h	equ	0xFDA
  7064                           fsr2l	equ	0xFD9
  7065                           status	equ	0xFD8
  7066                           
  7067 ;; *************** function _Lcd_Port *****************
  7068 ;; Defined at:
  7069 ;;		line 16 in file "lcd.h"
  7070 ;; Parameters:    Size  Location     Type
  7071 ;;  a               1    wreg     unsigned char 
  7072 ;; Auto vars:     Size  Location     Type
  7073 ;;  a               1   15[COMRAM] unsigned char 
  7074 ;; Return value:  Size  Location     Type
  7075 ;;                  1    wreg      void 
  7076 ;; Registers used:
  7077 ;;		wreg
  7078 ;; Tracked objects:
  7079 ;;		On entry : 0/0
  7080 ;;		On exit  : 0/0
  7081 ;;		Unchanged: 0/0
  7082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7083 ;;      Params:         0       0       0       0       0       0       0
  7084 ;;      Locals:         1       0       0       0       0       0       0
  7085 ;;      Temps:          0       0       0       0       0       0       0
  7086 ;;      Totals:         1       0       0       0       0       0       0
  7087 ;;Total ram usage:        1 bytes
  7088 ;; Hardware stack levels used:    1
  7089 ;; Hardware stack levels required when called:    1
  7090 ;; This function calls:
  7091 ;;		Nothing
  7092 ;; This function is called by:
  7093 ;;		_Lcd_Cmd
  7094 ;;		_Lcd_Init
  7095 ;;		_Lcd_Write_Char
  7096 ;; This function uses a non-reentrant model
  7097 ;;
  7098                           
  7099                           	psect	text20
  7100  001BC6                     __ptext20:
  7101                           	opt stack 0
  7102  001BC6                     _Lcd_Port:
  7103                           	opt stack 25
  7104                           
  7105                           ;incstack = 0
  7106                           ;Lcd_Port@a stored from wreg
  7107  001BC6  6E10               	movwf	Lcd_Port@a,c
  7108                           
  7109                           ;lcd.h: 18: if(a & 1)
  7110  001BC8  A010               	btfss	Lcd_Port@a,0,c
  7111  001BCA  D002               	goto	l71
  7112                           
  7113                           ;lcd.h: 19: PORTDbits.RD0 = 1;
  7114  001BCC  8083               	bsf	3971,0,c	;volatile
  7115  001BCE  D001               	goto	l3534
  7116  001BD0                     l71:
  7117                           
  7118                           ;lcd.h: 20: else
  7119                           ;lcd.h: 21: PORTDbits.RD0 = 0;
  7120  001BD0  9083               	bcf	3971,0,c	;volatile
  7121  001BD2                     l3534:
  7122                           
  7123                           ;lcd.h: 23: if(a & 2)
  7124  001BD2  A210               	btfss	Lcd_Port@a,1,c
  7125  001BD4  D002               	goto	l73
  7126                           
  7127                           ;lcd.h: 24: PORTDbits.RD1 = 1;
  7128  001BD6  8283               	bsf	3971,1,c	;volatile
  7129  001BD8  D001               	goto	l3538
  7130  001BDA                     l73:
  7131                           
  7132                           ;lcd.h: 25: else
  7133                           ;lcd.h: 26: PORTDbits.RD1 = 0;
  7134  001BDA  9283               	bcf	3971,1,c	;volatile
  7135  001BDC                     l3538:
  7136                           
  7137                           ;lcd.h: 28: if(a & 4)
  7138  001BDC  A410               	btfss	Lcd_Port@a,2,c
  7139  001BDE  D002               	goto	l75
  7140                           
  7141                           ;lcd.h: 29: PORTDbits.RD2 = 1;
  7142  001BE0  8483               	bsf	3971,2,c	;volatile
  7143  001BE2  D001               	goto	l3542
  7144  001BE4                     l75:
  7145                           
  7146                           ;lcd.h: 30: else
  7147                           ;lcd.h: 31: PORTDbits.RD2 = 0;
  7148  001BE4  9483               	bcf	3971,2,c	;volatile
  7149  001BE6                     l3542:
  7150                           
  7151                           ;lcd.h: 33: if(a & 8)
  7152  001BE6  A610               	btfss	Lcd_Port@a,3,c
  7153  001BE8  D002               	goto	l77
  7154                           
  7155                           ;lcd.h: 34: PORTDbits.RD3 = 1;
  7156  001BEA  8683               	bsf	3971,3,c	;volatile
  7157  001BEC  0012               	return	
  7158  001BEE                     l77:
  7159                           
  7160                           ;lcd.h: 35: else
  7161                           ;lcd.h: 36: PORTDbits.RD3 = 0;
  7162  001BEE  9683               	bcf	3971,3,c	;volatile
  7163  001BF0  0012               	return	
  7164  001BF2                     __end_of_Lcd_Port:
  7165                           	opt stack 0
  7166                           tblptru	equ	0xFF8
  7167                           tblptrh	equ	0xFF7
  7168                           tblptrl	equ	0xFF6
  7169                           tablat	equ	0xFF5
  7170                           prodh	equ	0xFF4
  7171                           prodl	equ	0xFF3
  7172                           intcon	equ	0xFF2
  7173                           indf0	equ	0xFEF
  7174                           postinc0	equ	0xFEE
  7175                           fsr0h	equ	0xFEA
  7176                           fsr0l	equ	0xFE9
  7177                           wreg	equ	0xFE8
  7178                           indf1	equ	0xFE7
  7179                           postdec1	equ	0xFE5
  7180                           plusw1	equ	0xFE3
  7181                           fsr1h	equ	0xFE2
  7182                           fsr1l	equ	0xFE1
  7183                           indf2	equ	0xFDF
  7184                           postinc2	equ	0xFDE
  7185                           plusw2	equ	0xFDB
  7186                           fsr2h	equ	0xFDA
  7187                           fsr2l	equ	0xFD9
  7188                           status	equ	0xFD8
  7189                           
  7190 ;; *************** function _ISR *****************
  7191 ;; Defined at:
  7192 ;;		line 320 in file "main.c"
  7193 ;; Parameters:    Size  Location     Type
  7194 ;;		None
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;  sspBuf          1   14[COMRAM] unsigned char 
  7197 ;; Return value:  Size  Location     Type
  7198 ;;                  1    wreg      void 
  7199 ;; Registers used:
  7200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7201 ;; Tracked objects:
  7202 ;;		On entry : 0/0
  7203 ;;		On exit  : 0/0
  7204 ;;		Unchanged: 0/0
  7205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7206 ;;      Params:         0       0       0       0       0       0       0
  7207 ;;      Locals:         1       0       0       0       0       0       0
  7208 ;;      Temps:         14       0       0       0       0       0       0
  7209 ;;      Totals:        15       0       0       0       0       0       0
  7210 ;;Total ram usage:       15 bytes
  7211 ;; Hardware stack levels used:    1
  7212 ;; This function calls:
  7213 ;;		Nothing
  7214 ;; This function is called by:
  7215 ;;		Interrupt level 2
  7216 ;; This function uses a non-reentrant model
  7217 ;;
  7218                           
  7219                           	psect	intcode
  7220  000008                     __pintcode:
  7221                           	opt stack 0
  7222  000008                     _ISR:
  7223                           	opt stack 25
  7224                           
  7225                           ;incstack = 0
  7226  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7227  00000A  CFFA F001          	movff	pclath,??_ISR
  7228  00000E  CFFB F002          	movff	pclatu,??_ISR+1
  7229  000012  CFE9 F003          	movff	fsr0l,??_ISR+2
  7230  000016  CFEA F004          	movff	fsr0h,??_ISR+3
  7231  00001A  CFE1 F005          	movff	fsr1l,??_ISR+4
  7232  00001E  CFE2 F006          	movff	fsr1h,??_ISR+5
  7233  000022  CFD9 F007          	movff	fsr2l,??_ISR+6
  7234  000026  CFDA F008          	movff	fsr2h,??_ISR+7
  7235  00002A  CFF3 F009          	movff	prodl,??_ISR+8
  7236  00002E  CFF4 F00A          	movff	prodh,??_ISR+9
  7237  000032  CFF6 F00B          	movff	tblptrl,??_ISR+10
  7238  000036  CFF7 F00C          	movff	tblptrh,??_ISR+11
  7239  00003A  CFF8 F00D          	movff	tblptru,??_ISR+12
  7240  00003E  CFF5 F00E          	movff	tablat,??_ISR+13
  7241                           
  7242                           ;main.c: 322: unsigned char sspBuf;
  7243                           ;main.c: 324: if (PIR1bits.SSPIF) {
  7244  000042  A69E               	btfss	3998,3,c	;volatile
  7245  000044  D03E               	goto	i2l294
  7246                           
  7247                           ;main.c: 326: if (!SSPSTATbits.D_NOT_A) {
  7248  000046  BAC7               	btfsc	4039,5,c	;volatile
  7249  000048  D013               	goto	i2l3502
  7250                           
  7251                           ;main.c: 330: i2c_byte_count = 0;
  7252  00004A  0E00               	movlw	0
  7253  00004C  6E4E               	movwf	_i2c_byte_count,c	;volatile
  7254                           
  7255                           ;main.c: 332: if (SSPSTATbits.BF) {
  7256  00004E  B0C7               	btfsc	4039,0,c	;volatile
  7257                           
  7258                           ;main.c: 334: sspBuf = SSPBUF;
  7259  000050  CFC9 F00F          	movff	4041,ISR@sspBuf	;volatile
  7260                           
  7261                           ;main.c: 335: }
  7262                           ;main.c: 337: if (SSPSTATbits.R_NOT_W) {
  7263  000054  A4C7               	btfss	4039,2,c	;volatile
  7264  000056  D031               	goto	i2l3524
  7265                           
  7266                           ;main.c: 339: SSPCON1bits.WCOL = 0;
  7267  000058  9EC6               	bcf	4038,7,c	;volatile
  7268                           
  7269                           ;main.c: 340: SSPBUF = i2c_r_reg[i2c_reg_addr++];
  7270  00005A  504F               	movf	_i2c_reg_addr,w,c	;volatile
  7271  00005C  0D01               	mullw	1
  7272  00005E  0E60               	movlw	low _i2c_r_reg
  7273  000060  24F3               	addwf	prodl,w,c
  7274  000062  6ED9               	movwf	fsr2l,c
  7275  000064  0E00               	movlw	high _i2c_r_reg
  7276  000066  20F4               	addwfc	prodh,w,c
  7277  000068  6EDA               	movwf	fsr2h,c
  7278  00006A  50DF               	movf	indf2,w,c
  7279  00006C  6EC9               	movwf	4041,c	;volatile
  7280  00006E  D024               	goto	i2l3522
  7281  000070                     i2l3502:
  7282                           
  7283                           ;main.c: 347: i2c_byte_count++;
  7284  000070  2A4E               	incf	_i2c_byte_count,f,c	;volatile
  7285                           
  7286                           ;main.c: 349: if (SSPSTATbits.BF) {
  7287  000072  B0C7               	btfsc	4039,0,c	;volatile
  7288                           
  7289                           ;main.c: 350: sspBuf = SSPBUF;
  7290  000074  CFC9 F00F          	movff	4041,ISR@sspBuf	;volatile
  7291                           
  7292                           ;main.c: 351: }
  7293                           ;main.c: 353: if (SSPSTATbits.R_NOT_W) {
  7294  000078  A4C7               	btfss	4039,2,c	;volatile
  7295  00007A  D00E               	goto	i2l3516
  7296                           
  7297                           ;main.c: 356: SSPCON1bits.WCOL = 0;
  7298  00007C  9EC6               	bcf	4038,7,c	;volatile
  7299                           
  7300                           ;main.c: 357: SSPBUF = i2c_r_reg[i2c_reg_addr++];
  7301  00007E  504F               	movf	_i2c_reg_addr,w,c	;volatile
  7302  000080  0D01               	mullw	1
  7303  000082  0E60               	movlw	low _i2c_r_reg
  7304  000084  24F3               	addwf	prodl,w,c
  7305  000086  6ED9               	movwf	fsr2l,c
  7306  000088  0E00               	movlw	high _i2c_r_reg
  7307  00008A  20F4               	addwfc	prodh,w,c
  7308  00008C  6EDA               	movwf	fsr2h,c
  7309  00008E  50DF               	movf	indf2,w,c
  7310  000090  6EC9               	movwf	4041,c	;volatile
  7311  000092  2A4F               	incf	_i2c_reg_addr,f,c	;volatile
  7312                           
  7313                           ;main.c: 358: LATDbits.LATD6 = 1;
  7314  000094  8C8C               	bsf	3980,6,c	;volatile
  7315                           
  7316                           ;main.c: 360: } else {
  7317  000096  D011               	goto	i2l3524
  7318  000098                     i2l3516:
  7319                           
  7320                           ;main.c: 362: if (i2c_byte_count == 1) {
  7321  000098  044E               	decf	_i2c_byte_count,w,c	;volatile
  7322  00009A  A4D8               	btfss	status,2,c
  7323  00009C  D003               	goto	i2l3520
  7324                           
  7325                           ;main.c: 364: i2c_reg_addr = sspBuf;
  7326  00009E  C00F  F04F         	movff	ISR@sspBuf,_i2c_reg_addr	;volatile
  7327                           
  7328                           ;main.c: 366: } else {
  7329  0000A2  D00B               	goto	i2l3524
  7330  0000A4                     i2l3520:
  7331                           
  7332                           ;main.c: 369: i2c_w_reg[i2c_reg_addr++] = sspBuf;
  7333  0000A4  504F               	movf	_i2c_reg_addr,w,c	;volatile
  7334  0000A6  0D01               	mullw	1
  7335  0000A8  0E00               	movlw	low _i2c_w_reg
  7336  0000AA  24F3               	addwf	prodl,w,c
  7337  0000AC  6ED9               	movwf	fsr2l,c
  7338  0000AE  0E01               	movlw	high _i2c_w_reg
  7339  0000B0  20F4               	addwfc	prodh,w,c
  7340  0000B2  6EDA               	movwf	fsr2h,c
  7341  0000B4  C00F  FFDF         	movff	ISR@sspBuf,indf2
  7342  0000B8                     i2l3522:
  7343  0000B8  2A4F               	incf	_i2c_reg_addr,f,c	;volatile
  7344  0000BA                     i2l3524:
  7345                           
  7346                           ;main.c: 370: }
  7347                           ;main.c: 371: }
  7348                           ;main.c: 372: }
  7349                           ;main.c: 374: i2c_reg_addr %= sizeof(i2c_r_reg);
  7350  0000BA  0E1F               	movlw	31
  7351  0000BC  164F               	andwf	_i2c_reg_addr,f,c	;volatile
  7352                           
  7353                           ;main.c: 377: PIR1bits.SSPIF = 0;
  7354  0000BE  969E               	bcf	3998,3,c	;volatile
  7355                           
  7356                           ;main.c: 378: SSPCON1bits.CKP = 1;
  7357  0000C0  88C6               	bsf	4038,4,c	;volatile
  7358  0000C2                     i2l294:
  7359  0000C2  C00E  FFF5         	movff	??_ISR+13,tablat
  7360  0000C6  C00D  FFF8         	movff	??_ISR+12,tblptru
  7361  0000CA  C00C  FFF7         	movff	??_ISR+11,tblptrh
  7362  0000CE  C00B  FFF6         	movff	??_ISR+10,tblptrl
  7363  0000D2  C00A  FFF4         	movff	??_ISR+9,prodh
  7364  0000D6  C009  FFF3         	movff	??_ISR+8,prodl
  7365  0000DA  C008  FFDA         	movff	??_ISR+7,fsr2h
  7366  0000DE  C007  FFD9         	movff	??_ISR+6,fsr2l
  7367  0000E2  C006  FFE2         	movff	??_ISR+5,fsr1h
  7368  0000E6  C005  FFE1         	movff	??_ISR+4,fsr1l
  7369  0000EA  C004  FFEA         	movff	??_ISR+3,fsr0h
  7370  0000EE  C003  FFE9         	movff	??_ISR+2,fsr0l
  7371  0000F2  C002  FFFB         	movff	??_ISR+1,pclatu
  7372  0000F6  C001  FFFA         	movff	??_ISR,pclath
  7373  0000FA  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7374  0000FC  0011               	retfie		f
  7375  0000FE                     __end_of_ISR:
  7376                           	opt stack 0
  7377                           pclatu	equ	0xFFB
  7378                           pclath	equ	0xFFA
  7379                           tblptru	equ	0xFF8
  7380                           tblptrh	equ	0xFF7
  7381                           tblptrl	equ	0xFF6
  7382                           tablat	equ	0xFF5
  7383                           prodh	equ	0xFF4
  7384                           prodl	equ	0xFF3
  7385                           intcon	equ	0xFF2
  7386                           indf0	equ	0xFEF
  7387                           postinc0	equ	0xFEE
  7388                           fsr0h	equ	0xFEA
  7389                           fsr0l	equ	0xFE9
  7390                           wreg	equ	0xFE8
  7391                           indf1	equ	0xFE7
  7392                           postdec1	equ	0xFE5
  7393                           plusw1	equ	0xFE3
  7394                           fsr1h	equ	0xFE2
  7395                           fsr1l	equ	0xFE1
  7396                           indf2	equ	0xFDF
  7397                           postinc2	equ	0xFDE
  7398                           plusw2	equ	0xFDB
  7399                           fsr2h	equ	0xFDA
  7400                           fsr2l	equ	0xFD9
  7401                           status	equ	0xFD8
  7402                           pclatu	equ	0xFFB
  7403                           pclath	equ	0xFFA
  7404                           tblptru	equ	0xFF8
  7405                           tblptrh	equ	0xFF7
  7406                           tblptrl	equ	0xFF6
  7407                           tablat	equ	0xFF5
  7408                           prodh	equ	0xFF4
  7409                           prodl	equ	0xFF3
  7410                           intcon	equ	0xFF2
  7411                           indf0	equ	0xFEF
  7412                           postinc0	equ	0xFEE
  7413                           fsr0h	equ	0xFEA
  7414                           fsr0l	equ	0xFE9
  7415                           wreg	equ	0xFE8
  7416                           indf1	equ	0xFE7
  7417                           postdec1	equ	0xFE5
  7418                           plusw1	equ	0xFE3
  7419                           fsr1h	equ	0xFE2
  7420                           fsr1l	equ	0xFE1
  7421                           indf2	equ	0xFDF
  7422                           postinc2	equ	0xFDE
  7423                           plusw2	equ	0xFDB
  7424                           fsr2h	equ	0xFDA
  7425                           fsr2l	equ	0xFD9
  7426                           status	equ	0xFD8
  7427                           
  7428                           	psect	rparam
  7429  0000                     pclatu	equ	0xFFB
  7430                           pclath	equ	0xFFA
  7431                           tblptru	equ	0xFF8
  7432                           tblptrh	equ	0xFF7
  7433                           tblptrl	equ	0xFF6
  7434                           tablat	equ	0xFF5
  7435                           prodh	equ	0xFF4
  7436                           prodl	equ	0xFF3
  7437                           intcon	equ	0xFF2
  7438                           indf0	equ	0xFEF
  7439                           postinc0	equ	0xFEE
  7440                           fsr0h	equ	0xFEA
  7441                           fsr0l	equ	0xFE9
  7442                           wreg	equ	0xFE8
  7443                           indf1	equ	0xFE7
  7444                           postdec1	equ	0xFE5
  7445                           plusw1	equ	0xFE3
  7446                           fsr1h	equ	0xFE2
  7447                           fsr1l	equ	0xFE1
  7448                           indf2	equ	0xFDF
  7449                           postinc2	equ	0xFDE
  7450                           plusw2	equ	0xFDB
  7451                           fsr2h	equ	0xFDA
  7452                           fsr2l	equ	0xFD9
  7453                           status	equ	0xFD8
  7454                           
  7455                           	psect	temp
  7456  000050                     btemp:
  7457                           	opt stack 0
  7458  000050                     	ds	1
  7459  0000                     int$flags	set	btemp
  7460                           pclatu	equ	0xFFB
  7461                           pclath	equ	0xFFA
  7462                           tblptru	equ	0xFF8
  7463                           tblptrh	equ	0xFF7
  7464                           tblptrl	equ	0xFF6
  7465                           tablat	equ	0xFF5
  7466                           prodh	equ	0xFF4
  7467                           prodl	equ	0xFF3
  7468                           intcon	equ	0xFF2
  7469                           indf0	equ	0xFEF
  7470                           postinc0	equ	0xFEE
  7471                           fsr0h	equ	0xFEA
  7472                           fsr0l	equ	0xFE9
  7473                           wreg	equ	0xFE8
  7474                           indf1	equ	0xFE7
  7475                           postdec1	equ	0xFE5
  7476                           plusw1	equ	0xFE3
  7477                           fsr1h	equ	0xFE2
  7478                           fsr1l	equ	0xFE1
  7479                           indf2	equ	0xFDF
  7480                           postinc2	equ	0xFDE
  7481                           plusw2	equ	0xFDB
  7482                           fsr2h	equ	0xFDA
  7483                           fsr2l	equ	0xFD9
  7484                           status	equ	0xFD8


Data Sizes:
    Strings     341
    Constant    0
    Data        135
    BSS         38
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     52      79
    BANK0           160     44     118
    BANK1           256     43     117
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    start_routine@error_msg	PTR unsigned char  size(2) Largest target is 17
		 -> STR_26(CODE[17]), STR_25(CODE[17]), 

    latch_keypad@x	PTR unsigned char  size(2) Largest target is 1
		 -> start_routine@x(BANK0[1]), main@x(BANK1[1]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 1535
		 -> STR_28(CODE[17]), STR_27(CODE[6]), STR_26(CODE[17]), STR_25(CODE[17]), 
		 -> STR_24(CODE[17]), STR_23(CODE[2]), STR_22(CODE[5]), STR_21(CODE[17]), 
		 -> STR_20(CODE[17]), STR_19(CODE[17]), STR_18(CODE[17]), STR_17(CODE[17]), 
		 -> STR_16(CODE[11]), STR_15(CODE[6]), STR_14(CODE[5]), STR_13(CODE[17]), 
		 -> STR_12(CODE[17]), STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), 
		 -> STR_8(CODE[17]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), 
		 -> STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[2]), 
		 -> RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    _main->_start_routine
    _start_routine->_menu_progress_bar
    _running_display->_menu_progress_bar
    _menu_progress_bar->___wmul
    ___wmul->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _mcu_initialise->_Eeprom_Read_Byte
    _load_i2c_registers->___awdiv
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_start_routine

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                51    51      0   72027
                                             36 BANK0      8     8      0
                                              0 BANK1     43    43      0
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                       _latch_keypad
                 _load_i2c_registers
                     _mcu_initialise
                  _menu_progress_bar
                        _read_keypad
                    _running_display
                      _start_routine
 ---------------------------------------------------------------------------------
 (1) _start_routine                                       40    40      0   24286
                                             48 COMRAM     4     4      0
                                              0 BANK0     36    36      0
                  _Eeprom_Write_Byte
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awdiv
                       _latch_keypad
                  _menu_progress_bar
                        _read_keypad
 ---------------------------------------------------------------------------------
 (2) _latch_keypad                                         4     2      2     524
                                             15 COMRAM     4     2      2
                        _read_keypad
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Write_Byte                                    2     1      1     139
                                             15 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _running_display                                     37    37      0   22856
                                             48 COMRAM     3     3      0
                                              0 BANK0     34    34      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awdiv
                            ___awmod
                  _menu_progress_bar
                        _read_keypad
 ---------------------------------------------------------------------------------
 (2) _read_keypad                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _menu_progress_bar                                   20    18      2   11040
                                             28 COMRAM    20    18      2
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     848
                                             22 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1781
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_String                                     6     4      2    2540
                                             19 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_Char                                       3     3      0     254
                                             16 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Set_Cursor                                       5     4      1    4549
                                             17 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Clear                                            1     1      0     155
                                             17 COMRAM     1     1      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1049
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _mcu_initialise                                       0     0      0      31
                   _Eeprom_Read_Byte
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Read_Byte                                     1     1      0      31
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _load_i2c_registers                                  12    12      0    2877
                                             23 COMRAM    12    12      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2447
                                             15 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     279
                                             17 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Cmd                                              1     1      0     155
                                             16 COMRAM     1     1      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (5) _Lcd_Port                                             1     1      0     124
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 15    15      0      46
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _latch_keypad
     _read_keypad
   _load_i2c_registers
     ___awdiv
   _mcu_initialise
     _Eeprom_Read_Byte
   _menu_progress_bar
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___lwdiv
     ___wmul
       ___lwdiv (ARG)
   _read_keypad
   _running_display
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___awdiv
     ___awmod
     _menu_progress_bar
       _Lcd_Clear
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Write_Char
         _Lcd_Port
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___lwdiv
       ___wmul
         ___lwdiv (ARG)
     _read_keypad
   _start_routine
     _Eeprom_Write_Byte
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___awdiv
     _latch_keypad
       _read_keypad
     _menu_progress_bar
       _Lcd_Clear
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Write_Char
         _Lcd_Port
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___lwdiv
       ___wmul
         ___lwdiv (ARG)
     _read_keypad

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     2B      75       7       45.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2C      76       5       73.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     34      4F       1       84.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13A      15        0.0%
DATA                 0      0     13A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Oct 14 21:48:58 2016

                             _c 0080                  start_routine@a 00B0                  start_routine@b 00A6  
                start_routine@h 0094                  start_routine@i 009A                  start_routine@l 0095  
                start_routine@n 00B6                  start_routine@v 0099                  start_routine@x 00B5  
                   _SSPSTATbits 000FC7                              l71 1BD0                              l73 1BDA  
                            l75 1BE4                              l77 1BEE                    ___awdiv@sign 0015  
                            _hx 0120                 start_routine@d1 0098             ___wmul@multiplicand 0019  
               start_routine@dh 00B4                 start_routine@dt 00B1     __size_of_load_i2c_registers 00EC  
                  __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000  
        __size_of_start_routine 0780                    __CFG_CP3$OFF 000000                             l330 1060  
                           l155 1C32                             l260 173C                             l149 1C9A  
                           l261 1748                             l229 080A                             l254 16FC  
                           l263 1764                             l264 1770                             l256 1708  
                           l265 177C                             l257 1714                             l259 1730  
                           l767 1A3C                    __CFG_CPB$OFF 000000                    __CFG_CPD$OFF 000000  
                           _ISR 0008                    __CFG_BORV$30 000000                    ___awmod@sign 0015  
                           prod 000FF3                             wreg 000FE8         Eeprom_Read_Byte@address 0010  
       __end_of_running_display 1490                    __CFG_LVP$OFF 000000                            ?_ISR 0001  
                          l4000 0AF4                            l4030 0C58                            l4022 0C28  
                          l4200 10AA                            l4112 0E30                            l4104 0E02  
                          l4210 10E8                            l4106 0E0A                            l4026 0C3E  
                          l4300 11DE                            l4204 10C4                            l4132 0EA8  
                          l4108 0E1A                            l4052 0CC2                            l4222 112A  
                          l4206 10D4                            l4118 0E5E                            l4062 0D00  
                          l4320 1234                            l4232 1164                            l4240 118C  
                          l4250 1614                            l3602 1950                            l4330 1284  
                          l4314 1220                            l4226 1144                            l4218 1114  
                          l4162 0FA0                            l4138 0EC0                            l4242 1196  
                          l4340 12B8                            l4324 1240                            l4308 1200  
                          l4228 114E                            l4500 01A8                            l3542 1BE6  
                          l3534 1BD2                            l4270 1698                            l4262 164E  
                          l4246 1604                            l4350 12F4                            l4334 129A  
                          l4318 1228                            l4238 1180                            l4158 0F8A  
                          l4086 0D90                            l4280 16C6                            l4256 1636  
                          l3704 1A0A                            l3632 1720                            l4184 103A  
                          l4168 0FBE                            l3538 1BDC                            l4274 16A8  
                          l4258 163E                            l3706 1A12                            l3730 14FC  
                          l3810 1B24                            l4506 01EC                            l4268 1688  
                          l3716 1A32                            l3708 1A16                            l3660 1754  
                          l3812 1B36                            l4196 1094                            l3830 183A  
                          l3750 1570                            l3734 150C                            l3726 14EC  
                          l4702 08BE                            l4550 031E                            l4518 022A  
                          l3840 185C                            l3824 182A                            l3744 1552  
                          l4384 145E                            l4296 11C8                            l4720 0920  
                          l3762 15AA                            l3754 1580                            l3738 1526  
                          l4386 1468                            l4650 0700                            l4570 03D2  
                          l4482 0120                            l3836 1850                            l3852 1882  
                          l3588 1AC0                            l3772 15C6                            l4740 0994  
                          l4724 0938                            l4716 090A                            l4628 0642  
                          l4572 03DE                            l3838 1858                            l3598 191C  
                          l3782 15F6                            l3774 15CE                            l3766 15BA  
                          l3758 1598                            l4726 093E                            l4654 078E  
                          l4646 06EC                            l4494 0188                            l3856 1890  
                          l3848 1878                            l3880 19BE                            l3872 19A4  
                          l3688 1788                            l4752 09E2                            l4736 097E  
                          l4744 09AC                            l4680 082E                            l4664 07D8  
                          l4648 06F4                            l4568 03CA                            l4496 0192  
                          l4760 0A10                            l4488 0148                            l3778 15DE  
                          l4594 053C                            l4578 04C8                            l3892 19EA  
                          l3884 19D2                            l3876 19B2                            l3868 1998  
                          l3972 0A58                            l4756 09F8                            l4692 088C  
                          l4676 0818                            l4668 07EE                            l3878 19BA  
                          l4686 086E                            l3888 19DC                            l3992 0ACE  
                          l3984 0A9E                            l3976 0A72                            l3968 0A42  
                          l4696 08A2                            l3988 0AB4                            STR_2 7EA9  
                          STR_3 7EFE                            STR_4 7EBA                            STR_5 7F42  
                          STR_6 7EBA                            STR_7 7FCA                            STR_8 7F20  
                          STR_9 7FB9                            _LATC 000F8B                            u3250 1948  
                          u3260 197C                            u4310 0144                            u4320 0184  
                          u3257 193E                            u4161 12EA                            u3267 1972  
                          u3435 14AE                            u4181 1320                            u4191 133E  
                          u4451 0550                            u3940 1060                            u4717 0928  
                          u4807 1B2A                            u4727 099C                            u4817 1302  
                          u4737 0A00                            u4907 18D6                            u4827 1512  
                          u4747 0A5E                            u4917 1C84                            u4837 1586  
                          u4757 0ABA                            u4847 15E4                            u4767 0C44  
                          u4857 1B76                            u4777 1040                            u4867 1B88  
                          u4787 10B0                            u4877 1C4E                            u4797 1130  
                          u4887 18A6                            u4897 18BE               ?_Lcd_Write_String 0014  
                          _main 0102                            fsr0h 000FEA                            fsr1h 000FE2  
                          indf0 000FEF                            fsr0l 000FE9                            fsr2h 000FDA  
                          indf1 000FE7                            fsr1l 000FE1                            indf2 000FDF  
                          fsr2l 000FD9                            btemp 0050                            pclat 000FFA  
                          prodh 000FF4                            prodl 000FF3                            start 00FE  
            ??_Lcd_Write_String 0016                   __CFG_IESO$OFF 000000                 __end_of_Lcd_Cmd 1C8E  
                 __CFG_MCLRE$ON 000000                    ___param_bank 000010                           ??_ISR 0001  
                         ?_main 0001                 __end_of___awdiv 189A                           _EEADR 000FA9  
                         STR_10 7EDC                           STR_11 7F97                           STR_12 7EDC  
                         STR_20 7FA8                           STR_21 7F31                           STR_13 7ECB  
                         STR_22 7FF7                           STR_14 7FF2                           STR_23 7FFC  
                         STR_15 7FE6                           STR_16 7FDB                           STR_24 7F86  
                         STR_25 7F53                           STR_17 7F0F                           STR_18 7F64  
                         STR_26 7EED                           STR_27 7FEC                           STR_19 7F31  
                         STR_28 7F75                 __end_of___awmod 19F4                 ___awdiv@divisor 0012  
               __end_of___lwdiv 1A46                           i2l294 00C2                 ___awdiv@counter 0014  
                         _PORTB 000F81         __size_of_Lcd_Set_Cursor 0050                           _TRISA 000F92  
                         _TRISB 000F93                           _TRISC 000F94                           _TRISD 000F95  
                _i2c_byte_count 004E                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 ?_latch_keypad 0010                   __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000  
                 __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
                __CFG_EBTR1$OFF 000000                      _Machine_ID 00D5                  __CFG_EBTR2$OFF 000000  
            start_routine@F3719 008F                  __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                    ?_read_keypad 0001  
                __CFG_EBTRB$OFF 000000                           main@c 013A                           main@i 015A  
                         main@n 0163                           main@p 0162                           main@u 015E  
                         main@x 0164                           tablat 000FF5              start_routine@i_902 00A2  
            start_routine@i_905 00A4              start_routine@i_906 00AB              start_routine@i_881 009E  
            start_routine@i_873 009C              start_routine@i_893 00B2              start_routine@i_896 00A9  
            start_routine@i_899 00A0         load_i2c_registers@i_837 0022         load_i2c_registers@i_839 001E  
                 _start_routine 0A1E                           plusw1 000FE3                           plusw2 000FDB  
                         status 000FD8   menu_progress_bar@load_time_ms 001D                  __CFG_HFOFST$ON 000000  
              __end_of_Lcd_Init 1912                __end_of_Lcd_Port 1BF2                 __initialization 178C  
                  __end_of_main 0A1E                          ??_main 00B8              __size_of_Lcd_Clear 0020  
                 __activetblptr 000002            _credentials_accepted 00D3                  ??_latch_keypad 0012  
              ?_running_display 0001                          _EEDATA 000FA8                          _EECON2 000FA7  
              ___awdiv@dividend 0010                  ?_start_routine 0001                          i2l3502 0070  
                __CFG_WDTEN$OFF 000000                          i2l3520 00A4                          i2l3522 00B8  
                        i2l3516 0098                          i2l3524 00BA                          _OSCCON 000FD3  
                     ??_Lcd_Cmd 0011         __size_of_Lcd_Write_Char 0038                          _SSPADD 000FC8  
                        _SSPBUF 000FC9                  __CFG_XINST$OFF 000000                          ___wmul 1BF2  
                     ??___awdiv 0014                  __CFG_STVREN$ON 000000                       ??___awmod 0014  
                     ??___lwdiv 0014               ?_Eeprom_Read_Byte 0001                          clear_0 1792  
                        clear_1 179E                ___awdiv@quotient 0016                 ___awmod@divisor 0012  
               ___awmod@counter 0014              ??_Eeprom_Read_Byte 0010                    __pdataCOMRAM 0035  
                  __mediumconst 7EA8                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                 Lcd_Set_Cursor@a 0013                 Lcd_Set_Cursor@b 0012  
               Lcd_Set_Cursor@y 0015                 Lcd_Set_Cursor@z 0014                      __accesstop 0060  
       __end_of__initialization 1808                 __CFG_PBADEN$OFF 000000               __end_of_Lcd_Clear 1C5C  
                 ___rparam_used 000001               _menu_progress_bar 1490                  __pcstackCOMRAM 0001  
                  __pidataBANK0 1B92                    __pidataBANK1 1AE8              ?_menu_progress_bar 001D  
          running_display@F3742 008A            running_display@F3745 0130                  _Lcd_Set_Cursor 1A98  
           ??_menu_progress_bar 001F            running_display@i_912 00A6            running_display@i_913 00AE  
                  _EEP_I2C_ADDR 00D2                       ?_Lcd_Init 0001                       ?_Lcd_Port 0001  
               ??_start_routine 0031            __size_of_read_keypad 00A4                      __pbssBANK0 00C0  
                    __pbssBANK1 0165       __end_of_menu_progress_bar 15FC              running_display@n_c 00A9  
                     ISR@sspBuf 000F            __end_of_latch_keypad 1B5A                         ?___wmul 0017  
    __end_of_load_i2c_registers 16E8    start_routine@new_I2C_address 00B7       __size_of_Lcd_Write_String 0072  
        __end_of_Lcd_Set_Cursor 1AE8          menu_progress_bar@i_726 002B          menu_progress_bar@i_727 002D  
        menu_progress_bar@i_728 002F                      ??_Lcd_Init 0012                      ??_Lcd_Port 0010  
                       _SSPCON1 000FC6                         _SSPCON2 000FC5         __size_of_mcu_initialise 0052  
                       _SSPSTAT 000FC7                  _Lcd_Write_Char 1B5A                         _Lcd_Cmd 1C76  
                       __Hparam 0000                         __Lparam 0000                         ___awdiv 1816  
                       ___awmod 1984                 __size_of___wmul 0026                         ___lwdiv 19F4  
                       __pcinit 178C                         __ramtop 0600                 ?_Lcd_Set_Cursor 0012  
                       __ptext0 0102                         __ptext1 0A1E                         __ptext2 1B22  
                       __ptext3 1C18                         __ptext4 119E                         __ptext5 16E8  
                       __ptext6 1490                         __ptext7 1BF2                         __ptext8 19F4  
                       __ptext9 1912             menu_progress_bar@ii 0027                    __size_of_ISR 00F6  
              ___awmod@dividend 0010          __end_of_Lcd_Write_Char 1B92            end_of_initialization 1808  
                 __Lmediumconst 7EA8      __size_of_menu_progress_bar 016C                   _login_timeout 0092  
                       postdec1 000FE5                         postinc0 000FEE                         postinc2 000FDE  
                     Lcd_Port@a 0010                       _PORTBbits 000F81                       _PORTDbits 000F83  
               ?_Lcd_Write_Char 0001       __size_of_Eeprom_Read_Byte 0014               Lcd_Write_String@a 0014  
             Lcd_Write_String@i 0018           __size_of_latch_keypad 0038                      main@buffer 0144  
      __size_of_running_display 02F2                    _i2c_reg_addr 004F                   latch_keypad@x 0010  
                     _Lcd_Clear 1C3C                  __end_of___wmul 1C18                _Lcd_Write_String 1912  
                 __pidataCOMRAM 1C5C               _Eeprom_Write_Byte 1C18              ?_Eeprom_Write_Byte 0010  
           start_initialization 178C                    _latch_keypad 1B22                     __end_of_ISR 00FE  
                     _i2c_r_reg 0060                       _i2c_w_reg 0100                  _mcu_initialise 1A46  
           ??_Eeprom_Write_Byte 0011               __size_of_Lcd_Init 0078               __size_of_Lcd_Port 002C  
running_display@is_leading_zero 00A8                      ?_Lcd_Clear 0001                        ??___wmul 001B  
                   __pdataBANK0 0060                     __pdataBANK1 0100                __CFG_LPT1OSC$OFF 000000  
     __end_of_Eeprom_Write_Byte 1C3C                 Lcd_Write_Char@a 0013                 Lcd_Write_Char@y 0012  
     menu_seconds_to_mmss@F3627 003F           running_display@minute 00AC           running_display@second 00B4  
                   __pbssCOMRAM 004E          __end_of_mcu_initialise 1A98                   __pcstackBANK0 0094  
                 __pcstackBANK1 013A                   ??_read_keypad 0010              _load_i2c_registers 15FC  
         __end_of_start_routine 119E             ?_load_i2c_registers 0001                        ?_Lcd_Cmd 0001  
           running_display@hour 0099                       __pnvBANK0 00D4                    _current_user 00C9  
             running_display@ms 00AA                ___lwdiv@dividend 0010               __CFG_CCP2MX$PORTC 000000  
              ??_Lcd_Set_Cursor 0013                       __pintcode 0008                   __pmediumconst 7EA8  
                      ?___awdiv 0010                        ?___awmod 0010               ??_running_display 0031  
                      ?___lwdiv 0010            ??_load_i2c_registers 0018                        _I2C_ADDR 00D4  
               ?_mcu_initialise 0001                ___lwdiv@quotient 0015                _Eeprom_Read_Byte 1C8E  
            menu_progress_bar@d 0023              menu_progress_bar@i 0029             __end_of_read_keypad 178C  
                ___wmul@product 001B                        _LATDbits 000F8C                        _PIE1bits 000F9D  
                      Lcd_Cmd@a 0011                        _PIR1bits 000F9E                        _PIR2bits 000FA1  
                   ??_Lcd_Clear 0012                __CFG_WDTPS$32768 000000      load_i2c_registers@checksum 001C  
                     main@F3681 0035      __size_of_Eeprom_Write_Byte 0024                       main@i_772 0160  
                     main@i_781 0154                       main@i_775 015C                       main@i_783 0156  
                     main@i_791 014F                       main@i_785 0158                       main@i_794 0151  
             ___wmul@multiplier 0017                       main@i_788 014D                ??_Lcd_Write_Char 0011  
                      _Lcd_Init 189A                        _Lcd_Port 1BC6                       copy_data0 17BC  
                     copy_data1 17DC                       copy_data2 17FC        __end_of_Lcd_Write_String 1984  
   running_display@exit_running 00A5                __size_of_Lcd_Cmd 0018                      _EECON1bits 000FA6  
                      __Hrparam 0000                        __Lrparam 0000              __CFG_BOREN$SBORDIS 000000  
              __size_of___awdiv 0084                __size_of___awmod 0070                __size_of___lwdiv 0052  
           load_i2c_registers@i 0020       start_routine@I2C_new_ADDR 00AD                     _current_pin 00C0  
              running_display@i 00B2                running_display@n 009B                running_display@s 00B0  
              running_display@t 0094                 ___lwdiv@divisor 0012                 ___lwdiv@counter 0014  
                   _read_keypad 16E8                        __ptext10 1B5A                        __ptext11 1A98  
                      __ptext20 1BC6                        __ptext12 1C3C                        __ptext13 1984  
                      __ptext14 1A46                        __ptext15 1C8E                        __ptext16 15FC  
                      __ptext17 1816                        __ptext18 189A                        __ptext19 1C76  
                   _logged_user 0165                   __size_of_main 091C            main@credential_state 0153  
         Eeprom_Write_Byte@data 0010        Eeprom_Write_Byte@address 0011                        int$flags 0050  
                   _OSCTUNEbits 000F9B                      _INTCONbits 000FF2              Lcd_Write_Char@temp 0011  
                      intlevel2 0000                 _running_display 119E        __end_of_Eeprom_Read_Byte 1CA2  
            Lcd_Set_Cursor@temp 0016                ??_mcu_initialise 0011                  menu_main@F3618 0049  
        start_routine@error_msg 0096                     _SSPCON1bits 000FC6               __CFG_FOSC$INTIO67 000000  
