

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Mon Oct 17 11:37:43 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	idataBANK0,global,class=CODE,delta=1
     8                           	psect	idataBANK1,global,class=CODE,delta=1
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    44                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    45  0000                     
    46                           	psect	eeprom_data
    47  F00000  10 00 00 00 00 00 00 00 	db	16,0,0,0,0,0,0,0	;# 
    48                           
    49                           	psect	idataCOMRAM
    50  001BBA                     __pidataCOMRAM:
    51                           	opt stack 0
    52                           
    53                           ;initializer for _hx
    54  001BBA  30                 	db	48
    55  001BBB  31                 	db	49
    56  001BBC  32                 	db	50
    57  001BBD  33                 	db	51
    58  001BBE  34                 	db	52
    59  001BBF  35                 	db	53
    60  001BC0  36                 	db	54
    61  001BC1  37                 	db	55
    62  001BC2  38                 	db	56
    63  001BC3  39                 	db	57
    64  001BC4  41                 	db	65
    65  001BC5  42                 	db	66
    66  001BC6  43                 	db	67
    67  001BC7  44                 	db	68
    68  001BC8  45                 	db	69
    69  001BC9  46                 	db	70
    70                           
    71                           ;initializer for menu_seconds_to_mmss@F3627
    72  001BCA  30                 	db	48
    73  001BCB  31                 	db	49
    74  001BCC  32                 	db	50
    75  001BCD  33                 	db	51
    76  001BCE  34                 	db	52
    77  001BCF  35                 	db	53
    78  001BD0  36                 	db	54
    79  001BD1  37                 	db	55
    80  001BD2  38                 	db	56
    81  001BD3  39                 	db	57
    82                           
    83                           ;initializer for menu_main@F3618
    84  001BD4  30                 	db	48
    85  001BD5  30                 	db	48
    86  001BD6  3A                 	db	58
    87  001BD7  30                 	db	48
    88  001BD8  30                 	db	48
    89                           
    90                           	psect	idataBANK0
    91  001B28                     __pidataBANK0:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _c
    95  001B28  30                 	db	48
    96  001B29  31                 	db	49
    97  001B2A  32                 	db	50
    98  001B2B  33                 	db	51
    99  001B2C  34                 	db	52
   100  001B2D  35                 	db	53
   101  001B2E  36                 	db	54
   102  001B2F  37                 	db	55
   103  001B30  38                 	db	56
   104  001B31  39                 	db	57
   105                           
   106                           ;initializer for main@F3681
   107  001B32  30                 	db	48
   108  001B33  31                 	db	49
   109  001B34  32                 	db	50
   110  001B35  33                 	db	51
   111  001B36  34                 	db	52
   112  001B37  35                 	db	53
   113  001B38  36                 	db	54
   114  001B39  37                 	db	55
   115  001B3A  38                 	db	56
   116  001B3B  39                 	db	57
   117                           
   118                           ;initializer for running_display@F3746
   119  001B3C  30                 	db	48
   120  001B3D  31                 	db	49
   121  001B3E  32                 	db	50
   122  001B3F  33                 	db	51
   123  001B40  34                 	db	52
   124  001B41  35                 	db	53
   125  001B42  36                 	db	54
   126  001B43  37                 	db	55
   127  001B44  38                 	db	56
   128  001B45  39                 	db	57
   129                           
   130                           ;initializer for running_display@F3743
   131  001B46  30                 	db	48
   132  001B47  30                 	db	48
   133  001B48  3A                 	db	58
   134  001B49  30                 	db	48
   135  001B4A  30                 	db	48
   136                           
   137                           ;initializer for start_routine@F3720
   138  001B4B  30                 	db	48
   139  001B4C  30                 	db	48
   140  001B4D  30                 	db	48
   141                           
   142                           ;initializer for _login_timeout
   143  001B4E  0708               	dw	1800
   144                           
   145                           	psect	idataBANK1
   146  001A4C                     __pidataBANK1:
   147                           	opt stack 0
   148                           
   149                           ;initializer for _i2c_r_reg
   150  001A4C  2D                 	db	45
   151  001A4D  2D                 	db	45
   152  001A4E  2D                 	db	45
   153  001A4F  2D                 	db	45
   154  001A50  2D                 	db	45
   155  001A51  2D                 	db	45
   156  001A52  2D                 	db	45
   157  001A53  2D                 	db	45
   158  001A54  2D                 	db	45
   159  001A55  2D                 	db	45
   160  001A56  2D                 	db	45
   161  001A57  2D                 	db	45
   162  001A58  2D                 	db	45
   163  001A59  2D                 	db	45
   164  001A5A  2D                 	db	45
   165  001A5B  2D                 	db	45
   166  001A5C  2D                 	db	45
   167  001A5D  2D                 	db	45
   168  001A5E  2D                 	db	45
   169  001A5F  2D                 	db	45
   170  001A60  2D                 	db	45
   171  001A61  2D                 	db	45
   172  001A62  2D                 	db	45
   173  001A63  2D                 	db	45
   174  001A64  2D                 	db	45
   175  001A65  2D                 	db	45
   176  001A66  2D                 	db	45
   177  001A67  2D                 	db	45
   178  001A68  2D                 	db	45
   179  001A69  2D                 	db	45
   180  001A6A  2D                 	db	45
   181  001A6B  2D                 	db	45
   182                           
   183                           ;initializer for _i2c_w_reg
   184  001A6C  2D                 	db	45
   185  001A6D  2D                 	db	45
   186  001A6E  2D                 	db	45
   187  001A6F  2D                 	db	45
   188  001A70  2D                 	db	45
   189  001A71  2D                 	db	45
   190  001A72  2D                 	db	45
   191  001A73  2D                 	db	45
   192  001A74  2D                 	db	45
   193  001A75  2D                 	db	45
   194  001A76  2D                 	db	45
   195  001A77  2D                 	db	45
   196  001A78  2D                 	db	45
   197  001A79  2D                 	db	45
   198  001A7A  2D                 	db	45
   199  001A7B  2D                 	db	45
   200  001A7C  2D                 	db	45
   201  001A7D  2D                 	db	45
   202  001A7E  2D                 	db	45
   203  001A7F  2D                 	db	45
   204  001A80  2D                 	db	45
   205  001A81  2D                 	db	45
   206  001A82  2D                 	db	45
   207  001A83  2D                 	db	45
   208  001A84  2D                 	db	45
   209  001A85  2D                 	db	45
   210  001A86  2D                 	db	45
   211  001A87  2D                 	db	45
   212  001A88  2D                 	db	45
   213  001A89  2D                 	db	45
   214  001A8A  2D                 	db	45
   215  001A8B  2D                 	db	45
   216                           
   217                           	psect	nvBANK0
   218  0000DE                     __pnvBANK0:
   219                           	opt stack 0
   220  0000DE                     _I2C_ADDR:
   221                           	opt stack 0
   222  0000DE                     	ds	1
   223  0000DF                     _Machine_ID:
   224                           	opt stack 0
   225  0000DF                     	ds	1
   226  0000                     _EEADR	set	4009
   227  0000                     _EECON1bits	set	4006
   228  0000                     _EECON2	set	4007
   229  0000                     _EEDATA	set	4008
   230  0000                     _INTCONbits	set	4082
   231  0000                     _LATC	set	3979
   232  0000                     _LATDbits	set	3980
   233  0000                     _OSCCON	set	4051
   234  0000                     _OSCTUNEbits	set	3995
   235  0000                     _PIE1bits	set	3997
   236  0000                     _PIR1bits	set	3998
   237  0000                     _PIR2bits	set	4001
   238  0000                     _PORTB	set	3969
   239  0000                     _PORTBbits	set	3969
   240  0000                     _PORTD	set	3971
   241  0000                     _PORTDbits	set	3971
   242  0000                     _SSPADD	set	4040
   243  0000                     _SSPBUF	set	4041
   244  0000                     _SSPCON1	set	4038
   245  0000                     _SSPCON1bits	set	4038
   246  0000                     _SSPCON2	set	4037
   247  0000                     _SSPSTAT	set	4039
   248  0000                     _SSPSTATbits	set	4039
   249  0000                     _TRISA	set	3986
   250  0000                     _TRISB	set	3987
   251  0000                     _TRISC	set	3988
   252  0000                     _TRISD	set	3989
   253                           
   254                           	psect	mediumconst
   255  007E86                     __pmediumconst:
   256                           	opt stack 0
   257  007E86  00                 	db	0
   258  007E87                     STR_2:
   259  007E87  20                 	db	32
   260  007E88  20                 	db	32
   261  007E89  20                 	db	32
   262  007E8A  20                 	db	32
   263  007E8B  20                 	db	32
   264  007E8C  20                 	db	32
   265  007E8D  20                 	db	32
   266  007E8E  20                 	db	32
   267  007E8F  20                 	db	32
   268  007E90  20                 	db	32
   269  007E91  20                 	db	32
   270  007E92  20                 	db	32
   271  007E93  20                 	db	32
   272  007E94  20                 	db	32
   273  007E95  20                 	db	32
   274  007E96  20                 	db	32
   275  007E97  00                 	db	0
   276  007E98                     STR_4:
   277  007E98  5B                 	db	91	;'['
   278  007E99  20                 	db	32
   279  007E9A  5D                 	db	93	;']'
   280  007E9B  20                 	db	32
   281  007E9C  20                 	db	32
   282  007E9D  20                 	db	32
   283  007E9E  20                 	db	32
   284  007E9F  20                 	db	32
   285  007EA0  20                 	db	32
   286  007EA1  20                 	db	32
   287  007EA2  20                 	db	32
   288  007EA3  20                 	db	32
   289  007EA4  20                 	db	32
   290  007EA5  20                 	db	32
   291  007EA6  20                 	db	32
   292  007EA7  20                 	db	32
   293  007EA8  00                 	db	0
   294  007EA9                     STR_8:
   295  007EA9  52                 	db	82	;'R'
   296  007EAA  65                 	db	101	;'e'
   297  007EAB  73                 	db	115	;'s'
   298  007EAC  70                 	db	112	;'p'
   299  007EAD  6F                 	db	111	;'o'
   300  007EAE  6E                 	db	110	;'n'
   301  007EAF  73                 	db	115	;'s'
   302  007EB0  65                 	db	101	;'e'
   303  007EB1  2E                 	db	46
   304  007EB2  2E                 	db	46
   305  007EB3  2E                 	db	46
   306  007EB4  20                 	db	32
   307  007EB5  20                 	db	32
   308  007EB6  20                 	db	32
   309  007EB7  20                 	db	32
   310  007EB8  20                 	db	32
   311  007EB9  00                 	db	0
   312  007EBA                     STR_15:
   313  007EBA  20                 	db	32
   314  007EBB  20                 	db	32
   315  007EBC  20                 	db	32
   316  007EBD  5B                 	db	91	;'['
   317  007EBE  20                 	db	32
   318  007EBF  41                 	db	65	;'A'
   319  007EC0  64                 	db	100	;'d'
   320  007EC1  69                 	db	105	;'i'
   321  007EC2  74                 	db	116	;'t'
   322  007EC3  75                 	db	117	;'u'
   323  007EC4  6D                 	db	109	;'m'
   324  007EC5  20                 	db	32
   325  007EC6  5D                 	db	93	;']'
   326  007EC7  20                 	db	32
   327  007EC8  20                 	db	32
   328  007EC9  20                 	db	32
   329  007ECA  00                 	db	0
   330  007ECB                     STR_12:
   331  007ECB  20                 	db	32
   332  007ECC  20                 	db	32
   333  007ECD  20                 	db	32
   334  007ECE  20                 	db	32
   335  007ECF  5B                 	db	91	;'['
   336  007ED0  20                 	db	32
   337  007ED1  52                 	db	82	;'R'
   338  007ED2  65                 	db	101	;'e'
   339  007ED3  74                 	db	116	;'t'
   340  007ED4  72                 	db	114	;'r'
   341  007ED5  79                 	db	121	;'y'
   342  007ED6  20                 	db	32
   343  007ED7  5D                 	db	93	;']'
   344  007ED8  20                 	db	32
   345  007ED9  20                 	db	32
   346  007EDA  20                 	db	32
   347  007EDB  00                 	db	0
   348  007EDC                     STR_28:
   349  007EDC  4F                 	db	79	;'O'
   350  007EDD  75                 	db	117	;'u'
   351  007EDE  74                 	db	116	;'t'
   352  007EDF  20                 	db	32
   353  007EE0  6F                 	db	111	;'o'
   354  007EE1  66                 	db	102	;'f'
   355  007EE2  20                 	db	32
   356  007EE3  62                 	db	98	;'b'
   357  007EE4  6F                 	db	111	;'o'
   358  007EE5  75                 	db	117	;'u'
   359  007EE6  6E                 	db	110	;'n'
   360  007EE7  64                 	db	100	;'d'
   361  007EE8  73                 	db	115	;'s'
   362  007EE9  21                 	db	33
   363  007EEA  20                 	db	32
   364  007EEB  20                 	db	32
   365  007EEC  00                 	db	0
   366  007EED                     STR_3:
   367  007EED  45                 	db	69	;'E'
   368  007EEE  6E                 	db	110	;'n'
   369  007EEF  74                 	db	116	;'t'
   370  007EF0  65                 	db	101	;'e'
   371  007EF1  72                 	db	114	;'r'
   372  007EF2  20                 	db	32
   373  007EF3  79                 	db	121	;'y'
   374  007EF4  6F                 	db	111	;'o'
   375  007EF5  75                 	db	117	;'u'
   376  007EF6  72                 	db	114	;'r'
   377  007EF7  20                 	db	32
   378  007EF8  49                 	db	73	;'I'
   379  007EF9  44                 	db	68	;'D'
   380  007EFA  3A                 	db	58	;':'
   381  007EFB  20                 	db	32
   382  007EFC  20                 	db	32
   383  007EFD  00                 	db	0
   384  007EFE                     STR_19:
   385  007EFE  20                 	db	32
   386  007EFF  20                 	db	32
   387  007F00  5B                 	db	91	;'['
   388  007F01  20                 	db	32
   389  007F02  20                 	db	32
   390  007F03  41                 	db	65	;'A'
   391  007F04  64                 	db	100	;'d'
   392  007F05  69                 	db	105	;'i'
   393  007F06  74                 	db	116	;'t'
   394  007F07  75                 	db	117	;'u'
   395  007F08  6D                 	db	109	;'m'
   396  007F09  20                 	db	32
   397  007F0A  20                 	db	32
   398  007F0B  5D                 	db	93	;']'
   399  007F0C  20                 	db	32
   400  007F0D  20                 	db	32
   401  007F0E  00                 	db	0
   402  007F0F                     STR_10:
   403  007F0F  20                 	db	32
   404  007F10  20                 	db	32
   405  007F11  20                 	db	32
   406  007F12  5B                 	db	91	;'['
   407  007F13  20                 	db	32
   408  007F14  57                 	db	87	;'W'
   409  007F15  65                 	db	101	;'e'
   410  007F16  6C                 	db	108	;'l'
   411  007F17  63                 	db	99	;'c'
   412  007F18  6F                 	db	111	;'o'
   413  007F19  6D                 	db	109	;'m'
   414  007F1A  65                 	db	101	;'e'
   415  007F1B  20                 	db	32
   416  007F1C  5D                 	db	93	;']'
   417  007F1D  20                 	db	32
   418  007F1E  20                 	db	32
   419  007F1F  00                 	db	0
   420  007F20                     STR_7:
   421  007F20  57                 	db	87	;'W'
   422  007F21  61                 	db	97	;'a'
   423  007F22  69                 	db	105	;'i'
   424  007F23  74                 	db	116	;'t'
   425  007F24  69                 	db	105	;'i'
   426  007F25  6E                 	db	110	;'n'
   427  007F26  67                 	db	103	;'g'
   428  007F27  20                 	db	32
   429  007F28  53                 	db	83	;'S'
   430  007F29  79                 	db	121	;'y'
   431  007F2A  73                 	db	115	;'s'
   432  007F2B  74                 	db	116	;'t'
   433  007F2C  65                 	db	101	;'e'
   434  007F2D  6D                 	db	109	;'m'
   435  007F2E  20                 	db	32
   436  007F2F  20                 	db	32
   437  007F30  00                 	db	0
   438  007F31                     STR_21:
   439  007F31  4E                 	db	78	;'N'
   440  007F32  65                 	db	101	;'e'
   441  007F33  77                 	db	119	;'w'
   442  007F34  20                 	db	32
   443  007F35  4D                 	db	77	;'M'
   444  007F36  61                 	db	97	;'a'
   445  007F37  63                 	db	99	;'c'
   446  007F38  68                 	db	104	;'h'
   447  007F39  69                 	db	105	;'i'
   448  007F3A  6E                 	db	110	;'n'
   449  007F3B  65                 	db	101	;'e'
   450  007F3C  20                 	db	32
   451  007F3D  49                 	db	73	;'I'
   452  007F3E  44                 	db	68	;'D'
   453  007F3F  3A                 	db	58	;':'
   454  007F40  20                 	db	32
   455  007F41  00                 	db	0
   456  007F42                     STR_5:
   457  007F42  45                 	db	69	;'E'
   458  007F43  6E                 	db	110	;'n'
   459  007F44  74                 	db	116	;'t'
   460  007F45  65                 	db	101	;'e'
   461  007F46  72                 	db	114	;'r'
   462  007F47  20                 	db	32
   463  007F48  79                 	db	121	;'y'
   464  007F49  6F                 	db	111	;'o'
   465  007F4A  75                 	db	117	;'u'
   466  007F4B  72                 	db	114	;'r'
   467  007F4C  20                 	db	32
   468  007F4D  50                 	db	80	;'P'
   469  007F4E  49                 	db	73	;'I'
   470  007F4F  4E                 	db	78	;'N'
   471  007F50  3A                 	db	58	;':'
   472  007F51  20                 	db	32
   473  007F52  00                 	db	0
   474  007F53                     STR_27:
   475  007F53  4D                 	db	77	;'M'
   476  007F54  61                 	db	97	;'a'
   477  007F55  79                 	db	121	;'y'
   478  007F56  20                 	db	32
   479  007F57  6E                 	db	110	;'n'
   480  007F58  6F                 	db	111	;'o'
   481  007F59  74                 	db	116	;'t'
   482  007F5A  20                 	db	32
   483  007F5B  62                 	db	98	;'b'
   484  007F5C  65                 	db	101	;'e'
   485  007F5D  20                 	db	32
   486  007F5E  7A                 	db	122	;'z'
   487  007F5F  65                 	db	101	;'e'
   488  007F60  72                 	db	114	;'r'
   489  007F61  6F                 	db	111	;'o'
   490  007F62  21                 	db	33
   491  007F63  00                 	db	0
   492  007F64                     STR_20:
   493  007F64  4C                 	db	76	;'L'
   494  007F65  6F                 	db	111	;'o'
   495  007F66  61                 	db	97	;'a'
   496  007F67  64                 	db	100	;'d'
   497  007F68  20                 	db	32
   498  007F69  49                 	db	73	;'I'
   499  007F6A  32                 	db	50	;'2'
   500  007F6B  43                 	db	67	;'C'
   501  007F6C  20                 	db	32
   502  007F6D  73                 	db	115	;'s'
   503  007F6E  65                 	db	101	;'e'
   504  007F6F  74                 	db	116	;'t'
   505  007F70  75                 	db	117	;'u'
   506  007F71  70                 	db	112	;'p'
   507  007F72  2E                 	db	46
   508  007F73  2E                 	db	46
   509  007F74  00                 	db	0
   510  007F75                     STR_30:
   511  007F75  4C                 	db	76	;'L'
   512  007F76  6F                 	db	111	;'o'
   513  007F77  67                 	db	103	;'g'
   514  007F78  67                 	db	103	;'g'
   515  007F79  69                 	db	105	;'i'
   516  007F7A  6E                 	db	110	;'n'
   517  007F7B  67                 	db	103	;'g'
   518  007F7C  20                 	db	32
   519  007F7D  79                 	db	121	;'y'
   520  007F7E  6F                 	db	111	;'o'
   521  007F7F  75                 	db	117	;'u'
   522  007F80  20                 	db	32
   523  007F81  6F                 	db	111	;'o'
   524  007F82  75                 	db	117	;'u'
   525  007F83  74                 	db	116	;'t'
   526  007F84  2E                 	db	46
   527  007F85  00                 	db	0
   528  007F86                     STR_26:
   529  007F86  49                 	db	73	;'I'
   530  007F87  32                 	db	50	;'2'
   531  007F88  43                 	db	67	;'C'
   532  007F89  5F                 	db	95	;'_'
   533  007F8A  41                 	db	65	;'A'
   534  007F8B  44                 	db	68	;'D'
   535  007F8C  44                 	db	68	;'D'
   536  007F8D  52                 	db	82	;'R'
   537  007F8E  3E                 	db	62	;'>'
   538  007F8F  3E                 	db	62	;'>'
   539  007F90  45                 	db	69	;'E'
   540  007F91  45                 	db	69	;'E'
   541  007F92  50                 	db	80	;'P'
   542  007F93  52                 	db	82	;'R'
   543  007F94  4F                 	db	79	;'O'
   544  007F95  4D                 	db	77	;'M'
   545  007F96  00                 	db	0
   546  007F97                     STR_13:
   547  007F97  5B                 	db	91	;'['
   548  007F98  20                 	db	32
   549  007F99  53                 	db	83	;'S'
   550  007F9A  79                 	db	121	;'y'
   551  007F9B  73                 	db	115	;'s'
   552  007F9C  74                 	db	116	;'t'
   553  007F9D  65                 	db	101	;'e'
   554  007F9E  6D                 	db	109	;'m'
   555  007F9F  20                 	db	32
   556  007FA0  45                 	db	69	;'E'
   557  007FA1  72                 	db	114	;'r'
   558  007FA2  72                 	db	114	;'r'
   559  007FA3  6F                 	db	111	;'o'
   560  007FA4  72                 	db	114	;'r'
   561  007FA5  20                 	db	32
   562  007FA6  5D                 	db	93	;']'
   563  007FA7  00                 	db	0
   564  007FA8                     STR_22:
   565  007FA8  20                 	db	32
   566  007FA9  20                 	db	32
   567  007FAA  20                 	db	32
   568  007FAB  20                 	db	32
   569  007FAC  20                 	db	32
   570  007FAD  20                 	db	32
   571  007FAE  20                 	db	32
   572  007FAF  5B                 	db	91	;'['
   573  007FB0  30                 	db	48	;'0'
   574  007FB1  30                 	db	48	;'0'
   575  007FB2  31                 	db	49	;'1'
   576  007FB3  2D                 	db	45
   577  007FB4  31                 	db	49	;'1'
   578  007FB5  30                 	db	48	;'0'
   579  007FB6  30                 	db	48	;'0'
   580  007FB7  5D                 	db	93	;']'
   581  007FB8  00                 	db	0
   582  007FB9                     STR_11:
   583  007FB9  5B                 	db	91	;'['
   584  007FBA  41                 	db	65	;'A'
   585  007FBB  63                 	db	99	;'c'
   586  007FBC  63                 	db	99	;'c'
   587  007FBD  65                 	db	101	;'e'
   588  007FBE  73                 	db	115	;'s'
   589  007FBF  73                 	db	115	;'s'
   590  007FC0  20                 	db	32
   591  007FC1  20                 	db	32
   592  007FC2  44                 	db	68	;'D'
   593  007FC3  65                 	db	101	;'e'
   594  007FC4  6E                 	db	110	;'n'
   595  007FC5  69                 	db	105	;'i'
   596  007FC6  65                 	db	101	;'e'
   597  007FC7  64                 	db	100	;'d'
   598  007FC8  5D                 	db	93	;']'
   599  007FC9  00                 	db	0
   600  007FCA                     STR_9:
   601  007FCA  5B                 	db	91	;'['
   602  007FCB  41                 	db	65	;'A'
   603  007FCC  63                 	db	99	;'c'
   604  007FCD  63                 	db	99	;'c'
   605  007FCE  65                 	db	101	;'e'
   606  007FCF  73                 	db	115	;'s'
   607  007FD0  73                 	db	115	;'s'
   608  007FD1  20                 	db	32
   609  007FD2  47                 	db	71	;'G'
   610  007FD3  72                 	db	114	;'r'
   611  007FD4  61                 	db	97	;'a'
   612  007FD5  6E                 	db	110	;'n'
   613  007FD6  74                 	db	116	;'t'
   614  007FD7  65                 	db	101	;'e'
   615  007FD8  64                 	db	100	;'d'
   616  007FD9  5D                 	db	93	;']'
   617  007FDA  00                 	db	0
   618  007FDB                     STR_18:
   619  007FDB  44                 	db	68	;'D'
   620  007FDC  65                 	db	101	;'e'
   621  007FDD  76                 	db	118	;'v'
   622  007FDE  69                 	db	105	;'i'
   623  007FDF  63                 	db	99	;'c'
   624  007FE0  65                 	db	101	;'e'
   625  007FE1  20                 	db	32
   626  007FE2  49                 	db	73	;'I'
   627  007FE3  44                 	db	68	;'D'
   628  007FE4  20                 	db	32
   629  007FE5  00                 	db	0
   630  007FE6                     STR_17:
   631  007FE6  31                 	db	49	;'1'
   632  007FE7  2E                 	db	46
   633  007FE8  30                 	db	48	;'0'
   634  007FE9  2E                 	db	46
   635  007FEA  30                 	db	48	;'0'
   636  007FEB  00                 	db	0
   637  007FEC                     STR_29:
   638  007FEC  30                 	db	48	;'0'
   639  007FED  30                 	db	48	;'0'
   640  007FEE  3A                 	db	58	;':'
   641  007FEF  30                 	db	48	;'0'
   642  007FF0  30                 	db	48	;'0'
   643  007FF1  00                 	db	0
   644  007FF2                     STR_16:
   645  007FF2  52                 	db	82	;'R'
   646  007FF3  65                 	db	101	;'e'
   647  007FF4  76                 	db	118	;'v'
   648  007FF5  20                 	db	32
   649  007FF6  00                 	db	0
   650  007FF7                     STR_24:
   651  007FF7  5B                 	db	91	;'['
   652  007FF8  4F                 	db	79	;'O'
   653  007FF9  4B                 	db	75	;'K'
   654  007FFA  5D                 	db	93	;']'
   655  007FFB  00                 	db	0
   656  007FFC                     STR_25:
   657  007FFC  78                 	db	120	;'x'
   658  007FFD  00                 	db	0
   659  0000                     
   660                           ; #config settings
   661  007FFE  00                 	db	0	; dummy byte at the end
   662  0000                     
   663                           	psect	cinit
   664  00177C                     __pcinit:
   665                           	opt stack 0
   666  00177C                     start_initialization:
   667                           	opt stack 0
   668  00177C                     __initialization:
   669                           	opt stack 0
   670                           
   671                           ; Clear objects allocated to BANK0 (36 bytes)
   672  00177C  EE00  F0BA         	lfsr	0,__pbssBANK0
   673  001780  0E24               	movlw	36
   674  001782                     clear_0:
   675  001782  6AEE               	clrf	postinc0,c
   676  001784  06E8               	decf	wreg,f,c
   677  001786  E1FD               	bnz	clear_0
   678                           
   679                           ; Clear objects allocated to COMRAM (2 bytes)
   680  001788  6A4F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   681  00178A  6A4E               	clrf	__pbssCOMRAM& (0+255),c
   682                           
   683                           ; Initialize objects allocated to BANK1 (64 bytes)
   684                           ; load TBLPTR registers with __pidataBANK1
   685  00178C  0E4C               	movlw	low __pidataBANK1
   686  00178E  6EF6               	movwf	tblptrl,c
   687  001790  0E1A               	movlw	high __pidataBANK1
   688  001792  6EF7               	movwf	tblptrh,c
   689  001794  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   690  001796  6EF8               	movwf	tblptru,c
   691  001798  EE01  F000         	lfsr	0,__pdataBANK1
   692  00179C  EE10 F040          	lfsr	1,64
   693  0017A0                     copy_data0:
   694  0017A0  0009               	tblrd		*+
   695  0017A2  CFF5 FFEE          	movff	tablat,postinc0
   696  0017A6  50E5               	movf	postdec1,w,c
   697  0017A8  50E1               	movf	fsr1l,w,c
   698  0017AA  E1FA               	bnz	copy_data0
   699                           
   700                           ; Initialize objects allocated to BANK0 (40 bytes)
   701                           ; load TBLPTR registers with __pidataBANK0
   702  0017AC  0E28               	movlw	low __pidataBANK0
   703  0017AE  6EF6               	movwf	tblptrl,c
   704  0017B0  0E1B               	movlw	high __pidataBANK0
   705  0017B2  6EF7               	movwf	tblptrh,c
   706  0017B4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   707  0017B6  6EF8               	movwf	tblptru,c
   708  0017B8  EE00  F092         	lfsr	0,__pdataBANK0
   709  0017BC  EE10 F028          	lfsr	1,40
   710  0017C0                     copy_data1:
   711  0017C0  0009               	tblrd		*+
   712  0017C2  CFF5 FFEE          	movff	tablat,postinc0
   713  0017C6  50E5               	movf	postdec1,w,c
   714  0017C8  50E1               	movf	fsr1l,w,c
   715  0017CA  E1FA               	bnz	copy_data1
   716                           
   717                           ; Initialize objects allocated to COMRAM (31 bytes)
   718                           ; load TBLPTR registers with __pidataCOMRAM
   719  0017CC  0EBA               	movlw	low __pidataCOMRAM
   720  0017CE  6EF6               	movwf	tblptrl,c
   721  0017D0  0E1B               	movlw	high __pidataCOMRAM
   722  0017D2  6EF7               	movwf	tblptrh,c
   723  0017D4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   724  0017D6  6EF8               	movwf	tblptru,c
   725  0017D8  EE00  F02F         	lfsr	0,__pdataCOMRAM
   726  0017DC  EE10 F01F          	lfsr	1,31
   727  0017E0                     copy_data2:
   728  0017E0  0009               	tblrd		*+
   729  0017E2  CFF5 FFEE          	movff	tablat,postinc0
   730  0017E6  50E5               	movf	postdec1,w,c
   731  0017E8  50E1               	movf	fsr1l,w,c
   732  0017EA  E1FA               	bnz	copy_data2
   733  0017EC                     end_of_initialization:
   734                           	opt stack 0
   735  0017EC                     __end_of__initialization:
   736                           	opt stack 0
   737  0017EC  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   738  0017EE  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   739  0017F0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   740  0017F2  6EF8               	movwf	tblptru,c
   741  0017F4  0100               	movlb	0
   742  0017F6  EF81  F000         	goto	_main	;jump to C main() function
   743                           tblptru	equ	0xFF8
   744                           tblptrh	equ	0xFF7
   745                           tblptrl	equ	0xFF6
   746                           tablat	equ	0xFF5
   747                           postinc0	equ	0xFEE
   748                           wreg	equ	0xFE8
   749                           postdec1	equ	0xFE5
   750                           fsr1l	equ	0xFE1
   751                           
   752                           	psect	bssCOMRAM
   753  00004E                     __pbssCOMRAM:
   754                           	opt stack 0
   755  00004E                     _i2c_byte_count:
   756                           	opt stack 0
   757  00004E                     	ds	1
   758  00004F                     _i2c_reg_addr:
   759                           	opt stack 0
   760  00004F                     	ds	1
   761                           tblptru	equ	0xFF8
   762                           tblptrh	equ	0xFF7
   763                           tblptrl	equ	0xFF6
   764                           tablat	equ	0xFF5
   765                           postinc0	equ	0xFEE
   766                           wreg	equ	0xFE8
   767                           postdec1	equ	0xFE5
   768                           fsr1l	equ	0xFE1
   769                           
   770                           	psect	dataCOMRAM
   771  00002F                     __pdataCOMRAM:
   772                           	opt stack 0
   773  00002F                     _hx:
   774                           	opt stack 0
   775  00002F                     	ds	16
   776  00003F                     menu_seconds_to_mmss@F3627:
   777                           	opt stack 0
   778  00003F                     	ds	10
   779  000049                     menu_main@F3618:
   780                           	opt stack 0
   781  000049                     	ds	5
   782                           tblptru	equ	0xFF8
   783                           tblptrh	equ	0xFF7
   784                           tblptrl	equ	0xFF6
   785                           tablat	equ	0xFF5
   786                           postinc0	equ	0xFEE
   787                           wreg	equ	0xFE8
   788                           postdec1	equ	0xFE5
   789                           fsr1l	equ	0xFE1
   790                           
   791                           	psect	bssBANK0
   792  0000BA                     __pbssBANK0:
   793                           	opt stack 0
   794  0000BA                     _logged_user:
   795                           	opt stack 0
   796  0000BA                     	ds	16
   797  0000CA                     _current_pin:
   798                           	opt stack 0
   799  0000CA                     	ds	9
   800  0000D3                     _current_user:
   801                           	opt stack 0
   802  0000D3                     	ds	9
   803  0000DC                     _EEP_I2C_ADDR:
   804                           	opt stack 0
   805  0000DC                     	ds	1
   806  0000DD                     _credentials_accepted:
   807                           	opt stack 0
   808  0000DD                     	ds	1
   809                           tblptru	equ	0xFF8
   810                           tblptrh	equ	0xFF7
   811                           tblptrl	equ	0xFF6
   812                           tablat	equ	0xFF5
   813                           postinc0	equ	0xFEE
   814                           wreg	equ	0xFE8
   815                           postdec1	equ	0xFE5
   816                           fsr1l	equ	0xFE1
   817                           
   818                           	psect	dataBANK0
   819  000092                     __pdataBANK0:
   820                           	opt stack 0
   821  000092                     _c:
   822                           	opt stack 0
   823  000092                     	ds	10
   824  00009C                     main@F3681:
   825                           	opt stack 0
   826  00009C                     	ds	10
   827  0000A6                     running_display@F3746:
   828                           	opt stack 0
   829  0000A6                     	ds	10
   830  0000B0                     running_display@F3743:
   831                           	opt stack 0
   832  0000B0                     	ds	5
   833  0000B5                     start_routine@F3720:
   834                           	opt stack 0
   835  0000B5                     	ds	3
   836  0000B8                     _login_timeout:
   837                           	opt stack 0
   838  0000B8                     	ds	2
   839                           tblptru	equ	0xFF8
   840                           tblptrh	equ	0xFF7
   841                           tblptrl	equ	0xFF6
   842                           tablat	equ	0xFF5
   843                           postinc0	equ	0xFEE
   844                           wreg	equ	0xFE8
   845                           postdec1	equ	0xFE5
   846                           fsr1l	equ	0xFE1
   847                           
   848                           	psect	dataBANK1
   849  000100                     __pdataBANK1:
   850                           	opt stack 0
   851  000100                     _i2c_r_reg:
   852                           	opt stack 0
   853  000100                     	ds	32
   854  000120                     _i2c_w_reg:
   855                           	opt stack 0
   856  000120                     	ds	32
   857                           tblptru	equ	0xFF8
   858                           tblptrh	equ	0xFF7
   859                           tblptrl	equ	0xFF6
   860                           tablat	equ	0xFF5
   861                           postinc0	equ	0xFEE
   862                           wreg	equ	0xFE8
   863                           postdec1	equ	0xFE5
   864                           fsr1l	equ	0xFE1
   865                           
   866                           	psect	cstackBANK1
   867  000140                     __pcstackBANK1:
   868                           	opt stack 0
   869  000140                     main@c:
   870                           	opt stack 0
   871                           
   872                           ; 10 bytes @ 0x0
   873  000140                     	ds	10
   874  00014A                     main@buffer:
   875                           	opt stack 0
   876                           
   877                           ; 9 bytes @ 0xA
   878  00014A                     	ds	9
   879  000153                     main@write_busy:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0x13
   883  000153                     	ds	1
   884  000154                     main@i_792:
   885                           	opt stack 0
   886                           
   887                           ; 2 bytes @ 0x14
   888  000154                     	ds	2
   889  000156                     main@i_795:
   890                           	opt stack 0
   891                           
   892                           ; 2 bytes @ 0x16
   893  000156                     	ds	2
   894  000158                     main@i_798:
   895                           	opt stack 0
   896                           
   897                           ; 2 bytes @ 0x18
   898  000158                     	ds	2
   899  00015A                     main@credential_state:
   900                           	opt stack 0
   901                           
   902                           ; 1 bytes @ 0x1A
   903  00015A                     	ds	1
   904  00015B                     main@i_782:
   905                           	opt stack 0
   906                           
   907                           ; 2 bytes @ 0x1B
   908  00015B                     	ds	2
   909  00015D                     main@i_786:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x1D
   913  00015D                     	ds	2
   914  00015F                     main@i_788:
   915                           	opt stack 0
   916                           
   917                           ; 2 bytes @ 0x1F
   918  00015F                     	ds	2
   919  000161                     main@i:
   920                           	opt stack 0
   921                           
   922                           ; 2 bytes @ 0x21
   923  000161                     	ds	2
   924  000163                     main@i_776:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x23
   928  000163                     	ds	2
   929  000165                     main@u:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x25
   933  000165                     	ds	2
   934  000167                     main@i_773:
   935                           	opt stack 0
   936                           
   937                           ; 2 bytes @ 0x27
   938  000167                     	ds	2
   939  000169                     main@p:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x29
   943  000169                     	ds	1
   944  00016A                     main@n:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x2A
   948  00016A                     	ds	1
   949  00016B                     main@x:
   950                           	opt stack 0
   951                           
   952                           ; 1 bytes @ 0x2B
   953  00016B                     	ds	1
   954                           tblptru	equ	0xFF8
   955                           tblptrh	equ	0xFF7
   956                           tblptrl	equ	0xFF6
   957                           tablat	equ	0xFF5
   958                           postinc0	equ	0xFEE
   959                           wreg	equ	0xFE8
   960                           postdec1	equ	0xFE5
   961                           fsr1l	equ	0xFE1
   962                           
   963                           	psect	cstackBANK0
   964  000060                     __pcstackBANK0:
   965                           	opt stack 0
   966  000060                     menu_progress_bar@d:
   967                           	opt stack 0
   968                           
   969                           ; 4 bytes @ 0x0
   970  000060                     	ds	4
   971  000064                     menu_progress_bar@ii:
   972                           	opt stack 0
   973                           
   974                           ; 2 bytes @ 0x4
   975  000064                     	ds	2
   976  000066                     menu_progress_bar@i:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x6
   980  000066                     	ds	2
   981  000068                     menu_progress_bar@i_727:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x8
   985  000068                     	ds	2
   986  00006A                     menu_progress_bar@i_728:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0xA
   990  00006A                     	ds	2
   991  00006C                     menu_progress_bar@i_729:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0xC
   995  00006C                     	ds	2
   996  00006E                     start_routine@h:
   997                           	opt stack 0
   998  00006E                     running_display@t:
   999                           	opt stack 0
  1000                           
  1001                           ; 5 bytes @ 0xE
  1002  00006E                     	ds	1
  1003  00006F                     start_routine@l:
  1004                           	opt stack 0
  1005                           
  1006                           ; 1 bytes @ 0xF
  1007  00006F                     	ds	1
  1008  000070                     start_routine@error_msg:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x10
  1012  000070                     	ds	2
  1013  000072                     start_routine@d1:
  1014                           	opt stack 0
  1015                           
  1016                           ; 1 bytes @ 0x12
  1017  000072                     	ds	1
  1018  000073                     start_routine@v:
  1019                           	opt stack 0
  1020  000073                     running_display@hour:
  1021                           	opt stack 0
  1022                           
  1023                           ; 2 bytes @ 0x13
  1024  000073                     	ds	1
  1025  000074                     start_routine@i:
  1026                           	opt stack 0
  1027                           
  1028                           ; 2 bytes @ 0x14
  1029  000074                     	ds	1
  1030  000075                     running_display@n:
  1031                           	opt stack 0
  1032                           
  1033                           ; 10 bytes @ 0x15
  1034  000075                     	ds	1
  1035  000076                     start_routine@i_877:
  1036                           	opt stack 0
  1037                           
  1038                           ; 2 bytes @ 0x16
  1039  000076                     	ds	2
  1040  000078                     start_routine@i_885:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x18
  1044  000078                     	ds	2
  1045  00007A                     start_routine@i_903:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x1A
  1049  00007A                     	ds	2
  1050  00007C                     start_routine@i_906:
  1051                           	opt stack 0
  1052                           
  1053                           ; 2 bytes @ 0x1C
  1054  00007C                     	ds	2
  1055  00007E                     start_routine@i_909:
  1056                           	opt stack 0
  1057                           
  1058                           ; 2 bytes @ 0x1E
  1059  00007E                     	ds	1
  1060  00007F                     running_display@exit_running:
  1061                           	opt stack 0
  1062                           
  1063                           ; 1 bytes @ 0x1F
  1064  00007F                     	ds	1
  1065  000080                     running_display@i_916:
  1066                           	opt stack 0
  1067  000080                     start_routine@b:
  1068                           	opt stack 0
  1069                           
  1070                           ; 3 bytes @ 0x20
  1071  000080                     	ds	2
  1072  000082                     running_display@is_leading_zero:
  1073                           	opt stack 0
  1074                           
  1075                           ; 1 bytes @ 0x22
  1076  000082                     	ds	1
  1077  000083                     running_display@n_c:
  1078                           	opt stack 0
  1079  000083                     start_routine@i_900:
  1080                           	opt stack 0
  1081                           
  1082                           ; 2 bytes @ 0x23
  1083  000083                     	ds	1
  1084  000084                     running_display@ms:
  1085                           	opt stack 0
  1086                           
  1087                           ; 2 bytes @ 0x24
  1088  000084                     	ds	1
  1089  000085                     start_routine@i_910:
  1090                           	opt stack 0
  1091                           
  1092                           ; 2 bytes @ 0x25
  1093  000085                     	ds	1
  1094  000086                     running_display@minute:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x26
  1098  000086                     	ds	1
  1099  000087                     start_routine@I2C_new_ADDR:
  1100                           	opt stack 0
  1101                           
  1102                           ; 3 bytes @ 0x27
  1103  000087                     	ds	1
  1104  000088                     running_display@i_917:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0x28
  1108  000088                     	ds	2
  1109  00008A                     start_routine@a:
  1110                           	opt stack 0
  1111  00008A                     running_display@s:
  1112                           	opt stack 0
  1113                           
  1114                           ; 2 bytes @ 0x2A
  1115  00008A                     	ds	1
  1116  00008B                     start_routine@dt:
  1117                           	opt stack 0
  1118                           
  1119                           ; 1 bytes @ 0x2B
  1120  00008B                     	ds	1
  1121  00008C                     start_routine@i_897:
  1122                           	opt stack 0
  1123  00008C                     running_display@i:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0x2C
  1127  00008C                     	ds	2
  1128  00008E                     start_routine@dh:
  1129                           	opt stack 0
  1130  00008E                     running_display@second:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0x2E
  1134  00008E                     	ds	1
  1135  00008F                     start_routine@x:
  1136                           	opt stack 0
  1137                           
  1138                           ; 1 bytes @ 0x2F
  1139  00008F                     	ds	1
  1140  000090                     start_routine@n:
  1141                           	opt stack 0
  1142                           
  1143                           ; 1 bytes @ 0x30
  1144  000090                     	ds	1
  1145  000091                     start_routine@new_I2C_address:
  1146                           	opt stack 0
  1147                           
  1148                           ; 1 bytes @ 0x31
  1149  000091                     	ds	1
  1150                           tblptru	equ	0xFF8
  1151                           tblptrh	equ	0xFF7
  1152                           tblptrl	equ	0xFF6
  1153                           tablat	equ	0xFF5
  1154                           postinc0	equ	0xFEE
  1155                           wreg	equ	0xFE8
  1156                           postdec1	equ	0xFE5
  1157                           fsr1l	equ	0xFE1
  1158                           
  1159                           	psect	cstackCOMRAM
  1160  000001                     __pcstackCOMRAM:
  1161                           	opt stack 0
  1162  000001                     ??_ISR:
  1163                           
  1164                           ; 1 bytes @ 0x0
  1165  000001                     	ds	14
  1166  00000F                     ISR@sspBuf:
  1167                           	opt stack 0
  1168                           
  1169                           ; 1 bytes @ 0xE
  1170  00000F                     	ds	1
  1171  000010                     ?___awdiv:
  1172                           	opt stack 0
  1173  000010                     ?___awmod:
  1174                           	opt stack 0
  1175  000010                     ?___lwdiv:
  1176                           	opt stack 0
  1177  000010                     Lcd_Port@a:
  1178                           	opt stack 0
  1179  000010                     Eeprom_Read_Byte@address:
  1180                           	opt stack 0
  1181  000010                     Eeprom_Write_Byte@data:
  1182                           	opt stack 0
  1183  000010                     latch_keypad@x:
  1184                           	opt stack 0
  1185  000010                     ___awdiv@dividend:
  1186                           	opt stack 0
  1187  000010                     ___awmod@dividend:
  1188                           	opt stack 0
  1189  000010                     ___lwdiv@dividend:
  1190                           	opt stack 0
  1191                           
  1192                           ; 2 bytes @ 0xF
  1193  000010                     	ds	1
  1194  000011                     Lcd_Cmd@a:
  1195                           	opt stack 0
  1196  000011                     Lcd_Write_Char@temp:
  1197                           	opt stack 0
  1198  000011                     Eeprom_Write_Byte@address:
  1199                           	opt stack 0
  1200                           
  1201                           ; 1 bytes @ 0x10
  1202  000011                     	ds	1
  1203  000012                     ??_latch_keypad:
  1204  000012                     ??_Lcd_Clear:
  1205  000012                     ??_Lcd_Init:
  1206  000012                     Lcd_Set_Cursor@b:
  1207                           	opt stack 0
  1208  000012                     Lcd_Write_Char@y:
  1209                           	opt stack 0
  1210  000012                     ___awdiv@divisor:
  1211                           	opt stack 0
  1212  000012                     ___awmod@divisor:
  1213                           	opt stack 0
  1214  000012                     ___lwdiv@divisor:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0x11
  1218  000012                     	ds	1
  1219  000013                     Lcd_Set_Cursor@a:
  1220                           	opt stack 0
  1221  000013                     Lcd_Write_Char@a:
  1222                           	opt stack 0
  1223                           
  1224                           ; 1 bytes @ 0x12
  1225  000013                     	ds	1
  1226  000014                     Lcd_Set_Cursor@z:
  1227                           	opt stack 0
  1228  000014                     ___awdiv@counter:
  1229                           	opt stack 0
  1230  000014                     ___awmod@counter:
  1231                           	opt stack 0
  1232  000014                     ___lwdiv@counter:
  1233                           	opt stack 0
  1234  000014                     Lcd_Write_String@a:
  1235                           	opt stack 0
  1236                           
  1237                           ; 2 bytes @ 0x13
  1238  000014                     	ds	1
  1239  000015                     Lcd_Set_Cursor@y:
  1240                           	opt stack 0
  1241  000015                     ___awdiv@sign:
  1242                           	opt stack 0
  1243  000015                     ___awmod@sign:
  1244                           	opt stack 0
  1245  000015                     ___lwdiv@quotient:
  1246                           	opt stack 0
  1247                           
  1248                           ; 2 bytes @ 0x14
  1249  000015                     	ds	1
  1250  000016                     ??_Lcd_Write_String:
  1251  000016                     Lcd_Set_Cursor@temp:
  1252                           	opt stack 0
  1253  000016                     ___awdiv@quotient:
  1254                           	opt stack 0
  1255                           
  1256                           ; 2 bytes @ 0x15
  1257  000016                     	ds	1
  1258  000017                     ?___wmul:
  1259                           	opt stack 0
  1260  000017                     ___wmul@multiplier:
  1261                           	opt stack 0
  1262                           
  1263                           ; 2 bytes @ 0x16
  1264  000017                     	ds	1
  1265  000018                     ??_load_i2c_registers:
  1266  000018                     Lcd_Write_String@i:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x17
  1270  000018                     	ds	1
  1271  000019                     ___wmul@multiplicand:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x18
  1275  000019                     	ds	2
  1276  00001B                     ___wmul@product:
  1277                           	opt stack 0
  1278                           
  1279                           ; 2 bytes @ 0x1A
  1280  00001B                     	ds	1
  1281  00001C                     load_i2c_registers@checksum:
  1282                           	opt stack 0
  1283                           
  1284                           ; 2 bytes @ 0x1B
  1285  00001C                     	ds	1
  1286  00001D                     menu_progress_bar@load_time_ms:
  1287                           	opt stack 0
  1288                           
  1289                           ; 2 bytes @ 0x1C
  1290  00001D                     	ds	1
  1291  00001E                     load_i2c_registers@i_843:
  1292                           	opt stack 0
  1293                           
  1294                           ; 2 bytes @ 0x1D
  1295  00001E                     	ds	1
  1296  00001F                     ??_menu_progress_bar:
  1297                           
  1298                           ; 1 bytes @ 0x1E
  1299  00001F                     	ds	1
  1300  000020                     load_i2c_registers@i:
  1301                           	opt stack 0
  1302                           
  1303                           ; 2 bytes @ 0x1F
  1304  000020                     	ds	2
  1305  000022                     load_i2c_registers@i_841:
  1306                           	opt stack 0
  1307                           
  1308                           ; 2 bytes @ 0x21
  1309  000022                     	ds	1
  1310  000023                     ??_start_routine:
  1311  000023                     ??_running_display:
  1312                           
  1313                           ; 1 bytes @ 0x22
  1314  000023                     	ds	4
  1315  000027                     ??_main:
  1316                           
  1317                           ; 1 bytes @ 0x26
  1318  000027                     	ds	8
  1319                           tblptru	equ	0xFF8
  1320                           tblptrh	equ	0xFF7
  1321                           tblptrl	equ	0xFF6
  1322                           tablat	equ	0xFF5
  1323                           postinc0	equ	0xFEE
  1324                           wreg	equ	0xFE8
  1325                           postdec1	equ	0xFE5
  1326                           fsr1l	equ	0xFE1
  1327                           
  1328 ;;
  1329 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  1330 ;;
  1331 ;; *************** function _main *****************
  1332 ;; Defined at:
  1333 ;;		line 50 in file "main.c"
  1334 ;; Parameters:    Size  Location     Type
  1335 ;;		None
  1336 ;; Auto vars:     Size  Location     Type
  1337 ;;  i               2   24[BANK1 ] int 
  1338 ;;  i               2   22[BANK1 ] int 
  1339 ;;  i               2   20[BANK1 ] int 
  1340 ;;  i               2   31[BANK1 ] int 
  1341 ;;  u               2   37[BANK1 ] int 
  1342 ;;  i               2   29[BANK1 ] int 
  1343 ;;  i               2   27[BANK1 ] int 
  1344 ;;  c              10    0[BANK1 ] unsigned char [10]
  1345 ;;  i               2   35[BANK1 ] int 
  1346 ;;  i               2   39[BANK1 ] int 
  1347 ;;  buffer          9   10[BANK1 ] unsigned char [9]
  1348 ;;  credential_s    1   26[BANK1 ] unsigned char 
  1349 ;;  write_busy      1   19[BANK1 ] unsigned char 
  1350 ;;  i               2   33[BANK1 ] int 
  1351 ;;  x               1   43[BANK1 ] unsigned char 
  1352 ;;  n               1   42[BANK1 ] unsigned char 
  1353 ;;  p               1   41[BANK1 ] unsigned char 
  1354 ;; Return value:  Size  Location     Type
  1355 ;;                  1    wreg      void 
  1356 ;; Registers used:
  1357 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1358 ;; Tracked objects:
  1359 ;;		On entry : 0/0
  1360 ;;		On exit  : 0/0
  1361 ;;		Unchanged: 0/0
  1362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1363 ;;      Params:         0       0       0       0       0       0       0
  1364 ;;      Locals:         0       0      44       0       0       0       0
  1365 ;;      Temps:          8       0       0       0       0       0       0
  1366 ;;      Totals:         8       0      44       0       0       0       0
  1367 ;;Total ram usage:       52 bytes
  1368 ;; Hardware stack levels required when called:    6
  1369 ;; This function calls:
  1370 ;;		_Lcd_Init
  1371 ;;		_Lcd_Set_Cursor
  1372 ;;		_Lcd_Write_Char
  1373 ;;		_Lcd_Write_String
  1374 ;;		_latch_keypad
  1375 ;;		_load_i2c_registers
  1376 ;;		_mcu_initialise
  1377 ;;		_menu_progress_bar
  1378 ;;		_read_keypad
  1379 ;;		_running_display
  1380 ;;		_start_routine
  1381 ;; This function is called by:
  1382 ;;		Startup code after reset
  1383 ;; This function uses a non-reentrant model
  1384 ;;
  1385                           
  1386                           	psect	text0
  1387  000102                     __ptext0:
  1388                           	opt stack 0
  1389  000102                     _main:
  1390                           	opt stack 25
  1391                           
  1392                           ;main.c: 54: unsigned char n = 0, p = 0;
  1393                           
  1394                           ;incstack = 0
  1395  000102  0E00               	movlw	0
  1396  000104  0101               	movlb	1	; () banked
  1397  000106  6F6A               	movwf	main@n& (0+255),b
  1398  000108  0E00               	movlw	0
  1399  00010A  0101               	movlb	1	; () banked
  1400  00010C  6F69               	movwf	main@p& (0+255),b
  1401                           
  1402                           ;main.c: 55: unsigned char x = '_';
  1403  00010E  0E5F               	movlw	95
  1404  000110  0101               	movlb	1	; () banked
  1405  000112  6F6B               	movwf	main@x& (0+255),b
  1406                           
  1407                           ; BSR set to: 1
  1408                           ;main.c: 58: mcu_initialise();
  1409  000114  ECAA  F00C         	call	_mcu_initialise	;wreg free
  1410                           
  1411                           ;main.c: 59: Lcd_Init();
  1412  000118  ECFD  F00B         	call	_Lcd_Init	;wreg free
  1413                           
  1414                           ;main.c: 63: start_routine();
  1415  00011C  ECA8  F004         	call	_start_routine	;wreg free
  1416  000120                     l4530:
  1417                           
  1418                           ;main.c: 67: {
  1419                           ;main.c: 68: PORTDbits.RD7 = 0;
  1420  000120  9E83               	bcf	3971,7,c	;volatile
  1421                           
  1422                           ;main.c: 69: for (int i = 0; i < 32; i++)
  1423  000122  0E00               	movlw	0
  1424  000124  0101               	movlb	1	; () banked
  1425  000126  6F62               	movwf	(main@i+1)& (0+255),b
  1426  000128  0E00               	movlw	0
  1427  00012A  6F61               	movwf	main@i& (0+255),b
  1428                           
  1429                           ; BSR set to: 1
  1430  00012C  0101               	movlb	1	; () banked
  1431  00012E  BF62               	btfsc	(main@i+1)& (0+255),7,b
  1432  000130  D00B               	goto	l4538
  1433  000132  0101               	movlb	1	; () banked
  1434  000134  5162               	movf	(main@i+1)& (0+255),w,b
  1435  000136  E107               	bnz	u4310
  1436  000138  0E20               	movlw	32
  1437  00013A  0101               	movlb	1	; () banked
  1438  00013C  5D61               	subwf	main@i& (0+255),w,b
  1439  00013E  B0D8               	btfsc	status,0,c
  1440  000140  EFA2  F004         	goto	l4822
  1441  000144  D001               	goto	l4538
  1442  000146                     u4310:
  1443                           
  1444                           ; BSR set to: 1
  1445  000146  D3FE               	goto	l4822
  1446  000148                     l4538:
  1447                           
  1448                           ; BSR set to: 1
  1449                           ;main.c: 70: {
  1450                           ;main.c: 71: i2c_w_reg[i] = '-';
  1451  000148  0E20               	movlw	low _i2c_w_reg
  1452  00014A  0101               	movlb	1	; () banked
  1453  00014C  2561               	addwf	main@i& (0+255),w,b
  1454  00014E  6ED9               	movwf	fsr2l,c
  1455  000150  0E01               	movlw	high _i2c_w_reg
  1456  000152  0101               	movlb	1	; () banked
  1457  000154  2162               	addwfc	(main@i+1)& (0+255),w,b
  1458  000156  6EDA               	movwf	fsr2h,c
  1459  000158  0E2D               	movlw	45
  1460  00015A  6EDF               	movwf	indf2,c
  1461                           
  1462                           ;main.c: 72: i2c_r_reg[i] = '-';
  1463  00015C  0E00               	movlw	low _i2c_r_reg
  1464  00015E  0101               	movlb	1	; () banked
  1465  000160  2561               	addwf	main@i& (0+255),w,b
  1466  000162  6ED9               	movwf	fsr2l,c
  1467  000164  0E01               	movlw	high _i2c_r_reg
  1468  000166  0101               	movlb	1	; () banked
  1469  000168  2162               	addwfc	(main@i+1)& (0+255),w,b
  1470  00016A  6EDA               	movwf	fsr2h,c
  1471  00016C  0E2D               	movlw	45
  1472  00016E  6EDF               	movwf	indf2,c
  1473                           
  1474                           ; BSR set to: 1
  1475  000170  0101               	movlb	1	; () banked
  1476  000172  4B61               	infsnz	main@i& (0+255),f,b
  1477  000174  2B62               	incf	(main@i+1)& (0+255),f,b
  1478                           
  1479                           ; BSR set to: 1
  1480  000176  0101               	movlb	1	; () banked
  1481  000178  BF62               	btfsc	(main@i+1)& (0+255),7,b
  1482  00017A  D7E6               	goto	l4538
  1483  00017C  0101               	movlb	1	; () banked
  1484  00017E  5162               	movf	(main@i+1)& (0+255),w,b
  1485  000180  E101               	bnz	u4320
  1486  000182  D7DA               	goto	L1
  1487  000184                     u4320:
  1488                           
  1489                           ; BSR set to: 1
  1490                           ;main.c: 73: }
  1491                           ;main.c: 74: while (credentials_accepted == 0 )
  1492  000184  D3DF               	goto	l4822
  1493  000186                     l4544:
  1494                           
  1495                           ;main.c: 75: {
  1496                           ;main.c: 76: unsigned char buffer[9];
  1497                           ;main.c: 77: for (int i = 0; i < 9; i++)
  1498  000186  0E00               	movlw	0
  1499  000188  0101               	movlb	1	; () banked
  1500  00018A  6F68               	movwf	(main@i_773+1)& (0+255),b
  1501  00018C  0E00               	movlw	0
  1502  00018E  6F67               	movwf	main@i_773& (0+255),b
  1503  000190                     l4546:
  1504                           
  1505                           ; BSR set to: 1
  1506  000190  0101               	movlb	1	; () banked
  1507  000192  BF68               	btfsc	(main@i_773+1)& (0+255),7,b
  1508  000194  D008               	goto	l4550
  1509  000196  0101               	movlb	1	; () banked
  1510  000198  5168               	movf	(main@i_773+1)& (0+255),w,b
  1511  00019A  E127               	bnz	l4556
  1512  00019C  0E09               	movlw	9
  1513  00019E  0101               	movlb	1	; () banked
  1514  0001A0  5D67               	subwf	main@i_773& (0+255),w,b
  1515  0001A2  B0D8               	btfsc	status,0,c
  1516  0001A4  D022               	goto	l4556
  1517  0001A6                     l4550:
  1518                           
  1519                           ; BSR set to: 1
  1520                           ;main.c: 78: {
  1521                           ;main.c: 79: current_user[i] = '0';
  1522  0001A6  0ED3               	movlw	low _current_user
  1523  0001A8  0101               	movlb	1	; () banked
  1524  0001AA  2567               	addwf	main@i_773& (0+255),w,b
  1525  0001AC  6ED9               	movwf	fsr2l,c
  1526  0001AE  0E00               	movlw	high _current_user
  1527  0001B0  0101               	movlb	1	; () banked
  1528  0001B2  2168               	addwfc	(main@i_773+1)& (0+255),w,b
  1529  0001B4  6EDA               	movwf	fsr2h,c
  1530  0001B6  0E30               	movlw	48
  1531  0001B8  6EDF               	movwf	indf2,c
  1532                           
  1533                           ;main.c: 80: current_pin[i] = '0';
  1534  0001BA  0ECA               	movlw	low _current_pin
  1535  0001BC  0101               	movlb	1	; () banked
  1536  0001BE  2567               	addwf	main@i_773& (0+255),w,b
  1537  0001C0  6ED9               	movwf	fsr2l,c
  1538  0001C2  0E00               	movlw	high _current_pin
  1539  0001C4  0101               	movlb	1	; () banked
  1540  0001C6  2168               	addwfc	(main@i_773+1)& (0+255),w,b
  1541  0001C8  6EDA               	movwf	fsr2h,c
  1542  0001CA  0E30               	movlw	48
  1543  0001CC  6EDF               	movwf	indf2,c
  1544                           
  1545                           ;main.c: 81: buffer[i] = '0';
  1546  0001CE  0E4A               	movlw	low main@buffer
  1547  0001D0  0101               	movlb	1	; () banked
  1548  0001D2  2567               	addwf	main@i_773& (0+255),w,b
  1549  0001D4  6ED9               	movwf	fsr2l,c
  1550  0001D6  0E01               	movlw	high main@buffer
  1551  0001D8  0101               	movlb	1	; () banked
  1552  0001DA  2168               	addwfc	(main@i_773+1)& (0+255),w,b
  1553  0001DC  6EDA               	movwf	fsr2h,c
  1554  0001DE  0E30               	movlw	48
  1555  0001E0  6EDF               	movwf	indf2,c
  1556                           
  1557                           ; BSR set to: 1
  1558  0001E2  0101               	movlb	1	; () banked
  1559  0001E4  4B67               	infsnz	main@i_773& (0+255),f,b
  1560  0001E6  2B68               	incf	(main@i_773+1)& (0+255),f,b
  1561  0001E8  D7D3               	goto	l4546
  1562  0001EA                     l4556:
  1563                           
  1564                           ; BSR set to: 1
  1565                           ;main.c: 82: }
  1566                           ;main.c: 83: n = 0;
  1567  0001EA  0E00               	movlw	0
  1568  0001EC  0101               	movlb	1	; () banked
  1569  0001EE  6F6A               	movwf	main@n& (0+255),b
  1570                           
  1571                           ; BSR set to: 1
  1572                           ;main.c: 84: Lcd_Set_Cursor(1,1);
  1573  0001F0  0E01               	movlw	1
  1574  0001F2  6E12               	movwf	Lcd_Set_Cursor@b,c
  1575  0001F4  0E01               	movlw	1
  1576  0001F6  ECFE  F00C         	call	_Lcd_Set_Cursor
  1577                           
  1578                           ;main.c: 85: Lcd_Write_String("Enter your ID:  ");
  1579  0001FA  0EED               	movlw	low STR_3
  1580  0001FC  6E14               	movwf	Lcd_Write_String@a,c
  1581  0001FE  0E7E               	movlw	high STR_3
  1582  000200  6E15               	movwf	Lcd_Write_String@a+1,c
  1583  000202  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  1584                           
  1585                           ;main.c: 86: Lcd_Set_Cursor(2,1);
  1586  000206  0E01               	movlw	1
  1587  000208  6E12               	movwf	Lcd_Set_Cursor@b,c
  1588  00020A  0E02               	movlw	2
  1589  00020C  ECFE  F00C         	call	_Lcd_Set_Cursor
  1590                           
  1591                           ;main.c: 87: Lcd_Write_String("[ ]             ");
  1592  000210  0E98               	movlw	low STR_4
  1593  000212  6E14               	movwf	Lcd_Write_String@a,c
  1594  000214  0E7E               	movlw	high STR_4
  1595  000216  6E15               	movwf	Lcd_Write_String@a+1,c
  1596  000218  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  1597                           
  1598                           ;main.c: 88: Lcd_Set_Cursor(2,1);
  1599  00021C  0E01               	movlw	1
  1600  00021E  6E12               	movwf	Lcd_Set_Cursor@b,c
  1601  000220  0E02               	movlw	2
  1602  000222  ECFE  F00C         	call	_Lcd_Set_Cursor
  1603                           
  1604                           ;main.c: 90: while (n < 10)
  1605  000226  D0B0               	goto	l4618
  1606  000228                     l4568:
  1607                           
  1608                           ;main.c: 91: {
  1609                           ;main.c: 92: if (n == 9)
  1610  000228  0E09               	movlw	9
  1611  00022A  0101               	movlb	1	; () banked
  1612  00022C  196A               	xorwf	main@n& (0+255),w,b
  1613  00022E  B4D8               	btfsc	status,2,c
  1614  000230  D0AF               	goto	l4620
  1615                           
  1616                           ; BSR set to: 1
  1617                           ;main.c: 94: Lcd_Set_Cursor(2,2);
  1618                           
  1619                           ; BSR set to: 1
  1620                           
  1621                           ; BSR set to: 1
  1622                           ;main.c: 93: break;
  1623  000232  0E02               	movlw	2
  1624  000234  6E12               	movwf	Lcd_Set_Cursor@b,c
  1625  000236  0E02               	movlw	2
  1626  000238  ECFE  F00C         	call	_Lcd_Set_Cursor
  1627                           
  1628                           ;main.c: 95: Lcd_Write_Char(c[9-n]);
  1629  00023C  0101               	movlb	1	; () banked
  1630  00023E  516A               	movf	main@n& (0+255),w,b
  1631  000240  6E27               	movwf	??_main& (0+255),c
  1632  000242  6A28               	clrf	(??_main+1)& (0+255),c
  1633  000244  1E27               	comf	??_main,f,c
  1634  000246  1E28               	comf	??_main+1,f,c
  1635  000248  4A27               	infsnz	??_main,f,c
  1636  00024A  2A28               	incf	??_main+1,f,c
  1637  00024C  0E09               	movlw	9
  1638  00024E  2627               	addwf	??_main,f,c
  1639  000250  0E00               	movlw	0
  1640  000252  2228               	addwfc	??_main+1,f,c
  1641  000254  0E92               	movlw	low _c
  1642  000256  2427               	addwf	??_main,w,c
  1643  000258  6ED9               	movwf	fsr2l,c
  1644  00025A  0E00               	movlw	high _c
  1645  00025C  2028               	addwfc	??_main+1,w,c
  1646  00025E  6EDA               	movwf	fsr2h,c
  1647  000260  50DF               	movf	indf2,w,c
  1648  000262  EC62  F00D         	call	_Lcd_Write_Char
  1649                           
  1650                           ;main.c: 96: x = read_keypad();
  1651  000266  EC2A  F00B         	call	_read_keypad	;wreg free
  1652  00026A  0101               	movlb	1	; () banked
  1653  00026C  6F6B               	movwf	main@x& (0+255),b
  1654                           
  1655                           ; BSR set to: 1
  1656                           ;main.c: 97: if (x != '_')
  1657  00026E  0E5F               	movlw	95
  1658  000270  0101               	movlb	1	; () banked
  1659  000272  196B               	xorwf	main@x& (0+255),w,b
  1660  000274  B4D8               	btfsc	status,2,c
  1661  000276  D088               	goto	l4618
  1662                           
  1663                           ; BSR set to: 1
  1664                           ;main.c: 98: {
  1665                           ;main.c: 99: if (((x - '#') == 0)&&(n > 0))
  1666  000278  0EDD               	movlw	221
  1667  00027A  6E27               	movwf	??_main& (0+255),c
  1668  00027C  0EFF               	movlw	255
  1669  00027E  6E28               	movwf	(??_main+1)& (0+255),c
  1670  000280  0101               	movlb	1	; () banked
  1671  000282  516B               	movf	main@x& (0+255),w,b
  1672  000284  6E29               	movwf	(??_main+2)& (0+255),c
  1673  000286  6A2A               	clrf	(??_main+3)& (0+255),c
  1674  000288  5027               	movf	??_main,w,c
  1675  00028A  2629               	addwf	??_main+2,f,c
  1676  00028C  5028               	movf	??_main+1,w,c
  1677  00028E  222A               	addwfc	??_main+3,f,c
  1678  000290  5029               	movf	??_main+2,w,c
  1679  000292  102A               	iorwf	??_main+3,w,c
  1680  000294  A4D8               	btfss	status,2,c
  1681  000296  D034               	goto	l4600
  1682                           
  1683                           ; BSR set to: 1
  1684  000298  0101               	movlb	1	; () banked
  1685  00029A  516A               	movf	main@n& (0+255),w,b
  1686  00029C  0101               	movlb	1	; () banked
  1687  00029E  B4D8               	btfsc	status,2,c
  1688  0002A0  D02F               	goto	l4600
  1689                           
  1690                           ; BSR set to: 1
  1691                           ;main.c: 100: {
  1692                           ;main.c: 101: buffer[n] = '?';
  1693  0002A2  0101               	movlb	1	; () banked
  1694  0002A4  516A               	movf	main@n& (0+255),w,b
  1695  0002A6  0D01               	mullw	1
  1696  0002A8  0E4A               	movlw	low main@buffer
  1697  0002AA  24F3               	addwf	prodl,w,c
  1698  0002AC  6ED9               	movwf	fsr2l,c
  1699  0002AE  0E01               	movlw	high main@buffer
  1700  0002B0  20F4               	addwfc	prodh,w,c
  1701  0002B2  6EDA               	movwf	fsr2h,c
  1702  0002B4  0E3F               	movlw	63
  1703  0002B6  6EDF               	movwf	indf2,c
  1704                           
  1705                           ; BSR set to: 1
  1706                           ;main.c: 102: Lcd_Set_Cursor(2, 7 + n);
  1707  0002B8  0101               	movlb	1	; () banked
  1708  0002BA  516A               	movf	main@n& (0+255),w,b
  1709  0002BC  0F07               	addlw	7
  1710  0002BE  6E12               	movwf	Lcd_Set_Cursor@b,c
  1711  0002C0  0E02               	movlw	2
  1712  0002C2  ECFE  F00C         	call	_Lcd_Set_Cursor
  1713                           
  1714                           ;main.c: 103: Lcd_Write_Char('_');
  1715  0002C6  0E5F               	movlw	95
  1716  0002C8  EC62  F00D         	call	_Lcd_Write_Char
  1717                           
  1718                           ;main.c: 104: latch_keypad(&x);
  1719  0002CC  0E6B               	movlw	low main@x
  1720  0002CE  6E10               	movwf	latch_keypad@x,c
  1721  0002D0  0E01               	movlw	high main@x
  1722  0002D2  6E11               	movwf	latch_keypad@x+1,c
  1723  0002D4  EC46  F00D         	call	_latch_keypad	;wreg free
  1724                           
  1725                           ;main.c: 105: Lcd_Set_Cursor(2, 8 + n);
  1726  0002D8  0101               	movlb	1	; () banked
  1727  0002DA  516A               	movf	main@n& (0+255),w,b
  1728  0002DC  0F08               	addlw	8
  1729  0002DE  6E12               	movwf	Lcd_Set_Cursor@b,c
  1730  0002E0  0E02               	movlw	2
  1731  0002E2  ECFE  F00C         	call	_Lcd_Set_Cursor
  1732                           
  1733                           ;main.c: 106: Lcd_Write_Char(' ');
  1734  0002E6  0E20               	movlw	32
  1735  0002E8  EC62  F00D         	call	_Lcd_Write_Char
  1736                           
  1737                           ;main.c: 107: Lcd_Set_Cursor(2, 7 + n);
  1738  0002EC  0101               	movlb	1	; () banked
  1739  0002EE  516A               	movf	main@n& (0+255),w,b
  1740  0002F0  0F07               	addlw	7
  1741  0002F2  6E12               	movwf	Lcd_Set_Cursor@b,c
  1742  0002F4  0E02               	movlw	2
  1743  0002F6  ECFE  F00C         	call	_Lcd_Set_Cursor
  1744                           
  1745                           ;main.c: 108: n--;
  1746  0002FA  0101               	movlb	1	; () banked
  1747  0002FC  076A               	decf	main@n& (0+255),f,b
  1748                           
  1749                           ;main.c: 109: }
  1750  0002FE  D044               	goto	l4618
  1751  000300                     l4600:
  1752                           
  1753                           ; BSR set to: 1
  1754                           ;main.c: 110: else if ((x - '#') != 0)
  1755  000300  0EDD               	movlw	221
  1756  000302  6E27               	movwf	??_main& (0+255),c
  1757  000304  0EFF               	movlw	255
  1758  000306  6E28               	movwf	(??_main+1)& (0+255),c
  1759  000308  0101               	movlb	1	; () banked
  1760  00030A  516B               	movf	main@x& (0+255),w,b
  1761  00030C  6E29               	movwf	(??_main+2)& (0+255),c
  1762  00030E  6A2A               	clrf	(??_main+3)& (0+255),c
  1763  000310  5027               	movf	??_main,w,c
  1764  000312  2629               	addwf	??_main+2,f,c
  1765  000314  5028               	movf	??_main+1,w,c
  1766  000316  222A               	addwfc	??_main+3,f,c
  1767  000318  5029               	movf	??_main+2,w,c
  1768  00031A  102A               	iorwf	??_main+3,w,c
  1769  00031C  B4D8               	btfsc	status,2,c
  1770  00031E  D034               	goto	l4618
  1771                           
  1772                           ; BSR set to: 1
  1773                           ;main.c: 111: {
  1774                           ;main.c: 112: if ((x == '*')|(n == 9))
  1775  000320  0E2A               	movlw	42
  1776  000322  0101               	movlb	1	; () banked
  1777  000324  196B               	xorwf	main@x& (0+255),w,b
  1778  000326  B4D8               	btfsc	status,2,c
  1779  000328  D033               	goto	l4620
  1780                           
  1781                           ; BSR set to: 1
  1782  00032A  0E09               	movlw	9
  1783  00032C  0101               	movlb	1	; () banked
  1784  00032E  196A               	xorwf	main@n& (0+255),w,b
  1785  000330  B4D8               	btfsc	status,2,c
  1786  000332  D02E               	goto	l4620
  1787                           
  1788                           ; BSR set to: 1
  1789                           ;main.c: 115: }
  1790                           ;main.c: 116: n++;
  1791                           
  1792                           ; BSR set to: 1
  1793                           
  1794                           ; BSR set to: 1
  1795                           ;main.c: 113: {
  1796                           ;main.c: 114: break;
  1797  000334  0101               	movlb	1	; () banked
  1798  000336  2B6A               	incf	main@n& (0+255),f,b
  1799                           
  1800                           ; BSR set to: 1
  1801                           ;main.c: 117: buffer[n-1] = x;
  1802  000338  0EFF               	movlw	255
  1803  00033A  6E27               	movwf	??_main& (0+255),c
  1804  00033C  0EFF               	movlw	255
  1805  00033E  6E28               	movwf	(??_main+1)& (0+255),c
  1806  000340  0101               	movlb	1	; () banked
  1807  000342  516A               	movf	main@n& (0+255),w,b
  1808  000344  6E29               	movwf	(??_main+2)& (0+255),c
  1809  000346  6A2A               	clrf	(??_main+3)& (0+255),c
  1810  000348  5027               	movf	??_main,w,c
  1811  00034A  2629               	addwf	??_main+2,f,c
  1812  00034C  5028               	movf	??_main+1,w,c
  1813  00034E  222A               	addwfc	??_main+3,f,c
  1814  000350  0E4A               	movlw	low main@buffer
  1815  000352  2429               	addwf	??_main+2,w,c
  1816  000354  6ED9               	movwf	fsr2l,c
  1817  000356  0E01               	movlw	high main@buffer
  1818  000358  202A               	addwfc	??_main+3,w,c
  1819  00035A  6EDA               	movwf	fsr2h,c
  1820  00035C  C16B  FFDF         	movff	main@x,indf2
  1821                           
  1822                           ; BSR set to: 1
  1823                           ;main.c: 118: Lcd_Set_Cursor(2, 7 + n);
  1824  000360  0101               	movlb	1	; () banked
  1825  000362  516A               	movf	main@n& (0+255),w,b
  1826  000364  0F07               	addlw	7
  1827  000366  6E12               	movwf	Lcd_Set_Cursor@b,c
  1828  000368  0E02               	movlw	2
  1829  00036A  ECFE  F00C         	call	_Lcd_Set_Cursor
  1830                           
  1831                           ;main.c: 119: Lcd_Write_Char(x);
  1832  00036E  0101               	movlb	1	; () banked
  1833  000370  516B               	movf	main@x& (0+255),w,b
  1834  000372  EC62  F00D         	call	_Lcd_Write_Char
  1835                           
  1836                           ;main.c: 120: Lcd_Write_Char('_');
  1837  000376  0E5F               	movlw	95
  1838  000378  EC62  F00D         	call	_Lcd_Write_Char
  1839                           
  1840                           ;main.c: 121: latch_keypad(&x);
  1841  00037C  0E6B               	movlw	low main@x
  1842  00037E  6E10               	movwf	latch_keypad@x,c
  1843  000380  0E01               	movlw	high main@x
  1844  000382  6E11               	movwf	latch_keypad@x+1,c
  1845  000384  EC46  F00D         	call	_latch_keypad	;wreg free
  1846  000388                     l4618:
  1847  000388  0E09               	movlw	9
  1848  00038A  0101               	movlb	1	; () banked
  1849  00038C  656A               	cpfsgt	main@n& (0+255),b
  1850  00038E  D74C               	goto	l4568
  1851  000390                     l4620:
  1852                           
  1853                           ; BSR set to: 1
  1854                           ;main.c: 122: }
  1855                           ;main.c: 123: }
  1856                           ;main.c: 124: }
  1857                           ;main.c: 125: for (int i = 0; i < n; i++)
  1858  000390  0E00               	movlw	0
  1859  000392  0101               	movlb	1	; () banked
  1860  000394  6F64               	movwf	(main@i_776+1)& (0+255),b
  1861  000396  0E00               	movlw	0
  1862  000398  6F63               	movwf	main@i_776& (0+255),b
  1863  00039A  D055               	goto	l4628
  1864  00039C                     l4622:
  1865                           
  1866                           ; BSR set to: 1
  1867                           ;main.c: 126: {
  1868                           ;main.c: 127: current_user[8 - i] = buffer[(n-1) - i];
  1869  00039C  0EFF               	movlw	255
  1870  00039E  6E27               	movwf	??_main& (0+255),c
  1871  0003A0  0EFF               	movlw	255
  1872  0003A2  6E28               	movwf	(??_main+1)& (0+255),c
  1873  0003A4  C163  F029         	movff	main@i_776,??_main+2
  1874  0003A8  C164  F02A         	movff	main@i_776+1,??_main+3
  1875  0003AC  1E29               	comf	??_main+2,f,c
  1876  0003AE  1E2A               	comf	??_main+3,f,c
  1877  0003B0  4A29               	infsnz	??_main+2,f,c
  1878  0003B2  2A2A               	incf	??_main+3,f,c
  1879  0003B4  0101               	movlb	1	; () banked
  1880  0003B6  516A               	movf	main@n& (0+255),w,b
  1881  0003B8  6E2B               	movwf	(??_main+4)& (0+255),c
  1882  0003BA  6A2C               	clrf	(??_main+5)& (0+255),c
  1883  0003BC  5029               	movf	??_main+2,w,c
  1884  0003BE  262B               	addwf	??_main+4,f,c
  1885  0003C0  502A               	movf	??_main+3,w,c
  1886  0003C2  222C               	addwfc	??_main+5,f,c
  1887  0003C4  5027               	movf	??_main,w,c
  1888  0003C6  262B               	addwf	??_main+4,f,c
  1889  0003C8  5028               	movf	??_main+1,w,c
  1890  0003CA  222C               	addwfc	??_main+5,f,c
  1891  0003CC  0E4A               	movlw	low main@buffer
  1892  0003CE  242B               	addwf	??_main+4,w,c
  1893  0003D0  6ED9               	movwf	fsr2l,c
  1894  0003D2  0E01               	movlw	high main@buffer
  1895  0003D4  202C               	addwfc	??_main+5,w,c
  1896  0003D6  6EDA               	movwf	fsr2h,c
  1897  0003D8  C163  F02D         	movff	main@i_776,??_main+6
  1898  0003DC  C164  F02E         	movff	main@i_776+1,??_main+7
  1899  0003E0  1E2D               	comf	??_main+6,f,c
  1900  0003E2  1E2E               	comf	??_main+7,f,c
  1901  0003E4  4A2D               	infsnz	??_main+6,f,c
  1902  0003E6  2A2E               	incf	??_main+7,f,c
  1903  0003E8  0E08               	movlw	8
  1904  0003EA  262D               	addwf	??_main+6,f,c
  1905  0003EC  0E00               	movlw	0
  1906  0003EE  222E               	addwfc	??_main+7,f,c
  1907  0003F0  0ED3               	movlw	low _current_user
  1908  0003F2  242D               	addwf	??_main+6,w,c
  1909  0003F4  6EE1               	movwf	fsr1l,c
  1910  0003F6  0E00               	movlw	high _current_user
  1911  0003F8  202E               	addwfc	??_main+7,w,c
  1912  0003FA  6EE2               	movwf	fsr1h,c
  1913  0003FC  CFDF FFE7          	movff	indf2,indf1
  1914                           
  1915                           ; BSR set to: 1
  1916                           ;main.c: 128: buffer[(n-1) - i] = '0';
  1917  000400  0EFF               	movlw	255
  1918  000402  6E27               	movwf	??_main& (0+255),c
  1919  000404  0EFF               	movlw	255
  1920  000406  6E28               	movwf	(??_main+1)& (0+255),c
  1921  000408  C163  F029         	movff	main@i_776,??_main+2
  1922  00040C  C164  F02A         	movff	main@i_776+1,??_main+3
  1923  000410  1E29               	comf	??_main+2,f,c
  1924  000412  1E2A               	comf	??_main+3,f,c
  1925  000414  4A29               	infsnz	??_main+2,f,c
  1926  000416  2A2A               	incf	??_main+3,f,c
  1927  000418  0101               	movlb	1	; () banked
  1928  00041A  516A               	movf	main@n& (0+255),w,b
  1929  00041C  6E2B               	movwf	(??_main+4)& (0+255),c
  1930  00041E  6A2C               	clrf	(??_main+5)& (0+255),c
  1931  000420  5029               	movf	??_main+2,w,c
  1932  000422  262B               	addwf	??_main+4,f,c
  1933  000424  502A               	movf	??_main+3,w,c
  1934  000426  222C               	addwfc	??_main+5,f,c
  1935  000428  5027               	movf	??_main,w,c
  1936  00042A  262B               	addwf	??_main+4,f,c
  1937  00042C  5028               	movf	??_main+1,w,c
  1938  00042E  222C               	addwfc	??_main+5,f,c
  1939  000430  0E4A               	movlw	low main@buffer
  1940  000432  242B               	addwf	??_main+4,w,c
  1941  000434  6ED9               	movwf	fsr2l,c
  1942  000436  0E01               	movlw	high main@buffer
  1943  000438  202C               	addwfc	??_main+5,w,c
  1944  00043A  6EDA               	movwf	fsr2h,c
  1945  00043C  0E30               	movlw	48
  1946  00043E  6EDF               	movwf	indf2,c
  1947                           
  1948                           ; BSR set to: 1
  1949  000440  0101               	movlb	1	; () banked
  1950  000442  4B63               	infsnz	main@i_776& (0+255),f,b
  1951  000444  2B64               	incf	(main@i_776+1)& (0+255),f,b
  1952  000446                     l4628:
  1953                           
  1954                           ; BSR set to: 1
  1955  000446  0101               	movlb	1	; () banked
  1956  000448  516A               	movf	main@n& (0+255),w,b
  1957  00044A  6E27               	movwf	??_main& (0+255),c
  1958  00044C  6A28               	clrf	(??_main+1)& (0+255),c
  1959  00044E  5027               	movf	??_main,w,c
  1960  000450  0101               	movlb	1	; () banked
  1961  000452  5D63               	subwf	main@i_776& (0+255),w,b
  1962  000454  0101               	movlb	1	; () banked
  1963  000456  5164               	movf	(main@i_776+1)& (0+255),w,b
  1964  000458  0A80               	xorlw	128
  1965  00045A  6E29               	movwf	(??_main+2)& (0+255),c
  1966  00045C  5028               	movf	??_main+1,w,c
  1967  00045E  0A80               	xorlw	128
  1968  000460  5829               	subwfb	(??_main+2)& (0+255),w,c
  1969  000462  A0D8               	btfss	status,0,c
  1970  000464  D79B               	goto	l4622
  1971                           
  1972                           ; BSR set to: 1
  1973                           ;main.c: 129: }
  1974                           ;main.c: 130: menu_progress_bar(25);
  1975                           
  1976                           ; BSR set to: 1
  1977  000466  0E00               	movlw	0
  1978  000468  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  1979  00046A  0E19               	movlw	25
  1980  00046C  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  1981  00046E  ECE3  F009         	call	_menu_progress_bar	;wreg free
  1982                           
  1983                           ;main.c: 132: p = 0;
  1984  000472  0E00               	movlw	0
  1985  000474  0101               	movlb	1	; () banked
  1986  000476  6F69               	movwf	main@p& (0+255),b
  1987                           
  1988                           ; BSR set to: 1
  1989                           ;main.c: 133: Lcd_Set_Cursor(1,1);
  1990  000478  0E01               	movlw	1
  1991  00047A  6E12               	movwf	Lcd_Set_Cursor@b,c
  1992  00047C  0E01               	movlw	1
  1993  00047E  ECFE  F00C         	call	_Lcd_Set_Cursor
  1994                           
  1995                           ;main.c: 134: Lcd_Write_String("Enter your PIN: ");
  1996  000482  0E42               	movlw	low STR_5
  1997  000484  6E14               	movwf	Lcd_Write_String@a,c
  1998  000486  0E7F               	movlw	high STR_5
  1999  000488  6E15               	movwf	Lcd_Write_String@a+1,c
  2000  00048A  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  2001                           
  2002                           ;main.c: 135: Lcd_Set_Cursor(2,1);
  2003  00048E  0E01               	movlw	1
  2004  000490  6E12               	movwf	Lcd_Set_Cursor@b,c
  2005  000492  0E02               	movlw	2
  2006  000494  ECFE  F00C         	call	_Lcd_Set_Cursor
  2007                           
  2008                           ;main.c: 136: Lcd_Write_String("[ ]             ");
  2009  000498  0E98               	movlw	low STR_4
  2010  00049A  6E14               	movwf	Lcd_Write_String@a,c
  2011  00049C  0E7E               	movlw	high STR_4
  2012  00049E  6E15               	movwf	Lcd_Write_String@a+1,c
  2013  0004A0  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  2014                           
  2015                           ;main.c: 137: Lcd_Set_Cursor(2,1);
  2016  0004A4  0E01               	movlw	1
  2017  0004A6  6E12               	movwf	Lcd_Set_Cursor@b,c
  2018  0004A8  0E02               	movlw	2
  2019  0004AA  ECFE  F00C         	call	_Lcd_Set_Cursor
  2020                           
  2021                           ;main.c: 138: while (p < 10)
  2022  0004AE  D0B8               	goto	l4696
  2023  0004B0                     l4644:
  2024                           
  2025                           ;main.c: 139: {
  2026                           ;main.c: 140: if (p == 9)
  2027  0004B0  0E09               	movlw	9
  2028  0004B2  0101               	movlb	1	; () banked
  2029  0004B4  1969               	xorwf	main@p& (0+255),w,b
  2030  0004B6  B4D8               	btfsc	status,2,c
  2031  0004B8  D0B7               	goto	l4698
  2032                           
  2033                           ; BSR set to: 1
  2034                           ;main.c: 142: char c[] = {'0','1','2','3','4','5','6','7','8','9'};
  2035                           
  2036                           ; BSR set to: 1
  2037                           
  2038                           ; BSR set to: 1
  2039                           ;main.c: 141: break;
  2040  0004BA  EE20  F09C         	lfsr	2,main@F3681
  2041  0004BE  EE11  F040         	lfsr	1,main@c
  2042  0004C2  0E09               	movlw	9
  2043  0004C4                     u4451:
  2044  0004C4  CFDB FFE3          	movff	plusw2,plusw1
  2045  0004C8  06E8               	decf	wreg,f,c
  2046  0004CA  E2FC               	bc	u4451
  2047                           
  2048                           ; BSR set to: 1
  2049                           ;main.c: 143: Lcd_Set_Cursor(2,2);
  2050  0004CC  0E02               	movlw	2
  2051  0004CE  6E12               	movwf	Lcd_Set_Cursor@b,c
  2052  0004D0  0E02               	movlw	2
  2053  0004D2  ECFE  F00C         	call	_Lcd_Set_Cursor
  2054                           
  2055                           ;main.c: 144: Lcd_Write_Char(c[9-p]);
  2056  0004D6  0101               	movlb	1	; () banked
  2057  0004D8  5169               	movf	main@p& (0+255),w,b
  2058  0004DA  6E27               	movwf	??_main& (0+255),c
  2059  0004DC  6A28               	clrf	(??_main+1)& (0+255),c
  2060  0004DE  1E27               	comf	??_main,f,c
  2061  0004E0  1E28               	comf	??_main+1,f,c
  2062  0004E2  4A27               	infsnz	??_main,f,c
  2063  0004E4  2A28               	incf	??_main+1,f,c
  2064  0004E6  0E09               	movlw	9
  2065  0004E8  2627               	addwf	??_main,f,c
  2066  0004EA  0E00               	movlw	0
  2067  0004EC  2228               	addwfc	??_main+1,f,c
  2068  0004EE  0E40               	movlw	low main@c
  2069  0004F0  2427               	addwf	??_main,w,c
  2070  0004F2  6ED9               	movwf	fsr2l,c
  2071  0004F4  0E01               	movlw	high main@c
  2072  0004F6  2028               	addwfc	??_main+1,w,c
  2073  0004F8  6EDA               	movwf	fsr2h,c
  2074  0004FA  50DF               	movf	indf2,w,c
  2075  0004FC  EC62  F00D         	call	_Lcd_Write_Char
  2076                           
  2077                           ;main.c: 145: x = read_keypad();
  2078  000500  EC2A  F00B         	call	_read_keypad	;wreg free
  2079  000504  0101               	movlb	1	; () banked
  2080  000506  6F6B               	movwf	main@x& (0+255),b
  2081                           
  2082                           ; BSR set to: 1
  2083                           ;main.c: 146: if (x != '_')
  2084  000508  0E5F               	movlw	95
  2085  00050A  0101               	movlb	1	; () banked
  2086  00050C  196B               	xorwf	main@x& (0+255),w,b
  2087  00050E  B4D8               	btfsc	status,2,c
  2088  000510  D087               	goto	l4696
  2089                           
  2090                           ; BSR set to: 1
  2091                           ;main.c: 147: {
  2092                           ;main.c: 148: if (((x - '#') == 0)&&(p > 0))
  2093  000512  0EDD               	movlw	221
  2094  000514  6E27               	movwf	??_main& (0+255),c
  2095  000516  0EFF               	movlw	255
  2096  000518  6E28               	movwf	(??_main+1)& (0+255),c
  2097  00051A  0101               	movlb	1	; () banked
  2098  00051C  516B               	movf	main@x& (0+255),w,b
  2099  00051E  6E29               	movwf	(??_main+2)& (0+255),c
  2100  000520  6A2A               	clrf	(??_main+3)& (0+255),c
  2101  000522  5027               	movf	??_main,w,c
  2102  000524  2629               	addwf	??_main+2,f,c
  2103  000526  5028               	movf	??_main+1,w,c
  2104  000528  222A               	addwfc	??_main+3,f,c
  2105  00052A  5029               	movf	??_main+2,w,c
  2106  00052C  102A               	iorwf	??_main+3,w,c
  2107  00052E  A4D8               	btfss	status,2,c
  2108  000530  D034               	goto	l4678
  2109                           
  2110                           ; BSR set to: 1
  2111  000532  0101               	movlb	1	; () banked
  2112  000534  5169               	movf	main@p& (0+255),w,b
  2113  000536  0101               	movlb	1	; () banked
  2114  000538  B4D8               	btfsc	status,2,c
  2115  00053A  D02F               	goto	l4678
  2116                           
  2117                           ; BSR set to: 1
  2118                           ;main.c: 149: {
  2119                           ;main.c: 150: buffer[p] = '?';
  2120  00053C  0101               	movlb	1	; () banked
  2121  00053E  5169               	movf	main@p& (0+255),w,b
  2122  000540  0D01               	mullw	1
  2123  000542  0E4A               	movlw	low main@buffer
  2124  000544  24F3               	addwf	prodl,w,c
  2125  000546  6ED9               	movwf	fsr2l,c
  2126  000548  0E01               	movlw	high main@buffer
  2127  00054A  20F4               	addwfc	prodh,w,c
  2128  00054C  6EDA               	movwf	fsr2h,c
  2129  00054E  0E3F               	movlw	63
  2130  000550  6EDF               	movwf	indf2,c
  2131                           
  2132                           ; BSR set to: 1
  2133                           ;main.c: 151: Lcd_Set_Cursor(2, 7 + p);
  2134  000552  0101               	movlb	1	; () banked
  2135  000554  5169               	movf	main@p& (0+255),w,b
  2136  000556  0F07               	addlw	7
  2137  000558  6E12               	movwf	Lcd_Set_Cursor@b,c
  2138  00055A  0E02               	movlw	2
  2139  00055C  ECFE  F00C         	call	_Lcd_Set_Cursor
  2140                           
  2141                           ;main.c: 152: Lcd_Write_Char('_');
  2142  000560  0E5F               	movlw	95
  2143  000562  EC62  F00D         	call	_Lcd_Write_Char
  2144                           
  2145                           ;main.c: 153: latch_keypad(&x);
  2146  000566  0E6B               	movlw	low main@x
  2147  000568  6E10               	movwf	latch_keypad@x,c
  2148  00056A  0E01               	movlw	high main@x
  2149  00056C  6E11               	movwf	latch_keypad@x+1,c
  2150  00056E  EC46  F00D         	call	_latch_keypad	;wreg free
  2151                           
  2152                           ;main.c: 154: Lcd_Set_Cursor(2, 8 + p);
  2153  000572  0101               	movlb	1	; () banked
  2154  000574  5169               	movf	main@p& (0+255),w,b
  2155  000576  0F08               	addlw	8
  2156  000578  6E12               	movwf	Lcd_Set_Cursor@b,c
  2157  00057A  0E02               	movlw	2
  2158  00057C  ECFE  F00C         	call	_Lcd_Set_Cursor
  2159                           
  2160                           ;main.c: 155: Lcd_Write_Char(' ');
  2161  000580  0E20               	movlw	32
  2162  000582  EC62  F00D         	call	_Lcd_Write_Char
  2163                           
  2164                           ;main.c: 156: Lcd_Set_Cursor(2, 7 + p);
  2165  000586  0101               	movlb	1	; () banked
  2166  000588  5169               	movf	main@p& (0+255),w,b
  2167  00058A  0F07               	addlw	7
  2168  00058C  6E12               	movwf	Lcd_Set_Cursor@b,c
  2169  00058E  0E02               	movlw	2
  2170  000590  ECFE  F00C         	call	_Lcd_Set_Cursor
  2171                           
  2172                           ;main.c: 157: p--;
  2173  000594  0101               	movlb	1	; () banked
  2174  000596  0769               	decf	main@p& (0+255),f,b
  2175                           
  2176                           ;main.c: 158: }
  2177  000598  D043               	goto	l4696
  2178  00059A                     l4678:
  2179                           
  2180                           ; BSR set to: 1
  2181                           ;main.c: 159: else if ((x - '#') != 0)
  2182  00059A  0EDD               	movlw	221
  2183  00059C  6E27               	movwf	??_main& (0+255),c
  2184  00059E  0EFF               	movlw	255
  2185  0005A0  6E28               	movwf	(??_main+1)& (0+255),c
  2186  0005A2  0101               	movlb	1	; () banked
  2187  0005A4  516B               	movf	main@x& (0+255),w,b
  2188  0005A6  6E29               	movwf	(??_main+2)& (0+255),c
  2189  0005A8  6A2A               	clrf	(??_main+3)& (0+255),c
  2190  0005AA  5027               	movf	??_main,w,c
  2191  0005AC  2629               	addwf	??_main+2,f,c
  2192  0005AE  5028               	movf	??_main+1,w,c
  2193  0005B0  222A               	addwfc	??_main+3,f,c
  2194  0005B2  5029               	movf	??_main+2,w,c
  2195  0005B4  102A               	iorwf	??_main+3,w,c
  2196  0005B6  B4D8               	btfsc	status,2,c
  2197  0005B8  D033               	goto	l4696
  2198                           
  2199                           ; BSR set to: 1
  2200                           ;main.c: 160: {
  2201                           ;main.c: 161: if ((x == '*')|(p == 9))
  2202  0005BA  0E2A               	movlw	42
  2203  0005BC  0101               	movlb	1	; () banked
  2204  0005BE  196B               	xorwf	main@x& (0+255),w,b
  2205  0005C0  B4D8               	btfsc	status,2,c
  2206  0005C2  D032               	goto	l4698
  2207                           
  2208                           ; BSR set to: 1
  2209  0005C4  0E09               	movlw	9
  2210  0005C6  0101               	movlb	1	; () banked
  2211  0005C8  1969               	xorwf	main@p& (0+255),w,b
  2212  0005CA  B4D8               	btfsc	status,2,c
  2213  0005CC  D02D               	goto	l4698
  2214                           
  2215                           ; BSR set to: 1
  2216                           ;main.c: 164: }
  2217                           ;main.c: 165: p++;
  2218                           
  2219                           ; BSR set to: 1
  2220                           
  2221                           ; BSR set to: 1
  2222                           ;main.c: 162: {
  2223                           ;main.c: 163: break;
  2224  0005CE  0101               	movlb	1	; () banked
  2225  0005D0  2B69               	incf	main@p& (0+255),f,b
  2226                           
  2227                           ; BSR set to: 1
  2228                           ;main.c: 166: buffer[p-1] = x;
  2229  0005D2  0EFF               	movlw	255
  2230  0005D4  6E27               	movwf	??_main& (0+255),c
  2231  0005D6  0EFF               	movlw	255
  2232  0005D8  6E28               	movwf	(??_main+1)& (0+255),c
  2233  0005DA  0101               	movlb	1	; () banked
  2234  0005DC  5169               	movf	main@p& (0+255),w,b
  2235  0005DE  6E29               	movwf	(??_main+2)& (0+255),c
  2236  0005E0  6A2A               	clrf	(??_main+3)& (0+255),c
  2237  0005E2  5027               	movf	??_main,w,c
  2238  0005E4  2629               	addwf	??_main+2,f,c
  2239  0005E6  5028               	movf	??_main+1,w,c
  2240  0005E8  222A               	addwfc	??_main+3,f,c
  2241  0005EA  0E4A               	movlw	low main@buffer
  2242  0005EC  2429               	addwf	??_main+2,w,c
  2243  0005EE  6ED9               	movwf	fsr2l,c
  2244  0005F0  0E01               	movlw	high main@buffer
  2245  0005F2  202A               	addwfc	??_main+3,w,c
  2246  0005F4  6EDA               	movwf	fsr2h,c
  2247  0005F6  C16B  FFDF         	movff	main@x,indf2
  2248                           
  2249                           ; BSR set to: 1
  2250                           ;main.c: 167: Lcd_Set_Cursor(2, 7 + p);
  2251  0005FA  0101               	movlb	1	; () banked
  2252  0005FC  5169               	movf	main@p& (0+255),w,b
  2253  0005FE  0F07               	addlw	7
  2254  000600  6E12               	movwf	Lcd_Set_Cursor@b,c
  2255  000602  0E02               	movlw	2
  2256  000604  ECFE  F00C         	call	_Lcd_Set_Cursor
  2257                           
  2258                           ;main.c: 168: Lcd_Write_Char('*');
  2259  000608  0E2A               	movlw	42
  2260  00060A  EC62  F00D         	call	_Lcd_Write_Char
  2261                           
  2262                           ;main.c: 169: Lcd_Write_Char('_');
  2263  00060E  0E5F               	movlw	95
  2264  000610  EC62  F00D         	call	_Lcd_Write_Char
  2265                           
  2266                           ;main.c: 170: latch_keypad(&x);
  2267  000614  0E6B               	movlw	low main@x
  2268  000616  6E10               	movwf	latch_keypad@x,c
  2269  000618  0E01               	movlw	high main@x
  2270  00061A  6E11               	movwf	latch_keypad@x+1,c
  2271  00061C  EC46  F00D         	call	_latch_keypad	;wreg free
  2272  000620                     l4696:
  2273  000620  0E09               	movlw	9
  2274  000622  0101               	movlb	1	; () banked
  2275  000624  6569               	cpfsgt	main@p& (0+255),b
  2276  000626  D744               	goto	l4644
  2277  000628                     l4698:
  2278                           
  2279                           ; BSR set to: 1
  2280                           ;main.c: 171: }
  2281                           ;main.c: 172: }
  2282                           ;main.c: 173: }
  2283                           ;main.c: 174: for (int i = 0; i < p; i++)
  2284  000628  0E00               	movlw	0
  2285  00062A  0101               	movlb	1	; () banked
  2286  00062C  6F5C               	movwf	(main@i_782+1)& (0+255),b
  2287  00062E  0E00               	movlw	0
  2288  000630  6F5B               	movwf	main@i_782& (0+255),b
  2289  000632  D035               	goto	l4704
  2290  000634                     l4700:
  2291                           
  2292                           ; BSR set to: 1
  2293                           ;main.c: 175: current_pin[8 - i] = buffer[(p-1) - i];
  2294  000634  0EFF               	movlw	255
  2295  000636  6E27               	movwf	??_main& (0+255),c
  2296  000638  0EFF               	movlw	255
  2297  00063A  6E28               	movwf	(??_main+1)& (0+255),c
  2298  00063C  C15B  F029         	movff	main@i_782,??_main+2
  2299  000640  C15C  F02A         	movff	main@i_782+1,??_main+3
  2300  000644  1E29               	comf	??_main+2,f,c
  2301  000646  1E2A               	comf	??_main+3,f,c
  2302  000648  4A29               	infsnz	??_main+2,f,c
  2303  00064A  2A2A               	incf	??_main+3,f,c
  2304  00064C  0101               	movlb	1	; () banked
  2305  00064E  5169               	movf	main@p& (0+255),w,b
  2306  000650  6E2B               	movwf	(??_main+4)& (0+255),c
  2307  000652  6A2C               	clrf	(??_main+5)& (0+255),c
  2308  000654  5029               	movf	??_main+2,w,c
  2309  000656  262B               	addwf	??_main+4,f,c
  2310  000658  502A               	movf	??_main+3,w,c
  2311  00065A  222C               	addwfc	??_main+5,f,c
  2312  00065C  5027               	movf	??_main,w,c
  2313  00065E  262B               	addwf	??_main+4,f,c
  2314  000660  5028               	movf	??_main+1,w,c
  2315  000662  222C               	addwfc	??_main+5,f,c
  2316  000664  0E4A               	movlw	low main@buffer
  2317  000666  242B               	addwf	??_main+4,w,c
  2318  000668  6ED9               	movwf	fsr2l,c
  2319  00066A  0E01               	movlw	high main@buffer
  2320  00066C  202C               	addwfc	??_main+5,w,c
  2321  00066E  6EDA               	movwf	fsr2h,c
  2322  000670  C15B  F02D         	movff	main@i_782,??_main+6
  2323  000674  C15C  F02E         	movff	main@i_782+1,??_main+7
  2324  000678  1E2D               	comf	??_main+6,f,c
  2325  00067A  1E2E               	comf	??_main+7,f,c
  2326  00067C  4A2D               	infsnz	??_main+6,f,c
  2327  00067E  2A2E               	incf	??_main+7,f,c
  2328  000680  0E08               	movlw	8
  2329  000682  262D               	addwf	??_main+6,f,c
  2330  000684  0E00               	movlw	0
  2331  000686  222E               	addwfc	??_main+7,f,c
  2332  000688  0ECA               	movlw	low _current_pin
  2333  00068A  242D               	addwf	??_main+6,w,c
  2334  00068C  6EE1               	movwf	fsr1l,c
  2335  00068E  0E00               	movlw	high _current_pin
  2336  000690  202E               	addwfc	??_main+7,w,c
  2337  000692  6EE2               	movwf	fsr1h,c
  2338  000694  CFDF FFE7          	movff	indf2,indf1
  2339                           
  2340                           ; BSR set to: 1
  2341  000698  0101               	movlb	1	; () banked
  2342  00069A  4B5B               	infsnz	main@i_782& (0+255),f,b
  2343  00069C  2B5C               	incf	(main@i_782+1)& (0+255),f,b
  2344  00069E                     l4704:
  2345                           
  2346                           ; BSR set to: 1
  2347  00069E  0101               	movlb	1	; () banked
  2348  0006A0  5169               	movf	main@p& (0+255),w,b
  2349  0006A2  6E27               	movwf	??_main& (0+255),c
  2350  0006A4  6A28               	clrf	(??_main+1)& (0+255),c
  2351  0006A6  5027               	movf	??_main,w,c
  2352  0006A8  0101               	movlb	1	; () banked
  2353  0006AA  5D5B               	subwf	main@i_782& (0+255),w,b
  2354  0006AC  0101               	movlb	1	; () banked
  2355  0006AE  515C               	movf	(main@i_782+1)& (0+255),w,b
  2356  0006B0  0A80               	xorlw	128
  2357  0006B2  6E29               	movwf	(??_main+2)& (0+255),c
  2358  0006B4  5028               	movf	??_main+1,w,c
  2359  0006B6  0A80               	xorlw	128
  2360  0006B8  5829               	subwfb	(??_main+2)& (0+255),w,c
  2361  0006BA  A0D8               	btfss	status,0,c
  2362  0006BC  D7BB               	goto	l4700
  2363                           
  2364                           ; BSR set to: 1
  2365                           ;main.c: 176: menu_progress_bar(25);
  2366                           
  2367                           ; BSR set to: 1
  2368  0006BE  0E00               	movlw	0
  2369  0006C0  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  2370  0006C2  0E19               	movlw	25
  2371  0006C4  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  2372  0006C6  ECE3  F009         	call	_menu_progress_bar	;wreg free
  2373                           
  2374                           ;main.c: 177: Lcd_Set_Cursor(1,1);
  2375  0006CA  0E01               	movlw	1
  2376  0006CC  6E12               	movwf	Lcd_Set_Cursor@b,c
  2377  0006CE  0E01               	movlw	1
  2378  0006D0  ECFE  F00C         	call	_Lcd_Set_Cursor
  2379                           
  2380                           ;main.c: 178: Lcd_Write_String("Waiting System  ");
  2381  0006D4  0E20               	movlw	low STR_7
  2382  0006D6  6E14               	movwf	Lcd_Write_String@a,c
  2383  0006D8  0E7F               	movlw	high STR_7
  2384  0006DA  6E15               	movwf	Lcd_Write_String@a+1,c
  2385  0006DC  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  2386                           
  2387                           ;main.c: 179: Lcd_Set_Cursor(2,1);
  2388  0006E0  0E01               	movlw	1
  2389  0006E2  6E12               	movwf	Lcd_Set_Cursor@b,c
  2390  0006E4  0E02               	movlw	2
  2391  0006E6  ECFE  F00C         	call	_Lcd_Set_Cursor
  2392                           
  2393                           ;main.c: 180: Lcd_Write_String("Response...     ");
  2394  0006EA  0EA9               	movlw	low STR_8
  2395  0006EC  6E14               	movwf	Lcd_Write_String@a,c
  2396  0006EE  0E7E               	movlw	high STR_8
  2397  0006F0  6E15               	movwf	Lcd_Write_String@a+1,c
  2398  0006F2  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  2399                           
  2400                           ;main.c: 184: load_i2c_registers();
  2401  0006F6  ECB4  F00A         	call	_load_i2c_registers	;wreg free
  2402                           
  2403                           ;main.c: 185: unsigned char credential_state = 0;
  2404  0006FA  0E00               	movlw	0
  2405  0006FC  0101               	movlb	1	; () banked
  2406  0006FE  6F5A               	movwf	main@credential_state& (0+255),b
  2407                           
  2408                           ; BSR set to: 1
  2409                           ;main.c: 186: for (int i = 0; i < 32; i++)
  2410  000700  0E00               	movlw	0
  2411  000702  0101               	movlb	1	; () banked
  2412  000704  6F5E               	movwf	(main@i_786+1)& (0+255),b
  2413  000706  0E00               	movlw	0
  2414  000708  6F5D               	movwf	main@i_786& (0+255),b
  2415  00070A                     l4722:
  2416                           
  2417                           ; BSR set to: 1
  2418  00070A  0101               	movlb	1	; () banked
  2419  00070C  BF5E               	btfsc	(main@i_786+1)& (0+255),7,b
  2420  00070E  D008               	goto	l4726
  2421  000710  0101               	movlb	1	; () banked
  2422  000712  515E               	movf	(main@i_786+1)& (0+255),w,b
  2423  000714  E113               	bnz	l4732
  2424  000716  0E20               	movlw	32
  2425  000718  0101               	movlb	1	; () banked
  2426  00071A  5D5D               	subwf	main@i_786& (0+255),w,b
  2427  00071C  B0D8               	btfsc	status,0,c
  2428  00071E  D00E               	goto	l4732
  2429  000720                     l4726:
  2430                           
  2431                           ; BSR set to: 1
  2432                           ;main.c: 187: i2c_w_reg[i] = '-';
  2433  000720  0E20               	movlw	low _i2c_w_reg
  2434  000722  0101               	movlb	1	; () banked
  2435  000724  255D               	addwf	main@i_786& (0+255),w,b
  2436  000726  6ED9               	movwf	fsr2l,c
  2437  000728  0E01               	movlw	high _i2c_w_reg
  2438  00072A  0101               	movlb	1	; () banked
  2439  00072C  215E               	addwfc	(main@i_786+1)& (0+255),w,b
  2440  00072E  6EDA               	movwf	fsr2h,c
  2441  000730  0E2D               	movlw	45
  2442  000732  6EDF               	movwf	indf2,c
  2443                           
  2444                           ; BSR set to: 1
  2445  000734  0101               	movlb	1	; () banked
  2446  000736  4B5D               	infsnz	main@i_786& (0+255),f,b
  2447  000738  2B5E               	incf	(main@i_786+1)& (0+255),f,b
  2448  00073A  D7E7               	goto	l4722
  2449  00073C                     l4732:
  2450                           
  2451                           ; BSR set to: 1
  2452                           ;main.c: 192: {
  2453                           ;main.c: 193: write_busy = 0x00;
  2454  00073C  0E00               	movlw	0
  2455  00073E  0101               	movlb	1	; () banked
  2456  000740  6F53               	movwf	main@write_busy& (0+255),b
  2457                           
  2458                           ;main.c: 194: for (int i = 0; i < 32; i++)
  2459  000742  0E00               	movlw	0
  2460  000744  0101               	movlb	1	; () banked
  2461  000746  6F60               	movwf	(main@i_788+1)& (0+255),b
  2462  000748  0E00               	movlw	0
  2463  00074A  6F5F               	movwf	main@i_788& (0+255),b
  2464  00074C                     l4734:
  2465                           
  2466                           ; BSR set to: 1
  2467  00074C  0101               	movlb	1	; () banked
  2468  00074E  BF60               	btfsc	(main@i_788+1)& (0+255),7,b
  2469  000750  D008               	goto	l4738
  2470  000752  0101               	movlb	1	; () banked
  2471  000754  5160               	movf	(main@i_788+1)& (0+255),w,b
  2472  000756  E118               	bnz	l4746
  2473  000758  0E20               	movlw	32
  2474  00075A  0101               	movlb	1	; () banked
  2475  00075C  5D5F               	subwf	main@i_788& (0+255),w,b
  2476  00075E  B0D8               	btfsc	status,0,c
  2477  000760  D013               	goto	l4746
  2478  000762                     l4738:
  2479                           
  2480                           ; BSR set to: 1
  2481                           ;main.c: 195: if (i2c_w_reg[i] == '-')
  2482  000762  0E20               	movlw	low _i2c_w_reg
  2483  000764  0101               	movlb	1	; () banked
  2484  000766  255F               	addwf	main@i_788& (0+255),w,b
  2485  000768  6ED9               	movwf	fsr2l,c
  2486  00076A  0E01               	movlw	high _i2c_w_reg
  2487  00076C  0101               	movlb	1	; () banked
  2488  00076E  2160               	addwfc	(main@i_788+1)& (0+255),w,b
  2489  000770  6EDA               	movwf	fsr2h,c
  2490  000772  0E2D               	movlw	45
  2491  000774  18DE               	xorwf	postinc2,w,c
  2492  000776  A4D8               	btfss	status,2,c
  2493  000778  D003               	goto	l4742
  2494                           
  2495                           ; BSR set to: 1
  2496                           ;main.c: 196: write_busy = 0x01;
  2497  00077A  0E01               	movlw	1
  2498  00077C  0101               	movlb	1	; () banked
  2499  00077E  6F53               	movwf	main@write_busy& (0+255),b
  2500  000780                     l4742:
  2501                           
  2502                           ; BSR set to: 1
  2503  000780  0101               	movlb	1	; () banked
  2504  000782  4B5F               	infsnz	main@i_788& (0+255),f,b
  2505  000784  2B60               	incf	(main@i_788+1)& (0+255),f,b
  2506  000786  D7E2               	goto	l4734
  2507  000788                     l4746:
  2508                           
  2509                           ; BSR set to: 1
  2510                           ;main.c: 197: } while (write_busy);
  2511  000788  0101               	movlb	1	; () banked
  2512  00078A  5153               	movf	main@write_busy& (0+255),w,b
  2513  00078C  0101               	movlb	1	; () banked
  2514  00078E  A4D8               	btfss	status,2,c
  2515  000790  D7D5               	goto	l4732
  2516                           
  2517                           ; BSR set to: 1
  2518                           ;main.c: 198: i2c_r_reg[0] = '-';
  2519                           
  2520                           ; BSR set to: 1
  2521  000792  0E2D               	movlw	45
  2522  000794  0101               	movlb	1	; () banked
  2523  000796  6F00               	movwf	_i2c_r_reg& (0+255),b	;volatile
  2524                           
  2525                           ; BSR set to: 1
  2526                           ;main.c: 199: credential_state = i2c_w_reg[0];
  2527  000798  C120  F15A         	movff	_i2c_w_reg,main@credential_state	;volatile
  2528                           
  2529                           ;main.c: 200: for (int u = 0; u < 16; u++)
  2530  00079C  0E00               	movlw	0
  2531  00079E  0101               	movlb	1	; () banked
  2532  0007A0  6F66               	movwf	(main@u+1)& (0+255),b
  2533  0007A2  0E00               	movlw	0
  2534  0007A4  6F65               	movwf	main@u& (0+255),b
  2535  0007A6                     l4752:
  2536                           
  2537                           ; BSR set to: 1
  2538  0007A6  0101               	movlb	1	; () banked
  2539  0007A8  BF66               	btfsc	(main@u+1)& (0+255),7,b
  2540  0007AA  D008               	goto	l4756
  2541  0007AC  0101               	movlb	1	; () banked
  2542  0007AE  5166               	movf	(main@u+1)& (0+255),w,b
  2543  0007B0  E121               	bnz	l4762
  2544  0007B2  0E10               	movlw	16
  2545  0007B4  0101               	movlb	1	; () banked
  2546  0007B6  5D65               	subwf	main@u& (0+255),w,b
  2547  0007B8  B0D8               	btfsc	status,0,c
  2548  0007BA  D01C               	goto	l4762
  2549  0007BC                     l4756:
  2550                           
  2551                           ; BSR set to: 1
  2552                           ;main.c: 201: logged_user[u] = i2c_w_reg[u+1];
  2553  0007BC  0E01               	movlw	1
  2554  0007BE  0101               	movlb	1	; () banked
  2555  0007C0  2565               	addwf	main@u& (0+255),w,b
  2556  0007C2  6E27               	movwf	??_main& (0+255),c
  2557  0007C4  0E00               	movlw	0
  2558  0007C6  0101               	movlb	1	; () banked
  2559  0007C8  2166               	addwfc	(main@u+1)& (0+255),w,b
  2560  0007CA  6E28               	movwf	(??_main+1)& (0+255),c
  2561  0007CC  0E20               	movlw	low _i2c_w_reg
  2562  0007CE  2427               	addwf	??_main,w,c
  2563  0007D0  6ED9               	movwf	fsr2l,c
  2564  0007D2  0E01               	movlw	high _i2c_w_reg
  2565  0007D4  2028               	addwfc	??_main+1,w,c
  2566  0007D6  6EDA               	movwf	fsr2h,c
  2567  0007D8  0EBA               	movlw	low _logged_user
  2568  0007DA  0101               	movlb	1	; () banked
  2569  0007DC  2565               	addwf	main@u& (0+255),w,b
  2570  0007DE  6EE1               	movwf	fsr1l,c
  2571  0007E0  0E00               	movlw	high _logged_user
  2572  0007E2  0101               	movlb	1	; () banked
  2573  0007E4  2166               	addwfc	(main@u+1)& (0+255),w,b
  2574  0007E6  6EE2               	movwf	fsr1h,c
  2575  0007E8  CFDF FFE7          	movff	indf2,indf1
  2576                           
  2577                           ; BSR set to: 1
  2578  0007EC  0101               	movlb	1	; () banked
  2579  0007EE  4B65               	infsnz	main@u& (0+255),f,b
  2580  0007F0  2B66               	incf	(main@u+1)& (0+255),f,b
  2581  0007F2  D7D9               	goto	l4752
  2582  0007F4                     l4762:
  2583                           
  2584                           ; BSR set to: 1
  2585                           ;main.c: 202: if (credential_state == 0xA1)
  2586  0007F4  0EA1               	movlw	161
  2587  0007F6  0101               	movlb	1	; () banked
  2588  0007F8  195A               	xorwf	main@credential_state& (0+255),w,b
  2589  0007FA  A4D8               	btfss	status,2,c
  2590  0007FC  D03A               	goto	l4786
  2591                           
  2592                           ; BSR set to: 1
  2593                           ;main.c: 203: {
  2594                           ;main.c: 204: Lcd_Set_Cursor(1,1);
  2595  0007FE  0E01               	movlw	1
  2596  000800  6E12               	movwf	Lcd_Set_Cursor@b,c
  2597  000802  0E01               	movlw	1
  2598  000804  ECFE  F00C         	call	_Lcd_Set_Cursor
  2599                           
  2600                           ;main.c: 205: Lcd_Write_String("[Access Granted]");
  2601  000808  0ECA               	movlw	low STR_9
  2602  00080A  6E14               	movwf	Lcd_Write_String@a,c
  2603  00080C  0E7F               	movlw	high STR_9
  2604  00080E  6E15               	movwf	Lcd_Write_String@a+1,c
  2605  000810  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  2606                           
  2607                           ;main.c: 206: menu_progress_bar(100);
  2608  000814  0E00               	movlw	0
  2609  000816  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  2610  000818  0E64               	movlw	100
  2611  00081A  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  2612  00081C  ECE3  F009         	call	_menu_progress_bar	;wreg free
  2613                           
  2614                           ;main.c: 207: Lcd_Set_Cursor(1,1);
  2615  000820  0E01               	movlw	1
  2616  000822  6E12               	movwf	Lcd_Set_Cursor@b,c
  2617  000824  0E01               	movlw	1
  2618  000826  ECFE  F00C         	call	_Lcd_Set_Cursor
  2619                           
  2620                           ;main.c: 208: Lcd_Write_String("   [ Welcome ]  ");
  2621  00082A  0E0F               	movlw	low STR_10
  2622  00082C  6E14               	movwf	Lcd_Write_String@a,c
  2623  00082E  0E7F               	movlw	high STR_10
  2624  000830  6E15               	movwf	Lcd_Write_String@a+1,c
  2625  000832  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  2626                           
  2627                           ;main.c: 209: for (int i = 0; i < 20; i++)
  2628  000836  0E00               	movlw	0
  2629  000838  0101               	movlb	1	; () banked
  2630  00083A  6F55               	movwf	(main@i_792+1)& (0+255),b
  2631  00083C  0E00               	movlw	0
  2632  00083E  6F54               	movwf	main@i_792& (0+255),b
  2633  000840                     l4776:
  2634                           
  2635                           ; BSR set to: 1
  2636  000840  0101               	movlb	1	; () banked
  2637  000842  BF55               	btfsc	(main@i_792+1)& (0+255),7,b
  2638  000844  D008               	goto	l4780
  2639  000846  0101               	movlb	1	; () banked
  2640  000848  5155               	movf	(main@i_792+1)& (0+255),w,b
  2641  00084A  E110               	bnz	l4784
  2642  00084C  0E14               	movlw	20
  2643  00084E  0101               	movlb	1	; () banked
  2644  000850  5D54               	subwf	main@i_792& (0+255),w,b
  2645  000852  B0D8               	btfsc	status,0,c
  2646  000854  D00B               	goto	l4784
  2647  000856                     l4780:
  2648                           
  2649                           ; BSR set to: 1
  2650                           ;main.c: 210: {
  2651                           ;main.c: 211: _delay((unsigned long)((10)*(16000000/4000.0)));
  2652  000856  0E34               	movlw	52
  2653  000858  6E27               	movwf	??_main& (0+255),c
  2654  00085A  0EF2               	movlw	242
  2655  00085C                     u4717:
  2656  00085C  2EE8               	decfsz	wreg,f,c
  2657  00085E  D7FE               	goto	u4717
  2658  000860  2E27               	decfsz	??_main& (0+255),f,c
  2659  000862  D7FC               	goto	u4717
  2660  000864  0101               	movlb	1	; () banked
  2661  000866  4B54               	infsnz	main@i_792& (0+255),f,b
  2662  000868  2B55               	incf	(main@i_792+1)& (0+255),f,b
  2663  00086A  D7EA               	goto	l4776
  2664  00086C                     l4784:
  2665                           
  2666                           ; BSR set to: 1
  2667                           ;main.c: 212: }
  2668                           ;main.c: 213: running_display();
  2669  00086C  EC68  F008         	call	_running_display	;wreg free
  2670                           
  2671                           ;main.c: 214: }
  2672  000870  D069               	goto	l4822
  2673  000872                     l4786:
  2674                           
  2675                           ;main.c: 215: else if (credential_state == 0xA0)
  2676  000872  0EA0               	movlw	160
  2677  000874  0101               	movlb	1	; () banked
  2678  000876  195A               	xorwf	main@credential_state& (0+255),w,b
  2679  000878  A4D8               	btfss	status,2,c
  2680  00087A  D032               	goto	l241
  2681                           
  2682                           ; BSR set to: 1
  2683                           ;main.c: 216: {
  2684                           ;main.c: 217: PORTDbits.RD7 = 0;
  2685  00087C  9E83               	bcf	3971,7,c	;volatile
  2686                           
  2687                           ; BSR set to: 1
  2688                           ;main.c: 218: Lcd_Set_Cursor(1,1);
  2689  00087E  0E01               	movlw	1
  2690  000880  6E12               	movwf	Lcd_Set_Cursor@b,c
  2691  000882  0E01               	movlw	1
  2692  000884  ECFE  F00C         	call	_Lcd_Set_Cursor
  2693                           
  2694                           ;main.c: 219: Lcd_Write_String("[Access  Denied]");
  2695  000888  0EB9               	movlw	low STR_11
  2696  00088A  6E14               	movwf	Lcd_Write_String@a,c
  2697  00088C  0E7F               	movlw	high STR_11
  2698  00088E  6E15               	movwf	Lcd_Write_String@a+1,c
  2699  000890  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  2700                           
  2701                           ;main.c: 220: Lcd_Set_Cursor(2,1);
  2702  000894  0E01               	movlw	1
  2703  000896  6E12               	movwf	Lcd_Set_Cursor@b,c
  2704  000898  0E02               	movlw	2
  2705  00089A  ECFE  F00C         	call	_Lcd_Set_Cursor
  2706                           
  2707                           ;main.c: 221: Lcd_Write_String("    [ Retry ]   ");
  2708  00089E  0ECB               	movlw	low STR_12
  2709  0008A0  6E14               	movwf	Lcd_Write_String@a,c
  2710  0008A2  0E7E               	movlw	high STR_12
  2711  0008A4  6E15               	movwf	Lcd_Write_String@a+1,c
  2712  0008A6  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  2713                           
  2714                           ;main.c: 222: for (int i = 0; i < 100; i++)
  2715  0008AA  0E00               	movlw	0
  2716  0008AC  0101               	movlb	1	; () banked
  2717  0008AE  6F57               	movwf	(main@i_795+1)& (0+255),b
  2718  0008B0  0E00               	movlw	0
  2719  0008B2  6F56               	movwf	main@i_795& (0+255),b
  2720  0008B4                     l4798:
  2721                           
  2722                           ; BSR set to: 1
  2723  0008B4  0101               	movlb	1	; () banked
  2724  0008B6  BF57               	btfsc	(main@i_795+1)& (0+255),7,b
  2725  0008B8  D008               	goto	l4802
  2726  0008BA  0101               	movlb	1	; () banked
  2727  0008BC  5157               	movf	(main@i_795+1)& (0+255),w,b
  2728  0008BE  E142               	bnz	l4822
  2729  0008C0  0E64               	movlw	100
  2730  0008C2  0101               	movlb	1	; () banked
  2731  0008C4  5D56               	subwf	main@i_795& (0+255),w,b
  2732  0008C6  B0D8               	btfsc	status,0,c
  2733  0008C8  D03D               	goto	l4822
  2734  0008CA                     l4802:
  2735                           
  2736                           ; BSR set to: 1
  2737                           ;main.c: 223: {
  2738                           ;main.c: 224: _delay((unsigned long)((10)*(16000000/4000.0)));
  2739  0008CA  0E34               	movlw	52
  2740  0008CC  6E27               	movwf	??_main& (0+255),c
  2741  0008CE  0EF2               	movlw	242
  2742  0008D0                     u4727:
  2743  0008D0  2EE8               	decfsz	wreg,f,c
  2744  0008D2  D7FE               	goto	u4727
  2745  0008D4  2E27               	decfsz	??_main& (0+255),f,c
  2746  0008D6  D7FC               	goto	u4727
  2747  0008D8  0101               	movlb	1	; () banked
  2748  0008DA  4B56               	infsnz	main@i_795& (0+255),f,b
  2749  0008DC  2B57               	incf	(main@i_795+1)& (0+255),f,b
  2750  0008DE  D7EA               	goto	l4798
  2751  0008E0                     l241:
  2752                           
  2753                           ; BSR set to: 1
  2754                           ;main.c: 227: else
  2755                           ;main.c: 228: {
  2756                           ;main.c: 229: PORTDbits.RD7 = 0;
  2757  0008E0  9E83               	bcf	3971,7,c	;volatile
  2758                           
  2759                           ; BSR set to: 1
  2760                           ;main.c: 230: Lcd_Set_Cursor(1,1);
  2761  0008E2  0E01               	movlw	1
  2762  0008E4  6E12               	movwf	Lcd_Set_Cursor@b,c
  2763  0008E6  0E01               	movlw	1
  2764  0008E8  ECFE  F00C         	call	_Lcd_Set_Cursor
  2765                           
  2766                           ;main.c: 231: Lcd_Write_String("[ System Error ]");
  2767  0008EC  0E97               	movlw	low STR_13
  2768  0008EE  6E14               	movwf	Lcd_Write_String@a,c
  2769  0008F0  0E7F               	movlw	high STR_13
  2770  0008F2  6E15               	movwf	Lcd_Write_String@a+1,c
  2771  0008F4  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  2772                           
  2773                           ;main.c: 232: Lcd_Set_Cursor(2,1);
  2774  0008F8  0E01               	movlw	1
  2775  0008FA  6E12               	movwf	Lcd_Set_Cursor@b,c
  2776  0008FC  0E02               	movlw	2
  2777  0008FE  ECFE  F00C         	call	_Lcd_Set_Cursor
  2778                           
  2779                           ;main.c: 233: Lcd_Write_String("    [ Retry ]   ");
  2780  000902  0ECB               	movlw	low STR_12
  2781  000904  6E14               	movwf	Lcd_Write_String@a,c
  2782  000906  0E7E               	movlw	high STR_12
  2783  000908  6E15               	movwf	Lcd_Write_String@a+1,c
  2784  00090A  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  2785                           
  2786                           ;main.c: 234: for (int i = 0; i < 100; i++)
  2787  00090E  0E00               	movlw	0
  2788  000910  0101               	movlb	1	; () banked
  2789  000912  6F59               	movwf	(main@i_798+1)& (0+255),b
  2790  000914  0E00               	movlw	0
  2791  000916  6F58               	movwf	main@i_798& (0+255),b
  2792  000918                     l4814:
  2793                           
  2794                           ; BSR set to: 1
  2795  000918  0101               	movlb	1	; () banked
  2796  00091A  BF59               	btfsc	(main@i_798+1)& (0+255),7,b
  2797  00091C  D008               	goto	l4818
  2798  00091E  0101               	movlb	1	; () banked
  2799  000920  5159               	movf	(main@i_798+1)& (0+255),w,b
  2800  000922  E110               	bnz	l4822
  2801  000924  0E64               	movlw	100
  2802  000926  0101               	movlb	1	; () banked
  2803  000928  5D58               	subwf	main@i_798& (0+255),w,b
  2804  00092A  B0D8               	btfsc	status,0,c
  2805  00092C  D00B               	goto	l4822
  2806  00092E                     l4818:
  2807                           
  2808                           ; BSR set to: 1
  2809                           ;main.c: 235: {
  2810                           ;main.c: 236: _delay((unsigned long)((10)*(16000000/4000.0)));
  2811  00092E  0E34               	movlw	52
  2812  000930  6E27               	movwf	??_main& (0+255),c
  2813  000932  0EF2               	movlw	242
  2814  000934                     u4737:
  2815  000934  2EE8               	decfsz	wreg,f,c
  2816  000936  D7FE               	goto	u4737
  2817  000938  2E27               	decfsz	??_main& (0+255),f,c
  2818  00093A  D7FC               	goto	u4737
  2819  00093C  0101               	movlb	1	; () banked
  2820  00093E  4B58               	infsnz	main@i_798& (0+255),f,b
  2821  000940  2B59               	incf	(main@i_798+1)& (0+255),f,b
  2822  000942  D7EA               	goto	l4814
  2823  000944                     l4822:
  2824  000944  0100               	movlb	0	; () banked
  2825  000946  51DD               	movf	_credentials_accepted& (0+255),w,b	;volatile
  2826  000948  A4D8               	btfss	status,2,c
  2827  00094A  EF90  F000         	goto	l4530
  2828  00094E  D41B               	goto	l4544
  2829  000950                     __end_of_main:
  2830                           	opt stack 0
  2831                           tblptru	equ	0xFF8
  2832                           tblptrh	equ	0xFF7
  2833                           tblptrl	equ	0xFF6
  2834                           tablat	equ	0xFF5
  2835                           prodh	equ	0xFF4
  2836                           prodl	equ	0xFF3
  2837                           postinc0	equ	0xFEE
  2838                           wreg	equ	0xFE8
  2839                           indf1	equ	0xFE7
  2840                           postdec1	equ	0xFE5
  2841                           plusw1	equ	0xFE3
  2842                           fsr1h	equ	0xFE2
  2843                           fsr1l	equ	0xFE1
  2844                           indf2	equ	0xFDF
  2845                           postinc2	equ	0xFDE
  2846                           plusw2	equ	0xFDB
  2847                           fsr2h	equ	0xFDA
  2848                           fsr2l	equ	0xFD9
  2849                           status	equ	0xFD8
  2850                           
  2851 ;; *************** function _start_routine *****************
  2852 ;; Defined at:
  2853 ;;		line 397 in file "main.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;		None
  2856 ;; Auto vars:     Size  Location     Type
  2857 ;;  i               2   37[BANK0 ] int 
  2858 ;;  i               2   30[BANK0 ] int 
  2859 ;;  i               2   28[BANK0 ] int 
  2860 ;;  i               2   26[BANK0 ] int 
  2861 ;;  i               2   35[BANK0 ] int 
  2862 ;;  i               2   44[BANK0 ] int 
  2863 ;;  b               3   32[BANK0 ] unsigned char [3]
  2864 ;;  error_msg       2   16[BANK0 ] PTR unsigned char 
  2865 ;;		 -> STR_28(17), STR_27(17), 
  2866 ;;  new_I2C_addr    1   49[BANK0 ] unsigned char 
  2867 ;;  I2C_new_ADDR    3   39[BANK0 ] unsigned char [3]
  2868 ;;  i               2   24[BANK0 ] int 
  2869 ;;  i               2   22[BANK0 ] int 
  2870 ;;  i               2   20[BANK0 ] int 
  2871 ;;  n               1   48[BANK0 ] unsigned char 
  2872 ;;  x               1   47[BANK0 ] unsigned char 
  2873 ;;  dh              1   46[BANK0 ] unsigned char 
  2874 ;;  dt              1   43[BANK0 ] unsigned char 
  2875 ;;  a               1   42[BANK0 ] unsigned char 
  2876 ;;  v               1   19[BANK0 ] unsigned char 
  2877 ;;  d1              1   18[BANK0 ] unsigned char 
  2878 ;;  l               1   15[BANK0 ] unsigned char 
  2879 ;;  h               1   14[BANK0 ] unsigned char 
  2880 ;; Return value:  Size  Location     Type
  2881 ;;                  1    wreg      void 
  2882 ;; Registers used:
  2883 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2884 ;; Tracked objects:
  2885 ;;		On entry : 0/0
  2886 ;;		On exit  : 0/0
  2887 ;;		Unchanged: 0/0
  2888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2889 ;;      Params:         0       0       0       0       0       0       0
  2890 ;;      Locals:         0      36       0       0       0       0       0
  2891 ;;      Temps:          4       0       0       0       0       0       0
  2892 ;;      Totals:         4      36       0       0       0       0       0
  2893 ;;Total ram usage:       40 bytes
  2894 ;; Hardware stack levels used:    1
  2895 ;; Hardware stack levels required when called:    5
  2896 ;; This function calls:
  2897 ;;		_Eeprom_Write_Byte
  2898 ;;		_Lcd_Clear
  2899 ;;		_Lcd_Set_Cursor
  2900 ;;		_Lcd_Write_Char
  2901 ;;		_Lcd_Write_String
  2902 ;;		___awdiv
  2903 ;;		_latch_keypad
  2904 ;;		_menu_progress_bar
  2905 ;;		_read_keypad
  2906 ;; This function is called by:
  2907 ;;		_main
  2908 ;; This function uses a non-reentrant model
  2909 ;;
  2910                           
  2911                           	psect	text1
  2912  000950                     __ptext1:
  2913                           	opt stack 0
  2914  000950                     _start_routine:
  2915                           	opt stack 25
  2916                           
  2917                           ;main.c: 402: Lcd_Clear();
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;incstack = 0
  2921  000950  ECCD  F00D         	call	_Lcd_Clear	;wreg free
  2922                           
  2923                           ;main.c: 403: Lcd_Set_Cursor(1, 1);
  2924  000954  0E01               	movlw	1
  2925  000956  6E12               	movwf	Lcd_Set_Cursor@b,c
  2926  000958  0E01               	movlw	1
  2927  00095A  ECFE  F00C         	call	_Lcd_Set_Cursor
  2928                           
  2929                           ;main.c: 404: Lcd_Write_String("   [ Aditum ]   ");
  2930  00095E  0EBA               	movlw	low STR_15
  2931  000960  6E14               	movwf	Lcd_Write_String@a,c
  2932  000962  0E7E               	movlw	high STR_15
  2933  000964  6E15               	movwf	Lcd_Write_String@a+1,c
  2934  000966  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  2935                           
  2936                           ;main.c: 405: for (int i = 0; i < 20; i++)
  2937  00096A  0E00               	movlw	0
  2938  00096C  0100               	movlb	0	; () banked
  2939  00096E  6F75               	movwf	(start_routine@i+1)& (0+255),b
  2940  000970  0E00               	movlw	0
  2941  000972  6F74               	movwf	start_routine@i& (0+255),b
  2942  000974                     l4012:
  2943                           
  2944                           ; BSR set to: 0
  2945  000974  0100               	movlb	0	; () banked
  2946  000976  BF75               	btfsc	(start_routine@i+1)& (0+255),7,b
  2947  000978  D008               	goto	l4016
  2948  00097A  0100               	movlb	0	; () banked
  2949  00097C  5175               	movf	(start_routine@i+1)& (0+255),w,b
  2950  00097E  E112               	bnz	l4020
  2951  000980  0E14               	movlw	20
  2952  000982  0100               	movlb	0	; () banked
  2953  000984  5D74               	subwf	start_routine@i& (0+255),w,b
  2954  000986  B0D8               	btfsc	status,0,c
  2955  000988  D00D               	goto	l4020
  2956  00098A                     l4016:
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;main.c: 406: _delay((unsigned long)((20)*(16000000/4000.0)));
  2960  00098A  0E68               	movlw	104
  2961  00098C  6E23               	movwf	??_start_routine& (0+255),c
  2962  00098E  0EE4               	movlw	228
  2963  000990                     u4747:
  2964  000990  2EE8               	decfsz	wreg,f,c
  2965  000992  D7FE               	goto	u4747
  2966  000994  2E23               	decfsz	??_start_routine& (0+255),f,c
  2967  000996  D7FC               	goto	u4747
  2968  000998  F000 F000          	nop2	
  2969  00099C  0100               	movlb	0	; () banked
  2970  00099E  4B74               	infsnz	start_routine@i& (0+255),f,b
  2971  0009A0  2B75               	incf	(start_routine@i+1)& (0+255),f,b
  2972  0009A2  D7E8               	goto	l4012
  2973  0009A4                     l4020:
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;main.c: 407: Lcd_Set_Cursor(2,1);
  2977  0009A4  0E01               	movlw	1
  2978  0009A6  6E12               	movwf	Lcd_Set_Cursor@b,c
  2979  0009A8  0E02               	movlw	2
  2980  0009AA  ECFE  F00C         	call	_Lcd_Set_Cursor
  2981                           
  2982                           ;main.c: 408: Lcd_Write_String("Rev ");
  2983  0009AE  0EF2               	movlw	low STR_16
  2984  0009B0  6E14               	movwf	Lcd_Write_String@a,c
  2985  0009B2  0E7F               	movlw	high STR_16
  2986  0009B4  6E15               	movwf	Lcd_Write_String@a+1,c
  2987  0009B6  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  2988                           
  2989                           ;main.c: 409: Lcd_Write_String("1.0.0");
  2990  0009BA  0EE6               	movlw	low STR_17
  2991  0009BC  6E14               	movwf	Lcd_Write_String@a,c
  2992  0009BE  0E7F               	movlw	high STR_17
  2993  0009C0  6E15               	movwf	Lcd_Write_String@a+1,c
  2994  0009C2  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  2995                           
  2996                           ;main.c: 410: for (int i = 0; i < 50; i++)
  2997  0009C6  0E00               	movlw	0
  2998  0009C8  0100               	movlb	0	; () banked
  2999  0009CA  6F77               	movwf	(start_routine@i_877+1)& (0+255),b
  3000  0009CC  0E00               	movlw	0
  3001  0009CE  6F76               	movwf	start_routine@i_877& (0+255),b
  3002  0009D0                     l4028:
  3003                           
  3004                           ; BSR set to: 0
  3005  0009D0  0100               	movlb	0	; () banked
  3006  0009D2  BF77               	btfsc	(start_routine@i_877+1)& (0+255),7,b
  3007  0009D4  D008               	goto	l4032
  3008  0009D6  0100               	movlb	0	; () banked
  3009  0009D8  5177               	movf	(start_routine@i_877+1)& (0+255),w,b
  3010  0009DA  E112               	bnz	l4036
  3011  0009DC  0E32               	movlw	50
  3012  0009DE  0100               	movlb	0	; () banked
  3013  0009E0  5D76               	subwf	start_routine@i_877& (0+255),w,b
  3014  0009E2  B0D8               	btfsc	status,0,c
  3015  0009E4  D00D               	goto	l4036
  3016  0009E6                     l4032:
  3017                           
  3018                           ; BSR set to: 0
  3019                           ;main.c: 411: _delay((unsigned long)((20)*(16000000/4000.0)));
  3020  0009E6  0E68               	movlw	104
  3021  0009E8  6E23               	movwf	??_start_routine& (0+255),c
  3022  0009EA  0EE4               	movlw	228
  3023  0009EC                     u4757:
  3024  0009EC  2EE8               	decfsz	wreg,f,c
  3025  0009EE  D7FE               	goto	u4757
  3026  0009F0  2E23               	decfsz	??_start_routine& (0+255),f,c
  3027  0009F2  D7FC               	goto	u4757
  3028  0009F4  F000 F000          	nop2	
  3029  0009F8  0100               	movlb	0	; () banked
  3030  0009FA  4B76               	infsnz	start_routine@i_877& (0+255),f,b
  3031  0009FC  2B77               	incf	(start_routine@i_877+1)& (0+255),f,b
  3032  0009FE  D7E8               	goto	l4028
  3033  000A00                     l4036:
  3034                           
  3035                           ; BSR set to: 0
  3036                           ;main.c: 412: Lcd_Set_Cursor(2,1);
  3037  000A00  0E01               	movlw	1
  3038  000A02  6E12               	movwf	Lcd_Set_Cursor@b,c
  3039  000A04  0E02               	movlw	2
  3040  000A06  ECFE  F00C         	call	_Lcd_Set_Cursor
  3041                           
  3042                           ;main.c: 413: Lcd_Write_String("Device ID ");
  3043  000A0A  0EDB               	movlw	low STR_18
  3044  000A0C  6E14               	movwf	Lcd_Write_String@a,c
  3045  000A0E  0E7F               	movlw	high STR_18
  3046  000A10  6E15               	movwf	Lcd_Write_String@a+1,c
  3047  000A12  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  3048                           
  3049                           ;main.c: 414: unsigned char a, h, l, dh, dt, d1;
  3050                           ;main.c: 415: if (I2C_ADDR != 0)
  3051  000A16  0100               	movlb	0	; () banked
  3052  000A18  51DE               	movf	_I2C_ADDR& (0+255),w,b
  3053  000A1A  B4D8               	btfsc	status,2,c
  3054  000A1C  D004               	goto	l4044
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;main.c: 416: a = I2C_ADDR - 0x0F;
  3058  000A1E  0100               	movlb	0	; () banked
  3059  000A20  51DE               	movf	_I2C_ADDR& (0+255),w,b
  3060  000A22  0FF1               	addlw	241
  3061  000A24  D001               	goto	L2
  3062  000A26                     l4044:
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;main.c: 417: else
  3066                           ;main.c: 418: a = 0;
  3067  000A26  0E00               	movlw	0
  3068  000A28                     L2:
  3069  000A28  0100               	movlb	0	; () banked
  3070  000A2A  6F8A               	movwf	start_routine@a& (0+255),b
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;main.c: 420: dh = (a / 100);
  3074                           
  3075                           ; BSR set to: 0
  3076  000A2C  C08A  F010         	movff	start_routine@a,___awdiv@dividend
  3077  000A30  6A11               	clrf	___awdiv@dividend+1,c
  3078  000A32  0E00               	movlw	0
  3079  000A34  6E13               	movwf	___awdiv@divisor+1,c
  3080  000A36  0E64               	movlw	100
  3081  000A38  6E12               	movwf	___awdiv@divisor,c
  3082  000A3A  EC7C  F00B         	call	___awdiv	;wreg free
  3083  000A3E  5010               	movf	?___awdiv,w,c
  3084  000A40  0100               	movlb	0	; () banked
  3085  000A42  6F8E               	movwf	start_routine@dh& (0+255),b
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;main.c: 421: dt = (a - dh*100) / 10;
  3089  000A44  0100               	movlb	0	; () banked
  3090  000A46  518E               	movf	start_routine@dh& (0+255),w,b
  3091  000A48  0D64               	mullw	100
  3092  000A4A  1EF3               	comf	prodl,f,c
  3093  000A4C  1EF4               	comf	prodh,f,c
  3094  000A4E  4AF3               	infsnz	prodl,f,c
  3095  000A50  2AF4               	incf	prodh,f,c
  3096  000A52  0100               	movlb	0	; () banked
  3097  000A54  518A               	movf	start_routine@a& (0+255),w,b
  3098  000A56  24F3               	addwf	prodl,w,c
  3099  000A58  6E10               	movwf	___awdiv@dividend,c
  3100  000A5A  0E00               	movlw	0
  3101  000A5C  20F4               	addwfc	prodh,w,c
  3102  000A5E  6E11               	movwf	___awdiv@dividend+1,c
  3103  000A60  0E00               	movlw	0
  3104  000A62  6E13               	movwf	___awdiv@divisor+1,c
  3105  000A64  0E0A               	movlw	10
  3106  000A66  6E12               	movwf	___awdiv@divisor,c
  3107  000A68  EC7C  F00B         	call	___awdiv	;wreg free
  3108  000A6C  5010               	movf	?___awdiv,w,c
  3109  000A6E  0100               	movlb	0	; () banked
  3110  000A70  6F8B               	movwf	start_routine@dt& (0+255),b
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;main.c: 422: d1 = (a - (dh*100+dt*10));
  3114  000A72  0100               	movlb	0	; () banked
  3115  000A74  518B               	movf	start_routine@dt& (0+255),w,b
  3116  000A76  0D0A               	mullw	10
  3117  000A78  CFF3 F023          	movff	prodl,??_start_routine
  3118  000A7C  0100               	movlb	0	; () banked
  3119  000A7E  518E               	movf	start_routine@dh& (0+255),w,b
  3120  000A80  0D64               	mullw	100
  3121  000A82  50F3               	movf	prodl,w,c
  3122  000A84  2423               	addwf	??_start_routine,w,c
  3123  000A86  0800               	sublw	0
  3124  000A88  0100               	movlb	0	; () banked
  3125  000A8A  258A               	addwf	start_routine@a& (0+255),w,b
  3126  000A8C  0100               	movlb	0	; () banked
  3127  000A8E  6F72               	movwf	start_routine@d1& (0+255),b
  3128                           
  3129                           ; BSR set to: 0
  3130                           ;main.c: 423: Lcd_Write_Char(c[dh]);
  3131  000A90  0100               	movlb	0	; () banked
  3132  000A92  518E               	movf	start_routine@dh& (0+255),w,b
  3133  000A94  0D01               	mullw	1
  3134  000A96  0E92               	movlw	low _c
  3135  000A98  24F3               	addwf	prodl,w,c
  3136  000A9A  6ED9               	movwf	fsr2l,c
  3137  000A9C  0E00               	movlw	high _c
  3138  000A9E  20F4               	addwfc	prodh,w,c
  3139  000AA0  6EDA               	movwf	fsr2h,c
  3140  000AA2  50DF               	movf	indf2,w,c
  3141  000AA4  EC62  F00D         	call	_Lcd_Write_Char
  3142                           
  3143                           ;main.c: 424: Lcd_Write_Char(c[dt]);
  3144  000AA8  0100               	movlb	0	; () banked
  3145  000AAA  518B               	movf	start_routine@dt& (0+255),w,b
  3146  000AAC  0D01               	mullw	1
  3147  000AAE  0E92               	movlw	low _c
  3148  000AB0  24F3               	addwf	prodl,w,c
  3149  000AB2  6ED9               	movwf	fsr2l,c
  3150  000AB4  0E00               	movlw	high _c
  3151  000AB6  20F4               	addwfc	prodh,w,c
  3152  000AB8  6EDA               	movwf	fsr2h,c
  3153  000ABA  50DF               	movf	indf2,w,c
  3154  000ABC  EC62  F00D         	call	_Lcd_Write_Char
  3155                           
  3156                           ;main.c: 425: Lcd_Write_Char(c[d1]);
  3157  000AC0  0100               	movlb	0	; () banked
  3158  000AC2  5172               	movf	start_routine@d1& (0+255),w,b
  3159  000AC4  0D01               	mullw	1
  3160  000AC6  0E92               	movlw	low _c
  3161  000AC8  24F3               	addwf	prodl,w,c
  3162  000ACA  6ED9               	movwf	fsr2l,c
  3163  000ACC  0E00               	movlw	high _c
  3164  000ACE  20F4               	addwfc	prodh,w,c
  3165  000AD0  6EDA               	movwf	fsr2h,c
  3166  000AD2  50DF               	movf	indf2,w,c
  3167  000AD4  EC62  F00D         	call	_Lcd_Write_Char
  3168                           
  3169                           ;main.c: 426: Lcd_Write_Char('|');
  3170  000AD8  0E7C               	movlw	124
  3171  000ADA  EC62  F00D         	call	_Lcd_Write_Char
  3172                           
  3173                           ;main.c: 427: Lcd_Write_Char(hx[I2C_ADDR/16]);
  3174  000ADE  C0DE  F010         	movff	_I2C_ADDR,___awdiv@dividend
  3175  000AE2  6A11               	clrf	___awdiv@dividend+1,c
  3176  000AE4  0E00               	movlw	0
  3177  000AE6  6E13               	movwf	___awdiv@divisor+1,c
  3178  000AE8  0E10               	movlw	16
  3179  000AEA  6E12               	movwf	___awdiv@divisor,c
  3180  000AEC  EC7C  F00B         	call	___awdiv	;wreg free
  3181  000AF0  0E2F               	movlw	low _hx
  3182  000AF2  2410               	addwf	?___awdiv,w,c
  3183  000AF4  6ED9               	movwf	fsr2l,c
  3184  000AF6  0E00               	movlw	high _hx
  3185  000AF8  2011               	addwfc	?___awdiv+1,w,c
  3186  000AFA  6EDA               	movwf	fsr2h,c
  3187  000AFC  50DF               	movf	indf2,w,c
  3188  000AFE  EC62  F00D         	call	_Lcd_Write_Char
  3189                           
  3190                           ;main.c: 428: Lcd_Write_Char(hx[I2C_ADDR - (I2C_ADDR/16)*16]);
  3191  000B02  C0DE  F010         	movff	_I2C_ADDR,___awdiv@dividend
  3192  000B06  6A11               	clrf	___awdiv@dividend+1,c
  3193  000B08  0E00               	movlw	0
  3194  000B0A  6E13               	movwf	___awdiv@divisor+1,c
  3195  000B0C  0E10               	movlw	16
  3196  000B0E  6E12               	movwf	___awdiv@divisor,c
  3197  000B10  EC7C  F00B         	call	___awdiv	;wreg free
  3198  000B14  3A10               	swapf	?___awdiv,f,c
  3199  000B16  3A11               	swapf	?___awdiv+1,f,c
  3200  000B18  0EF0               	movlw	240
  3201  000B1A  1611               	andwf	?___awdiv+1,f,c
  3202  000B1C  5010               	movf	?___awdiv,w,c
  3203  000B1E  0B0F               	andlw	15
  3204  000B20  1211               	iorwf	?___awdiv+1,f,c
  3205  000B22  0EF0               	movlw	240
  3206  000B24  1610               	andwf	?___awdiv,f,c
  3207  000B26  1E10               	comf	?___awdiv,f,c
  3208  000B28  1E11               	comf	?___awdiv+1,f,c
  3209  000B2A  4A10               	infsnz	?___awdiv,f,c
  3210  000B2C  2A11               	incf	?___awdiv+1,f,c
  3211  000B2E  0100               	movlb	0	; () banked
  3212  000B30  51DE               	movf	_I2C_ADDR& (0+255),w,b
  3213  000B32  6E23               	movwf	??_start_routine& (0+255),c
  3214  000B34  6A24               	clrf	(??_start_routine+1)& (0+255),c
  3215  000B36  5010               	movf	?___awdiv,w,c
  3216  000B38  2623               	addwf	??_start_routine,f,c
  3217  000B3A  5011               	movf	?___awdiv+1,w,c
  3218  000B3C  2224               	addwfc	??_start_routine+1,f,c
  3219  000B3E  0E2F               	movlw	low _hx
  3220  000B40  2423               	addwf	??_start_routine,w,c
  3221  000B42  6ED9               	movwf	fsr2l,c
  3222  000B44  0E00               	movlw	high _hx
  3223  000B46  2024               	addwfc	??_start_routine+1,w,c
  3224  000B48  6EDA               	movwf	fsr2h,c
  3225  000B4A  50DF               	movf	indf2,w,c
  3226  000B4C  EC62  F00D         	call	_Lcd_Write_Char
  3227                           
  3228                           ;main.c: 429: for (int i = 0; i < 40; i++)
  3229  000B50  0E00               	movlw	0
  3230  000B52  0100               	movlb	0	; () banked
  3231  000B54  6F79               	movwf	(start_routine@i_885+1)& (0+255),b
  3232  000B56  0E00               	movlw	0
  3233  000B58  6F78               	movwf	start_routine@i_885& (0+255),b
  3234  000B5A                     l4066:
  3235                           
  3236                           ; BSR set to: 0
  3237  000B5A  0100               	movlb	0	; () banked
  3238  000B5C  BF79               	btfsc	(start_routine@i_885+1)& (0+255),7,b
  3239  000B5E  D008               	goto	l4070
  3240  000B60  0100               	movlb	0	; () banked
  3241  000B62  5179               	movf	(start_routine@i_885+1)& (0+255),w,b
  3242  000B64  E112               	bnz	l4074
  3243  000B66  0E28               	movlw	40
  3244  000B68  0100               	movlb	0	; () banked
  3245  000B6A  5D78               	subwf	start_routine@i_885& (0+255),w,b
  3246  000B6C  B0D8               	btfsc	status,0,c
  3247  000B6E  D00D               	goto	l4074
  3248  000B70                     l4070:
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;main.c: 430: _delay((unsigned long)((20)*(16000000/4000.0)));
  3252  000B70  0E68               	movlw	104
  3253  000B72  6E23               	movwf	??_start_routine& (0+255),c
  3254  000B74  0EE4               	movlw	228
  3255  000B76                     u4767:
  3256  000B76  2EE8               	decfsz	wreg,f,c
  3257  000B78  D7FE               	goto	u4767
  3258  000B7A  2E23               	decfsz	??_start_routine& (0+255),f,c
  3259  000B7C  D7FC               	goto	u4767
  3260  000B7E  F000 F000          	nop2	
  3261  000B82  0100               	movlb	0	; () banked
  3262  000B84  4B78               	infsnz	start_routine@i_885& (0+255),f,b
  3263  000B86  2B79               	incf	(start_routine@i_885+1)& (0+255),f,b
  3264  000B88  D7E8               	goto	l4066
  3265  000B8A                     l4074:
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;main.c: 431: Lcd_Clear();
  3269  000B8A  ECCD  F00D         	call	_Lcd_Clear	;wreg free
  3270                           
  3271                           ;main.c: 432: Lcd_Set_Cursor(1, 1);
  3272  000B8E  0E01               	movlw	1
  3273  000B90  6E12               	movwf	Lcd_Set_Cursor@b,c
  3274  000B92  0E01               	movlw	1
  3275  000B94  ECFE  F00C         	call	_Lcd_Set_Cursor
  3276                           
  3277                           ;main.c: 433: Lcd_Write_String("  [  Aditum  ]  ");
  3278  000B98  0EFE               	movlw	low STR_19
  3279  000B9A  6E14               	movwf	Lcd_Write_String@a,c
  3280  000B9C  0E7E               	movlw	high STR_19
  3281  000B9E  6E15               	movwf	Lcd_Write_String@a+1,c
  3282  000BA0  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  3283                           
  3284                           ;main.c: 434: menu_progress_bar(700);
  3285  000BA4  0E02               	movlw	2
  3286  000BA6  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  3287  000BA8  0EBC               	movlw	188
  3288  000BAA  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  3289  000BAC  ECE3  F009         	call	_menu_progress_bar	;wreg free
  3290                           
  3291                           ;main.c: 437: unsigned char x, n = 0, v;
  3292  000BB0  0E00               	movlw	0
  3293  000BB2  0100               	movlb	0	; () banked
  3294  000BB4  6F90               	movwf	start_routine@n& (0+255),b
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;main.c: 438: if (I2C_ADDR == 0x00)
  3298  000BB6  0100               	movlb	0	; () banked
  3299  000BB8  51DE               	movf	_I2C_ADDR& (0+255),w,b
  3300  000BBA  A4D8               	btfss	status,2,c
  3301  000BBC  D285               	goto	l4286
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;main.c: 439: {
  3305                           ;main.c: 440: v = 0;
  3306  000BBE  0E00               	movlw	0
  3307  000BC0  0100               	movlb	0	; () banked
  3308  000BC2  6F73               	movwf	start_routine@v& (0+255),b
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;main.c: 441: Lcd_Set_Cursor(1,1);
  3312  000BC4  0E01               	movlw	1
  3313  000BC6  6E12               	movwf	Lcd_Set_Cursor@b,c
  3314  000BC8  0E01               	movlw	1
  3315  000BCA  ECFE  F00C         	call	_Lcd_Set_Cursor
  3316                           
  3317                           ;main.c: 442: Lcd_Write_String("Load I2C setup..");
  3318  000BCE  0E64               	movlw	low STR_20
  3319  000BD0  6E14               	movwf	Lcd_Write_String@a,c
  3320  000BD2  0E7F               	movlw	high STR_20
  3321  000BD4  6E15               	movwf	Lcd_Write_String@a+1,c
  3322  000BD6  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  3323                           
  3324                           ;main.c: 443: menu_progress_bar(300);
  3325  000BDA  0E01               	movlw	1
  3326  000BDC  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  3327  000BDE  0E2C               	movlw	44
  3328  000BE0  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  3329  000BE2  ECE3  F009         	call	_menu_progress_bar	;wreg free
  3330                           
  3331                           ;main.c: 444: unsigned char I2C_new_ADDR[] = {'0', '0', '0'};
  3332  000BE6  C0B5  F087         	movff	start_routine@F3720,start_routine@I2C_new_ADDR
  3333  000BEA  C0B6  F088         	movff	start_routine@F3720+1,start_routine@I2C_new_ADDR+1
  3334  000BEE  C0B7  F089         	movff	start_routine@F3720+2,start_routine@I2C_new_ADDR+2
  3335                           
  3336                           ;main.c: 445: while (v != 1)
  3337  000BF2  D265               	goto	l4284
  3338  000BF4                     l4096:
  3339                           
  3340                           ;main.c: 446: {
  3341                           ;main.c: 447: Lcd_Set_Cursor(1,1);
  3342  000BF4  0E01               	movlw	1
  3343  000BF6  6E12               	movwf	Lcd_Set_Cursor@b,c
  3344  000BF8  0E01               	movlw	1
  3345  000BFA  ECFE  F00C         	call	_Lcd_Set_Cursor
  3346                           
  3347                           ;main.c: 448: Lcd_Write_String("New Machine ID: ");
  3348  000BFE  0E31               	movlw	low STR_21
  3349  000C00  6E14               	movwf	Lcd_Write_String@a,c
  3350  000C02  0E7F               	movlw	high STR_21
  3351  000C04  6E15               	movwf	Lcd_Write_String@a+1,c
  3352  000C06  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  3353                           
  3354                           ;main.c: 449: Lcd_Set_Cursor(2,1);
  3355  000C0A  0E01               	movlw	1
  3356  000C0C  6E12               	movwf	Lcd_Set_Cursor@b,c
  3357  000C0E  0E02               	movlw	2
  3358  000C10  ECFE  F00C         	call	_Lcd_Set_Cursor
  3359                           
  3360                           ;main.c: 450: Lcd_Write_String("       [001-100]");
  3361  000C14  0EA8               	movlw	low STR_22
  3362  000C16  6E14               	movwf	Lcd_Write_String@a,c
  3363  000C18  0E7F               	movlw	high STR_22
  3364  000C1A  6E15               	movwf	Lcd_Write_String@a+1,c
  3365  000C1C  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  3366                           
  3367                           ;main.c: 451: Lcd_Set_Cursor(2,1);
  3368  000C20  0E01               	movlw	1
  3369  000C22  6E12               	movwf	Lcd_Set_Cursor@b,c
  3370  000C24  0E02               	movlw	2
  3371  000C26  ECFE  F00C         	call	_Lcd_Set_Cursor
  3372                           
  3373                           ;main.c: 452: Lcd_Write_Char('_');
  3374  000C2A  0E5F               	movlw	95
  3375  000C2C  EC62  F00D         	call	_Lcd_Write_Char
  3376                           
  3377                           ;main.c: 453: while (n < 3)
  3378  000C30  D081               	goto	l4148
  3379  000C32                     l4106:
  3380                           
  3381                           ;main.c: 454: {
  3382                           ;main.c: 455: x = read_keypad();
  3383  000C32  EC2A  F00B         	call	_read_keypad	;wreg free
  3384  000C36  0100               	movlb	0	; () banked
  3385  000C38  6F8F               	movwf	start_routine@x& (0+255),b
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;main.c: 456: if (x != '_')
  3389  000C3A  0E5F               	movlw	95
  3390  000C3C  0100               	movlb	0	; () banked
  3391  000C3E  198F               	xorwf	start_routine@x& (0+255),w,b
  3392  000C40  B4D8               	btfsc	status,2,c
  3393  000C42  D078               	goto	l4148
  3394                           
  3395                           ; BSR set to: 0
  3396                           ;main.c: 457: {
  3397                           ;main.c: 458: if (((x - '#') == 0)&&(n > 0))
  3398  000C44  0EDD               	movlw	221
  3399  000C46  6E23               	movwf	??_start_routine& (0+255),c
  3400  000C48  0EFF               	movlw	255
  3401  000C4A  6E24               	movwf	(??_start_routine+1)& (0+255),c
  3402  000C4C  0100               	movlb	0	; () banked
  3403  000C4E  518F               	movf	start_routine@x& (0+255),w,b
  3404  000C50  6E25               	movwf	(??_start_routine+2)& (0+255),c
  3405  000C52  6A26               	clrf	(??_start_routine+3)& (0+255),c
  3406  000C54  5023               	movf	??_start_routine,w,c
  3407  000C56  2625               	addwf	??_start_routine+2,f,c
  3408  000C58  5024               	movf	??_start_routine+1,w,c
  3409  000C5A  2226               	addwfc	??_start_routine+3,f,c
  3410  000C5C  5025               	movf	??_start_routine+2,w,c
  3411  000C5E  1026               	iorwf	??_start_routine+3,w,c
  3412  000C60  A4D8               	btfss	status,2,c
  3413  000C62  D02F               	goto	l4130
  3414                           
  3415                           ; BSR set to: 0
  3416  000C64  0100               	movlb	0	; () banked
  3417  000C66  5190               	movf	start_routine@n& (0+255),w,b
  3418  000C68  0100               	movlb	0	; () banked
  3419  000C6A  B4D8               	btfsc	status,2,c
  3420  000C6C  D02A               	goto	l4130
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;main.c: 459: {
  3424                           ;main.c: 460: I2C_new_ADDR[n] = 0;
  3425  000C6E  0100               	movlb	0	; () banked
  3426  000C70  5190               	movf	start_routine@n& (0+255),w,b
  3427  000C72  0D01               	mullw	1
  3428  000C74  0E87               	movlw	low start_routine@I2C_new_ADDR
  3429  000C76  24F3               	addwf	prodl,w,c
  3430  000C78  6ED9               	movwf	fsr2l,c
  3431  000C7A  0E00               	movlw	high start_routine@I2C_new_ADDR
  3432  000C7C  20F4               	addwfc	prodh,w,c
  3433  000C7E  6EDA               	movwf	fsr2h,c
  3434  000C80  0E00               	movlw	0
  3435  000C82  6EDF               	movwf	indf2,c
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;main.c: 461: Lcd_Set_Cursor(2, n);
  3439  000C84  C090  F012         	movff	start_routine@n,Lcd_Set_Cursor@b
  3440  000C88  0E02               	movlw	2
  3441  000C8A  ECFE  F00C         	call	_Lcd_Set_Cursor
  3442                           
  3443                           ;main.c: 462: Lcd_Write_Char('_');
  3444  000C8E  0E5F               	movlw	95
  3445  000C90  EC62  F00D         	call	_Lcd_Write_Char
  3446                           
  3447                           ;main.c: 463: latch_keypad(&x);
  3448  000C94  0E8F               	movlw	low start_routine@x
  3449  000C96  6E10               	movwf	latch_keypad@x,c
  3450  000C98  0E00               	movlw	high start_routine@x
  3451  000C9A  6E11               	movwf	latch_keypad@x+1,c
  3452  000C9C  EC46  F00D         	call	_latch_keypad	;wreg free
  3453                           
  3454                           ;main.c: 464: Lcd_Set_Cursor(2, 1 + n);
  3455  000CA0  0100               	movlb	0	; () banked
  3456  000CA2  2990               	incf	start_routine@n& (0+255),w,b
  3457  000CA4  6E12               	movwf	Lcd_Set_Cursor@b,c
  3458  000CA6  0E02               	movlw	2
  3459  000CA8  ECFE  F00C         	call	_Lcd_Set_Cursor
  3460                           
  3461                           ;main.c: 465: Lcd_Write_Char(' ');
  3462  000CAC  0E20               	movlw	32
  3463  000CAE  EC62  F00D         	call	_Lcd_Write_Char
  3464                           
  3465                           ;main.c: 466: Lcd_Set_Cursor(2, n);
  3466  000CB2  C090  F012         	movff	start_routine@n,Lcd_Set_Cursor@b
  3467  000CB6  0E02               	movlw	2
  3468  000CB8  ECFE  F00C         	call	_Lcd_Set_Cursor
  3469                           
  3470                           ;main.c: 467: n--;
  3471  000CBC  0100               	movlb	0	; () banked
  3472  000CBE  0790               	decf	start_routine@n& (0+255),f,b
  3473                           
  3474                           ;main.c: 468: }
  3475  000CC0  D039               	goto	l4148
  3476  000CC2                     l4130:
  3477                           
  3478                           ; BSR set to: 0
  3479                           ;main.c: 469: else if ((x - '#') != 0)
  3480  000CC2  0EDD               	movlw	221
  3481  000CC4  6E23               	movwf	??_start_routine& (0+255),c
  3482  000CC6  0EFF               	movlw	255
  3483  000CC8  6E24               	movwf	(??_start_routine+1)& (0+255),c
  3484  000CCA  0100               	movlb	0	; () banked
  3485  000CCC  518F               	movf	start_routine@x& (0+255),w,b
  3486  000CCE  6E25               	movwf	(??_start_routine+2)& (0+255),c
  3487  000CD0  6A26               	clrf	(??_start_routine+3)& (0+255),c
  3488  000CD2  5023               	movf	??_start_routine,w,c
  3489  000CD4  2625               	addwf	??_start_routine+2,f,c
  3490  000CD6  5024               	movf	??_start_routine+1,w,c
  3491  000CD8  2226               	addwfc	??_start_routine+3,f,c
  3492  000CDA  5025               	movf	??_start_routine+2,w,c
  3493  000CDC  1026               	iorwf	??_start_routine+3,w,c
  3494  000CDE  B4D8               	btfsc	status,2,c
  3495  000CE0  D029               	goto	l4148
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;main.c: 470: {
  3499                           ;main.c: 471: if ((x == '*')|(n == 3))
  3500  000CE2  0E2A               	movlw	42
  3501  000CE4  0100               	movlb	0	; () banked
  3502  000CE6  198F               	xorwf	start_routine@x& (0+255),w,b
  3503  000CE8  B4D8               	btfsc	status,2,c
  3504  000CEA  D028               	goto	l4150
  3505                           
  3506                           ; BSR set to: 0
  3507  000CEC  0E03               	movlw	3
  3508  000CEE  0100               	movlb	0	; () banked
  3509  000CF0  1990               	xorwf	start_routine@n& (0+255),w,b
  3510  000CF2  B4D8               	btfsc	status,2,c
  3511  000CF4  D023               	goto	l4150
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;main.c: 474: }
  3515                           ;main.c: 475: I2C_new_ADDR[n] = x;
  3516                           
  3517                           ; BSR set to: 0
  3518                           
  3519                           ; BSR set to: 0
  3520                           ;main.c: 472: {
  3521                           ;main.c: 473: break;
  3522  000CF6  0100               	movlb	0	; () banked
  3523  000CF8  5190               	movf	start_routine@n& (0+255),w,b
  3524  000CFA  0D01               	mullw	1
  3525  000CFC  0E87               	movlw	low start_routine@I2C_new_ADDR
  3526  000CFE  24F3               	addwf	prodl,w,c
  3527  000D00  6ED9               	movwf	fsr2l,c
  3528  000D02  0E00               	movlw	high start_routine@I2C_new_ADDR
  3529  000D04  20F4               	addwfc	prodh,w,c
  3530  000D06  6EDA               	movwf	fsr2h,c
  3531  000D08  C08F  FFDF         	movff	start_routine@x,indf2
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;main.c: 476: n++;
  3535  000D0C  0100               	movlb	0	; () banked
  3536  000D0E  2B90               	incf	start_routine@n& (0+255),f,b
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;main.c: 477: Lcd_Set_Cursor(2, n);
  3540  000D10  C090  F012         	movff	start_routine@n,Lcd_Set_Cursor@b
  3541  000D14  0E02               	movlw	2
  3542  000D16  ECFE  F00C         	call	_Lcd_Set_Cursor
  3543                           
  3544                           ;main.c: 478: Lcd_Write_Char(x);
  3545  000D1A  0100               	movlb	0	; () banked
  3546  000D1C  518F               	movf	start_routine@x& (0+255),w,b
  3547  000D1E  EC62  F00D         	call	_Lcd_Write_Char
  3548                           
  3549                           ;main.c: 479: Lcd_Write_Char('_');
  3550  000D22  0E5F               	movlw	95
  3551  000D24  EC62  F00D         	call	_Lcd_Write_Char
  3552                           
  3553                           ;main.c: 480: latch_keypad(&x);
  3554  000D28  0E8F               	movlw	low start_routine@x
  3555  000D2A  6E10               	movwf	latch_keypad@x,c
  3556  000D2C  0E00               	movlw	high start_routine@x
  3557  000D2E  6E11               	movwf	latch_keypad@x+1,c
  3558  000D30  EC46  F00D         	call	_latch_keypad	;wreg free
  3559  000D34                     l4148:
  3560  000D34  0E02               	movlw	2
  3561  000D36  0100               	movlb	0	; () banked
  3562  000D38  6590               	cpfsgt	start_routine@n& (0+255),b
  3563  000D3A  D77B               	goto	l4106
  3564  000D3C                     l4150:
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;main.c: 481: }
  3568                           ;main.c: 482: }
  3569                           ;main.c: 483: }
  3570                           ;main.c: 485: unsigned char new_I2C_address = 0;
  3571  000D3C  0E00               	movlw	0
  3572  000D3E  0100               	movlb	0	; () banked
  3573  000D40  6F91               	movwf	start_routine@new_I2C_address& (0+255),b
  3574                           
  3575                           ;main.c: 486: unsigned char b[3];
  3576                           ;main.c: 487: for (int i = 0; i < 3; i++)
  3577  000D42  0E00               	movlw	0
  3578  000D44  0100               	movlb	0	; () banked
  3579  000D46  6F8D               	movwf	(start_routine@i_897+1)& (0+255),b
  3580  000D48  0E00               	movlw	0
  3581  000D4A  6F8C               	movwf	start_routine@i_897& (0+255),b
  3582  000D4C                     l4152:
  3583                           
  3584                           ; BSR set to: 0
  3585  000D4C  0100               	movlb	0	; () banked
  3586  000D4E  BF8D               	btfsc	(start_routine@i_897+1)& (0+255),7,b
  3587  000D50  D008               	goto	l4156
  3588  000D52  0100               	movlb	0	; () banked
  3589  000D54  518D               	movf	(start_routine@i_897+1)& (0+255),w,b
  3590  000D56  E11C               	bnz	l4162
  3591  000D58  0E03               	movlw	3
  3592  000D5A  0100               	movlb	0	; () banked
  3593  000D5C  5D8C               	subwf	start_routine@i_897& (0+255),w,b
  3594  000D5E  B0D8               	btfsc	status,0,c
  3595  000D60  D017               	goto	l4162
  3596  000D62                     l4156:
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;main.c: 488: b[i] = I2C_new_ADDR[i] - '0';
  3600  000D62  0E80               	movlw	low start_routine@b
  3601  000D64  0100               	movlb	0	; () banked
  3602  000D66  258C               	addwf	start_routine@i_897& (0+255),w,b
  3603  000D68  6ED9               	movwf	fsr2l,c
  3604  000D6A  0E00               	movlw	high start_routine@b
  3605  000D6C  0100               	movlb	0	; () banked
  3606  000D6E  218D               	addwfc	(start_routine@i_897+1)& (0+255),w,b
  3607  000D70  6EDA               	movwf	fsr2h,c
  3608  000D72  0E87               	movlw	low start_routine@I2C_new_ADDR
  3609  000D74  0100               	movlb	0	; () banked
  3610  000D76  258C               	addwf	start_routine@i_897& (0+255),w,b
  3611  000D78  6EE1               	movwf	fsr1l,c
  3612  000D7A  0E00               	movlw	high start_routine@I2C_new_ADDR
  3613  000D7C  0100               	movlb	0	; () banked
  3614  000D7E  218D               	addwfc	(start_routine@i_897+1)& (0+255),w,b
  3615  000D80  6EE2               	movwf	fsr1h,c
  3616  000D82  50E7               	movf	indf1,w,c
  3617  000D84  0FD0               	addlw	208
  3618  000D86  6EDF               	movwf	indf2,c
  3619                           
  3620                           ; BSR set to: 0
  3621  000D88  0100               	movlb	0	; () banked
  3622  000D8A  4B8C               	infsnz	start_routine@i_897& (0+255),f,b
  3623  000D8C  2B8D               	incf	(start_routine@i_897+1)& (0+255),f,b
  3624  000D8E  D7DE               	goto	l4152
  3625  000D90                     l4162:
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;main.c: 489: new_I2C_address += (100)*(I2C_new_ADDR[0] - '0');
  3629  000D90  0100               	movlb	0	; () banked
  3630  000D92  5187               	movf	start_routine@I2C_new_ADDR& (0+255),w,b
  3631  000D94  0FD0               	addlw	208
  3632  000D96  0D64               	mullw	100
  3633  000D98  50F3               	movf	prodl,w,c
  3634  000D9A  0100               	movlb	0	; () banked
  3635  000D9C  2791               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3636                           
  3637                           ;main.c: 490: new_I2C_address += (10)*(I2C_new_ADDR[1] - '0');
  3638  000D9E  0100               	movlb	0	; () banked
  3639  000DA0  5188               	movf	(start_routine@I2C_new_ADDR+1)& (0+255),w,b
  3640  000DA2  0FD0               	addlw	208
  3641  000DA4  0D0A               	mullw	10
  3642  000DA6  50F3               	movf	prodl,w,c
  3643  000DA8  0100               	movlb	0	; () banked
  3644  000DAA  2791               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;main.c: 491: new_I2C_address += (1)*(I2C_new_ADDR[2] - '0');
  3648  000DAC  0100               	movlb	0	; () banked
  3649  000DAE  5189               	movf	(start_routine@I2C_new_ADDR+2)& (0+255),w,b
  3650  000DB0  0FD0               	addlw	208
  3651  000DB2  0100               	movlb	0	; () banked
  3652  000DB4  2791               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3653                           
  3654                           ; BSR set to: 0
  3655                           ;main.c: 492: Machine_ID = new_I2C_address;
  3656  000DB6  C091  F0DF         	movff	start_routine@new_I2C_address,_Machine_ID
  3657                           
  3658                           ; BSR set to: 0
  3659                           ;main.c: 493: new_I2C_address += 0x0F;
  3660  000DBA  0E0F               	movlw	15
  3661  000DBC  0100               	movlb	0	; () banked
  3662  000DBE  2791               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;main.c: 495: char* error_msg;
  3666                           ;main.c: 496: if ( ((b[0]==0)&&((b[1]!=0)|(b[2]!=0))) | ((b[0]==1)&&(b[1]==0)&&(b[2]==0)
      +                          ) )
  3667  000DC0  0100               	movlb	0	; () banked
  3668  000DC2  5180               	movf	start_routine@b& (0+255),w,b
  3669  000DC4  0100               	movlb	0	; () banked
  3670  000DC6  A4D8               	btfss	status,2,c
  3671  000DC8  D008               	goto	l4176
  3672                           
  3673                           ; BSR set to: 0
  3674  000DCA  0100               	movlb	0	; () banked
  3675  000DCC  5181               	movf	(start_routine@b+1)& (0+255),w,b
  3676  000DCE  A4D8               	btfss	status,2,c
  3677  000DD0  D010               	goto	l4182
  3678                           
  3679                           ; BSR set to: 0
  3680  000DD2  0100               	movlb	0	; () banked
  3681  000DD4  5182               	movf	(start_routine@b+2)& (0+255),w,b
  3682  000DD6  A4D8               	btfss	status,2,c
  3683  000DD8  D00C               	goto	l4182
  3684  000DDA                     l4176:
  3685                           
  3686                           ; BSR set to: 0
  3687  000DDA  0100               	movlb	0	; () banked
  3688  000DDC  0580               	decf	start_routine@b& (0+255),w,b
  3689  000DDE  A4D8               	btfss	status,2,c
  3690  000DE0  D112               	goto	l4250
  3691                           
  3692                           ; BSR set to: 0
  3693  000DE2  0100               	movlb	0	; () banked
  3694  000DE4  5181               	movf	(start_routine@b+1)& (0+255),w,b
  3695  000DE6  A4D8               	btfss	status,2,c
  3696  000DE8  D10E               	goto	l4250
  3697                           
  3698                           ; BSR set to: 0
  3699  000DEA  0100               	movlb	0	; () banked
  3700  000DEC  5182               	movf	(start_routine@b+2)& (0+255),w,b
  3701  000DEE  A4D8               	btfss	status,2,c
  3702  000DF0  D10A               	goto	l4250
  3703  000DF2                     l4182:
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;main.c: 497: {
  3707                           ;main.c: 499: dh = (new_I2C_address / 100);
  3708  000DF2  C091  F010         	movff	start_routine@new_I2C_address,___awdiv@dividend
  3709  000DF6  6A11               	clrf	___awdiv@dividend+1,c
  3710  000DF8  0E00               	movlw	0
  3711  000DFA  6E13               	movwf	___awdiv@divisor+1,c
  3712  000DFC  0E64               	movlw	100
  3713  000DFE  6E12               	movwf	___awdiv@divisor,c
  3714  000E00  EC7C  F00B         	call	___awdiv	;wreg free
  3715  000E04  5010               	movf	?___awdiv,w,c
  3716  000E06  0100               	movlb	0	; () banked
  3717  000E08  6F8E               	movwf	start_routine@dh& (0+255),b
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;main.c: 500: dt = (new_I2C_address - dh*100) / 10;
  3721  000E0A  0100               	movlb	0	; () banked
  3722  000E0C  518E               	movf	start_routine@dh& (0+255),w,b
  3723  000E0E  0D64               	mullw	100
  3724  000E10  1EF3               	comf	prodl,f,c
  3725  000E12  1EF4               	comf	prodh,f,c
  3726  000E14  4AF3               	infsnz	prodl,f,c
  3727  000E16  2AF4               	incf	prodh,f,c
  3728  000E18  0100               	movlb	0	; () banked
  3729  000E1A  5191               	movf	start_routine@new_I2C_address& (0+255),w,b
  3730  000E1C  24F3               	addwf	prodl,w,c
  3731  000E1E  6E10               	movwf	___awdiv@dividend,c
  3732  000E20  0E00               	movlw	0
  3733  000E22  20F4               	addwfc	prodh,w,c
  3734  000E24  6E11               	movwf	___awdiv@dividend+1,c
  3735  000E26  0E00               	movlw	0
  3736  000E28  6E13               	movwf	___awdiv@divisor+1,c
  3737  000E2A  0E0A               	movlw	10
  3738  000E2C  6E12               	movwf	___awdiv@divisor,c
  3739  000E2E  EC7C  F00B         	call	___awdiv	;wreg free
  3740  000E32  5010               	movf	?___awdiv,w,c
  3741  000E34  0100               	movlb	0	; () banked
  3742  000E36  6F8B               	movwf	start_routine@dt& (0+255),b
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;main.c: 501: d1 = (new_I2C_address - (dh*100+dt*10));
  3746  000E38  0100               	movlb	0	; () banked
  3747  000E3A  518B               	movf	start_routine@dt& (0+255),w,b
  3748  000E3C  0D0A               	mullw	10
  3749  000E3E  CFF3 F023          	movff	prodl,??_start_routine
  3750  000E42  0100               	movlb	0	; () banked
  3751  000E44  518E               	movf	start_routine@dh& (0+255),w,b
  3752  000E46  0D64               	mullw	100
  3753  000E48  50F3               	movf	prodl,w,c
  3754  000E4A  2423               	addwf	??_start_routine,w,c
  3755  000E4C  0800               	sublw	0
  3756  000E4E  0100               	movlb	0	; () banked
  3757  000E50  2591               	addwf	start_routine@new_I2C_address& (0+255),w,b
  3758  000E52  0100               	movlb	0	; () banked
  3759  000E54  6F72               	movwf	start_routine@d1& (0+255),b
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;main.c: 503: h = new_I2C_address/16;
  3763  000E56  C091  F010         	movff	start_routine@new_I2C_address,___awdiv@dividend
  3764  000E5A  6A11               	clrf	___awdiv@dividend+1,c
  3765  000E5C  0E00               	movlw	0
  3766  000E5E  6E13               	movwf	___awdiv@divisor+1,c
  3767  000E60  0E10               	movlw	16
  3768  000E62  6E12               	movwf	___awdiv@divisor,c
  3769  000E64  EC7C  F00B         	call	___awdiv	;wreg free
  3770  000E68  5010               	movf	?___awdiv,w,c
  3771  000E6A  0100               	movlb	0	; () banked
  3772  000E6C  6F6E               	movwf	start_routine@h& (0+255),b
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;main.c: 504: l = new_I2C_address - (new_I2C_address/16)*16;
  3776  000E6E  C091  F010         	movff	start_routine@new_I2C_address,___awdiv@dividend
  3777  000E72  6A11               	clrf	___awdiv@dividend+1,c
  3778  000E74  0E00               	movlw	0
  3779  000E76  6E13               	movwf	___awdiv@divisor+1,c
  3780  000E78  0E10               	movlw	16
  3781  000E7A  6E12               	movwf	___awdiv@divisor,c
  3782  000E7C  EC7C  F00B         	call	___awdiv	;wreg free
  3783  000E80  3810               	swapf	?___awdiv,w,c
  3784  000E82  0BF0               	andlw	240
  3785  000E84  0800               	sublw	0
  3786  000E86  0100               	movlb	0	; () banked
  3787  000E88  2591               	addwf	start_routine@new_I2C_address& (0+255),w,b
  3788  000E8A  0100               	movlb	0	; () banked
  3789  000E8C  6F6F               	movwf	start_routine@l& (0+255),b
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;main.c: 505: Lcd_Clear();
  3793  000E8E  ECCD  F00D         	call	_Lcd_Clear	;wreg free
  3794                           
  3795                           ;main.c: 506: Lcd_Set_Cursor(1,1);
  3796  000E92  0E01               	movlw	1
  3797  000E94  6E12               	movwf	Lcd_Set_Cursor@b,c
  3798  000E96  0E01               	movlw	1
  3799  000E98  ECFE  F00C         	call	_Lcd_Set_Cursor
  3800                           
  3801                           ;main.c: 507: Lcd_Write_String("New Machine ID: ");
  3802  000E9C  0E31               	movlw	low STR_21
  3803  000E9E  6E14               	movwf	Lcd_Write_String@a,c
  3804  000EA0  0E7F               	movlw	high STR_21
  3805  000EA2  6E15               	movwf	Lcd_Write_String@a+1,c
  3806  000EA4  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  3807                           
  3808                           ;main.c: 508: Lcd_Set_Cursor(2,1);
  3809  000EA8  0E01               	movlw	1
  3810  000EAA  6E12               	movwf	Lcd_Set_Cursor@b,c
  3811  000EAC  0E02               	movlw	2
  3812  000EAE  ECFE  F00C         	call	_Lcd_Set_Cursor
  3813                           
  3814                           ;main.c: 509: for (int i = 0; i < 3; i++)
  3815  000EB2  0E00               	movlw	0
  3816  000EB4  0100               	movlb	0	; () banked
  3817  000EB6  6F84               	movwf	(start_routine@i_900+1)& (0+255),b
  3818  000EB8  0E00               	movlw	0
  3819  000EBA  6F83               	movwf	start_routine@i_900& (0+255),b
  3820  000EBC                     l4202:
  3821                           
  3822                           ; BSR set to: 0
  3823  000EBC  0100               	movlb	0	; () banked
  3824  000EBE  BF84               	btfsc	(start_routine@i_900+1)& (0+255),7,b
  3825  000EC0  D008               	goto	l4206
  3826  000EC2  0100               	movlb	0	; () banked
  3827  000EC4  5184               	movf	(start_routine@i_900+1)& (0+255),w,b
  3828  000EC6  E114               	bnz	l4212
  3829  000EC8  0E03               	movlw	3
  3830  000ECA  0100               	movlb	0	; () banked
  3831  000ECC  5D83               	subwf	start_routine@i_900& (0+255),w,b
  3832  000ECE  B0D8               	btfsc	status,0,c
  3833  000ED0  D00F               	goto	l4212
  3834  000ED2                     l4206:
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;main.c: 510: Lcd_Write_Char(I2C_new_ADDR[i]);
  3838  000ED2  0E87               	movlw	low start_routine@I2C_new_ADDR
  3839  000ED4  0100               	movlb	0	; () banked
  3840  000ED6  2583               	addwf	start_routine@i_900& (0+255),w,b
  3841  000ED8  6ED9               	movwf	fsr2l,c
  3842  000EDA  0E00               	movlw	high start_routine@I2C_new_ADDR
  3843  000EDC  0100               	movlb	0	; () banked
  3844  000EDE  2184               	addwfc	(start_routine@i_900+1)& (0+255),w,b
  3845  000EE0  6EDA               	movwf	fsr2h,c
  3846  000EE2  50DF               	movf	indf2,w,c
  3847  000EE4  EC62  F00D         	call	_Lcd_Write_Char
  3848  000EE8  0100               	movlb	0	; () banked
  3849  000EEA  4B83               	infsnz	start_routine@i_900& (0+255),f,b
  3850  000EEC  2B84               	incf	(start_routine@i_900+1)& (0+255),f,b
  3851  000EEE  D7E6               	goto	l4202
  3852  000EF0                     l4212:
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;main.c: 511: Lcd_Set_Cursor(2, 7);
  3856  000EF0  0E07               	movlw	7
  3857  000EF2  6E12               	movwf	Lcd_Set_Cursor@b,c
  3858  000EF4  0E02               	movlw	2
  3859  000EF6  ECFE  F00C         	call	_Lcd_Set_Cursor
  3860                           
  3861                           ;main.c: 512: Lcd_Write_String("[OK]");
  3862  000EFA  0EF7               	movlw	low STR_24
  3863  000EFC  6E14               	movwf	Lcd_Write_String@a,c
  3864  000EFE  0E7F               	movlw	high STR_24
  3865  000F00  6E15               	movwf	Lcd_Write_String@a+1,c
  3866  000F02  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  3867                           
  3868                           ;main.c: 513: Lcd_Set_Cursor(2,14);
  3869  000F06  0E0E               	movlw	14
  3870  000F08  6E12               	movwf	Lcd_Set_Cursor@b,c
  3871  000F0A  0E02               	movlw	2
  3872  000F0C  ECFE  F00C         	call	_Lcd_Set_Cursor
  3873                           
  3874                           ;main.c: 514: Lcd_Write_String("x");
  3875  000F10  0EFC               	movlw	low STR_25
  3876  000F12  6E14               	movwf	Lcd_Write_String@a,c
  3877  000F14  0E7F               	movlw	high STR_25
  3878  000F16  6E15               	movwf	Lcd_Write_String@a+1,c
  3879  000F18  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  3880                           
  3881                           ;main.c: 515: Lcd_Write_Char(hx[h]);
  3882  000F1C  0100               	movlb	0	; () banked
  3883  000F1E  516E               	movf	start_routine@h& (0+255),w,b
  3884  000F20  0D01               	mullw	1
  3885  000F22  0E2F               	movlw	low _hx
  3886  000F24  24F3               	addwf	prodl,w,c
  3887  000F26  6ED9               	movwf	fsr2l,c
  3888  000F28  0E00               	movlw	high _hx
  3889  000F2A  20F4               	addwfc	prodh,w,c
  3890  000F2C  6EDA               	movwf	fsr2h,c
  3891  000F2E  50DF               	movf	indf2,w,c
  3892  000F30  EC62  F00D         	call	_Lcd_Write_Char
  3893                           
  3894                           ;main.c: 516: Lcd_Write_Char(hx[l]);
  3895  000F34  0100               	movlb	0	; () banked
  3896  000F36  516F               	movf	start_routine@l& (0+255),w,b
  3897  000F38  0D01               	mullw	1
  3898  000F3A  0E2F               	movlw	low _hx
  3899  000F3C  24F3               	addwf	prodl,w,c
  3900  000F3E  6ED9               	movwf	fsr2l,c
  3901  000F40  0E00               	movlw	high _hx
  3902  000F42  20F4               	addwfc	prodh,w,c
  3903  000F44  6EDA               	movwf	fsr2h,c
  3904  000F46  50DF               	movf	indf2,w,c
  3905  000F48  EC62  F00D         	call	_Lcd_Write_Char
  3906                           
  3907                           ;main.c: 517: for (int i = 0; i < 50; i++)
  3908  000F4C  0E00               	movlw	0
  3909  000F4E  0100               	movlb	0	; () banked
  3910  000F50  6F7B               	movwf	(start_routine@i_903+1)& (0+255),b
  3911  000F52  0E00               	movlw	0
  3912  000F54  6F7A               	movwf	start_routine@i_903& (0+255),b
  3913                           
  3914                           ; BSR set to: 0
  3915  000F56  0100               	movlb	0	; () banked
  3916  000F58  BF7B               	btfsc	(start_routine@i_903+1)& (0+255),7,b
  3917  000F5A  D008               	goto	l4228
  3918  000F5C  0100               	movlb	0	; () banked
  3919  000F5E  517B               	movf	(start_routine@i_903+1)& (0+255),w,b
  3920  000F60  E118               	bnz	l332
  3921  000F62  0E32               	movlw	50
  3922  000F64  0100               	movlb	0	; () banked
  3923  000F66  5D7A               	subwf	start_routine@i_903& (0+255),w,b
  3924  000F68  B0D8               	btfsc	status,0,c
  3925  000F6A  D013               	goto	l332
  3926  000F6C                     l4228:
  3927                           
  3928                           ; BSR set to: 0
  3929                           ;main.c: 518: _delay((unsigned long)((20)*(16000000/4000.0)));
  3930  000F6C  0E68               	movlw	104
  3931  000F6E  6E23               	movwf	??_start_routine& (0+255),c
  3932  000F70  0EE4               	movlw	228
  3933  000F72                     u4777:
  3934  000F72  2EE8               	decfsz	wreg,f,c
  3935  000F74  D7FE               	goto	u4777
  3936  000F76  2E23               	decfsz	??_start_routine& (0+255),f,c
  3937  000F78  D7FC               	goto	u4777
  3938  000F7A  F000 F000          	nop2	
  3939  000F7E  0100               	movlb	0	; () banked
  3940  000F80  4B7A               	infsnz	start_routine@i_903& (0+255),f,b
  3941  000F82  2B7B               	incf	(start_routine@i_903+1)& (0+255),f,b
  3942  000F84  0100               	movlb	0	; () banked
  3943  000F86  BF7B               	btfsc	(start_routine@i_903+1)& (0+255),7,b
  3944  000F88  D7F1               	goto	l4228
  3945  000F8A  0100               	movlb	0	; () banked
  3946  000F8C  517B               	movf	(start_routine@i_903+1)& (0+255),w,b
  3947  000F8E  E101               	bnz	u3940
  3948  000F90  D7E8               	goto	L3
  3949  000F92                     u3940:
  3950  000F92                     l332:
  3951                           
  3952                           ; BSR set to: 0
  3953                           ;main.c: 519: I2C_ADDR = new_I2C_address;
  3954  000F92  C091  F0DE         	movff	start_routine@new_I2C_address,_I2C_ADDR
  3955                           
  3956                           ; BSR set to: 0
  3957                           ;main.c: 520: Eeprom_Write_Byte(EEP_I2C_ADDR, I2C_ADDR);
  3958  000F96  C0DE  F010         	movff	_I2C_ADDR,Eeprom_Write_Byte@data
  3959  000F9A  0100               	movlb	0	; () banked
  3960  000F9C  51DC               	movf	_EEP_I2C_ADDR& (0+255),w,b
  3961  000F9E  ECBB  F00D         	call	_Eeprom_Write_Byte
  3962                           
  3963                           ;main.c: 521: Lcd_Clear();
  3964  000FA2  ECCD  F00D         	call	_Lcd_Clear	;wreg free
  3965                           
  3966                           ;main.c: 522: Lcd_Set_Cursor(1,1);
  3967  000FA6  0E01               	movlw	1
  3968  000FA8  6E12               	movwf	Lcd_Set_Cursor@b,c
  3969  000FAA  0E01               	movlw	1
  3970  000FAC  ECFE  F00C         	call	_Lcd_Set_Cursor
  3971                           
  3972                           ;main.c: 523: Lcd_Write_String("I2C_ADDR>>EEPROM");
  3973  000FB0  0E86               	movlw	low STR_26
  3974  000FB2  6E14               	movwf	Lcd_Write_String@a,c
  3975  000FB4  0E7F               	movlw	high STR_26
  3976  000FB6  6E15               	movwf	Lcd_Write_String@a+1,c
  3977  000FB8  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  3978                           
  3979                           ;main.c: 530: for (int i = 0; i < 10; i++)
  3980  000FBC  0E00               	movlw	0
  3981  000FBE  0100               	movlb	0	; () banked
  3982  000FC0  6F7D               	movwf	(start_routine@i_906+1)& (0+255),b
  3983  000FC2  0E00               	movlw	0
  3984  000FC4  6F7C               	movwf	start_routine@i_906& (0+255),b
  3985  000FC6                     l4240:
  3986                           
  3987                           ; BSR set to: 0
  3988  000FC6  0100               	movlb	0	; () banked
  3989  000FC8  BF7D               	btfsc	(start_routine@i_906+1)& (0+255),7,b
  3990  000FCA  D008               	goto	l4244
  3991  000FCC  0100               	movlb	0	; () banked
  3992  000FCE  517D               	movf	(start_routine@i_906+1)& (0+255),w,b
  3993  000FD0  E112               	bnz	l4248
  3994  000FD2  0E0A               	movlw	10
  3995  000FD4  0100               	movlb	0	; () banked
  3996  000FD6  5D7C               	subwf	start_routine@i_906& (0+255),w,b
  3997  000FD8  B0D8               	btfsc	status,0,c
  3998  000FDA  D00D               	goto	l4248
  3999  000FDC                     l4244:
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;main.c: 531: _delay((unsigned long)((20)*(16000000/4000.0)));
  4003  000FDC  0E68               	movlw	104
  4004  000FDE  6E23               	movwf	??_start_routine& (0+255),c
  4005  000FE0  0EE4               	movlw	228
  4006  000FE2                     u4787:
  4007  000FE2  2EE8               	decfsz	wreg,f,c
  4008  000FE4  D7FE               	goto	u4787
  4009  000FE6  2E23               	decfsz	??_start_routine& (0+255),f,c
  4010  000FE8  D7FC               	goto	u4787
  4011  000FEA  F000 F000          	nop2	
  4012  000FEE  0100               	movlb	0	; () banked
  4013  000FF0  4B7C               	infsnz	start_routine@i_906& (0+255),f,b
  4014  000FF2  2B7D               	incf	(start_routine@i_906+1)& (0+255),f,b
  4015  000FF4  D7E8               	goto	l4240
  4016  000FF6                     l4248:
  4017                           
  4018                           ; BSR set to: 0
  4019                           ;main.c: 532: menu_progress_bar(500);
  4020  000FF6  0E01               	movlw	1
  4021  000FF8  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  4022  000FFA  0EF4               	movlw	244
  4023  000FFC  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  4024  000FFE  ECE3  F009         	call	_menu_progress_bar	;wreg free
  4025  001002  00FF               	reset		;# 
  4026                           
  4027                           ;main.c: 534: }
  4028  001004  D05C               	goto	l4284
  4029  001006                     l4250:
  4030                           
  4031                           ;main.c: 535: else
  4032                           ;main.c: 536: {
  4033                           ;main.c: 537: if (new_I2C_address == 0)
  4034  001006  0100               	movlb	0	; () banked
  4035  001008  5191               	movf	start_routine@new_I2C_address& (0+255),w,b
  4036  00100A  0100               	movlb	0	; () banked
  4037  00100C  A4D8               	btfss	status,2,c
  4038  00100E  D005               	goto	l4254
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;main.c: 538: error_msg = "May not be zero!";
  4042  001010  0E53               	movlw	low STR_27
  4043  001012  0100               	movlb	0	; () banked
  4044  001014  6F70               	movwf	start_routine@error_msg& (0+255),b
  4045  001016  0E7F               	movlw	high STR_27
  4046  001018  D004               	goto	L4
  4047  00101A                     l4254:
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;main.c: 539: else
  4051                           ;main.c: 540: error_msg = "Out of bounds!  ";
  4052  00101A  0EDC               	movlw	low STR_28
  4053  00101C  0100               	movlb	0	; () banked
  4054  00101E  6F70               	movwf	start_routine@error_msg& (0+255),b
  4055  001020  0E7E               	movlw	high STR_28
  4056  001022                     L4:
  4057  001022  0100               	movlb	0	; () banked
  4058  001024  6F71               	movwf	(start_routine@error_msg+1)& (0+255),b
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;main.c: 541: Lcd_Set_Cursor(2,1);
  4062                           
  4063                           ; BSR set to: 0
  4064  001026  0E01               	movlw	1
  4065  001028  6E12               	movwf	Lcd_Set_Cursor@b,c
  4066  00102A  0E02               	movlw	2
  4067  00102C  ECFE  F00C         	call	_Lcd_Set_Cursor
  4068                           
  4069                           ;main.c: 542: Lcd_Write_String(error_msg);
  4070  001030  C070  F014         	movff	start_routine@error_msg,Lcd_Write_String@a
  4071  001034  C071  F015         	movff	start_routine@error_msg+1,Lcd_Write_String@a+1
  4072  001038  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  4073                           
  4074                           ;main.c: 543: for (int i = 0; i < 50; i++)
  4075  00103C  0E00               	movlw	0
  4076  00103E  0100               	movlb	0	; () banked
  4077  001040  6F7F               	movwf	(start_routine@i_909+1)& (0+255),b
  4078  001042  0E00               	movlw	0
  4079  001044  6F7E               	movwf	start_routine@i_909& (0+255),b
  4080  001046                     l4262:
  4081                           
  4082                           ; BSR set to: 0
  4083  001046  0100               	movlb	0	; () banked
  4084  001048  BF7F               	btfsc	(start_routine@i_909+1)& (0+255),7,b
  4085  00104A  D008               	goto	l4266
  4086  00104C  0100               	movlb	0	; () banked
  4087  00104E  517F               	movf	(start_routine@i_909+1)& (0+255),w,b
  4088  001050  E112               	bnz	l4270
  4089  001052  0E32               	movlw	50
  4090  001054  0100               	movlb	0	; () banked
  4091  001056  5D7E               	subwf	start_routine@i_909& (0+255),w,b
  4092  001058  B0D8               	btfsc	status,0,c
  4093  00105A  D00D               	goto	l4270
  4094  00105C                     l4266:
  4095                           
  4096                           ; BSR set to: 0
  4097                           ;main.c: 544: _delay((unsigned long)((20)*(16000000/4000.0)));
  4098  00105C  0E68               	movlw	104
  4099  00105E  6E23               	movwf	??_start_routine& (0+255),c
  4100  001060  0EE4               	movlw	228
  4101  001062                     u4797:
  4102  001062  2EE8               	decfsz	wreg,f,c
  4103  001064  D7FE               	goto	u4797
  4104  001066  2E23               	decfsz	??_start_routine& (0+255),f,c
  4105  001068  D7FC               	goto	u4797
  4106  00106A  F000 F000          	nop2	
  4107  00106E  0100               	movlb	0	; () banked
  4108  001070  4B7E               	infsnz	start_routine@i_909& (0+255),f,b
  4109  001072  2B7F               	incf	(start_routine@i_909+1)& (0+255),f,b
  4110  001074  D7E8               	goto	l4262
  4111  001076                     l4270:
  4112                           
  4113                           ; BSR set to: 0
  4114                           ;main.c: 545: for (int i = 0; i < 3; i++)
  4115  001076  0E00               	movlw	0
  4116  001078  0100               	movlb	0	; () banked
  4117  00107A  6F86               	movwf	(start_routine@i_910+1)& (0+255),b
  4118  00107C  0E00               	movlw	0
  4119  00107E  6F85               	movwf	start_routine@i_910& (0+255),b
  4120  001080                     l4272:
  4121                           
  4122                           ; BSR set to: 0
  4123  001080  0100               	movlb	0	; () banked
  4124  001082  BF86               	btfsc	(start_routine@i_910+1)& (0+255),7,b
  4125  001084  D008               	goto	l4276
  4126  001086  0100               	movlb	0	; () banked
  4127  001088  5186               	movf	(start_routine@i_910+1)& (0+255),w,b
  4128  00108A  E113               	bnz	l4282
  4129  00108C  0E03               	movlw	3
  4130  00108E  0100               	movlb	0	; () banked
  4131  001090  5D85               	subwf	start_routine@i_910& (0+255),w,b
  4132  001092  B0D8               	btfsc	status,0,c
  4133  001094  D00E               	goto	l4282
  4134  001096                     l4276:
  4135                           
  4136                           ; BSR set to: 0
  4137                           ;main.c: 546: I2C_new_ADDR[i] = '0';
  4138  001096  0E87               	movlw	low start_routine@I2C_new_ADDR
  4139  001098  0100               	movlb	0	; () banked
  4140  00109A  2585               	addwf	start_routine@i_910& (0+255),w,b
  4141  00109C  6ED9               	movwf	fsr2l,c
  4142  00109E  0E00               	movlw	high start_routine@I2C_new_ADDR
  4143  0010A0  0100               	movlb	0	; () banked
  4144  0010A2  2186               	addwfc	(start_routine@i_910+1)& (0+255),w,b
  4145  0010A4  6EDA               	movwf	fsr2h,c
  4146  0010A6  0E30               	movlw	48
  4147  0010A8  6EDF               	movwf	indf2,c
  4148                           
  4149                           ; BSR set to: 0
  4150  0010AA  0100               	movlb	0	; () banked
  4151  0010AC  4B85               	infsnz	start_routine@i_910& (0+255),f,b
  4152  0010AE  2B86               	incf	(start_routine@i_910+1)& (0+255),f,b
  4153  0010B0  D7E7               	goto	l4272
  4154  0010B2                     l4282:
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;main.c: 547: v = 0;
  4158  0010B2  0E00               	movlw	0
  4159  0010B4  0100               	movlb	0	; () banked
  4160  0010B6  6F73               	movwf	start_routine@v& (0+255),b
  4161                           
  4162                           ;main.c: 548: n = 0;
  4163  0010B8  0E00               	movlw	0
  4164  0010BA  0100               	movlb	0	; () banked
  4165  0010BC  6F90               	movwf	start_routine@n& (0+255),b
  4166  0010BE                     l4284:
  4167  0010BE  0100               	movlb	0	; () banked
  4168  0010C0  0573               	decf	start_routine@v& (0+255),w,b
  4169  0010C2  B4D8               	btfsc	status,2,c
  4170  0010C4  0012               	return	
  4171  0010C6  D596               	goto	l4096
  4172  0010C8                     l4286:
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;main.c: 552: else
  4176                           ;main.c: 553: {
  4177                           ;main.c: 554: v = 1;
  4178  0010C8  0E01               	movlw	1
  4179  0010CA  0100               	movlb	0	; () banked
  4180  0010CC  6F73               	movwf	start_routine@v& (0+255),b
  4181  0010CE  0012               	return	
  4182  0010D0                     __end_of_start_routine:
  4183                           	opt stack 0
  4184                           tblptru	equ	0xFF8
  4185                           tblptrh	equ	0xFF7
  4186                           tblptrl	equ	0xFF6
  4187                           tablat	equ	0xFF5
  4188                           prodh	equ	0xFF4
  4189                           prodl	equ	0xFF3
  4190                           postinc0	equ	0xFEE
  4191                           wreg	equ	0xFE8
  4192                           indf1	equ	0xFE7
  4193                           postdec1	equ	0xFE5
  4194                           plusw1	equ	0xFE3
  4195                           fsr1h	equ	0xFE2
  4196                           fsr1l	equ	0xFE1
  4197                           indf2	equ	0xFDF
  4198                           postinc2	equ	0xFDE
  4199                           plusw2	equ	0xFDB
  4200                           fsr2h	equ	0xFDA
  4201                           fsr2l	equ	0xFD9
  4202                           status	equ	0xFD8
  4203                           
  4204 ;; *************** function _latch_keypad *****************
  4205 ;; Defined at:
  4206 ;;		line 298 in file "main.c"
  4207 ;; Parameters:    Size  Location     Type
  4208 ;;  x               2   15[COMRAM] PTR unsigned char 
  4209 ;;		 -> start_routine@x(1), main@x(1), 
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;		None
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  1    wreg      void 
  4214 ;; Registers used:
  4215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4221 ;;      Params:         2       0       0       0       0       0       0
  4222 ;;      Locals:         0       0       0       0       0       0       0
  4223 ;;      Temps:          2       0       0       0       0       0       0
  4224 ;;      Totals:         4       0       0       0       0       0       0
  4225 ;;Total ram usage:        4 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    2
  4228 ;; This function calls:
  4229 ;;		_read_keypad
  4230 ;; This function is called by:
  4231 ;;		_main
  4232 ;;		_start_routine
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           	psect	text2
  4237  001A8C                     __ptext2:
  4238                           	opt stack 0
  4239  001A8C                     _latch_keypad:
  4240                           	opt stack 27
  4241                           
  4242                           ;main.c: 300: while (*x == read_keypad())
  4243                           
  4244                           ; BSR set to: 0
  4245                           ;incstack = 0
  4246  001A8C  D009               	goto	l3854
  4247  001A8E                     l3852:
  4248                           
  4249                           ;main.c: 301: {
  4250                           ;main.c: 302: _delay((unsigned long)((20)*(16000000/4000.0)));
  4251  001A8E  0E68               	movlw	104
  4252  001A90  6E12               	movwf	??_latch_keypad& (0+255),c
  4253  001A92  0EE4               	movlw	228
  4254  001A94                     u4807:
  4255  001A94  2EE8               	decfsz	wreg,f,c
  4256  001A96  D7FE               	goto	u4807
  4257  001A98  2E12               	decfsz	??_latch_keypad& (0+255),f,c
  4258  001A9A  D7FC               	goto	u4807
  4259  001A9C  F000 F000          	nop2	
  4260  001AA0                     l3854:
  4261  001AA0  C010  FFD9         	movff	latch_keypad@x,fsr2l
  4262  001AA4  C011  FFDA         	movff	latch_keypad@x+1,fsr2h
  4263  001AA8  EC2A  F00B         	call	_read_keypad	;wreg free
  4264  001AAC  6E13               	movwf	(??_latch_keypad+1)& (0+255),c
  4265  001AAE  50DE               	movf	postinc2,w,c
  4266  001AB0  1813               	xorwf	??_latch_keypad+1,w,c
  4267  001AB2  B4D8               	btfsc	status,2,c
  4268  001AB4  D7EC               	goto	l3852
  4269                           
  4270                           ;main.c: 303: }
  4271                           ;main.c: 304: *x = '_';
  4272  001AB6  C010  FFD9         	movff	latch_keypad@x,fsr2l
  4273  001ABA  C011  FFDA         	movff	latch_keypad@x+1,fsr2h
  4274  001ABE  0E5F               	movlw	95
  4275  001AC0  6EDF               	movwf	indf2,c
  4276  001AC2  0012               	return		;funcret
  4277  001AC4                     __end_of_latch_keypad:
  4278                           	opt stack 0
  4279                           tblptru	equ	0xFF8
  4280                           tblptrh	equ	0xFF7
  4281                           tblptrl	equ	0xFF6
  4282                           tablat	equ	0xFF5
  4283                           prodh	equ	0xFF4
  4284                           prodl	equ	0xFF3
  4285                           postinc0	equ	0xFEE
  4286                           wreg	equ	0xFE8
  4287                           indf1	equ	0xFE7
  4288                           postdec1	equ	0xFE5
  4289                           plusw1	equ	0xFE3
  4290                           fsr1h	equ	0xFE2
  4291                           fsr1l	equ	0xFE1
  4292                           indf2	equ	0xFDF
  4293                           postinc2	equ	0xFDE
  4294                           plusw2	equ	0xFDB
  4295                           fsr2h	equ	0xFDA
  4296                           fsr2l	equ	0xFD9
  4297                           status	equ	0xFD8
  4298                           
  4299 ;; *************** function _Eeprom_Write_Byte *****************
  4300 ;; Defined at:
  4301 ;;		line 43 in file "eeprom.h"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;  address         1    wreg     unsigned char 
  4304 ;;  data            1   15[COMRAM] unsigned char 
  4305 ;; Auto vars:     Size  Location     Type
  4306 ;;  address         1   16[COMRAM] unsigned char 
  4307 ;; Return value:  Size  Location     Type
  4308 ;;                  1    wreg      void 
  4309 ;; Registers used:
  4310 ;;		wreg, status,2
  4311 ;; Tracked objects:
  4312 ;;		On entry : 0/0
  4313 ;;		On exit  : 0/0
  4314 ;;		Unchanged: 0/0
  4315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4316 ;;      Params:         1       0       0       0       0       0       0
  4317 ;;      Locals:         1       0       0       0       0       0       0
  4318 ;;      Temps:          0       0       0       0       0       0       0
  4319 ;;      Totals:         2       0       0       0       0       0       0
  4320 ;;Total ram usage:        2 bytes
  4321 ;; Hardware stack levels used:    1
  4322 ;; Hardware stack levels required when called:    1
  4323 ;; This function calls:
  4324 ;;		Nothing
  4325 ;; This function is called by:
  4326 ;;		_start_routine
  4327 ;; This function uses a non-reentrant model
  4328 ;;
  4329                           
  4330                           	psect	text3
  4331  001B76                     __ptext3:
  4332                           	opt stack 0
  4333  001B76                     _Eeprom_Write_Byte:
  4334                           	opt stack 28
  4335                           
  4336                           ;incstack = 0
  4337                           ;Eeprom_Write_Byte@address stored from wreg
  4338  001B76  6E11               	movwf	Eeprom_Write_Byte@address,c
  4339                           
  4340                           ;eeprom.h: 46: EEADR = (unsigned char)address;
  4341  001B78  C011  FFA9         	movff	Eeprom_Write_Byte@address,4009	;volatile
  4342                           
  4343                           ;eeprom.h: 48: EEDATA = data;
  4344  001B7C  C010  FFA8         	movff	Eeprom_Write_Byte@data,4008	;volatile
  4345                           
  4346                           ;eeprom.h: 49: EECON1bits.EEPGD = 0;
  4347  001B80  9EA6               	bcf	4006,7,c	;volatile
  4348                           
  4349                           ;eeprom.h: 50: EECON1bits.CFGS = 0;
  4350  001B82  9CA6               	bcf	4006,6,c	;volatile
  4351                           
  4352                           ;eeprom.h: 51: EECON1bits.WREN = 1;
  4353  001B84  84A6               	bsf	4006,2,c	;volatile
  4354                           
  4355                           ;eeprom.h: 55: EECON2 = 0x55;
  4356  001B86  0E55               	movlw	85
  4357  001B88  6EA7               	movwf	4007,c	;volatile
  4358                           
  4359                           ;eeprom.h: 56: EECON2 = 0xAA;
  4360  001B8A  0EAA               	movlw	170
  4361  001B8C  6EA7               	movwf	4007,c	;volatile
  4362                           
  4363                           ;eeprom.h: 57: EECON1bits.WR = 1;
  4364  001B8E  82A6               	bsf	4006,1,c	;volatile
  4365  001B90                     l157:
  4366  001B90  A8A1               	btfss	4001,4,c	;volatile
  4367  001B92  D7FE               	goto	l157
  4368                           
  4369                           ;eeprom.h: 63: }
  4370                           ;eeprom.h: 65: PIR2bits.EEIF = 0;
  4371  001B94  98A1               	bcf	4001,4,c	;volatile
  4372                           
  4373                           ;eeprom.h: 66: EECON1bits.WREN = 0;
  4374  001B96  94A6               	bcf	4006,2,c	;volatile
  4375  001B98  0012               	return		;funcret
  4376  001B9A                     __end_of_Eeprom_Write_Byte:
  4377                           	opt stack 0
  4378                           tblptru	equ	0xFF8
  4379                           tblptrh	equ	0xFF7
  4380                           tblptrl	equ	0xFF6
  4381                           tablat	equ	0xFF5
  4382                           prodh	equ	0xFF4
  4383                           prodl	equ	0xFF3
  4384                           postinc0	equ	0xFEE
  4385                           wreg	equ	0xFE8
  4386                           indf1	equ	0xFE7
  4387                           postdec1	equ	0xFE5
  4388                           plusw1	equ	0xFE3
  4389                           fsr1h	equ	0xFE2
  4390                           fsr1l	equ	0xFE1
  4391                           indf2	equ	0xFDF
  4392                           postinc2	equ	0xFDE
  4393                           plusw2	equ	0xFDB
  4394                           fsr2h	equ	0xFDA
  4395                           fsr2l	equ	0xFD9
  4396                           status	equ	0xFD8
  4397                           
  4398 ;; *************** function _running_display *****************
  4399 ;; Defined at:
  4400 ;;		line 561 in file "main.c"
  4401 ;; Parameters:    Size  Location     Type
  4402 ;;		None
  4403 ;; Auto vars:     Size  Location     Type
  4404 ;;  n              10   21[BANK0 ] unsigned char [10]
  4405 ;;  second          2   46[BANK0 ] int 
  4406 ;;  minute          2   38[BANK0 ] int 
  4407 ;;  hour            2   19[BANK0 ] int 
  4408 ;;  i               2   40[BANK0 ] int 
  4409 ;;  i               2   32[BANK0 ] int 
  4410 ;;  i               2   44[BANK0 ] int 
  4411 ;;  t               5   14[BANK0 ] unsigned char [5]
  4412 ;;  s               2   42[BANK0 ] int 
  4413 ;;  ms              2   36[BANK0 ] int 
  4414 ;;  n_c             1   35[BANK0 ] unsigned char 
  4415 ;;  is_leading_z    1   34[BANK0 ] unsigned char 
  4416 ;;  exit_running    1   31[BANK0 ] unsigned char 
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  1    wreg      void 
  4419 ;; Registers used:
  4420 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4426 ;;      Params:         0       0       0       0       0       0       0
  4427 ;;      Locals:         0      34       0       0       0       0       0
  4428 ;;      Temps:          3       0       0       0       0       0       0
  4429 ;;      Totals:         3      34       0       0       0       0       0
  4430 ;;Total ram usage:       37 bytes
  4431 ;; Hardware stack levels used:    1
  4432 ;; Hardware stack levels required when called:    5
  4433 ;; This function calls:
  4434 ;;		_Lcd_Clear
  4435 ;;		_Lcd_Set_Cursor
  4436 ;;		_Lcd_Write_Char
  4437 ;;		_Lcd_Write_String
  4438 ;;		___awdiv
  4439 ;;		___awmod
  4440 ;;		_menu_progress_bar
  4441 ;;		_read_keypad
  4442 ;; This function is called by:
  4443 ;;		_main
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           	psect	text4
  4448  0010D0                     __ptext4:
  4449                           	opt stack 0
  4450  0010D0                     _running_display:
  4451                           	opt stack 25
  4452                           
  4453                           ;main.c: 563: PORTDbits.RD7 = 1;
  4454                           
  4455                           ;incstack = 0
  4456  0010D0  8E83               	bsf	3971,7,c	;volatile
  4457                           
  4458                           ;main.c: 564: unsigned char exit_running = 0x00;
  4459  0010D2  0E00               	movlw	0
  4460  0010D4  0100               	movlb	0	; () banked
  4461  0010D6  6F7F               	movwf	running_display@exit_running& (0+255),b
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;main.c: 565: Lcd_Clear();
  4465  0010D8  ECCD  F00D         	call	_Lcd_Clear	;wreg free
  4466                           
  4467                           ;main.c: 566: Lcd_Set_Cursor(1,1);
  4468  0010DC  0E01               	movlw	1
  4469  0010DE  6E12               	movwf	Lcd_Set_Cursor@b,c
  4470  0010E0  0E01               	movlw	1
  4471  0010E2  ECFE  F00C         	call	_Lcd_Set_Cursor
  4472                           
  4473                           ;main.c: 567: unsigned char is_leading_zero = 1, n_c = 0;
  4474  0010E6  0E01               	movlw	1
  4475  0010E8  0100               	movlb	0	; () banked
  4476  0010EA  6F82               	movwf	running_display@is_leading_zero& (0+255),b
  4477                           
  4478                           ; BSR set to: 0
  4479  0010EC  0E00               	movlw	0
  4480  0010EE  0100               	movlb	0	; () banked
  4481  0010F0  6F83               	movwf	running_display@n_c& (0+255),b
  4482                           
  4483                           ; BSR set to: 0
  4484                           ;main.c: 568: for (int i = 0; i < 9; i++)
  4485  0010F2  0E00               	movlw	0
  4486  0010F4  0100               	movlb	0	; () banked
  4487  0010F6  6F8D               	movwf	(running_display@i+1)& (0+255),b
  4488  0010F8  0E00               	movlw	0
  4489  0010FA  6F8C               	movwf	running_display@i& (0+255),b
  4490  0010FC                     l4342:
  4491                           
  4492                           ; BSR set to: 0
  4493  0010FC  0100               	movlb	0	; () banked
  4494  0010FE  BF8D               	btfsc	(running_display@i+1)& (0+255),7,b
  4495  001100  D008               	goto	l4346
  4496  001102  0100               	movlb	0	; () banked
  4497  001104  518D               	movf	(running_display@i+1)& (0+255),w,b
  4498  001106  E12A               	bnz	l4364
  4499  001108  0E09               	movlw	9
  4500  00110A  0100               	movlb	0	; () banked
  4501  00110C  5D8C               	subwf	running_display@i& (0+255),w,b
  4502  00110E  B0D8               	btfsc	status,0,c
  4503  001110  D025               	goto	l4364
  4504  001112                     l4346:
  4505                           
  4506                           ; BSR set to: 0
  4507                           ;main.c: 569: {
  4508                           ;main.c: 570: if ((current_user[i] == '0')&&(is_leading_zero))
  4509  001112  0ED3               	movlw	low _current_user
  4510  001114  0100               	movlb	0	; () banked
  4511  001116  258C               	addwf	running_display@i& (0+255),w,b
  4512  001118  6ED9               	movwf	fsr2l,c
  4513  00111A  0E00               	movlw	high _current_user
  4514  00111C  0100               	movlb	0	; () banked
  4515  00111E  218D               	addwfc	(running_display@i+1)& (0+255),w,b
  4516  001120  6EDA               	movwf	fsr2h,c
  4517  001122  0E30               	movlw	48
  4518  001124  18DE               	xorwf	postinc2,w,c
  4519  001126  A4D8               	btfss	status,2,c
  4520  001128  D005               	goto	l4354
  4521                           
  4522                           ; BSR set to: 0
  4523  00112A  0100               	movlb	0	; () banked
  4524  00112C  5182               	movf	running_display@is_leading_zero& (0+255),w,b
  4525  00112E  0100               	movlb	0	; () banked
  4526  001130  A4D8               	btfss	status,2,c
  4527  001132  D010               	goto	l4360
  4528  001134                     l4354:
  4529                           
  4530                           ; BSR set to: 0
  4531                           ;main.c: 572: else
  4532                           ;main.c: 573: {
  4533                           ;main.c: 574: is_leading_zero = 0;
  4534  001134  0E00               	movlw	0
  4535  001136  0100               	movlb	0	; () banked
  4536  001138  6F82               	movwf	running_display@is_leading_zero& (0+255),b
  4537                           
  4538                           ; BSR set to: 0
  4539                           ;main.c: 575: n_c++;
  4540  00113A  0100               	movlb	0	; () banked
  4541  00113C  2B83               	incf	running_display@n_c& (0+255),f,b
  4542                           
  4543                           ; BSR set to: 0
  4544                           ;main.c: 576: Lcd_Write_Char(current_user[i]);
  4545  00113E  0ED3               	movlw	low _current_user
  4546  001140  0100               	movlb	0	; () banked
  4547  001142  258C               	addwf	running_display@i& (0+255),w,b
  4548  001144  6ED9               	movwf	fsr2l,c
  4549  001146  0E00               	movlw	high _current_user
  4550  001148  0100               	movlb	0	; () banked
  4551  00114A  218D               	addwfc	(running_display@i+1)& (0+255),w,b
  4552  00114C  6EDA               	movwf	fsr2h,c
  4553  00114E  50DF               	movf	indf2,w,c
  4554  001150  EC62  F00D         	call	_Lcd_Write_Char
  4555  001154                     l4360:
  4556  001154  0100               	movlb	0	; () banked
  4557  001156  4B8C               	infsnz	running_display@i& (0+255),f,b
  4558  001158  2B8D               	incf	(running_display@i+1)& (0+255),f,b
  4559  00115A  D7D0               	goto	l4342
  4560  00115C                     l4364:
  4561                           
  4562                           ; BSR set to: 0
  4563                           ;main.c: 577: }
  4564                           ;main.c: 578: }
  4565                           ;main.c: 579: for (int i = 0; i < 13 - n_c; i++)
  4566  00115C  0E00               	movlw	0
  4567  00115E  0100               	movlb	0	; () banked
  4568  001160  6F81               	movwf	(running_display@i_916+1)& (0+255),b
  4569  001162  0E00               	movlw	0
  4570  001164  6F80               	movwf	running_display@i_916& (0+255),b
  4571  001166  D006               	goto	l4370
  4572  001168                     l4366:
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;main.c: 580: Lcd_Write_Char(' ');
  4576  001168  0E20               	movlw	32
  4577  00116A  EC62  F00D         	call	_Lcd_Write_Char
  4578  00116E  0100               	movlb	0	; () banked
  4579  001170  4B80               	infsnz	running_display@i_916& (0+255),f,b
  4580  001172  2B81               	incf	(running_display@i_916+1)& (0+255),f,b
  4581  001174                     l4370:
  4582                           
  4583                           ; BSR set to: 0
  4584  001174  0100               	movlb	0	; () banked
  4585  001176  5183               	movf	running_display@n_c& (0+255),w,b
  4586  001178  6E23               	movwf	??_running_display& (0+255),c
  4587  00117A  6A24               	clrf	(??_running_display+1)& (0+255),c
  4588  00117C  1E23               	comf	??_running_display,f,c
  4589  00117E  1E24               	comf	??_running_display+1,f,c
  4590  001180  4A23               	infsnz	??_running_display,f,c
  4591  001182  2A24               	incf	??_running_display+1,f,c
  4592  001184  0E0D               	movlw	13
  4593  001186  2623               	addwf	??_running_display,f,c
  4594  001188  0E00               	movlw	0
  4595  00118A  2224               	addwfc	??_running_display+1,f,c
  4596  00118C  5023               	movf	??_running_display,w,c
  4597  00118E  0100               	movlb	0	; () banked
  4598  001190  5D80               	subwf	running_display@i_916& (0+255),w,b
  4599  001192  0100               	movlb	0	; () banked
  4600  001194  5181               	movf	(running_display@i_916+1)& (0+255),w,b
  4601  001196  0A80               	xorlw	128
  4602  001198  6E25               	movwf	(??_running_display+2)& (0+255),c
  4603  00119A  5024               	movf	??_running_display+1,w,c
  4604  00119C  0A80               	xorlw	128
  4605  00119E  5825               	subwfb	(??_running_display+2)& (0+255),w,c
  4606  0011A0  A0D8               	btfss	status,0,c
  4607  0011A2  D7E2               	goto	l4366
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;main.c: 581: Lcd_Set_Cursor(2,1);
  4611                           
  4612                           ; BSR set to: 0
  4613  0011A4  0E01               	movlw	1
  4614  0011A6  6E12               	movwf	Lcd_Set_Cursor@b,c
  4615  0011A8  0E02               	movlw	2
  4616  0011AA  ECFE  F00C         	call	_Lcd_Set_Cursor
  4617                           
  4618                           ;main.c: 582: for (int i = 0; i < 16; i++)
  4619  0011AE  0E00               	movlw	0
  4620  0011B0  0100               	movlb	0	; () banked
  4621  0011B2  6F89               	movwf	(running_display@i_917+1)& (0+255),b
  4622  0011B4  0E00               	movlw	0
  4623  0011B6  6F88               	movwf	running_display@i_917& (0+255),b
  4624  0011B8                     l4376:
  4625                           
  4626                           ; BSR set to: 0
  4627  0011B8  0100               	movlb	0	; () banked
  4628  0011BA  BF89               	btfsc	(running_display@i_917+1)& (0+255),7,b
  4629  0011BC  D008               	goto	l4380
  4630  0011BE  0100               	movlb	0	; () banked
  4631  0011C0  5189               	movf	(running_display@i_917+1)& (0+255),w,b
  4632  0011C2  E114               	bnz	l4386
  4633  0011C4  0E10               	movlw	16
  4634  0011C6  0100               	movlb	0	; () banked
  4635  0011C8  5D88               	subwf	running_display@i_917& (0+255),w,b
  4636  0011CA  B0D8               	btfsc	status,0,c
  4637  0011CC  D00F               	goto	l4386
  4638  0011CE                     l4380:
  4639                           
  4640                           ; BSR set to: 0
  4641                           ;main.c: 583: Lcd_Write_Char(logged_user[i]);
  4642  0011CE  0EBA               	movlw	low _logged_user
  4643  0011D0  0100               	movlb	0	; () banked
  4644  0011D2  2588               	addwf	running_display@i_917& (0+255),w,b
  4645  0011D4  6ED9               	movwf	fsr2l,c
  4646  0011D6  0E00               	movlw	high _logged_user
  4647  0011D8  0100               	movlb	0	; () banked
  4648  0011DA  2189               	addwfc	(running_display@i_917+1)& (0+255),w,b
  4649  0011DC  6EDA               	movwf	fsr2h,c
  4650  0011DE  50DF               	movf	indf2,w,c
  4651  0011E0  EC62  F00D         	call	_Lcd_Write_Char
  4652  0011E4  0100               	movlb	0	; () banked
  4653  0011E6  4B88               	infsnz	running_display@i_917& (0+255),f,b
  4654  0011E8  2B89               	incf	(running_display@i_917+1)& (0+255),f,b
  4655  0011EA  D7E6               	goto	l4376
  4656  0011EC                     l4386:
  4657                           
  4658                           ; BSR set to: 0
  4659                           ;main.c: 585: Lcd_Set_Cursor(1,12);
  4660  0011EC  0E0C               	movlw	12
  4661  0011EE  6E12               	movwf	Lcd_Set_Cursor@b,c
  4662  0011F0  0E01               	movlw	1
  4663  0011F2  ECFE  F00C         	call	_Lcd_Set_Cursor
  4664                           
  4665                           ;main.c: 586: Lcd_Write_String("00:00");
  4666  0011F6  0EEC               	movlw	low STR_29
  4667  0011F8  6E14               	movwf	Lcd_Write_String@a,c
  4668  0011FA  0E7F               	movlw	high STR_29
  4669  0011FC  6E15               	movwf	Lcd_Write_String@a+1,c
  4670  0011FE  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  4671                           
  4672                           ;main.c: 587: int s = login_timeout, ms = 0;
  4673  001202  C0B8  F08A         	movff	_login_timeout,running_display@s
  4674  001206  C0B9  F08B         	movff	_login_timeout+1,running_display@s+1
  4675  00120A  0E00               	movlw	0
  4676  00120C  0100               	movlb	0	; () banked
  4677  00120E  6F85               	movwf	(running_display@ms+1)& (0+255),b
  4678  001210  0E00               	movlw	0
  4679  001212  6F84               	movwf	running_display@ms& (0+255),b
  4680                           
  4681                           ; BSR set to: 0
  4682                           ;main.c: 588: char t[] = {'0', '0', ':', '0', '0'};
  4683  001214  EE20  F0B0         	lfsr	2,running_display@F3743
  4684  001218  EE10  F06E         	lfsr	1,running_display@t
  4685  00121C  0E04               	movlw	4
  4686  00121E                     u4161:
  4687  00121E  CFDB FFE3          	movff	plusw2,plusw1
  4688  001222  06E8               	decf	wreg,f,c
  4689  001224  E2FC               	bc	u4161
  4690                           
  4691                           ;main.c: 589: while (read_keypad() != '#')
  4692  001226  D0B5               	goto	l4430
  4693  001228                     l4396:
  4694                           
  4695                           ;main.c: 590: {
  4696                           ;main.c: 591: if (s == 0)
  4697  001228  0100               	movlb	0	; () banked
  4698  00122A  518A               	movf	running_display@s& (0+255),w,b
  4699  00122C  0100               	movlb	0	; () banked
  4700  00122E  118B               	iorwf	(running_display@s+1)& (0+255),w,b
  4701  001230  B4D8               	btfsc	status,2,c
  4702  001232  D0B4               	goto	l4432
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;main.c: 593: _delay((unsigned long)((265)*(16000000/4000000.0)));
  4706                           
  4707                           ; BSR set to: 0
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;main.c: 592: break;
  4711  001234  0ED4               	movlw	212
  4712  001236                     u4817:
  4713  001236  F000 F000          	nop2	
  4714  00123A  2EE8               	decfsz	wreg,f,c
  4715  00123C  D7FC               	goto	u4817
  4716                           
  4717                           ;main.c: 594: ms += 1;
  4718  00123E  0100               	movlb	0	; () banked
  4719  001240  4B84               	infsnz	running_display@ms& (0+255),f,b
  4720  001242  2B85               	incf	(running_display@ms+1)& (0+255),f,b
  4721                           
  4722                           ;main.c: 595: if (ms == 1000)
  4723  001244  0EE8               	movlw	232
  4724  001246  0100               	movlb	0	; () banked
  4725  001248  1984               	xorwf	running_display@ms& (0+255),w,b
  4726  00124A  E104               	bnz	u4181
  4727  00124C  0E03               	movlw	3
  4728  00124E  0100               	movlb	0	; () banked
  4729  001250  1985               	xorwf	(running_display@ms+1)& (0+255),w,b
  4730  001252  A4D8               	btfss	status,2,c
  4731  001254                     u4181:
  4732  001254  D09E               	goto	l4430
  4733                           
  4734                           ; BSR set to: 0
  4735                           ;main.c: 596: {
  4736                           ;main.c: 597: s -= 1;
  4737  001256  0100               	movlb	0	; () banked
  4738  001258  078A               	decf	running_display@s& (0+255),f,b
  4739  00125A  A0D8               	btfss	status,0,c
  4740  00125C  078B               	decf	(running_display@s+1)& (0+255),f,b
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;main.c: 598: ms = 0;
  4744  00125E  0E00               	movlw	0
  4745  001260  0100               	movlb	0	; () banked
  4746  001262  6F85               	movwf	(running_display@ms+1)& (0+255),b
  4747  001264  0E00               	movlw	0
  4748  001266  6F84               	movwf	running_display@ms& (0+255),b
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;main.c: 600: char n[] = {'0','1','2','3','4','5','6','7','8','9'};
  4752  001268  EE20  F0A6         	lfsr	2,running_display@F3746
  4753  00126C  EE10  F075         	lfsr	1,running_display@n
  4754  001270  0E09               	movlw	9
  4755  001272                     u4191:
  4756  001272  CFDB FFE3          	movff	plusw2,plusw1
  4757  001276  06E8               	decf	wreg,f,c
  4758  001278  E2FC               	bc	u4191
  4759                           
  4760                           ; BSR set to: 0
  4761                           ;main.c: 601: int hour=s/3600;
  4762  00127A  C08A  F010         	movff	running_display@s,___awdiv@dividend
  4763  00127E  C08B  F011         	movff	running_display@s+1,___awdiv@dividend+1
  4764  001282  0E0E               	movlw	14
  4765  001284  6E13               	movwf	___awdiv@divisor+1,c
  4766  001286  0E10               	movlw	16
  4767  001288  6E12               	movwf	___awdiv@divisor,c
  4768  00128A  EC7C  F00B         	call	___awdiv	;wreg free
  4769  00128E  C010  F073         	movff	?___awdiv,running_display@hour
  4770  001292  C011  F074         	movff	?___awdiv+1,running_display@hour+1
  4771                           
  4772                           ;main.c: 602: int second=s % 3600;
  4773  001296  C08A  F010         	movff	running_display@s,___awmod@dividend
  4774  00129A  C08B  F011         	movff	running_display@s+1,___awmod@dividend+1
  4775  00129E  0E0E               	movlw	14
  4776  0012A0  6E13               	movwf	___awmod@divisor+1,c
  4777  0012A2  0E10               	movlw	16
  4778  0012A4  6E12               	movwf	___awmod@divisor,c
  4779  0012A6  EC72  F00C         	call	___awmod	;wreg free
  4780  0012AA  C010  F08E         	movff	?___awmod,running_display@second
  4781  0012AE  C011  F08F         	movff	?___awmod+1,running_display@second+1
  4782                           
  4783                           ;main.c: 603: int minute=second/60;
  4784  0012B2  C08E  F010         	movff	running_display@second,___awdiv@dividend
  4785  0012B6  C08F  F011         	movff	running_display@second+1,___awdiv@dividend+1
  4786  0012BA  0E00               	movlw	0
  4787  0012BC  6E13               	movwf	___awdiv@divisor+1,c
  4788  0012BE  0E3C               	movlw	60
  4789  0012C0  6E12               	movwf	___awdiv@divisor,c
  4790  0012C2  EC7C  F00B         	call	___awdiv	;wreg free
  4791  0012C6  C010  F086         	movff	?___awdiv,running_display@minute
  4792  0012CA  C011  F087         	movff	?___awdiv+1,running_display@minute+1
  4793                           
  4794                           ;main.c: 604: second %= 60;
  4795  0012CE  C08E  F010         	movff	running_display@second,___awmod@dividend
  4796  0012D2  C08F  F011         	movff	running_display@second+1,___awmod@dividend+1
  4797  0012D6  0E00               	movlw	0
  4798  0012D8  6E13               	movwf	___awmod@divisor+1,c
  4799  0012DA  0E3C               	movlw	60
  4800  0012DC  6E12               	movwf	___awmod@divisor,c
  4801  0012DE  EC72  F00C         	call	___awmod	;wreg free
  4802  0012E2  C010  F08E         	movff	?___awmod,running_display@second
  4803  0012E6  C011  F08F         	movff	?___awmod+1,running_display@second+1
  4804                           
  4805                           ;main.c: 605: Lcd_Set_Cursor(1,12);
  4806  0012EA  0E0C               	movlw	12
  4807  0012EC  6E12               	movwf	Lcd_Set_Cursor@b,c
  4808  0012EE  0E01               	movlw	1
  4809  0012F0  ECFE  F00C         	call	_Lcd_Set_Cursor
  4810                           
  4811                           ;main.c: 606: Lcd_Write_Char(n[minute/10]);
  4812  0012F4  C086  F010         	movff	running_display@minute,___awdiv@dividend
  4813  0012F8  C087  F011         	movff	running_display@minute+1,___awdiv@dividend+1
  4814  0012FC  0E00               	movlw	0
  4815  0012FE  6E13               	movwf	___awdiv@divisor+1,c
  4816  001300  0E0A               	movlw	10
  4817  001302  6E12               	movwf	___awdiv@divisor,c
  4818  001304  EC7C  F00B         	call	___awdiv	;wreg free
  4819  001308  0E75               	movlw	low running_display@n
  4820  00130A  2410               	addwf	?___awdiv,w,c
  4821  00130C  6ED9               	movwf	fsr2l,c
  4822  00130E  0E00               	movlw	high running_display@n
  4823  001310  2011               	addwfc	?___awdiv+1,w,c
  4824  001312  6EDA               	movwf	fsr2h,c
  4825  001314  50DF               	movf	indf2,w,c
  4826  001316  EC62  F00D         	call	_Lcd_Write_Char
  4827                           
  4828                           ;main.c: 607: Lcd_Write_Char(n[minute%10]);
  4829  00131A  C086  F010         	movff	running_display@minute,___awmod@dividend
  4830  00131E  C087  F011         	movff	running_display@minute+1,___awmod@dividend+1
  4831  001322  0E00               	movlw	0
  4832  001324  6E13               	movwf	___awmod@divisor+1,c
  4833  001326  0E0A               	movlw	10
  4834  001328  6E12               	movwf	___awmod@divisor,c
  4835  00132A  EC72  F00C         	call	___awmod	;wreg free
  4836  00132E  0E75               	movlw	low running_display@n
  4837  001330  2410               	addwf	?___awmod,w,c
  4838  001332  6ED9               	movwf	fsr2l,c
  4839  001334  0E00               	movlw	high running_display@n
  4840  001336  2011               	addwfc	?___awmod+1,w,c
  4841  001338  6EDA               	movwf	fsr2h,c
  4842  00133A  50DF               	movf	indf2,w,c
  4843  00133C  EC62  F00D         	call	_Lcd_Write_Char
  4844                           
  4845                           ;main.c: 608: Lcd_Write_Char(':');
  4846  001340  0E3A               	movlw	58
  4847  001342  EC62  F00D         	call	_Lcd_Write_Char
  4848                           
  4849                           ;main.c: 609: Lcd_Write_Char(n[second/10]);
  4850  001346  C08E  F010         	movff	running_display@second,___awdiv@dividend
  4851  00134A  C08F  F011         	movff	running_display@second+1,___awdiv@dividend+1
  4852  00134E  0E00               	movlw	0
  4853  001350  6E13               	movwf	___awdiv@divisor+1,c
  4854  001352  0E0A               	movlw	10
  4855  001354  6E12               	movwf	___awdiv@divisor,c
  4856  001356  EC7C  F00B         	call	___awdiv	;wreg free
  4857  00135A  0E75               	movlw	low running_display@n
  4858  00135C  2410               	addwf	?___awdiv,w,c
  4859  00135E  6ED9               	movwf	fsr2l,c
  4860  001360  0E00               	movlw	high running_display@n
  4861  001362  2011               	addwfc	?___awdiv+1,w,c
  4862  001364  6EDA               	movwf	fsr2h,c
  4863  001366  50DF               	movf	indf2,w,c
  4864  001368  EC62  F00D         	call	_Lcd_Write_Char
  4865                           
  4866                           ;main.c: 610: Lcd_Write_Char(n[second%10]);
  4867  00136C  C08E  F010         	movff	running_display@second,___awmod@dividend
  4868  001370  C08F  F011         	movff	running_display@second+1,___awmod@dividend+1
  4869  001374  0E00               	movlw	0
  4870  001376  6E13               	movwf	___awmod@divisor+1,c
  4871  001378  0E0A               	movlw	10
  4872  00137A  6E12               	movwf	___awmod@divisor,c
  4873  00137C  EC72  F00C         	call	___awmod	;wreg free
  4874  001380  0E75               	movlw	low running_display@n
  4875  001382  2410               	addwf	?___awmod,w,c
  4876  001384  6ED9               	movwf	fsr2l,c
  4877  001386  0E00               	movlw	high running_display@n
  4878  001388  2011               	addwfc	?___awmod+1,w,c
  4879  00138A  6EDA               	movwf	fsr2h,c
  4880  00138C  50DF               	movf	indf2,w,c
  4881  00138E  EC62  F00D         	call	_Lcd_Write_Char
  4882  001392                     l4430:
  4883  001392  EC2A  F00B         	call	_read_keypad	;wreg free
  4884  001396  0A23               	xorlw	35
  4885  001398  A4D8               	btfss	status,2,c
  4886  00139A  D746               	goto	l4396
  4887  00139C                     l4432:
  4888                           
  4889                           ;main.c: 611: }
  4890                           ;main.c: 612: }
  4891                           ;main.c: 613: Lcd_Clear();
  4892  00139C  ECCD  F00D         	call	_Lcd_Clear	;wreg free
  4893                           
  4894                           ;main.c: 614: Lcd_Set_Cursor(1,1);
  4895  0013A0  0E01               	movlw	1
  4896  0013A2  6E12               	movwf	Lcd_Set_Cursor@b,c
  4897  0013A4  0E01               	movlw	1
  4898  0013A6  ECFE  F00C         	call	_Lcd_Set_Cursor
  4899                           
  4900                           ;main.c: 615: Lcd_Write_String("Logging you out.");
  4901  0013AA  0E75               	movlw	low STR_30
  4902  0013AC  6E14               	movwf	Lcd_Write_String@a,c
  4903  0013AE  0E7F               	movlw	high STR_30
  4904  0013B0  6E15               	movwf	Lcd_Write_String@a+1,c
  4905  0013B2  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  4906                           
  4907                           ;main.c: 616: menu_progress_bar(200);
  4908  0013B6  0E00               	movlw	0
  4909  0013B8  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  4910  0013BA  0EC8               	movlw	200
  4911  0013BC  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  4912  0013BE  ECE3  F009         	call	_menu_progress_bar	;wreg free
  4913                           
  4914                           ;main.c: 617: PORTDbits.RD7 = 0;
  4915  0013C2  9E83               	bcf	3971,7,c	;volatile
  4916  0013C4  0012               	return	
  4917  0013C6                     __end_of_running_display:
  4918                           	opt stack 0
  4919                           tblptru	equ	0xFF8
  4920                           tblptrh	equ	0xFF7
  4921                           tblptrl	equ	0xFF6
  4922                           tablat	equ	0xFF5
  4923                           prodh	equ	0xFF4
  4924                           prodl	equ	0xFF3
  4925                           postinc0	equ	0xFEE
  4926                           wreg	equ	0xFE8
  4927                           indf1	equ	0xFE7
  4928                           postdec1	equ	0xFE5
  4929                           plusw1	equ	0xFE3
  4930                           fsr1h	equ	0xFE2
  4931                           fsr1l	equ	0xFE1
  4932                           indf2	equ	0xFDF
  4933                           postinc2	equ	0xFDE
  4934                           plusw2	equ	0xFDB
  4935                           fsr2h	equ	0xFDA
  4936                           fsr2l	equ	0xFD9
  4937                           status	equ	0xFD8
  4938                           
  4939 ;; *************** function _read_keypad *****************
  4940 ;; Defined at:
  4941 ;;		line 275 in file "main.c"
  4942 ;; Parameters:    Size  Location     Type
  4943 ;;		None
  4944 ;; Auto vars:     Size  Location     Type
  4945 ;;		None
  4946 ;; Return value:  Size  Location     Type
  4947 ;;                  1    wreg      unsigned char 
  4948 ;; Registers used:
  4949 ;;		wreg, status,2
  4950 ;; Tracked objects:
  4951 ;;		On entry : 0/0
  4952 ;;		On exit  : 0/0
  4953 ;;		Unchanged: 0/0
  4954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4955 ;;      Params:         0       0       0       0       0       0       0
  4956 ;;      Locals:         0       0       0       0       0       0       0
  4957 ;;      Temps:          0       0       0       0       0       0       0
  4958 ;;      Totals:         0       0       0       0       0       0       0
  4959 ;;Total ram usage:        0 bytes
  4960 ;; Hardware stack levels used:    1
  4961 ;; Hardware stack levels required when called:    1
  4962 ;; This function calls:
  4963 ;;		Nothing
  4964 ;; This function is called by:
  4965 ;;		_main
  4966 ;;		_latch_keypad
  4967 ;;		_start_routine
  4968 ;;		_running_display
  4969 ;; This function uses a non-reentrant model
  4970 ;;
  4971                           
  4972                           	psect	text5
  4973  001654                     __ptext5:
  4974                           	opt stack 0
  4975  001654                     _read_keypad:
  4976                           	opt stack 28
  4977                           
  4978                           ;main.c: 277: TRISB = 0b01111000;
  4979                           
  4980                           ;incstack = 0
  4981  001654  0E78               	movlw	120
  4982  001656  6E93               	movwf	3987,c	;volatile
  4983                           
  4984                           ;main.c: 278: PORTB = 0b00000001;
  4985  001658  0E01               	movlw	1
  4986  00165A  6E81               	movwf	3969,c	;volatile
  4987                           
  4988                           ;main.c: 280: if (PORTBbits.RB6) {PORTB = 0x00; return '*';}
  4989  00165C  AC81               	btfss	3969,6,c	;volatile
  4990  00165E  D004               	goto	l256
  4991  001660  0E00               	movlw	0
  4992  001662  6E81               	movwf	3969,c	;volatile
  4993  001664  0E2A               	movlw	42
  4994  001666  0012               	return	
  4995  001668                     l256:
  4996                           
  4997                           ;main.c: 281: if (PORTBbits.RB3) {PORTB = 0x00; return '1';}
  4998  001668  A681               	btfss	3969,3,c	;volatile
  4999  00166A  D004               	goto	l258
  5000  00166C  0E00               	movlw	0
  5001  00166E  6E81               	movwf	3969,c	;volatile
  5002  001670  0E31               	movlw	49
  5003  001672  0012               	return	
  5004  001674                     l258:
  5005                           
  5006                           ;main.c: 282: if (PORTBbits.RB4) {PORTB = 0x00; return '4';}
  5007  001674  A881               	btfss	3969,4,c	;volatile
  5008  001676  D004               	goto	l259
  5009  001678  0E00               	movlw	0
  5010  00167A  6E81               	movwf	3969,c	;volatile
  5011  00167C  0E34               	movlw	52
  5012  00167E  0012               	return	
  5013  001680                     l259:
  5014                           
  5015                           ;main.c: 283: if (PORTBbits.RB5) {PORTB = 0x00; return '7';}
  5016  001680  AA81               	btfss	3969,5,c	;volatile
  5017  001682  D004               	goto	l3674
  5018  001684  0E00               	movlw	0
  5019  001686  6E81               	movwf	3969,c	;volatile
  5020  001688  0E37               	movlw	55
  5021  00168A  0012               	return	
  5022  00168C                     l3674:
  5023                           
  5024                           ;main.c: 284: PORTB = 0b00000010;
  5025  00168C  0E02               	movlw	2
  5026  00168E  6E81               	movwf	3969,c	;volatile
  5027                           
  5028                           ;main.c: 286: if (PORTBbits.RB3) {PORTB = 0x00; return '2';}
  5029  001690  A681               	btfss	3969,3,c	;volatile
  5030  001692  D004               	goto	l261
  5031  001694  0E00               	movlw	0
  5032  001696  6E81               	movwf	3969,c	;volatile
  5033  001698  0E32               	movlw	50
  5034  00169A  0012               	return	
  5035  00169C                     l261:
  5036                           
  5037                           ;main.c: 287: if (PORTBbits.RB4) {PORTB = 0x00; return '5';}
  5038  00169C  A881               	btfss	3969,4,c	;volatile
  5039  00169E  D004               	goto	l262
  5040  0016A0  0E00               	movlw	0
  5041  0016A2  6E81               	movwf	3969,c	;volatile
  5042  0016A4  0E35               	movlw	53
  5043  0016A6  0012               	return	
  5044  0016A8                     l262:
  5045                           
  5046                           ;main.c: 288: if (PORTBbits.RB5) {PORTB = 0x00; return '8';}
  5047  0016A8  AA81               	btfss	3969,5,c	;volatile
  5048  0016AA  D004               	goto	l263
  5049  0016AC  0E00               	movlw	0
  5050  0016AE  6E81               	movwf	3969,c	;volatile
  5051  0016B0  0E38               	movlw	56
  5052  0016B2  0012               	return	
  5053  0016B4                     l263:
  5054                           
  5055                           ;main.c: 289: if (PORTBbits.RB6) {PORTB = 0x00; return '0';}
  5056  0016B4  AC81               	btfss	3969,6,c	;volatile
  5057  0016B6  D004               	goto	l3702
  5058  0016B8  0E00               	movlw	0
  5059  0016BA  6E81               	movwf	3969,c	;volatile
  5060  0016BC  0E30               	movlw	48
  5061  0016BE  0012               	return	
  5062  0016C0                     l3702:
  5063                           
  5064                           ;main.c: 290: PORTB = 0b00000100;
  5065  0016C0  0E04               	movlw	4
  5066  0016C2  6E81               	movwf	3969,c	;volatile
  5067                           
  5068                           ;main.c: 292: if (PORTBbits.RB3) {PORTB = 0x00; return '3';}
  5069  0016C4  A681               	btfss	3969,3,c	;volatile
  5070  0016C6  D004               	goto	l265
  5071  0016C8  0E00               	movlw	0
  5072  0016CA  6E81               	movwf	3969,c	;volatile
  5073  0016CC  0E33               	movlw	51
  5074  0016CE  0012               	return	
  5075  0016D0                     l265:
  5076                           
  5077                           ;main.c: 293: if (PORTBbits.RB4) {PORTB = 0x00; return '6';}
  5078  0016D0  A881               	btfss	3969,4,c	;volatile
  5079  0016D2  D004               	goto	l266
  5080  0016D4  0E00               	movlw	0
  5081  0016D6  6E81               	movwf	3969,c	;volatile
  5082  0016D8  0E36               	movlw	54
  5083  0016DA  0012               	return	
  5084  0016DC                     l266:
  5085                           
  5086                           ;main.c: 294: if (PORTBbits.RB5) {PORTB = 0x00; return '9';}
  5087  0016DC  AA81               	btfss	3969,5,c	;volatile
  5088  0016DE  D004               	goto	l267
  5089  0016E0  0E00               	movlw	0
  5090  0016E2  6E81               	movwf	3969,c	;volatile
  5091  0016E4  0E39               	movlw	57
  5092  0016E6  0012               	return	
  5093  0016E8                     l267:
  5094                           
  5095                           ;main.c: 295: if (PORTBbits.RB6) {PORTB = 0x00; return '#';}
  5096  0016E8  AC81               	btfss	3969,6,c	;volatile
  5097  0016EA  D004               	goto	l3730
  5098  0016EC  0E00               	movlw	0
  5099  0016EE  6E81               	movwf	3969,c	;volatile
  5100  0016F0  0E23               	movlw	35
  5101  0016F2  0012               	return	
  5102  0016F4                     l3730:
  5103                           
  5104                           ;main.c: 296: return '_';
  5105  0016F4  0E5F               	movlw	95
  5106  0016F6  0012               	return	
  5107  0016F8                     __end_of_read_keypad:
  5108                           	opt stack 0
  5109                           tblptru	equ	0xFF8
  5110                           tblptrh	equ	0xFF7
  5111                           tblptrl	equ	0xFF6
  5112                           tablat	equ	0xFF5
  5113                           prodh	equ	0xFF4
  5114                           prodl	equ	0xFF3
  5115                           postinc0	equ	0xFEE
  5116                           wreg	equ	0xFE8
  5117                           indf1	equ	0xFE7
  5118                           postdec1	equ	0xFE5
  5119                           plusw1	equ	0xFE3
  5120                           fsr1h	equ	0xFE2
  5121                           fsr1l	equ	0xFE1
  5122                           indf2	equ	0xFDF
  5123                           postinc2	equ	0xFDE
  5124                           plusw2	equ	0xFDB
  5125                           fsr2h	equ	0xFDA
  5126                           fsr2l	equ	0xFD9
  5127                           status	equ	0xFD8
  5128                           
  5129 ;; *************** function _menu_progress_bar *****************
  5130 ;; Defined at:
  5131 ;;		line 84 in file "menu.h"
  5132 ;; Parameters:    Size  Location     Type
  5133 ;;  load_time_ms    2   28[COMRAM] unsigned short 
  5134 ;; Auto vars:     Size  Location     Type
  5135 ;;  ii              2    4[BANK0 ] int 
  5136 ;;  i               2   12[BANK0 ] int 
  5137 ;;  i               2   10[BANK0 ] int 
  5138 ;;  i               2    8[BANK0 ] int 
  5139 ;;  i               2    6[BANK0 ] int 
  5140 ;;  d               4    0[BANK0 ] unsigned long 
  5141 ;; Return value:  Size  Location     Type
  5142 ;;                  1    wreg      void 
  5143 ;; Registers used:
  5144 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/0
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5150 ;;      Params:         2       0       0       0       0       0       0
  5151 ;;      Locals:         0      14       0       0       0       0       0
  5152 ;;      Temps:          4       0       0       0       0       0       0
  5153 ;;      Totals:         6      14       0       0       0       0       0
  5154 ;;Total ram usage:       20 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; Hardware stack levels required when called:    4
  5157 ;; This function calls:
  5158 ;;		_Lcd_Clear
  5159 ;;		_Lcd_Set_Cursor
  5160 ;;		_Lcd_Write_Char
  5161 ;;		_Lcd_Write_String
  5162 ;;		___lwdiv
  5163 ;;		___wmul
  5164 ;; This function is called by:
  5165 ;;		_main
  5166 ;;		_start_routine
  5167 ;;		_running_display
  5168 ;; This function uses a non-reentrant model
  5169 ;;
  5170                           
  5171                           	psect	text6
  5172  0013C6                     __ptext6:
  5173                           	opt stack 0
  5174  0013C6                     _menu_progress_bar:
  5175                           	opt stack 25
  5176                           
  5177                           ;menu.h: 86: Lcd_Set_Cursor(2,1);
  5178                           
  5179                           ;incstack = 0
  5180  0013C6  0E01               	movlw	1
  5181  0013C8  6E12               	movwf	Lcd_Set_Cursor@b,c
  5182  0013CA  0E02               	movlw	2
  5183  0013CC  ECFE  F00C         	call	_Lcd_Set_Cursor
  5184                           
  5185                           ;menu.h: 87: unsigned long d = (((load_time_ms/16)/20)*20);
  5186  0013D0  0E00               	movlw	0
  5187  0013D2  6E13               	movwf	___lwdiv@divisor+1,c
  5188  0013D4  0E14               	movlw	20
  5189  0013D6  6E12               	movwf	___lwdiv@divisor,c
  5190  0013D8  C01D  F01F         	movff	menu_progress_bar@load_time_ms,??_menu_progress_bar
  5191  0013DC  C01E  F020         	movff	menu_progress_bar@load_time_ms+1,??_menu_progress_bar+1
  5192  0013E0  0E04               	movlw	4
  5193  0013E2  6E21               	movwf	(??_menu_progress_bar+2)& (0+255),c
  5194  0013E4                     u3435:
  5195  0013E4  90D8               	bcf	status,0,c
  5196  0013E6  3220               	rrcf	??_menu_progress_bar+1,f,c
  5197  0013E8  321F               	rrcf	??_menu_progress_bar,f,c
  5198  0013EA  2E21               	decfsz	(??_menu_progress_bar+2)& (0+255),f,c
  5199  0013EC  D7FB               	goto	u3435
  5200  0013EE  C01F  F010         	movff	??_menu_progress_bar,___lwdiv@dividend
  5201  0013F2  C020  F011         	movff	??_menu_progress_bar+1,___lwdiv@dividend+1
  5202  0013F6  ECD5  F00C         	call	___lwdiv	;wreg free
  5203  0013FA  C010  F017         	movff	?___lwdiv,___wmul@multiplier
  5204  0013FE  C011  F018         	movff	?___lwdiv+1,___wmul@multiplier+1
  5205  001402  0E00               	movlw	0
  5206  001404  6E1A               	movwf	___wmul@multiplicand+1,c
  5207  001406  0E14               	movlw	20
  5208  001408  6E19               	movwf	___wmul@multiplicand,c
  5209  00140A  ECA8  F00D         	call	___wmul	;wreg free
  5210  00140E  C017  F060         	movff	?___wmul,menu_progress_bar@d
  5211  001412  C018  F061         	movff	?___wmul+1,menu_progress_bar@d+1
  5212  001416  0100               	movlb	0	; () banked
  5213  001418  6B62               	clrf	(menu_progress_bar@d+2)& (0+255),b
  5214  00141A  6B63               	clrf	(menu_progress_bar@d+3)& (0+255),b
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;menu.h: 88: for (int i = 0; i < 16; i++)
  5218  00141C  0E00               	movlw	0
  5219  00141E  0100               	movlb	0	; () banked
  5220  001420  6F67               	movwf	(menu_progress_bar@i+1)& (0+255),b
  5221  001422  0E00               	movlw	0
  5222  001424  6F66               	movwf	menu_progress_bar@i& (0+255),b
  5223  001426                     l3768:
  5224                           
  5225                           ; BSR set to: 0
  5226  001426  0100               	movlb	0	; () banked
  5227  001428  BF67               	btfsc	(menu_progress_bar@i+1)& (0+255),7,b
  5228  00142A  D008               	goto	l3772
  5229  00142C  0100               	movlb	0	; () banked
  5230  00142E  5167               	movf	(menu_progress_bar@i+1)& (0+255),w,b
  5231  001430  E137               	bnz	l3786
  5232  001432  0E10               	movlw	16
  5233  001434  0100               	movlb	0	; () banked
  5234  001436  5D66               	subwf	menu_progress_bar@i& (0+255),w,b
  5235  001438  B0D8               	btfsc	status,0,c
  5236  00143A  D032               	goto	l3786
  5237  00143C                     l3772:
  5238                           
  5239                           ; BSR set to: 0
  5240                           ;menu.h: 89: {
  5241                           ;menu.h: 90: Lcd_Write_Char(0xFF);
  5242  00143C  0EFF               	movlw	255
  5243  00143E  EC62  F00D         	call	_Lcd_Write_Char
  5244                           
  5245                           ;menu.h: 91: for (int ii = 0; ii < d; ii+=20)
  5246  001442  0E00               	movlw	0
  5247  001444  0100               	movlb	0	; () banked
  5248  001446  6F65               	movwf	(menu_progress_bar@ii+1)& (0+255),b
  5249  001448  0E00               	movlw	0
  5250  00144A  6F64               	movwf	menu_progress_bar@ii& (0+255),b
  5251  00144C  D00E               	goto	l3780
  5252  00144E                     l3776:
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;menu.h: 92: _delay((unsigned long)((20)*(16000000/4000.0)));
  5256  00144E  0E68               	movlw	104
  5257  001450  6E1F               	movwf	??_menu_progress_bar& (0+255),c
  5258  001452  0EE4               	movlw	228
  5259  001454                     u4827:
  5260  001454  2EE8               	decfsz	wreg,f,c
  5261  001456  D7FE               	goto	u4827
  5262  001458  2E1F               	decfsz	??_menu_progress_bar& (0+255),f,c
  5263  00145A  D7FC               	goto	u4827
  5264  00145C  F000 F000          	nop2	
  5265  001460  0E14               	movlw	20
  5266  001462  0100               	movlb	0	; () banked
  5267  001464  2764               	addwf	menu_progress_bar@ii& (0+255),f,b
  5268  001466  0E00               	movlw	0
  5269  001468  2365               	addwfc	(menu_progress_bar@ii+1)& (0+255),f,b
  5270  00146A                     l3780:
  5271                           
  5272                           ; BSR set to: 0
  5273  00146A  C064  F01F         	movff	menu_progress_bar@ii,??_menu_progress_bar
  5274  00146E  C065  F020         	movff	menu_progress_bar@ii+1,??_menu_progress_bar+1
  5275  001472  0E00               	movlw	0
  5276  001474  BE20               	btfsc	(??_menu_progress_bar+1)& (0+255),7,c
  5277  001476  0EFF               	movlw	255
  5278  001478  6E21               	movwf	(??_menu_progress_bar+2)& (0+255),c
  5279  00147A  6E22               	movwf	(??_menu_progress_bar+3)& (0+255),c
  5280  00147C  0100               	movlb	0	; () banked
  5281  00147E  5160               	movf	menu_progress_bar@d& (0+255),w,b
  5282  001480  5C1F               	subwf	??_menu_progress_bar,w,c
  5283  001482  0100               	movlb	0	; () banked
  5284  001484  5161               	movf	(menu_progress_bar@d+1)& (0+255),w,b
  5285  001486  5820               	subwfb	??_menu_progress_bar+1,w,c
  5286  001488  0100               	movlb	0	; () banked
  5287  00148A  5162               	movf	(menu_progress_bar@d+2)& (0+255),w,b
  5288  00148C  5821               	subwfb	??_menu_progress_bar+2,w,c
  5289  00148E  0100               	movlb	0	; () banked
  5290  001490  5163               	movf	(menu_progress_bar@d+3)& (0+255),w,b
  5291  001492  5822               	subwfb	??_menu_progress_bar+3,w,c
  5292  001494  A0D8               	btfss	status,0,c
  5293  001496  D7DB               	goto	l3776
  5294                           
  5295                           ; BSR set to: 0
  5296                           
  5297                           ; BSR set to: 0
  5298  001498  0100               	movlb	0	; () banked
  5299  00149A  4B66               	infsnz	menu_progress_bar@i& (0+255),f,b
  5300  00149C  2B67               	incf	(menu_progress_bar@i+1)& (0+255),f,b
  5301  00149E  D7C3               	goto	l3768
  5302  0014A0                     l3786:
  5303                           
  5304                           ; BSR set to: 0
  5305                           ;menu.h: 93: }
  5306                           ;menu.h: 94: Lcd_Set_Cursor(2,1);
  5307  0014A0  0E01               	movlw	1
  5308  0014A2  6E12               	movwf	Lcd_Set_Cursor@b,c
  5309  0014A4  0E02               	movlw	2
  5310  0014A6  ECFE  F00C         	call	_Lcd_Set_Cursor
  5311                           
  5312                           ;menu.h: 95: Lcd_Write_String("                ");
  5313  0014AA  0E87               	movlw	low STR_2
  5314  0014AC  6E14               	movwf	Lcd_Write_String@a,c
  5315  0014AE  0E7E               	movlw	high STR_2
  5316  0014B0  6E15               	movwf	Lcd_Write_String@a+1,c
  5317  0014B2  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  5318                           
  5319                           ;menu.h: 96: for (int i = 0; i < 5; i++)
  5320  0014B6  0E00               	movlw	0
  5321  0014B8  0100               	movlb	0	; () banked
  5322  0014BA  6F69               	movwf	(menu_progress_bar@i_727+1)& (0+255),b
  5323  0014BC  0E00               	movlw	0
  5324  0014BE  6F68               	movwf	menu_progress_bar@i_727& (0+255),b
  5325  0014C0                     l3792:
  5326                           
  5327                           ; BSR set to: 0
  5328  0014C0  0100               	movlb	0	; () banked
  5329  0014C2  BF69               	btfsc	(menu_progress_bar@i_727+1)& (0+255),7,b
  5330  0014C4  D008               	goto	l3796
  5331  0014C6  0100               	movlb	0	; () banked
  5332  0014C8  5169               	movf	(menu_progress_bar@i_727+1)& (0+255),w,b
  5333  0014CA  E112               	bnz	l3800
  5334  0014CC  0E05               	movlw	5
  5335  0014CE  0100               	movlb	0	; () banked
  5336  0014D0  5D68               	subwf	menu_progress_bar@i_727& (0+255),w,b
  5337  0014D2  B0D8               	btfsc	status,0,c
  5338  0014D4  D00D               	goto	l3800
  5339  0014D6                     l3796:
  5340                           
  5341                           ; BSR set to: 0
  5342                           ;menu.h: 97: {
  5343                           ;menu.h: 98: _delay((unsigned long)((20)*(16000000/4000.0)));
  5344  0014D6  0E68               	movlw	104
  5345  0014D8  6E1F               	movwf	??_menu_progress_bar& (0+255),c
  5346  0014DA  0EE4               	movlw	228
  5347  0014DC                     u4837:
  5348  0014DC  2EE8               	decfsz	wreg,f,c
  5349  0014DE  D7FE               	goto	u4837
  5350  0014E0  2E1F               	decfsz	??_menu_progress_bar& (0+255),f,c
  5351  0014E2  D7FC               	goto	u4837
  5352  0014E4  F000 F000          	nop2	
  5353  0014E8  0100               	movlb	0	; () banked
  5354  0014EA  4B68               	infsnz	menu_progress_bar@i_727& (0+255),f,b
  5355  0014EC  2B69               	incf	(menu_progress_bar@i_727+1)& (0+255),f,b
  5356  0014EE  D7E8               	goto	l3792
  5357  0014F0                     l3800:
  5358                           
  5359                           ; BSR set to: 0
  5360                           ;menu.h: 99: }
  5361                           ;menu.h: 100: Lcd_Set_Cursor(2,1);
  5362  0014F0  0E01               	movlw	1
  5363  0014F2  6E12               	movwf	Lcd_Set_Cursor@b,c
  5364  0014F4  0E02               	movlw	2
  5365  0014F6  ECFE  F00C         	call	_Lcd_Set_Cursor
  5366                           
  5367                           ;menu.h: 101: for (int i = 0; i < 16; i++)
  5368  0014FA  0E00               	movlw	0
  5369  0014FC  0100               	movlb	0	; () banked
  5370  0014FE  6F6B               	movwf	(menu_progress_bar@i_728+1)& (0+255),b
  5371  001500  0E00               	movlw	0
  5372  001502  6F6A               	movwf	menu_progress_bar@i_728& (0+255),b
  5373  001504                     l3804:
  5374                           
  5375                           ; BSR set to: 0
  5376  001504  0100               	movlb	0	; () banked
  5377  001506  BF6B               	btfsc	(menu_progress_bar@i_728+1)& (0+255),7,b
  5378  001508  D008               	goto	l3808
  5379  00150A  0100               	movlb	0	; () banked
  5380  00150C  516B               	movf	(menu_progress_bar@i_728+1)& (0+255),w,b
  5381  00150E  E10C               	bnz	l3814
  5382  001510  0E10               	movlw	16
  5383  001512  0100               	movlb	0	; () banked
  5384  001514  5D6A               	subwf	menu_progress_bar@i_728& (0+255),w,b
  5385  001516  B0D8               	btfsc	status,0,c
  5386  001518  D007               	goto	l3814
  5387  00151A                     l3808:
  5388                           
  5389                           ; BSR set to: 0
  5390                           ;menu.h: 102: {
  5391                           ;menu.h: 103: Lcd_Write_Char(0xFF);
  5392  00151A  0EFF               	movlw	255
  5393  00151C  EC62  F00D         	call	_Lcd_Write_Char
  5394  001520  0100               	movlb	0	; () banked
  5395  001522  4B6A               	infsnz	menu_progress_bar@i_728& (0+255),f,b
  5396  001524  2B6B               	incf	(menu_progress_bar@i_728+1)& (0+255),f,b
  5397  001526  D7EE               	goto	l3804
  5398  001528                     l3814:
  5399                           
  5400                           ; BSR set to: 0
  5401                           ;menu.h: 104: }
  5402                           ;menu.h: 105: for (int i = 0; i < 5; i++)
  5403  001528  0E00               	movlw	0
  5404  00152A  0100               	movlb	0	; () banked
  5405  00152C  6F6D               	movwf	(menu_progress_bar@i_729+1)& (0+255),b
  5406  00152E  0E00               	movlw	0
  5407  001530  6F6C               	movwf	menu_progress_bar@i_729& (0+255),b
  5408  001532                     l3816:
  5409                           
  5410                           ; BSR set to: 0
  5411  001532  0100               	movlb	0	; () banked
  5412  001534  BF6D               	btfsc	(menu_progress_bar@i_729+1)& (0+255),7,b
  5413  001536  D008               	goto	l3820
  5414  001538  0100               	movlb	0	; () banked
  5415  00153A  516D               	movf	(menu_progress_bar@i_729+1)& (0+255),w,b
  5416  00153C  E112               	bnz	l3824
  5417  00153E  0E05               	movlw	5
  5418  001540  0100               	movlb	0	; () banked
  5419  001542  5D6C               	subwf	menu_progress_bar@i_729& (0+255),w,b
  5420  001544  B0D8               	btfsc	status,0,c
  5421  001546  D00D               	goto	l3824
  5422  001548                     l3820:
  5423                           
  5424                           ; BSR set to: 0
  5425                           ;menu.h: 106: {
  5426                           ;menu.h: 107: _delay((unsigned long)((20)*(16000000/4000.0)));
  5427  001548  0E68               	movlw	104
  5428  00154A  6E1F               	movwf	??_menu_progress_bar& (0+255),c
  5429  00154C  0EE4               	movlw	228
  5430  00154E                     u4847:
  5431  00154E  2EE8               	decfsz	wreg,f,c
  5432  001550  D7FE               	goto	u4847
  5433  001552  2E1F               	decfsz	??_menu_progress_bar& (0+255),f,c
  5434  001554  D7FC               	goto	u4847
  5435  001556  F000 F000          	nop2	
  5436  00155A  0100               	movlb	0	; () banked
  5437  00155C  4B6C               	infsnz	menu_progress_bar@i_729& (0+255),f,b
  5438  00155E  2B6D               	incf	(menu_progress_bar@i_729+1)& (0+255),f,b
  5439  001560  D7E8               	goto	l3816
  5440  001562                     l3824:
  5441                           
  5442                           ; BSR set to: 0
  5443                           ;menu.h: 108: }
  5444                           ;menu.h: 109: Lcd_Clear();
  5445  001562  ECCD  F00D         	call	_Lcd_Clear	;wreg free
  5446  001566  0012               	return		;funcret
  5447  001568                     __end_of_menu_progress_bar:
  5448                           	opt stack 0
  5449                           tblptru	equ	0xFF8
  5450                           tblptrh	equ	0xFF7
  5451                           tblptrl	equ	0xFF6
  5452                           tablat	equ	0xFF5
  5453                           prodh	equ	0xFF4
  5454                           prodl	equ	0xFF3
  5455                           postinc0	equ	0xFEE
  5456                           wreg	equ	0xFE8
  5457                           indf1	equ	0xFE7
  5458                           postdec1	equ	0xFE5
  5459                           plusw1	equ	0xFE3
  5460                           fsr1h	equ	0xFE2
  5461                           fsr1l	equ	0xFE1
  5462                           indf2	equ	0xFDF
  5463                           postinc2	equ	0xFDE
  5464                           plusw2	equ	0xFDB
  5465                           fsr2h	equ	0xFDA
  5466                           fsr2l	equ	0xFD9
  5467                           status	equ	0xFD8
  5468                           
  5469 ;; *************** function ___wmul *****************
  5470 ;; Defined at:
  5471 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  5472 ;; Parameters:    Size  Location     Type
  5473 ;;  multiplier      2   22[COMRAM] unsigned int 
  5474 ;;  multiplicand    2   24[COMRAM] unsigned int 
  5475 ;; Auto vars:     Size  Location     Type
  5476 ;;  product         2   26[COMRAM] unsigned int 
  5477 ;; Return value:  Size  Location     Type
  5478 ;;                  2   22[COMRAM] unsigned int 
  5479 ;; Registers used:
  5480 ;;		wreg, status,2, status,0, prodl, prodh
  5481 ;; Tracked objects:
  5482 ;;		On entry : 0/0
  5483 ;;		On exit  : 0/0
  5484 ;;		Unchanged: 0/0
  5485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5486 ;;      Params:         4       0       0       0       0       0       0
  5487 ;;      Locals:         2       0       0       0       0       0       0
  5488 ;;      Temps:          0       0       0       0       0       0       0
  5489 ;;      Totals:         6       0       0       0       0       0       0
  5490 ;;Total ram usage:        6 bytes
  5491 ;; Hardware stack levels used:    1
  5492 ;; Hardware stack levels required when called:    1
  5493 ;; This function calls:
  5494 ;;		Nothing
  5495 ;; This function is called by:
  5496 ;;		_menu_progress_bar
  5497 ;;		_menu_seconds_to_mmss
  5498 ;; This function uses a non-reentrant model
  5499 ;;
  5500                           
  5501                           	psect	text7
  5502  001B50                     __ptext7:
  5503                           	opt stack 0
  5504  001B50                     ___wmul:
  5505                           	opt stack 27
  5506                           
  5507                           ;incstack = 0
  5508  001B50  5017               	movf	___wmul@multiplier,w,c
  5509  001B52  0219               	mulwf	___wmul@multiplicand,c
  5510  001B54  CFF3 F01B          	movff	prodl,___wmul@product
  5511  001B58  CFF4 F01C          	movff	prodh,___wmul@product+1
  5512  001B5C  5017               	movf	___wmul@multiplier,w,c
  5513  001B5E  021A               	mulwf	___wmul@multiplicand+1,c
  5514  001B60  50F3               	movf	prodl,w,c
  5515  001B62  261C               	addwf	___wmul@product+1,f,c
  5516  001B64  5018               	movf	___wmul@multiplier+1,w,c
  5517  001B66  0219               	mulwf	___wmul@multiplicand,c
  5518  001B68  50F3               	movf	prodl,w,c
  5519  001B6A  261C               	addwf	___wmul@product+1,f,c
  5520  001B6C  C01B  F017         	movff	___wmul@product,?___wmul
  5521  001B70  C01C  F018         	movff	___wmul@product+1,?___wmul+1
  5522  001B74  0012               	return	
  5523  001B76                     __end_of___wmul:
  5524                           	opt stack 0
  5525                           tblptru	equ	0xFF8
  5526                           tblptrh	equ	0xFF7
  5527                           tblptrl	equ	0xFF6
  5528                           tablat	equ	0xFF5
  5529                           prodh	equ	0xFF4
  5530                           prodl	equ	0xFF3
  5531                           postinc0	equ	0xFEE
  5532                           wreg	equ	0xFE8
  5533                           indf1	equ	0xFE7
  5534                           postdec1	equ	0xFE5
  5535                           plusw1	equ	0xFE3
  5536                           fsr1h	equ	0xFE2
  5537                           fsr1l	equ	0xFE1
  5538                           indf2	equ	0xFDF
  5539                           postinc2	equ	0xFDE
  5540                           plusw2	equ	0xFDB
  5541                           fsr2h	equ	0xFDA
  5542                           fsr2l	equ	0xFD9
  5543                           status	equ	0xFD8
  5544                           
  5545 ;; *************** function ___lwdiv *****************
  5546 ;; Defined at:
  5547 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  5548 ;; Parameters:    Size  Location     Type
  5549 ;;  dividend        2   15[COMRAM] unsigned int 
  5550 ;;  divisor         2   17[COMRAM] unsigned int 
  5551 ;; Auto vars:     Size  Location     Type
  5552 ;;  quotient        2   20[COMRAM] unsigned int 
  5553 ;;  counter         1   19[COMRAM] unsigned char 
  5554 ;; Return value:  Size  Location     Type
  5555 ;;                  2   15[COMRAM] unsigned int 
  5556 ;; Registers used:
  5557 ;;		wreg, status,2, status,0
  5558 ;; Tracked objects:
  5559 ;;		On entry : 0/0
  5560 ;;		On exit  : 0/0
  5561 ;;		Unchanged: 0/0
  5562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5563 ;;      Params:         4       0       0       0       0       0       0
  5564 ;;      Locals:         3       0       0       0       0       0       0
  5565 ;;      Temps:          0       0       0       0       0       0       0
  5566 ;;      Totals:         7       0       0       0       0       0       0
  5567 ;;Total ram usage:        7 bytes
  5568 ;; Hardware stack levels used:    1
  5569 ;; Hardware stack levels required when called:    1
  5570 ;; This function calls:
  5571 ;;		Nothing
  5572 ;; This function is called by:
  5573 ;;		_menu_progress_bar
  5574 ;;		_menu_seconds_to_mmss
  5575 ;; This function uses a non-reentrant model
  5576 ;;
  5577                           
  5578                           	psect	text8
  5579  0019AA                     __ptext8:
  5580                           	opt stack 0
  5581  0019AA                     ___lwdiv:
  5582                           	opt stack 27
  5583                           
  5584                           ;incstack = 0
  5585  0019AA  0E00               	movlw	0
  5586  0019AC  6E16               	movwf	___lwdiv@quotient+1,c
  5587  0019AE  0E00               	movlw	0
  5588  0019B0  6E15               	movwf	___lwdiv@quotient,c
  5589  0019B2  5012               	movf	___lwdiv@divisor,w,c
  5590  0019B4  1013               	iorwf	___lwdiv@divisor+1,w,c
  5591  0019B6  B4D8               	btfsc	status,2,c
  5592  0019B8  D01C               	goto	l769
  5593  0019BA  0E01               	movlw	1
  5594  0019BC  6E14               	movwf	___lwdiv@counter,c
  5595  0019BE  D004               	goto	l3748
  5596  0019C0                     l3746:
  5597  0019C0  90D8               	bcf	status,0,c
  5598  0019C2  3612               	rlcf	___lwdiv@divisor,f,c
  5599  0019C4  3613               	rlcf	___lwdiv@divisor+1,f,c
  5600  0019C6  2A14               	incf	___lwdiv@counter,f,c
  5601  0019C8                     l3748:
  5602  0019C8  AE13               	btfss	___lwdiv@divisor+1,7,c
  5603  0019CA  D7FA               	goto	l3746
  5604  0019CC                     l3750:
  5605  0019CC  90D8               	bcf	status,0,c
  5606  0019CE  3615               	rlcf	___lwdiv@quotient,f,c
  5607  0019D0  3616               	rlcf	___lwdiv@quotient+1,f,c
  5608  0019D2  5012               	movf	___lwdiv@divisor,w,c
  5609  0019D4  5C10               	subwf	___lwdiv@dividend,w,c
  5610  0019D6  5013               	movf	___lwdiv@divisor+1,w,c
  5611  0019D8  5811               	subwfb	___lwdiv@dividend+1,w,c
  5612  0019DA  A0D8               	btfss	status,0,c
  5613  0019DC  D005               	goto	l3758
  5614  0019DE  5012               	movf	___lwdiv@divisor,w,c
  5615  0019E0  5E10               	subwf	___lwdiv@dividend,f,c
  5616  0019E2  5013               	movf	___lwdiv@divisor+1,w,c
  5617  0019E4  5A11               	subwfb	___lwdiv@dividend+1,f,c
  5618  0019E6  8015               	bsf	___lwdiv@quotient,0,c
  5619  0019E8                     l3758:
  5620  0019E8  90D8               	bcf	status,0,c
  5621  0019EA  3213               	rrcf	___lwdiv@divisor+1,f,c
  5622  0019EC  3212               	rrcf	___lwdiv@divisor,f,c
  5623  0019EE  2E14               	decfsz	___lwdiv@counter,f,c
  5624  0019F0  D7ED               	goto	l3750
  5625  0019F2                     l769:
  5626  0019F2  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
  5627  0019F6  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5628  0019FA  0012               	return		;funcret
  5629  0019FC                     __end_of___lwdiv:
  5630                           	opt stack 0
  5631                           tblptru	equ	0xFF8
  5632                           tblptrh	equ	0xFF7
  5633                           tblptrl	equ	0xFF6
  5634                           tablat	equ	0xFF5
  5635                           prodh	equ	0xFF4
  5636                           prodl	equ	0xFF3
  5637                           postinc0	equ	0xFEE
  5638                           wreg	equ	0xFE8
  5639                           indf1	equ	0xFE7
  5640                           postdec1	equ	0xFE5
  5641                           plusw1	equ	0xFE3
  5642                           fsr1h	equ	0xFE2
  5643                           fsr1l	equ	0xFE1
  5644                           indf2	equ	0xFDF
  5645                           postinc2	equ	0xFDE
  5646                           plusw2	equ	0xFDB
  5647                           fsr2h	equ	0xFDA
  5648                           fsr2l	equ	0xFD9
  5649                           status	equ	0xFD8
  5650                           
  5651 ;; *************** function _Lcd_Write_String *****************
  5652 ;; Defined at:
  5653 ;;		line 111 in file "lcd.h"
  5654 ;; Parameters:    Size  Location     Type
  5655 ;;  a               2   19[COMRAM] PTR unsigned char 
  5656 ;;		 -> STR_30(17), STR_29(6), STR_28(17), STR_27(17), 
  5657 ;;		 -> STR_26(17), STR_25(2), STR_24(5), STR_23(17), 
  5658 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
  5659 ;;		 -> STR_18(11), STR_17(6), STR_16(5), STR_15(17), 
  5660 ;;		 -> STR_14(17), STR_13(17), STR_12(17), STR_11(17), 
  5661 ;;		 -> STR_10(17), STR_9(17), STR_8(17), STR_7(17), 
  5662 ;;		 -> STR_6(17), STR_5(17), STR_4(17), STR_3(17), 
  5663 ;;		 -> STR_2(17), STR_1(2), RAM(1535), 
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;  i               2   23[COMRAM] int 
  5666 ;; Return value:  Size  Location     Type
  5667 ;;                  1    wreg      void 
  5668 ;; Registers used:
  5669 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/0
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5675 ;;      Params:         2       0       0       0       0       0       0
  5676 ;;      Locals:         2       0       0       0       0       0       0
  5677 ;;      Temps:          2       0       0       0       0       0       0
  5678 ;;      Totals:         6       0       0       0       0       0       0
  5679 ;;Total ram usage:        6 bytes
  5680 ;; Hardware stack levels used:    1
  5681 ;; Hardware stack levels required when called:    3
  5682 ;; This function calls:
  5683 ;;		_Lcd_Write_Char
  5684 ;; This function is called by:
  5685 ;;		_menu_progress_bar
  5686 ;;		_main
  5687 ;;		_start_routine
  5688 ;;		_running_display
  5689 ;;		_menu_animation_i2c
  5690 ;; This function uses a non-reentrant model
  5691 ;;
  5692                           
  5693                           	psect	text9
  5694  001872                     __ptext9:
  5695                           	opt stack 0
  5696  001872                     _Lcd_Write_String:
  5697                           	opt stack 25
  5698                           
  5699                           ;lcd.h: 113: int i;
  5700                           ;lcd.h: 114: for(i=0;a[i]!='\0';i++)
  5701                           
  5702                           ;incstack = 0
  5703  001872  0E00               	movlw	0
  5704  001874  6E19               	movwf	Lcd_Write_String@i+1,c
  5705  001876  0E00               	movlw	0
  5706  001878  6E18               	movwf	Lcd_Write_String@i,c
  5707  00187A  D01A               	goto	l3644
  5708  00187C                     l3640:
  5709                           
  5710                           ;lcd.h: 115: Lcd_Write_Char(a[i]);
  5711  00187C  5018               	movf	Lcd_Write_String@i,w,c
  5712  00187E  2414               	addwf	Lcd_Write_String@a,w,c
  5713  001880  6E16               	movwf	??_Lcd_Write_String& (0+255),c
  5714  001882  5019               	movf	Lcd_Write_String@i+1,w,c
  5715  001884  2015               	addwfc	Lcd_Write_String@a+1,w,c
  5716  001886  6E17               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  5717  001888  C016  FFF6         	movff	??_Lcd_Write_String,tblptrl
  5718  00188C  C017  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  5719  001890  6AF8               	clrf	tblptru,c
  5720  001892  0E05               	movlw	(high __ramtop+-1)
  5721  001894  64F7               	cpfsgt	tblptrh,c
  5722  001896  D003               	bra	u3257
  5723  001898  0008               	tblrd		*
  5724  00189A  50F5               	movf	tablat,w,c
  5725  00189C  D005               	bra	u3250
  5726  00189E                     u3257:
  5727  00189E  CFF6 FFE9          	movff	tblptrl,fsr0l
  5728  0018A2  CFF7 FFEA          	movff	tblptrh,fsr0h
  5729  0018A6  50EF               	movf	indf0,w,c
  5730  0018A8                     u3250:
  5731  0018A8  EC62  F00D         	call	_Lcd_Write_Char
  5732  0018AC  4A18               	infsnz	Lcd_Write_String@i,f,c
  5733  0018AE  2A19               	incf	Lcd_Write_String@i+1,f,c
  5734  0018B0                     l3644:
  5735  0018B0  5018               	movf	Lcd_Write_String@i,w,c
  5736  0018B2  2414               	addwf	Lcd_Write_String@a,w,c
  5737  0018B4  6E16               	movwf	??_Lcd_Write_String& (0+255),c
  5738  0018B6  5019               	movf	Lcd_Write_String@i+1,w,c
  5739  0018B8  2015               	addwfc	Lcd_Write_String@a+1,w,c
  5740  0018BA  6E17               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  5741  0018BC  C016  FFF6         	movff	??_Lcd_Write_String,tblptrl
  5742  0018C0  C017  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  5743  0018C4  6AF8               	clrf	tblptru,c
  5744  0018C6  0E05               	movlw	(high __ramtop+-1)
  5745  0018C8  64F7               	cpfsgt	tblptrh,c
  5746  0018CA  D003               	bra	u3267
  5747  0018CC  0008               	tblrd		*
  5748  0018CE  50F5               	movf	tablat,w,c
  5749  0018D0  D005               	bra	u3260
  5750  0018D2                     u3267:
  5751  0018D2  CFF6 FFE9          	movff	tblptrl,fsr0l
  5752  0018D6  CFF7 FFEA          	movff	tblptrh,fsr0h
  5753  0018DA  50EF               	movf	indf0,w,c
  5754  0018DC                     u3260:
  5755  0018DC  0900               	iorlw	0
  5756  0018DE  B4D8               	btfsc	status,2,c
  5757  0018E0  0012               	return	
  5758  0018E2  D7CC               	goto	l3640
  5759  0018E4                     __end_of_Lcd_Write_String:
  5760                           	opt stack 0
  5761                           tblptru	equ	0xFF8
  5762                           tblptrh	equ	0xFF7
  5763                           tblptrl	equ	0xFF6
  5764                           tablat	equ	0xFF5
  5765                           prodh	equ	0xFF4
  5766                           prodl	equ	0xFF3
  5767                           indf0	equ	0xFEF
  5768                           postinc0	equ	0xFEE
  5769                           fsr0h	equ	0xFEA
  5770                           fsr0l	equ	0xFE9
  5771                           wreg	equ	0xFE8
  5772                           indf1	equ	0xFE7
  5773                           postdec1	equ	0xFE5
  5774                           plusw1	equ	0xFE3
  5775                           fsr1h	equ	0xFE2
  5776                           fsr1l	equ	0xFE1
  5777                           indf2	equ	0xFDF
  5778                           postinc2	equ	0xFDE
  5779                           plusw2	equ	0xFDB
  5780                           fsr2h	equ	0xFDA
  5781                           fsr2l	equ	0xFD9
  5782                           status	equ	0xFD8
  5783                           
  5784 ;; *************** function _Lcd_Write_Char *****************
  5785 ;; Defined at:
  5786 ;;		line 95 in file "lcd.h"
  5787 ;; Parameters:    Size  Location     Type
  5788 ;;  a               1    wreg     unsigned char 
  5789 ;; Auto vars:     Size  Location     Type
  5790 ;;  a               1   18[COMRAM] unsigned char 
  5791 ;;  y               1   17[COMRAM] unsigned char 
  5792 ;;  temp            1   16[COMRAM] unsigned char 
  5793 ;; Return value:  Size  Location     Type
  5794 ;;                  1    wreg      void 
  5795 ;; Registers used:
  5796 ;;		wreg, status,2, status,0, cstack
  5797 ;; Tracked objects:
  5798 ;;		On entry : 0/0
  5799 ;;		On exit  : 0/0
  5800 ;;		Unchanged: 0/0
  5801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5802 ;;      Params:         0       0       0       0       0       0       0
  5803 ;;      Locals:         3       0       0       0       0       0       0
  5804 ;;      Temps:          0       0       0       0       0       0       0
  5805 ;;      Totals:         3       0       0       0       0       0       0
  5806 ;;Total ram usage:        3 bytes
  5807 ;; Hardware stack levels used:    1
  5808 ;; Hardware stack levels required when called:    2
  5809 ;; This function calls:
  5810 ;;		_Lcd_Port
  5811 ;; This function is called by:
  5812 ;;		_Lcd_Write_String
  5813 ;;		_menu_progress_bar
  5814 ;;		_main
  5815 ;;		_start_routine
  5816 ;;		_running_display
  5817 ;;		_menu_main
  5818 ;; This function uses a non-reentrant model
  5819 ;;
  5820                           
  5821                           	psect	text10
  5822  001AC4                     __ptext10:
  5823                           	opt stack 0
  5824  001AC4                     _Lcd_Write_Char:
  5825                           	opt stack 25
  5826                           
  5827                           ;incstack = 0
  5828                           ;Lcd_Write_Char@a stored from wreg
  5829  001AC4  6E13               	movwf	Lcd_Write_Char@a,c
  5830                           
  5831                           ;lcd.h: 97: char temp,y;
  5832                           ;lcd.h: 98: temp = a&0x0F;
  5833  001AC6  5013               	movf	Lcd_Write_Char@a,w,c
  5834  001AC8  0B0F               	andlw	15
  5835  001ACA  6E11               	movwf	Lcd_Write_Char@temp,c
  5836                           
  5837                           ;lcd.h: 99: y = a&0xF0;
  5838  001ACC  5013               	movf	Lcd_Write_Char@a,w,c
  5839  001ACE  0BF0               	andlw	240
  5840  001AD0  6E12               	movwf	Lcd_Write_Char@y,c
  5841                           
  5842                           ;lcd.h: 100: PORTDbits.RD5 = 1;
  5843  001AD2  8A83               	bsf	3971,5,c	;volatile
  5844                           
  5845                           ;lcd.h: 101: Lcd_Port(y>>4);
  5846  001AD4  3812               	swapf	Lcd_Write_Char@y,w,c
  5847  001AD6  0B0F               	andlw	15
  5848  001AD8  EC7E  F00D         	call	_Lcd_Port
  5849                           
  5850                           ;lcd.h: 102: PORTDbits.RD4 = 1;
  5851  001ADC  8883               	bsf	3971,4,c	;volatile
  5852                           
  5853                           ;lcd.h: 103: _delay((unsigned long)((40)*(16000000/4000000.0)));
  5854  001ADE  0E35               	movlw	53
  5855  001AE0                     u4857:
  5856  001AE0  2EE8               	decfsz	wreg,f,c
  5857  001AE2  D7FE               	goto	u4857
  5858  001AE4  F000               	nop	
  5859                           
  5860                           ;lcd.h: 104: PORTDbits.RD4 = 0;
  5861  001AE6  9883               	bcf	3971,4,c	;volatile
  5862                           
  5863                           ;lcd.h: 105: Lcd_Port(temp);
  5864  001AE8  5011               	movf	Lcd_Write_Char@temp,w,c
  5865  001AEA  EC7E  F00D         	call	_Lcd_Port
  5866                           
  5867                           ;lcd.h: 106: PORTDbits.RD4 = 1;
  5868  001AEE  8883               	bsf	3971,4,c	;volatile
  5869                           
  5870                           ;lcd.h: 107: _delay((unsigned long)((40)*(16000000/4000000.0)));
  5871  001AF0  0E35               	movlw	53
  5872  001AF2                     u4867:
  5873  001AF2  2EE8               	decfsz	wreg,f,c
  5874  001AF4  D7FE               	goto	u4867
  5875  001AF6  F000               	nop	
  5876                           
  5877                           ;lcd.h: 108: PORTDbits.RD4 = 0;
  5878  001AF8  9883               	bcf	3971,4,c	;volatile
  5879  001AFA  0012               	return		;funcret
  5880  001AFC                     __end_of_Lcd_Write_Char:
  5881                           	opt stack 0
  5882                           tblptru	equ	0xFF8
  5883                           tblptrh	equ	0xFF7
  5884                           tblptrl	equ	0xFF6
  5885                           tablat	equ	0xFF5
  5886                           prodh	equ	0xFF4
  5887                           prodl	equ	0xFF3
  5888                           indf0	equ	0xFEF
  5889                           postinc0	equ	0xFEE
  5890                           fsr0h	equ	0xFEA
  5891                           fsr0l	equ	0xFE9
  5892                           wreg	equ	0xFE8
  5893                           indf1	equ	0xFE7
  5894                           postdec1	equ	0xFE5
  5895                           plusw1	equ	0xFE3
  5896                           fsr1h	equ	0xFE2
  5897                           fsr1l	equ	0xFE1
  5898                           indf2	equ	0xFDF
  5899                           postinc2	equ	0xFDE
  5900                           plusw2	equ	0xFDB
  5901                           fsr2h	equ	0xFDA
  5902                           fsr2l	equ	0xFD9
  5903                           status	equ	0xFD8
  5904                           
  5905 ;; *************** function _Lcd_Set_Cursor *****************
  5906 ;; Defined at:
  5907 ;;		line 55 in file "lcd.h"
  5908 ;; Parameters:    Size  Location     Type
  5909 ;;  a               1    wreg     unsigned char 
  5910 ;;  b               1   17[COMRAM] unsigned char 
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;  a               1   18[COMRAM] unsigned char 
  5913 ;;  temp            1   21[COMRAM] unsigned char 
  5914 ;;  y               1   20[COMRAM] unsigned char 
  5915 ;;  z               1   19[COMRAM] unsigned char 
  5916 ;; Return value:  Size  Location     Type
  5917 ;;                  1    wreg      void 
  5918 ;; Registers used:
  5919 ;;		wreg, status,2, status,0, cstack
  5920 ;; Tracked objects:
  5921 ;;		On entry : 0/0
  5922 ;;		On exit  : 0/0
  5923 ;;		Unchanged: 0/0
  5924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5925 ;;      Params:         1       0       0       0       0       0       0
  5926 ;;      Locals:         4       0       0       0       0       0       0
  5927 ;;      Temps:          0       0       0       0       0       0       0
  5928 ;;      Totals:         5       0       0       0       0       0       0
  5929 ;;Total ram usage:        5 bytes
  5930 ;; Hardware stack levels used:    1
  5931 ;; Hardware stack levels required when called:    3
  5932 ;; This function calls:
  5933 ;;		_Lcd_Cmd
  5934 ;; This function is called by:
  5935 ;;		_menu_progress_bar
  5936 ;;		_main
  5937 ;;		_start_routine
  5938 ;;		_running_display
  5939 ;;		_menu_main
  5940 ;;		_menu_animation_i2c
  5941 ;; This function uses a non-reentrant model
  5942 ;;
  5943                           
  5944                           	psect	text11
  5945  0019FC                     __ptext11:
  5946                           	opt stack 0
  5947  0019FC                     _Lcd_Set_Cursor:
  5948                           	opt stack 25
  5949                           
  5950                           ;incstack = 0
  5951                           ;Lcd_Set_Cursor@a stored from wreg
  5952  0019FC  6E13               	movwf	Lcd_Set_Cursor@a,c
  5953                           
  5954                           ;lcd.h: 57: char temp,z,y;
  5955                           ;lcd.h: 58: if(a == 1)
  5956  0019FE  0413               	decf	Lcd_Set_Cursor@a,w,c
  5957  001A00  A4D8               	btfss	status,2,c
  5958  001A02  D010               	goto	l3630
  5959                           
  5960                           ;lcd.h: 59: {
  5961                           ;lcd.h: 60: temp = 0x80 + b - 1;
  5962  001A04  5012               	movf	Lcd_Set_Cursor@b,w,c
  5963  001A06  0F7F               	addlw	127
  5964  001A08  6E16               	movwf	Lcd_Set_Cursor@temp,c
  5965                           
  5966                           ;lcd.h: 61: z = temp>>4;
  5967  001A0A  3816               	swapf	Lcd_Set_Cursor@temp,w,c
  5968  001A0C  0B0F               	andlw	15
  5969  001A0E  6E14               	movwf	Lcd_Set_Cursor@z,c
  5970                           
  5971                           ;lcd.h: 62: y = temp & 0x0F;
  5972  001A10  5016               	movf	Lcd_Set_Cursor@temp,w,c
  5973  001A12  0B0F               	andlw	15
  5974  001A14  6E15               	movwf	Lcd_Set_Cursor@y,c
  5975                           
  5976                           ;lcd.h: 63: Lcd_Cmd(z);
  5977  001A16  5014               	movf	Lcd_Set_Cursor@z,w,c
  5978  001A18  ECED  F00D         	call	_Lcd_Cmd
  5979                           
  5980                           ;lcd.h: 64: Lcd_Cmd(y);
  5981  001A1C  5015               	movf	Lcd_Set_Cursor@y,w,c
  5982  001A1E  ECED  F00D         	call	_Lcd_Cmd
  5983                           
  5984                           ;lcd.h: 65: }
  5985  001A22  0012               	return	
  5986  001A24                     l3630:
  5987                           
  5988                           ;lcd.h: 66: else if(a == 2)
  5989  001A24  0E02               	movlw	2
  5990  001A26  1813               	xorwf	Lcd_Set_Cursor@a,w,c
  5991  001A28  A4D8               	btfss	status,2,c
  5992  001A2A  0012               	return	
  5993                           
  5994                           ;lcd.h: 67: {
  5995                           ;lcd.h: 68: temp = 0xC0 + b - 1;
  5996  001A2C  5012               	movf	Lcd_Set_Cursor@b,w,c
  5997  001A2E  0FBF               	addlw	191
  5998  001A30  6E16               	movwf	Lcd_Set_Cursor@temp,c
  5999                           
  6000                           ;lcd.h: 69: z = temp>>4;
  6001  001A32  3816               	swapf	Lcd_Set_Cursor@temp,w,c
  6002  001A34  0B0F               	andlw	15
  6003  001A36  6E14               	movwf	Lcd_Set_Cursor@z,c
  6004                           
  6005                           ;lcd.h: 70: y = temp & 0x0F;
  6006  001A38  5016               	movf	Lcd_Set_Cursor@temp,w,c
  6007  001A3A  0B0F               	andlw	15
  6008  001A3C  6E15               	movwf	Lcd_Set_Cursor@y,c
  6009                           
  6010                           ;lcd.h: 71: Lcd_Cmd(z);
  6011  001A3E  5014               	movf	Lcd_Set_Cursor@z,w,c
  6012  001A40  ECED  F00D         	call	_Lcd_Cmd
  6013                           
  6014                           ;lcd.h: 72: Lcd_Cmd(y);
  6015  001A44  5015               	movf	Lcd_Set_Cursor@y,w,c
  6016  001A46  ECED  F00D         	call	_Lcd_Cmd
  6017  001A4A  0012               	return	
  6018  001A4C                     __end_of_Lcd_Set_Cursor:
  6019                           	opt stack 0
  6020                           tblptru	equ	0xFF8
  6021                           tblptrh	equ	0xFF7
  6022                           tblptrl	equ	0xFF6
  6023                           tablat	equ	0xFF5
  6024                           prodh	equ	0xFF4
  6025                           prodl	equ	0xFF3
  6026                           indf0	equ	0xFEF
  6027                           postinc0	equ	0xFEE
  6028                           fsr0h	equ	0xFEA
  6029                           fsr0l	equ	0xFE9
  6030                           wreg	equ	0xFE8
  6031                           indf1	equ	0xFE7
  6032                           postdec1	equ	0xFE5
  6033                           plusw1	equ	0xFE3
  6034                           fsr1h	equ	0xFE2
  6035                           fsr1l	equ	0xFE1
  6036                           indf2	equ	0xFDF
  6037                           postinc2	equ	0xFDE
  6038                           plusw2	equ	0xFDB
  6039                           fsr2h	equ	0xFDA
  6040                           fsr2l	equ	0xFD9
  6041                           status	equ	0xFD8
  6042                           
  6043 ;; *************** function _Lcd_Clear *****************
  6044 ;; Defined at:
  6045 ;;		line 48 in file "lcd.h"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;		None
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;		None
  6050 ;; Return value:  Size  Location     Type
  6051 ;;                  1    wreg      void 
  6052 ;; Registers used:
  6053 ;;		wreg, status,2, cstack
  6054 ;; Tracked objects:
  6055 ;;		On entry : 0/0
  6056 ;;		On exit  : 0/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6059 ;;      Params:         0       0       0       0       0       0       0
  6060 ;;      Locals:         0       0       0       0       0       0       0
  6061 ;;      Temps:          1       0       0       0       0       0       0
  6062 ;;      Totals:         1       0       0       0       0       0       0
  6063 ;;Total ram usage:        1 bytes
  6064 ;; Hardware stack levels used:    1
  6065 ;; Hardware stack levels required when called:    3
  6066 ;; This function calls:
  6067 ;;		_Lcd_Cmd
  6068 ;; This function is called by:
  6069 ;;		_menu_progress_bar
  6070 ;;		_start_routine
  6071 ;;		_running_display
  6072 ;; This function uses a non-reentrant model
  6073 ;;
  6074                           
  6075                           	psect	text12
  6076  001B9A                     __ptext12:
  6077                           	opt stack 0
  6078  001B9A                     _Lcd_Clear:
  6079                           	opt stack 25
  6080                           
  6081                           ;lcd.h: 50: Lcd_Cmd(0);
  6082                           
  6083                           ;incstack = 0
  6084  001B9A  0E00               	movlw	0
  6085  001B9C  ECED  F00D         	call	_Lcd_Cmd
  6086                           
  6087                           ;lcd.h: 51: Lcd_Cmd(1);
  6088  001BA0  0E01               	movlw	1
  6089  001BA2  ECED  F00D         	call	_Lcd_Cmd
  6090                           
  6091                           ;lcd.h: 52: _delay((unsigned long)((5)*(16000000/4000.0)));
  6092  001BA6  0E1A               	movlw	26
  6093  001BA8  6E12               	movwf	??_Lcd_Clear& (0+255),c
  6094  001BAA  0EF8               	movlw	248
  6095  001BAC                     u4877:
  6096  001BAC  2EE8               	decfsz	wreg,f,c
  6097  001BAE  D7FE               	goto	u4877
  6098  001BB0  2E12               	decfsz	??_Lcd_Clear& (0+255),f,c
  6099  001BB2  D7FC               	goto	u4877
  6100  001BB4  F000 F000          	nop2	
  6101  001BB8  0012               	return		;funcret
  6102  001BBA                     __end_of_Lcd_Clear:
  6103                           	opt stack 0
  6104                           tblptru	equ	0xFF8
  6105                           tblptrh	equ	0xFF7
  6106                           tblptrl	equ	0xFF6
  6107                           tablat	equ	0xFF5
  6108                           prodh	equ	0xFF4
  6109                           prodl	equ	0xFF3
  6110                           indf0	equ	0xFEF
  6111                           postinc0	equ	0xFEE
  6112                           fsr0h	equ	0xFEA
  6113                           fsr0l	equ	0xFE9
  6114                           wreg	equ	0xFE8
  6115                           indf1	equ	0xFE7
  6116                           postdec1	equ	0xFE5
  6117                           plusw1	equ	0xFE3
  6118                           fsr1h	equ	0xFE2
  6119                           fsr1l	equ	0xFE1
  6120                           indf2	equ	0xFDF
  6121                           postinc2	equ	0xFDE
  6122                           plusw2	equ	0xFDB
  6123                           fsr2h	equ	0xFDA
  6124                           fsr2l	equ	0xFD9
  6125                           status	equ	0xFD8
  6126                           
  6127 ;; *************** function ___awmod *****************
  6128 ;; Defined at:
  6129 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  6130 ;; Parameters:    Size  Location     Type
  6131 ;;  dividend        2   15[COMRAM] int 
  6132 ;;  divisor         2   17[COMRAM] int 
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;  sign            1   20[COMRAM] unsigned char 
  6135 ;;  counter         1   19[COMRAM] unsigned char 
  6136 ;; Return value:  Size  Location     Type
  6137 ;;                  2   15[COMRAM] int 
  6138 ;; Registers used:
  6139 ;;		wreg, status,2, status,0
  6140 ;; Tracked objects:
  6141 ;;		On entry : 0/0
  6142 ;;		On exit  : 0/0
  6143 ;;		Unchanged: 0/0
  6144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6145 ;;      Params:         4       0       0       0       0       0       0
  6146 ;;      Locals:         2       0       0       0       0       0       0
  6147 ;;      Temps:          0       0       0       0       0       0       0
  6148 ;;      Totals:         6       0       0       0       0       0       0
  6149 ;;Total ram usage:        6 bytes
  6150 ;; Hardware stack levels used:    1
  6151 ;; Hardware stack levels required when called:    1
  6152 ;; This function calls:
  6153 ;;		Nothing
  6154 ;; This function is called by:
  6155 ;;		_running_display
  6156 ;; This function uses a non-reentrant model
  6157 ;;
  6158                           
  6159                           	psect	text13
  6160  0018E4                     __ptext13:
  6161                           	opt stack 0
  6162  0018E4                     ___awmod:
  6163                           	opt stack 28
  6164                           
  6165                           ;incstack = 0
  6166  0018E4  0E00               	movlw	0
  6167  0018E6  6E15               	movwf	___awmod@sign,c
  6168  0018E8  AE11               	btfss	___awmod@dividend+1,7,c
  6169  0018EA  D006               	goto	l3910
  6170  0018EC  6C10               	negf	___awmod@dividend,c
  6171  0018EE  1E11               	comf	___awmod@dividend+1,f,c
  6172  0018F0  B0D8               	btfsc	status,0,c
  6173  0018F2  2A11               	incf	___awmod@dividend+1,f,c
  6174  0018F4  0E01               	movlw	1
  6175  0018F6  6E15               	movwf	___awmod@sign,c
  6176  0018F8                     l3910:
  6177  0018F8  AE13               	btfss	___awmod@divisor+1,7,c
  6178  0018FA  D004               	goto	l3914
  6179  0018FC  6C12               	negf	___awmod@divisor,c
  6180  0018FE  1E13               	comf	___awmod@divisor+1,f,c
  6181  001900  B0D8               	btfsc	status,0,c
  6182  001902  2A13               	incf	___awmod@divisor+1,f,c
  6183  001904                     l3914:
  6184  001904  5012               	movf	___awmod@divisor,w,c
  6185  001906  1013               	iorwf	___awmod@divisor+1,w,c
  6186  001908  B4D8               	btfsc	status,2,c
  6187  00190A  D018               	goto	l3930
  6188  00190C  0E01               	movlw	1
  6189  00190E  6E14               	movwf	___awmod@counter,c
  6190  001910  D004               	goto	l3920
  6191  001912                     l3918:
  6192  001912  90D8               	bcf	status,0,c
  6193  001914  3612               	rlcf	___awmod@divisor,f,c
  6194  001916  3613               	rlcf	___awmod@divisor+1,f,c
  6195  001918  2A14               	incf	___awmod@counter,f,c
  6196  00191A                     l3920:
  6197  00191A  AE13               	btfss	___awmod@divisor+1,7,c
  6198  00191C  D7FA               	goto	l3918
  6199  00191E                     l3922:
  6200  00191E  5012               	movf	___awmod@divisor,w,c
  6201  001920  5C10               	subwf	___awmod@dividend,w,c
  6202  001922  5013               	movf	___awmod@divisor+1,w,c
  6203  001924  5811               	subwfb	___awmod@dividend+1,w,c
  6204  001926  A0D8               	btfss	status,0,c
  6205  001928  D004               	goto	l3926
  6206  00192A  5012               	movf	___awmod@divisor,w,c
  6207  00192C  5E10               	subwf	___awmod@dividend,f,c
  6208  00192E  5013               	movf	___awmod@divisor+1,w,c
  6209  001930  5A11               	subwfb	___awmod@dividend+1,f,c
  6210  001932                     l3926:
  6211  001932  90D8               	bcf	status,0,c
  6212  001934  3213               	rrcf	___awmod@divisor+1,f,c
  6213  001936  3212               	rrcf	___awmod@divisor,f,c
  6214  001938  2E14               	decfsz	___awmod@counter,f,c
  6215  00193A  D7F1               	goto	l3922
  6216  00193C                     l3930:
  6217  00193C  5015               	movf	___awmod@sign,w,c
  6218  00193E  B4D8               	btfsc	status,2,c
  6219  001940  D004               	goto	l3934
  6220  001942  6C10               	negf	___awmod@dividend,c
  6221  001944  1E11               	comf	___awmod@dividend+1,f,c
  6222  001946  B0D8               	btfsc	status,0,c
  6223  001948  2A11               	incf	___awmod@dividend+1,f,c
  6224  00194A                     l3934:
  6225  00194A  C010  F010         	movff	___awmod@dividend,?___awmod
  6226  00194E  C011  F011         	movff	___awmod@dividend+1,?___awmod+1
  6227  001952  0012               	return	
  6228  001954                     __end_of___awmod:
  6229                           	opt stack 0
  6230                           tblptru	equ	0xFF8
  6231                           tblptrh	equ	0xFF7
  6232                           tblptrl	equ	0xFF6
  6233                           tablat	equ	0xFF5
  6234                           prodh	equ	0xFF4
  6235                           prodl	equ	0xFF3
  6236                           indf0	equ	0xFEF
  6237                           postinc0	equ	0xFEE
  6238                           fsr0h	equ	0xFEA
  6239                           fsr0l	equ	0xFE9
  6240                           wreg	equ	0xFE8
  6241                           indf1	equ	0xFE7
  6242                           postdec1	equ	0xFE5
  6243                           plusw1	equ	0xFE3
  6244                           fsr1h	equ	0xFE2
  6245                           fsr1l	equ	0xFE1
  6246                           indf2	equ	0xFDF
  6247                           postinc2	equ	0xFDE
  6248                           plusw2	equ	0xFDB
  6249                           fsr2h	equ	0xFDA
  6250                           fsr2l	equ	0xFD9
  6251                           status	equ	0xFD8
  6252                           
  6253 ;; *************** function _mcu_initialise *****************
  6254 ;; Defined at:
  6255 ;;		line 243 in file "main.c"
  6256 ;; Parameters:    Size  Location     Type
  6257 ;;		None
  6258 ;; Auto vars:     Size  Location     Type
  6259 ;;		None
  6260 ;; Return value:  Size  Location     Type
  6261 ;;                  1    wreg      void 
  6262 ;; Registers used:
  6263 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6264 ;; Tracked objects:
  6265 ;;		On entry : 0/0
  6266 ;;		On exit  : 0/0
  6267 ;;		Unchanged: 0/0
  6268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6269 ;;      Params:         0       0       0       0       0       0       0
  6270 ;;      Locals:         0       0       0       0       0       0       0
  6271 ;;      Temps:          0       0       0       0       0       0       0
  6272 ;;      Totals:         0       0       0       0       0       0       0
  6273 ;;Total ram usage:        0 bytes
  6274 ;; Hardware stack levels used:    1
  6275 ;; Hardware stack levels required when called:    2
  6276 ;; This function calls:
  6277 ;;		_Eeprom_Read_Byte
  6278 ;; This function is called by:
  6279 ;;		_main
  6280 ;; This function uses a non-reentrant model
  6281 ;;
  6282                           
  6283                           	psect	text14
  6284  001954                     __ptext14:
  6285                           	opt stack 0
  6286  001954                     _mcu_initialise:
  6287                           	opt stack 28
  6288                           
  6289                           ;main.c: 246: I2C_ADDR = Eeprom_Read_Byte(EEP_I2C_ADDR);
  6290                           
  6291                           ;incstack = 0
  6292  001954  0100               	movlb	0	; () banked
  6293  001956  51DC               	movf	_EEP_I2C_ADDR& (0+255),w,b
  6294  001958  ECF9  F00D         	call	_Eeprom_Read_Byte
  6295  00195C  0100               	movlb	0	; () banked
  6296  00195E  6FDE               	movwf	_I2C_ADDR& (0+255),b
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;main.c: 247: Machine_ID = I2C_ADDR - 0x0F;
  6300  001960  0100               	movlb	0	; () banked
  6301  001962  51DE               	movf	_I2C_ADDR& (0+255),w,b
  6302  001964  0FF1               	addlw	241
  6303  001966  0100               	movlb	0	; () banked
  6304  001968  6FDF               	movwf	_Machine_ID& (0+255),b
  6305                           
  6306                           ; BSR set to: 0
  6307                           ;main.c: 250: OSCCON = 0x60;
  6308  00196A  0E60               	movlw	96
  6309  00196C  6ED3               	movwf	4051,c	;volatile
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;main.c: 251: OSCTUNEbits.PLLEN = 0;
  6313  00196E  9C9B               	bcf	3995,6,c	;volatile
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;main.c: 253: TRISA = 0x00;
  6317  001970  0E00               	movlw	0
  6318  001972  6E92               	movwf	3986,c	;volatile
  6319                           
  6320                           ; BSR set to: 0
  6321                           ;main.c: 254: TRISB = 0x01;
  6322  001974  0E01               	movlw	1
  6323  001976  6E93               	movwf	3987,c	;volatile
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;main.c: 255: TRISC = 0b00011000;
  6327  001978  0E18               	movlw	24
  6328  00197A  6E94               	movwf	3988,c	;volatile
  6329                           
  6330                           ; BSR set to: 0
  6331                           ;main.c: 256: TRISD = 0b00000000;
  6332  00197C  0E00               	movlw	0
  6333  00197E  6E95               	movwf	3989,c	;volatile
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;main.c: 257: PORTD = 0b00000000;
  6337  001980  0E00               	movlw	0
  6338  001982  6E83               	movwf	3971,c	;volatile
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;main.c: 258: LATC = 0b00011000;
  6342  001984  0E18               	movlw	24
  6343  001986  6E8B               	movwf	3979,c	;volatile
  6344                           
  6345                           ; BSR set to: 0
  6346                           ;main.c: 260: SSPADD = I2C_ADDR * 2;
  6347  001988  0100               	movlb	0	; () banked
  6348  00198A  51DE               	movf	_I2C_ADDR& (0+255),w,b
  6349  00198C  0D02               	mullw	2
  6350  00198E  CFF3 FFC8          	movff	prodl,4040	;volatile
  6351                           
  6352                           ; BSR set to: 0
  6353                           ;main.c: 261: SSPCON1 = 0x36;
  6354  001992  0E36               	movlw	54
  6355  001994  6EC6               	movwf	4038,c	;volatile
  6356                           
  6357                           ; BSR set to: 0
  6358                           ;main.c: 264: SSPSTAT = 0x00;
  6359  001996  0E00               	movlw	0
  6360  001998  6EC7               	movwf	4039,c	;volatile
  6361                           
  6362                           ; BSR set to: 0
  6363                           ;main.c: 265: SSPCON2 = 0x01;
  6364  00199A  0E01               	movlw	1
  6365  00199C  6EC5               	movwf	4037,c	;volatile
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;main.c: 267: PIR1bits.SSPIF = 0;
  6369  00199E  969E               	bcf	3998,3,c	;volatile
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;main.c: 268: PIE1bits.SSPIE = 1;
  6373  0019A0  869D               	bsf	3997,3,c	;volatile
  6374                           
  6375                           ; BSR set to: 0
  6376                           ;main.c: 269: INTCONbits.GIE_GIEH = 1;
  6377  0019A2  8EF2               	bsf	intcon,7,c	;volatile
  6378                           
  6379                           ; BSR set to: 0
  6380                           ;main.c: 270: INTCONbits.PEIE_GIEL = 1;
  6381  0019A4  8CF2               	bsf	intcon,6,c	;volatile
  6382                           
  6383                           ; BSR set to: 0
  6384                           ;main.c: 271: INTCONbits.RBIE = 0;
  6385  0019A6  96F2               	bcf	intcon,3,c	;volatile
  6386                           
  6387                           ; BSR set to: 0
  6388  0019A8  0012               	return		;funcret
  6389  0019AA                     __end_of_mcu_initialise:
  6390                           	opt stack 0
  6391                           tblptru	equ	0xFF8
  6392                           tblptrh	equ	0xFF7
  6393                           tblptrl	equ	0xFF6
  6394                           tablat	equ	0xFF5
  6395                           prodh	equ	0xFF4
  6396                           prodl	equ	0xFF3
  6397                           intcon	equ	0xFF2
  6398                           indf0	equ	0xFEF
  6399                           postinc0	equ	0xFEE
  6400                           fsr0h	equ	0xFEA
  6401                           fsr0l	equ	0xFE9
  6402                           wreg	equ	0xFE8
  6403                           indf1	equ	0xFE7
  6404                           postdec1	equ	0xFE5
  6405                           plusw1	equ	0xFE3
  6406                           fsr1h	equ	0xFE2
  6407                           fsr1l	equ	0xFE1
  6408                           indf2	equ	0xFDF
  6409                           postinc2	equ	0xFDE
  6410                           plusw2	equ	0xFDB
  6411                           fsr2h	equ	0xFDA
  6412                           fsr2l	equ	0xFD9
  6413                           status	equ	0xFD8
  6414                           
  6415 ;; *************** function _Eeprom_Read_Byte *****************
  6416 ;; Defined at:
  6417 ;;		line 20 in file "eeprom.h"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;  address         1    wreg     unsigned char 
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;  address         1   15[COMRAM] unsigned char 
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  1    wreg      unsigned char 
  6424 ;; Registers used:
  6425 ;;		wreg, status,2
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6431 ;;      Params:         0       0       0       0       0       0       0
  6432 ;;      Locals:         1       0       0       0       0       0       0
  6433 ;;      Temps:          0       0       0       0       0       0       0
  6434 ;;      Totals:         1       0       0       0       0       0       0
  6435 ;;Total ram usage:        1 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    1
  6438 ;; This function calls:
  6439 ;;		Nothing
  6440 ;; This function is called by:
  6441 ;;		_mcu_initialise
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           	psect	text15
  6446  001BF2                     __ptext15:
  6447                           	opt stack 0
  6448  001BF2                     _Eeprom_Read_Byte:
  6449                           	opt stack 28
  6450                           
  6451                           ; BSR set to: 0
  6452                           ;incstack = 0
  6453                           ;Eeprom_Read_Byte@address stored from wreg
  6454  001BF2  6E10               	movwf	Eeprom_Read_Byte@address,c
  6455                           
  6456                           ;eeprom.h: 24: EEADR = (unsigned char)address;
  6457  001BF4  C010  FFA9         	movff	Eeprom_Read_Byte@address,4009	;volatile
  6458                           
  6459                           ;eeprom.h: 26: EECON1bits.EEPGD = 0;
  6460  001BF8  9EA6               	bcf	4006,7,c	;volatile
  6461                           
  6462                           ;eeprom.h: 27: EECON1bits.CFGS = 0;
  6463  001BFA  9CA6               	bcf	4006,6,c	;volatile
  6464                           
  6465                           ;eeprom.h: 28: EECON1bits.RD = 1;
  6466  001BFC  80A6               	bsf	4006,0,c	;volatile
  6467  001BFE                     l151:
  6468  001BFE  B0A6               	btfsc	4006,0,c	;volatile
  6469  001C00  D7FE               	goto	l151
  6470                           
  6471                           ;eeprom.h: 34: return EEDATA;
  6472  001C02  50A8               	movf	4008,w,c	;volatile
  6473  001C04  0012               	return		;funcret
  6474  001C06                     __end_of_Eeprom_Read_Byte:
  6475                           	opt stack 0
  6476                           tblptru	equ	0xFF8
  6477                           tblptrh	equ	0xFF7
  6478                           tblptrl	equ	0xFF6
  6479                           tablat	equ	0xFF5
  6480                           prodh	equ	0xFF4
  6481                           prodl	equ	0xFF3
  6482                           intcon	equ	0xFF2
  6483                           indf0	equ	0xFEF
  6484                           postinc0	equ	0xFEE
  6485                           fsr0h	equ	0xFEA
  6486                           fsr0l	equ	0xFE9
  6487                           wreg	equ	0xFE8
  6488                           indf1	equ	0xFE7
  6489                           postdec1	equ	0xFE5
  6490                           plusw1	equ	0xFE3
  6491                           fsr1h	equ	0xFE2
  6492                           fsr1l	equ	0xFE1
  6493                           indf2	equ	0xFDF
  6494                           postinc2	equ	0xFDE
  6495                           plusw2	equ	0xFDB
  6496                           fsr2h	equ	0xFDA
  6497                           fsr2l	equ	0xFD9
  6498                           status	equ	0xFD8
  6499                           
  6500 ;; *************** function _load_i2c_registers *****************
  6501 ;; Defined at:
  6502 ;;		line 307 in file "main.c"
  6503 ;; Parameters:    Size  Location     Type
  6504 ;;		None
  6505 ;; Auto vars:     Size  Location     Type
  6506 ;;  i               2   29[COMRAM] int 
  6507 ;;  i               2   33[COMRAM] int 
  6508 ;;  i               2   31[COMRAM] int 
  6509 ;;  checksum        2   27[COMRAM] int 
  6510 ;; Return value:  Size  Location     Type
  6511 ;;                  1    wreg      void 
  6512 ;; Registers used:
  6513 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6519 ;;      Params:         0       0       0       0       0       0       0
  6520 ;;      Locals:         8       0       0       0       0       0       0
  6521 ;;      Temps:          4       0       0       0       0       0       0
  6522 ;;      Totals:        12       0       0       0       0       0       0
  6523 ;;Total ram usage:       12 bytes
  6524 ;; Hardware stack levels used:    1
  6525 ;; Hardware stack levels required when called:    2
  6526 ;; This function calls:
  6527 ;;		___awdiv
  6528 ;; This function is called by:
  6529 ;;		_main
  6530 ;; This function uses a non-reentrant model
  6531 ;;
  6532                           
  6533                           	psect	text16
  6534  001568                     __ptext16:
  6535                           	opt stack 0
  6536  001568                     _load_i2c_registers:
  6537                           	opt stack 28
  6538                           
  6539                           ;main.c: 316: for (int i = 0; i < 9; i++)
  6540                           
  6541                           ;incstack = 0
  6542  001568  0E00               	movlw	0
  6543  00156A  6E21               	movwf	load_i2c_registers@i+1,c
  6544  00156C  0E00               	movlw	0
  6545  00156E  6E20               	movwf	load_i2c_registers@i,c
  6546  001570                     l4290:
  6547  001570  BE21               	btfsc	load_i2c_registers@i+1,7,c
  6548  001572  D006               	goto	l4294
  6549  001574  5021               	movf	load_i2c_registers@i+1,w,c
  6550  001576  E115               	bnz	l4300
  6551  001578  0E09               	movlw	9
  6552  00157A  5C20               	subwf	load_i2c_registers@i,w,c
  6553  00157C  B0D8               	btfsc	status,0,c
  6554  00157E  D011               	goto	l4300
  6555  001580                     l4294:
  6556                           
  6557                           ;main.c: 317: i2c_r_reg[i] = current_user[i];
  6558  001580  0ED3               	movlw	low _current_user
  6559  001582  2420               	addwf	load_i2c_registers@i,w,c
  6560  001584  6ED9               	movwf	fsr2l,c
  6561  001586  0E00               	movlw	high _current_user
  6562  001588  2021               	addwfc	load_i2c_registers@i+1,w,c
  6563  00158A  6EDA               	movwf	fsr2h,c
  6564  00158C  0E00               	movlw	low _i2c_r_reg
  6565  00158E  2420               	addwf	load_i2c_registers@i,w,c
  6566  001590  6EE1               	movwf	fsr1l,c
  6567  001592  0E01               	movlw	high _i2c_r_reg
  6568  001594  2021               	addwfc	load_i2c_registers@i+1,w,c
  6569  001596  6EE2               	movwf	fsr1h,c
  6570  001598  CFDF FFE7          	movff	indf2,indf1
  6571  00159C  4A20               	infsnz	load_i2c_registers@i,f,c
  6572  00159E  2A21               	incf	load_i2c_registers@i+1,f,c
  6573  0015A0  D7E7               	goto	l4290
  6574  0015A2                     l4300:
  6575                           
  6576                           ;main.c: 319: for (int i = 9; i < 18; i++)
  6577  0015A2  0E00               	movlw	0
  6578  0015A4  6E23               	movwf	load_i2c_registers@i_841+1,c
  6579  0015A6  0E09               	movlw	9
  6580  0015A8  6E22               	movwf	load_i2c_registers@i_841,c
  6581  0015AA                     l4302:
  6582  0015AA  BE23               	btfsc	load_i2c_registers@i_841+1,7,c
  6583  0015AC  D006               	goto	l4306
  6584  0015AE  5023               	movf	load_i2c_registers@i_841+1,w,c
  6585  0015B0  E121               	bnz	l4312
  6586  0015B2  0E12               	movlw	18
  6587  0015B4  5C22               	subwf	load_i2c_registers@i_841,w,c
  6588  0015B6  B0D8               	btfsc	status,0,c
  6589  0015B8  D01D               	goto	l4312
  6590  0015BA                     l4306:
  6591                           
  6592                           ;main.c: 320: i2c_r_reg[i] = current_pin[i - 9];
  6593  0015BA  0EF7               	movlw	247
  6594  0015BC  6E18               	movwf	??_load_i2c_registers& (0+255),c
  6595  0015BE  0EFF               	movlw	255
  6596  0015C0  6E19               	movwf	(??_load_i2c_registers+1)& (0+255),c
  6597  0015C2  C022  F01A         	movff	load_i2c_registers@i_841,??_load_i2c_registers+2
  6598  0015C6  C023  F01B         	movff	load_i2c_registers@i_841+1,??_load_i2c_registers+3
  6599  0015CA  5018               	movf	??_load_i2c_registers,w,c
  6600  0015CC  261A               	addwf	??_load_i2c_registers+2,f,c
  6601  0015CE  5019               	movf	??_load_i2c_registers+1,w,c
  6602  0015D0  221B               	addwfc	??_load_i2c_registers+3,f,c
  6603  0015D2  0ECA               	movlw	low _current_pin
  6604  0015D4  241A               	addwf	??_load_i2c_registers+2,w,c
  6605  0015D6  6ED9               	movwf	fsr2l,c
  6606  0015D8  0E00               	movlw	high _current_pin
  6607  0015DA  201B               	addwfc	??_load_i2c_registers+3,w,c
  6608  0015DC  6EDA               	movwf	fsr2h,c
  6609  0015DE  0E00               	movlw	low _i2c_r_reg
  6610  0015E0  2422               	addwf	load_i2c_registers@i_841,w,c
  6611  0015E2  6EE1               	movwf	fsr1l,c
  6612  0015E4  0E01               	movlw	high _i2c_r_reg
  6613  0015E6  2023               	addwfc	load_i2c_registers@i_841+1,w,c
  6614  0015E8  6EE2               	movwf	fsr1h,c
  6615  0015EA  CFDF FFE7          	movff	indf2,indf1
  6616  0015EE  4A22               	infsnz	load_i2c_registers@i_841,f,c
  6617  0015F0  2A23               	incf	load_i2c_registers@i_841+1,f,c
  6618  0015F2  D7DB               	goto	l4302
  6619  0015F4                     l4312:
  6620                           
  6621                           ;main.c: 323: int checksum = 0x00;
  6622  0015F4  0E00               	movlw	0
  6623  0015F6  6E1D               	movwf	load_i2c_registers@checksum+1,c
  6624  0015F8  0E00               	movlw	0
  6625  0015FA  6E1C               	movwf	load_i2c_registers@checksum,c
  6626                           
  6627                           ;main.c: 324: for (int i = 0; i < 31; i++)
  6628  0015FC  0E00               	movlw	0
  6629  0015FE  6E1F               	movwf	load_i2c_registers@i_843+1,c
  6630  001600  0E00               	movlw	0
  6631  001602  6E1E               	movwf	load_i2c_registers@i_843,c
  6632  001604                     l4314:
  6633  001604  BE1F               	btfsc	load_i2c_registers@i_843+1,7,c
  6634  001606  D006               	goto	l4318
  6635  001608  501F               	movf	load_i2c_registers@i_843+1,w,c
  6636  00160A  E113               	bnz	l4324
  6637  00160C  0E1F               	movlw	31
  6638  00160E  5C1E               	subwf	load_i2c_registers@i_843,w,c
  6639  001610  B0D8               	btfsc	status,0,c
  6640  001612  D00F               	goto	l4324
  6641  001614                     l4318:
  6642                           
  6643                           ;main.c: 325: {
  6644                           ;main.c: 326: checksum += i2c_r_reg[i];
  6645  001614  0E00               	movlw	low _i2c_r_reg
  6646  001616  241E               	addwf	load_i2c_registers@i_843,w,c
  6647  001618  6ED9               	movwf	fsr2l,c
  6648  00161A  0E01               	movlw	high _i2c_r_reg
  6649  00161C  201F               	addwfc	load_i2c_registers@i_843+1,w,c
  6650  00161E  6EDA               	movwf	fsr2h,c
  6651  001620  50DF               	movf	indf2,w,c
  6652  001622  6E18               	movwf	??_load_i2c_registers& (0+255),c
  6653  001624  5018               	movf	??_load_i2c_registers,w,c
  6654  001626  261C               	addwf	load_i2c_registers@checksum,f,c
  6655  001628  0E00               	movlw	0
  6656  00162A  221D               	addwfc	load_i2c_registers@checksum+1,f,c
  6657  00162C  4A1E               	infsnz	load_i2c_registers@i_843,f,c
  6658  00162E  2A1F               	incf	load_i2c_registers@i_843+1,f,c
  6659  001630  D7E9               	goto	l4314
  6660  001632                     l4324:
  6661                           
  6662                           ;main.c: 327: }
  6663                           ;main.c: 328: checksum /= 32;
  6664  001632  C01C  F010         	movff	load_i2c_registers@checksum,___awdiv@dividend
  6665  001636  C01D  F011         	movff	load_i2c_registers@checksum+1,___awdiv@dividend+1
  6666  00163A  0E00               	movlw	0
  6667  00163C  6E13               	movwf	___awdiv@divisor+1,c
  6668  00163E  0E20               	movlw	32
  6669  001640  6E12               	movwf	___awdiv@divisor,c
  6670  001642  EC7C  F00B         	call	___awdiv	;wreg free
  6671  001646  C010  F01C         	movff	?___awdiv,load_i2c_registers@checksum
  6672  00164A  C011  F01D         	movff	?___awdiv+1,load_i2c_registers@checksum+1
  6673                           
  6674                           ;main.c: 329: i2c_r_reg[31] = checksum;
  6675  00164E  C01C  F11F         	movff	load_i2c_registers@checksum,_i2c_r_reg+31	;volatile
  6676  001652  0012               	return		;funcret
  6677  001654                     __end_of_load_i2c_registers:
  6678                           	opt stack 0
  6679                           tblptru	equ	0xFF8
  6680                           tblptrh	equ	0xFF7
  6681                           tblptrl	equ	0xFF6
  6682                           tablat	equ	0xFF5
  6683                           prodh	equ	0xFF4
  6684                           prodl	equ	0xFF3
  6685                           intcon	equ	0xFF2
  6686                           indf0	equ	0xFEF
  6687                           postinc0	equ	0xFEE
  6688                           fsr0h	equ	0xFEA
  6689                           fsr0l	equ	0xFE9
  6690                           wreg	equ	0xFE8
  6691                           indf1	equ	0xFE7
  6692                           postdec1	equ	0xFE5
  6693                           plusw1	equ	0xFE3
  6694                           fsr1h	equ	0xFE2
  6695                           fsr1l	equ	0xFE1
  6696                           indf2	equ	0xFDF
  6697                           postinc2	equ	0xFDE
  6698                           plusw2	equ	0xFDB
  6699                           fsr2h	equ	0xFDA
  6700                           fsr2l	equ	0xFD9
  6701                           status	equ	0xFD8
  6702                           
  6703 ;; *************** function ___awdiv *****************
  6704 ;; Defined at:
  6705 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  6706 ;; Parameters:    Size  Location     Type
  6707 ;;  dividend        2   15[COMRAM] int 
  6708 ;;  divisor         2   17[COMRAM] int 
  6709 ;; Auto vars:     Size  Location     Type
  6710 ;;  quotient        2   21[COMRAM] int 
  6711 ;;  sign            1   20[COMRAM] unsigned char 
  6712 ;;  counter         1   19[COMRAM] unsigned char 
  6713 ;; Return value:  Size  Location     Type
  6714 ;;                  2   15[COMRAM] int 
  6715 ;; Registers used:
  6716 ;;		wreg, status,2, status,0
  6717 ;; Tracked objects:
  6718 ;;		On entry : 0/0
  6719 ;;		On exit  : 0/0
  6720 ;;		Unchanged: 0/0
  6721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6722 ;;      Params:         4       0       0       0       0       0       0
  6723 ;;      Locals:         4       0       0       0       0       0       0
  6724 ;;      Temps:          0       0       0       0       0       0       0
  6725 ;;      Totals:         8       0       0       0       0       0       0
  6726 ;;Total ram usage:        8 bytes
  6727 ;; Hardware stack levels used:    1
  6728 ;; Hardware stack levels required when called:    1
  6729 ;; This function calls:
  6730 ;;		Nothing
  6731 ;; This function is called by:
  6732 ;;		_load_i2c_registers
  6733 ;;		_start_routine
  6734 ;;		_running_display
  6735 ;; This function uses a non-reentrant model
  6736 ;;
  6737                           
  6738                           	psect	text17
  6739  0016F8                     __ptext17:
  6740                           	opt stack 0
  6741  0016F8                     ___awdiv:
  6742                           	opt stack 28
  6743                           
  6744                           ;incstack = 0
  6745  0016F8  0E00               	movlw	0
  6746  0016FA  6E15               	movwf	___awdiv@sign,c
  6747  0016FC  AE13               	btfss	___awdiv@divisor+1,7,c
  6748  0016FE  D006               	goto	l3866
  6749  001700  6C12               	negf	___awdiv@divisor,c
  6750  001702  1E13               	comf	___awdiv@divisor+1,f,c
  6751  001704  B0D8               	btfsc	status,0,c
  6752  001706  2A13               	incf	___awdiv@divisor+1,f,c
  6753  001708  0E01               	movlw	1
  6754  00170A  6E15               	movwf	___awdiv@sign,c
  6755  00170C                     l3866:
  6756  00170C  AE11               	btfss	___awdiv@dividend+1,7,c
  6757  00170E  D006               	goto	l3872
  6758  001710  6C10               	negf	___awdiv@dividend,c
  6759  001712  1E11               	comf	___awdiv@dividend+1,f,c
  6760  001714  B0D8               	btfsc	status,0,c
  6761  001716  2A11               	incf	___awdiv@dividend+1,f,c
  6762  001718  0E01               	movlw	1
  6763  00171A  1A15               	xorwf	___awdiv@sign,f,c
  6764  00171C                     l3872:
  6765  00171C  0E00               	movlw	0
  6766  00171E  6E17               	movwf	___awdiv@quotient+1,c
  6767  001720  0E00               	movlw	0
  6768  001722  6E16               	movwf	___awdiv@quotient,c
  6769  001724  5012               	movf	___awdiv@divisor,w,c
  6770  001726  1013               	iorwf	___awdiv@divisor+1,w,c
  6771  001728  B4D8               	btfsc	status,2,c
  6772  00172A  D01C               	goto	l3894
  6773  00172C  0E01               	movlw	1
  6774  00172E  6E14               	movwf	___awdiv@counter,c
  6775  001730  D004               	goto	l3880
  6776  001732                     l3878:
  6777  001732  90D8               	bcf	status,0,c
  6778  001734  3612               	rlcf	___awdiv@divisor,f,c
  6779  001736  3613               	rlcf	___awdiv@divisor+1,f,c
  6780  001738  2A14               	incf	___awdiv@counter,f,c
  6781  00173A                     l3880:
  6782  00173A  AE13               	btfss	___awdiv@divisor+1,7,c
  6783  00173C  D7FA               	goto	l3878
  6784  00173E                     l3882:
  6785  00173E  90D8               	bcf	status,0,c
  6786  001740  3616               	rlcf	___awdiv@quotient,f,c
  6787  001742  3617               	rlcf	___awdiv@quotient+1,f,c
  6788  001744  5012               	movf	___awdiv@divisor,w,c
  6789  001746  5C10               	subwf	___awdiv@dividend,w,c
  6790  001748  5013               	movf	___awdiv@divisor+1,w,c
  6791  00174A  5811               	subwfb	___awdiv@dividend+1,w,c
  6792  00174C  A0D8               	btfss	status,0,c
  6793  00174E  D005               	goto	l3890
  6794  001750  5012               	movf	___awdiv@divisor,w,c
  6795  001752  5E10               	subwf	___awdiv@dividend,f,c
  6796  001754  5013               	movf	___awdiv@divisor+1,w,c
  6797  001756  5A11               	subwfb	___awdiv@dividend+1,f,c
  6798  001758  8016               	bsf	___awdiv@quotient,0,c
  6799  00175A                     l3890:
  6800  00175A  90D8               	bcf	status,0,c
  6801  00175C  3213               	rrcf	___awdiv@divisor+1,f,c
  6802  00175E  3212               	rrcf	___awdiv@divisor,f,c
  6803  001760  2E14               	decfsz	___awdiv@counter,f,c
  6804  001762  D7ED               	goto	l3882
  6805  001764                     l3894:
  6806  001764  5015               	movf	___awdiv@sign,w,c
  6807  001766  B4D8               	btfsc	status,2,c
  6808  001768  D004               	goto	l3898
  6809  00176A  6C16               	negf	___awdiv@quotient,c
  6810  00176C  1E17               	comf	___awdiv@quotient+1,f,c
  6811  00176E  B0D8               	btfsc	status,0,c
  6812  001770  2A17               	incf	___awdiv@quotient+1,f,c
  6813  001772                     l3898:
  6814  001772  C016  F010         	movff	___awdiv@quotient,?___awdiv
  6815  001776  C017  F011         	movff	___awdiv@quotient+1,?___awdiv+1
  6816  00177A  0012               	return	
  6817  00177C                     __end_of___awdiv:
  6818                           	opt stack 0
  6819                           tblptru	equ	0xFF8
  6820                           tblptrh	equ	0xFF7
  6821                           tblptrl	equ	0xFF6
  6822                           tablat	equ	0xFF5
  6823                           prodh	equ	0xFF4
  6824                           prodl	equ	0xFF3
  6825                           intcon	equ	0xFF2
  6826                           indf0	equ	0xFEF
  6827                           postinc0	equ	0xFEE
  6828                           fsr0h	equ	0xFEA
  6829                           fsr0l	equ	0xFE9
  6830                           wreg	equ	0xFE8
  6831                           indf1	equ	0xFE7
  6832                           postdec1	equ	0xFE5
  6833                           plusw1	equ	0xFE3
  6834                           fsr1h	equ	0xFE2
  6835                           fsr1l	equ	0xFE1
  6836                           indf2	equ	0xFDF
  6837                           postinc2	equ	0xFDE
  6838                           plusw2	equ	0xFDB
  6839                           fsr2h	equ	0xFDA
  6840                           fsr2l	equ	0xFD9
  6841                           status	equ	0xFD8
  6842                           
  6843 ;; *************** function _Lcd_Init *****************
  6844 ;; Defined at:
  6845 ;;		line 76 in file "lcd.h"
  6846 ;; Parameters:    Size  Location     Type
  6847 ;;		None
  6848 ;; Auto vars:     Size  Location     Type
  6849 ;;		None
  6850 ;; Return value:  Size  Location     Type
  6851 ;;                  1    wreg      void 
  6852 ;; Registers used:
  6853 ;;		wreg, status,2, cstack
  6854 ;; Tracked objects:
  6855 ;;		On entry : 0/0
  6856 ;;		On exit  : 0/0
  6857 ;;		Unchanged: 0/0
  6858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6859 ;;      Params:         0       0       0       0       0       0       0
  6860 ;;      Locals:         0       0       0       0       0       0       0
  6861 ;;      Temps:          1       0       0       0       0       0       0
  6862 ;;      Totals:         1       0       0       0       0       0       0
  6863 ;;Total ram usage:        1 bytes
  6864 ;; Hardware stack levels used:    1
  6865 ;; Hardware stack levels required when called:    3
  6866 ;; This function calls:
  6867 ;;		_Lcd_Cmd
  6868 ;;		_Lcd_Port
  6869 ;; This function is called by:
  6870 ;;		_main
  6871 ;; This function uses a non-reentrant model
  6872 ;;
  6873                           
  6874                           	psect	text18
  6875  0017FA                     __ptext18:
  6876                           	opt stack 0
  6877  0017FA                     _Lcd_Init:
  6878                           	opt stack 27
  6879                           
  6880                           ;lcd.h: 78: Lcd_Port(0x00);
  6881                           
  6882                           ;incstack = 0
  6883  0017FA  0E00               	movlw	0
  6884  0017FC  EC7E  F00D         	call	_Lcd_Port
  6885                           
  6886                           ;lcd.h: 79: _delay((unsigned long)((20)*(16000000/4000.0)));
  6887  001800  0E68               	movlw	104
  6888  001802  6E12               	movwf	??_Lcd_Init& (0+255),c
  6889  001804  0EE4               	movlw	228
  6890  001806                     u4887:
  6891  001806  2EE8               	decfsz	wreg,f,c
  6892  001808  D7FE               	goto	u4887
  6893  00180A  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
  6894  00180C  D7FC               	goto	u4887
  6895  00180E  F000 F000          	nop2	
  6896                           
  6897                           ;lcd.h: 80: Lcd_Cmd(0x03);
  6898  001812  0E03               	movlw	3
  6899  001814  ECED  F00D         	call	_Lcd_Cmd
  6900                           
  6901                           ;lcd.h: 81: _delay((unsigned long)((5)*(16000000/4000.0)));
  6902  001818  0E1A               	movlw	26
  6903  00181A  6E12               	movwf	??_Lcd_Init& (0+255),c
  6904  00181C  0EF8               	movlw	248
  6905  00181E                     u4897:
  6906  00181E  2EE8               	decfsz	wreg,f,c
  6907  001820  D7FE               	goto	u4897
  6908  001822  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
  6909  001824  D7FC               	goto	u4897
  6910  001826  F000 F000          	nop2	
  6911                           
  6912                           ;lcd.h: 82: Lcd_Cmd(0x03);
  6913  00182A  0E03               	movlw	3
  6914  00182C  ECED  F00D         	call	_Lcd_Cmd
  6915                           
  6916                           ;lcd.h: 83: _delay((unsigned long)((11)*(16000000/4000.0)));
  6917  001830  0E3A               	movlw	58
  6918  001832  6E12               	movwf	??_Lcd_Init& (0+255),c
  6919  001834  0E23               	movlw	35
  6920  001836                     u4907:
  6921  001836  2EE8               	decfsz	wreg,f,c
  6922  001838  D7FE               	goto	u4907
  6923  00183A  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
  6924  00183C  D7FC               	goto	u4907
  6925  00183E  F000               	nop	
  6926                           
  6927                           ;lcd.h: 84: Lcd_Cmd(0x03);
  6928  001840  0E03               	movlw	3
  6929  001842  ECED  F00D         	call	_Lcd_Cmd
  6930                           
  6931                           ;lcd.h: 86: Lcd_Cmd(0x02);
  6932  001846  0E02               	movlw	2
  6933  001848  ECED  F00D         	call	_Lcd_Cmd
  6934                           
  6935                           ;lcd.h: 87: Lcd_Cmd(0x02);
  6936  00184C  0E02               	movlw	2
  6937  00184E  ECED  F00D         	call	_Lcd_Cmd
  6938                           
  6939                           ;lcd.h: 88: Lcd_Cmd(0x08);
  6940  001852  0E08               	movlw	8
  6941  001854  ECED  F00D         	call	_Lcd_Cmd
  6942                           
  6943                           ;lcd.h: 89: Lcd_Cmd(0x00);
  6944  001858  0E00               	movlw	0
  6945  00185A  ECED  F00D         	call	_Lcd_Cmd
  6946                           
  6947                           ;lcd.h: 90: Lcd_Cmd(0x0C);
  6948  00185E  0E0C               	movlw	12
  6949  001860  ECED  F00D         	call	_Lcd_Cmd
  6950                           
  6951                           ;lcd.h: 91: Lcd_Cmd(0x00);
  6952  001864  0E00               	movlw	0
  6953  001866  ECED  F00D         	call	_Lcd_Cmd
  6954                           
  6955                           ;lcd.h: 92: Lcd_Cmd(0x06);
  6956  00186A  0E06               	movlw	6
  6957  00186C  ECED  F00D         	call	_Lcd_Cmd
  6958  001870  0012               	return		;funcret
  6959  001872                     __end_of_Lcd_Init:
  6960                           	opt stack 0
  6961                           tblptru	equ	0xFF8
  6962                           tblptrh	equ	0xFF7
  6963                           tblptrl	equ	0xFF6
  6964                           tablat	equ	0xFF5
  6965                           prodh	equ	0xFF4
  6966                           prodl	equ	0xFF3
  6967                           intcon	equ	0xFF2
  6968                           indf0	equ	0xFEF
  6969                           postinc0	equ	0xFEE
  6970                           fsr0h	equ	0xFEA
  6971                           fsr0l	equ	0xFE9
  6972                           wreg	equ	0xFE8
  6973                           indf1	equ	0xFE7
  6974                           postdec1	equ	0xFE5
  6975                           plusw1	equ	0xFE3
  6976                           fsr1h	equ	0xFE2
  6977                           fsr1l	equ	0xFE1
  6978                           indf2	equ	0xFDF
  6979                           postinc2	equ	0xFDE
  6980                           plusw2	equ	0xFDB
  6981                           fsr2h	equ	0xFDA
  6982                           fsr2l	equ	0xFD9
  6983                           status	equ	0xFD8
  6984                           
  6985 ;; *************** function _Lcd_Cmd *****************
  6986 ;; Defined at:
  6987 ;;		line 38 in file "lcd.h"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;  a               1    wreg     unsigned char 
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;  a               1   16[COMRAM] unsigned char 
  6992 ;; Return value:  Size  Location     Type
  6993 ;;                  1    wreg      void 
  6994 ;; Registers used:
  6995 ;;		wreg, status,2, cstack
  6996 ;; Tracked objects:
  6997 ;;		On entry : 0/0
  6998 ;;		On exit  : 0/0
  6999 ;;		Unchanged: 0/0
  7000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7001 ;;      Params:         0       0       0       0       0       0       0
  7002 ;;      Locals:         1       0       0       0       0       0       0
  7003 ;;      Temps:          0       0       0       0       0       0       0
  7004 ;;      Totals:         1       0       0       0       0       0       0
  7005 ;;Total ram usage:        1 bytes
  7006 ;; Hardware stack levels used:    1
  7007 ;; Hardware stack levels required when called:    2
  7008 ;; This function calls:
  7009 ;;		_Lcd_Port
  7010 ;; This function is called by:
  7011 ;;		_Lcd_Clear
  7012 ;;		_Lcd_Set_Cursor
  7013 ;;		_Lcd_Init
  7014 ;;		_Lcd_Shift_Right
  7015 ;;		_Lcd_Shift_Left
  7016 ;; This function uses a non-reentrant model
  7017 ;;
  7018                           
  7019                           	psect	text19
  7020  001BDA                     __ptext19:
  7021                           	opt stack 0
  7022  001BDA                     _Lcd_Cmd:
  7023                           	opt stack 25
  7024                           
  7025                           ;incstack = 0
  7026                           ;Lcd_Cmd@a stored from wreg
  7027  001BDA  6E11               	movwf	Lcd_Cmd@a,c
  7028                           
  7029                           ;lcd.h: 40: PORTDbits.RD5 = 0;
  7030  001BDC  9A83               	bcf	3971,5,c	;volatile
  7031                           
  7032                           ;lcd.h: 41: Lcd_Port(a);
  7033  001BDE  5011               	movf	Lcd_Cmd@a,w,c
  7034  001BE0  EC7E  F00D         	call	_Lcd_Port
  7035                           
  7036                           ;lcd.h: 42: PORTDbits.RD4 = 1;
  7037  001BE4  8883               	bsf	3971,4,c	;volatile
  7038                           
  7039                           ;lcd.h: 44: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7040  001BE6  0EC8               	movlw	200
  7041  001BE8                     u4917:
  7042  001BE8  F000               	nop	
  7043  001BEA  2EE8               	decfsz	wreg,f,c
  7044  001BEC  D7FD               	goto	u4917
  7045                           
  7046                           ;lcd.h: 45: PORTDbits.RD4 = 0;
  7047  001BEE  9883               	bcf	3971,4,c	;volatile
  7048  001BF0  0012               	return		;funcret
  7049  001BF2                     __end_of_Lcd_Cmd:
  7050                           	opt stack 0
  7051                           tblptru	equ	0xFF8
  7052                           tblptrh	equ	0xFF7
  7053                           tblptrl	equ	0xFF6
  7054                           tablat	equ	0xFF5
  7055                           prodh	equ	0xFF4
  7056                           prodl	equ	0xFF3
  7057                           intcon	equ	0xFF2
  7058                           indf0	equ	0xFEF
  7059                           postinc0	equ	0xFEE
  7060                           fsr0h	equ	0xFEA
  7061                           fsr0l	equ	0xFE9
  7062                           wreg	equ	0xFE8
  7063                           indf1	equ	0xFE7
  7064                           postdec1	equ	0xFE5
  7065                           plusw1	equ	0xFE3
  7066                           fsr1h	equ	0xFE2
  7067                           fsr1l	equ	0xFE1
  7068                           indf2	equ	0xFDF
  7069                           postinc2	equ	0xFDE
  7070                           plusw2	equ	0xFDB
  7071                           fsr2h	equ	0xFDA
  7072                           fsr2l	equ	0xFD9
  7073                           status	equ	0xFD8
  7074                           
  7075 ;; *************** function _Lcd_Port *****************
  7076 ;; Defined at:
  7077 ;;		line 16 in file "lcd.h"
  7078 ;; Parameters:    Size  Location     Type
  7079 ;;  a               1    wreg     unsigned char 
  7080 ;; Auto vars:     Size  Location     Type
  7081 ;;  a               1   15[COMRAM] unsigned char 
  7082 ;; Return value:  Size  Location     Type
  7083 ;;                  1    wreg      void 
  7084 ;; Registers used:
  7085 ;;		wreg
  7086 ;; Tracked objects:
  7087 ;;		On entry : 0/0
  7088 ;;		On exit  : 0/0
  7089 ;;		Unchanged: 0/0
  7090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7091 ;;      Params:         0       0       0       0       0       0       0
  7092 ;;      Locals:         1       0       0       0       0       0       0
  7093 ;;      Temps:          0       0       0       0       0       0       0
  7094 ;;      Totals:         1       0       0       0       0       0       0
  7095 ;;Total ram usage:        1 bytes
  7096 ;; Hardware stack levels used:    1
  7097 ;; Hardware stack levels required when called:    1
  7098 ;; This function calls:
  7099 ;;		Nothing
  7100 ;; This function is called by:
  7101 ;;		_Lcd_Cmd
  7102 ;;		_Lcd_Init
  7103 ;;		_Lcd_Write_Char
  7104 ;; This function uses a non-reentrant model
  7105 ;;
  7106                           
  7107                           	psect	text20
  7108  001AFC                     __ptext20:
  7109                           	opt stack 0
  7110  001AFC                     _Lcd_Port:
  7111                           	opt stack 25
  7112                           
  7113                           ;incstack = 0
  7114                           ;Lcd_Port@a stored from wreg
  7115  001AFC  6E10               	movwf	Lcd_Port@a,c
  7116                           
  7117                           ;lcd.h: 18: if(a & 1)
  7118  001AFE  A010               	btfss	Lcd_Port@a,0,c
  7119  001B00  D002               	goto	l73
  7120                           
  7121                           ;lcd.h: 19: PORTDbits.RD0 = 1;
  7122  001B02  8083               	bsf	3971,0,c	;volatile
  7123  001B04  D001               	goto	l3576
  7124  001B06                     l73:
  7125                           
  7126                           ;lcd.h: 20: else
  7127                           ;lcd.h: 21: PORTDbits.RD0 = 0;
  7128  001B06  9083               	bcf	3971,0,c	;volatile
  7129  001B08                     l3576:
  7130                           
  7131                           ;lcd.h: 23: if(a & 2)
  7132  001B08  A210               	btfss	Lcd_Port@a,1,c
  7133  001B0A  D002               	goto	l75
  7134                           
  7135                           ;lcd.h: 24: PORTDbits.RD1 = 1;
  7136  001B0C  8283               	bsf	3971,1,c	;volatile
  7137  001B0E  D001               	goto	l3580
  7138  001B10                     l75:
  7139                           
  7140                           ;lcd.h: 25: else
  7141                           ;lcd.h: 26: PORTDbits.RD1 = 0;
  7142  001B10  9283               	bcf	3971,1,c	;volatile
  7143  001B12                     l3580:
  7144                           
  7145                           ;lcd.h: 28: if(a & 4)
  7146  001B12  A410               	btfss	Lcd_Port@a,2,c
  7147  001B14  D002               	goto	l77
  7148                           
  7149                           ;lcd.h: 29: PORTDbits.RD2 = 1;
  7150  001B16  8483               	bsf	3971,2,c	;volatile
  7151  001B18  D001               	goto	l3584
  7152  001B1A                     l77:
  7153                           
  7154                           ;lcd.h: 30: else
  7155                           ;lcd.h: 31: PORTDbits.RD2 = 0;
  7156  001B1A  9483               	bcf	3971,2,c	;volatile
  7157  001B1C                     l3584:
  7158                           
  7159                           ;lcd.h: 33: if(a & 8)
  7160  001B1C  A610               	btfss	Lcd_Port@a,3,c
  7161  001B1E  D002               	goto	l79
  7162                           
  7163                           ;lcd.h: 34: PORTDbits.RD3 = 1;
  7164  001B20  8683               	bsf	3971,3,c	;volatile
  7165  001B22  0012               	return	
  7166  001B24                     l79:
  7167                           
  7168                           ;lcd.h: 35: else
  7169                           ;lcd.h: 36: PORTDbits.RD3 = 0;
  7170  001B24  9683               	bcf	3971,3,c	;volatile
  7171  001B26  0012               	return	
  7172  001B28                     __end_of_Lcd_Port:
  7173                           	opt stack 0
  7174                           tblptru	equ	0xFF8
  7175                           tblptrh	equ	0xFF7
  7176                           tblptrl	equ	0xFF6
  7177                           tablat	equ	0xFF5
  7178                           prodh	equ	0xFF4
  7179                           prodl	equ	0xFF3
  7180                           intcon	equ	0xFF2
  7181                           indf0	equ	0xFEF
  7182                           postinc0	equ	0xFEE
  7183                           fsr0h	equ	0xFEA
  7184                           fsr0l	equ	0xFE9
  7185                           wreg	equ	0xFE8
  7186                           indf1	equ	0xFE7
  7187                           postdec1	equ	0xFE5
  7188                           plusw1	equ	0xFE3
  7189                           fsr1h	equ	0xFE2
  7190                           fsr1l	equ	0xFE1
  7191                           indf2	equ	0xFDF
  7192                           postinc2	equ	0xFDE
  7193                           plusw2	equ	0xFDB
  7194                           fsr2h	equ	0xFDA
  7195                           fsr2l	equ	0xFD9
  7196                           status	equ	0xFD8
  7197                           
  7198 ;; *************** function _ISR *****************
  7199 ;; Defined at:
  7200 ;;		line 335 in file "main.c"
  7201 ;; Parameters:    Size  Location     Type
  7202 ;;		None
  7203 ;; Auto vars:     Size  Location     Type
  7204 ;;  sspBuf          1   14[COMRAM] unsigned char 
  7205 ;; Return value:  Size  Location     Type
  7206 ;;                  1    wreg      void 
  7207 ;; Registers used:
  7208 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7209 ;; Tracked objects:
  7210 ;;		On entry : 0/0
  7211 ;;		On exit  : 0/0
  7212 ;;		Unchanged: 0/0
  7213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7214 ;;      Params:         0       0       0       0       0       0       0
  7215 ;;      Locals:         1       0       0       0       0       0       0
  7216 ;;      Temps:         14       0       0       0       0       0       0
  7217 ;;      Totals:        15       0       0       0       0       0       0
  7218 ;;Total ram usage:       15 bytes
  7219 ;; Hardware stack levels used:    1
  7220 ;; This function calls:
  7221 ;;		Nothing
  7222 ;; This function is called by:
  7223 ;;		Interrupt level 2
  7224 ;; This function uses a non-reentrant model
  7225 ;;
  7226                           
  7227                           	psect	intcode
  7228  000008                     __pintcode:
  7229                           	opt stack 0
  7230  000008                     _ISR:
  7231                           	opt stack 25
  7232                           
  7233                           ;incstack = 0
  7234  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7235  00000A  CFFA F001          	movff	pclath,??_ISR
  7236  00000E  CFFB F002          	movff	pclatu,??_ISR+1
  7237  000012  CFE9 F003          	movff	fsr0l,??_ISR+2
  7238  000016  CFEA F004          	movff	fsr0h,??_ISR+3
  7239  00001A  CFE1 F005          	movff	fsr1l,??_ISR+4
  7240  00001E  CFE2 F006          	movff	fsr1h,??_ISR+5
  7241  000022  CFD9 F007          	movff	fsr2l,??_ISR+6
  7242  000026  CFDA F008          	movff	fsr2h,??_ISR+7
  7243  00002A  CFF3 F009          	movff	prodl,??_ISR+8
  7244  00002E  CFF4 F00A          	movff	prodh,??_ISR+9
  7245  000032  CFF6 F00B          	movff	tblptrl,??_ISR+10
  7246  000036  CFF7 F00C          	movff	tblptrh,??_ISR+11
  7247  00003A  CFF8 F00D          	movff	tblptru,??_ISR+12
  7248  00003E  CFF5 F00E          	movff	tablat,??_ISR+13
  7249                           
  7250                           ;main.c: 337: unsigned char sspBuf;
  7251                           ;main.c: 339: if (PIR1bits.SSPIF) {
  7252  000042  A69E               	btfss	3998,3,c	;volatile
  7253  000044  D03E               	goto	i2l296
  7254                           
  7255                           ;main.c: 341: if (!SSPSTATbits.D_NOT_A) {
  7256  000046  BAC7               	btfsc	4039,5,c	;volatile
  7257  000048  D013               	goto	i2l3544
  7258                           
  7259                           ;main.c: 345: i2c_byte_count = 0;
  7260  00004A  0E00               	movlw	0
  7261  00004C  6E4E               	movwf	_i2c_byte_count,c	;volatile
  7262                           
  7263                           ;main.c: 347: if (SSPSTATbits.BF) {
  7264  00004E  B0C7               	btfsc	4039,0,c	;volatile
  7265                           
  7266                           ;main.c: 349: sspBuf = SSPBUF;
  7267  000050  CFC9 F00F          	movff	4041,ISR@sspBuf	;volatile
  7268                           
  7269                           ;main.c: 350: }
  7270                           ;main.c: 352: if (SSPSTATbits.R_NOT_W) {
  7271  000054  A4C7               	btfss	4039,2,c	;volatile
  7272  000056  D031               	goto	i2l3566
  7273                           
  7274                           ;main.c: 354: SSPCON1bits.WCOL = 0;
  7275  000058  9EC6               	bcf	4038,7,c	;volatile
  7276                           
  7277                           ;main.c: 355: SSPBUF = i2c_r_reg[i2c_reg_addr++];
  7278  00005A  504F               	movf	_i2c_reg_addr,w,c	;volatile
  7279  00005C  0D01               	mullw	1
  7280  00005E  0E00               	movlw	low _i2c_r_reg
  7281  000060  24F3               	addwf	prodl,w,c
  7282  000062  6ED9               	movwf	fsr2l,c
  7283  000064  0E01               	movlw	high _i2c_r_reg
  7284  000066  20F4               	addwfc	prodh,w,c
  7285  000068  6EDA               	movwf	fsr2h,c
  7286  00006A  50DF               	movf	indf2,w,c
  7287  00006C  6EC9               	movwf	4041,c	;volatile
  7288  00006E  D024               	goto	i2l3564
  7289  000070                     i2l3544:
  7290                           
  7291                           ;main.c: 362: i2c_byte_count++;
  7292  000070  2A4E               	incf	_i2c_byte_count,f,c	;volatile
  7293                           
  7294                           ;main.c: 364: if (SSPSTATbits.BF) {
  7295  000072  B0C7               	btfsc	4039,0,c	;volatile
  7296                           
  7297                           ;main.c: 365: sspBuf = SSPBUF;
  7298  000074  CFC9 F00F          	movff	4041,ISR@sspBuf	;volatile
  7299                           
  7300                           ;main.c: 366: }
  7301                           ;main.c: 368: if (SSPSTATbits.R_NOT_W) {
  7302  000078  A4C7               	btfss	4039,2,c	;volatile
  7303  00007A  D00E               	goto	i2l3558
  7304                           
  7305                           ;main.c: 371: SSPCON1bits.WCOL = 0;
  7306  00007C  9EC6               	bcf	4038,7,c	;volatile
  7307                           
  7308                           ;main.c: 372: SSPBUF = i2c_r_reg[i2c_reg_addr++];
  7309  00007E  504F               	movf	_i2c_reg_addr,w,c	;volatile
  7310  000080  0D01               	mullw	1
  7311  000082  0E00               	movlw	low _i2c_r_reg
  7312  000084  24F3               	addwf	prodl,w,c
  7313  000086  6ED9               	movwf	fsr2l,c
  7314  000088  0E01               	movlw	high _i2c_r_reg
  7315  00008A  20F4               	addwfc	prodh,w,c
  7316  00008C  6EDA               	movwf	fsr2h,c
  7317  00008E  50DF               	movf	indf2,w,c
  7318  000090  6EC9               	movwf	4041,c	;volatile
  7319  000092  2A4F               	incf	_i2c_reg_addr,f,c	;volatile
  7320                           
  7321                           ;main.c: 373: LATDbits.LATD6 = 1;
  7322  000094  8C8C               	bsf	3980,6,c	;volatile
  7323                           
  7324                           ;main.c: 375: } else {
  7325  000096  D011               	goto	i2l3566
  7326  000098                     i2l3558:
  7327                           
  7328                           ;main.c: 377: if (i2c_byte_count == 1) {
  7329  000098  044E               	decf	_i2c_byte_count,w,c	;volatile
  7330  00009A  A4D8               	btfss	status,2,c
  7331  00009C  D003               	goto	i2l3562
  7332                           
  7333                           ;main.c: 379: i2c_reg_addr = sspBuf;
  7334  00009E  C00F  F04F         	movff	ISR@sspBuf,_i2c_reg_addr	;volatile
  7335                           
  7336                           ;main.c: 381: } else {
  7337  0000A2  D00B               	goto	i2l3566
  7338  0000A4                     i2l3562:
  7339                           
  7340                           ;main.c: 384: i2c_w_reg[i2c_reg_addr++] = sspBuf;
  7341  0000A4  504F               	movf	_i2c_reg_addr,w,c	;volatile
  7342  0000A6  0D01               	mullw	1
  7343  0000A8  0E20               	movlw	low _i2c_w_reg
  7344  0000AA  24F3               	addwf	prodl,w,c
  7345  0000AC  6ED9               	movwf	fsr2l,c
  7346  0000AE  0E01               	movlw	high _i2c_w_reg
  7347  0000B0  20F4               	addwfc	prodh,w,c
  7348  0000B2  6EDA               	movwf	fsr2h,c
  7349  0000B4  C00F  FFDF         	movff	ISR@sspBuf,indf2
  7350  0000B8                     i2l3564:
  7351  0000B8  2A4F               	incf	_i2c_reg_addr,f,c	;volatile
  7352  0000BA                     i2l3566:
  7353                           
  7354                           ;main.c: 385: }
  7355                           ;main.c: 386: }
  7356                           ;main.c: 387: }
  7357                           ;main.c: 389: i2c_reg_addr %= sizeof(i2c_r_reg);
  7358  0000BA  0E1F               	movlw	31
  7359  0000BC  164F               	andwf	_i2c_reg_addr,f,c	;volatile
  7360                           
  7361                           ;main.c: 392: PIR1bits.SSPIF = 0;
  7362  0000BE  969E               	bcf	3998,3,c	;volatile
  7363                           
  7364                           ;main.c: 393: SSPCON1bits.CKP = 1;
  7365  0000C0  88C6               	bsf	4038,4,c	;volatile
  7366  0000C2                     i2l296:
  7367  0000C2  C00E  FFF5         	movff	??_ISR+13,tablat
  7368  0000C6  C00D  FFF8         	movff	??_ISR+12,tblptru
  7369  0000CA  C00C  FFF7         	movff	??_ISR+11,tblptrh
  7370  0000CE  C00B  FFF6         	movff	??_ISR+10,tblptrl
  7371  0000D2  C00A  FFF4         	movff	??_ISR+9,prodh
  7372  0000D6  C009  FFF3         	movff	??_ISR+8,prodl
  7373  0000DA  C008  FFDA         	movff	??_ISR+7,fsr2h
  7374  0000DE  C007  FFD9         	movff	??_ISR+6,fsr2l
  7375  0000E2  C006  FFE2         	movff	??_ISR+5,fsr1h
  7376  0000E6  C005  FFE1         	movff	??_ISR+4,fsr1l
  7377  0000EA  C004  FFEA         	movff	??_ISR+3,fsr0h
  7378  0000EE  C003  FFE9         	movff	??_ISR+2,fsr0l
  7379  0000F2  C002  FFFB         	movff	??_ISR+1,pclatu
  7380  0000F6  C001  FFFA         	movff	??_ISR,pclath
  7381  0000FA  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7382  0000FC  0011               	retfie		f
  7383  0000FE                     __end_of_ISR:
  7384                           	opt stack 0
  7385                           pclatu	equ	0xFFB
  7386                           pclath	equ	0xFFA
  7387                           tblptru	equ	0xFF8
  7388                           tblptrh	equ	0xFF7
  7389                           tblptrl	equ	0xFF6
  7390                           tablat	equ	0xFF5
  7391                           prodh	equ	0xFF4
  7392                           prodl	equ	0xFF3
  7393                           intcon	equ	0xFF2
  7394                           indf0	equ	0xFEF
  7395                           postinc0	equ	0xFEE
  7396                           fsr0h	equ	0xFEA
  7397                           fsr0l	equ	0xFE9
  7398                           wreg	equ	0xFE8
  7399                           indf1	equ	0xFE7
  7400                           postdec1	equ	0xFE5
  7401                           plusw1	equ	0xFE3
  7402                           fsr1h	equ	0xFE2
  7403                           fsr1l	equ	0xFE1
  7404                           indf2	equ	0xFDF
  7405                           postinc2	equ	0xFDE
  7406                           plusw2	equ	0xFDB
  7407                           fsr2h	equ	0xFDA
  7408                           fsr2l	equ	0xFD9
  7409                           status	equ	0xFD8
  7410                           pclatu	equ	0xFFB
  7411                           pclath	equ	0xFFA
  7412                           tblptru	equ	0xFF8
  7413                           tblptrh	equ	0xFF7
  7414                           tblptrl	equ	0xFF6
  7415                           tablat	equ	0xFF5
  7416                           prodh	equ	0xFF4
  7417                           prodl	equ	0xFF3
  7418                           intcon	equ	0xFF2
  7419                           indf0	equ	0xFEF
  7420                           postinc0	equ	0xFEE
  7421                           fsr0h	equ	0xFEA
  7422                           fsr0l	equ	0xFE9
  7423                           wreg	equ	0xFE8
  7424                           indf1	equ	0xFE7
  7425                           postdec1	equ	0xFE5
  7426                           plusw1	equ	0xFE3
  7427                           fsr1h	equ	0xFE2
  7428                           fsr1l	equ	0xFE1
  7429                           indf2	equ	0xFDF
  7430                           postinc2	equ	0xFDE
  7431                           plusw2	equ	0xFDB
  7432                           fsr2h	equ	0xFDA
  7433                           fsr2l	equ	0xFD9
  7434                           status	equ	0xFD8
  7435                           
  7436                           	psect	rparam
  7437  0000                     pclatu	equ	0xFFB
  7438                           pclath	equ	0xFFA
  7439                           tblptru	equ	0xFF8
  7440                           tblptrh	equ	0xFF7
  7441                           tblptrl	equ	0xFF6
  7442                           tablat	equ	0xFF5
  7443                           prodh	equ	0xFF4
  7444                           prodl	equ	0xFF3
  7445                           intcon	equ	0xFF2
  7446                           indf0	equ	0xFEF
  7447                           postinc0	equ	0xFEE
  7448                           fsr0h	equ	0xFEA
  7449                           fsr0l	equ	0xFE9
  7450                           wreg	equ	0xFE8
  7451                           indf1	equ	0xFE7
  7452                           postdec1	equ	0xFE5
  7453                           plusw1	equ	0xFE3
  7454                           fsr1h	equ	0xFE2
  7455                           fsr1l	equ	0xFE1
  7456                           indf2	equ	0xFDF
  7457                           postinc2	equ	0xFDE
  7458                           plusw2	equ	0xFDB
  7459                           fsr2h	equ	0xFDA
  7460                           fsr2l	equ	0xFD9
  7461                           status	equ	0xFD8
  7462                           
  7463                           	psect	temp
  7464  000050                     btemp:
  7465                           	opt stack 0
  7466  000050                     	ds	1
  7467  0000                     int$flags	set	btemp
  7468                           pclatu	equ	0xFFB
  7469                           pclath	equ	0xFFA
  7470                           tblptru	equ	0xFF8
  7471                           tblptrh	equ	0xFF7
  7472                           tblptrl	equ	0xFF6
  7473                           tablat	equ	0xFF5
  7474                           prodh	equ	0xFF4
  7475                           prodl	equ	0xFF3
  7476                           intcon	equ	0xFF2
  7477                           indf0	equ	0xFEF
  7478                           postinc0	equ	0xFEE
  7479                           fsr0h	equ	0xFEA
  7480                           fsr0l	equ	0xFE9
  7481                           wreg	equ	0xFE8
  7482                           indf1	equ	0xFE7
  7483                           postdec1	equ	0xFE5
  7484                           plusw1	equ	0xFE3
  7485                           fsr1h	equ	0xFE2
  7486                           fsr1l	equ	0xFE1
  7487                           indf2	equ	0xFDF
  7488                           postinc2	equ	0xFDE
  7489                           plusw2	equ	0xFDB
  7490                           fsr2h	equ	0xFDA
  7491                           fsr2l	equ	0xFD9
  7492                           status	equ	0xFD8


Data Sizes:
    Strings     375
    Constant    0
    Data        135
    BSS         38
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     46      79
    BANK0           160     50     128
    BANK1           256     44     108
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    start_routine@error_msg	PTR unsigned char  size(2) Largest target is 17
		 -> STR_28(CODE[17]), STR_27(CODE[17]), 

    latch_keypad@x	PTR unsigned char  size(2) Largest target is 1
		 -> start_routine@x(BANK0[1]), main@x(BANK1[1]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 1535
		 -> STR_30(CODE[17]), STR_29(CODE[6]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[2]), STR_24(CODE[5]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[17]), 
		 -> STR_18(CODE[11]), STR_17(CODE[6]), STR_16(CODE[5]), STR_15(CODE[17]), 
		 -> STR_14(CODE[17]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[17]), 
		 -> STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[17]), STR_3(CODE[17]), 
		 -> STR_2(CODE[17]), STR_1(CODE[2]), RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    _main->_start_routine
    _start_routine->_menu_progress_bar
    _running_display->_menu_progress_bar
    _menu_progress_bar->___wmul
    ___wmul->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _mcu_initialise->_Eeprom_Read_Byte
    _load_i2c_registers->___awdiv
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_start_routine
    _start_routine->_menu_progress_bar
    _running_display->_menu_progress_bar

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                52    52      0   73912
                                             38 COMRAM     8     8      0
                                              0 BANK1     44    44      0
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                       _latch_keypad
                 _load_i2c_registers
                     _mcu_initialise
                  _menu_progress_bar
                        _read_keypad
                    _running_display
                      _start_routine
 ---------------------------------------------------------------------------------
 (1) _start_routine                                       40    40      0   24902
                                             34 COMRAM     4     4      0
                                             14 BANK0     36    36      0
                  _Eeprom_Write_Byte
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awdiv
                       _latch_keypad
                  _menu_progress_bar
                        _read_keypad
 ---------------------------------------------------------------------------------
 (2) _latch_keypad                                         4     2      2     524
                                             15 COMRAM     4     2      2
                        _read_keypad
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Write_Byte                                    2     1      1     139
                                             15 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _running_display                                     37    37      0   23472
                                             34 COMRAM     3     3      0
                                             14 BANK0     34    34      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awdiv
                            ___awmod
                  _menu_progress_bar
                        _read_keypad
 ---------------------------------------------------------------------------------
 (2) _read_keypad                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _menu_progress_bar                                   20    18      2   11348
                                             28 COMRAM     6     4      2
                                              0 BANK0     14    14      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     848
                                             22 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1781
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_String                                     6     4      2    2694
                                             19 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_Char                                       3     3      0     254
                                             16 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Set_Cursor                                       5     4      1    4703
                                             17 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Clear                                            1     1      0     155
                                             17 COMRAM     1     1      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1049
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _mcu_initialise                                       0     0      0      31
                   _Eeprom_Read_Byte
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Read_Byte                                     1     1      0      31
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _load_i2c_registers                                  12    12      0    2877
                                             23 COMRAM    12    12      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2447
                                             15 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     279
                                             17 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Cmd                                              1     1      0     155
                                             16 COMRAM     1     1      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (5) _Lcd_Port                                             1     1      0     124
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 15    15      0      46
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _latch_keypad
     _read_keypad
   _load_i2c_registers
     ___awdiv
   _mcu_initialise
     _Eeprom_Read_Byte
   _menu_progress_bar
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___lwdiv
     ___wmul
       ___lwdiv (ARG)
   _read_keypad
   _running_display
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___awdiv
     ___awmod
     _menu_progress_bar
       _Lcd_Clear
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Write_Char
         _Lcd_Port
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___lwdiv
       ___wmul
         ___lwdiv (ARG)
     _read_keypad
   _start_routine
     _Eeprom_Write_Byte
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___awdiv
     _latch_keypad
       _read_keypad
     _menu_progress_bar
       _Lcd_Clear
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Write_Char
         _Lcd_Port
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___lwdiv
       ___wmul
         ___lwdiv (ARG)
     _read_keypad

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     2C      6C       7       42.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     32      80       5       80.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2E      4F       1       84.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13B      15        0.0%
DATA                 0      0     13B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Oct 17 11:37:43 2016

                             _c 0092                  start_routine@a 008A                  start_routine@b 0080  
                start_routine@h 006E                  start_routine@i 0074                  start_routine@l 006F  
                start_routine@n 0090                  start_routine@v 0073                  start_routine@x 008F  
                   _SSPSTATbits 000FC7                              l73 1B06                              l75 1B10  
                            l77 1B1A                              l79 1B24                    ___awdiv@sign 0015  
                            _hx 002F                 start_routine@d1 0072             ___wmul@multiplicand 0019  
               start_routine@dh 008E                 start_routine@dt 008B     __size_of_load_i2c_registers 00EC  
                  __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000  
        __size_of_start_routine 0780                    __CFG_CP3$OFF 000000                             l151 1BFE  
                           l241 08E0                             l332 0F92                             l261 169C  
                           l157 1B90                             l262 16A8                             l263 16B4  
                           l256 1668                             l265 16D0                             l266 16DC  
                           l258 1674                             l267 16E8                             l259 1680  
                           l769 19F2                    __CFG_CPB$OFF 000000                    __CFG_CPD$OFF 000000  
                           _ISR 0008                    __CFG_BORV$30 000000                    ___awmod@sign 0015  
                           prod 000FF3                             wreg 000FE8         Eeprom_Read_Byte@address 0010  
       __end_of_running_display 13C6                    __CFG_LVP$OFF 000000                            ?_ISR 0001  
                          l4020 09A4                            l4012 0974                            l4032 09E6  
                          l4016 098A                            l4202 0EBC                            l4130 0CC2  
                          l4106 0C32                            l4300 15A2                            l4212 0EF0  
                          l4044 0A26                            l4036 0A00                            l4028 09D0  
                          l4302 15AA                            l4206 0ED2                            l4150 0D3C  
                          l4070 0B70                            l4312 15F4                            l4240 0FC6  
                          l4152 0D4C                            l4314 1604                            l4306 15BA  
                          l4250 1006                            l4162 0D90                            l4074 0B8A  
                          l4066 0B5A                            l4324 1632                            l4244 0FDC  
                          l4228 0F6C                            l4156 0D62                            l4148 0D34  
                          l4318 1614                            l3630 1A24                            l3702 16C0  
                          l4430 1392                            l4342 10FC                            l4270 1076  
                          l4262 1046                            l4254 101A                            l4182 0DF2  
                          l3640 187C                            l3800 14F0                            l4432 139C  
                          l4360 1154                            l4272 1080                            l4248 0FF6  
                          l4176 0DDA                            l4096 0BF4                            l4600 0300  
                          l4290 1570                            l3730 16F4                            l4370 1174  
                          l4354 1134                            l4346 1112                            l4282 10B2  
                          l4266 105C                            l4530 0120                            l3580 1B12  
                          l3644 18B0                            l3820 1548                            l3804 1504  
                          l4380 11CE                            l4364 115C                            l4276 1096  
                          l4284 10BE                            l4700 0634                            l4620 0390  
                          l4294 1580                            l3910 18F8                            l3750 19CC  
                          l3814 1528                            l4366 1168                            l4286 10C8  
                          l4622 039C                            l4550 01A6                            l3584 1B1C  
                          l3576 1B08                            l3920 191A                            l3824 1562  
                          l3816 1532                            l3808 151A                            l4376 11B8  
                          l4704 069E                            l4544 0186                            l3922 191E  
                          l3930 193C                            l3914 1904                            l3746 19C0  
                          l3674 168C                            l4386 11EC                            l4802 08CA  
                          l4722 070A                            l4618 0388                            l4546 0190  
                          l4538 0148                            l3748 19C8                            l3780 146A  
                          l3772 143C                            l4396 1228                            l3852 1A8E  
                          l4732 073C                            l4644 04B0                            l4628 0446  
                          l4556 01EA                            l3934 194A                            l3926 1932  
                          l3918 1912                            l3758 19E8                            l3854 1AA0  
                          l4814 0918                            l4742 0780                            l4734 074C  
                          l4726 0720                            l4822 0944                            l3880 173A  
                          l3872 171C                            l3792 14C0                            l3776 144E  
                          l3768 1426                            l4752 07A6                            l4568 0228  
                          l3890 175A                            l3882 173E                            l3866 170C  
                          l3786 14A0                            l4818 092E                            l4762 07F4  
                          l4746 0788                            l4738 0762                            l3796 14D6  
                          l4780 0856                            l4756 07BC                            l3878 1732  
                          l3894 1764                            l4678 059A                            l4784 086C  
                          l4776 0840                            l4696 0620                            l3898 1772  
                          l4786 0872                            l4698 0628                            l4798 08B4  
                          STR_2 7E87                            STR_3 7EED                            STR_4 7E98  
                          STR_5 7F42                            STR_6 7E98                            STR_7 7F20  
                          STR_8 7EA9                            STR_9 7FCA                            _LATC 000F8B  
                          u3250 18A8                            u3260 18DC                            u4310 0146  
                          u4320 0184                            u3257 189E                            u4161 121E  
                          u3267 18D2                            u3435 13E4                            u4181 1254  
                          u4191 1272                            u4451 04C4                            u3940 0F92  
                          u4717 085C                            u4807 1A94                            u4727 08D0  
                          u4817 1236                            u4737 0934                            u4907 1836  
                          u4827 1454                            u4747 0990                            u4917 1BE8  
                          u4837 14DC                            u4757 09EC                            u4847 154E  
                          u4767 0B76                            u4857 1AE0                            u4777 0F72  
                          u4867 1AF2                            u4787 0FE2                            u4877 1BAC  
                          u4797 1062                            u4887 1806                            u4897 181E  
             ?_Lcd_Write_String 0014                            _main 0102                            fsr0h 000FEA  
                          fsr1h 000FE2                            indf0 000FEF                            fsr0l 000FE9  
                          fsr2h 000FDA                            indf1 000FE7                            fsr1l 000FE1  
                          indf2 000FDF                            fsr2l 000FD9                            btemp 0050  
                          pclat 000FFA                            prodh 000FF4                            prodl 000FF3  
                          start 00FE              ??_Lcd_Write_String 0016                   __CFG_IESO$OFF 000000  
               __end_of_Lcd_Cmd 1BF2                   __CFG_MCLRE$ON 000000                    ___param_bank 000010  
                         ??_ISR 0001                           ?_main 0001                 __end_of___awdiv 177C  
                         _EEADR 000FA9                           STR_10 7F0F                           STR_11 7FB9  
                         STR_20 7F64                           STR_12 7ECB                           STR_13 7F97  
                         STR_21 7F31                           STR_14 7ECB                           STR_22 7FA8  
                         STR_30 7F75                           STR_23 7F31                           STR_15 7EBA  
                         STR_24 7FF7                           STR_16 7FF2                           STR_25 7FFC  
                         STR_17 7FE6                           STR_18 7FDB                           STR_26 7F86  
                         STR_27 7F53                           STR_19 7EFE                           STR_28 7EDC  
               __end_of___awmod 1954                           STR_29 7FEC                 ___awdiv@divisor 0012  
               __end_of___lwdiv 19FC                           i2l296 00C2                 ___awdiv@counter 0014  
                         _PORTB 000F81                           _PORTD 000F83         __size_of_Lcd_Set_Cursor 0050  
                         _TRISA 000F92                           _TRISB 000F93                           _TRISC 000F94  
                         _TRISD 000F95                  _i2c_byte_count 004E                   __CFG_PWRT$OFF 000000  
                 __CFG_WRT0$OFF 000000                   ?_latch_keypad 0010                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                      _Machine_ID 00DF  
            start_routine@F3720 00B5                  __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
                  ?_read_keypad 0001                  __CFG_EBTRB$OFF 000000                           main@c 0140  
                         main@i 0161                           main@n 016A                           main@p 0169  
                         main@u 0165                           main@x 016B                           tablat 000FF5  
            start_routine@i_900 0083              start_routine@i_910 0085              start_routine@i_903 007A  
            start_routine@i_906 007C              start_routine@i_909 007E              start_routine@i_885 0078  
            start_routine@i_877 0076              start_routine@i_897 008C         load_i2c_registers@i_841 0022  
       load_i2c_registers@i_843 001E                   _start_routine 0950                           plusw1 000FE3  
                         plusw2 000FDB                           status 000FD8   menu_progress_bar@load_time_ms 001D  
                __CFG_HFOFST$ON 000000                __end_of_Lcd_Init 1872                __end_of_Lcd_Port 1B28  
               __initialization 177C                    __end_of_main 0950                          ??_main 0027  
            __size_of_Lcd_Clear 0020                   __activetblptr 000002            _credentials_accepted 00DD  
                ??_latch_keypad 0012                ?_running_display 0001                          _EEDATA 000FA8  
                        _EECON2 000FA7                ___awdiv@dividend 0010                  ?_start_routine 0001  
                __CFG_WDTEN$OFF 000000                          i2l3544 0070                          i2l3562 00A4  
                        i2l3564 00B8                          i2l3558 0098                          i2l3566 00BA  
                        _OSCCON 000FD3                       ??_Lcd_Cmd 0011         __size_of_Lcd_Write_Char 0038  
                        _SSPADD 000FC8                          _SSPBUF 000FC9                  __CFG_XINST$OFF 000000  
                        ___wmul 1B50                       ??___awdiv 0014                  __CFG_STVREN$ON 000000  
                     ??___awmod 0014                       ??___lwdiv 0014               ?_Eeprom_Read_Byte 0001  
                        clear_0 1782                ___awdiv@quotient 0016                 ___awmod@divisor 0012  
               ___awmod@counter 0014              ??_Eeprom_Read_Byte 0010                    __pdataCOMRAM 002F  
                  __mediumconst 7E86                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                 Lcd_Set_Cursor@a 0013                 Lcd_Set_Cursor@b 0012  
               Lcd_Set_Cursor@y 0015                 Lcd_Set_Cursor@z 0014                      __accesstop 0060  
       __end_of__initialization 17EC                 __CFG_PBADEN$OFF 000000               __end_of_Lcd_Clear 1BBA  
                 ___rparam_used 000001               _menu_progress_bar 13C6                  __pcstackCOMRAM 0001  
                  __pidataBANK0 1B28                    __pidataBANK1 1A4C              ?_menu_progress_bar 001D  
          running_display@F3743 00B0            running_display@F3746 00A6                  _Lcd_Set_Cursor 19FC  
           ??_menu_progress_bar 001F            running_display@i_916 0080            running_display@i_917 0088  
                  _EEP_I2C_ADDR 00DC                       ?_Lcd_Init 0001                       ?_Lcd_Port 0001  
               ??_start_routine 0023            __size_of_read_keypad 00A4                      __pbssBANK0 00BA  
     __end_of_menu_progress_bar 1568              running_display@n_c 0083                       ISR@sspBuf 000F  
          __end_of_latch_keypad 1AC4                         ?___wmul 0017      __end_of_load_i2c_registers 1654  
  start_routine@new_I2C_address 0091       __size_of_Lcd_Write_String 0072          __end_of_Lcd_Set_Cursor 1A4C  
        menu_progress_bar@i_727 0068          menu_progress_bar@i_728 006A          menu_progress_bar@i_729 006C  
                    ??_Lcd_Init 0012                      ??_Lcd_Port 0010                         _SSPCON1 000FC6  
                       _SSPCON2 000FC5         __size_of_mcu_initialise 0056                         _SSPSTAT 000FC7  
                _Lcd_Write_Char 1AC4                         _Lcd_Cmd 1BDA                         __Hparam 0000  
                       __Lparam 0000                         ___awdiv 16F8                         ___awmod 18E4  
               __size_of___wmul 0026                         ___lwdiv 19AA                         __pcinit 177C  
                       __ramtop 0600                 ?_Lcd_Set_Cursor 0012                         __ptext0 0102  
                       __ptext1 0950                         __ptext2 1A8C                         __ptext3 1B76  
                       __ptext4 10D0                         __ptext5 1654                         __ptext6 13C6  
                       __ptext7 1B50                         __ptext8 19AA                         __ptext9 1872  
           menu_progress_bar@ii 0064                    __size_of_ISR 00F6                ___awmod@dividend 0010  
        __end_of_Lcd_Write_Char 1AFC            end_of_initialization 17EC                   __Lmediumconst 7E86  
    __size_of_menu_progress_bar 01A2                   _login_timeout 00B8                         postdec1 000FE5  
                       postinc0 000FEE                         postinc2 000FDE                       Lcd_Port@a 0010  
                     _PORTBbits 000F81                       _PORTDbits 000F83                 ?_Lcd_Write_Char 0001  
     __size_of_Eeprom_Read_Byte 0014               Lcd_Write_String@a 0014               Lcd_Write_String@i 0018  
                main@write_busy 0153           __size_of_latch_keypad 0038                      main@buffer 014A  
      __size_of_running_display 02F6                    _i2c_reg_addr 004F                   latch_keypad@x 0010  
                     _Lcd_Clear 1B9A                  __end_of___wmul 1B76                _Lcd_Write_String 1872  
                 __pidataCOMRAM 1BBA               _Eeprom_Write_Byte 1B76              ?_Eeprom_Write_Byte 0010  
           start_initialization 177C                    _latch_keypad 1A8C                     __end_of_ISR 00FE  
                     _i2c_r_reg 0100                       _i2c_w_reg 0120                  _mcu_initialise 1954  
           ??_Eeprom_Write_Byte 0011               __size_of_Lcd_Init 0078               __size_of_Lcd_Port 002C  
running_display@is_leading_zero 0082                      ?_Lcd_Clear 0001                        ??___wmul 001B  
                   __pdataBANK0 0092                     __pdataBANK1 0100                __CFG_LPT1OSC$OFF 000000  
     __end_of_Eeprom_Write_Byte 1B9A                 Lcd_Write_Char@a 0013                 Lcd_Write_Char@y 0012  
     menu_seconds_to_mmss@F3627 003F           running_display@minute 0086           running_display@second 008E  
                   __pbssCOMRAM 004E          __end_of_mcu_initialise 19AA                   __pcstackBANK0 0060  
                 __pcstackBANK1 0140                   ??_read_keypad 0010              _load_i2c_registers 1568  
         __end_of_start_routine 10D0             ?_load_i2c_registers 0001                        ?_Lcd_Cmd 0001  
           running_display@hour 0073                       __pnvBANK0 00DE                    _current_user 00D3  
             running_display@ms 0084                ___lwdiv@dividend 0010               __CFG_CCP2MX$PORTC 000000  
              ??_Lcd_Set_Cursor 0013                       __pintcode 0008                   __pmediumconst 7E86  
                      ?___awdiv 0010                        ?___awmod 0010               ??_running_display 0023  
                      ?___lwdiv 0010            ??_load_i2c_registers 0018                        _I2C_ADDR 00DE  
               ?_mcu_initialise 0001                ___lwdiv@quotient 0015                _Eeprom_Read_Byte 1BF2  
            menu_progress_bar@d 0060              menu_progress_bar@i 0066             __end_of_read_keypad 16F8  
                ___wmul@product 001B                        _LATDbits 000F8C                        _PIE1bits 000F9D  
                      Lcd_Cmd@a 0011                        _PIR1bits 000F9E                        _PIR2bits 000FA1  
                   ??_Lcd_Clear 0012                __CFG_WDTPS$32768 000000      load_i2c_registers@checksum 001C  
                     main@F3681 009C      __size_of_Eeprom_Write_Byte 0024                       main@i_773 0167  
                     main@i_782 015B                       main@i_776 0163                       main@i_792 0154  
                     main@i_786 015D                       main@i_795 0156               ___wmul@multiplier 0017  
                     main@i_788 015F                       main@i_798 0158                ??_Lcd_Write_Char 0011  
                      _Lcd_Init 17FA                        _Lcd_Port 1AFC                       copy_data0 17A0  
                     copy_data1 17C0                       copy_data2 17E0        __end_of_Lcd_Write_String 18E4  
   running_display@exit_running 007F                __size_of_Lcd_Cmd 0018                      _EECON1bits 000FA6  
                      __Hrparam 0000                        __Lrparam 0000              __CFG_BOREN$SBORDIS 000000  
              __size_of___awdiv 0084                __size_of___awmod 0070                __size_of___lwdiv 0052  
           load_i2c_registers@i 0020       start_routine@I2C_new_ADDR 0087                     _current_pin 00CA  
              running_display@i 008C                running_display@n 0075                running_display@s 008A  
              running_display@t 006E                 ___lwdiv@divisor 0012                 ___lwdiv@counter 0014  
                   _read_keypad 1654                        __ptext10 1AC4                        __ptext11 19FC  
                      __ptext20 1AFC                        __ptext12 1B9A                        __ptext13 18E4  
                      __ptext14 1954                        __ptext15 1BF2                        __ptext16 1568  
                      __ptext17 16F8                        __ptext18 17FA                        __ptext19 1BDA  
                   _logged_user 00BA                   __size_of_main 084E            main@credential_state 015A  
         Eeprom_Write_Byte@data 0010        Eeprom_Write_Byte@address 0011                        int$flags 0050  
                   _OSCTUNEbits 000F9B                      _INTCONbits 000FF2              Lcd_Write_Char@temp 0011  
                      intlevel2 0000                 _running_display 10D0        __end_of_Eeprom_Read_Byte 1C06  
            Lcd_Set_Cursor@temp 0016                ??_mcu_initialise 0011                  menu_main@F3618 0049  
        start_routine@error_msg 0070                     _SSPCON1bits 000FC6               __CFG_FOSC$INTIO67 000000  
