

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Thu Sep 01 19:31:23 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	idataBANK0,global,class=CODE,delta=1
     8                           	psect	idataBANK1,global,class=CODE,delta=1
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    43                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    44  0000                     
    45                           	psect	eeprom_data
    46  F00000  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    47                           
    48                           	psect	idataCOMRAM
    49  001A00                     __pidataCOMRAM:
    50                           	opt stack 0
    51                           
    52                           ;initializer for menu_seconds_to_mmss@F3627
    53  001A00  30                 	db	48
    54  001A01  31                 	db	49
    55  001A02  32                 	db	50
    56  001A03  33                 	db	51
    57  001A04  34                 	db	52
    58  001A05  35                 	db	53
    59  001A06  36                 	db	54
    60  001A07  37                 	db	55
    61  001A08  38                 	db	56
    62  001A09  39                 	db	57
    63                           
    64                           ;initializer for menu_main@F3618
    65  001A0A  30                 	db	48
    66  001A0B  30                 	db	48
    67  001A0C  3A                 	db	58
    68  001A0D  30                 	db	48
    69  001A0E  30                 	db	48
    70                           
    71                           	psect	idataBANK0
    72  001942                     __pidataBANK0:
    73                           	opt stack 0
    74                           
    75                           ;initializer for _hx
    76  001942  30                 	db	48
    77  001943  31                 	db	49
    78  001944  32                 	db	50
    79  001945  33                 	db	51
    80  001946  34                 	db	52
    81  001947  35                 	db	53
    82  001948  36                 	db	54
    83  001949  37                 	db	55
    84  00194A  38                 	db	56
    85  00194B  39                 	db	57
    86  00194C  41                 	db	65
    87  00194D  42                 	db	66
    88  00194E  43                 	db	67
    89  00194F  44                 	db	68
    90  001950  45                 	db	69
    91  001951  46                 	db	70
    92                           
    93                           ;initializer for _c
    94  001952  30                 	db	48
    95  001953  31                 	db	49
    96  001954  32                 	db	50
    97  001955  33                 	db	51
    98  001956  34                 	db	52
    99  001957  35                 	db	53
   100  001958  36                 	db	54
   101  001959  37                 	db	55
   102  00195A  38                 	db	56
   103  00195B  39                 	db	57
   104                           
   105                           ;initializer for main@F3679
   106  00195C  30                 	db	48
   107  00195D  31                 	db	49
   108  00195E  32                 	db	50
   109  00195F  33                 	db	51
   110  001960  34                 	db	52
   111  001961  35                 	db	53
   112  001962  36                 	db	54
   113  001963  37                 	db	55
   114  001964  38                 	db	56
   115  001965  39                 	db	57
   116                           
   117                           ;initializer for start_routine@F3721
   118  001966  30                 	db	48
   119  001967  30                 	db	48
   120  001968  30                 	db	48
   121                           
   122                           ;initializer for main@F3695
   123  001969  20                 	db	32
   124                           
   125                           	psect	idataBANK1
   126  001866                     __pidataBANK1:
   127                           	opt stack 0
   128                           
   129                           ;initializer for _i2c_r_reg
   130  001866  30                 	db	48
   131  001867  00                 	db	0
   132  001868  00                 	db	0
   133  001869  00                 	db	0
   134  00186A  00                 	db	0
   135  00186B  00                 	db	0
   136  00186C  00                 	db	0
   137  00186D  00                 	db	0
   138  00186E  00                 	db	0
   139  00186F  00                 	db	0
   140  001870  00                 	db	0
   141  001871  00                 	db	0
   142  001872  00                 	db	0
   143  001873  00                 	db	0
   144  001874  00                 	db	0
   145  001875  00                 	db	0
   146  001876  00                 	db	0
   147  001877  00                 	db	0
   148  001878  00                 	db	0
   149  001879  00                 	db	0
   150  00187A  00                 	db	0
   151  00187B  00                 	db	0
   152  00187C  00                 	db	0
   153  00187D  00                 	db	0
   154  00187E  00                 	db	0
   155  00187F  00                 	db	0
   156  001880  00                 	db	0
   157  001881  00                 	db	0
   158  001882  00                 	db	0
   159  001883  00                 	db	0
   160  001884  00                 	db	0
   161  001885  00                 	db	0
   162                           
   163                           ;initializer for _i2c_w_reg
   164  001886  30                 	db	48
   165  001887  00                 	db	0
   166  001888  00                 	db	0
   167  001889  00                 	db	0
   168  00188A  00                 	db	0
   169  00188B  00                 	db	0
   170  00188C  00                 	db	0
   171  00188D  00                 	db	0
   172  00188E  00                 	db	0
   173  00188F  00                 	db	0
   174  001890  00                 	db	0
   175  001891  00                 	db	0
   176  001892  00                 	db	0
   177  001893  00                 	db	0
   178  001894  00                 	db	0
   179  001895  00                 	db	0
   180  001896  00                 	db	0
   181  001897  00                 	db	0
   182  001898  00                 	db	0
   183  001899  00                 	db	0
   184  00189A  00                 	db	0
   185  00189B  00                 	db	0
   186  00189C  00                 	db	0
   187  00189D  00                 	db	0
   188  00189E  00                 	db	0
   189  00189F  00                 	db	0
   190  0018A0  00                 	db	0
   191  0018A1  00                 	db	0
   192  0018A2  00                 	db	0
   193  0018A3  00                 	db	0
   194  0018A4  00                 	db	0
   195  0018A5  00                 	db	0
   196                           
   197                           	psect	nvBANK0
   198  0000CE                     __pnvBANK0:
   199                           	opt stack 0
   200  0000CE                     _I2C_ADDR:
   201                           	opt stack 0
   202  0000CE                     	ds	1
   203  0000CF                     _Machine_ID:
   204                           	opt stack 0
   205  0000CF                     	ds	1
   206  0000                     _EEADR	set	4009
   207  0000                     _EECON1bits	set	4006
   208  0000                     _EECON2	set	4007
   209  0000                     _EEDATA	set	4008
   210  0000                     _INTCONbits	set	4082
   211  0000                     _LATC	set	3979
   212  0000                     _LATDbits	set	3980
   213  0000                     _OSCCON	set	4051
   214  0000                     _OSCTUNEbits	set	3995
   215  0000                     _PIE1bits	set	3997
   216  0000                     _PIR1bits	set	3998
   217  0000                     _PIR2bits	set	4001
   218  0000                     _PORTBbits	set	3969
   219  0000                     _PORTC	set	3970
   220  0000                     _PORTD	set	3971
   221  0000                     _PORTDbits	set	3971
   222  0000                     _SSPADD	set	4040
   223  0000                     _SSPBUF	set	4041
   224  0000                     _SSPCON1	set	4038
   225  0000                     _SSPCON1bits	set	4038
   226  0000                     _SSPCON2	set	4037
   227  0000                     _SSPSTAT	set	4039
   228  0000                     _SSPSTATbits	set	4039
   229  0000                     _TRISA	set	3986
   230  0000                     _TRISB	set	3987
   231  0000                     _TRISC	set	3988
   232  0000                     _TRISD	set	3989
   233                           
   234                           	psect	mediumconst
   235  007EC0                     __pmediumconst:
   236                           	opt stack 0
   237  007EC0  00                 	db	0
   238  007EC1                     STR_2:
   239  007EC1  20                 	db	32
   240  007EC2  20                 	db	32
   241  007EC3  20                 	db	32
   242  007EC4  20                 	db	32
   243  007EC5  20                 	db	32
   244  007EC6  20                 	db	32
   245  007EC7  20                 	db	32
   246  007EC8  20                 	db	32
   247  007EC9  20                 	db	32
   248  007ECA  20                 	db	32
   249  007ECB  20                 	db	32
   250  007ECC  20                 	db	32
   251  007ECD  20                 	db	32
   252  007ECE  20                 	db	32
   253  007ECF  20                 	db	32
   254  007ED0  20                 	db	32
   255  007ED1  00                 	db	0
   256  007ED2                     STR_4:
   257  007ED2  5B                 	db	91	;'['
   258  007ED3  20                 	db	32
   259  007ED4  5D                 	db	93	;']'
   260  007ED5  20                 	db	32
   261  007ED6  20                 	db	32
   262  007ED7  20                 	db	32
   263  007ED8  20                 	db	32
   264  007ED9  20                 	db	32
   265  007EDA  20                 	db	32
   266  007EDB  20                 	db	32
   267  007EDC  20                 	db	32
   268  007EDD  20                 	db	32
   269  007EDE  20                 	db	32
   270  007EDF  20                 	db	32
   271  007EE0  20                 	db	32
   272  007EE1  20                 	db	32
   273  007EE2  00                 	db	0
   274  007EE3                     STR_14:
   275  007EE3  20                 	db	32
   276  007EE4  20                 	db	32
   277  007EE5  20                 	db	32
   278  007EE6  5B                 	db	91	;'['
   279  007EE7  20                 	db	32
   280  007EE8  41                 	db	65	;'A'
   281  007EE9  64                 	db	100	;'d'
   282  007EEA  69                 	db	105	;'i'
   283  007EEB  74                 	db	116	;'t'
   284  007EEC  75                 	db	117	;'u'
   285  007EED  6D                 	db	109	;'m'
   286  007EEE  20                 	db	32
   287  007EEF  5D                 	db	93	;']'
   288  007EF0  20                 	db	32
   289  007EF1  20                 	db	32
   290  007EF2  20                 	db	32
   291  007EF3  00                 	db	0
   292  007EF4                     STR_10:
   293  007EF4  20                 	db	32
   294  007EF5  20                 	db	32
   295  007EF6  20                 	db	32
   296  007EF7  20                 	db	32
   297  007EF8  5B                 	db	91	;'['
   298  007EF9  20                 	db	32
   299  007EFA  52                 	db	82	;'R'
   300  007EFB  65                 	db	101	;'e'
   301  007EFC  74                 	db	116	;'t'
   302  007EFD  72                 	db	114	;'r'
   303  007EFE  79                 	db	121	;'y'
   304  007EFF  20                 	db	32
   305  007F00  5D                 	db	93	;']'
   306  007F01  20                 	db	32
   307  007F02  20                 	db	32
   308  007F03  20                 	db	32
   309  007F04  00                 	db	0
   310  007F05                     STR_8:
   311  007F05  20                 	db	32
   312  007F06  20                 	db	32
   313  007F07  20                 	db	32
   314  007F08  20                 	db	32
   315  007F09  5B                 	db	91	;'['
   316  007F0A  57                 	db	87	;'W'
   317  007F0B  65                 	db	101	;'e'
   318  007F0C  6C                 	db	108	;'l'
   319  007F0D  63                 	db	99	;'c'
   320  007F0E  6F                 	db	111	;'o'
   321  007F0F  6D                 	db	109	;'m'
   322  007F10  65                 	db	101	;'e'
   323  007F11  5D                 	db	93	;']'
   324  007F12  20                 	db	32
   325  007F13  20                 	db	32
   326  007F14  20                 	db	32
   327  007F15  00                 	db	0
   328  007F16                     STR_27:
   329  007F16  4F                 	db	79	;'O'
   330  007F17  75                 	db	117	;'u'
   331  007F18  74                 	db	116	;'t'
   332  007F19  20                 	db	32
   333  007F1A  6F                 	db	111	;'o'
   334  007F1B  66                 	db	102	;'f'
   335  007F1C  20                 	db	32
   336  007F1D  62                 	db	98	;'b'
   337  007F1E  6F                 	db	111	;'o'
   338  007F1F  75                 	db	117	;'u'
   339  007F20  6E                 	db	110	;'n'
   340  007F21  64                 	db	100	;'d'
   341  007F22  73                 	db	115	;'s'
   342  007F23  21                 	db	33
   343  007F24  20                 	db	32
   344  007F25  20                 	db	32
   345  007F26  00                 	db	0
   346  007F27                     STR_3:
   347  007F27  45                 	db	69	;'E'
   348  007F28  6E                 	db	110	;'n'
   349  007F29  74                 	db	116	;'t'
   350  007F2A  65                 	db	101	;'e'
   351  007F2B  72                 	db	114	;'r'
   352  007F2C  20                 	db	32
   353  007F2D  79                 	db	121	;'y'
   354  007F2E  6F                 	db	111	;'o'
   355  007F2F  75                 	db	117	;'u'
   356  007F30  72                 	db	114	;'r'
   357  007F31  20                 	db	32
   358  007F32  49                 	db	73	;'I'
   359  007F33  44                 	db	68	;'D'
   360  007F34  3A                 	db	58	;':'
   361  007F35  20                 	db	32
   362  007F36  20                 	db	32
   363  007F37  00                 	db	0
   364  007F38                     STR_18:
   365  007F38  20                 	db	32
   366  007F39  20                 	db	32
   367  007F3A  5B                 	db	91	;'['
   368  007F3B  20                 	db	32
   369  007F3C  20                 	db	32
   370  007F3D  41                 	db	65	;'A'
   371  007F3E  64                 	db	100	;'d'
   372  007F3F  69                 	db	105	;'i'
   373  007F40  74                 	db	116	;'t'
   374  007F41  75                 	db	117	;'u'
   375  007F42  6D                 	db	109	;'m'
   376  007F43  20                 	db	32
   377  007F44  20                 	db	32
   378  007F45  5D                 	db	93	;']'
   379  007F46  20                 	db	32
   380  007F47  20                 	db	32
   381  007F48  00                 	db	0
   382  007F49                     STR_20:
   383  007F49  4E                 	db	78	;'N'
   384  007F4A  65                 	db	101	;'e'
   385  007F4B  77                 	db	119	;'w'
   386  007F4C  20                 	db	32
   387  007F4D  4D                 	db	77	;'M'
   388  007F4E  61                 	db	97	;'a'
   389  007F4F  63                 	db	99	;'c'
   390  007F50  68                 	db	104	;'h'
   391  007F51  69                 	db	105	;'i'
   392  007F52  6E                 	db	110	;'n'
   393  007F53  65                 	db	101	;'e'
   394  007F54  20                 	db	32
   395  007F55  49                 	db	73	;'I'
   396  007F56  44                 	db	68	;'D'
   397  007F57  3A                 	db	58	;':'
   398  007F58  20                 	db	32
   399  007F59  00                 	db	0
   400  007F5A                     STR_5:
   401  007F5A  45                 	db	69	;'E'
   402  007F5B  6E                 	db	110	;'n'
   403  007F5C  74                 	db	116	;'t'
   404  007F5D  65                 	db	101	;'e'
   405  007F5E  72                 	db	114	;'r'
   406  007F5F  20                 	db	32
   407  007F60  79                 	db	121	;'y'
   408  007F61  6F                 	db	111	;'o'
   409  007F62  75                 	db	117	;'u'
   410  007F63  72                 	db	114	;'r'
   411  007F64  20                 	db	32
   412  007F65  50                 	db	80	;'P'
   413  007F66  49                 	db	73	;'I'
   414  007F67  4E                 	db	78	;'N'
   415  007F68  3A                 	db	58	;':'
   416  007F69  20                 	db	32
   417  007F6A  00                 	db	0
   418  007F6B                     STR_26:
   419  007F6B  4D                 	db	77	;'M'
   420  007F6C  61                 	db	97	;'a'
   421  007F6D  79                 	db	121	;'y'
   422  007F6E  20                 	db	32
   423  007F6F  6E                 	db	110	;'n'
   424  007F70  6F                 	db	111	;'o'
   425  007F71  74                 	db	116	;'t'
   426  007F72  20                 	db	32
   427  007F73  62                 	db	98	;'b'
   428  007F74  65                 	db	101	;'e'
   429  007F75  20                 	db	32
   430  007F76  7A                 	db	122	;'z'
   431  007F77  65                 	db	101	;'e'
   432  007F78  72                 	db	114	;'r'
   433  007F79  6F                 	db	111	;'o'
   434  007F7A  21                 	db	33
   435  007F7B  00                 	db	0
   436  007F7C                     STR_19:
   437  007F7C  4C                 	db	76	;'L'
   438  007F7D  6F                 	db	111	;'o'
   439  007F7E  61                 	db	97	;'a'
   440  007F7F  64                 	db	100	;'d'
   441  007F80  20                 	db	32
   442  007F81  49                 	db	73	;'I'
   443  007F82  32                 	db	50	;'2'
   444  007F83  43                 	db	67	;'C'
   445  007F84  20                 	db	32
   446  007F85  73                 	db	115	;'s'
   447  007F86  65                 	db	101	;'e'
   448  007F87  74                 	db	116	;'t'
   449  007F88  75                 	db	117	;'u'
   450  007F89  70                 	db	112	;'p'
   451  007F8A  2E                 	db	46
   452  007F8B  2E                 	db	46
   453  007F8C  00                 	db	0
   454  007F8D                     STR_25:
   455  007F8D  49                 	db	73	;'I'
   456  007F8E  32                 	db	50	;'2'
   457  007F8F  43                 	db	67	;'C'
   458  007F90  5F                 	db	95	;'_'
   459  007F91  41                 	db	65	;'A'
   460  007F92  44                 	db	68	;'D'
   461  007F93  44                 	db	68	;'D'
   462  007F94  52                 	db	82	;'R'
   463  007F95  3E                 	db	62	;'>'
   464  007F96  3E                 	db	62	;'>'
   465  007F97  45                 	db	69	;'E'
   466  007F98  45                 	db	69	;'E'
   467  007F99  50                 	db	80	;'P'
   468  007F9A  52                 	db	82	;'R'
   469  007F9B  4F                 	db	79	;'O'
   470  007F9C  4D                 	db	77	;'M'
   471  007F9D  00                 	db	0
   472  007F9E                     STR_11:
   473  007F9E  5B                 	db	91	;'['
   474  007F9F  20                 	db	32
   475  007FA0  53                 	db	83	;'S'
   476  007FA1  79                 	db	121	;'y'
   477  007FA2  73                 	db	115	;'s'
   478  007FA3  74                 	db	116	;'t'
   479  007FA4  65                 	db	101	;'e'
   480  007FA5  6D                 	db	109	;'m'
   481  007FA6  20                 	db	32
   482  007FA7  45                 	db	69	;'E'
   483  007FA8  72                 	db	114	;'r'
   484  007FA9  72                 	db	114	;'r'
   485  007FAA  6F                 	db	111	;'o'
   486  007FAB  72                 	db	114	;'r'
   487  007FAC  20                 	db	32
   488  007FAD  5D                 	db	93	;']'
   489  007FAE  00                 	db	0
   490  007FAF                     STR_21:
   491  007FAF  20                 	db	32
   492  007FB0  20                 	db	32
   493  007FB1  20                 	db	32
   494  007FB2  20                 	db	32
   495  007FB3  20                 	db	32
   496  007FB4  20                 	db	32
   497  007FB5  20                 	db	32
   498  007FB6  5B                 	db	91	;'['
   499  007FB7  30                 	db	48	;'0'
   500  007FB8  30                 	db	48	;'0'
   501  007FB9  31                 	db	49	;'1'
   502  007FBA  2D                 	db	45
   503  007FBB  31                 	db	49	;'1'
   504  007FBC  30                 	db	48	;'0'
   505  007FBD  30                 	db	48	;'0'
   506  007FBE  5D                 	db	93	;']'
   507  007FBF  00                 	db	0
   508  007FC0                     STR_9:
   509  007FC0  5B                 	db	91	;'['
   510  007FC1  41                 	db	65	;'A'
   511  007FC2  63                 	db	99	;'c'
   512  007FC3  63                 	db	99	;'c'
   513  007FC4  65                 	db	101	;'e'
   514  007FC5  73                 	db	115	;'s'
   515  007FC6  73                 	db	115	;'s'
   516  007FC7  20                 	db	32
   517  007FC8  20                 	db	32
   518  007FC9  44                 	db	68	;'D'
   519  007FCA  65                 	db	101	;'e'
   520  007FCB  6E                 	db	110	;'n'
   521  007FCC  69                 	db	105	;'i'
   522  007FCD  65                 	db	101	;'e'
   523  007FCE  64                 	db	100	;'d'
   524  007FCF  5D                 	db	93	;']'
   525  007FD0  00                 	db	0
   526  007FD1                     STR_7:
   527  007FD1  5B                 	db	91	;'['
   528  007FD2  41                 	db	65	;'A'
   529  007FD3  63                 	db	99	;'c'
   530  007FD4  63                 	db	99	;'c'
   531  007FD5  65                 	db	101	;'e'
   532  007FD6  73                 	db	115	;'s'
   533  007FD7  73                 	db	115	;'s'
   534  007FD8  20                 	db	32
   535  007FD9  47                 	db	71	;'G'
   536  007FDA  72                 	db	114	;'r'
   537  007FDB  61                 	db	97	;'a'
   538  007FDC  6E                 	db	110	;'n'
   539  007FDD  74                 	db	116	;'t'
   540  007FDE  65                 	db	101	;'e'
   541  007FDF  64                 	db	100	;'d'
   542  007FE0  5D                 	db	93	;']'
   543  007FE1  00                 	db	0
   544  007FE2                     STR_17:
   545  007FE2  44                 	db	68	;'D'
   546  007FE3  65                 	db	101	;'e'
   547  007FE4  76                 	db	118	;'v'
   548  007FE5  69                 	db	105	;'i'
   549  007FE6  63                 	db	99	;'c'
   550  007FE7  65                 	db	101	;'e'
   551  007FE8  20                 	db	32
   552  007FE9  49                 	db	73	;'I'
   553  007FEA  44                 	db	68	;'D'
   554  007FEB  20                 	db	32
   555  007FEC  00                 	db	0
   556  007FED                     STR_16:
   557  007FED  31                 	db	49	;'1'
   558  007FEE  2E                 	db	46
   559  007FEF  30                 	db	48	;'0'
   560  007FF0  2E                 	db	46
   561  007FF1  30                 	db	48	;'0'
   562  007FF2  00                 	db	0
   563  007FF3                     STR_15:
   564  007FF3  52                 	db	82	;'R'
   565  007FF4  65                 	db	101	;'e'
   566  007FF5  76                 	db	118	;'v'
   567  007FF6  20                 	db	32
   568  007FF7  00                 	db	0
   569  007FF8                     STR_23:
   570  007FF8  5B                 	db	91	;'['
   571  007FF9  4F                 	db	79	;'O'
   572  007FFA  4B                 	db	75	;'K'
   573  007FFB  5D                 	db	93	;']'
   574  007FFC  00                 	db	0
   575  007FFD                     STR_24:
   576  007FFD  78                 	db	120	;'x'
   577  007FFE  00                 	db	0
   578  0000                     
   579                           ; #config settings
   580  007FFF  00                 	db	0	; dummy byte at the end
   581  0000                     
   582                           	psect	cinit
   583  00160C                     __pcinit:
   584                           	opt stack 0
   585  00160C                     start_initialization:
   586                           	opt stack 0
   587  00160C                     __initialization:
   588                           	opt stack 0
   589                           
   590                           ; Clear objects allocated to BANK0 (20 bytes)
   591  00160C  EE00  F0BA         	lfsr	0,__pbssBANK0
   592  001610  0E14               	movlw	20
   593  001612                     clear_0:
   594  001612  6AEE               	clrf	postinc0,c
   595  001614  06E8               	decf	wreg,f,c
   596  001616  E1FD               	bnz	clear_0
   597                           
   598                           ; Clear objects allocated to COMRAM (2 bytes)
   599  001618  6A47               	clrf	(__pbssCOMRAM+1)& (0+255),c
   600  00161A  6A46               	clrf	__pbssCOMRAM& (0+255),c
   601                           
   602                           ; Initialize objects allocated to BANK1 (64 bytes)
   603                           ; load TBLPTR registers with __pidataBANK1
   604  00161C  0E66               	movlw	low __pidataBANK1
   605  00161E  6EF6               	movwf	tblptrl,c
   606  001620  0E18               	movlw	high __pidataBANK1
   607  001622  6EF7               	movwf	tblptrh,c
   608  001624  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   609  001626  6EF8               	movwf	tblptru,c
   610  001628  EE01  F000         	lfsr	0,__pdataBANK1
   611  00162C  EE10 F040          	lfsr	1,64
   612  001630                     copy_data0:
   613  001630  0009               	tblrd		*+
   614  001632  CFF5 FFEE          	movff	tablat,postinc0
   615  001636  50E5               	movf	postdec1,w,c
   616  001638  50E1               	movf	fsr1l,w,c
   617  00163A  E1FA               	bnz	copy_data0
   618                           
   619                           ; Initialize objects allocated to BANK0 (40 bytes)
   620                           ; load TBLPTR registers with __pidataBANK0
   621  00163C  0E42               	movlw	low __pidataBANK0
   622  00163E  6EF6               	movwf	tblptrl,c
   623  001640  0E19               	movlw	high __pidataBANK0
   624  001642  6EF7               	movwf	tblptrh,c
   625  001644  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   626  001646  6EF8               	movwf	tblptru,c
   627  001648  EE00  F092         	lfsr	0,__pdataBANK0
   628  00164C  EE10 F028          	lfsr	1,40
   629  001650                     copy_data1:
   630  001650  0009               	tblrd		*+
   631  001652  CFF5 FFEE          	movff	tablat,postinc0
   632  001656  50E5               	movf	postdec1,w,c
   633  001658  50E1               	movf	fsr1l,w,c
   634  00165A  E1FA               	bnz	copy_data1
   635                           
   636                           ; Initialize objects allocated to COMRAM (15 bytes)
   637                           ; load TBLPTR registers with __pidataCOMRAM
   638  00165C  0E00               	movlw	low __pidataCOMRAM
   639  00165E  6EF6               	movwf	tblptrl,c
   640  001660  0E1A               	movlw	high __pidataCOMRAM
   641  001662  6EF7               	movwf	tblptrh,c
   642  001664  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   643  001666  6EF8               	movwf	tblptru,c
   644  001668  EE00  F037         	lfsr	0,__pdataCOMRAM
   645  00166C  EE10 F00F          	lfsr	1,15
   646  001670                     copy_data2:
   647  001670  0009               	tblrd		*+
   648  001672  CFF5 FFEE          	movff	tablat,postinc0
   649  001676  50E5               	movf	postdec1,w,c
   650  001678  50E1               	movf	fsr1l,w,c
   651  00167A  E1FA               	bnz	copy_data2
   652  00167C                     end_of_initialization:
   653                           	opt stack 0
   654  00167C                     __end_of__initialization:
   655                           	opt stack 0
   656  00167C  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   657  00167E  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   658  001680  0E00               	movlw	low (__Lmediumconst shr (0+16))
   659  001682  6EF8               	movwf	tblptru,c
   660  001684  0100               	movlb	0
   661  001686  EF83  F000         	goto	_main	;jump to C main() function
   662                           tblptru	equ	0xFF8
   663                           tblptrh	equ	0xFF7
   664                           tblptrl	equ	0xFF6
   665                           tablat	equ	0xFF5
   666                           postinc0	equ	0xFEE
   667                           wreg	equ	0xFE8
   668                           postdec1	equ	0xFE5
   669                           fsr1l	equ	0xFE1
   670                           
   671                           	psect	bssCOMRAM
   672  000046                     __pbssCOMRAM:
   673                           	opt stack 0
   674  000046                     _i2c_byte_count:
   675                           	opt stack 0
   676  000046                     	ds	1
   677  000047                     _i2c_reg_addr:
   678                           	opt stack 0
   679  000047                     	ds	1
   680                           tblptru	equ	0xFF8
   681                           tblptrh	equ	0xFF7
   682                           tblptrl	equ	0xFF6
   683                           tablat	equ	0xFF5
   684                           postinc0	equ	0xFEE
   685                           wreg	equ	0xFE8
   686                           postdec1	equ	0xFE5
   687                           fsr1l	equ	0xFE1
   688                           
   689                           	psect	dataCOMRAM
   690  000037                     __pdataCOMRAM:
   691                           	opt stack 0
   692  000037                     menu_seconds_to_mmss@F3627:
   693                           	opt stack 0
   694  000037                     	ds	10
   695  000041                     menu_main@F3618:
   696                           	opt stack 0
   697  000041                     	ds	5
   698                           tblptru	equ	0xFF8
   699                           tblptrh	equ	0xFF7
   700                           tblptrl	equ	0xFF6
   701                           tablat	equ	0xFF5
   702                           postinc0	equ	0xFEE
   703                           wreg	equ	0xFE8
   704                           postdec1	equ	0xFE5
   705                           fsr1l	equ	0xFE1
   706                           
   707                           	psect	bssBANK0
   708  0000BA                     __pbssBANK0:
   709                           	opt stack 0
   710  0000BA                     _current_pin:
   711                           	opt stack 0
   712  0000BA                     	ds	9
   713  0000C3                     _current_user:
   714                           	opt stack 0
   715  0000C3                     	ds	9
   716  0000CC                     _EEP_I2C_ADDR:
   717                           	opt stack 0
   718  0000CC                     	ds	1
   719  0000CD                     _credentials_accepted:
   720                           	opt stack 0
   721  0000CD                     	ds	1
   722                           tblptru	equ	0xFF8
   723                           tblptrh	equ	0xFF7
   724                           tblptrl	equ	0xFF6
   725                           tablat	equ	0xFF5
   726                           postinc0	equ	0xFEE
   727                           wreg	equ	0xFE8
   728                           postdec1	equ	0xFE5
   729                           fsr1l	equ	0xFE1
   730                           
   731                           	psect	dataBANK0
   732  000092                     __pdataBANK0:
   733                           	opt stack 0
   734  000092                     _hx:
   735                           	opt stack 0
   736  000092                     	ds	16
   737  0000A2                     _c:
   738                           	opt stack 0
   739  0000A2                     	ds	10
   740  0000AC                     main@F3679:
   741                           	opt stack 0
   742  0000AC                     	ds	10
   743  0000B6                     start_routine@F3721:
   744                           	opt stack 0
   745  0000B6                     	ds	3
   746  0000B9                     main@F3695:
   747                           	opt stack 0
   748  0000B9                     	ds	1
   749                           tblptru	equ	0xFF8
   750                           tblptrh	equ	0xFF7
   751                           tblptrl	equ	0xFF6
   752                           tablat	equ	0xFF5
   753                           postinc0	equ	0xFEE
   754                           wreg	equ	0xFE8
   755                           postdec1	equ	0xFE5
   756                           fsr1l	equ	0xFE1
   757                           
   758                           	psect	dataBANK1
   759  000100                     __pdataBANK1:
   760                           	opt stack 0
   761  000100                     _i2c_r_reg:
   762                           	opt stack 0
   763  000100                     	ds	32
   764  000120                     _i2c_w_reg:
   765                           	opt stack 0
   766  000120                     	ds	32
   767                           tblptru	equ	0xFF8
   768                           tblptrh	equ	0xFF7
   769                           tblptrl	equ	0xFF6
   770                           tablat	equ	0xFF5
   771                           postinc0	equ	0xFEE
   772                           wreg	equ	0xFE8
   773                           postdec1	equ	0xFE5
   774                           fsr1l	equ	0xFE1
   775                           
   776                           	psect	cstackBANK1
   777  000140                     __pcstackBANK1:
   778                           	opt stack 0
   779  000140                     main@c:
   780                           	opt stack 0
   781                           
   782                           ; 10 bytes @ 0x0
   783  000140                     	ds	10
   784  00014A                     main@buffer:
   785                           	opt stack 0
   786                           
   787                           ; 9 bytes @ 0xA
   788  00014A                     	ds	9
   789  000153                     main@i_800:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x13
   793  000153                     	ds	2
   794  000155                     main@n_c:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0x15
   798  000155                     	ds	1
   799  000156                     main@credential_state:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x16
   803  000156                     	ds	1
   804  000157                     main@i_770:
   805                           	opt stack 0
   806                           
   807                           ; 2 bytes @ 0x17
   808  000157                     	ds	2
   809  000159                     main@i_790:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0x19
   813  000159                     	ds	2
   814  00015B                     main@i_793:
   815                           	opt stack 0
   816                           
   817                           ; 2 bytes @ 0x1B
   818  00015B                     	ds	2
   819  00015D                     main@i_796:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0x1D
   823  00015D                     	ds	2
   824  00015F                     main@is_leading_zero:
   825                           	opt stack 0
   826                           
   827                           ; 1 bytes @ 0x1F
   828  00015F                     	ds	1
   829  000160                     main@a:
   830                           	opt stack 0
   831                           
   832                           ; 1 bytes @ 0x20
   833  000160                     	ds	1
   834  000161                     main@i:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0x21
   838  000161                     	ds	2
   839  000163                     main@i_777:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0x23
   843  000163                     	ds	2
   844  000165                     main@i_786:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x25
   848  000165                     	ds	2
   849  000167                     main@i_771:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x27
   853  000167                     	ds	2
   854  000169                     main@i_799:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x29
   858  000169                     	ds	2
   859  00016B                     main@i_767:
   860                           	opt stack 0
   861                           
   862                           ; 2 bytes @ 0x2B
   863  00016B                     	ds	2
   864  00016D                     main@i_804:
   865                           	opt stack 0
   866                           
   867                           ; 2 bytes @ 0x2D
   868  00016D                     	ds	2
   869  00016F                     main@digits:
   870                           	opt stack 0
   871                           
   872                           ; 1 bytes @ 0x2F
   873  00016F                     	ds	1
   874  000170                     main@p:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x30
   878  000170                     	ds	1
   879  000171                     main@n:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0x31
   883  000171                     	ds	1
   884  000172                     main@x:
   885                           	opt stack 0
   886                           
   887                           ; 1 bytes @ 0x32
   888  000172                     	ds	1
   889                           tblptru	equ	0xFF8
   890                           tblptrh	equ	0xFF7
   891                           tblptrl	equ	0xFF6
   892                           tablat	equ	0xFF5
   893                           postinc0	equ	0xFEE
   894                           wreg	equ	0xFE8
   895                           postdec1	equ	0xFE5
   896                           fsr1l	equ	0xFE1
   897                           
   898                           	psect	cstackBANK0
   899  000060                     __pcstackBANK0:
   900                           	opt stack 0
   901  000060                     menu_progress_bar@d:
   902                           	opt stack 0
   903                           
   904                           ; 4 bytes @ 0x0
   905  000060                     	ds	4
   906  000064                     menu_progress_bar@ii:
   907                           	opt stack 0
   908                           
   909                           ; 2 bytes @ 0x4
   910  000064                     	ds	2
   911  000066                     menu_progress_bar@i:
   912                           	opt stack 0
   913                           
   914                           ; 2 bytes @ 0x6
   915  000066                     	ds	2
   916  000068                     menu_progress_bar@i_723:
   917                           	opt stack 0
   918                           
   919                           ; 2 bytes @ 0x8
   920  000068                     	ds	2
   921  00006A                     menu_progress_bar@i_724:
   922                           	opt stack 0
   923                           
   924                           ; 2 bytes @ 0xA
   925  00006A                     	ds	2
   926  00006C                     menu_progress_bar@i_725:
   927                           	opt stack 0
   928                           
   929                           ; 2 bytes @ 0xC
   930  00006C                     	ds	2
   931  00006E                     start_routine@h:
   932                           	opt stack 0
   933                           
   934                           ; 1 bytes @ 0xE
   935  00006E                     	ds	1
   936  00006F                     start_routine@l:
   937                           	opt stack 0
   938                           
   939                           ; 1 bytes @ 0xF
   940  00006F                     	ds	1
   941  000070                     start_routine@error_msg:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x10
   945  000070                     	ds	2
   946  000072                     start_routine@d1:
   947                           	opt stack 0
   948                           
   949                           ; 1 bytes @ 0x12
   950  000072                     	ds	1
   951  000073                     start_routine@v:
   952                           	opt stack 0
   953                           
   954                           ; 1 bytes @ 0x13
   955  000073                     	ds	1
   956  000074                     start_routine@i:
   957                           	opt stack 0
   958                           
   959                           ; 2 bytes @ 0x14
   960  000074                     	ds	2
   961  000076                     start_routine@i_874:
   962                           	opt stack 0
   963                           
   964                           ; 2 bytes @ 0x16
   965  000076                     	ds	2
   966  000078                     start_routine@i_882:
   967                           	opt stack 0
   968                           
   969                           ; 2 bytes @ 0x18
   970  000078                     	ds	2
   971  00007A                     start_routine@i_900:
   972                           	opt stack 0
   973                           
   974                           ; 2 bytes @ 0x1A
   975  00007A                     	ds	2
   976  00007C                     start_routine@i_903:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x1C
   980  00007C                     	ds	2
   981  00007E                     start_routine@i_906:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x1E
   985  00007E                     	ds	2
   986  000080                     start_routine@b:
   987                           	opt stack 0
   988                           
   989                           ; 3 bytes @ 0x20
   990  000080                     	ds	3
   991  000083                     start_routine@i_897:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x23
   995  000083                     	ds	2
   996  000085                     start_routine@i_907:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x25
  1000  000085                     	ds	2
  1001  000087                     start_routine@I2C_new_ADDR:
  1002                           	opt stack 0
  1003                           
  1004                           ; 3 bytes @ 0x27
  1005  000087                     	ds	3
  1006  00008A                     start_routine@a:
  1007                           	opt stack 0
  1008                           
  1009                           ; 1 bytes @ 0x2A
  1010  00008A                     	ds	1
  1011  00008B                     start_routine@dt:
  1012                           	opt stack 0
  1013                           
  1014                           ; 1 bytes @ 0x2B
  1015  00008B                     	ds	1
  1016  00008C                     start_routine@i_894:
  1017                           	opt stack 0
  1018                           
  1019                           ; 2 bytes @ 0x2C
  1020  00008C                     	ds	2
  1021  00008E                     start_routine@dh:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x2E
  1025  00008E                     	ds	1
  1026  00008F                     start_routine@x:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x2F
  1030  00008F                     	ds	1
  1031  000090                     start_routine@n:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x30
  1035  000090                     	ds	1
  1036  000091                     start_routine@new_I2C_address:
  1037                           	opt stack 0
  1038                           
  1039                           ; 1 bytes @ 0x31
  1040  000091                     	ds	1
  1041                           tblptru	equ	0xFF8
  1042                           tblptrh	equ	0xFF7
  1043                           tblptrl	equ	0xFF6
  1044                           tablat	equ	0xFF5
  1045                           postinc0	equ	0xFEE
  1046                           wreg	equ	0xFE8
  1047                           postdec1	equ	0xFE5
  1048                           fsr1l	equ	0xFE1
  1049                           
  1050                           	psect	cstackCOMRAM
  1051  000001                     __pcstackCOMRAM:
  1052                           	opt stack 0
  1053  000001                     ??i2_load_reg_map:
  1054                           
  1055                           ; 1 bytes @ 0x0
  1056  000001                     	ds	4
  1057  000005                     i2load_reg_map@i:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x4
  1061  000005                     	ds	2
  1062  000007                     i2load_reg_map@i_840:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x6
  1066  000007                     	ds	2
  1067  000009                     ??_ISR:
  1068                           
  1069                           ; 1 bytes @ 0x8
  1070  000009                     	ds	14
  1071  000017                     ISR@sspBuf:
  1072                           	opt stack 0
  1073                           
  1074                           ; 1 bytes @ 0x16
  1075  000017                     	ds	1
  1076  000018                     ??_load_reg_map:
  1077  000018                     ?___awdiv:
  1078                           	opt stack 0
  1079  000018                     ?___lwdiv:
  1080                           	opt stack 0
  1081  000018                     Lcd_Port@a:
  1082                           	opt stack 0
  1083  000018                     Eeprom_Read_Byte@address:
  1084                           	opt stack 0
  1085  000018                     Eeprom_Write_Byte@data:
  1086                           	opt stack 0
  1087  000018                     latch_keypad@x:
  1088                           	opt stack 0
  1089  000018                     ___awdiv@dividend:
  1090                           	opt stack 0
  1091  000018                     ___lwdiv@dividend:
  1092                           	opt stack 0
  1093                           
  1094                           ; 2 bytes @ 0x17
  1095  000018                     	ds	1
  1096  000019                     Lcd_Cmd@a:
  1097                           	opt stack 0
  1098  000019                     Lcd_Write_Char@temp:
  1099                           	opt stack 0
  1100  000019                     Eeprom_Write_Byte@address:
  1101                           	opt stack 0
  1102                           
  1103                           ; 1 bytes @ 0x18
  1104  000019                     	ds	1
  1105  00001A                     ??_latch_keypad:
  1106  00001A                     ??_Lcd_Clear:
  1107  00001A                     ??_Lcd_Init:
  1108  00001A                     Lcd_Set_Cursor@b:
  1109                           	opt stack 0
  1110  00001A                     Lcd_Write_Char@y:
  1111                           	opt stack 0
  1112  00001A                     ___awdiv@divisor:
  1113                           	opt stack 0
  1114  00001A                     ___lwdiv@divisor:
  1115                           	opt stack 0
  1116                           
  1117                           ; 2 bytes @ 0x19
  1118  00001A                     	ds	1
  1119  00001B                     Lcd_Set_Cursor@a:
  1120                           	opt stack 0
  1121  00001B                     Lcd_Write_Char@a:
  1122                           	opt stack 0
  1123                           
  1124                           ; 1 bytes @ 0x1A
  1125  00001B                     	ds	1
  1126  00001C                     Lcd_Set_Cursor@z:
  1127                           	opt stack 0
  1128  00001C                     ___awdiv@counter:
  1129                           	opt stack 0
  1130  00001C                     ___lwdiv@counter:
  1131                           	opt stack 0
  1132  00001C                     Lcd_Write_String@a:
  1133                           	opt stack 0
  1134  00001C                     load_reg_map@i:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0x1B
  1138  00001C                     	ds	1
  1139  00001D                     Lcd_Set_Cursor@y:
  1140                           	opt stack 0
  1141  00001D                     ___awdiv@sign:
  1142                           	opt stack 0
  1143  00001D                     ___lwdiv@quotient:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x1C
  1147  00001D                     	ds	1
  1148  00001E                     ??_Lcd_Write_String:
  1149  00001E                     Lcd_Set_Cursor@temp:
  1150                           	opt stack 0
  1151  00001E                     load_reg_map@i_840:
  1152                           	opt stack 0
  1153  00001E                     ___awdiv@quotient:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0x1D
  1157  00001E                     	ds	1
  1158  00001F                     ?___wmul:
  1159                           	opt stack 0
  1160  00001F                     ___wmul@multiplier:
  1161                           	opt stack 0
  1162                           
  1163                           ; 2 bytes @ 0x1E
  1164  00001F                     	ds	1
  1165  000020                     Lcd_Write_String@i:
  1166                           	opt stack 0
  1167                           
  1168                           ; 2 bytes @ 0x1F
  1169  000020                     	ds	1
  1170  000021                     ___wmul@multiplicand:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x20
  1174  000021                     	ds	2
  1175  000023                     ___wmul@product:
  1176                           	opt stack 0
  1177                           
  1178                           ; 2 bytes @ 0x22
  1179  000023                     	ds	2
  1180  000025                     menu_progress_bar@load_time_ms:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x24
  1184  000025                     	ds	2
  1185  000027                     ??_menu_progress_bar:
  1186                           
  1187                           ; 1 bytes @ 0x26
  1188  000027                     	ds	4
  1189  00002B                     ??_start_routine:
  1190                           
  1191                           ; 1 bytes @ 0x2A
  1192  00002B                     	ds	4
  1193  00002F                     ??_main:
  1194                           
  1195                           ; 1 bytes @ 0x2E
  1196  00002F                     	ds	8
  1197                           tblptru	equ	0xFF8
  1198                           tblptrh	equ	0xFF7
  1199                           tblptrl	equ	0xFF6
  1200                           tablat	equ	0xFF5
  1201                           postinc0	equ	0xFEE
  1202                           wreg	equ	0xFE8
  1203                           postdec1	equ	0xFE5
  1204                           fsr1l	equ	0xFE1
  1205                           
  1206 ;;
  1207 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  1208 ;;
  1209 ;; *************** function _main *****************
  1210 ;; Defined at:
  1211 ;;		line 45 in file "main.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;		None
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;  i               2   29[BANK1 ] int 
  1216 ;;  i               2   27[BANK1 ] int 
  1217 ;;  i               2   25[BANK1 ] int 
  1218 ;;  i               2   37[BANK1 ] int 
  1219 ;;  i               2   35[BANK1 ] int 
  1220 ;;  c              10    0[BANK1 ] unsigned char [10]
  1221 ;;  i               2   39[BANK1 ] int 
  1222 ;;  i               2   23[BANK1 ] int 
  1223 ;;  i               2   43[BANK1 ] int 
  1224 ;;  i               2   45[BANK1 ] int 
  1225 ;;  i               2   19[BANK1 ] int 
  1226 ;;  i               2   41[BANK1 ] int 
  1227 ;;  buffer          9   10[BANK1 ] unsigned char [9]
  1228 ;;  credential_s    1   22[BANK1 ] unsigned char 
  1229 ;;  i               2   33[BANK1 ] int 
  1230 ;;  digits          1   47[BANK1 ] unsigned char 
  1231 ;;  a               1   32[BANK1 ] unsigned char 
  1232 ;;  is_leading_z    1   31[BANK1 ] unsigned char 
  1233 ;;  n_c             1   21[BANK1 ] unsigned char 
  1234 ;;  x               1   50[BANK1 ] unsigned char 
  1235 ;;  n               1   49[BANK1 ] unsigned char 
  1236 ;;  p               1   48[BANK1 ] unsigned char 
  1237 ;; Return value:  Size  Location     Type
  1238 ;;                  1    wreg      void 
  1239 ;; Registers used:
  1240 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1241 ;; Tracked objects:
  1242 ;;		On entry : 0/0
  1243 ;;		On exit  : 0/0
  1244 ;;		Unchanged: 0/0
  1245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1246 ;;      Params:         0       0       0       0       0       0       0
  1247 ;;      Locals:         0       0      51       0       0       0       0
  1248 ;;      Temps:          8       0       0       0       0       0       0
  1249 ;;      Totals:         8       0      51       0       0       0       0
  1250 ;;Total ram usage:       59 bytes
  1251 ;; Hardware stack levels required when called:    7
  1252 ;; This function calls:
  1253 ;;		_Lcd_Clear
  1254 ;;		_Lcd_Init
  1255 ;;		_Lcd_Set_Cursor
  1256 ;;		_Lcd_Write_Char
  1257 ;;		_Lcd_Write_String
  1258 ;;		___awdiv
  1259 ;;		_latch_keypad
  1260 ;;		_load_reg_map
  1261 ;;		_mcu_initialise
  1262 ;;		_menu_progress_bar
  1263 ;;		_read_keypad
  1264 ;;		_start_routine
  1265 ;; This function is called by:
  1266 ;;		Startup code after reset
  1267 ;; This function uses a non-reentrant model
  1268 ;;
  1269                           
  1270                           	psect	text0
  1271  000106                     __ptext0:
  1272                           	opt stack 0
  1273  000106                     _main:
  1274                           	opt stack 24
  1275                           
  1276                           ;main.c: 49: unsigned char n = 0, p = 0;
  1277                           
  1278                           ;incstack = 0
  1279  000106  0E00               	movlw	0
  1280  000108  0101               	movlb	1	; () banked
  1281  00010A  6F71               	movwf	main@n& (0+255),b
  1282  00010C  0E00               	movlw	0
  1283  00010E  0101               	movlb	1	; () banked
  1284  000110  6F70               	movwf	main@p& (0+255),b
  1285                           
  1286                           ;main.c: 50: unsigned char x = '_';
  1287  000112  0E5F               	movlw	95
  1288  000114  0101               	movlb	1	; () banked
  1289  000116  6F72               	movwf	main@x& (0+255),b
  1290                           
  1291                           ; BSR set to: 1
  1292                           ;main.c: 53: mcu_initialise();
  1293  000118  EC0B  F00C         	call	_mcu_initialise	;wreg free
  1294                           
  1295                           ;main.c: 54: Lcd_Init();
  1296  00011C  EC45  F00B         	call	_Lcd_Init	;wreg free
  1297                           
  1298                           ;main.c: 58: start_routine();
  1299  000120  EC4F  F005         	call	_start_routine	;wreg free
  1300  000124                     l4141:
  1301                           
  1302                           ;main.c: 62: {
  1303                           ;main.c: 63: for (int i = 0; i < 32; i++)
  1304  000124  0E00               	movlw	0
  1305  000126  0101               	movlb	1	; () banked
  1306  000128  6F62               	movwf	(main@i+1)& (0+255),b
  1307  00012A  0E00               	movlw	0
  1308  00012C  6F61               	movwf	main@i& (0+255),b
  1309                           
  1310                           ; BSR set to: 1
  1311  00012E  0101               	movlb	1	; () banked
  1312  000130  BF62               	btfsc	(main@i+1)& (0+255),7,b
  1313  000132  D00A               	goto	l4147
  1314  000134  0101               	movlb	1	; () banked
  1315  000136  5162               	movf	(main@i+1)& (0+255),w,b
  1316  000138  E106               	bnz	u3910
  1317  00013A  0E20               	movlw	32
  1318  00013C  0101               	movlb	1	; () banked
  1319  00013E  5D61               	subwf	main@i& (0+255),w,b
  1320  000140  B0D8               	btfsc	status,0,c
  1321  000142  D3A4               	goto	l4399
  1322  000144  D001               	goto	l4147
  1323  000146                     u3910:
  1324                           
  1325                           ; BSR set to: 1
  1326  000146  D3A2               	goto	l4399
  1327  000148                     l4147:
  1328                           
  1329                           ; BSR set to: 1
  1330                           ;main.c: 64: i2c_w_reg[i] = '0';
  1331  000148  0E20               	movlw	low _i2c_w_reg
  1332  00014A  0101               	movlb	1	; () banked
  1333  00014C  2561               	addwf	main@i& (0+255),w,b
  1334  00014E  6ED9               	movwf	fsr2l,c
  1335  000150  0E01               	movlw	high _i2c_w_reg
  1336  000152  0101               	movlb	1	; () banked
  1337  000154  2162               	addwfc	(main@i+1)& (0+255),w,b
  1338  000156  6EDA               	movwf	fsr2h,c
  1339  000158  0E30               	movlw	48
  1340  00015A  6EDF               	movwf	indf2,c
  1341                           
  1342                           ; BSR set to: 1
  1343  00015C  0101               	movlb	1	; () banked
  1344  00015E  4B61               	infsnz	main@i& (0+255),f,b
  1345  000160  2B62               	incf	(main@i+1)& (0+255),f,b
  1346                           
  1347                           ; BSR set to: 1
  1348  000162  0101               	movlb	1	; () banked
  1349  000164  BF62               	btfsc	(main@i+1)& (0+255),7,b
  1350  000166  D7F0               	goto	l4147
  1351  000168  0101               	movlb	1	; () banked
  1352  00016A  5162               	movf	(main@i+1)& (0+255),w,b
  1353  00016C  E101               	bnz	u3920
  1354  00016E  D7E5               	goto	L1
  1355  000170                     u3920:
  1356                           
  1357                           ; BSR set to: 1
  1358                           ;main.c: 65: while (credentials_accepted == 0 )
  1359  000170  D38D               	goto	l4399
  1360  000172                     l4153:
  1361                           
  1362                           ;main.c: 66: {
  1363                           ;main.c: 67: unsigned char buffer[9];
  1364                           ;main.c: 68: for (int i = 0; i < 9; i++)
  1365  000172  0E00               	movlw	0
  1366  000174  0101               	movlb	1	; () banked
  1367  000176  6F6C               	movwf	(main@i_767+1)& (0+255),b
  1368  000178  0E00               	movlw	0
  1369  00017A  6F6B               	movwf	main@i_767& (0+255),b
  1370  00017C                     l4155:
  1371                           
  1372                           ; BSR set to: 1
  1373  00017C  0101               	movlb	1	; () banked
  1374  00017E  BF6C               	btfsc	(main@i_767+1)& (0+255),7,b
  1375  000180  D008               	goto	l4159
  1376  000182  0101               	movlb	1	; () banked
  1377  000184  516C               	movf	(main@i_767+1)& (0+255),w,b
  1378  000186  E127               	bnz	l4165
  1379  000188  0E09               	movlw	9
  1380  00018A  0101               	movlb	1	; () banked
  1381  00018C  5D6B               	subwf	main@i_767& (0+255),w,b
  1382  00018E  B0D8               	btfsc	status,0,c
  1383  000190  D022               	goto	l4165
  1384  000192                     l4159:
  1385                           
  1386                           ; BSR set to: 1
  1387                           ;main.c: 69: {
  1388                           ;main.c: 70: current_user[i] = '0';
  1389  000192  0EC3               	movlw	low _current_user
  1390  000194  0101               	movlb	1	; () banked
  1391  000196  256B               	addwf	main@i_767& (0+255),w,b
  1392  000198  6ED9               	movwf	fsr2l,c
  1393  00019A  0E00               	movlw	high _current_user
  1394  00019C  0101               	movlb	1	; () banked
  1395  00019E  216C               	addwfc	(main@i_767+1)& (0+255),w,b
  1396  0001A0  6EDA               	movwf	fsr2h,c
  1397  0001A2  0E30               	movlw	48
  1398  0001A4  6EDF               	movwf	indf2,c
  1399                           
  1400                           ;main.c: 71: current_pin[i] = '0';
  1401  0001A6  0EBA               	movlw	low _current_pin
  1402  0001A8  0101               	movlb	1	; () banked
  1403  0001AA  256B               	addwf	main@i_767& (0+255),w,b
  1404  0001AC  6ED9               	movwf	fsr2l,c
  1405  0001AE  0E00               	movlw	high _current_pin
  1406  0001B0  0101               	movlb	1	; () banked
  1407  0001B2  216C               	addwfc	(main@i_767+1)& (0+255),w,b
  1408  0001B4  6EDA               	movwf	fsr2h,c
  1409  0001B6  0E30               	movlw	48
  1410  0001B8  6EDF               	movwf	indf2,c
  1411                           
  1412                           ;main.c: 72: buffer[i] = '0';
  1413  0001BA  0E4A               	movlw	low main@buffer
  1414  0001BC  0101               	movlb	1	; () banked
  1415  0001BE  256B               	addwf	main@i_767& (0+255),w,b
  1416  0001C0  6ED9               	movwf	fsr2l,c
  1417  0001C2  0E01               	movlw	high main@buffer
  1418  0001C4  0101               	movlb	1	; () banked
  1419  0001C6  216C               	addwfc	(main@i_767+1)& (0+255),w,b
  1420  0001C8  6EDA               	movwf	fsr2h,c
  1421  0001CA  0E30               	movlw	48
  1422  0001CC  6EDF               	movwf	indf2,c
  1423                           
  1424                           ; BSR set to: 1
  1425  0001CE  0101               	movlb	1	; () banked
  1426  0001D0  4B6B               	infsnz	main@i_767& (0+255),f,b
  1427  0001D2  2B6C               	incf	(main@i_767+1)& (0+255),f,b
  1428  0001D4  D7D3               	goto	l4155
  1429  0001D6                     l4165:
  1430                           
  1431                           ; BSR set to: 1
  1432                           ;main.c: 73: }
  1433                           ;main.c: 74: n = 0;
  1434  0001D6  0E00               	movlw	0
  1435  0001D8  0101               	movlb	1	; () banked
  1436  0001DA  6F71               	movwf	main@n& (0+255),b
  1437                           
  1438                           ; BSR set to: 1
  1439                           ;main.c: 75: Lcd_Set_Cursor(1,1);
  1440  0001DC  0E01               	movlw	1
  1441  0001DE  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1442  0001E0  0E01               	movlw	1
  1443  0001E2  ECE3  F00B         	call	_Lcd_Set_Cursor
  1444                           
  1445                           ;main.c: 76: Lcd_Write_String("Enter your ID:  ");
  1446  0001E6  0E27               	movlw	low STR_3
  1447  0001E8  6E1C               	movwf	Lcd_Write_String@a,c
  1448  0001EA  0E7F               	movlw	high STR_3
  1449  0001EC  6E1D               	movwf	Lcd_Write_String@a+1,c
  1450  0001EE  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  1451                           
  1452                           ;main.c: 77: Lcd_Set_Cursor(2,1);
  1453  0001F2  0E01               	movlw	1
  1454  0001F4  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1455  0001F6  0E02               	movlw	2
  1456  0001F8  ECE3  F00B         	call	_Lcd_Set_Cursor
  1457                           
  1458                           ;main.c: 78: Lcd_Write_String("[ ]             ");
  1459  0001FC  0ED2               	movlw	low STR_4
  1460  0001FE  6E1C               	movwf	Lcd_Write_String@a,c
  1461  000200  0E7E               	movlw	high STR_4
  1462  000202  6E1D               	movwf	Lcd_Write_String@a+1,c
  1463  000204  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  1464                           
  1465                           ;main.c: 79: Lcd_Set_Cursor(2,1);
  1466  000208  0E01               	movlw	1
  1467  00020A  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1468  00020C  0E02               	movlw	2
  1469  00020E  ECE3  F00B         	call	_Lcd_Set_Cursor
  1470                           
  1471                           ;main.c: 81: while (n < 10)
  1472  000212  D0B0               	goto	l4227
  1473  000214                     l4177:
  1474                           
  1475                           ;main.c: 82: {
  1476                           ;main.c: 83: if (n == 9)
  1477  000214  0E09               	movlw	9
  1478  000216  0101               	movlb	1	; () banked
  1479  000218  1971               	xorwf	main@n& (0+255),w,b
  1480  00021A  B4D8               	btfsc	status,2,c
  1481  00021C  D0AF               	goto	l4229
  1482                           
  1483                           ; BSR set to: 1
  1484                           ;main.c: 85: Lcd_Set_Cursor(2,2);
  1485                           
  1486                           ; BSR set to: 1
  1487                           
  1488                           ; BSR set to: 1
  1489                           ;main.c: 84: break;
  1490  00021E  0E02               	movlw	2
  1491  000220  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1492  000222  0E02               	movlw	2
  1493  000224  ECE3  F00B         	call	_Lcd_Set_Cursor
  1494                           
  1495                           ;main.c: 86: Lcd_Write_Char(c[9-n]);
  1496  000228  0101               	movlb	1	; () banked
  1497  00022A  5171               	movf	main@n& (0+255),w,b
  1498  00022C  6E2F               	movwf	??_main& (0+255),c
  1499  00022E  6A30               	clrf	(??_main+1)& (0+255),c
  1500  000230  1E2F               	comf	??_main,f,c
  1501  000232  1E30               	comf	??_main+1,f,c
  1502  000234  4A2F               	infsnz	??_main,f,c
  1503  000236  2A30               	incf	??_main+1,f,c
  1504  000238  0E09               	movlw	9
  1505  00023A  262F               	addwf	??_main,f,c
  1506  00023C  0E00               	movlw	0
  1507  00023E  2230               	addwfc	??_main+1,f,c
  1508  000240  0EA2               	movlw	low _c
  1509  000242  242F               	addwf	??_main,w,c
  1510  000244  6ED9               	movwf	fsr2l,c
  1511  000246  0E00               	movlw	high _c
  1512  000248  2030               	addwfc	??_main+1,w,c
  1513  00024A  6EDA               	movwf	fsr2h,c
  1514  00024C  50DF               	movf	indf2,w,c
  1515  00024E  EC53  F00C         	call	_Lcd_Write_Char
  1516                           
  1517                           ;main.c: 87: x = read_keypad();
  1518  000252  ECE0  F009         	call	_read_keypad	;wreg free
  1519  000256  0101               	movlb	1	; () banked
  1520  000258  6F72               	movwf	main@x& (0+255),b
  1521                           
  1522                           ; BSR set to: 1
  1523                           ;main.c: 88: if (x != '_')
  1524  00025A  0E5F               	movlw	95
  1525  00025C  0101               	movlb	1	; () banked
  1526  00025E  1972               	xorwf	main@x& (0+255),w,b
  1527  000260  B4D8               	btfsc	status,2,c
  1528  000262  D088               	goto	l4227
  1529                           
  1530                           ; BSR set to: 1
  1531                           ;main.c: 89: {
  1532                           ;main.c: 90: if (((x - '#') == 0)&&(n > 0))
  1533  000264  0EDD               	movlw	221
  1534  000266  6E2F               	movwf	??_main& (0+255),c
  1535  000268  0EFF               	movlw	255
  1536  00026A  6E30               	movwf	(??_main+1)& (0+255),c
  1537  00026C  0101               	movlb	1	; () banked
  1538  00026E  5172               	movf	main@x& (0+255),w,b
  1539  000270  6E31               	movwf	(??_main+2)& (0+255),c
  1540  000272  6A32               	clrf	(??_main+3)& (0+255),c
  1541  000274  502F               	movf	??_main,w,c
  1542  000276  2631               	addwf	??_main+2,f,c
  1543  000278  5030               	movf	??_main+1,w,c
  1544  00027A  2232               	addwfc	??_main+3,f,c
  1545  00027C  5031               	movf	??_main+2,w,c
  1546  00027E  1032               	iorwf	??_main+3,w,c
  1547  000280  A4D8               	btfss	status,2,c
  1548  000282  D034               	goto	l4209
  1549                           
  1550                           ; BSR set to: 1
  1551  000284  0101               	movlb	1	; () banked
  1552  000286  5171               	movf	main@n& (0+255),w,b
  1553  000288  0101               	movlb	1	; () banked
  1554  00028A  B4D8               	btfsc	status,2,c
  1555  00028C  D02F               	goto	l4209
  1556                           
  1557                           ; BSR set to: 1
  1558                           ;main.c: 91: {
  1559                           ;main.c: 92: buffer[n] = '?';
  1560  00028E  0101               	movlb	1	; () banked
  1561  000290  5171               	movf	main@n& (0+255),w,b
  1562  000292  0D01               	mullw	1
  1563  000294  0E4A               	movlw	low main@buffer
  1564  000296  24F3               	addwf	prodl,w,c
  1565  000298  6ED9               	movwf	fsr2l,c
  1566  00029A  0E01               	movlw	high main@buffer
  1567  00029C  20F4               	addwfc	prodh,w,c
  1568  00029E  6EDA               	movwf	fsr2h,c
  1569  0002A0  0E3F               	movlw	63
  1570  0002A2  6EDF               	movwf	indf2,c
  1571                           
  1572                           ; BSR set to: 1
  1573                           ;main.c: 93: Lcd_Set_Cursor(2, 7 + n);
  1574  0002A4  0101               	movlb	1	; () banked
  1575  0002A6  5171               	movf	main@n& (0+255),w,b
  1576  0002A8  0F07               	addlw	7
  1577  0002AA  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1578  0002AC  0E02               	movlw	2
  1579  0002AE  ECE3  F00B         	call	_Lcd_Set_Cursor
  1580                           
  1581                           ;main.c: 94: Lcd_Write_Char('_');
  1582  0002B2  0E5F               	movlw	95
  1583  0002B4  EC53  F00C         	call	_Lcd_Write_Char
  1584                           
  1585                           ;main.c: 95: latch_keypad(&x);
  1586  0002B8  0E72               	movlw	low main@x
  1587  0002BA  6E18               	movwf	latch_keypad@x,c
  1588  0002BC  0E01               	movlw	high main@x
  1589  0002BE  6E19               	movwf	latch_keypad@x+1,c
  1590  0002C0  EC6F  F00C         	call	_latch_keypad	;wreg free
  1591                           
  1592                           ;main.c: 96: Lcd_Set_Cursor(2, 8 + n);
  1593  0002C4  0101               	movlb	1	; () banked
  1594  0002C6  5171               	movf	main@n& (0+255),w,b
  1595  0002C8  0F08               	addlw	8
  1596  0002CA  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1597  0002CC  0E02               	movlw	2
  1598  0002CE  ECE3  F00B         	call	_Lcd_Set_Cursor
  1599                           
  1600                           ;main.c: 97: Lcd_Write_Char(' ');
  1601  0002D2  0E20               	movlw	32
  1602  0002D4  EC53  F00C         	call	_Lcd_Write_Char
  1603                           
  1604                           ;main.c: 98: Lcd_Set_Cursor(2, 7 + n);
  1605  0002D8  0101               	movlb	1	; () banked
  1606  0002DA  5171               	movf	main@n& (0+255),w,b
  1607  0002DC  0F07               	addlw	7
  1608  0002DE  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1609  0002E0  0E02               	movlw	2
  1610  0002E2  ECE3  F00B         	call	_Lcd_Set_Cursor
  1611                           
  1612                           ;main.c: 99: n--;
  1613  0002E6  0101               	movlb	1	; () banked
  1614  0002E8  0771               	decf	main@n& (0+255),f,b
  1615                           
  1616                           ;main.c: 100: }
  1617  0002EA  D044               	goto	l4227
  1618  0002EC                     l4209:
  1619                           
  1620                           ; BSR set to: 1
  1621                           ;main.c: 101: else if ((x - '#') != 0)
  1622  0002EC  0EDD               	movlw	221
  1623  0002EE  6E2F               	movwf	??_main& (0+255),c
  1624  0002F0  0EFF               	movlw	255
  1625  0002F2  6E30               	movwf	(??_main+1)& (0+255),c
  1626  0002F4  0101               	movlb	1	; () banked
  1627  0002F6  5172               	movf	main@x& (0+255),w,b
  1628  0002F8  6E31               	movwf	(??_main+2)& (0+255),c
  1629  0002FA  6A32               	clrf	(??_main+3)& (0+255),c
  1630  0002FC  502F               	movf	??_main,w,c
  1631  0002FE  2631               	addwf	??_main+2,f,c
  1632  000300  5030               	movf	??_main+1,w,c
  1633  000302  2232               	addwfc	??_main+3,f,c
  1634  000304  5031               	movf	??_main+2,w,c
  1635  000306  1032               	iorwf	??_main+3,w,c
  1636  000308  B4D8               	btfsc	status,2,c
  1637  00030A  D034               	goto	l4227
  1638                           
  1639                           ; BSR set to: 1
  1640                           ;main.c: 102: {
  1641                           ;main.c: 103: if ((x == '*')|(n == 9))
  1642  00030C  0E2A               	movlw	42
  1643  00030E  0101               	movlb	1	; () banked
  1644  000310  1972               	xorwf	main@x& (0+255),w,b
  1645  000312  B4D8               	btfsc	status,2,c
  1646  000314  D033               	goto	l4229
  1647                           
  1648                           ; BSR set to: 1
  1649  000316  0E09               	movlw	9
  1650  000318  0101               	movlb	1	; () banked
  1651  00031A  1971               	xorwf	main@n& (0+255),w,b
  1652  00031C  B4D8               	btfsc	status,2,c
  1653  00031E  D02E               	goto	l4229
  1654                           
  1655                           ; BSR set to: 1
  1656                           ;main.c: 106: }
  1657                           ;main.c: 107: n++;
  1658                           
  1659                           ; BSR set to: 1
  1660                           
  1661                           ; BSR set to: 1
  1662                           ;main.c: 104: {
  1663                           ;main.c: 105: break;
  1664  000320  0101               	movlb	1	; () banked
  1665  000322  2B71               	incf	main@n& (0+255),f,b
  1666                           
  1667                           ; BSR set to: 1
  1668                           ;main.c: 108: buffer[n-1] = x;
  1669  000324  0EFF               	movlw	255
  1670  000326  6E2F               	movwf	??_main& (0+255),c
  1671  000328  0EFF               	movlw	255
  1672  00032A  6E30               	movwf	(??_main+1)& (0+255),c
  1673  00032C  0101               	movlb	1	; () banked
  1674  00032E  5171               	movf	main@n& (0+255),w,b
  1675  000330  6E31               	movwf	(??_main+2)& (0+255),c
  1676  000332  6A32               	clrf	(??_main+3)& (0+255),c
  1677  000334  502F               	movf	??_main,w,c
  1678  000336  2631               	addwf	??_main+2,f,c
  1679  000338  5030               	movf	??_main+1,w,c
  1680  00033A  2232               	addwfc	??_main+3,f,c
  1681  00033C  0E4A               	movlw	low main@buffer
  1682  00033E  2431               	addwf	??_main+2,w,c
  1683  000340  6ED9               	movwf	fsr2l,c
  1684  000342  0E01               	movlw	high main@buffer
  1685  000344  2032               	addwfc	??_main+3,w,c
  1686  000346  6EDA               	movwf	fsr2h,c
  1687  000348  C172  FFDF         	movff	main@x,indf2
  1688                           
  1689                           ; BSR set to: 1
  1690                           ;main.c: 109: Lcd_Set_Cursor(2, 7 + n);
  1691  00034C  0101               	movlb	1	; () banked
  1692  00034E  5171               	movf	main@n& (0+255),w,b
  1693  000350  0F07               	addlw	7
  1694  000352  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1695  000354  0E02               	movlw	2
  1696  000356  ECE3  F00B         	call	_Lcd_Set_Cursor
  1697                           
  1698                           ;main.c: 110: Lcd_Write_Char(x);
  1699  00035A  0101               	movlb	1	; () banked
  1700  00035C  5172               	movf	main@x& (0+255),w,b
  1701  00035E  EC53  F00C         	call	_Lcd_Write_Char
  1702                           
  1703                           ;main.c: 111: Lcd_Write_Char('_');
  1704  000362  0E5F               	movlw	95
  1705  000364  EC53  F00C         	call	_Lcd_Write_Char
  1706                           
  1707                           ;main.c: 112: latch_keypad(&x);
  1708  000368  0E72               	movlw	low main@x
  1709  00036A  6E18               	movwf	latch_keypad@x,c
  1710  00036C  0E01               	movlw	high main@x
  1711  00036E  6E19               	movwf	latch_keypad@x+1,c
  1712  000370  EC6F  F00C         	call	_latch_keypad	;wreg free
  1713  000374                     l4227:
  1714  000374  0E09               	movlw	9
  1715  000376  0101               	movlb	1	; () banked
  1716  000378  6571               	cpfsgt	main@n& (0+255),b
  1717  00037A  D74C               	goto	l4177
  1718  00037C                     l4229:
  1719                           
  1720                           ; BSR set to: 1
  1721                           ;main.c: 113: }
  1722                           ;main.c: 114: }
  1723                           ;main.c: 115: }
  1724                           ;main.c: 116: for (int i = 0; i < 10; i++)
  1725  00037C  0E00               	movlw	0
  1726  00037E  0101               	movlb	1	; () banked
  1727  000380  6F58               	movwf	(main@i_770+1)& (0+255),b
  1728  000382  0E00               	movlw	0
  1729  000384  6F57               	movwf	main@i_770& (0+255),b
  1730  000386                     l4231:
  1731                           
  1732                           ; BSR set to: 1
  1733  000386  0101               	movlb	1	; () banked
  1734  000388  BF58               	btfsc	(main@i_770+1)& (0+255),7,b
  1735  00038A  D008               	goto	l4235
  1736  00038C  0101               	movlb	1	; () banked
  1737  00038E  5158               	movf	(main@i_770+1)& (0+255),w,b
  1738  000390  E110               	bnz	l4239
  1739  000392  0E0A               	movlw	10
  1740  000394  0101               	movlb	1	; () banked
  1741  000396  5D57               	subwf	main@i_770& (0+255),w,b
  1742  000398  B0D8               	btfsc	status,0,c
  1743  00039A  D00B               	goto	l4239
  1744  00039C                     l4235:
  1745                           
  1746                           ; BSR set to: 1
  1747                           ;main.c: 117: _delay((unsigned long)((10)*(16000000/4000.0)));
  1748  00039C  0E34               	movlw	52
  1749  00039E  6E2F               	movwf	??_main& (0+255),c
  1750  0003A0  0EF2               	movlw	242
  1751  0003A2                     u4377:
  1752  0003A2  2EE8               	decfsz	wreg,f,c
  1753  0003A4  D7FE               	goto	u4377
  1754  0003A6  2E2F               	decfsz	??_main& (0+255),f,c
  1755  0003A8  D7FC               	goto	u4377
  1756  0003AA  0101               	movlb	1	; () banked
  1757  0003AC  4B57               	infsnz	main@i_770& (0+255),f,b
  1758  0003AE  2B58               	incf	(main@i_770+1)& (0+255),f,b
  1759  0003B0  D7EA               	goto	l4231
  1760  0003B2                     l4239:
  1761                           
  1762                           ; BSR set to: 1
  1763                           ;main.c: 118: for (int i = 0; i < n; i++)
  1764  0003B2  0E00               	movlw	0
  1765  0003B4  0101               	movlb	1	; () banked
  1766  0003B6  6F68               	movwf	(main@i_771+1)& (0+255),b
  1767  0003B8  0E00               	movlw	0
  1768  0003BA  6F67               	movwf	main@i_771& (0+255),b
  1769  0003BC  D055               	goto	l4247
  1770  0003BE                     l4241:
  1771                           
  1772                           ; BSR set to: 1
  1773                           ;main.c: 119: {
  1774                           ;main.c: 120: current_user[8 - i] = buffer[(n-1) - i];
  1775  0003BE  0EFF               	movlw	255
  1776  0003C0  6E2F               	movwf	??_main& (0+255),c
  1777  0003C2  0EFF               	movlw	255
  1778  0003C4  6E30               	movwf	(??_main+1)& (0+255),c
  1779  0003C6  C167  F031         	movff	main@i_771,??_main+2
  1780  0003CA  C168  F032         	movff	main@i_771+1,??_main+3
  1781  0003CE  1E31               	comf	??_main+2,f,c
  1782  0003D0  1E32               	comf	??_main+3,f,c
  1783  0003D2  4A31               	infsnz	??_main+2,f,c
  1784  0003D4  2A32               	incf	??_main+3,f,c
  1785  0003D6  0101               	movlb	1	; () banked
  1786  0003D8  5171               	movf	main@n& (0+255),w,b
  1787  0003DA  6E33               	movwf	(??_main+4)& (0+255),c
  1788  0003DC  6A34               	clrf	(??_main+5)& (0+255),c
  1789  0003DE  5031               	movf	??_main+2,w,c
  1790  0003E0  2633               	addwf	??_main+4,f,c
  1791  0003E2  5032               	movf	??_main+3,w,c
  1792  0003E4  2234               	addwfc	??_main+5,f,c
  1793  0003E6  502F               	movf	??_main,w,c
  1794  0003E8  2633               	addwf	??_main+4,f,c
  1795  0003EA  5030               	movf	??_main+1,w,c
  1796  0003EC  2234               	addwfc	??_main+5,f,c
  1797  0003EE  0E4A               	movlw	low main@buffer
  1798  0003F0  2433               	addwf	??_main+4,w,c
  1799  0003F2  6ED9               	movwf	fsr2l,c
  1800  0003F4  0E01               	movlw	high main@buffer
  1801  0003F6  2034               	addwfc	??_main+5,w,c
  1802  0003F8  6EDA               	movwf	fsr2h,c
  1803  0003FA  C167  F035         	movff	main@i_771,??_main+6
  1804  0003FE  C168  F036         	movff	main@i_771+1,??_main+7
  1805  000402  1E35               	comf	??_main+6,f,c
  1806  000404  1E36               	comf	??_main+7,f,c
  1807  000406  4A35               	infsnz	??_main+6,f,c
  1808  000408  2A36               	incf	??_main+7,f,c
  1809  00040A  0E08               	movlw	8
  1810  00040C  2635               	addwf	??_main+6,f,c
  1811  00040E  0E00               	movlw	0
  1812  000410  2236               	addwfc	??_main+7,f,c
  1813  000412  0EC3               	movlw	low _current_user
  1814  000414  2435               	addwf	??_main+6,w,c
  1815  000416  6EE1               	movwf	fsr1l,c
  1816  000418  0E00               	movlw	high _current_user
  1817  00041A  2036               	addwfc	??_main+7,w,c
  1818  00041C  6EE2               	movwf	fsr1h,c
  1819  00041E  CFDF FFE7          	movff	indf2,indf1
  1820                           
  1821                           ; BSR set to: 1
  1822                           ;main.c: 121: buffer[(n-1) - i] = '0';
  1823  000422  0EFF               	movlw	255
  1824  000424  6E2F               	movwf	??_main& (0+255),c
  1825  000426  0EFF               	movlw	255
  1826  000428  6E30               	movwf	(??_main+1)& (0+255),c
  1827  00042A  C167  F031         	movff	main@i_771,??_main+2
  1828  00042E  C168  F032         	movff	main@i_771+1,??_main+3
  1829  000432  1E31               	comf	??_main+2,f,c
  1830  000434  1E32               	comf	??_main+3,f,c
  1831  000436  4A31               	infsnz	??_main+2,f,c
  1832  000438  2A32               	incf	??_main+3,f,c
  1833  00043A  0101               	movlb	1	; () banked
  1834  00043C  5171               	movf	main@n& (0+255),w,b
  1835  00043E  6E33               	movwf	(??_main+4)& (0+255),c
  1836  000440  6A34               	clrf	(??_main+5)& (0+255),c
  1837  000442  5031               	movf	??_main+2,w,c
  1838  000444  2633               	addwf	??_main+4,f,c
  1839  000446  5032               	movf	??_main+3,w,c
  1840  000448  2234               	addwfc	??_main+5,f,c
  1841  00044A  502F               	movf	??_main,w,c
  1842  00044C  2633               	addwf	??_main+4,f,c
  1843  00044E  5030               	movf	??_main+1,w,c
  1844  000450  2234               	addwfc	??_main+5,f,c
  1845  000452  0E4A               	movlw	low main@buffer
  1846  000454  2433               	addwf	??_main+4,w,c
  1847  000456  6ED9               	movwf	fsr2l,c
  1848  000458  0E01               	movlw	high main@buffer
  1849  00045A  2034               	addwfc	??_main+5,w,c
  1850  00045C  6EDA               	movwf	fsr2h,c
  1851  00045E  0E30               	movlw	48
  1852  000460  6EDF               	movwf	indf2,c
  1853                           
  1854                           ; BSR set to: 1
  1855  000462  0101               	movlb	1	; () banked
  1856  000464  4B67               	infsnz	main@i_771& (0+255),f,b
  1857  000466  2B68               	incf	(main@i_771+1)& (0+255),f,b
  1858  000468                     l4247:
  1859                           
  1860                           ; BSR set to: 1
  1861  000468  0101               	movlb	1	; () banked
  1862  00046A  5171               	movf	main@n& (0+255),w,b
  1863  00046C  6E2F               	movwf	??_main& (0+255),c
  1864  00046E  6A30               	clrf	(??_main+1)& (0+255),c
  1865  000470  502F               	movf	??_main,w,c
  1866  000472  0101               	movlb	1	; () banked
  1867  000474  5D67               	subwf	main@i_771& (0+255),w,b
  1868  000476  0101               	movlb	1	; () banked
  1869  000478  5168               	movf	(main@i_771+1)& (0+255),w,b
  1870  00047A  0A80               	xorlw	128
  1871  00047C  6E31               	movwf	(??_main+2)& (0+255),c
  1872  00047E  5030               	movf	??_main+1,w,c
  1873  000480  0A80               	xorlw	128
  1874  000482  5831               	subwfb	(??_main+2)& (0+255),w,c
  1875  000484  A0D8               	btfss	status,0,c
  1876  000486  D79B               	goto	l4241
  1877                           
  1878                           ; BSR set to: 1
  1879                           ;main.c: 122: }
  1880                           ;main.c: 123: Lcd_Clear();
  1881                           
  1882                           ; BSR set to: 1
  1883  000488  ECDA  F00C         	call	_Lcd_Clear	;wreg free
  1884                           
  1885                           ;main.c: 124: menu_progress_bar(100);
  1886  00048C  0E00               	movlw	0
  1887  00048E  6E26               	movwf	menu_progress_bar@load_time_ms+1,c
  1888  000490  0E64               	movlw	100
  1889  000492  6E25               	movwf	menu_progress_bar@load_time_ms,c
  1890  000494  EC0F  F009         	call	_menu_progress_bar	;wreg free
  1891                           
  1892                           ;main.c: 128: p = 0;
  1893  000498  0E00               	movlw	0
  1894  00049A  0101               	movlb	1	; () banked
  1895  00049C  6F70               	movwf	main@p& (0+255),b
  1896                           
  1897                           ; BSR set to: 1
  1898                           ;main.c: 129: Lcd_Set_Cursor(1,1);
  1899  00049E  0E01               	movlw	1
  1900  0004A0  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1901  0004A2  0E01               	movlw	1
  1902  0004A4  ECE3  F00B         	call	_Lcd_Set_Cursor
  1903                           
  1904                           ;main.c: 130: Lcd_Write_String("Enter your PIN: ");
  1905  0004A8  0E5A               	movlw	low STR_5
  1906  0004AA  6E1C               	movwf	Lcd_Write_String@a,c
  1907  0004AC  0E7F               	movlw	high STR_5
  1908  0004AE  6E1D               	movwf	Lcd_Write_String@a+1,c
  1909  0004B0  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  1910                           
  1911                           ;main.c: 131: Lcd_Set_Cursor(2,1);
  1912  0004B4  0E01               	movlw	1
  1913  0004B6  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1914  0004B8  0E02               	movlw	2
  1915  0004BA  ECE3  F00B         	call	_Lcd_Set_Cursor
  1916                           
  1917                           ;main.c: 132: Lcd_Write_String("[ ]             ");
  1918  0004BE  0ED2               	movlw	low STR_4
  1919  0004C0  6E1C               	movwf	Lcd_Write_String@a,c
  1920  0004C2  0E7E               	movlw	high STR_4
  1921  0004C4  6E1D               	movwf	Lcd_Write_String@a+1,c
  1922  0004C6  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  1923                           
  1924                           ;main.c: 133: Lcd_Set_Cursor(2,1);
  1925  0004CA  0E01               	movlw	1
  1926  0004CC  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1927  0004CE  0E02               	movlw	2
  1928  0004D0  ECE3  F00B         	call	_Lcd_Set_Cursor
  1929                           
  1930                           ;main.c: 134: while (p < 10)
  1931  0004D4  D0B8               	goto	l4317
  1932  0004D6                     l4265:
  1933                           
  1934                           ;main.c: 135: {
  1935                           ;main.c: 136: if (p == 9)
  1936  0004D6  0E09               	movlw	9
  1937  0004D8  0101               	movlb	1	; () banked
  1938  0004DA  1970               	xorwf	main@p& (0+255),w,b
  1939  0004DC  B4D8               	btfsc	status,2,c
  1940  0004DE  D0B7               	goto	l4319
  1941                           
  1942                           ; BSR set to: 1
  1943                           ;main.c: 138: char c[] = {'0','1','2','3','4','5','6','7','8','9'};
  1944                           
  1945                           ; BSR set to: 1
  1946                           
  1947                           ; BSR set to: 1
  1948                           ;main.c: 137: break;
  1949  0004E0  EE20  F0AC         	lfsr	2,main@F3679
  1950  0004E4  EE11  F040         	lfsr	1,main@c
  1951  0004E8  0E09               	movlw	9
  1952  0004EA                     u4071:
  1953  0004EA  CFDB FFE3          	movff	plusw2,plusw1
  1954  0004EE  06E8               	decf	wreg,f,c
  1955  0004F0  E2FC               	bc	u4071
  1956                           
  1957                           ; BSR set to: 1
  1958                           ;main.c: 139: Lcd_Set_Cursor(2,2);
  1959  0004F2  0E02               	movlw	2
  1960  0004F4  6E1A               	movwf	Lcd_Set_Cursor@b,c
  1961  0004F6  0E02               	movlw	2
  1962  0004F8  ECE3  F00B         	call	_Lcd_Set_Cursor
  1963                           
  1964                           ;main.c: 140: Lcd_Write_Char(c[9-p]);
  1965  0004FC  0101               	movlb	1	; () banked
  1966  0004FE  5170               	movf	main@p& (0+255),w,b
  1967  000500  6E2F               	movwf	??_main& (0+255),c
  1968  000502  6A30               	clrf	(??_main+1)& (0+255),c
  1969  000504  1E2F               	comf	??_main,f,c
  1970  000506  1E30               	comf	??_main+1,f,c
  1971  000508  4A2F               	infsnz	??_main,f,c
  1972  00050A  2A30               	incf	??_main+1,f,c
  1973  00050C  0E09               	movlw	9
  1974  00050E  262F               	addwf	??_main,f,c
  1975  000510  0E00               	movlw	0
  1976  000512  2230               	addwfc	??_main+1,f,c
  1977  000514  0E40               	movlw	low main@c
  1978  000516  242F               	addwf	??_main,w,c
  1979  000518  6ED9               	movwf	fsr2l,c
  1980  00051A  0E01               	movlw	high main@c
  1981  00051C  2030               	addwfc	??_main+1,w,c
  1982  00051E  6EDA               	movwf	fsr2h,c
  1983  000520  50DF               	movf	indf2,w,c
  1984  000522  EC53  F00C         	call	_Lcd_Write_Char
  1985                           
  1986                           ;main.c: 141: x = read_keypad();
  1987  000526  ECE0  F009         	call	_read_keypad	;wreg free
  1988  00052A  0101               	movlb	1	; () banked
  1989  00052C  6F72               	movwf	main@x& (0+255),b
  1990                           
  1991                           ; BSR set to: 1
  1992                           ;main.c: 142: if (x != '_')
  1993  00052E  0E5F               	movlw	95
  1994  000530  0101               	movlb	1	; () banked
  1995  000532  1972               	xorwf	main@x& (0+255),w,b
  1996  000534  B4D8               	btfsc	status,2,c
  1997  000536  D087               	goto	l4317
  1998                           
  1999                           ; BSR set to: 1
  2000                           ;main.c: 143: {
  2001                           ;main.c: 144: if (((x - '#') == 0)&&(p > 0))
  2002  000538  0EDD               	movlw	221
  2003  00053A  6E2F               	movwf	??_main& (0+255),c
  2004  00053C  0EFF               	movlw	255
  2005  00053E  6E30               	movwf	(??_main+1)& (0+255),c
  2006  000540  0101               	movlb	1	; () banked
  2007  000542  5172               	movf	main@x& (0+255),w,b
  2008  000544  6E31               	movwf	(??_main+2)& (0+255),c
  2009  000546  6A32               	clrf	(??_main+3)& (0+255),c
  2010  000548  502F               	movf	??_main,w,c
  2011  00054A  2631               	addwf	??_main+2,f,c
  2012  00054C  5030               	movf	??_main+1,w,c
  2013  00054E  2232               	addwfc	??_main+3,f,c
  2014  000550  5031               	movf	??_main+2,w,c
  2015  000552  1032               	iorwf	??_main+3,w,c
  2016  000554  A4D8               	btfss	status,2,c
  2017  000556  D034               	goto	l4299
  2018                           
  2019                           ; BSR set to: 1
  2020  000558  0101               	movlb	1	; () banked
  2021  00055A  5170               	movf	main@p& (0+255),w,b
  2022  00055C  0101               	movlb	1	; () banked
  2023  00055E  B4D8               	btfsc	status,2,c
  2024  000560  D02F               	goto	l4299
  2025                           
  2026                           ; BSR set to: 1
  2027                           ;main.c: 145: {
  2028                           ;main.c: 146: buffer[p] = '?';
  2029  000562  0101               	movlb	1	; () banked
  2030  000564  5170               	movf	main@p& (0+255),w,b
  2031  000566  0D01               	mullw	1
  2032  000568  0E4A               	movlw	low main@buffer
  2033  00056A  24F3               	addwf	prodl,w,c
  2034  00056C  6ED9               	movwf	fsr2l,c
  2035  00056E  0E01               	movlw	high main@buffer
  2036  000570  20F4               	addwfc	prodh,w,c
  2037  000572  6EDA               	movwf	fsr2h,c
  2038  000574  0E3F               	movlw	63
  2039  000576  6EDF               	movwf	indf2,c
  2040                           
  2041                           ; BSR set to: 1
  2042                           ;main.c: 147: Lcd_Set_Cursor(2, 7 + p);
  2043  000578  0101               	movlb	1	; () banked
  2044  00057A  5170               	movf	main@p& (0+255),w,b
  2045  00057C  0F07               	addlw	7
  2046  00057E  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2047  000580  0E02               	movlw	2
  2048  000582  ECE3  F00B         	call	_Lcd_Set_Cursor
  2049                           
  2050                           ;main.c: 148: Lcd_Write_Char('_');
  2051  000586  0E5F               	movlw	95
  2052  000588  EC53  F00C         	call	_Lcd_Write_Char
  2053                           
  2054                           ;main.c: 149: latch_keypad(&x);
  2055  00058C  0E72               	movlw	low main@x
  2056  00058E  6E18               	movwf	latch_keypad@x,c
  2057  000590  0E01               	movlw	high main@x
  2058  000592  6E19               	movwf	latch_keypad@x+1,c
  2059  000594  EC6F  F00C         	call	_latch_keypad	;wreg free
  2060                           
  2061                           ;main.c: 150: Lcd_Set_Cursor(2, 8 + p);
  2062  000598  0101               	movlb	1	; () banked
  2063  00059A  5170               	movf	main@p& (0+255),w,b
  2064  00059C  0F08               	addlw	8
  2065  00059E  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2066  0005A0  0E02               	movlw	2
  2067  0005A2  ECE3  F00B         	call	_Lcd_Set_Cursor
  2068                           
  2069                           ;main.c: 151: Lcd_Write_Char(' ');
  2070  0005A6  0E20               	movlw	32
  2071  0005A8  EC53  F00C         	call	_Lcd_Write_Char
  2072                           
  2073                           ;main.c: 152: Lcd_Set_Cursor(2, 7 + p);
  2074  0005AC  0101               	movlb	1	; () banked
  2075  0005AE  5170               	movf	main@p& (0+255),w,b
  2076  0005B0  0F07               	addlw	7
  2077  0005B2  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2078  0005B4  0E02               	movlw	2
  2079  0005B6  ECE3  F00B         	call	_Lcd_Set_Cursor
  2080                           
  2081                           ;main.c: 153: p--;
  2082  0005BA  0101               	movlb	1	; () banked
  2083  0005BC  0770               	decf	main@p& (0+255),f,b
  2084                           
  2085                           ;main.c: 154: }
  2086  0005BE  D043               	goto	l4317
  2087  0005C0                     l4299:
  2088                           
  2089                           ; BSR set to: 1
  2090                           ;main.c: 155: else if ((x - '#') != 0)
  2091  0005C0  0EDD               	movlw	221
  2092  0005C2  6E2F               	movwf	??_main& (0+255),c
  2093  0005C4  0EFF               	movlw	255
  2094  0005C6  6E30               	movwf	(??_main+1)& (0+255),c
  2095  0005C8  0101               	movlb	1	; () banked
  2096  0005CA  5172               	movf	main@x& (0+255),w,b
  2097  0005CC  6E31               	movwf	(??_main+2)& (0+255),c
  2098  0005CE  6A32               	clrf	(??_main+3)& (0+255),c
  2099  0005D0  502F               	movf	??_main,w,c
  2100  0005D2  2631               	addwf	??_main+2,f,c
  2101  0005D4  5030               	movf	??_main+1,w,c
  2102  0005D6  2232               	addwfc	??_main+3,f,c
  2103  0005D8  5031               	movf	??_main+2,w,c
  2104  0005DA  1032               	iorwf	??_main+3,w,c
  2105  0005DC  B4D8               	btfsc	status,2,c
  2106  0005DE  D033               	goto	l4317
  2107                           
  2108                           ; BSR set to: 1
  2109                           ;main.c: 156: {
  2110                           ;main.c: 157: if ((x == '*')|(p == 9))
  2111  0005E0  0E2A               	movlw	42
  2112  0005E2  0101               	movlb	1	; () banked
  2113  0005E4  1972               	xorwf	main@x& (0+255),w,b
  2114  0005E6  B4D8               	btfsc	status,2,c
  2115  0005E8  D032               	goto	l4319
  2116                           
  2117                           ; BSR set to: 1
  2118  0005EA  0E09               	movlw	9
  2119  0005EC  0101               	movlb	1	; () banked
  2120  0005EE  1970               	xorwf	main@p& (0+255),w,b
  2121  0005F0  B4D8               	btfsc	status,2,c
  2122  0005F2  D02D               	goto	l4319
  2123                           
  2124                           ; BSR set to: 1
  2125                           ;main.c: 160: }
  2126                           ;main.c: 161: p++;
  2127                           
  2128                           ; BSR set to: 1
  2129                           
  2130                           ; BSR set to: 1
  2131                           ;main.c: 158: {
  2132                           ;main.c: 159: break;
  2133  0005F4  0101               	movlb	1	; () banked
  2134  0005F6  2B70               	incf	main@p& (0+255),f,b
  2135                           
  2136                           ; BSR set to: 1
  2137                           ;main.c: 162: buffer[p-1] = x;
  2138  0005F8  0EFF               	movlw	255
  2139  0005FA  6E2F               	movwf	??_main& (0+255),c
  2140  0005FC  0EFF               	movlw	255
  2141  0005FE  6E30               	movwf	(??_main+1)& (0+255),c
  2142  000600  0101               	movlb	1	; () banked
  2143  000602  5170               	movf	main@p& (0+255),w,b
  2144  000604  6E31               	movwf	(??_main+2)& (0+255),c
  2145  000606  6A32               	clrf	(??_main+3)& (0+255),c
  2146  000608  502F               	movf	??_main,w,c
  2147  00060A  2631               	addwf	??_main+2,f,c
  2148  00060C  5030               	movf	??_main+1,w,c
  2149  00060E  2232               	addwfc	??_main+3,f,c
  2150  000610  0E4A               	movlw	low main@buffer
  2151  000612  2431               	addwf	??_main+2,w,c
  2152  000614  6ED9               	movwf	fsr2l,c
  2153  000616  0E01               	movlw	high main@buffer
  2154  000618  2032               	addwfc	??_main+3,w,c
  2155  00061A  6EDA               	movwf	fsr2h,c
  2156  00061C  C172  FFDF         	movff	main@x,indf2
  2157                           
  2158                           ; BSR set to: 1
  2159                           ;main.c: 163: Lcd_Set_Cursor(2, 7 + p);
  2160  000620  0101               	movlb	1	; () banked
  2161  000622  5170               	movf	main@p& (0+255),w,b
  2162  000624  0F07               	addlw	7
  2163  000626  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2164  000628  0E02               	movlw	2
  2165  00062A  ECE3  F00B         	call	_Lcd_Set_Cursor
  2166                           
  2167                           ;main.c: 164: Lcd_Write_Char('*');
  2168  00062E  0E2A               	movlw	42
  2169  000630  EC53  F00C         	call	_Lcd_Write_Char
  2170                           
  2171                           ;main.c: 165: Lcd_Write_Char('_');
  2172  000634  0E5F               	movlw	95
  2173  000636  EC53  F00C         	call	_Lcd_Write_Char
  2174                           
  2175                           ;main.c: 166: latch_keypad(&x);
  2176  00063A  0E72               	movlw	low main@x
  2177  00063C  6E18               	movwf	latch_keypad@x,c
  2178  00063E  0E01               	movlw	high main@x
  2179  000640  6E19               	movwf	latch_keypad@x+1,c
  2180  000642  EC6F  F00C         	call	_latch_keypad	;wreg free
  2181  000646                     l4317:
  2182  000646  0E09               	movlw	9
  2183  000648  0101               	movlb	1	; () banked
  2184  00064A  6570               	cpfsgt	main@p& (0+255),b
  2185  00064C  D744               	goto	l4265
  2186  00064E                     l4319:
  2187                           
  2188                           ; BSR set to: 1
  2189                           ;main.c: 167: }
  2190                           ;main.c: 168: }
  2191                           ;main.c: 169: }
  2192                           ;main.c: 170: for (int i = 0; i < p; i++)
  2193  00064E  0E00               	movlw	0
  2194  000650  0101               	movlb	1	; () banked
  2195  000652  6F64               	movwf	(main@i_777+1)& (0+255),b
  2196  000654  0E00               	movlw	0
  2197  000656  6F63               	movwf	main@i_777& (0+255),b
  2198  000658  D035               	goto	l4325
  2199  00065A                     l4321:
  2200                           
  2201                           ; BSR set to: 1
  2202                           ;main.c: 171: current_pin[8 - i] = buffer[(p-1) - i];
  2203  00065A  0EFF               	movlw	255
  2204  00065C  6E2F               	movwf	??_main& (0+255),c
  2205  00065E  0EFF               	movlw	255
  2206  000660  6E30               	movwf	(??_main+1)& (0+255),c
  2207  000662  C163  F031         	movff	main@i_777,??_main+2
  2208  000666  C164  F032         	movff	main@i_777+1,??_main+3
  2209  00066A  1E31               	comf	??_main+2,f,c
  2210  00066C  1E32               	comf	??_main+3,f,c
  2211  00066E  4A31               	infsnz	??_main+2,f,c
  2212  000670  2A32               	incf	??_main+3,f,c
  2213  000672  0101               	movlb	1	; () banked
  2214  000674  5170               	movf	main@p& (0+255),w,b
  2215  000676  6E33               	movwf	(??_main+4)& (0+255),c
  2216  000678  6A34               	clrf	(??_main+5)& (0+255),c
  2217  00067A  5031               	movf	??_main+2,w,c
  2218  00067C  2633               	addwf	??_main+4,f,c
  2219  00067E  5032               	movf	??_main+3,w,c
  2220  000680  2234               	addwfc	??_main+5,f,c
  2221  000682  502F               	movf	??_main,w,c
  2222  000684  2633               	addwf	??_main+4,f,c
  2223  000686  5030               	movf	??_main+1,w,c
  2224  000688  2234               	addwfc	??_main+5,f,c
  2225  00068A  0E4A               	movlw	low main@buffer
  2226  00068C  2433               	addwf	??_main+4,w,c
  2227  00068E  6ED9               	movwf	fsr2l,c
  2228  000690  0E01               	movlw	high main@buffer
  2229  000692  2034               	addwfc	??_main+5,w,c
  2230  000694  6EDA               	movwf	fsr2h,c
  2231  000696  C163  F035         	movff	main@i_777,??_main+6
  2232  00069A  C164  F036         	movff	main@i_777+1,??_main+7
  2233  00069E  1E35               	comf	??_main+6,f,c
  2234  0006A0  1E36               	comf	??_main+7,f,c
  2235  0006A2  4A35               	infsnz	??_main+6,f,c
  2236  0006A4  2A36               	incf	??_main+7,f,c
  2237  0006A6  0E08               	movlw	8
  2238  0006A8  2635               	addwf	??_main+6,f,c
  2239  0006AA  0E00               	movlw	0
  2240  0006AC  2236               	addwfc	??_main+7,f,c
  2241  0006AE  0EBA               	movlw	low _current_pin
  2242  0006B0  2435               	addwf	??_main+6,w,c
  2243  0006B2  6EE1               	movwf	fsr1l,c
  2244  0006B4  0E00               	movlw	high _current_pin
  2245  0006B6  2036               	addwfc	??_main+7,w,c
  2246  0006B8  6EE2               	movwf	fsr1h,c
  2247  0006BA  CFDF FFE7          	movff	indf2,indf1
  2248                           
  2249                           ; BSR set to: 1
  2250  0006BE  0101               	movlb	1	; () banked
  2251  0006C0  4B63               	infsnz	main@i_777& (0+255),f,b
  2252  0006C2  2B64               	incf	(main@i_777+1)& (0+255),f,b
  2253  0006C4                     l4325:
  2254                           
  2255                           ; BSR set to: 1
  2256  0006C4  0101               	movlb	1	; () banked
  2257  0006C6  5170               	movf	main@p& (0+255),w,b
  2258  0006C8  6E2F               	movwf	??_main& (0+255),c
  2259  0006CA  6A30               	clrf	(??_main+1)& (0+255),c
  2260  0006CC  502F               	movf	??_main,w,c
  2261  0006CE  0101               	movlb	1	; () banked
  2262  0006D0  5D63               	subwf	main@i_777& (0+255),w,b
  2263  0006D2  0101               	movlb	1	; () banked
  2264  0006D4  5164               	movf	(main@i_777+1)& (0+255),w,b
  2265  0006D6  0A80               	xorlw	128
  2266  0006D8  6E31               	movwf	(??_main+2)& (0+255),c
  2267  0006DA  5030               	movf	??_main+1,w,c
  2268  0006DC  0A80               	xorlw	128
  2269  0006DE  5831               	subwfb	(??_main+2)& (0+255),w,c
  2270  0006E0  A0D8               	btfss	status,0,c
  2271  0006E2  D7BB               	goto	l4321
  2272                           
  2273                           ; BSR set to: 1
  2274                           ;main.c: 172: Lcd_Clear();
  2275                           
  2276                           ; BSR set to: 1
  2277  0006E4  ECDA  F00C         	call	_Lcd_Clear	;wreg free
  2278                           
  2279                           ;main.c: 173: menu_progress_bar(100);
  2280  0006E8  0E00               	movlw	0
  2281  0006EA  6E26               	movwf	menu_progress_bar@load_time_ms+1,c
  2282  0006EC  0E64               	movlw	100
  2283  0006EE  6E25               	movwf	menu_progress_bar@load_time_ms,c
  2284  0006F0  EC0F  F009         	call	_menu_progress_bar	;wreg free
  2285                           
  2286                           ;main.c: 177: load_reg_map();
  2287  0006F4  EC36  F00A         	call	_load_reg_map	;wreg free
  2288  0006F8                     l4333:
  2289  0006F8  0E30               	movlw	48
  2290  0006FA  0101               	movlb	1	; () banked
  2291  0006FC  1920               	xorwf	_i2c_w_reg& (0+255),w,b	;volatile
  2292  0006FE  B4D8               	btfsc	status,2,c
  2293  000700  D7FB               	goto	l4333
  2294                           
  2295                           ; BSR set to: 1
  2296                           ;main.c: 181: }
  2297                           ;main.c: 182: INTCONbits.GIE_GIEH = 0;
  2298  000702  9EF2               	bcf	intcon,7,c	;volatile
  2299                           
  2300                           ; BSR set to: 1
  2301                           ;main.c: 183: for (int i = 0; i < 32; i++)
  2302  000704  0E00               	movlw	0
  2303  000706  0101               	movlb	1	; () banked
  2304  000708  6F66               	movwf	(main@i_786+1)& (0+255),b
  2305  00070A  0E00               	movlw	0
  2306  00070C  6F65               	movwf	main@i_786& (0+255),b
  2307                           
  2308                           ; BSR set to: 1
  2309  00070E  0101               	movlb	1	; () banked
  2310  000710  BF66               	btfsc	(main@i_786+1)& (0+255),7,b
  2311  000712  D008               	goto	l4341
  2312  000714  0101               	movlb	1	; () banked
  2313  000716  5166               	movf	(main@i_786+1)& (0+255),w,b
  2314  000718  E119               	bnz	l228
  2315  00071A  0E20               	movlw	32
  2316  00071C  0101               	movlb	1	; () banked
  2317  00071E  5D65               	subwf	main@i_786& (0+255),w,b
  2318  000720  B0D8               	btfsc	status,0,c
  2319  000722  D014               	goto	l228
  2320  000724                     l4341:
  2321                           
  2322                           ; BSR set to: 1
  2323                           ;main.c: 184: i2c_r_reg[i] = '0';
  2324  000724  0E00               	movlw	low _i2c_r_reg
  2325  000726  0101               	movlb	1	; () banked
  2326  000728  2565               	addwf	main@i_786& (0+255),w,b
  2327  00072A  6ED9               	movwf	fsr2l,c
  2328  00072C  0E01               	movlw	high _i2c_r_reg
  2329  00072E  0101               	movlb	1	; () banked
  2330  000730  2166               	addwfc	(main@i_786+1)& (0+255),w,b
  2331  000732  6EDA               	movwf	fsr2h,c
  2332  000734  0E30               	movlw	48
  2333  000736  6EDF               	movwf	indf2,c
  2334                           
  2335                           ; BSR set to: 1
  2336  000738  0101               	movlb	1	; () banked
  2337  00073A  4B65               	infsnz	main@i_786& (0+255),f,b
  2338  00073C  2B66               	incf	(main@i_786+1)& (0+255),f,b
  2339                           
  2340                           ; BSR set to: 1
  2341  00073E  0101               	movlb	1	; () banked
  2342  000740  BF66               	btfsc	(main@i_786+1)& (0+255),7,b
  2343  000742  D7F0               	goto	l4341
  2344  000744  0101               	movlb	1	; () banked
  2345  000746  5166               	movf	(main@i_786+1)& (0+255),w,b
  2346  000748  E101               	bnz	u4180
  2347  00074A  D7E7               	goto	L2
  2348  00074C                     u4180:
  2349  00074C                     l228:
  2350                           
  2351                           ; BSR set to: 1
  2352                           ;main.c: 185: unsigned char credential_state = i2c_w_reg[0];
  2353  00074C  C120  F156         	movff	_i2c_w_reg,main@credential_state	;volatile
  2354                           
  2355                           ; BSR set to: 1
  2356                           ;main.c: 186: if (credential_state == 0xA1)
  2357  000750  0EA1               	movlw	161
  2358  000752  0101               	movlb	1	; () banked
  2359  000754  1956               	xorwf	main@credential_state& (0+255),w,b
  2360  000756  A4D8               	btfss	status,2,c
  2361  000758  D031               	goto	l4365
  2362                           
  2363                           ; BSR set to: 1
  2364                           ;main.c: 187: {
  2365                           ;main.c: 188: Lcd_Set_Cursor(1,1);
  2366  00075A  0E01               	movlw	1
  2367  00075C  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2368  00075E  0E01               	movlw	1
  2369  000760  ECE3  F00B         	call	_Lcd_Set_Cursor
  2370                           
  2371                           ;main.c: 189: Lcd_Write_String("[Access Granted]");
  2372  000764  0ED1               	movlw	low STR_7
  2373  000766  6E1C               	movwf	Lcd_Write_String@a,c
  2374  000768  0E7F               	movlw	high STR_7
  2375  00076A  6E1D               	movwf	Lcd_Write_String@a+1,c
  2376  00076C  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  2377                           
  2378                           ;main.c: 190: Lcd_Set_Cursor(2,1);
  2379  000770  0E01               	movlw	1
  2380  000772  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2381  000774  0E02               	movlw	2
  2382  000776  ECE3  F00B         	call	_Lcd_Set_Cursor
  2383                           
  2384                           ;main.c: 191: Lcd_Write_String("    [Welcome]   ");
  2385  00077A  0E05               	movlw	low STR_8
  2386  00077C  6E1C               	movwf	Lcd_Write_String@a,c
  2387  00077E  0E7F               	movlw	high STR_8
  2388  000780  6E1D               	movwf	Lcd_Write_String@a+1,c
  2389  000782  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  2390                           
  2391                           ;main.c: 192: for (int i = 0; i < 100; i++)
  2392  000786  0E00               	movlw	0
  2393  000788  0101               	movlb	1	; () banked
  2394  00078A  6F5A               	movwf	(main@i_790+1)& (0+255),b
  2395  00078C  0E00               	movlw	0
  2396  00078E  6F59               	movwf	main@i_790& (0+255),b
  2397  000790                     
  2398                           ; BSR set to: 1
  2399  000790  0101               	movlb	1	; () banked
  2400  000792  BF5A               	btfsc	(main@i_790+1)& (0+255),7,b
  2401  000794  D008               	goto	l4361
  2402  000796  0101               	movlb	1	; () banked
  2403  000798  515A               	movf	(main@i_790+1)& (0+255),w,b
  2404  00079A  E177               	bnz	l232
  2405  00079C  0E64               	movlw	100
  2406  00079E  0101               	movlb	1	; () banked
  2407  0007A0  5D59               	subwf	main@i_790& (0+255),w,b
  2408  0007A2  B0D8               	btfsc	status,0,c
  2409  0007A4  D072               	goto	l232
  2410  0007A6                     l4361:
  2411                           
  2412                           ; BSR set to: 1
  2413                           ;main.c: 193: {
  2414                           ;main.c: 194: _delay((unsigned long)((10)*(16000000/4000.0)));
  2415  0007A6  0E34               	movlw	52
  2416  0007A8  6E2F               	movwf	??_main& (0+255),c
  2417  0007AA  0EF2               	movlw	242
  2418  0007AC                     u4387:
  2419  0007AC  2EE8               	decfsz	wreg,f,c
  2420  0007AE  D7FE               	goto	u4387
  2421  0007B0  2E2F               	decfsz	??_main& (0+255),f,c
  2422  0007B2  D7FC               	goto	u4387
  2423  0007B4  0101               	movlb	1	; () banked
  2424  0007B6  4B59               	infsnz	main@i_790& (0+255),f,b
  2425  0007B8  2B5A               	incf	(main@i_790+1)& (0+255),f,b
  2426  0007BA  D7EA               	goto	L7
  2427  0007BC                     l4365:
  2428                           
  2429                           ; BSR set to: 1
  2430                           ;main.c: 197: else if (credential_state == 0xA0)
  2431  0007BC  0EA0               	movlw	160
  2432  0007BE  0101               	movlb	1	; () banked
  2433  0007C0  1956               	xorwf	main@credential_state& (0+255),w,b
  2434  0007C2  A4D8               	btfss	status,2,c
  2435  0007C4  D031               	goto	l4383
  2436                           
  2437                           ; BSR set to: 1
  2438                           ;main.c: 198: {
  2439                           ;main.c: 199: Lcd_Set_Cursor(1,1);
  2440  0007C6  0E01               	movlw	1
  2441  0007C8  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2442  0007CA  0E01               	movlw	1
  2443  0007CC  ECE3  F00B         	call	_Lcd_Set_Cursor
  2444                           
  2445                           ;main.c: 200: Lcd_Write_String("[Access  Denied]");
  2446  0007D0  0EC0               	movlw	low STR_9
  2447  0007D2  6E1C               	movwf	Lcd_Write_String@a,c
  2448  0007D4  0E7F               	movlw	high STR_9
  2449  0007D6  6E1D               	movwf	Lcd_Write_String@a+1,c
  2450  0007D8  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  2451                           
  2452                           ;main.c: 201: Lcd_Set_Cursor(2,1);
  2453  0007DC  0E01               	movlw	1
  2454  0007DE  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2455  0007E0  0E02               	movlw	2
  2456  0007E2  ECE3  F00B         	call	_Lcd_Set_Cursor
  2457                           
  2458                           ;main.c: 202: Lcd_Write_String("    [ Retry ]   ");
  2459  0007E6  0EF4               	movlw	low STR_10
  2460  0007E8  6E1C               	movwf	Lcd_Write_String@a,c
  2461  0007EA  0E7E               	movlw	high STR_10
  2462  0007EC  6E1D               	movwf	Lcd_Write_String@a+1,c
  2463  0007EE  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  2464                           
  2465                           ;main.c: 203: for (int i = 0; i < 100; i++)
  2466  0007F2  0E00               	movlw	0
  2467  0007F4  0101               	movlb	1	; () banked
  2468  0007F6  6F5C               	movwf	(main@i_793+1)& (0+255),b
  2469  0007F8  0E00               	movlw	0
  2470  0007FA  6F5B               	movwf	main@i_793& (0+255),b
  2471  0007FC                     l4375:
  2472                           
  2473                           ; BSR set to: 1
  2474  0007FC  0101               	movlb	1	; () banked
  2475  0007FE  BF5C               	btfsc	(main@i_793+1)& (0+255),7,b
  2476  000800  D008               	goto	l4379
  2477  000802  0101               	movlb	1	; () banked
  2478  000804  515C               	movf	(main@i_793+1)& (0+255),w,b
  2479  000806  E141               	bnz	l232
  2480  000808  0E64               	movlw	100
  2481  00080A  0101               	movlb	1	; () banked
  2482  00080C  5D5B               	subwf	main@i_793& (0+255),w,b
  2483  00080E  B0D8               	btfsc	status,0,c
  2484  000810  D03C               	goto	l232
  2485  000812                     l4379:
  2486                           
  2487                           ; BSR set to: 1
  2488                           ;main.c: 204: {
  2489                           ;main.c: 205: _delay((unsigned long)((10)*(16000000/4000.0)));
  2490  000812  0E34               	movlw	52
  2491  000814  6E2F               	movwf	??_main& (0+255),c
  2492  000816  0EF2               	movlw	242
  2493  000818                     u4397:
  2494  000818  2EE8               	decfsz	wreg,f,c
  2495  00081A  D7FE               	goto	u4397
  2496  00081C  2E2F               	decfsz	??_main& (0+255),f,c
  2497  00081E  D7FC               	goto	u4397
  2498  000820  0101               	movlb	1	; () banked
  2499  000822  4B5B               	infsnz	main@i_793& (0+255),f,b
  2500  000824  2B5C               	incf	(main@i_793+1)& (0+255),f,b
  2501  000826  D7EA               	goto	l4375
  2502  000828                     l4383:
  2503                           
  2504                           ; BSR set to: 1
  2505                           ;main.c: 208: else
  2506                           ;main.c: 209: {
  2507                           ;main.c: 210: Lcd_Set_Cursor(1,1);
  2508  000828  0E01               	movlw	1
  2509  00082A  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2510  00082C  0E01               	movlw	1
  2511  00082E  ECE3  F00B         	call	_Lcd_Set_Cursor
  2512                           
  2513                           ;main.c: 211: Lcd_Write_String("[ System Error ]");
  2514  000832  0E9E               	movlw	low STR_11
  2515  000834  6E1C               	movwf	Lcd_Write_String@a,c
  2516  000836  0E7F               	movlw	high STR_11
  2517  000838  6E1D               	movwf	Lcd_Write_String@a+1,c
  2518  00083A  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  2519                           
  2520                           ;main.c: 212: Lcd_Set_Cursor(2,1);
  2521  00083E  0E01               	movlw	1
  2522  000840  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2523  000842  0E02               	movlw	2
  2524  000844  ECE3  F00B         	call	_Lcd_Set_Cursor
  2525                           
  2526                           ;main.c: 213: Lcd_Write_String("    [ Retry ]   ");
  2527  000848  0EF4               	movlw	low STR_10
  2528  00084A  6E1C               	movwf	Lcd_Write_String@a,c
  2529  00084C  0E7E               	movlw	high STR_10
  2530  00084E  6E1D               	movwf	Lcd_Write_String@a+1,c
  2531  000850  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  2532                           
  2533                           ;main.c: 214: for (int i = 0; i < 100; i++)
  2534  000854  0E00               	movlw	0
  2535  000856  0101               	movlb	1	; () banked
  2536  000858  6F5E               	movwf	(main@i_796+1)& (0+255),b
  2537  00085A  0E00               	movlw	0
  2538  00085C  6F5D               	movwf	main@i_796& (0+255),b
  2539  00085E                     l4391:
  2540                           
  2541                           ; BSR set to: 1
  2542  00085E  0101               	movlb	1	; () banked
  2543  000860  BF5E               	btfsc	(main@i_796+1)& (0+255),7,b
  2544  000862  D008               	goto	l4395
  2545  000864  0101               	movlb	1	; () banked
  2546  000866  515E               	movf	(main@i_796+1)& (0+255),w,b
  2547  000868  E110               	bnz	l232
  2548  00086A  0E64               	movlw	100
  2549  00086C  0101               	movlb	1	; () banked
  2550  00086E  5D5D               	subwf	main@i_796& (0+255),w,b
  2551  000870  B0D8               	btfsc	status,0,c
  2552  000872  D00B               	goto	l232
  2553  000874                     l4395:
  2554                           
  2555                           ; BSR set to: 1
  2556                           ;main.c: 215: {
  2557                           ;main.c: 216: _delay((unsigned long)((10)*(16000000/4000.0)));
  2558  000874  0E34               	movlw	52
  2559  000876  6E2F               	movwf	??_main& (0+255),c
  2560  000878  0EF2               	movlw	242
  2561  00087A                     u4407:
  2562  00087A  2EE8               	decfsz	wreg,f,c
  2563  00087C  D7FE               	goto	u4407
  2564  00087E  2E2F               	decfsz	??_main& (0+255),f,c
  2565  000880  D7FC               	goto	u4407
  2566  000882  0101               	movlb	1	; () banked
  2567  000884  4B5D               	infsnz	main@i_796& (0+255),f,b
  2568  000886  2B5E               	incf	(main@i_796+1)& (0+255),f,b
  2569  000888  D7EA               	goto	l4391
  2570  00088A                     l232:
  2571                           
  2572                           ; BSR set to: 1
  2573                           ;main.c: 217: }
  2574                           ;main.c: 218: }
  2575                           ;main.c: 219: INTCONbits.GIE_GIEH = 1;
  2576  00088A  8EF2               	bsf	intcon,7,c	;volatile
  2577  00088C                     l4399:
  2578                           
  2579                           ; BSR set to: 1
  2580  00088C  0100               	movlb	0	; () banked
  2581  00088E  51CD               	movf	_credentials_accepted& (0+255),w,b	;volatile
  2582  000890  B4D8               	btfsc	status,2,c
  2583  000892  D46F               	goto	l4153
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;main.c: 220: }
  2587                           ;main.c: 224: Lcd_Set_Cursor(1,1);
  2588                           
  2589                           ; BSR set to: 0
  2590  000894  0E01               	movlw	1
  2591  000896  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2592  000898  0E01               	movlw	1
  2593  00089A  ECE3  F00B         	call	_Lcd_Set_Cursor
  2594                           
  2595                           ;main.c: 225: unsigned char is_leading_zero = 1, n_c = 0;
  2596  00089E  0E01               	movlw	1
  2597  0008A0  0101               	movlb	1	; () banked
  2598  0008A2  6F5F               	movwf	main@is_leading_zero& (0+255),b
  2599                           
  2600                           ; BSR set to: 1
  2601  0008A4  0E00               	movlw	0
  2602  0008A6  0101               	movlb	1	; () banked
  2603  0008A8  6F55               	movwf	main@n_c& (0+255),b
  2604                           
  2605                           ; BSR set to: 1
  2606                           ;main.c: 226: for (int i = 0; i < 9; i++)
  2607  0008AA  0E00               	movlw	0
  2608  0008AC  0101               	movlb	1	; () banked
  2609  0008AE  6F6A               	movwf	(main@i_799+1)& (0+255),b
  2610  0008B0  0E00               	movlw	0
  2611  0008B2  6F69               	movwf	main@i_799& (0+255),b
  2612  0008B4                     l4409:
  2613                           
  2614                           ; BSR set to: 1
  2615  0008B4  0101               	movlb	1	; () banked
  2616  0008B6  BF6A               	btfsc	(main@i_799+1)& (0+255),7,b
  2617  0008B8  D008               	goto	l4413
  2618  0008BA  0101               	movlb	1	; () banked
  2619  0008BC  516A               	movf	(main@i_799+1)& (0+255),w,b
  2620  0008BE  E12A               	bnz	l4431
  2621  0008C0  0E09               	movlw	9
  2622  0008C2  0101               	movlb	1	; () banked
  2623  0008C4  5D69               	subwf	main@i_799& (0+255),w,b
  2624  0008C6  B0D8               	btfsc	status,0,c
  2625  0008C8  D025               	goto	l4431
  2626  0008CA                     l4413:
  2627                           
  2628                           ; BSR set to: 1
  2629                           ;main.c: 227: {
  2630                           ;main.c: 228: if ((current_user[i] == '0')&&(is_leading_zero))
  2631  0008CA  0EC3               	movlw	low _current_user
  2632  0008CC  0101               	movlb	1	; () banked
  2633  0008CE  2569               	addwf	main@i_799& (0+255),w,b
  2634  0008D0  6ED9               	movwf	fsr2l,c
  2635  0008D2  0E00               	movlw	high _current_user
  2636  0008D4  0101               	movlb	1	; () banked
  2637  0008D6  216A               	addwfc	(main@i_799+1)& (0+255),w,b
  2638  0008D8  6EDA               	movwf	fsr2h,c
  2639  0008DA  0E30               	movlw	48
  2640  0008DC  18DE               	xorwf	postinc2,w,c
  2641  0008DE  A4D8               	btfss	status,2,c
  2642  0008E0  D005               	goto	l4421
  2643                           
  2644                           ; BSR set to: 1
  2645  0008E2  0101               	movlb	1	; () banked
  2646  0008E4  515F               	movf	main@is_leading_zero& (0+255),w,b
  2647  0008E6  0101               	movlb	1	; () banked
  2648  0008E8  A4D8               	btfss	status,2,c
  2649  0008EA  D010               	goto	l4427
  2650  0008EC                     l4421:
  2651                           
  2652                           ; BSR set to: 1
  2653                           ;main.c: 230: else
  2654                           ;main.c: 231: {
  2655                           ;main.c: 232: is_leading_zero = 0;
  2656  0008EC  0E00               	movlw	0
  2657  0008EE  0101               	movlb	1	; () banked
  2658  0008F0  6F5F               	movwf	main@is_leading_zero& (0+255),b
  2659                           
  2660                           ; BSR set to: 1
  2661                           ;main.c: 233: n_c++;
  2662  0008F2  0101               	movlb	1	; () banked
  2663  0008F4  2B55               	incf	main@n_c& (0+255),f,b
  2664                           
  2665                           ; BSR set to: 1
  2666                           ;main.c: 234: Lcd_Write_Char(current_user[i]);
  2667  0008F6  0EC3               	movlw	low _current_user
  2668  0008F8  0101               	movlb	1	; () banked
  2669  0008FA  2569               	addwf	main@i_799& (0+255),w,b
  2670  0008FC  6ED9               	movwf	fsr2l,c
  2671  0008FE  0E00               	movlw	high _current_user
  2672  000900  0101               	movlb	1	; () banked
  2673  000902  216A               	addwfc	(main@i_799+1)& (0+255),w,b
  2674  000904  6EDA               	movwf	fsr2h,c
  2675  000906  50DF               	movf	indf2,w,c
  2676  000908  EC53  F00C         	call	_Lcd_Write_Char
  2677  00090C                     l4427:
  2678  00090C  0101               	movlb	1	; () banked
  2679  00090E  4B69               	infsnz	main@i_799& (0+255),f,b
  2680  000910  2B6A               	incf	(main@i_799+1)& (0+255),f,b
  2681  000912  D7D0               	goto	l4409
  2682  000914                     l4431:
  2683                           
  2684                           ; BSR set to: 1
  2685                           ;main.c: 235: }
  2686                           ;main.c: 236: }
  2687                           ;main.c: 237: for (int i = 0; i < 13 - n_c; i++)
  2688  000914  0E00               	movlw	0
  2689  000916  0101               	movlb	1	; () banked
  2690  000918  6F54               	movwf	(main@i_800+1)& (0+255),b
  2691  00091A  0E00               	movlw	0
  2692  00091C  6F53               	movwf	main@i_800& (0+255),b
  2693  00091E  D006               	goto	l4437
  2694  000920                     l4433:
  2695                           
  2696                           ; BSR set to: 1
  2697                           ;main.c: 238: Lcd_Write_Char(' ');
  2698  000920  0E20               	movlw	32
  2699  000922  EC53  F00C         	call	_Lcd_Write_Char
  2700  000926  0101               	movlb	1	; () banked
  2701  000928  4B53               	infsnz	main@i_800& (0+255),f,b
  2702  00092A  2B54               	incf	(main@i_800+1)& (0+255),f,b
  2703  00092C                     l4437:
  2704                           
  2705                           ; BSR set to: 1
  2706  00092C  0101               	movlb	1	; () banked
  2707  00092E  5155               	movf	main@n_c& (0+255),w,b
  2708  000930  6E2F               	movwf	??_main& (0+255),c
  2709  000932  6A30               	clrf	(??_main+1)& (0+255),c
  2710  000934  1E2F               	comf	??_main,f,c
  2711  000936  1E30               	comf	??_main+1,f,c
  2712  000938  4A2F               	infsnz	??_main,f,c
  2713  00093A  2A30               	incf	??_main+1,f,c
  2714  00093C  0E0D               	movlw	13
  2715  00093E  262F               	addwf	??_main,f,c
  2716  000940  0E00               	movlw	0
  2717  000942  2230               	addwfc	??_main+1,f,c
  2718  000944  502F               	movf	??_main,w,c
  2719  000946  0101               	movlb	1	; () banked
  2720  000948  5D53               	subwf	main@i_800& (0+255),w,b
  2721  00094A  0101               	movlb	1	; () banked
  2722  00094C  5154               	movf	(main@i_800+1)& (0+255),w,b
  2723  00094E  0A80               	xorlw	128
  2724  000950  6E31               	movwf	(??_main+2)& (0+255),c
  2725  000952  5030               	movf	??_main+1,w,c
  2726  000954  0A80               	xorlw	128
  2727  000956  5831               	subwfb	(??_main+2)& (0+255),w,c
  2728  000958  A0D8               	btfss	status,0,c
  2729  00095A  D7E2               	goto	l4433
  2730                           
  2731                           ; BSR set to: 1
  2732                           ;main.c: 239: Lcd_Set_Cursor(1,14);
  2733                           
  2734                           ; BSR set to: 1
  2735  00095C  0E0E               	movlw	14
  2736  00095E  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2737  000960  0E01               	movlw	1
  2738  000962  ECE3  F00B         	call	_Lcd_Set_Cursor
  2739                           
  2740                           ;main.c: 240: unsigned char a, digits[] = {' '};
  2741  000966  C0B9  F16F         	movff	main@F3695,main@digits
  2742                           
  2743                           ;main.c: 241: a = I2C_ADDR - 0x0F;
  2744  00096A  0100               	movlb	0	; () banked
  2745  00096C  51CE               	movf	_I2C_ADDR& (0+255),w,b
  2746  00096E  0FF1               	addlw	241
  2747  000970  0101               	movlb	1	; () banked
  2748  000972  6F60               	movwf	main@a& (0+255),b
  2749                           
  2750                           ; BSR set to: 1
  2751                           ;main.c: 242: digits[0] = (a / 100);
  2752  000974  C160  F018         	movff	main@a,___awdiv@dividend
  2753  000978  6A19               	clrf	___awdiv@dividend+1,c
  2754  00097A  0E00               	movlw	0
  2755  00097C  6E1B               	movwf	___awdiv@divisor+1,c
  2756  00097E  0E64               	movlw	100
  2757  000980  6E1A               	movwf	___awdiv@divisor,c
  2758  000982  ECC4  F00A         	call	___awdiv	;wreg free
  2759  000986  5018               	movf	?___awdiv,w,c
  2760  000988  0101               	movlb	1	; () banked
  2761  00098A  6F6F               	movwf	main@digits& (0+255),b
  2762                           
  2763                           ; BSR set to: 1
  2764                           ;main.c: 243: digits[1] = (((a-(digits[0]*100))) / 10);
  2765  00098C  0101               	movlb	1	; () banked
  2766  00098E  516F               	movf	main@digits& (0+255),w,b
  2767  000990  0D64               	mullw	100
  2768  000992  1EF3               	comf	prodl,f,c
  2769  000994  1EF4               	comf	prodh,f,c
  2770  000996  4AF3               	infsnz	prodl,f,c
  2771  000998  2AF4               	incf	prodh,f,c
  2772  00099A  0101               	movlb	1	; () banked
  2773  00099C  5160               	movf	main@a& (0+255),w,b
  2774  00099E  24F3               	addwf	prodl,w,c
  2775  0009A0  6E18               	movwf	___awdiv@dividend,c
  2776  0009A2  0E00               	movlw	0
  2777  0009A4  20F4               	addwfc	prodh,w,c
  2778  0009A6  6E19               	movwf	___awdiv@dividend+1,c
  2779  0009A8  0E00               	movlw	0
  2780  0009AA  6E1B               	movwf	___awdiv@divisor+1,c
  2781  0009AC  0E0A               	movlw	10
  2782  0009AE  6E1A               	movwf	___awdiv@divisor,c
  2783  0009B0  ECC4  F00A         	call	___awdiv	;wreg free
  2784  0009B4  5018               	movf	?___awdiv,w,c
  2785  0009B6  0101               	movlb	1	; () banked
  2786  0009B8  6F70               	movwf	(main@digits+1)& (0+255),b
  2787                           
  2788                           ; BSR set to: 1
  2789                           ;main.c: 244: digits[2] = (a - (digits[0]*100+digits[1]*10));
  2790  0009BA  0101               	movlb	1	; () banked
  2791  0009BC  5170               	movf	(main@digits+1)& (0+255),w,b
  2792  0009BE  0D0A               	mullw	10
  2793  0009C0  CFF3 F02F          	movff	prodl,??_main
  2794  0009C4  0101               	movlb	1	; () banked
  2795  0009C6  516F               	movf	main@digits& (0+255),w,b
  2796  0009C8  0D64               	mullw	100
  2797  0009CA  50F3               	movf	prodl,w,c
  2798  0009CC  242F               	addwf	??_main,w,c
  2799  0009CE  0800               	sublw	0
  2800  0009D0  0101               	movlb	1	; () banked
  2801  0009D2  2560               	addwf	main@a& (0+255),w,b
  2802  0009D4  0101               	movlb	1	; () banked
  2803  0009D6  6F71               	movwf	(main@digits+2)& (0+255),b
  2804                           
  2805                           ; BSR set to: 1
  2806                           ;main.c: 245: is_leading_zero = 1;
  2807  0009D8  0E01               	movlw	1
  2808  0009DA  0101               	movlb	1	; () banked
  2809  0009DC  6F5F               	movwf	main@is_leading_zero& (0+255),b
  2810                           
  2811                           ; BSR set to: 1
  2812                           ;main.c: 246: for (int i = 0; i < 3; i++)
  2813  0009DE  0E00               	movlw	0
  2814  0009E0  0101               	movlb	1	; () banked
  2815  0009E2  6F6E               	movwf	(main@i_804+1)& (0+255),b
  2816  0009E4  0E00               	movlw	0
  2817  0009E6  6F6D               	movwf	main@i_804& (0+255),b
  2818  0009E8                     l4455:
  2819                           
  2820                           ; BSR set to: 1
  2821  0009E8  0101               	movlb	1	; () banked
  2822  0009EA  BF6E               	btfsc	(main@i_804+1)& (0+255),7,b
  2823  0009EC  D008               	goto	l4459
  2824  0009EE  0101               	movlb	1	; () banked
  2825  0009F0  516E               	movf	(main@i_804+1)& (0+255),w,b
  2826  0009F2  E148               	bnz	l4477
  2827  0009F4  0E03               	movlw	3
  2828  0009F6  0101               	movlb	1	; () banked
  2829  0009F8  5D6D               	subwf	main@i_804& (0+255),w,b
  2830  0009FA  B0D8               	btfsc	status,0,c
  2831  0009FC  D043               	goto	l4477
  2832  0009FE                     l4459:
  2833                           
  2834                           ; BSR set to: 1
  2835                           ;main.c: 247: {
  2836                           ;main.c: 248: digits[i] = c[digits[i]];
  2837  0009FE  0E6F               	movlw	low main@digits
  2838  000A00  0101               	movlb	1	; () banked
  2839  000A02  256D               	addwf	main@i_804& (0+255),w,b
  2840  000A04  6ED9               	movwf	fsr2l,c
  2841  000A06  0E01               	movlw	high main@digits
  2842  000A08  0101               	movlb	1	; () banked
  2843  000A0A  216E               	addwfc	(main@i_804+1)& (0+255),w,b
  2844  000A0C  6EDA               	movwf	fsr2h,c
  2845  000A0E  50DF               	movf	indf2,w,c
  2846  000A10  6E2F               	movwf	??_main& (0+255),c
  2847  000A12  502F               	movf	??_main,w,c
  2848  000A14  0D01               	mullw	1
  2849  000A16  0EA2               	movlw	low _c
  2850  000A18  24F3               	addwf	prodl,w,c
  2851  000A1A  6ED9               	movwf	fsr2l,c
  2852  000A1C  0E00               	movlw	high _c
  2853  000A1E  20F4               	addwfc	prodh,w,c
  2854  000A20  6EDA               	movwf	fsr2h,c
  2855  000A22  0E6F               	movlw	low main@digits
  2856  000A24  0101               	movlb	1	; () banked
  2857  000A26  256D               	addwf	main@i_804& (0+255),w,b
  2858  000A28  6EE1               	movwf	fsr1l,c
  2859  000A2A  0E01               	movlw	high main@digits
  2860  000A2C  0101               	movlb	1	; () banked
  2861  000A2E  216E               	addwfc	(main@i_804+1)& (0+255),w,b
  2862  000A30  6EE2               	movwf	fsr1h,c
  2863  000A32  CFDF FFE7          	movff	indf2,indf1
  2864                           
  2865                           ; BSR set to: 1
  2866                           ;main.c: 249: if ((digits[i] == '0')&&(is_leading_zero))
  2867  000A36  0E6F               	movlw	low main@digits
  2868  000A38  0101               	movlb	1	; () banked
  2869  000A3A  256D               	addwf	main@i_804& (0+255),w,b
  2870  000A3C  6ED9               	movwf	fsr2l,c
  2871  000A3E  0E01               	movlw	high main@digits
  2872  000A40  0101               	movlb	1	; () banked
  2873  000A42  216E               	addwfc	(main@i_804+1)& (0+255),w,b
  2874  000A44  6EDA               	movwf	fsr2h,c
  2875  000A46  0E30               	movlw	48
  2876  000A48  18DE               	xorwf	postinc2,w,c
  2877  000A4A  A4D8               	btfss	status,2,c
  2878  000A4C  D009               	goto	l4469
  2879                           
  2880                           ; BSR set to: 1
  2881  000A4E  0101               	movlb	1	; () banked
  2882  000A50  515F               	movf	main@is_leading_zero& (0+255),w,b
  2883  000A52  0101               	movlb	1	; () banked
  2884  000A54  B4D8               	btfsc	status,2,c
  2885  000A56  D004               	goto	l4469
  2886                           
  2887                           ; BSR set to: 1
  2888                           ;main.c: 250: {
  2889                           ;main.c: 251: Lcd_Write_Char(' ');
  2890  000A58  0E20               	movlw	32
  2891  000A5A  EC53  F00C         	call	_Lcd_Write_Char
  2892                           
  2893                           ;main.c: 253: }
  2894                           
  2895                           ;main.c: 252: continue;
  2896  000A5E  D00E               	goto	l4473
  2897  000A60                     l4469:
  2898                           
  2899                           ;main.c: 254: else
  2900                           ;main.c: 255: {
  2901                           ;main.c: 256: is_leading_zero = 0;
  2902  000A60  0E00               	movlw	0
  2903  000A62  0101               	movlb	1	; () banked
  2904  000A64  6F5F               	movwf	main@is_leading_zero& (0+255),b
  2905                           
  2906                           ; BSR set to: 1
  2907                           ;main.c: 257: Lcd_Write_Char(digits[i]);
  2908  000A66  0E6F               	movlw	low main@digits
  2909  000A68  0101               	movlb	1	; () banked
  2910  000A6A  256D               	addwf	main@i_804& (0+255),w,b
  2911  000A6C  6ED9               	movwf	fsr2l,c
  2912  000A6E  0E01               	movlw	high main@digits
  2913  000A70  0101               	movlb	1	; () banked
  2914  000A72  216E               	addwfc	(main@i_804+1)& (0+255),w,b
  2915  000A74  6EDA               	movwf	fsr2h,c
  2916  000A76  50DF               	movf	indf2,w,c
  2917  000A78  EC53  F00C         	call	_Lcd_Write_Char
  2918  000A7C                     l4473:
  2919  000A7C  0101               	movlb	1	; () banked
  2920  000A7E  4B6D               	infsnz	main@i_804& (0+255),f,b
  2921  000A80  2B6E               	incf	(main@i_804+1)& (0+255),f,b
  2922  000A82  D7B2               	goto	l4455
  2923  000A84                     l4477:
  2924                           
  2925                           ; BSR set to: 1
  2926                           ;main.c: 258: }
  2927                           ;main.c: 259: }
  2928                           ;main.c: 260: Lcd_Set_Cursor(2,1);
  2929  000A84  0E01               	movlw	1
  2930  000A86  6E1A               	movwf	Lcd_Set_Cursor@b,c
  2931  000A88  0E02               	movlw	2
  2932  000A8A  ECE3  F00B         	call	_Lcd_Set_Cursor
  2933                           
  2934                           ;main.c: 261: Lcd_Write_String("                ");
  2935  000A8E  0EC1               	movlw	low STR_2
  2936  000A90  6E1C               	movwf	Lcd_Write_String@a,c
  2937  000A92  0E7E               	movlw	high STR_2
  2938  000A94  6E1D               	movwf	Lcd_Write_String@a+1,c
  2939  000A96  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  2940  000A9A  EF92  F000         	goto	l4141
  2941  000A9E                     __end_of_main:
  2942                           	opt stack 0
  2943                           tblptru	equ	0xFF8
  2944                           tblptrh	equ	0xFF7
  2945                           tblptrl	equ	0xFF6
  2946                           tablat	equ	0xFF5
  2947                           prodh	equ	0xFF4
  2948                           prodl	equ	0xFF3
  2949                           intcon	equ	0xFF2
  2950                           postinc0	equ	0xFEE
  2951                           wreg	equ	0xFE8
  2952                           indf1	equ	0xFE7
  2953                           postdec1	equ	0xFE5
  2954                           plusw1	equ	0xFE3
  2955                           fsr1h	equ	0xFE2
  2956                           fsr1l	equ	0xFE1
  2957                           indf2	equ	0xFDF
  2958                           postinc2	equ	0xFDE
  2959                           plusw2	equ	0xFDB
  2960                           fsr2h	equ	0xFDA
  2961                           fsr2l	equ	0xFD9
  2962                           status	equ	0xFD8
  2963                           
  2964 ;; *************** function _start_routine *****************
  2965 ;; Defined at:
  2966 ;;		line 405 in file "main.c"
  2967 ;; Parameters:    Size  Location     Type
  2968 ;;		None
  2969 ;; Auto vars:     Size  Location     Type
  2970 ;;  i               2   37[BANK0 ] int 
  2971 ;;  i               2   30[BANK0 ] int 
  2972 ;;  i               2   28[BANK0 ] int 
  2973 ;;  i               2   26[BANK0 ] int 
  2974 ;;  i               2   35[BANK0 ] int 
  2975 ;;  i               2   44[BANK0 ] int 
  2976 ;;  b               3   32[BANK0 ] unsigned char [3]
  2977 ;;  error_msg       2   16[BANK0 ] PTR unsigned char 
  2978 ;;		 -> STR_27(17), STR_26(17), 
  2979 ;;  new_I2C_addr    1   49[BANK0 ] unsigned char 
  2980 ;;  I2C_new_ADDR    3   39[BANK0 ] unsigned char [3]
  2981 ;;  i               2   24[BANK0 ] int 
  2982 ;;  i               2   22[BANK0 ] int 
  2983 ;;  i               2   20[BANK0 ] int 
  2984 ;;  n               1   48[BANK0 ] unsigned char 
  2985 ;;  x               1   47[BANK0 ] unsigned char 
  2986 ;;  dh              1   46[BANK0 ] unsigned char 
  2987 ;;  dt              1   43[BANK0 ] unsigned char 
  2988 ;;  a               1   42[BANK0 ] unsigned char 
  2989 ;;  v               1   19[BANK0 ] unsigned char 
  2990 ;;  d1              1   18[BANK0 ] unsigned char 
  2991 ;;  l               1   15[BANK0 ] unsigned char 
  2992 ;;  h               1   14[BANK0 ] unsigned char 
  2993 ;; Return value:  Size  Location     Type
  2994 ;;                  1    wreg      void 
  2995 ;; Registers used:
  2996 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2997 ;; Tracked objects:
  2998 ;;		On entry : 0/0
  2999 ;;		On exit  : 0/0
  3000 ;;		Unchanged: 0/0
  3001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3002 ;;      Params:         0       0       0       0       0       0       0
  3003 ;;      Locals:         0      36       0       0       0       0       0
  3004 ;;      Temps:          4       0       0       0       0       0       0
  3005 ;;      Totals:         4      36       0       0       0       0       0
  3006 ;;Total ram usage:       40 bytes
  3007 ;; Hardware stack levels used:    1
  3008 ;; Hardware stack levels required when called:    6
  3009 ;; This function calls:
  3010 ;;		_Eeprom_Write_Byte
  3011 ;;		_Lcd_Clear
  3012 ;;		_Lcd_Set_Cursor
  3013 ;;		_Lcd_Write_Char
  3014 ;;		_Lcd_Write_String
  3015 ;;		___awdiv
  3016 ;;		_latch_keypad
  3017 ;;		_menu_progress_bar
  3018 ;;		_read_keypad
  3019 ;; This function is called by:
  3020 ;;		_main
  3021 ;; This function uses a non-reentrant model
  3022 ;;
  3023                           
  3024                           	psect	text1
  3025  000A9E                     __ptext1:
  3026                           	opt stack 0
  3027  000A9E                     _start_routine:
  3028                           	opt stack 24
  3029                           
  3030                           ;main.c: 410: Lcd_Clear();
  3031                           
  3032                           ;incstack = 0
  3033  000A9E  ECDA  F00C         	call	_Lcd_Clear	;wreg free
  3034                           
  3035                           ;main.c: 411: Lcd_Set_Cursor(1, 1);
  3036  000AA2  0E01               	movlw	1
  3037  000AA4  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3038  000AA6  0E01               	movlw	1
  3039  000AA8  ECE3  F00B         	call	_Lcd_Set_Cursor
  3040                           
  3041                           ;main.c: 412: Lcd_Write_String("   [ Aditum ]   ");
  3042  000AAC  0EE3               	movlw	low STR_14
  3043  000AAE  6E1C               	movwf	Lcd_Write_String@a,c
  3044  000AB0  0E7E               	movlw	high STR_14
  3045  000AB2  6E1D               	movwf	Lcd_Write_String@a+1,c
  3046  000AB4  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  3047                           
  3048                           ;main.c: 413: for (int i = 0; i < 20; i++)
  3049  000AB8  0E00               	movlw	0
  3050  000ABA  0100               	movlb	0	; () banked
  3051  000ABC  6F75               	movwf	(start_routine@i+1)& (0+255),b
  3052  000ABE  0E00               	movlw	0
  3053  000AC0  6F74               	movwf	start_routine@i& (0+255),b
  3054  000AC2                     l3755:
  3055                           
  3056                           ; BSR set to: 0
  3057  000AC2  0100               	movlb	0	; () banked
  3058  000AC4  BF75               	btfsc	(start_routine@i+1)& (0+255),7,b
  3059  000AC6  D008               	goto	l3759
  3060  000AC8  0100               	movlb	0	; () banked
  3061  000ACA  5175               	movf	(start_routine@i+1)& (0+255),w,b
  3062  000ACC  E112               	bnz	l3763
  3063  000ACE  0E14               	movlw	20
  3064  000AD0  0100               	movlb	0	; () banked
  3065  000AD2  5D74               	subwf	start_routine@i& (0+255),w,b
  3066  000AD4  B0D8               	btfsc	status,0,c
  3067  000AD6  D00D               	goto	l3763
  3068  000AD8                     l3759:
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;main.c: 414: _delay((unsigned long)((20)*(16000000/4000.0)));
  3072  000AD8  0E68               	movlw	104
  3073  000ADA  6E2B               	movwf	??_start_routine& (0+255),c
  3074  000ADC  0EE4               	movlw	228
  3075  000ADE                     u4417:
  3076  000ADE  2EE8               	decfsz	wreg,f,c
  3077  000AE0  D7FE               	goto	u4417
  3078  000AE2  2E2B               	decfsz	??_start_routine& (0+255),f,c
  3079  000AE4  D7FC               	goto	u4417
  3080  000AE6  F000 F000          	nop2	
  3081  000AEA  0100               	movlb	0	; () banked
  3082  000AEC  4B74               	infsnz	start_routine@i& (0+255),f,b
  3083  000AEE  2B75               	incf	(start_routine@i+1)& (0+255),f,b
  3084  000AF0  D7E8               	goto	l3755
  3085  000AF2                     l3763:
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;main.c: 415: Lcd_Set_Cursor(2,1);
  3089  000AF2  0E01               	movlw	1
  3090  000AF4  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3091  000AF6  0E02               	movlw	2
  3092  000AF8  ECE3  F00B         	call	_Lcd_Set_Cursor
  3093                           
  3094                           ;main.c: 416: Lcd_Write_String("Rev ");
  3095  000AFC  0EF3               	movlw	low STR_15
  3096  000AFE  6E1C               	movwf	Lcd_Write_String@a,c
  3097  000B00  0E7F               	movlw	high STR_15
  3098  000B02  6E1D               	movwf	Lcd_Write_String@a+1,c
  3099  000B04  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  3100                           
  3101                           ;main.c: 417: Lcd_Write_String("1.0.0");
  3102  000B08  0EED               	movlw	low STR_16
  3103  000B0A  6E1C               	movwf	Lcd_Write_String@a,c
  3104  000B0C  0E7F               	movlw	high STR_16
  3105  000B0E  6E1D               	movwf	Lcd_Write_String@a+1,c
  3106  000B10  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  3107                           
  3108                           ;main.c: 418: for (int i = 0; i < 50; i++)
  3109  000B14  0E00               	movlw	0
  3110  000B16  0100               	movlb	0	; () banked
  3111  000B18  6F77               	movwf	(start_routine@i_874+1)& (0+255),b
  3112  000B1A  0E00               	movlw	0
  3113  000B1C  6F76               	movwf	start_routine@i_874& (0+255),b
  3114  000B1E                     l3771:
  3115                           
  3116                           ; BSR set to: 0
  3117  000B1E  0100               	movlb	0	; () banked
  3118  000B20  BF77               	btfsc	(start_routine@i_874+1)& (0+255),7,b
  3119  000B22  D008               	goto	l3775
  3120  000B24  0100               	movlb	0	; () banked
  3121  000B26  5177               	movf	(start_routine@i_874+1)& (0+255),w,b
  3122  000B28  E112               	bnz	l3779
  3123  000B2A  0E32               	movlw	50
  3124  000B2C  0100               	movlb	0	; () banked
  3125  000B2E  5D76               	subwf	start_routine@i_874& (0+255),w,b
  3126  000B30  B0D8               	btfsc	status,0,c
  3127  000B32  D00D               	goto	l3779
  3128  000B34                     l3775:
  3129                           
  3130                           ; BSR set to: 0
  3131                           ;main.c: 419: _delay((unsigned long)((20)*(16000000/4000.0)));
  3132  000B34  0E68               	movlw	104
  3133  000B36  6E2B               	movwf	??_start_routine& (0+255),c
  3134  000B38  0EE4               	movlw	228
  3135  000B3A                     u4427:
  3136  000B3A  2EE8               	decfsz	wreg,f,c
  3137  000B3C  D7FE               	goto	u4427
  3138  000B3E  2E2B               	decfsz	??_start_routine& (0+255),f,c
  3139  000B40  D7FC               	goto	u4427
  3140  000B42  F000 F000          	nop2	
  3141  000B46  0100               	movlb	0	; () banked
  3142  000B48  4B76               	infsnz	start_routine@i_874& (0+255),f,b
  3143  000B4A  2B77               	incf	(start_routine@i_874+1)& (0+255),f,b
  3144  000B4C  D7E8               	goto	l3771
  3145  000B4E                     l3779:
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;main.c: 420: Lcd_Set_Cursor(2,1);
  3149  000B4E  0E01               	movlw	1
  3150  000B50  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3151  000B52  0E02               	movlw	2
  3152  000B54  ECE3  F00B         	call	_Lcd_Set_Cursor
  3153                           
  3154                           ;main.c: 421: Lcd_Write_String("Device ID ");
  3155  000B58  0EE2               	movlw	low STR_17
  3156  000B5A  6E1C               	movwf	Lcd_Write_String@a,c
  3157  000B5C  0E7F               	movlw	high STR_17
  3158  000B5E  6E1D               	movwf	Lcd_Write_String@a+1,c
  3159  000B60  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  3160                           
  3161                           ;main.c: 422: unsigned char a, h, l, dh, dt, d1;
  3162                           ;main.c: 423: if (I2C_ADDR != 0)
  3163  000B64  0100               	movlb	0	; () banked
  3164  000B66  51CE               	movf	_I2C_ADDR& (0+255),w,b
  3165  000B68  B4D8               	btfsc	status,2,c
  3166  000B6A  D004               	goto	l3787
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;main.c: 424: a = I2C_ADDR - 0x0F;
  3170  000B6C  0100               	movlb	0	; () banked
  3171  000B6E  51CE               	movf	_I2C_ADDR& (0+255),w,b
  3172  000B70  0FF1               	addlw	241
  3173  000B72  D001               	goto	L4
  3174  000B74                     l3787:
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;main.c: 425: else
  3178                           ;main.c: 426: a = 0;
  3179  000B74  0E00               	movlw	0
  3180  000B76                     L4:
  3181  000B76  0100               	movlb	0	; () banked
  3182  000B78  6F8A               	movwf	start_routine@a& (0+255),b
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;main.c: 428: dh = (a / 100);
  3186                           
  3187                           ; BSR set to: 0
  3188  000B7A  C08A  F018         	movff	start_routine@a,___awdiv@dividend
  3189  000B7E  6A19               	clrf	___awdiv@dividend+1,c
  3190  000B80  0E00               	movlw	0
  3191  000B82  6E1B               	movwf	___awdiv@divisor+1,c
  3192  000B84  0E64               	movlw	100
  3193  000B86  6E1A               	movwf	___awdiv@divisor,c
  3194  000B88  ECC4  F00A         	call	___awdiv	;wreg free
  3195  000B8C  5018               	movf	?___awdiv,w,c
  3196  000B8E  0100               	movlb	0	; () banked
  3197  000B90  6F8E               	movwf	start_routine@dh& (0+255),b
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;main.c: 429: dt = (a - dh*100) / 10;
  3201  000B92  0100               	movlb	0	; () banked
  3202  000B94  518E               	movf	start_routine@dh& (0+255),w,b
  3203  000B96  0D64               	mullw	100
  3204  000B98  1EF3               	comf	prodl,f,c
  3205  000B9A  1EF4               	comf	prodh,f,c
  3206  000B9C  4AF3               	infsnz	prodl,f,c
  3207  000B9E  2AF4               	incf	prodh,f,c
  3208  000BA0  0100               	movlb	0	; () banked
  3209  000BA2  518A               	movf	start_routine@a& (0+255),w,b
  3210  000BA4  24F3               	addwf	prodl,w,c
  3211  000BA6  6E18               	movwf	___awdiv@dividend,c
  3212  000BA8  0E00               	movlw	0
  3213  000BAA  20F4               	addwfc	prodh,w,c
  3214  000BAC  6E19               	movwf	___awdiv@dividend+1,c
  3215  000BAE  0E00               	movlw	0
  3216  000BB0  6E1B               	movwf	___awdiv@divisor+1,c
  3217  000BB2  0E0A               	movlw	10
  3218  000BB4  6E1A               	movwf	___awdiv@divisor,c
  3219  000BB6  ECC4  F00A         	call	___awdiv	;wreg free
  3220  000BBA  5018               	movf	?___awdiv,w,c
  3221  000BBC  0100               	movlb	0	; () banked
  3222  000BBE  6F8B               	movwf	start_routine@dt& (0+255),b
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;main.c: 430: d1 = (a - (dh*100+dt*10));
  3226  000BC0  0100               	movlb	0	; () banked
  3227  000BC2  518B               	movf	start_routine@dt& (0+255),w,b
  3228  000BC4  0D0A               	mullw	10
  3229  000BC6  CFF3 F02B          	movff	prodl,??_start_routine
  3230  000BCA  0100               	movlb	0	; () banked
  3231  000BCC  518E               	movf	start_routine@dh& (0+255),w,b
  3232  000BCE  0D64               	mullw	100
  3233  000BD0  50F3               	movf	prodl,w,c
  3234  000BD2  242B               	addwf	??_start_routine,w,c
  3235  000BD4  0800               	sublw	0
  3236  000BD6  0100               	movlb	0	; () banked
  3237  000BD8  258A               	addwf	start_routine@a& (0+255),w,b
  3238  000BDA  0100               	movlb	0	; () banked
  3239  000BDC  6F72               	movwf	start_routine@d1& (0+255),b
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;main.c: 431: Lcd_Write_Char(c[dh]);
  3243  000BDE  0100               	movlb	0	; () banked
  3244  000BE0  518E               	movf	start_routine@dh& (0+255),w,b
  3245  000BE2  0D01               	mullw	1
  3246  000BE4  0EA2               	movlw	low _c
  3247  000BE6  24F3               	addwf	prodl,w,c
  3248  000BE8  6ED9               	movwf	fsr2l,c
  3249  000BEA  0E00               	movlw	high _c
  3250  000BEC  20F4               	addwfc	prodh,w,c
  3251  000BEE  6EDA               	movwf	fsr2h,c
  3252  000BF0  50DF               	movf	indf2,w,c
  3253  000BF2  EC53  F00C         	call	_Lcd_Write_Char
  3254                           
  3255                           ;main.c: 432: Lcd_Write_Char(c[dt]);
  3256  000BF6  0100               	movlb	0	; () banked
  3257  000BF8  518B               	movf	start_routine@dt& (0+255),w,b
  3258  000BFA  0D01               	mullw	1
  3259  000BFC  0EA2               	movlw	low _c
  3260  000BFE  24F3               	addwf	prodl,w,c
  3261  000C00  6ED9               	movwf	fsr2l,c
  3262  000C02  0E00               	movlw	high _c
  3263  000C04  20F4               	addwfc	prodh,w,c
  3264  000C06  6EDA               	movwf	fsr2h,c
  3265  000C08  50DF               	movf	indf2,w,c
  3266  000C0A  EC53  F00C         	call	_Lcd_Write_Char
  3267                           
  3268                           ;main.c: 433: Lcd_Write_Char(c[d1]);
  3269  000C0E  0100               	movlb	0	; () banked
  3270  000C10  5172               	movf	start_routine@d1& (0+255),w,b
  3271  000C12  0D01               	mullw	1
  3272  000C14  0EA2               	movlw	low _c
  3273  000C16  24F3               	addwf	prodl,w,c
  3274  000C18  6ED9               	movwf	fsr2l,c
  3275  000C1A  0E00               	movlw	high _c
  3276  000C1C  20F4               	addwfc	prodh,w,c
  3277  000C1E  6EDA               	movwf	fsr2h,c
  3278  000C20  50DF               	movf	indf2,w,c
  3279  000C22  EC53  F00C         	call	_Lcd_Write_Char
  3280                           
  3281                           ;main.c: 434: Lcd_Write_Char('|');
  3282  000C26  0E7C               	movlw	124
  3283  000C28  EC53  F00C         	call	_Lcd_Write_Char
  3284                           
  3285                           ;main.c: 435: Lcd_Write_Char(hx[I2C_ADDR/16]);
  3286  000C2C  C0CE  F018         	movff	_I2C_ADDR,___awdiv@dividend
  3287  000C30  6A19               	clrf	___awdiv@dividend+1,c
  3288  000C32  0E00               	movlw	0
  3289  000C34  6E1B               	movwf	___awdiv@divisor+1,c
  3290  000C36  0E10               	movlw	16
  3291  000C38  6E1A               	movwf	___awdiv@divisor,c
  3292  000C3A  ECC4  F00A         	call	___awdiv	;wreg free
  3293  000C3E  0E92               	movlw	low _hx
  3294  000C40  2418               	addwf	?___awdiv,w,c
  3295  000C42  6ED9               	movwf	fsr2l,c
  3296  000C44  0E00               	movlw	high _hx
  3297  000C46  2019               	addwfc	?___awdiv+1,w,c
  3298  000C48  6EDA               	movwf	fsr2h,c
  3299  000C4A  50DF               	movf	indf2,w,c
  3300  000C4C  EC53  F00C         	call	_Lcd_Write_Char
  3301                           
  3302                           ;main.c: 436: Lcd_Write_Char(hx[I2C_ADDR - (I2C_ADDR/16)*16]);
  3303  000C50  C0CE  F018         	movff	_I2C_ADDR,___awdiv@dividend
  3304  000C54  6A19               	clrf	___awdiv@dividend+1,c
  3305  000C56  0E00               	movlw	0
  3306  000C58  6E1B               	movwf	___awdiv@divisor+1,c
  3307  000C5A  0E10               	movlw	16
  3308  000C5C  6E1A               	movwf	___awdiv@divisor,c
  3309  000C5E  ECC4  F00A         	call	___awdiv	;wreg free
  3310  000C62  3A18               	swapf	?___awdiv,f,c
  3311  000C64  3A19               	swapf	?___awdiv+1,f,c
  3312  000C66  0EF0               	movlw	240
  3313  000C68  1619               	andwf	?___awdiv+1,f,c
  3314  000C6A  5018               	movf	?___awdiv,w,c
  3315  000C6C  0B0F               	andlw	15
  3316  000C6E  1219               	iorwf	?___awdiv+1,f,c
  3317  000C70  0EF0               	movlw	240
  3318  000C72  1618               	andwf	?___awdiv,f,c
  3319  000C74  1E18               	comf	?___awdiv,f,c
  3320  000C76  1E19               	comf	?___awdiv+1,f,c
  3321  000C78  4A18               	infsnz	?___awdiv,f,c
  3322  000C7A  2A19               	incf	?___awdiv+1,f,c
  3323  000C7C  0100               	movlb	0	; () banked
  3324  000C7E  51CE               	movf	_I2C_ADDR& (0+255),w,b
  3325  000C80  6E2B               	movwf	??_start_routine& (0+255),c
  3326  000C82  6A2C               	clrf	(??_start_routine+1)& (0+255),c
  3327  000C84  5018               	movf	?___awdiv,w,c
  3328  000C86  262B               	addwf	??_start_routine,f,c
  3329  000C88  5019               	movf	?___awdiv+1,w,c
  3330  000C8A  222C               	addwfc	??_start_routine+1,f,c
  3331  000C8C  0E92               	movlw	low _hx
  3332  000C8E  242B               	addwf	??_start_routine,w,c
  3333  000C90  6ED9               	movwf	fsr2l,c
  3334  000C92  0E00               	movlw	high _hx
  3335  000C94  202C               	addwfc	??_start_routine+1,w,c
  3336  000C96  6EDA               	movwf	fsr2h,c
  3337  000C98  50DF               	movf	indf2,w,c
  3338  000C9A  EC53  F00C         	call	_Lcd_Write_Char
  3339                           
  3340                           ;main.c: 437: for (int i = 0; i < 40; i++)
  3341  000C9E  0E00               	movlw	0
  3342  000CA0  0100               	movlb	0	; () banked
  3343  000CA2  6F79               	movwf	(start_routine@i_882+1)& (0+255),b
  3344  000CA4  0E00               	movlw	0
  3345  000CA6  6F78               	movwf	start_routine@i_882& (0+255),b
  3346  000CA8                     l3809:
  3347                           
  3348                           ; BSR set to: 0
  3349  000CA8  0100               	movlb	0	; () banked
  3350  000CAA  BF79               	btfsc	(start_routine@i_882+1)& (0+255),7,b
  3351  000CAC  D008               	goto	l3813
  3352  000CAE  0100               	movlb	0	; () banked
  3353  000CB0  5179               	movf	(start_routine@i_882+1)& (0+255),w,b
  3354  000CB2  E112               	bnz	l3817
  3355  000CB4  0E28               	movlw	40
  3356  000CB6  0100               	movlb	0	; () banked
  3357  000CB8  5D78               	subwf	start_routine@i_882& (0+255),w,b
  3358  000CBA  B0D8               	btfsc	status,0,c
  3359  000CBC  D00D               	goto	l3817
  3360  000CBE                     l3813:
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;main.c: 438: _delay((unsigned long)((20)*(16000000/4000.0)));
  3364  000CBE  0E68               	movlw	104
  3365  000CC0  6E2B               	movwf	??_start_routine& (0+255),c
  3366  000CC2  0EE4               	movlw	228
  3367  000CC4                     u4437:
  3368  000CC4  2EE8               	decfsz	wreg,f,c
  3369  000CC6  D7FE               	goto	u4437
  3370  000CC8  2E2B               	decfsz	??_start_routine& (0+255),f,c
  3371  000CCA  D7FC               	goto	u4437
  3372  000CCC  F000 F000          	nop2	
  3373  000CD0  0100               	movlb	0	; () banked
  3374  000CD2  4B78               	infsnz	start_routine@i_882& (0+255),f,b
  3375  000CD4  2B79               	incf	(start_routine@i_882+1)& (0+255),f,b
  3376  000CD6  D7E8               	goto	l3809
  3377  000CD8                     l3817:
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;main.c: 439: Lcd_Clear();
  3381  000CD8  ECDA  F00C         	call	_Lcd_Clear	;wreg free
  3382                           
  3383                           ;main.c: 440: Lcd_Set_Cursor(1, 1);
  3384  000CDC  0E01               	movlw	1
  3385  000CDE  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3386  000CE0  0E01               	movlw	1
  3387  000CE2  ECE3  F00B         	call	_Lcd_Set_Cursor
  3388                           
  3389                           ;main.c: 441: Lcd_Write_String("  [  Aditum  ]  ");
  3390  000CE6  0E38               	movlw	low STR_18
  3391  000CE8  6E1C               	movwf	Lcd_Write_String@a,c
  3392  000CEA  0E7F               	movlw	high STR_18
  3393  000CEC  6E1D               	movwf	Lcd_Write_String@a+1,c
  3394  000CEE  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  3395                           
  3396                           ;main.c: 442: menu_progress_bar(700);
  3397  000CF2  0E02               	movlw	2
  3398  000CF4  6E26               	movwf	menu_progress_bar@load_time_ms+1,c
  3399  000CF6  0EBC               	movlw	188
  3400  000CF8  6E25               	movwf	menu_progress_bar@load_time_ms,c
  3401  000CFA  EC0F  F009         	call	_menu_progress_bar	;wreg free
  3402                           
  3403                           ;main.c: 445: unsigned char x, n = 0, v;
  3404  000CFE  0E00               	movlw	0
  3405  000D00  0100               	movlb	0	; () banked
  3406  000D02  6F90               	movwf	start_routine@n& (0+255),b
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;main.c: 446: if (I2C_ADDR == 0x00)
  3410  000D04  0100               	movlb	0	; () banked
  3411  000D06  51CE               	movf	_I2C_ADDR& (0+255),w,b
  3412  000D08  A4D8               	btfss	status,2,c
  3413  000D0A  D285               	goto	l4029
  3414                           
  3415                           ; BSR set to: 0
  3416                           ;main.c: 447: {
  3417                           ;main.c: 448: v = 0;
  3418  000D0C  0E00               	movlw	0
  3419  000D0E  0100               	movlb	0	; () banked
  3420  000D10  6F73               	movwf	start_routine@v& (0+255),b
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;main.c: 449: Lcd_Set_Cursor(1,1);
  3424  000D12  0E01               	movlw	1
  3425  000D14  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3426  000D16  0E01               	movlw	1
  3427  000D18  ECE3  F00B         	call	_Lcd_Set_Cursor
  3428                           
  3429                           ;main.c: 450: Lcd_Write_String("Load I2C setup..");
  3430  000D1C  0E7C               	movlw	low STR_19
  3431  000D1E  6E1C               	movwf	Lcd_Write_String@a,c
  3432  000D20  0E7F               	movlw	high STR_19
  3433  000D22  6E1D               	movwf	Lcd_Write_String@a+1,c
  3434  000D24  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  3435                           
  3436                           ;main.c: 451: menu_progress_bar(300);
  3437  000D28  0E01               	movlw	1
  3438  000D2A  6E26               	movwf	menu_progress_bar@load_time_ms+1,c
  3439  000D2C  0E2C               	movlw	44
  3440  000D2E  6E25               	movwf	menu_progress_bar@load_time_ms,c
  3441  000D30  EC0F  F009         	call	_menu_progress_bar	;wreg free
  3442                           
  3443                           ;main.c: 452: unsigned char I2C_new_ADDR[] = {'0', '0', '0'};
  3444  000D34  C0B6  F087         	movff	start_routine@F3721,start_routine@I2C_new_ADDR
  3445  000D38  C0B7  F088         	movff	start_routine@F3721+1,start_routine@I2C_new_ADDR+1
  3446  000D3C  C0B8  F089         	movff	start_routine@F3721+2,start_routine@I2C_new_ADDR+2
  3447                           
  3448                           ;main.c: 453: while (v != 1)
  3449  000D40  D265               	goto	l4027
  3450  000D42                     l3839:
  3451                           
  3452                           ;main.c: 454: {
  3453                           ;main.c: 455: Lcd_Set_Cursor(1,1);
  3454  000D42  0E01               	movlw	1
  3455  000D44  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3456  000D46  0E01               	movlw	1
  3457  000D48  ECE3  F00B         	call	_Lcd_Set_Cursor
  3458                           
  3459                           ;main.c: 456: Lcd_Write_String("New Machine ID: ");
  3460  000D4C  0E49               	movlw	low STR_20
  3461  000D4E  6E1C               	movwf	Lcd_Write_String@a,c
  3462  000D50  0E7F               	movlw	high STR_20
  3463  000D52  6E1D               	movwf	Lcd_Write_String@a+1,c
  3464  000D54  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  3465                           
  3466                           ;main.c: 457: Lcd_Set_Cursor(2,1);
  3467  000D58  0E01               	movlw	1
  3468  000D5A  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3469  000D5C  0E02               	movlw	2
  3470  000D5E  ECE3  F00B         	call	_Lcd_Set_Cursor
  3471                           
  3472                           ;main.c: 458: Lcd_Write_String("       [001-100]");
  3473  000D62  0EAF               	movlw	low STR_21
  3474  000D64  6E1C               	movwf	Lcd_Write_String@a,c
  3475  000D66  0E7F               	movlw	high STR_21
  3476  000D68  6E1D               	movwf	Lcd_Write_String@a+1,c
  3477  000D6A  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  3478                           
  3479                           ;main.c: 459: Lcd_Set_Cursor(2,1);
  3480  000D6E  0E01               	movlw	1
  3481  000D70  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3482  000D72  0E02               	movlw	2
  3483  000D74  ECE3  F00B         	call	_Lcd_Set_Cursor
  3484                           
  3485                           ;main.c: 460: Lcd_Write_Char('_');
  3486  000D78  0E5F               	movlw	95
  3487  000D7A  EC53  F00C         	call	_Lcd_Write_Char
  3488                           
  3489                           ;main.c: 461: while (n < 3)
  3490  000D7E  D081               	goto	l3891
  3491  000D80                     l3849:
  3492                           
  3493                           ;main.c: 462: {
  3494                           ;main.c: 463: x = read_keypad();
  3495  000D80  ECE0  F009         	call	_read_keypad	;wreg free
  3496  000D84  0100               	movlb	0	; () banked
  3497  000D86  6F8F               	movwf	start_routine@x& (0+255),b
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;main.c: 464: if (x != '_')
  3501  000D88  0E5F               	movlw	95
  3502  000D8A  0100               	movlb	0	; () banked
  3503  000D8C  198F               	xorwf	start_routine@x& (0+255),w,b
  3504  000D8E  B4D8               	btfsc	status,2,c
  3505  000D90  D078               	goto	l3891
  3506                           
  3507                           ; BSR set to: 0
  3508                           ;main.c: 465: {
  3509                           ;main.c: 466: if (((x - '#') == 0)&&(n > 0))
  3510  000D92  0EDD               	movlw	221
  3511  000D94  6E2B               	movwf	??_start_routine& (0+255),c
  3512  000D96  0EFF               	movlw	255
  3513  000D98  6E2C               	movwf	(??_start_routine+1)& (0+255),c
  3514  000D9A  0100               	movlb	0	; () banked
  3515  000D9C  518F               	movf	start_routine@x& (0+255),w,b
  3516  000D9E  6E2D               	movwf	(??_start_routine+2)& (0+255),c
  3517  000DA0  6A2E               	clrf	(??_start_routine+3)& (0+255),c
  3518  000DA2  502B               	movf	??_start_routine,w,c
  3519  000DA4  262D               	addwf	??_start_routine+2,f,c
  3520  000DA6  502C               	movf	??_start_routine+1,w,c
  3521  000DA8  222E               	addwfc	??_start_routine+3,f,c
  3522  000DAA  502D               	movf	??_start_routine+2,w,c
  3523  000DAC  102E               	iorwf	??_start_routine+3,w,c
  3524  000DAE  A4D8               	btfss	status,2,c
  3525  000DB0  D02F               	goto	l3873
  3526                           
  3527                           ; BSR set to: 0
  3528  000DB2  0100               	movlb	0	; () banked
  3529  000DB4  5190               	movf	start_routine@n& (0+255),w,b
  3530  000DB6  0100               	movlb	0	; () banked
  3531  000DB8  B4D8               	btfsc	status,2,c
  3532  000DBA  D02A               	goto	l3873
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;main.c: 467: {
  3536                           ;main.c: 468: I2C_new_ADDR[n] = 0;
  3537  000DBC  0100               	movlb	0	; () banked
  3538  000DBE  5190               	movf	start_routine@n& (0+255),w,b
  3539  000DC0  0D01               	mullw	1
  3540  000DC2  0E87               	movlw	low start_routine@I2C_new_ADDR
  3541  000DC4  24F3               	addwf	prodl,w,c
  3542  000DC6  6ED9               	movwf	fsr2l,c
  3543  000DC8  0E00               	movlw	high start_routine@I2C_new_ADDR
  3544  000DCA  20F4               	addwfc	prodh,w,c
  3545  000DCC  6EDA               	movwf	fsr2h,c
  3546  000DCE  0E00               	movlw	0
  3547  000DD0  6EDF               	movwf	indf2,c
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;main.c: 469: Lcd_Set_Cursor(2, n);
  3551  000DD2  C090  F01A         	movff	start_routine@n,Lcd_Set_Cursor@b
  3552  000DD6  0E02               	movlw	2
  3553  000DD8  ECE3  F00B         	call	_Lcd_Set_Cursor
  3554                           
  3555                           ;main.c: 470: Lcd_Write_Char('_');
  3556  000DDC  0E5F               	movlw	95
  3557  000DDE  EC53  F00C         	call	_Lcd_Write_Char
  3558                           
  3559                           ;main.c: 471: latch_keypad(&x);
  3560  000DE2  0E8F               	movlw	low start_routine@x
  3561  000DE4  6E18               	movwf	latch_keypad@x,c
  3562  000DE6  0E00               	movlw	high start_routine@x
  3563  000DE8  6E19               	movwf	latch_keypad@x+1,c
  3564  000DEA  EC6F  F00C         	call	_latch_keypad	;wreg free
  3565                           
  3566                           ;main.c: 472: Lcd_Set_Cursor(2, 1 + n);
  3567  000DEE  0100               	movlb	0	; () banked
  3568  000DF0  2990               	incf	start_routine@n& (0+255),w,b
  3569  000DF2  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3570  000DF4  0E02               	movlw	2
  3571  000DF6  ECE3  F00B         	call	_Lcd_Set_Cursor
  3572                           
  3573                           ;main.c: 473: Lcd_Write_Char(' ');
  3574  000DFA  0E20               	movlw	32
  3575  000DFC  EC53  F00C         	call	_Lcd_Write_Char
  3576                           
  3577                           ;main.c: 474: Lcd_Set_Cursor(2, n);
  3578  000E00  C090  F01A         	movff	start_routine@n,Lcd_Set_Cursor@b
  3579  000E04  0E02               	movlw	2
  3580  000E06  ECE3  F00B         	call	_Lcd_Set_Cursor
  3581                           
  3582                           ;main.c: 475: n--;
  3583  000E0A  0100               	movlb	0	; () banked
  3584  000E0C  0790               	decf	start_routine@n& (0+255),f,b
  3585                           
  3586                           ;main.c: 476: }
  3587  000E0E  D039               	goto	l3891
  3588  000E10                     l3873:
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;main.c: 477: else if ((x - '#') != 0)
  3592  000E10  0EDD               	movlw	221
  3593  000E12  6E2B               	movwf	??_start_routine& (0+255),c
  3594  000E14  0EFF               	movlw	255
  3595  000E16  6E2C               	movwf	(??_start_routine+1)& (0+255),c
  3596  000E18  0100               	movlb	0	; () banked
  3597  000E1A  518F               	movf	start_routine@x& (0+255),w,b
  3598  000E1C  6E2D               	movwf	(??_start_routine+2)& (0+255),c
  3599  000E1E  6A2E               	clrf	(??_start_routine+3)& (0+255),c
  3600  000E20  502B               	movf	??_start_routine,w,c
  3601  000E22  262D               	addwf	??_start_routine+2,f,c
  3602  000E24  502C               	movf	??_start_routine+1,w,c
  3603  000E26  222E               	addwfc	??_start_routine+3,f,c
  3604  000E28  502D               	movf	??_start_routine+2,w,c
  3605  000E2A  102E               	iorwf	??_start_routine+3,w,c
  3606  000E2C  B4D8               	btfsc	status,2,c
  3607  000E2E  D029               	goto	l3891
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;main.c: 478: {
  3611                           ;main.c: 479: if ((x == '*')|(n == 3))
  3612  000E30  0E2A               	movlw	42
  3613  000E32  0100               	movlb	0	; () banked
  3614  000E34  198F               	xorwf	start_routine@x& (0+255),w,b
  3615  000E36  B4D8               	btfsc	status,2,c
  3616  000E38  D028               	goto	l3893
  3617                           
  3618                           ; BSR set to: 0
  3619  000E3A  0E03               	movlw	3
  3620  000E3C  0100               	movlb	0	; () banked
  3621  000E3E  1990               	xorwf	start_routine@n& (0+255),w,b
  3622  000E40  B4D8               	btfsc	status,2,c
  3623  000E42  D023               	goto	l3893
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;main.c: 482: }
  3627                           ;main.c: 483: I2C_new_ADDR[n] = x;
  3628                           
  3629                           ; BSR set to: 0
  3630                           
  3631                           ; BSR set to: 0
  3632                           ;main.c: 480: {
  3633                           ;main.c: 481: break;
  3634  000E44  0100               	movlb	0	; () banked
  3635  000E46  5190               	movf	start_routine@n& (0+255),w,b
  3636  000E48  0D01               	mullw	1
  3637  000E4A  0E87               	movlw	low start_routine@I2C_new_ADDR
  3638  000E4C  24F3               	addwf	prodl,w,c
  3639  000E4E  6ED9               	movwf	fsr2l,c
  3640  000E50  0E00               	movlw	high start_routine@I2C_new_ADDR
  3641  000E52  20F4               	addwfc	prodh,w,c
  3642  000E54  6EDA               	movwf	fsr2h,c
  3643  000E56  C08F  FFDF         	movff	start_routine@x,indf2
  3644                           
  3645                           ; BSR set to: 0
  3646                           ;main.c: 484: n++;
  3647  000E5A  0100               	movlb	0	; () banked
  3648  000E5C  2B90               	incf	start_routine@n& (0+255),f,b
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;main.c: 485: Lcd_Set_Cursor(2, n);
  3652  000E5E  C090  F01A         	movff	start_routine@n,Lcd_Set_Cursor@b
  3653  000E62  0E02               	movlw	2
  3654  000E64  ECE3  F00B         	call	_Lcd_Set_Cursor
  3655                           
  3656                           ;main.c: 486: Lcd_Write_Char(x);
  3657  000E68  0100               	movlb	0	; () banked
  3658  000E6A  518F               	movf	start_routine@x& (0+255),w,b
  3659  000E6C  EC53  F00C         	call	_Lcd_Write_Char
  3660                           
  3661                           ;main.c: 487: Lcd_Write_Char('_');
  3662  000E70  0E5F               	movlw	95
  3663  000E72  EC53  F00C         	call	_Lcd_Write_Char
  3664                           
  3665                           ;main.c: 488: latch_keypad(&x);
  3666  000E76  0E8F               	movlw	low start_routine@x
  3667  000E78  6E18               	movwf	latch_keypad@x,c
  3668  000E7A  0E00               	movlw	high start_routine@x
  3669  000E7C  6E19               	movwf	latch_keypad@x+1,c
  3670  000E7E  EC6F  F00C         	call	_latch_keypad	;wreg free
  3671  000E82                     l3891:
  3672  000E82  0E02               	movlw	2
  3673  000E84  0100               	movlb	0	; () banked
  3674  000E86  6590               	cpfsgt	start_routine@n& (0+255),b
  3675  000E88  D77B               	goto	l3849
  3676  000E8A                     l3893:
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;main.c: 489: }
  3680                           ;main.c: 490: }
  3681                           ;main.c: 491: }
  3682                           ;main.c: 493: unsigned char new_I2C_address = 0;
  3683  000E8A  0E00               	movlw	0
  3684  000E8C  0100               	movlb	0	; () banked
  3685  000E8E  6F91               	movwf	start_routine@new_I2C_address& (0+255),b
  3686                           
  3687                           ;main.c: 494: unsigned char b[3];
  3688                           ;main.c: 495: for (int i = 0; i < 3; i++)
  3689  000E90  0E00               	movlw	0
  3690  000E92  0100               	movlb	0	; () banked
  3691  000E94  6F8D               	movwf	(start_routine@i_894+1)& (0+255),b
  3692  000E96  0E00               	movlw	0
  3693  000E98  6F8C               	movwf	start_routine@i_894& (0+255),b
  3694  000E9A                     l3895:
  3695                           
  3696                           ; BSR set to: 0
  3697  000E9A  0100               	movlb	0	; () banked
  3698  000E9C  BF8D               	btfsc	(start_routine@i_894+1)& (0+255),7,b
  3699  000E9E  D008               	goto	l3899
  3700  000EA0  0100               	movlb	0	; () banked
  3701  000EA2  518D               	movf	(start_routine@i_894+1)& (0+255),w,b
  3702  000EA4  E11C               	bnz	l3905
  3703  000EA6  0E03               	movlw	3
  3704  000EA8  0100               	movlb	0	; () banked
  3705  000EAA  5D8C               	subwf	start_routine@i_894& (0+255),w,b
  3706  000EAC  B0D8               	btfsc	status,0,c
  3707  000EAE  D017               	goto	l3905
  3708  000EB0                     l3899:
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;main.c: 496: b[i] = I2C_new_ADDR[i] - '0';
  3712  000EB0  0E80               	movlw	low start_routine@b
  3713  000EB2  0100               	movlb	0	; () banked
  3714  000EB4  258C               	addwf	start_routine@i_894& (0+255),w,b
  3715  000EB6  6ED9               	movwf	fsr2l,c
  3716  000EB8  0E00               	movlw	high start_routine@b
  3717  000EBA  0100               	movlb	0	; () banked
  3718  000EBC  218D               	addwfc	(start_routine@i_894+1)& (0+255),w,b
  3719  000EBE  6EDA               	movwf	fsr2h,c
  3720  000EC0  0E87               	movlw	low start_routine@I2C_new_ADDR
  3721  000EC2  0100               	movlb	0	; () banked
  3722  000EC4  258C               	addwf	start_routine@i_894& (0+255),w,b
  3723  000EC6  6EE1               	movwf	fsr1l,c
  3724  000EC8  0E00               	movlw	high start_routine@I2C_new_ADDR
  3725  000ECA  0100               	movlb	0	; () banked
  3726  000ECC  218D               	addwfc	(start_routine@i_894+1)& (0+255),w,b
  3727  000ECE  6EE2               	movwf	fsr1h,c
  3728  000ED0  50E7               	movf	indf1,w,c
  3729  000ED2  0FD0               	addlw	208
  3730  000ED4  6EDF               	movwf	indf2,c
  3731                           
  3732                           ; BSR set to: 0
  3733  000ED6  0100               	movlb	0	; () banked
  3734  000ED8  4B8C               	infsnz	start_routine@i_894& (0+255),f,b
  3735  000EDA  2B8D               	incf	(start_routine@i_894+1)& (0+255),f,b
  3736  000EDC  D7DE               	goto	l3895
  3737  000EDE                     l3905:
  3738                           
  3739                           ; BSR set to: 0
  3740                           ;main.c: 497: new_I2C_address += (100)*(I2C_new_ADDR[0] - '0');
  3741  000EDE  0100               	movlb	0	; () banked
  3742  000EE0  5187               	movf	start_routine@I2C_new_ADDR& (0+255),w,b
  3743  000EE2  0FD0               	addlw	208
  3744  000EE4  0D64               	mullw	100
  3745  000EE6  50F3               	movf	prodl,w,c
  3746  000EE8  0100               	movlb	0	; () banked
  3747  000EEA  2791               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3748                           
  3749                           ;main.c: 498: new_I2C_address += (10)*(I2C_new_ADDR[1] - '0');
  3750  000EEC  0100               	movlb	0	; () banked
  3751  000EEE  5188               	movf	(start_routine@I2C_new_ADDR+1)& (0+255),w,b
  3752  000EF0  0FD0               	addlw	208
  3753  000EF2  0D0A               	mullw	10
  3754  000EF4  50F3               	movf	prodl,w,c
  3755  000EF6  0100               	movlb	0	; () banked
  3756  000EF8  2791               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;main.c: 499: new_I2C_address += (1)*(I2C_new_ADDR[2] - '0');
  3760  000EFA  0100               	movlb	0	; () banked
  3761  000EFC  5189               	movf	(start_routine@I2C_new_ADDR+2)& (0+255),w,b
  3762  000EFE  0FD0               	addlw	208
  3763  000F00  0100               	movlb	0	; () banked
  3764  000F02  2791               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3765                           
  3766                           ; BSR set to: 0
  3767                           ;main.c: 500: Machine_ID = new_I2C_address;
  3768  000F04  C091  F0CF         	movff	start_routine@new_I2C_address,_Machine_ID
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;main.c: 501: new_I2C_address += 0x0F;
  3772  000F08  0E0F               	movlw	15
  3773  000F0A  0100               	movlb	0	; () banked
  3774  000F0C  2791               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;main.c: 503: char* error_msg;
  3778                           ;main.c: 504: if ( ((b[0]==0)&&((b[1]!=0)|(b[2]!=0))) | ((b[0]==1)&&(b[1]==0)&&(b[2]==0)
      +                          ) )
  3779  000F0E  0100               	movlb	0	; () banked
  3780  000F10  5180               	movf	start_routine@b& (0+255),w,b
  3781  000F12  0100               	movlb	0	; () banked
  3782  000F14  A4D8               	btfss	status,2,c
  3783  000F16  D008               	goto	l3919
  3784                           
  3785                           ; BSR set to: 0
  3786  000F18  0100               	movlb	0	; () banked
  3787  000F1A  5181               	movf	(start_routine@b+1)& (0+255),w,b
  3788  000F1C  A4D8               	btfss	status,2,c
  3789  000F1E  D010               	goto	l3925
  3790                           
  3791                           ; BSR set to: 0
  3792  000F20  0100               	movlb	0	; () banked
  3793  000F22  5182               	movf	(start_routine@b+2)& (0+255),w,b
  3794  000F24  A4D8               	btfss	status,2,c
  3795  000F26  D00C               	goto	l3925
  3796  000F28                     l3919:
  3797                           
  3798                           ; BSR set to: 0
  3799  000F28  0100               	movlb	0	; () banked
  3800  000F2A  0580               	decf	start_routine@b& (0+255),w,b
  3801  000F2C  A4D8               	btfss	status,2,c
  3802  000F2E  D112               	goto	l3993
  3803                           
  3804                           ; BSR set to: 0
  3805  000F30  0100               	movlb	0	; () banked
  3806  000F32  5181               	movf	(start_routine@b+1)& (0+255),w,b
  3807  000F34  A4D8               	btfss	status,2,c
  3808  000F36  D10E               	goto	l3993
  3809                           
  3810                           ; BSR set to: 0
  3811  000F38  0100               	movlb	0	; () banked
  3812  000F3A  5182               	movf	(start_routine@b+2)& (0+255),w,b
  3813  000F3C  A4D8               	btfss	status,2,c
  3814  000F3E  D10A               	goto	l3993
  3815  000F40                     l3925:
  3816                           
  3817                           ; BSR set to: 0
  3818                           ;main.c: 505: {
  3819                           ;main.c: 507: dh = (new_I2C_address / 100);
  3820  000F40  C091  F018         	movff	start_routine@new_I2C_address,___awdiv@dividend
  3821  000F44  6A19               	clrf	___awdiv@dividend+1,c
  3822  000F46  0E00               	movlw	0
  3823  000F48  6E1B               	movwf	___awdiv@divisor+1,c
  3824  000F4A  0E64               	movlw	100
  3825  000F4C  6E1A               	movwf	___awdiv@divisor,c
  3826  000F4E  ECC4  F00A         	call	___awdiv	;wreg free
  3827  000F52  5018               	movf	?___awdiv,w,c
  3828  000F54  0100               	movlb	0	; () banked
  3829  000F56  6F8E               	movwf	start_routine@dh& (0+255),b
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;main.c: 508: dt = (new_I2C_address - dh*100) / 10;
  3833  000F58  0100               	movlb	0	; () banked
  3834  000F5A  518E               	movf	start_routine@dh& (0+255),w,b
  3835  000F5C  0D64               	mullw	100
  3836  000F5E  1EF3               	comf	prodl,f,c
  3837  000F60  1EF4               	comf	prodh,f,c
  3838  000F62  4AF3               	infsnz	prodl,f,c
  3839  000F64  2AF4               	incf	prodh,f,c
  3840  000F66  0100               	movlb	0	; () banked
  3841  000F68  5191               	movf	start_routine@new_I2C_address& (0+255),w,b
  3842  000F6A  24F3               	addwf	prodl,w,c
  3843  000F6C  6E18               	movwf	___awdiv@dividend,c
  3844  000F6E  0E00               	movlw	0
  3845  000F70  20F4               	addwfc	prodh,w,c
  3846  000F72  6E19               	movwf	___awdiv@dividend+1,c
  3847  000F74  0E00               	movlw	0
  3848  000F76  6E1B               	movwf	___awdiv@divisor+1,c
  3849  000F78  0E0A               	movlw	10
  3850  000F7A  6E1A               	movwf	___awdiv@divisor,c
  3851  000F7C  ECC4  F00A         	call	___awdiv	;wreg free
  3852  000F80  5018               	movf	?___awdiv,w,c
  3853  000F82  0100               	movlb	0	; () banked
  3854  000F84  6F8B               	movwf	start_routine@dt& (0+255),b
  3855                           
  3856                           ; BSR set to: 0
  3857                           ;main.c: 509: d1 = (new_I2C_address - (dh*100+dt*10));
  3858  000F86  0100               	movlb	0	; () banked
  3859  000F88  518B               	movf	start_routine@dt& (0+255),w,b
  3860  000F8A  0D0A               	mullw	10
  3861  000F8C  CFF3 F02B          	movff	prodl,??_start_routine
  3862  000F90  0100               	movlb	0	; () banked
  3863  000F92  518E               	movf	start_routine@dh& (0+255),w,b
  3864  000F94  0D64               	mullw	100
  3865  000F96  50F3               	movf	prodl,w,c
  3866  000F98  242B               	addwf	??_start_routine,w,c
  3867  000F9A  0800               	sublw	0
  3868  000F9C  0100               	movlb	0	; () banked
  3869  000F9E  2591               	addwf	start_routine@new_I2C_address& (0+255),w,b
  3870  000FA0  0100               	movlb	0	; () banked
  3871  000FA2  6F72               	movwf	start_routine@d1& (0+255),b
  3872                           
  3873                           ; BSR set to: 0
  3874                           ;main.c: 511: h = new_I2C_address/16;
  3875  000FA4  C091  F018         	movff	start_routine@new_I2C_address,___awdiv@dividend
  3876  000FA8  6A19               	clrf	___awdiv@dividend+1,c
  3877  000FAA  0E00               	movlw	0
  3878  000FAC  6E1B               	movwf	___awdiv@divisor+1,c
  3879  000FAE  0E10               	movlw	16
  3880  000FB0  6E1A               	movwf	___awdiv@divisor,c
  3881  000FB2  ECC4  F00A         	call	___awdiv	;wreg free
  3882  000FB6  5018               	movf	?___awdiv,w,c
  3883  000FB8  0100               	movlb	0	; () banked
  3884  000FBA  6F6E               	movwf	start_routine@h& (0+255),b
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;main.c: 512: l = new_I2C_address - (new_I2C_address/16)*16;
  3888  000FBC  C091  F018         	movff	start_routine@new_I2C_address,___awdiv@dividend
  3889  000FC0  6A19               	clrf	___awdiv@dividend+1,c
  3890  000FC2  0E00               	movlw	0
  3891  000FC4  6E1B               	movwf	___awdiv@divisor+1,c
  3892  000FC6  0E10               	movlw	16
  3893  000FC8  6E1A               	movwf	___awdiv@divisor,c
  3894  000FCA  ECC4  F00A         	call	___awdiv	;wreg free
  3895  000FCE  3818               	swapf	?___awdiv,w,c
  3896  000FD0  0BF0               	andlw	240
  3897  000FD2  0800               	sublw	0
  3898  000FD4  0100               	movlb	0	; () banked
  3899  000FD6  2591               	addwf	start_routine@new_I2C_address& (0+255),w,b
  3900  000FD8  0100               	movlb	0	; () banked
  3901  000FDA  6F6F               	movwf	start_routine@l& (0+255),b
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;main.c: 513: Lcd_Clear();
  3905  000FDC  ECDA  F00C         	call	_Lcd_Clear	;wreg free
  3906                           
  3907                           ;main.c: 514: Lcd_Set_Cursor(1,1);
  3908  000FE0  0E01               	movlw	1
  3909  000FE2  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3910  000FE4  0E01               	movlw	1
  3911  000FE6  ECE3  F00B         	call	_Lcd_Set_Cursor
  3912                           
  3913                           ;main.c: 515: Lcd_Write_String("New Machine ID: ");
  3914  000FEA  0E49               	movlw	low STR_20
  3915  000FEC  6E1C               	movwf	Lcd_Write_String@a,c
  3916  000FEE  0E7F               	movlw	high STR_20
  3917  000FF0  6E1D               	movwf	Lcd_Write_String@a+1,c
  3918  000FF2  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  3919                           
  3920                           ;main.c: 516: Lcd_Set_Cursor(2,1);
  3921  000FF6  0E01               	movlw	1
  3922  000FF8  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3923  000FFA  0E02               	movlw	2
  3924  000FFC  ECE3  F00B         	call	_Lcd_Set_Cursor
  3925                           
  3926                           ;main.c: 517: for (int i = 0; i < 3; i++)
  3927  001000  0E00               	movlw	0
  3928  001002  0100               	movlb	0	; () banked
  3929  001004  6F84               	movwf	(start_routine@i_897+1)& (0+255),b
  3930  001006  0E00               	movlw	0
  3931  001008  6F83               	movwf	start_routine@i_897& (0+255),b
  3932  00100A                     l3945:
  3933                           
  3934                           ; BSR set to: 0
  3935  00100A  0100               	movlb	0	; () banked
  3936  00100C  BF84               	btfsc	(start_routine@i_897+1)& (0+255),7,b
  3937  00100E  D008               	goto	l3949
  3938  001010  0100               	movlb	0	; () banked
  3939  001012  5184               	movf	(start_routine@i_897+1)& (0+255),w,b
  3940  001014  E114               	bnz	l3955
  3941  001016  0E03               	movlw	3
  3942  001018  0100               	movlb	0	; () banked
  3943  00101A  5D83               	subwf	start_routine@i_897& (0+255),w,b
  3944  00101C  B0D8               	btfsc	status,0,c
  3945  00101E  D00F               	goto	l3955
  3946  001020                     l3949:
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;main.c: 518: Lcd_Write_Char(I2C_new_ADDR[i]);
  3950  001020  0E87               	movlw	low start_routine@I2C_new_ADDR
  3951  001022  0100               	movlb	0	; () banked
  3952  001024  2583               	addwf	start_routine@i_897& (0+255),w,b
  3953  001026  6ED9               	movwf	fsr2l,c
  3954  001028  0E00               	movlw	high start_routine@I2C_new_ADDR
  3955  00102A  0100               	movlb	0	; () banked
  3956  00102C  2184               	addwfc	(start_routine@i_897+1)& (0+255),w,b
  3957  00102E  6EDA               	movwf	fsr2h,c
  3958  001030  50DF               	movf	indf2,w,c
  3959  001032  EC53  F00C         	call	_Lcd_Write_Char
  3960  001036  0100               	movlb	0	; () banked
  3961  001038  4B83               	infsnz	start_routine@i_897& (0+255),f,b
  3962  00103A  2B84               	incf	(start_routine@i_897+1)& (0+255),f,b
  3963  00103C  D7E6               	goto	l3945
  3964  00103E                     l3955:
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;main.c: 519: Lcd_Set_Cursor(2, 7);
  3968  00103E  0E07               	movlw	7
  3969  001040  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3970  001042  0E02               	movlw	2
  3971  001044  ECE3  F00B         	call	_Lcd_Set_Cursor
  3972                           
  3973                           ;main.c: 520: Lcd_Write_String("[OK]");
  3974  001048  0EF8               	movlw	low STR_23
  3975  00104A  6E1C               	movwf	Lcd_Write_String@a,c
  3976  00104C  0E7F               	movlw	high STR_23
  3977  00104E  6E1D               	movwf	Lcd_Write_String@a+1,c
  3978  001050  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  3979                           
  3980                           ;main.c: 521: Lcd_Set_Cursor(2,14);
  3981  001054  0E0E               	movlw	14
  3982  001056  6E1A               	movwf	Lcd_Set_Cursor@b,c
  3983  001058  0E02               	movlw	2
  3984  00105A  ECE3  F00B         	call	_Lcd_Set_Cursor
  3985                           
  3986                           ;main.c: 522: Lcd_Write_String("x");
  3987  00105E  0EFD               	movlw	low STR_24
  3988  001060  6E1C               	movwf	Lcd_Write_String@a,c
  3989  001062  0E7F               	movlw	high STR_24
  3990  001064  6E1D               	movwf	Lcd_Write_String@a+1,c
  3991  001066  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  3992                           
  3993                           ;main.c: 523: Lcd_Write_Char(hx[h]);
  3994  00106A  0100               	movlb	0	; () banked
  3995  00106C  516E               	movf	start_routine@h& (0+255),w,b
  3996  00106E  0D01               	mullw	1
  3997  001070  0E92               	movlw	low _hx
  3998  001072  24F3               	addwf	prodl,w,c
  3999  001074  6ED9               	movwf	fsr2l,c
  4000  001076  0E00               	movlw	high _hx
  4001  001078  20F4               	addwfc	prodh,w,c
  4002  00107A  6EDA               	movwf	fsr2h,c
  4003  00107C  50DF               	movf	indf2,w,c
  4004  00107E  EC53  F00C         	call	_Lcd_Write_Char
  4005                           
  4006                           ;main.c: 524: Lcd_Write_Char(hx[l]);
  4007  001082  0100               	movlb	0	; () banked
  4008  001084  516F               	movf	start_routine@l& (0+255),w,b
  4009  001086  0D01               	mullw	1
  4010  001088  0E92               	movlw	low _hx
  4011  00108A  24F3               	addwf	prodl,w,c
  4012  00108C  6ED9               	movwf	fsr2l,c
  4013  00108E  0E00               	movlw	high _hx
  4014  001090  20F4               	addwfc	prodh,w,c
  4015  001092  6EDA               	movwf	fsr2h,c
  4016  001094  50DF               	movf	indf2,w,c
  4017  001096  EC53  F00C         	call	_Lcd_Write_Char
  4018                           
  4019                           ;main.c: 525: for (int i = 0; i < 50; i++)
  4020  00109A  0E00               	movlw	0
  4021  00109C  0100               	movlb	0	; () banked
  4022  00109E  6F7B               	movwf	(start_routine@i_900+1)& (0+255),b
  4023  0010A0  0E00               	movlw	0
  4024  0010A2  6F7A               	movwf	start_routine@i_900& (0+255),b
  4025                           
  4026                           ; BSR set to: 0
  4027  0010A4  0100               	movlb	0	; () banked
  4028  0010A6  BF7B               	btfsc	(start_routine@i_900+1)& (0+255),7,b
  4029  0010A8  D008               	goto	l3971
  4030  0010AA  0100               	movlb	0	; () banked
  4031  0010AC  517B               	movf	(start_routine@i_900+1)& (0+255),w,b
  4032  0010AE  E118               	bnz	l337
  4033  0010B0  0E32               	movlw	50
  4034  0010B2  0100               	movlb	0	; () banked
  4035  0010B4  5D7A               	subwf	start_routine@i_900& (0+255),w,b
  4036  0010B6  B0D8               	btfsc	status,0,c
  4037  0010B8  D013               	goto	l337
  4038  0010BA                     l3971:
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;main.c: 526: _delay((unsigned long)((20)*(16000000/4000.0)));
  4042  0010BA  0E68               	movlw	104
  4043  0010BC  6E2B               	movwf	??_start_routine& (0+255),c
  4044  0010BE  0EE4               	movlw	228
  4045  0010C0                     u4447:
  4046  0010C0  2EE8               	decfsz	wreg,f,c
  4047  0010C2  D7FE               	goto	u4447
  4048  0010C4  2E2B               	decfsz	??_start_routine& (0+255),f,c
  4049  0010C6  D7FC               	goto	u4447
  4050  0010C8  F000 F000          	nop2	
  4051  0010CC  0100               	movlb	0	; () banked
  4052  0010CE  4B7A               	infsnz	start_routine@i_900& (0+255),f,b
  4053  0010D0  2B7B               	incf	(start_routine@i_900+1)& (0+255),f,b
  4054  0010D2  0100               	movlb	0	; () banked
  4055  0010D4  BF7B               	btfsc	(start_routine@i_900+1)& (0+255),7,b
  4056  0010D6  D7F1               	goto	l3971
  4057  0010D8  0100               	movlb	0	; () banked
  4058  0010DA  517B               	movf	(start_routine@i_900+1)& (0+255),w,b
  4059  0010DC  E101               	bnz	u3680
  4060  0010DE  D7E8               	goto	L5
  4061  0010E0                     u3680:
  4062  0010E0                     l337:
  4063                           
  4064                           ; BSR set to: 0
  4065                           ;main.c: 527: I2C_ADDR = new_I2C_address;
  4066  0010E0  C091  F0CE         	movff	start_routine@new_I2C_address,_I2C_ADDR
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;main.c: 528: Eeprom_Write_Byte(EEP_I2C_ADDR, I2C_ADDR);
  4070  0010E4  C0CE  F018         	movff	_I2C_ADDR,Eeprom_Write_Byte@data
  4071  0010E8  0100               	movlb	0	; () banked
  4072  0010EA  51CC               	movf	_EEP_I2C_ADDR& (0+255),w,b
  4073  0010EC  ECC8  F00C         	call	_Eeprom_Write_Byte
  4074                           
  4075                           ;main.c: 529: Lcd_Clear();
  4076  0010F0  ECDA  F00C         	call	_Lcd_Clear	;wreg free
  4077                           
  4078                           ;main.c: 530: Lcd_Set_Cursor(1,1);
  4079  0010F4  0E01               	movlw	1
  4080  0010F6  6E1A               	movwf	Lcd_Set_Cursor@b,c
  4081  0010F8  0E01               	movlw	1
  4082  0010FA  ECE3  F00B         	call	_Lcd_Set_Cursor
  4083                           
  4084                           ;main.c: 531: Lcd_Write_String("I2C_ADDR>>EEPROM");
  4085  0010FE  0E8D               	movlw	low STR_25
  4086  001100  6E1C               	movwf	Lcd_Write_String@a,c
  4087  001102  0E7F               	movlw	high STR_25
  4088  001104  6E1D               	movwf	Lcd_Write_String@a+1,c
  4089  001106  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  4090                           
  4091                           ;main.c: 538: for (int i = 0; i < 10; i++)
  4092  00110A  0E00               	movlw	0
  4093  00110C  0100               	movlb	0	; () banked
  4094  00110E  6F7D               	movwf	(start_routine@i_903+1)& (0+255),b
  4095  001110  0E00               	movlw	0
  4096  001112  6F7C               	movwf	start_routine@i_903& (0+255),b
  4097  001114                     l3983:
  4098                           
  4099                           ; BSR set to: 0
  4100  001114  0100               	movlb	0	; () banked
  4101  001116  BF7D               	btfsc	(start_routine@i_903+1)& (0+255),7,b
  4102  001118  D008               	goto	l3987
  4103  00111A  0100               	movlb	0	; () banked
  4104  00111C  517D               	movf	(start_routine@i_903+1)& (0+255),w,b
  4105  00111E  E112               	bnz	l3991
  4106  001120  0E0A               	movlw	10
  4107  001122  0100               	movlb	0	; () banked
  4108  001124  5D7C               	subwf	start_routine@i_903& (0+255),w,b
  4109  001126  B0D8               	btfsc	status,0,c
  4110  001128  D00D               	goto	l3991
  4111  00112A                     l3987:
  4112                           
  4113                           ; BSR set to: 0
  4114                           ;main.c: 539: _delay((unsigned long)((20)*(16000000/4000.0)));
  4115  00112A  0E68               	movlw	104
  4116  00112C  6E2B               	movwf	??_start_routine& (0+255),c
  4117  00112E  0EE4               	movlw	228
  4118  001130                     u4457:
  4119  001130  2EE8               	decfsz	wreg,f,c
  4120  001132  D7FE               	goto	u4457
  4121  001134  2E2B               	decfsz	??_start_routine& (0+255),f,c
  4122  001136  D7FC               	goto	u4457
  4123  001138  F000 F000          	nop2	
  4124  00113C  0100               	movlb	0	; () banked
  4125  00113E  4B7C               	infsnz	start_routine@i_903& (0+255),f,b
  4126  001140  2B7D               	incf	(start_routine@i_903+1)& (0+255),f,b
  4127  001142  D7E8               	goto	l3983
  4128  001144                     l3991:
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;main.c: 540: menu_progress_bar(500);
  4132  001144  0E01               	movlw	1
  4133  001146  6E26               	movwf	menu_progress_bar@load_time_ms+1,c
  4134  001148  0EF4               	movlw	244
  4135  00114A  6E25               	movwf	menu_progress_bar@load_time_ms,c
  4136  00114C  EC0F  F009         	call	_menu_progress_bar	;wreg free
  4137  001150  00FF               	reset		;# 
  4138                           
  4139                           ;main.c: 542: }
  4140  001152  D05C               	goto	l4027
  4141  001154                     l3993:
  4142                           
  4143                           ;main.c: 543: else
  4144                           ;main.c: 544: {
  4145                           ;main.c: 545: if (new_I2C_address == 0)
  4146  001154  0100               	movlb	0	; () banked
  4147  001156  5191               	movf	start_routine@new_I2C_address& (0+255),w,b
  4148  001158  0100               	movlb	0	; () banked
  4149  00115A  A4D8               	btfss	status,2,c
  4150  00115C  D005               	goto	l3997
  4151                           
  4152                           ; BSR set to: 0
  4153                           ;main.c: 546: error_msg = "May not be zero!";
  4154  00115E  0E6B               	movlw	low STR_26
  4155  001160  0100               	movlb	0	; () banked
  4156  001162  6F70               	movwf	start_routine@error_msg& (0+255),b
  4157  001164  0E7F               	movlw	high STR_26
  4158  001166  D004               	goto	L6
  4159  001168                     l3997:
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;main.c: 547: else
  4163                           ;main.c: 548: error_msg = "Out of bounds!  ";
  4164  001168  0E16               	movlw	low STR_27
  4165  00116A  0100               	movlb	0	; () banked
  4166  00116C  6F70               	movwf	start_routine@error_msg& (0+255),b
  4167  00116E  0E7F               	movlw	high STR_27
  4168  001170                     L6:
  4169  001170  0100               	movlb	0	; () banked
  4170  001172  6F71               	movwf	(start_routine@error_msg+1)& (0+255),b
  4171                           
  4172                           ; BSR set to: 0
  4173                           ;main.c: 549: Lcd_Set_Cursor(2,1);
  4174                           
  4175                           ; BSR set to: 0
  4176  001174  0E01               	movlw	1
  4177  001176  6E1A               	movwf	Lcd_Set_Cursor@b,c
  4178  001178  0E02               	movlw	2
  4179  00117A  ECE3  F00B         	call	_Lcd_Set_Cursor
  4180                           
  4181                           ;main.c: 550: Lcd_Write_String(error_msg);
  4182  00117E  C070  F01C         	movff	start_routine@error_msg,Lcd_Write_String@a
  4183  001182  C071  F01D         	movff	start_routine@error_msg+1,Lcd_Write_String@a+1
  4184  001186  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  4185                           
  4186                           ;main.c: 551: for (int i = 0; i < 50; i++)
  4187  00118A  0E00               	movlw	0
  4188  00118C  0100               	movlb	0	; () banked
  4189  00118E  6F7F               	movwf	(start_routine@i_906+1)& (0+255),b
  4190  001190  0E00               	movlw	0
  4191  001192  6F7E               	movwf	start_routine@i_906& (0+255),b
  4192  001194                     l4005:
  4193                           
  4194                           ; BSR set to: 0
  4195  001194  0100               	movlb	0	; () banked
  4196  001196  BF7F               	btfsc	(start_routine@i_906+1)& (0+255),7,b
  4197  001198  D008               	goto	l4009
  4198  00119A  0100               	movlb	0	; () banked
  4199  00119C  517F               	movf	(start_routine@i_906+1)& (0+255),w,b
  4200  00119E  E112               	bnz	l4013
  4201  0011A0  0E32               	movlw	50
  4202  0011A2  0100               	movlb	0	; () banked
  4203  0011A4  5D7E               	subwf	start_routine@i_906& (0+255),w,b
  4204  0011A6  B0D8               	btfsc	status,0,c
  4205  0011A8  D00D               	goto	l4013
  4206  0011AA                     l4009:
  4207                           
  4208                           ; BSR set to: 0
  4209                           ;main.c: 552: _delay((unsigned long)((20)*(16000000/4000.0)));
  4210  0011AA  0E68               	movlw	104
  4211  0011AC  6E2B               	movwf	??_start_routine& (0+255),c
  4212  0011AE  0EE4               	movlw	228
  4213  0011B0                     u4467:
  4214  0011B0  2EE8               	decfsz	wreg,f,c
  4215  0011B2  D7FE               	goto	u4467
  4216  0011B4  2E2B               	decfsz	??_start_routine& (0+255),f,c
  4217  0011B6  D7FC               	goto	u4467
  4218  0011B8  F000 F000          	nop2	
  4219  0011BC  0100               	movlb	0	; () banked
  4220  0011BE  4B7E               	infsnz	start_routine@i_906& (0+255),f,b
  4221  0011C0  2B7F               	incf	(start_routine@i_906+1)& (0+255),f,b
  4222  0011C2  D7E8               	goto	l4005
  4223  0011C4                     l4013:
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;main.c: 553: for (int i = 0; i < 3; i++)
  4227  0011C4  0E00               	movlw	0
  4228  0011C6  0100               	movlb	0	; () banked
  4229  0011C8  6F86               	movwf	(start_routine@i_907+1)& (0+255),b
  4230  0011CA  0E00               	movlw	0
  4231  0011CC  6F85               	movwf	start_routine@i_907& (0+255),b
  4232  0011CE                     l4015:
  4233                           
  4234                           ; BSR set to: 0
  4235  0011CE  0100               	movlb	0	; () banked
  4236  0011D0  BF86               	btfsc	(start_routine@i_907+1)& (0+255),7,b
  4237  0011D2  D008               	goto	l4019
  4238  0011D4  0100               	movlb	0	; () banked
  4239  0011D6  5186               	movf	(start_routine@i_907+1)& (0+255),w,b
  4240  0011D8  E113               	bnz	l4025
  4241  0011DA  0E03               	movlw	3
  4242  0011DC  0100               	movlb	0	; () banked
  4243  0011DE  5D85               	subwf	start_routine@i_907& (0+255),w,b
  4244  0011E0  B0D8               	btfsc	status,0,c
  4245  0011E2  D00E               	goto	l4025
  4246  0011E4                     l4019:
  4247                           
  4248                           ; BSR set to: 0
  4249                           ;main.c: 554: I2C_new_ADDR[i] = '0';
  4250  0011E4  0E87               	movlw	low start_routine@I2C_new_ADDR
  4251  0011E6  0100               	movlb	0	; () banked
  4252  0011E8  2585               	addwf	start_routine@i_907& (0+255),w,b
  4253  0011EA  6ED9               	movwf	fsr2l,c
  4254  0011EC  0E00               	movlw	high start_routine@I2C_new_ADDR
  4255  0011EE  0100               	movlb	0	; () banked
  4256  0011F0  2186               	addwfc	(start_routine@i_907+1)& (0+255),w,b
  4257  0011F2  6EDA               	movwf	fsr2h,c
  4258  0011F4  0E30               	movlw	48
  4259  0011F6  6EDF               	movwf	indf2,c
  4260                           
  4261                           ; BSR set to: 0
  4262  0011F8  0100               	movlb	0	; () banked
  4263  0011FA  4B85               	infsnz	start_routine@i_907& (0+255),f,b
  4264  0011FC  2B86               	incf	(start_routine@i_907+1)& (0+255),f,b
  4265  0011FE  D7E7               	goto	l4015
  4266  001200                     l4025:
  4267                           
  4268                           ; BSR set to: 0
  4269                           ;main.c: 555: v = 0;
  4270  001200  0E00               	movlw	0
  4271  001202  0100               	movlb	0	; () banked
  4272  001204  6F73               	movwf	start_routine@v& (0+255),b
  4273                           
  4274                           ;main.c: 556: n = 0;
  4275  001206  0E00               	movlw	0
  4276  001208  0100               	movlb	0	; () banked
  4277  00120A  6F90               	movwf	start_routine@n& (0+255),b
  4278  00120C                     l4027:
  4279  00120C  0100               	movlb	0	; () banked
  4280  00120E  0573               	decf	start_routine@v& (0+255),w,b
  4281  001210  B4D8               	btfsc	status,2,c
  4282  001212  0012               	return	
  4283  001214  D596               	goto	l3839
  4284  001216                     l4029:
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;main.c: 560: else
  4288                           ;main.c: 561: {
  4289                           ;main.c: 562: v = 1;
  4290  001216  0E01               	movlw	1
  4291  001218  0100               	movlb	0	; () banked
  4292  00121A  6F73               	movwf	start_routine@v& (0+255),b
  4293  00121C  0012               	return	
  4294  00121E                     __end_of_start_routine:
  4295                           	opt stack 0
  4296                           tblptru	equ	0xFF8
  4297                           tblptrh	equ	0xFF7
  4298                           tblptrl	equ	0xFF6
  4299                           tablat	equ	0xFF5
  4300                           prodh	equ	0xFF4
  4301                           prodl	equ	0xFF3
  4302                           intcon	equ	0xFF2
  4303                           postinc0	equ	0xFEE
  4304                           wreg	equ	0xFE8
  4305                           indf1	equ	0xFE7
  4306                           postdec1	equ	0xFE5
  4307                           plusw1	equ	0xFE3
  4308                           fsr1h	equ	0xFE2
  4309                           fsr1l	equ	0xFE1
  4310                           indf2	equ	0xFDF
  4311                           postinc2	equ	0xFDE
  4312                           plusw2	equ	0xFDB
  4313                           fsr2h	equ	0xFDA
  4314                           fsr2l	equ	0xFD9
  4315                           status	equ	0xFD8
  4316                           
  4317 ;; *************** function _menu_progress_bar *****************
  4318 ;; Defined at:
  4319 ;;		line 85 in file "menu.h"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;  load_time_ms    2   36[COMRAM] unsigned short 
  4322 ;; Auto vars:     Size  Location     Type
  4323 ;;  ii              2    4[BANK0 ] int 
  4324 ;;  i               2   12[BANK0 ] int 
  4325 ;;  i               2   10[BANK0 ] int 
  4326 ;;  i               2    8[BANK0 ] int 
  4327 ;;  i               2    6[BANK0 ] int 
  4328 ;;  d               4    0[BANK0 ] unsigned long 
  4329 ;; Return value:  Size  Location     Type
  4330 ;;                  1    wreg      void 
  4331 ;; Registers used:
  4332 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4333 ;; Tracked objects:
  4334 ;;		On entry : 0/0
  4335 ;;		On exit  : 0/0
  4336 ;;		Unchanged: 0/0
  4337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4338 ;;      Params:         2       0       0       0       0       0       0
  4339 ;;      Locals:         0      14       0       0       0       0       0
  4340 ;;      Temps:          4       0       0       0       0       0       0
  4341 ;;      Totals:         6      14       0       0       0       0       0
  4342 ;;Total ram usage:       20 bytes
  4343 ;; Hardware stack levels used:    1
  4344 ;; Hardware stack levels required when called:    5
  4345 ;; This function calls:
  4346 ;;		_Lcd_Clear
  4347 ;;		_Lcd_Set_Cursor
  4348 ;;		_Lcd_Write_Char
  4349 ;;		_Lcd_Write_String
  4350 ;;		___lwdiv
  4351 ;;		___wmul
  4352 ;; This function is called by:
  4353 ;;		_main
  4354 ;;		_start_routine
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           	psect	text2
  4359  00121E                     __ptext2:
  4360                           	opt stack 0
  4361  00121E                     _menu_progress_bar:
  4362                           	opt stack 24
  4363                           
  4364                           ;menu.h: 87: Lcd_Set_Cursor(2,1);
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;incstack = 0
  4368  00121E  0E01               	movlw	1
  4369  001220  6E1A               	movwf	Lcd_Set_Cursor@b,c
  4370  001222  0E02               	movlw	2
  4371  001224  ECE3  F00B         	call	_Lcd_Set_Cursor
  4372                           
  4373                           ;menu.h: 88: unsigned long d = (((load_time_ms/16)/20)*20);
  4374  001228  0E00               	movlw	0
  4375  00122A  6E1B               	movwf	___lwdiv@divisor+1,c
  4376  00122C  0E14               	movlw	20
  4377  00122E  6E1A               	movwf	___lwdiv@divisor,c
  4378  001230  C025  F027         	movff	menu_progress_bar@load_time_ms,??_menu_progress_bar
  4379  001234  C026  F028         	movff	menu_progress_bar@load_time_ms+1,??_menu_progress_bar+1
  4380  001238  0E04               	movlw	4
  4381  00123A  6E29               	movwf	(??_menu_progress_bar+2)& (0+255),c
  4382  00123C                     u3235:
  4383  00123C  90D8               	bcf	status,0,c
  4384  00123E  3228               	rrcf	??_menu_progress_bar+1,f,c
  4385  001240  3227               	rrcf	??_menu_progress_bar,f,c
  4386  001242  2E29               	decfsz	(??_menu_progress_bar+2)& (0+255),f,c
  4387  001244  D7FB               	goto	u3235
  4388  001246  C027  F018         	movff	??_menu_progress_bar,___lwdiv@dividend
  4389  00124A  C028  F019         	movff	??_menu_progress_bar+1,___lwdiv@dividend+1
  4390  00124E  ECBA  F00B         	call	___lwdiv	;wreg free
  4391  001252  C018  F01F         	movff	?___lwdiv,___wmul@multiplier
  4392  001256  C019  F020         	movff	?___lwdiv+1,___wmul@multiplier+1
  4393  00125A  0E00               	movlw	0
  4394  00125C  6E22               	movwf	___wmul@multiplicand+1,c
  4395  00125E  0E14               	movlw	20
  4396  001260  6E21               	movwf	___wmul@multiplicand,c
  4397  001262  ECB5  F00C         	call	___wmul	;wreg free
  4398  001266  C01F  F060         	movff	?___wmul,menu_progress_bar@d
  4399  00126A  C020  F061         	movff	?___wmul+1,menu_progress_bar@d+1
  4400  00126E  0100               	movlb	0	; () banked
  4401  001270  6B62               	clrf	(menu_progress_bar@d+2)& (0+255),b
  4402  001272  6B63               	clrf	(menu_progress_bar@d+3)& (0+255),b
  4403                           
  4404                           ; BSR set to: 0
  4405                           ;menu.h: 89: for (int i = 0; i < 16; i++)
  4406  001274  0E00               	movlw	0
  4407  001276  0100               	movlb	0	; () banked
  4408  001278  6F67               	movwf	(menu_progress_bar@i+1)& (0+255),b
  4409  00127A  0E00               	movlw	0
  4410  00127C  6F66               	movwf	menu_progress_bar@i& (0+255),b
  4411  00127E                     l3551:
  4412                           
  4413                           ; BSR set to: 0
  4414  00127E  0100               	movlb	0	; () banked
  4415  001280  BF67               	btfsc	(menu_progress_bar@i+1)& (0+255),7,b
  4416  001282  D008               	goto	l3555
  4417  001284  0100               	movlb	0	; () banked
  4418  001286  5167               	movf	(menu_progress_bar@i+1)& (0+255),w,b
  4419  001288  E137               	bnz	l3569
  4420  00128A  0E10               	movlw	16
  4421  00128C  0100               	movlb	0	; () banked
  4422  00128E  5D66               	subwf	menu_progress_bar@i& (0+255),w,b
  4423  001290  B0D8               	btfsc	status,0,c
  4424  001292  D032               	goto	l3569
  4425  001294                     l3555:
  4426                           
  4427                           ; BSR set to: 0
  4428                           ;menu.h: 90: {
  4429                           ;menu.h: 91: Lcd_Write_Char(0xFF);
  4430  001294  0EFF               	movlw	255
  4431  001296  EC53  F00C         	call	_Lcd_Write_Char
  4432                           
  4433                           ;menu.h: 92: for (int ii = 0; ii < d; ii+=20)
  4434  00129A  0E00               	movlw	0
  4435  00129C  0100               	movlb	0	; () banked
  4436  00129E  6F65               	movwf	(menu_progress_bar@ii+1)& (0+255),b
  4437  0012A0  0E00               	movlw	0
  4438  0012A2  6F64               	movwf	menu_progress_bar@ii& (0+255),b
  4439  0012A4  D00E               	goto	l3563
  4440  0012A6                     l3559:
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;menu.h: 93: _delay((unsigned long)((20)*(16000000/4000.0)));
  4444  0012A6  0E68               	movlw	104
  4445  0012A8  6E27               	movwf	??_menu_progress_bar& (0+255),c
  4446  0012AA  0EE4               	movlw	228
  4447  0012AC                     u4477:
  4448  0012AC  2EE8               	decfsz	wreg,f,c
  4449  0012AE  D7FE               	goto	u4477
  4450  0012B0  2E27               	decfsz	??_menu_progress_bar& (0+255),f,c
  4451  0012B2  D7FC               	goto	u4477
  4452  0012B4  F000 F000          	nop2	
  4453  0012B8  0E14               	movlw	20
  4454  0012BA  0100               	movlb	0	; () banked
  4455  0012BC  2764               	addwf	menu_progress_bar@ii& (0+255),f,b
  4456  0012BE  0E00               	movlw	0
  4457  0012C0  2365               	addwfc	(menu_progress_bar@ii+1)& (0+255),f,b
  4458  0012C2                     l3563:
  4459                           
  4460                           ; BSR set to: 0
  4461  0012C2  C064  F027         	movff	menu_progress_bar@ii,??_menu_progress_bar
  4462  0012C6  C065  F028         	movff	menu_progress_bar@ii+1,??_menu_progress_bar+1
  4463  0012CA  0E00               	movlw	0
  4464  0012CC  BE28               	btfsc	(??_menu_progress_bar+1)& (0+255),7,c
  4465  0012CE  0EFF               	movlw	255
  4466  0012D0  6E29               	movwf	(??_menu_progress_bar+2)& (0+255),c
  4467  0012D2  6E2A               	movwf	(??_menu_progress_bar+3)& (0+255),c
  4468  0012D4  0100               	movlb	0	; () banked
  4469  0012D6  5160               	movf	menu_progress_bar@d& (0+255),w,b
  4470  0012D8  5C27               	subwf	??_menu_progress_bar,w,c
  4471  0012DA  0100               	movlb	0	; () banked
  4472  0012DC  5161               	movf	(menu_progress_bar@d+1)& (0+255),w,b
  4473  0012DE  5828               	subwfb	??_menu_progress_bar+1,w,c
  4474  0012E0  0100               	movlb	0	; () banked
  4475  0012E2  5162               	movf	(menu_progress_bar@d+2)& (0+255),w,b
  4476  0012E4  5829               	subwfb	??_menu_progress_bar+2,w,c
  4477  0012E6  0100               	movlb	0	; () banked
  4478  0012E8  5163               	movf	(menu_progress_bar@d+3)& (0+255),w,b
  4479  0012EA  582A               	subwfb	??_menu_progress_bar+3,w,c
  4480  0012EC  A0D8               	btfss	status,0,c
  4481  0012EE  D7DB               	goto	l3559
  4482                           
  4483                           ; BSR set to: 0
  4484                           
  4485                           ; BSR set to: 0
  4486  0012F0  0100               	movlb	0	; () banked
  4487  0012F2  4B66               	infsnz	menu_progress_bar@i& (0+255),f,b
  4488  0012F4  2B67               	incf	(menu_progress_bar@i+1)& (0+255),f,b
  4489  0012F6  D7C3               	goto	l3551
  4490  0012F8                     l3569:
  4491                           
  4492                           ; BSR set to: 0
  4493                           ;menu.h: 94: }
  4494                           ;menu.h: 95: Lcd_Set_Cursor(2,1);
  4495  0012F8  0E01               	movlw	1
  4496  0012FA  6E1A               	movwf	Lcd_Set_Cursor@b,c
  4497  0012FC  0E02               	movlw	2
  4498  0012FE  ECE3  F00B         	call	_Lcd_Set_Cursor
  4499                           
  4500                           ;menu.h: 96: Lcd_Write_String("                ");
  4501  001302  0EC1               	movlw	low STR_2
  4502  001304  6E1C               	movwf	Lcd_Write_String@a,c
  4503  001306  0E7E               	movlw	high STR_2
  4504  001308  6E1D               	movwf	Lcd_Write_String@a+1,c
  4505  00130A  EC81  F00B         	call	_Lcd_Write_String	;wreg free
  4506                           
  4507                           ;menu.h: 97: for (int i = 0; i < 5; i++)
  4508  00130E  0E00               	movlw	0
  4509  001310  0100               	movlb	0	; () banked
  4510  001312  6F69               	movwf	(menu_progress_bar@i_723+1)& (0+255),b
  4511  001314  0E00               	movlw	0
  4512  001316  6F68               	movwf	menu_progress_bar@i_723& (0+255),b
  4513  001318                     l3575:
  4514                           
  4515                           ; BSR set to: 0
  4516  001318  0100               	movlb	0	; () banked
  4517  00131A  BF69               	btfsc	(menu_progress_bar@i_723+1)& (0+255),7,b
  4518  00131C  D008               	goto	l3579
  4519  00131E  0100               	movlb	0	; () banked
  4520  001320  5169               	movf	(menu_progress_bar@i_723+1)& (0+255),w,b
  4521  001322  E112               	bnz	l3583
  4522  001324  0E05               	movlw	5
  4523  001326  0100               	movlb	0	; () banked
  4524  001328  5D68               	subwf	menu_progress_bar@i_723& (0+255),w,b
  4525  00132A  B0D8               	btfsc	status,0,c
  4526  00132C  D00D               	goto	l3583
  4527  00132E                     l3579:
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;menu.h: 98: {
  4531                           ;menu.h: 99: _delay((unsigned long)((20)*(16000000/4000.0)));
  4532  00132E  0E68               	movlw	104
  4533  001330  6E27               	movwf	??_menu_progress_bar& (0+255),c
  4534  001332  0EE4               	movlw	228
  4535  001334                     u4487:
  4536  001334  2EE8               	decfsz	wreg,f,c
  4537  001336  D7FE               	goto	u4487
  4538  001338  2E27               	decfsz	??_menu_progress_bar& (0+255),f,c
  4539  00133A  D7FC               	goto	u4487
  4540  00133C  F000 F000          	nop2	
  4541  001340  0100               	movlb	0	; () banked
  4542  001342  4B68               	infsnz	menu_progress_bar@i_723& (0+255),f,b
  4543  001344  2B69               	incf	(menu_progress_bar@i_723+1)& (0+255),f,b
  4544  001346  D7E8               	goto	l3575
  4545  001348                     l3583:
  4546                           
  4547                           ; BSR set to: 0
  4548                           ;menu.h: 100: }
  4549                           ;menu.h: 101: Lcd_Set_Cursor(2,1);
  4550  001348  0E01               	movlw	1
  4551  00134A  6E1A               	movwf	Lcd_Set_Cursor@b,c
  4552  00134C  0E02               	movlw	2
  4553  00134E  ECE3  F00B         	call	_Lcd_Set_Cursor
  4554                           
  4555                           ;menu.h: 102: for (int i = 0; i < 16; i++)
  4556  001352  0E00               	movlw	0
  4557  001354  0100               	movlb	0	; () banked
  4558  001356  6F6B               	movwf	(menu_progress_bar@i_724+1)& (0+255),b
  4559  001358  0E00               	movlw	0
  4560  00135A  6F6A               	movwf	menu_progress_bar@i_724& (0+255),b
  4561  00135C                     l3587:
  4562                           
  4563                           ; BSR set to: 0
  4564  00135C  0100               	movlb	0	; () banked
  4565  00135E  BF6B               	btfsc	(menu_progress_bar@i_724+1)& (0+255),7,b
  4566  001360  D008               	goto	l3591
  4567  001362  0100               	movlb	0	; () banked
  4568  001364  516B               	movf	(menu_progress_bar@i_724+1)& (0+255),w,b
  4569  001366  E10C               	bnz	l3597
  4570  001368  0E10               	movlw	16
  4571  00136A  0100               	movlb	0	; () banked
  4572  00136C  5D6A               	subwf	menu_progress_bar@i_724& (0+255),w,b
  4573  00136E  B0D8               	btfsc	status,0,c
  4574  001370  D007               	goto	l3597
  4575  001372                     l3591:
  4576                           
  4577                           ; BSR set to: 0
  4578                           ;menu.h: 103: {
  4579                           ;menu.h: 104: Lcd_Write_Char(0xFF);
  4580  001372  0EFF               	movlw	255
  4581  001374  EC53  F00C         	call	_Lcd_Write_Char
  4582  001378  0100               	movlb	0	; () banked
  4583  00137A  4B6A               	infsnz	menu_progress_bar@i_724& (0+255),f,b
  4584  00137C  2B6B               	incf	(menu_progress_bar@i_724+1)& (0+255),f,b
  4585  00137E  D7EE               	goto	l3587
  4586  001380                     l3597:
  4587                           
  4588                           ; BSR set to: 0
  4589                           ;menu.h: 105: }
  4590                           ;menu.h: 106: for (int i = 0; i < 5; i++)
  4591  001380  0E00               	movlw	0
  4592  001382  0100               	movlb	0	; () banked
  4593  001384  6F6D               	movwf	(menu_progress_bar@i_725+1)& (0+255),b
  4594  001386  0E00               	movlw	0
  4595  001388  6F6C               	movwf	menu_progress_bar@i_725& (0+255),b
  4596  00138A                     l3599:
  4597                           
  4598                           ; BSR set to: 0
  4599  00138A  0100               	movlb	0	; () banked
  4600  00138C  BF6D               	btfsc	(menu_progress_bar@i_725+1)& (0+255),7,b
  4601  00138E  D008               	goto	l3603
  4602  001390  0100               	movlb	0	; () banked
  4603  001392  516D               	movf	(menu_progress_bar@i_725+1)& (0+255),w,b
  4604  001394  E112               	bnz	l3607
  4605  001396  0E05               	movlw	5
  4606  001398  0100               	movlb	0	; () banked
  4607  00139A  5D6C               	subwf	menu_progress_bar@i_725& (0+255),w,b
  4608  00139C  B0D8               	btfsc	status,0,c
  4609  00139E  D00D               	goto	l3607
  4610  0013A0                     l3603:
  4611                           
  4612                           ; BSR set to: 0
  4613                           ;menu.h: 107: {
  4614                           ;menu.h: 108: _delay((unsigned long)((20)*(16000000/4000.0)));
  4615  0013A0  0E68               	movlw	104
  4616  0013A2  6E27               	movwf	??_menu_progress_bar& (0+255),c
  4617  0013A4  0EE4               	movlw	228
  4618  0013A6                     u4497:
  4619  0013A6  2EE8               	decfsz	wreg,f,c
  4620  0013A8  D7FE               	goto	u4497
  4621  0013AA  2E27               	decfsz	??_menu_progress_bar& (0+255),f,c
  4622  0013AC  D7FC               	goto	u4497
  4623  0013AE  F000 F000          	nop2	
  4624  0013B2  0100               	movlb	0	; () banked
  4625  0013B4  4B6C               	infsnz	menu_progress_bar@i_725& (0+255),f,b
  4626  0013B6  2B6D               	incf	(menu_progress_bar@i_725+1)& (0+255),f,b
  4627  0013B8  D7E8               	goto	l3599
  4628  0013BA                     l3607:
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;menu.h: 109: }
  4632                           ;menu.h: 110: Lcd_Clear();
  4633  0013BA  ECDA  F00C         	call	_Lcd_Clear	;wreg free
  4634  0013BE  0012               	return		;funcret
  4635  0013C0                     __end_of_menu_progress_bar:
  4636                           	opt stack 0
  4637                           tblptru	equ	0xFF8
  4638                           tblptrh	equ	0xFF7
  4639                           tblptrl	equ	0xFF6
  4640                           tablat	equ	0xFF5
  4641                           prodh	equ	0xFF4
  4642                           prodl	equ	0xFF3
  4643                           intcon	equ	0xFF2
  4644                           postinc0	equ	0xFEE
  4645                           wreg	equ	0xFE8
  4646                           indf1	equ	0xFE7
  4647                           postdec1	equ	0xFE5
  4648                           plusw1	equ	0xFE3
  4649                           fsr1h	equ	0xFE2
  4650                           fsr1l	equ	0xFE1
  4651                           indf2	equ	0xFDF
  4652                           postinc2	equ	0xFDE
  4653                           plusw2	equ	0xFDB
  4654                           fsr2h	equ	0xFDA
  4655                           fsr2l	equ	0xFD9
  4656                           status	equ	0xFD8
  4657                           
  4658 ;; *************** function ___wmul *****************
  4659 ;; Defined at:
  4660 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  4661 ;; Parameters:    Size  Location     Type
  4662 ;;  multiplier      2   30[COMRAM] unsigned int 
  4663 ;;  multiplicand    2   32[COMRAM] unsigned int 
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;  product         2   34[COMRAM] unsigned int 
  4666 ;; Return value:  Size  Location     Type
  4667 ;;                  2   30[COMRAM] unsigned int 
  4668 ;; Registers used:
  4669 ;;		wreg, status,2, status,0, prodl, prodh
  4670 ;; Tracked objects:
  4671 ;;		On entry : 0/0
  4672 ;;		On exit  : 0/0
  4673 ;;		Unchanged: 0/0
  4674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4675 ;;      Params:         4       0       0       0       0       0       0
  4676 ;;      Locals:         2       0       0       0       0       0       0
  4677 ;;      Temps:          0       0       0       0       0       0       0
  4678 ;;      Totals:         6       0       0       0       0       0       0
  4679 ;;Total ram usage:        6 bytes
  4680 ;; Hardware stack levels used:    1
  4681 ;; Hardware stack levels required when called:    2
  4682 ;; This function calls:
  4683 ;;		Nothing
  4684 ;; This function is called by:
  4685 ;;		_menu_progress_bar
  4686 ;;		_menu_seconds_to_mmss
  4687 ;; This function uses a non-reentrant model
  4688 ;;
  4689                           
  4690                           	psect	text3
  4691  00196A                     __ptext3:
  4692                           	opt stack 0
  4693  00196A                     ___wmul:
  4694                           	opt stack 26
  4695                           
  4696                           ;incstack = 0
  4697  00196A  501F               	movf	___wmul@multiplier,w,c
  4698  00196C  0221               	mulwf	___wmul@multiplicand,c
  4699  00196E  CFF3 F023          	movff	prodl,___wmul@product
  4700  001972  CFF4 F024          	movff	prodh,___wmul@product+1
  4701  001976  501F               	movf	___wmul@multiplier,w,c
  4702  001978  0222               	mulwf	___wmul@multiplicand+1,c
  4703  00197A  50F3               	movf	prodl,w,c
  4704  00197C  2624               	addwf	___wmul@product+1,f,c
  4705  00197E  5020               	movf	___wmul@multiplier+1,w,c
  4706  001980  0221               	mulwf	___wmul@multiplicand,c
  4707  001982  50F3               	movf	prodl,w,c
  4708  001984  2624               	addwf	___wmul@product+1,f,c
  4709  001986  C023  F01F         	movff	___wmul@product,?___wmul
  4710  00198A  C024  F020         	movff	___wmul@product+1,?___wmul+1
  4711  00198E  0012               	return	
  4712  001990                     __end_of___wmul:
  4713                           	opt stack 0
  4714                           tblptru	equ	0xFF8
  4715                           tblptrh	equ	0xFF7
  4716                           tblptrl	equ	0xFF6
  4717                           tablat	equ	0xFF5
  4718                           prodh	equ	0xFF4
  4719                           prodl	equ	0xFF3
  4720                           intcon	equ	0xFF2
  4721                           postinc0	equ	0xFEE
  4722                           wreg	equ	0xFE8
  4723                           indf1	equ	0xFE7
  4724                           postdec1	equ	0xFE5
  4725                           plusw1	equ	0xFE3
  4726                           fsr1h	equ	0xFE2
  4727                           fsr1l	equ	0xFE1
  4728                           indf2	equ	0xFDF
  4729                           postinc2	equ	0xFDE
  4730                           plusw2	equ	0xFDB
  4731                           fsr2h	equ	0xFDA
  4732                           fsr2l	equ	0xFD9
  4733                           status	equ	0xFD8
  4734                           
  4735 ;; *************** function ___lwdiv *****************
  4736 ;; Defined at:
  4737 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  4738 ;; Parameters:    Size  Location     Type
  4739 ;;  dividend        2   23[COMRAM] unsigned int 
  4740 ;;  divisor         2   25[COMRAM] unsigned int 
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;  quotient        2   28[COMRAM] unsigned int 
  4743 ;;  counter         1   27[COMRAM] unsigned char 
  4744 ;; Return value:  Size  Location     Type
  4745 ;;                  2   23[COMRAM] unsigned int 
  4746 ;; Registers used:
  4747 ;;		wreg, status,2, status,0
  4748 ;; Tracked objects:
  4749 ;;		On entry : 0/0
  4750 ;;		On exit  : 0/0
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4753 ;;      Params:         4       0       0       0       0       0       0
  4754 ;;      Locals:         3       0       0       0       0       0       0
  4755 ;;      Temps:          0       0       0       0       0       0       0
  4756 ;;      Totals:         7       0       0       0       0       0       0
  4757 ;;Total ram usage:        7 bytes
  4758 ;; Hardware stack levels used:    1
  4759 ;; Hardware stack levels required when called:    2
  4760 ;; This function calls:
  4761 ;;		Nothing
  4762 ;; This function is called by:
  4763 ;;		_menu_progress_bar
  4764 ;;		_menu_seconds_to_mmss
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           	psect	text4
  4769  001774                     __ptext4:
  4770                           	opt stack 0
  4771  001774                     ___lwdiv:
  4772                           	opt stack 26
  4773                           
  4774                           ;incstack = 0
  4775  001774  0E00               	movlw	0
  4776  001776  6E1E               	movwf	___lwdiv@quotient+1,c
  4777  001778  0E00               	movlw	0
  4778  00177A  6E1D               	movwf	___lwdiv@quotient,c
  4779  00177C  501A               	movf	___lwdiv@divisor,w,c
  4780  00177E  101B               	iorwf	___lwdiv@divisor+1,w,c
  4781  001780  B4D8               	btfsc	status,2,c
  4782  001782  D01C               	goto	l752
  4783  001784  0E01               	movlw	1
  4784  001786  6E1C               	movwf	___lwdiv@counter,c
  4785  001788  D004               	goto	l3531
  4786  00178A                     l3529:
  4787  00178A  90D8               	bcf	status,0,c
  4788  00178C  361A               	rlcf	___lwdiv@divisor,f,c
  4789  00178E  361B               	rlcf	___lwdiv@divisor+1,f,c
  4790  001790  2A1C               	incf	___lwdiv@counter,f,c
  4791  001792                     l3531:
  4792  001792  AE1B               	btfss	___lwdiv@divisor+1,7,c
  4793  001794  D7FA               	goto	l3529
  4794  001796                     l3533:
  4795  001796  90D8               	bcf	status,0,c
  4796  001798  361D               	rlcf	___lwdiv@quotient,f,c
  4797  00179A  361E               	rlcf	___lwdiv@quotient+1,f,c
  4798  00179C  501A               	movf	___lwdiv@divisor,w,c
  4799  00179E  5C18               	subwf	___lwdiv@dividend,w,c
  4800  0017A0  501B               	movf	___lwdiv@divisor+1,w,c
  4801  0017A2  5819               	subwfb	___lwdiv@dividend+1,w,c
  4802  0017A4  A0D8               	btfss	status,0,c
  4803  0017A6  D005               	goto	l3541
  4804  0017A8  501A               	movf	___lwdiv@divisor,w,c
  4805  0017AA  5E18               	subwf	___lwdiv@dividend,f,c
  4806  0017AC  501B               	movf	___lwdiv@divisor+1,w,c
  4807  0017AE  5A19               	subwfb	___lwdiv@dividend+1,f,c
  4808  0017B0  801D               	bsf	___lwdiv@quotient,0,c
  4809  0017B2                     l3541:
  4810  0017B2  90D8               	bcf	status,0,c
  4811  0017B4  321B               	rrcf	___lwdiv@divisor+1,f,c
  4812  0017B6  321A               	rrcf	___lwdiv@divisor,f,c
  4813  0017B8  2E1C               	decfsz	___lwdiv@counter,f,c
  4814  0017BA  D7ED               	goto	l3533
  4815  0017BC                     l752:
  4816  0017BC  C01D  F018         	movff	___lwdiv@quotient,?___lwdiv
  4817  0017C0  C01E  F019         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4818  0017C4  0012               	return		;funcret
  4819  0017C6                     __end_of___lwdiv:
  4820                           	opt stack 0
  4821                           tblptru	equ	0xFF8
  4822                           tblptrh	equ	0xFF7
  4823                           tblptrl	equ	0xFF6
  4824                           tablat	equ	0xFF5
  4825                           prodh	equ	0xFF4
  4826                           prodl	equ	0xFF3
  4827                           intcon	equ	0xFF2
  4828                           postinc0	equ	0xFEE
  4829                           wreg	equ	0xFE8
  4830                           indf1	equ	0xFE7
  4831                           postdec1	equ	0xFE5
  4832                           plusw1	equ	0xFE3
  4833                           fsr1h	equ	0xFE2
  4834                           fsr1l	equ	0xFE1
  4835                           indf2	equ	0xFDF
  4836                           postinc2	equ	0xFDE
  4837                           plusw2	equ	0xFDB
  4838                           fsr2h	equ	0xFDA
  4839                           fsr2l	equ	0xFD9
  4840                           status	equ	0xFD8
  4841                           
  4842 ;; *************** function _Lcd_Write_String *****************
  4843 ;; Defined at:
  4844 ;;		line 111 in file "lcd.h"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;  a               2   27[COMRAM] PTR unsigned char 
  4847 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(2), 
  4848 ;;		 -> STR_23(5), STR_22(17), STR_21(17), STR_20(17), 
  4849 ;;		 -> STR_19(17), STR_18(17), STR_17(11), STR_16(6), 
  4850 ;;		 -> STR_15(5), STR_14(17), STR_13(17), STR_12(17), 
  4851 ;;		 -> STR_11(17), STR_10(17), STR_9(17), STR_8(17), 
  4852 ;;		 -> STR_7(17), STR_6(17), STR_5(17), STR_4(17), 
  4853 ;;		 -> STR_3(17), STR_2(17), STR_1(2), RAM(1535), 
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;  i               2   31[COMRAM] int 
  4856 ;; Return value:  Size  Location     Type
  4857 ;;                  1    wreg      void 
  4858 ;; Registers used:
  4859 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4860 ;; Tracked objects:
  4861 ;;		On entry : 0/0
  4862 ;;		On exit  : 0/0
  4863 ;;		Unchanged: 0/0
  4864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4865 ;;      Params:         2       0       0       0       0       0       0
  4866 ;;      Locals:         2       0       0       0       0       0       0
  4867 ;;      Temps:          2       0       0       0       0       0       0
  4868 ;;      Totals:         6       0       0       0       0       0       0
  4869 ;;Total ram usage:        6 bytes
  4870 ;; Hardware stack levels used:    1
  4871 ;; Hardware stack levels required when called:    4
  4872 ;; This function calls:
  4873 ;;		_Lcd_Write_Char
  4874 ;; This function is called by:
  4875 ;;		_menu_progress_bar
  4876 ;;		_main
  4877 ;;		_start_routine
  4878 ;;		_menu_animation_i2c
  4879 ;; This function uses a non-reentrant model
  4880 ;;
  4881                           
  4882                           	psect	text5
  4883  001702                     __ptext5:
  4884                           	opt stack 0
  4885  001702                     _Lcd_Write_String:
  4886                           	opt stack 24
  4887                           
  4888                           ;lcd.h: 113: int i;
  4889                           ;lcd.h: 114: for(i=0;a[i]!='\0';i++)
  4890                           
  4891                           ;incstack = 0
  4892  001702  0E00               	movlw	0
  4893  001704  6E21               	movwf	Lcd_Write_String@i+1,c
  4894  001706  0E00               	movlw	0
  4895  001708  6E20               	movwf	Lcd_Write_String@i,c
  4896  00170A  D01A               	goto	l3427
  4897  00170C                     l3423:
  4898                           
  4899                           ;lcd.h: 115: Lcd_Write_Char(a[i]);
  4900  00170C  5020               	movf	Lcd_Write_String@i,w,c
  4901  00170E  241C               	addwf	Lcd_Write_String@a,w,c
  4902  001710  6E1E               	movwf	??_Lcd_Write_String& (0+255),c
  4903  001712  5021               	movf	Lcd_Write_String@i+1,w,c
  4904  001714  201D               	addwfc	Lcd_Write_String@a+1,w,c
  4905  001716  6E1F               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  4906  001718  C01E  FFF6         	movff	??_Lcd_Write_String,tblptrl
  4907  00171C  C01F  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  4908  001720  6AF8               	clrf	tblptru,c
  4909  001722  0E05               	movlw	(high __ramtop+-1)
  4910  001724  64F7               	cpfsgt	tblptrh,c
  4911  001726  D003               	bra	u3057
  4912  001728  0008               	tblrd		*
  4913  00172A  50F5               	movf	tablat,w,c
  4914  00172C  D005               	bra	u3050
  4915  00172E                     u3057:
  4916  00172E  CFF6 FFE9          	movff	tblptrl,fsr0l
  4917  001732  CFF7 FFEA          	movff	tblptrh,fsr0h
  4918  001736  50EF               	movf	indf0,w,c
  4919  001738                     u3050:
  4920  001738  EC53  F00C         	call	_Lcd_Write_Char
  4921  00173C  4A20               	infsnz	Lcd_Write_String@i,f,c
  4922  00173E  2A21               	incf	Lcd_Write_String@i+1,f,c
  4923  001740                     l3427:
  4924  001740  5020               	movf	Lcd_Write_String@i,w,c
  4925  001742  241C               	addwf	Lcd_Write_String@a,w,c
  4926  001744  6E1E               	movwf	??_Lcd_Write_String& (0+255),c
  4927  001746  5021               	movf	Lcd_Write_String@i+1,w,c
  4928  001748  201D               	addwfc	Lcd_Write_String@a+1,w,c
  4929  00174A  6E1F               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  4930  00174C  C01E  FFF6         	movff	??_Lcd_Write_String,tblptrl
  4931  001750  C01F  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  4932  001754  6AF8               	clrf	tblptru,c
  4933  001756  0E05               	movlw	(high __ramtop+-1)
  4934  001758  64F7               	cpfsgt	tblptrh,c
  4935  00175A  D003               	bra	u3067
  4936  00175C  0008               	tblrd		*
  4937  00175E  50F5               	movf	tablat,w,c
  4938  001760  D005               	bra	u3060
  4939  001762                     u3067:
  4940  001762  CFF6 FFE9          	movff	tblptrl,fsr0l
  4941  001766  CFF7 FFEA          	movff	tblptrh,fsr0h
  4942  00176A  50EF               	movf	indf0,w,c
  4943  00176C                     u3060:
  4944  00176C  0900               	iorlw	0
  4945  00176E  B4D8               	btfsc	status,2,c
  4946  001770  0012               	return	
  4947  001772  D7CC               	goto	l3423
  4948  001774                     __end_of_Lcd_Write_String:
  4949                           	opt stack 0
  4950                           tblptru	equ	0xFF8
  4951                           tblptrh	equ	0xFF7
  4952                           tblptrl	equ	0xFF6
  4953                           tablat	equ	0xFF5
  4954                           prodh	equ	0xFF4
  4955                           prodl	equ	0xFF3
  4956                           intcon	equ	0xFF2
  4957                           indf0	equ	0xFEF
  4958                           postinc0	equ	0xFEE
  4959                           fsr0h	equ	0xFEA
  4960                           fsr0l	equ	0xFE9
  4961                           wreg	equ	0xFE8
  4962                           indf1	equ	0xFE7
  4963                           postdec1	equ	0xFE5
  4964                           plusw1	equ	0xFE3
  4965                           fsr1h	equ	0xFE2
  4966                           fsr1l	equ	0xFE1
  4967                           indf2	equ	0xFDF
  4968                           postinc2	equ	0xFDE
  4969                           plusw2	equ	0xFDB
  4970                           fsr2h	equ	0xFDA
  4971                           fsr2l	equ	0xFD9
  4972                           status	equ	0xFD8
  4973                           
  4974 ;; *************** function _Lcd_Write_Char *****************
  4975 ;; Defined at:
  4976 ;;		line 95 in file "lcd.h"
  4977 ;; Parameters:    Size  Location     Type
  4978 ;;  a               1    wreg     unsigned char 
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;  a               1   26[COMRAM] unsigned char 
  4981 ;;  y               1   25[COMRAM] unsigned char 
  4982 ;;  temp            1   24[COMRAM] unsigned char 
  4983 ;; Return value:  Size  Location     Type
  4984 ;;                  1    wreg      void 
  4985 ;; Registers used:
  4986 ;;		wreg, status,2, status,0, cstack
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4992 ;;      Params:         0       0       0       0       0       0       0
  4993 ;;      Locals:         3       0       0       0       0       0       0
  4994 ;;      Temps:          0       0       0       0       0       0       0
  4995 ;;      Totals:         3       0       0       0       0       0       0
  4996 ;;Total ram usage:        3 bytes
  4997 ;; Hardware stack levels used:    1
  4998 ;; Hardware stack levels required when called:    3
  4999 ;; This function calls:
  5000 ;;		_Lcd_Port
  5001 ;; This function is called by:
  5002 ;;		_Lcd_Write_String
  5003 ;;		_menu_progress_bar
  5004 ;;		_main
  5005 ;;		_start_routine
  5006 ;;		_menu_main
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010                           	psect	text6
  5011  0018A6                     __ptext6:
  5012                           	opt stack 0
  5013  0018A6                     _Lcd_Write_Char:
  5014                           	opt stack 24
  5015                           
  5016                           ;incstack = 0
  5017                           ;Lcd_Write_Char@a stored from wreg
  5018  0018A6  6E1B               	movwf	Lcd_Write_Char@a,c
  5019                           
  5020                           ;lcd.h: 97: char temp,y;
  5021                           ;lcd.h: 98: temp = a&0x0F;
  5022  0018A8  501B               	movf	Lcd_Write_Char@a,w,c
  5023  0018AA  0B0F               	andlw	15
  5024  0018AC  6E19               	movwf	Lcd_Write_Char@temp,c
  5025                           
  5026                           ;lcd.h: 99: y = a&0xF0;
  5027  0018AE  501B               	movf	Lcd_Write_Char@a,w,c
  5028  0018B0  0BF0               	andlw	240
  5029  0018B2  6E1A               	movwf	Lcd_Write_Char@y,c
  5030                           
  5031                           ;lcd.h: 100: PORTDbits.RD5 = 1;
  5032  0018B4  8A83               	bsf	3971,5,c	;volatile
  5033                           
  5034                           ;lcd.h: 101: Lcd_Port(y>>4);
  5035  0018B6  381A               	swapf	Lcd_Write_Char@y,w,c
  5036  0018B8  0B0F               	andlw	15
  5037  0018BA  EC8B  F00C         	call	_Lcd_Port
  5038                           
  5039                           ;lcd.h: 102: PORTDbits.RD4 = 1;
  5040  0018BE  8883               	bsf	3971,4,c	;volatile
  5041                           
  5042                           ;lcd.h: 103: _delay((unsigned long)((40)*(16000000/4000000.0)));
  5043  0018C0  0E35               	movlw	53
  5044  0018C2                     u4507:
  5045  0018C2  2EE8               	decfsz	wreg,f,c
  5046  0018C4  D7FE               	goto	u4507
  5047  0018C6  F000               	nop	
  5048                           
  5049                           ;lcd.h: 104: PORTDbits.RD4 = 0;
  5050  0018C8  9883               	bcf	3971,4,c	;volatile
  5051                           
  5052                           ;lcd.h: 105: Lcd_Port(temp);
  5053  0018CA  5019               	movf	Lcd_Write_Char@temp,w,c
  5054  0018CC  EC8B  F00C         	call	_Lcd_Port
  5055                           
  5056                           ;lcd.h: 106: PORTDbits.RD4 = 1;
  5057  0018D0  8883               	bsf	3971,4,c	;volatile
  5058                           
  5059                           ;lcd.h: 107: _delay((unsigned long)((40)*(16000000/4000000.0)));
  5060  0018D2  0E35               	movlw	53
  5061  0018D4                     u4517:
  5062  0018D4  2EE8               	decfsz	wreg,f,c
  5063  0018D6  D7FE               	goto	u4517
  5064  0018D8  F000               	nop	
  5065                           
  5066                           ;lcd.h: 108: PORTDbits.RD4 = 0;
  5067  0018DA  9883               	bcf	3971,4,c	;volatile
  5068  0018DC  0012               	return		;funcret
  5069  0018DE                     __end_of_Lcd_Write_Char:
  5070                           	opt stack 0
  5071                           tblptru	equ	0xFF8
  5072                           tblptrh	equ	0xFF7
  5073                           tblptrl	equ	0xFF6
  5074                           tablat	equ	0xFF5
  5075                           prodh	equ	0xFF4
  5076                           prodl	equ	0xFF3
  5077                           intcon	equ	0xFF2
  5078                           indf0	equ	0xFEF
  5079                           postinc0	equ	0xFEE
  5080                           fsr0h	equ	0xFEA
  5081                           fsr0l	equ	0xFE9
  5082                           wreg	equ	0xFE8
  5083                           indf1	equ	0xFE7
  5084                           postdec1	equ	0xFE5
  5085                           plusw1	equ	0xFE3
  5086                           fsr1h	equ	0xFE2
  5087                           fsr1l	equ	0xFE1
  5088                           indf2	equ	0xFDF
  5089                           postinc2	equ	0xFDE
  5090                           plusw2	equ	0xFDB
  5091                           fsr2h	equ	0xFDA
  5092                           fsr2l	equ	0xFD9
  5093                           status	equ	0xFD8
  5094                           
  5095 ;; *************** function _Lcd_Set_Cursor *****************
  5096 ;; Defined at:
  5097 ;;		line 55 in file "lcd.h"
  5098 ;; Parameters:    Size  Location     Type
  5099 ;;  a               1    wreg     unsigned char 
  5100 ;;  b               1   25[COMRAM] unsigned char 
  5101 ;; Auto vars:     Size  Location     Type
  5102 ;;  a               1   26[COMRAM] unsigned char 
  5103 ;;  temp            1   29[COMRAM] unsigned char 
  5104 ;;  y               1   28[COMRAM] unsigned char 
  5105 ;;  z               1   27[COMRAM] unsigned char 
  5106 ;; Return value:  Size  Location     Type
  5107 ;;                  1    wreg      void 
  5108 ;; Registers used:
  5109 ;;		wreg, status,2, status,0, cstack
  5110 ;; Tracked objects:
  5111 ;;		On entry : 0/0
  5112 ;;		On exit  : 0/0
  5113 ;;		Unchanged: 0/0
  5114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5115 ;;      Params:         1       0       0       0       0       0       0
  5116 ;;      Locals:         4       0       0       0       0       0       0
  5117 ;;      Temps:          0       0       0       0       0       0       0
  5118 ;;      Totals:         5       0       0       0       0       0       0
  5119 ;;Total ram usage:        5 bytes
  5120 ;; Hardware stack levels used:    1
  5121 ;; Hardware stack levels required when called:    4
  5122 ;; This function calls:
  5123 ;;		_Lcd_Cmd
  5124 ;; This function is called by:
  5125 ;;		_menu_progress_bar
  5126 ;;		_main
  5127 ;;		_start_routine
  5128 ;;		_menu_main
  5129 ;;		_menu_animation_i2c
  5130 ;; This function uses a non-reentrant model
  5131 ;;
  5132                           
  5133                           	psect	text7
  5134  0017C6                     __ptext7:
  5135                           	opt stack 0
  5136  0017C6                     _Lcd_Set_Cursor:
  5137                           	opt stack 24
  5138                           
  5139                           ;incstack = 0
  5140                           ;Lcd_Set_Cursor@a stored from wreg
  5141  0017C6  6E1B               	movwf	Lcd_Set_Cursor@a,c
  5142                           
  5143                           ;lcd.h: 57: char temp,z,y;
  5144                           ;lcd.h: 58: if(a == 1)
  5145  0017C8  041B               	decf	Lcd_Set_Cursor@a,w,c
  5146  0017CA  A4D8               	btfss	status,2,c
  5147  0017CC  D010               	goto	l3413
  5148                           
  5149                           ;lcd.h: 59: {
  5150                           ;lcd.h: 60: temp = 0x80 + b - 1;
  5151  0017CE  501A               	movf	Lcd_Set_Cursor@b,w,c
  5152  0017D0  0F7F               	addlw	127
  5153  0017D2  6E1E               	movwf	Lcd_Set_Cursor@temp,c
  5154                           
  5155                           ;lcd.h: 61: z = temp>>4;
  5156  0017D4  381E               	swapf	Lcd_Set_Cursor@temp,w,c
  5157  0017D6  0B0F               	andlw	15
  5158  0017D8  6E1C               	movwf	Lcd_Set_Cursor@z,c
  5159                           
  5160                           ;lcd.h: 62: y = temp & 0x0F;
  5161  0017DA  501E               	movf	Lcd_Set_Cursor@temp,w,c
  5162  0017DC  0B0F               	andlw	15
  5163  0017DE  6E1D               	movwf	Lcd_Set_Cursor@y,c
  5164                           
  5165                           ;lcd.h: 63: Lcd_Cmd(z);
  5166  0017E0  501C               	movf	Lcd_Set_Cursor@z,w,c
  5167  0017E2  ECEA  F00C         	call	_Lcd_Cmd
  5168                           
  5169                           ;lcd.h: 64: Lcd_Cmd(y);
  5170  0017E6  501D               	movf	Lcd_Set_Cursor@y,w,c
  5171  0017E8  ECEA  F00C         	call	_Lcd_Cmd
  5172                           
  5173                           ;lcd.h: 65: }
  5174  0017EC  0012               	return	
  5175  0017EE                     l3413:
  5176                           
  5177                           ;lcd.h: 66: else if(a == 2)
  5178  0017EE  0E02               	movlw	2
  5179  0017F0  181B               	xorwf	Lcd_Set_Cursor@a,w,c
  5180  0017F2  A4D8               	btfss	status,2,c
  5181  0017F4  0012               	return	
  5182                           
  5183                           ;lcd.h: 67: {
  5184                           ;lcd.h: 68: temp = 0xC0 + b - 1;
  5185  0017F6  501A               	movf	Lcd_Set_Cursor@b,w,c
  5186  0017F8  0FBF               	addlw	191
  5187  0017FA  6E1E               	movwf	Lcd_Set_Cursor@temp,c
  5188                           
  5189                           ;lcd.h: 69: z = temp>>4;
  5190  0017FC  381E               	swapf	Lcd_Set_Cursor@temp,w,c
  5191  0017FE  0B0F               	andlw	15
  5192  001800  6E1C               	movwf	Lcd_Set_Cursor@z,c
  5193                           
  5194                           ;lcd.h: 70: y = temp & 0x0F;
  5195  001802  501E               	movf	Lcd_Set_Cursor@temp,w,c
  5196  001804  0B0F               	andlw	15
  5197  001806  6E1D               	movwf	Lcd_Set_Cursor@y,c
  5198                           
  5199                           ;lcd.h: 71: Lcd_Cmd(z);
  5200  001808  501C               	movf	Lcd_Set_Cursor@z,w,c
  5201  00180A  ECEA  F00C         	call	_Lcd_Cmd
  5202                           
  5203                           ;lcd.h: 72: Lcd_Cmd(y);
  5204  00180E  501D               	movf	Lcd_Set_Cursor@y,w,c
  5205  001810  ECEA  F00C         	call	_Lcd_Cmd
  5206  001814  0012               	return	
  5207  001816                     __end_of_Lcd_Set_Cursor:
  5208                           	opt stack 0
  5209                           tblptru	equ	0xFF8
  5210                           tblptrh	equ	0xFF7
  5211                           tblptrl	equ	0xFF6
  5212                           tablat	equ	0xFF5
  5213                           prodh	equ	0xFF4
  5214                           prodl	equ	0xFF3
  5215                           intcon	equ	0xFF2
  5216                           indf0	equ	0xFEF
  5217                           postinc0	equ	0xFEE
  5218                           fsr0h	equ	0xFEA
  5219                           fsr0l	equ	0xFE9
  5220                           wreg	equ	0xFE8
  5221                           indf1	equ	0xFE7
  5222                           postdec1	equ	0xFE5
  5223                           plusw1	equ	0xFE3
  5224                           fsr1h	equ	0xFE2
  5225                           fsr1l	equ	0xFE1
  5226                           indf2	equ	0xFDF
  5227                           postinc2	equ	0xFDE
  5228                           plusw2	equ	0xFDB
  5229                           fsr2h	equ	0xFDA
  5230                           fsr2l	equ	0xFD9
  5231                           status	equ	0xFD8
  5232                           
  5233 ;; *************** function _Lcd_Clear *****************
  5234 ;; Defined at:
  5235 ;;		line 48 in file "lcd.h"
  5236 ;; Parameters:    Size  Location     Type
  5237 ;;		None
  5238 ;; Auto vars:     Size  Location     Type
  5239 ;;		None
  5240 ;; Return value:  Size  Location     Type
  5241 ;;                  1    wreg      void 
  5242 ;; Registers used:
  5243 ;;		wreg, status,2, cstack
  5244 ;; Tracked objects:
  5245 ;;		On entry : 0/0
  5246 ;;		On exit  : 0/0
  5247 ;;		Unchanged: 0/0
  5248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5249 ;;      Params:         0       0       0       0       0       0       0
  5250 ;;      Locals:         0       0       0       0       0       0       0
  5251 ;;      Temps:          1       0       0       0       0       0       0
  5252 ;;      Totals:         1       0       0       0       0       0       0
  5253 ;;Total ram usage:        1 bytes
  5254 ;; Hardware stack levels used:    1
  5255 ;; Hardware stack levels required when called:    4
  5256 ;; This function calls:
  5257 ;;		_Lcd_Cmd
  5258 ;; This function is called by:
  5259 ;;		_menu_progress_bar
  5260 ;;		_main
  5261 ;;		_start_routine
  5262 ;; This function uses a non-reentrant model
  5263 ;;
  5264                           
  5265                           	psect	text8
  5266  0019B4                     __ptext8:
  5267                           	opt stack 0
  5268  0019B4                     _Lcd_Clear:
  5269                           	opt stack 24
  5270                           
  5271                           ;lcd.h: 50: Lcd_Cmd(0);
  5272                           
  5273                           ;incstack = 0
  5274  0019B4  0E00               	movlw	0
  5275  0019B6  ECEA  F00C         	call	_Lcd_Cmd
  5276                           
  5277                           ;lcd.h: 51: Lcd_Cmd(1);
  5278  0019BA  0E01               	movlw	1
  5279  0019BC  ECEA  F00C         	call	_Lcd_Cmd
  5280                           
  5281                           ;lcd.h: 52: _delay((unsigned long)((5)*(16000000/4000.0)));
  5282  0019C0  0E1A               	movlw	26
  5283  0019C2  6E1A               	movwf	??_Lcd_Clear& (0+255),c
  5284  0019C4  0EF8               	movlw	248
  5285  0019C6                     u4527:
  5286  0019C6  2EE8               	decfsz	wreg,f,c
  5287  0019C8  D7FE               	goto	u4527
  5288  0019CA  2E1A               	decfsz	??_Lcd_Clear& (0+255),f,c
  5289  0019CC  D7FC               	goto	u4527
  5290  0019CE  F000 F000          	nop2	
  5291  0019D2  0012               	return		;funcret
  5292  0019D4                     __end_of_Lcd_Clear:
  5293                           	opt stack 0
  5294                           tblptru	equ	0xFF8
  5295                           tblptrh	equ	0xFF7
  5296                           tblptrl	equ	0xFF6
  5297                           tablat	equ	0xFF5
  5298                           prodh	equ	0xFF4
  5299                           prodl	equ	0xFF3
  5300                           intcon	equ	0xFF2
  5301                           indf0	equ	0xFEF
  5302                           postinc0	equ	0xFEE
  5303                           fsr0h	equ	0xFEA
  5304                           fsr0l	equ	0xFE9
  5305                           wreg	equ	0xFE8
  5306                           indf1	equ	0xFE7
  5307                           postdec1	equ	0xFE5
  5308                           plusw1	equ	0xFE3
  5309                           fsr1h	equ	0xFE2
  5310                           fsr1l	equ	0xFE1
  5311                           indf2	equ	0xFDF
  5312                           postinc2	equ	0xFDE
  5313                           plusw2	equ	0xFDB
  5314                           fsr2h	equ	0xFDA
  5315                           fsr2l	equ	0xFD9
  5316                           status	equ	0xFD8
  5317                           
  5318 ;; *************** function _latch_keypad *****************
  5319 ;; Defined at:
  5320 ;;		line 319 in file "main.c"
  5321 ;; Parameters:    Size  Location     Type
  5322 ;;  x               2   23[COMRAM] PTR unsigned char 
  5323 ;;		 -> start_routine@x(1), main@x(1), 
  5324 ;; Auto vars:     Size  Location     Type
  5325 ;;		None
  5326 ;; Return value:  Size  Location     Type
  5327 ;;                  1    wreg      void 
  5328 ;; Registers used:
  5329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5330 ;; Tracked objects:
  5331 ;;		On entry : 0/0
  5332 ;;		On exit  : 0/0
  5333 ;;		Unchanged: 0/0
  5334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5335 ;;      Params:         2       0       0       0       0       0       0
  5336 ;;      Locals:         0       0       0       0       0       0       0
  5337 ;;      Temps:          2       0       0       0       0       0       0
  5338 ;;      Totals:         4       0       0       0       0       0       0
  5339 ;;Total ram usage:        4 bytes
  5340 ;; Hardware stack levels used:    1
  5341 ;; Hardware stack levels required when called:    3
  5342 ;; This function calls:
  5343 ;;		_read_keypad
  5344 ;; This function is called by:
  5345 ;;		_main
  5346 ;;		_start_routine
  5347 ;; This function uses a non-reentrant model
  5348 ;;
  5349                           
  5350                           	psect	text9
  5351  0018DE                     __ptext9:
  5352                           	opt stack 0
  5353  0018DE                     _latch_keypad:
  5354                           	opt stack 26
  5355                           
  5356                           ;main.c: 321: while (*x == read_keypad())
  5357                           
  5358                           ;incstack = 0
  5359  0018DE  D009               	goto	l3637
  5360  0018E0                     l3635:
  5361                           
  5362                           ;main.c: 322: {
  5363                           ;main.c: 323: _delay((unsigned long)((20)*(16000000/4000.0)));
  5364  0018E0  0E68               	movlw	104
  5365  0018E2  6E1A               	movwf	??_latch_keypad& (0+255),c
  5366  0018E4  0EE4               	movlw	228
  5367  0018E6                     u4537:
  5368  0018E6  2EE8               	decfsz	wreg,f,c
  5369  0018E8  D7FE               	goto	u4537
  5370  0018EA  2E1A               	decfsz	??_latch_keypad& (0+255),f,c
  5371  0018EC  D7FC               	goto	u4537
  5372  0018EE  F000 F000          	nop2	
  5373  0018F2                     l3637:
  5374  0018F2  C018  FFD9         	movff	latch_keypad@x,fsr2l
  5375  0018F6  C019  FFDA         	movff	latch_keypad@x+1,fsr2h
  5376  0018FA  ECE0  F009         	call	_read_keypad	;wreg free
  5377  0018FE  6E1B               	movwf	(??_latch_keypad+1)& (0+255),c
  5378  001900  50DE               	movf	postinc2,w,c
  5379  001902  181B               	xorwf	??_latch_keypad+1,w,c
  5380  001904  B4D8               	btfsc	status,2,c
  5381  001906  D7EC               	goto	l3635
  5382                           
  5383                           ;main.c: 324: }
  5384                           ;main.c: 325: *x = '_';
  5385  001908  C018  FFD9         	movff	latch_keypad@x,fsr2l
  5386  00190C  C019  FFDA         	movff	latch_keypad@x+1,fsr2h
  5387  001910  0E5F               	movlw	95
  5388  001912  6EDF               	movwf	indf2,c
  5389  001914  0012               	return		;funcret
  5390  001916                     __end_of_latch_keypad:
  5391                           	opt stack 0
  5392                           tblptru	equ	0xFF8
  5393                           tblptrh	equ	0xFF7
  5394                           tblptrl	equ	0xFF6
  5395                           tablat	equ	0xFF5
  5396                           prodh	equ	0xFF4
  5397                           prodl	equ	0xFF3
  5398                           intcon	equ	0xFF2
  5399                           indf0	equ	0xFEF
  5400                           postinc0	equ	0xFEE
  5401                           fsr0h	equ	0xFEA
  5402                           fsr0l	equ	0xFE9
  5403                           wreg	equ	0xFE8
  5404                           indf1	equ	0xFE7
  5405                           postdec1	equ	0xFE5
  5406                           plusw1	equ	0xFE3
  5407                           fsr1h	equ	0xFE2
  5408                           fsr1l	equ	0xFE1
  5409                           indf2	equ	0xFDF
  5410                           postinc2	equ	0xFDE
  5411                           plusw2	equ	0xFDB
  5412                           fsr2h	equ	0xFDA
  5413                           fsr2l	equ	0xFD9
  5414                           status	equ	0xFD8
  5415                           
  5416 ;; *************** function _read_keypad *****************
  5417 ;; Defined at:
  5418 ;;		line 294 in file "main.c"
  5419 ;; Parameters:    Size  Location     Type
  5420 ;;		None
  5421 ;; Auto vars:     Size  Location     Type
  5422 ;;		None
  5423 ;; Return value:  Size  Location     Type
  5424 ;;                  1    wreg      unsigned char 
  5425 ;; Registers used:
  5426 ;;		wreg, status,2
  5427 ;; Tracked objects:
  5428 ;;		On entry : 0/0
  5429 ;;		On exit  : 0/0
  5430 ;;		Unchanged: 0/0
  5431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5432 ;;      Params:         0       0       0       0       0       0       0
  5433 ;;      Locals:         0       0       0       0       0       0       0
  5434 ;;      Temps:          0       0       0       0       0       0       0
  5435 ;;      Totals:         0       0       0       0       0       0       0
  5436 ;;Total ram usage:        0 bytes
  5437 ;; Hardware stack levels used:    1
  5438 ;; Hardware stack levels required when called:    2
  5439 ;; This function calls:
  5440 ;;		Nothing
  5441 ;; This function is called by:
  5442 ;;		_main
  5443 ;;		_latch_keypad
  5444 ;;		_start_routine
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448                           	psect	text10
  5449  0013C0                     __ptext10:
  5450                           	opt stack 0
  5451  0013C0                     _read_keypad:
  5452                           	opt stack 27
  5453                           
  5454                           ;main.c: 296: TRISB = 0b00011111;
  5455                           
  5456                           ;incstack = 0
  5457  0013C0  0E1F               	movlw	31
  5458  0013C2  6E93               	movwf	3987,c	;volatile
  5459                           
  5460                           ;main.c: 297: TRISC = 0b00011000;
  5461  0013C4  0E18               	movlw	24
  5462  0013C6  6E94               	movwf	3988,c	;volatile
  5463                           
  5464                           ;main.c: 298: TRISD = 0b00000000;
  5465  0013C8  0E00               	movlw	0
  5466  0013CA  6E95               	movwf	3989,c	;volatile
  5467                           
  5468                           ;main.c: 299: PORTD = 0b00000001;
  5469  0013CC  0E01               	movlw	1
  5470  0013CE  6E83               	movwf	3971,c	;volatile
  5471                           
  5472                           ;main.c: 301: if (PORTBbits.RB4) {PORTC = 0x00; return '*';}
  5473  0013D0  A881               	btfss	3969,4,c	;volatile
  5474  0013D2  D004               	goto	l263
  5475  0013D4  0E00               	movlw	0
  5476  0013D6  6E82               	movwf	3970,c	;volatile
  5477  0013D8  0E2A               	movlw	42
  5478  0013DA  0012               	return	
  5479  0013DC                     l263:
  5480                           
  5481                           ;main.c: 302: if (PORTBbits.RB1) {PORTC = 0x00; return '1';}
  5482  0013DC  A281               	btfss	3969,1,c	;volatile
  5483  0013DE  D004               	goto	l265
  5484  0013E0  0E00               	movlw	0
  5485  0013E2  6E82               	movwf	3970,c	;volatile
  5486  0013E4  0E31               	movlw	49
  5487  0013E6  0012               	return	
  5488  0013E8                     l265:
  5489                           
  5490                           ;main.c: 303: if (PORTBbits.RB2) {PORTC = 0x00; return '4';}
  5491  0013E8  A481               	btfss	3969,2,c	;volatile
  5492  0013EA  D004               	goto	l266
  5493  0013EC  0E00               	movlw	0
  5494  0013EE  6E82               	movwf	3970,c	;volatile
  5495  0013F0  0E34               	movlw	52
  5496  0013F2  0012               	return	
  5497  0013F4                     l266:
  5498                           
  5499                           ;main.c: 304: if (PORTBbits.RB3) {PORTC = 0x00; return '7';}
  5500  0013F4  A681               	btfss	3969,3,c	;volatile
  5501  0013F6  D004               	goto	l3457
  5502  0013F8  0E00               	movlw	0
  5503  0013FA  6E82               	movwf	3970,c	;volatile
  5504  0013FC  0E37               	movlw	55
  5505  0013FE  0012               	return	
  5506  001400                     l3457:
  5507                           
  5508                           ;main.c: 305: PORTD = 0b00000010;
  5509  001400  0E02               	movlw	2
  5510  001402  6E83               	movwf	3971,c	;volatile
  5511                           
  5512                           ;main.c: 307: if (PORTBbits.RB1) {PORTC = 0x00; return '2';}
  5513  001404  A281               	btfss	3969,1,c	;volatile
  5514  001406  D004               	goto	l268
  5515  001408  0E00               	movlw	0
  5516  00140A  6E82               	movwf	3970,c	;volatile
  5517  00140C  0E32               	movlw	50
  5518  00140E  0012               	return	
  5519  001410                     l268:
  5520                           
  5521                           ;main.c: 308: if (PORTBbits.RB2) {PORTC = 0x00; return '5';}
  5522  001410  A481               	btfss	3969,2,c	;volatile
  5523  001412  D004               	goto	l269
  5524  001414  0E00               	movlw	0
  5525  001416  6E82               	movwf	3970,c	;volatile
  5526  001418  0E35               	movlw	53
  5527  00141A  0012               	return	
  5528  00141C                     l269:
  5529                           
  5530                           ;main.c: 309: if (PORTBbits.RB3) {PORTC = 0x00; return '8';}
  5531  00141C  A681               	btfss	3969,3,c	;volatile
  5532  00141E  D004               	goto	l270
  5533  001420  0E00               	movlw	0
  5534  001422  6E82               	movwf	3970,c	;volatile
  5535  001424  0E38               	movlw	56
  5536  001426  0012               	return	
  5537  001428                     l270:
  5538                           
  5539                           ;main.c: 310: if (PORTBbits.RB4) {PORTC = 0x00; return '0';}
  5540  001428  A881               	btfss	3969,4,c	;volatile
  5541  00142A  D004               	goto	l3485
  5542  00142C  0E00               	movlw	0
  5543  00142E  6E82               	movwf	3970,c	;volatile
  5544  001430  0E30               	movlw	48
  5545  001432  0012               	return	
  5546  001434                     l3485:
  5547                           
  5548                           ;main.c: 311: PORTD = 0b00000100;
  5549  001434  0E04               	movlw	4
  5550  001436  6E83               	movwf	3971,c	;volatile
  5551                           
  5552                           ;main.c: 313: if (PORTBbits.RB1) {PORTC = 0x00; return '3';}
  5553  001438  A281               	btfss	3969,1,c	;volatile
  5554  00143A  D004               	goto	l272
  5555  00143C  0E00               	movlw	0
  5556  00143E  6E82               	movwf	3970,c	;volatile
  5557  001440  0E33               	movlw	51
  5558  001442  0012               	return	
  5559  001444                     l272:
  5560                           
  5561                           ;main.c: 314: if (PORTBbits.RB2) {PORTC = 0x00; return '6';}
  5562  001444  A481               	btfss	3969,2,c	;volatile
  5563  001446  D004               	goto	l273
  5564  001448  0E00               	movlw	0
  5565  00144A  6E82               	movwf	3970,c	;volatile
  5566  00144C  0E36               	movlw	54
  5567  00144E  0012               	return	
  5568  001450                     l273:
  5569                           
  5570                           ;main.c: 315: if (PORTBbits.RB3) {PORTC = 0x00; return '9';}
  5571  001450  A681               	btfss	3969,3,c	;volatile
  5572  001452  D004               	goto	l274
  5573  001454  0E00               	movlw	0
  5574  001456  6E82               	movwf	3970,c	;volatile
  5575  001458  0E39               	movlw	57
  5576  00145A  0012               	return	
  5577  00145C                     l274:
  5578                           
  5579                           ;main.c: 316: if (PORTBbits.RB4) {PORTC = 0x00; return '#';}
  5580  00145C  A881               	btfss	3969,4,c	;volatile
  5581  00145E  D004               	goto	l3513
  5582  001460  0E00               	movlw	0
  5583  001462  6E82               	movwf	3970,c	;volatile
  5584  001464  0E23               	movlw	35
  5585  001466  0012               	return	
  5586  001468                     l3513:
  5587                           
  5588                           ;main.c: 317: return '_';
  5589  001468  0E5F               	movlw	95
  5590  00146A  0012               	return	
  5591  00146C                     __end_of_read_keypad:
  5592                           	opt stack 0
  5593                           tblptru	equ	0xFF8
  5594                           tblptrh	equ	0xFF7
  5595                           tblptrl	equ	0xFF6
  5596                           tablat	equ	0xFF5
  5597                           prodh	equ	0xFF4
  5598                           prodl	equ	0xFF3
  5599                           intcon	equ	0xFF2
  5600                           indf0	equ	0xFEF
  5601                           postinc0	equ	0xFEE
  5602                           fsr0h	equ	0xFEA
  5603                           fsr0l	equ	0xFE9
  5604                           wreg	equ	0xFE8
  5605                           indf1	equ	0xFE7
  5606                           postdec1	equ	0xFE5
  5607                           plusw1	equ	0xFE3
  5608                           fsr1h	equ	0xFE2
  5609                           fsr1l	equ	0xFE1
  5610                           indf2	equ	0xFDF
  5611                           postinc2	equ	0xFDE
  5612                           plusw2	equ	0xFDB
  5613                           fsr2h	equ	0xFDA
  5614                           fsr2l	equ	0xFD9
  5615                           status	equ	0xFD8
  5616                           
  5617 ;; *************** function ___awdiv *****************
  5618 ;; Defined at:
  5619 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;  dividend        2   23[COMRAM] int 
  5622 ;;  divisor         2   25[COMRAM] int 
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;  quotient        2   29[COMRAM] int 
  5625 ;;  sign            1   28[COMRAM] unsigned char 
  5626 ;;  counter         1   27[COMRAM] unsigned char 
  5627 ;; Return value:  Size  Location     Type
  5628 ;;                  2   23[COMRAM] int 
  5629 ;; Registers used:
  5630 ;;		wreg, status,2, status,0
  5631 ;; Tracked objects:
  5632 ;;		On entry : 0/0
  5633 ;;		On exit  : 0/0
  5634 ;;		Unchanged: 0/0
  5635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5636 ;;      Params:         4       0       0       0       0       0       0
  5637 ;;      Locals:         4       0       0       0       0       0       0
  5638 ;;      Temps:          0       0       0       0       0       0       0
  5639 ;;      Totals:         8       0       0       0       0       0       0
  5640 ;;Total ram usage:        8 bytes
  5641 ;; Hardware stack levels used:    1
  5642 ;; Hardware stack levels required when called:    2
  5643 ;; This function calls:
  5644 ;;		Nothing
  5645 ;; This function is called by:
  5646 ;;		_main
  5647 ;;		_start_routine
  5648 ;; This function uses a non-reentrant model
  5649 ;;
  5650                           
  5651                           	psect	text11
  5652  001588                     __ptext11:
  5653                           	opt stack 0
  5654  001588                     ___awdiv:
  5655                           	opt stack 27
  5656                           
  5657                           ;incstack = 0
  5658  001588  0E00               	movlw	0
  5659  00158A  6E1D               	movwf	___awdiv@sign,c
  5660  00158C  AE1B               	btfss	___awdiv@divisor+1,7,c
  5661  00158E  D006               	goto	l3649
  5662  001590  6C1A               	negf	___awdiv@divisor,c
  5663  001592  1E1B               	comf	___awdiv@divisor+1,f,c
  5664  001594  B0D8               	btfsc	status,0,c
  5665  001596  2A1B               	incf	___awdiv@divisor+1,f,c
  5666  001598  0E01               	movlw	1
  5667  00159A  6E1D               	movwf	___awdiv@sign,c
  5668  00159C                     l3649:
  5669  00159C  AE19               	btfss	___awdiv@dividend+1,7,c
  5670  00159E  D006               	goto	l3655
  5671  0015A0  6C18               	negf	___awdiv@dividend,c
  5672  0015A2  1E19               	comf	___awdiv@dividend+1,f,c
  5673  0015A4  B0D8               	btfsc	status,0,c
  5674  0015A6  2A19               	incf	___awdiv@dividend+1,f,c
  5675  0015A8  0E01               	movlw	1
  5676  0015AA  1A1D               	xorwf	___awdiv@sign,f,c
  5677  0015AC                     l3655:
  5678  0015AC  0E00               	movlw	0
  5679  0015AE  6E1F               	movwf	___awdiv@quotient+1,c
  5680  0015B0  0E00               	movlw	0
  5681  0015B2  6E1E               	movwf	___awdiv@quotient,c
  5682  0015B4  501A               	movf	___awdiv@divisor,w,c
  5683  0015B6  101B               	iorwf	___awdiv@divisor+1,w,c
  5684  0015B8  B4D8               	btfsc	status,2,c
  5685  0015BA  D01C               	goto	l3677
  5686  0015BC  0E01               	movlw	1
  5687  0015BE  6E1C               	movwf	___awdiv@counter,c
  5688  0015C0  D004               	goto	l3663
  5689  0015C2                     l3661:
  5690  0015C2  90D8               	bcf	status,0,c
  5691  0015C4  361A               	rlcf	___awdiv@divisor,f,c
  5692  0015C6  361B               	rlcf	___awdiv@divisor+1,f,c
  5693  0015C8  2A1C               	incf	___awdiv@counter,f,c
  5694  0015CA                     l3663:
  5695  0015CA  AE1B               	btfss	___awdiv@divisor+1,7,c
  5696  0015CC  D7FA               	goto	l3661
  5697  0015CE                     l3665:
  5698  0015CE  90D8               	bcf	status,0,c
  5699  0015D0  361E               	rlcf	___awdiv@quotient,f,c
  5700  0015D2  361F               	rlcf	___awdiv@quotient+1,f,c
  5701  0015D4  501A               	movf	___awdiv@divisor,w,c
  5702  0015D6  5C18               	subwf	___awdiv@dividend,w,c
  5703  0015D8  501B               	movf	___awdiv@divisor+1,w,c
  5704  0015DA  5819               	subwfb	___awdiv@dividend+1,w,c
  5705  0015DC  A0D8               	btfss	status,0,c
  5706  0015DE  D005               	goto	l3673
  5707  0015E0  501A               	movf	___awdiv@divisor,w,c
  5708  0015E2  5E18               	subwf	___awdiv@dividend,f,c
  5709  0015E4  501B               	movf	___awdiv@divisor+1,w,c
  5710  0015E6  5A19               	subwfb	___awdiv@dividend+1,f,c
  5711  0015E8  801E               	bsf	___awdiv@quotient,0,c
  5712  0015EA                     l3673:
  5713  0015EA  90D8               	bcf	status,0,c
  5714  0015EC  321B               	rrcf	___awdiv@divisor+1,f,c
  5715  0015EE  321A               	rrcf	___awdiv@divisor,f,c
  5716  0015F0  2E1C               	decfsz	___awdiv@counter,f,c
  5717  0015F2  D7ED               	goto	l3665
  5718  0015F4                     l3677:
  5719  0015F4  501D               	movf	___awdiv@sign,w,c
  5720  0015F6  B4D8               	btfsc	status,2,c
  5721  0015F8  D004               	goto	l3681
  5722  0015FA  6C1E               	negf	___awdiv@quotient,c
  5723  0015FC  1E1F               	comf	___awdiv@quotient+1,f,c
  5724  0015FE  B0D8               	btfsc	status,0,c
  5725  001600  2A1F               	incf	___awdiv@quotient+1,f,c
  5726  001602                     l3681:
  5727  001602  C01E  F018         	movff	___awdiv@quotient,?___awdiv
  5728  001606  C01F  F019         	movff	___awdiv@quotient+1,?___awdiv+1
  5729  00160A  0012               	return	
  5730  00160C                     __end_of___awdiv:
  5731                           	opt stack 0
  5732                           tblptru	equ	0xFF8
  5733                           tblptrh	equ	0xFF7
  5734                           tblptrl	equ	0xFF6
  5735                           tablat	equ	0xFF5
  5736                           prodh	equ	0xFF4
  5737                           prodl	equ	0xFF3
  5738                           intcon	equ	0xFF2
  5739                           indf0	equ	0xFEF
  5740                           postinc0	equ	0xFEE
  5741                           fsr0h	equ	0xFEA
  5742                           fsr0l	equ	0xFE9
  5743                           wreg	equ	0xFE8
  5744                           indf1	equ	0xFE7
  5745                           postdec1	equ	0xFE5
  5746                           plusw1	equ	0xFE3
  5747                           fsr1h	equ	0xFE2
  5748                           fsr1l	equ	0xFE1
  5749                           indf2	equ	0xFDF
  5750                           postinc2	equ	0xFDE
  5751                           plusw2	equ	0xFDB
  5752                           fsr2h	equ	0xFDA
  5753                           fsr2l	equ	0xFD9
  5754                           status	equ	0xFD8
  5755                           
  5756 ;; *************** function _Eeprom_Write_Byte *****************
  5757 ;; Defined at:
  5758 ;;		line 43 in file "eeprom.h"
  5759 ;; Parameters:    Size  Location     Type
  5760 ;;  address         1    wreg     unsigned char 
  5761 ;;  data            1   23[COMRAM] unsigned char 
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;  address         1   24[COMRAM] unsigned char 
  5764 ;; Return value:  Size  Location     Type
  5765 ;;                  1    wreg      void 
  5766 ;; Registers used:
  5767 ;;		wreg, status,2
  5768 ;; Tracked objects:
  5769 ;;		On entry : 0/0
  5770 ;;		On exit  : 0/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5773 ;;      Params:         1       0       0       0       0       0       0
  5774 ;;      Locals:         1       0       0       0       0       0       0
  5775 ;;      Temps:          0       0       0       0       0       0       0
  5776 ;;      Totals:         2       0       0       0       0       0       0
  5777 ;;Total ram usage:        2 bytes
  5778 ;; Hardware stack levels used:    1
  5779 ;; Hardware stack levels required when called:    2
  5780 ;; This function calls:
  5781 ;;		Nothing
  5782 ;; This function is called by:
  5783 ;;		_start_routine
  5784 ;; This function uses a non-reentrant model
  5785 ;;
  5786                           
  5787                           	psect	text12
  5788  001990                     __ptext12:
  5789                           	opt stack 0
  5790  001990                     _Eeprom_Write_Byte:
  5791                           	opt stack 27
  5792                           
  5793                           ;incstack = 0
  5794                           ;Eeprom_Write_Byte@address stored from wreg
  5795  001990  6E19               	movwf	Eeprom_Write_Byte@address,c
  5796                           
  5797                           ;eeprom.h: 46: EEADR = (unsigned char)address;
  5798  001992  C019  FFA9         	movff	Eeprom_Write_Byte@address,4009	;volatile
  5799                           
  5800                           ;eeprom.h: 48: EEDATA = data;
  5801  001996  C018  FFA8         	movff	Eeprom_Write_Byte@data,4008	;volatile
  5802                           
  5803                           ;eeprom.h: 49: EECON1bits.EEPGD = 0;
  5804  00199A  9EA6               	bcf	4006,7,c	;volatile
  5805                           
  5806                           ;eeprom.h: 50: EECON1bits.CFGS = 0;
  5807  00199C  9CA6               	bcf	4006,6,c	;volatile
  5808                           
  5809                           ;eeprom.h: 51: EECON1bits.WREN = 1;
  5810  00199E  84A6               	bsf	4006,2,c	;volatile
  5811                           
  5812                           ;eeprom.h: 55: EECON2 = 0x55;
  5813  0019A0  0E55               	movlw	85
  5814  0019A2  6EA7               	movwf	4007,c	;volatile
  5815                           
  5816                           ;eeprom.h: 56: EECON2 = 0xAA;
  5817  0019A4  0EAA               	movlw	170
  5818  0019A6  6EA7               	movwf	4007,c	;volatile
  5819                           
  5820                           ;eeprom.h: 57: EECON1bits.WR = 1;
  5821  0019A8  82A6               	bsf	4006,1,c	;volatile
  5822  0019AA                     l155:
  5823  0019AA  A8A1               	btfss	4001,4,c	;volatile
  5824  0019AC  D7FE               	goto	l155
  5825                           
  5826                           ;eeprom.h: 63: }
  5827                           ;eeprom.h: 65: PIR2bits.EEIF = 0;
  5828  0019AE  98A1               	bcf	4001,4,c	;volatile
  5829                           
  5830                           ;eeprom.h: 66: EECON1bits.WREN = 0;
  5831  0019B0  94A6               	bcf	4006,2,c	;volatile
  5832  0019B2  0012               	return		;funcret
  5833  0019B4                     __end_of_Eeprom_Write_Byte:
  5834                           	opt stack 0
  5835                           tblptru	equ	0xFF8
  5836                           tblptrh	equ	0xFF7
  5837                           tblptrl	equ	0xFF6
  5838                           tablat	equ	0xFF5
  5839                           prodh	equ	0xFF4
  5840                           prodl	equ	0xFF3
  5841                           intcon	equ	0xFF2
  5842                           indf0	equ	0xFEF
  5843                           postinc0	equ	0xFEE
  5844                           fsr0h	equ	0xFEA
  5845                           fsr0l	equ	0xFE9
  5846                           wreg	equ	0xFE8
  5847                           indf1	equ	0xFE7
  5848                           postdec1	equ	0xFE5
  5849                           plusw1	equ	0xFE3
  5850                           fsr1h	equ	0xFE2
  5851                           fsr1l	equ	0xFE1
  5852                           indf2	equ	0xFDF
  5853                           postinc2	equ	0xFDE
  5854                           plusw2	equ	0xFDB
  5855                           fsr2h	equ	0xFDA
  5856                           fsr2l	equ	0xFD9
  5857                           status	equ	0xFD8
  5858                           
  5859 ;; *************** function _mcu_initialise *****************
  5860 ;; Defined at:
  5861 ;;		line 265 in file "main.c"
  5862 ;; Parameters:    Size  Location     Type
  5863 ;;		None
  5864 ;; Auto vars:     Size  Location     Type
  5865 ;;		None
  5866 ;; Return value:  Size  Location     Type
  5867 ;;                  1    wreg      void 
  5868 ;; Registers used:
  5869 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5870 ;; Tracked objects:
  5871 ;;		On entry : 0/0
  5872 ;;		On exit  : 0/0
  5873 ;;		Unchanged: 0/0
  5874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5875 ;;      Params:         0       0       0       0       0       0       0
  5876 ;;      Locals:         0       0       0       0       0       0       0
  5877 ;;      Temps:          0       0       0       0       0       0       0
  5878 ;;      Totals:         0       0       0       0       0       0       0
  5879 ;;Total ram usage:        0 bytes
  5880 ;; Hardware stack levels used:    1
  5881 ;; Hardware stack levels required when called:    3
  5882 ;; This function calls:
  5883 ;;		_Eeprom_Read_Byte
  5884 ;; This function is called by:
  5885 ;;		_main
  5886 ;; This function uses a non-reentrant model
  5887 ;;
  5888                           
  5889                           	psect	text13
  5890  001816                     __ptext13:
  5891                           	opt stack 0
  5892  001816                     _mcu_initialise:
  5893                           	opt stack 27
  5894                           
  5895                           ;main.c: 268: I2C_ADDR = Eeprom_Read_Byte(EEP_I2C_ADDR);
  5896                           
  5897                           ;incstack = 0
  5898  001816  0100               	movlb	0	; () banked
  5899  001818  51CC               	movf	_EEP_I2C_ADDR& (0+255),w,b
  5900  00181A  ECF6  F00C         	call	_Eeprom_Read_Byte
  5901  00181E  0100               	movlb	0	; () banked
  5902  001820  6FCE               	movwf	_I2C_ADDR& (0+255),b
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;main.c: 269: Machine_ID = I2C_ADDR - 0x0F;
  5906  001822  0100               	movlb	0	; () banked
  5907  001824  51CE               	movf	_I2C_ADDR& (0+255),w,b
  5908  001826  0FF1               	addlw	241
  5909  001828  0100               	movlb	0	; () banked
  5910  00182A  6FCF               	movwf	_Machine_ID& (0+255),b
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;main.c: 272: OSCCON = 0x60;
  5914  00182C  0E60               	movlw	96
  5915  00182E  6ED3               	movwf	4051,c	;volatile
  5916                           
  5917                           ; BSR set to: 0
  5918                           ;main.c: 273: OSCTUNEbits.PLLEN = 0;
  5919  001830  9C9B               	bcf	3995,6,c	;volatile
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;main.c: 275: TRISA = 0x00;
  5923  001832  0E00               	movlw	0
  5924  001834  6E92               	movwf	3986,c	;volatile
  5925                           
  5926                           ; BSR set to: 0
  5927                           ;main.c: 276: TRISB = 0x01;
  5928  001836  0E01               	movlw	1
  5929  001838  6E93               	movwf	3987,c	;volatile
  5930                           
  5931                           ; BSR set to: 0
  5932                           ;main.c: 277: TRISC = 0b00011000;
  5933  00183A  0E18               	movlw	24
  5934  00183C  6E94               	movwf	3988,c	;volatile
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;main.c: 278: TRISD = 0x00;
  5938  00183E  0E00               	movlw	0
  5939  001840  6E95               	movwf	3989,c	;volatile
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;main.c: 279: LATC = 0b00011000;
  5943  001842  0E18               	movlw	24
  5944  001844  6E8B               	movwf	3979,c	;volatile
  5945                           
  5946                           ; BSR set to: 0
  5947                           ;main.c: 281: SSPADD = I2C_ADDR * 2;
  5948  001846  0100               	movlb	0	; () banked
  5949  001848  51CE               	movf	_I2C_ADDR& (0+255),w,b
  5950  00184A  0D02               	mullw	2
  5951  00184C  CFF3 FFC8          	movff	prodl,4040	;volatile
  5952                           
  5953                           ; BSR set to: 0
  5954                           ;main.c: 282: SSPCON1 = 0x36;
  5955  001850  0E36               	movlw	54
  5956  001852  6EC6               	movwf	4038,c	;volatile
  5957                           
  5958                           ; BSR set to: 0
  5959                           ;main.c: 285: SSPSTAT = 0x00;
  5960  001854  0E00               	movlw	0
  5961  001856  6EC7               	movwf	4039,c	;volatile
  5962                           
  5963                           ; BSR set to: 0
  5964                           ;main.c: 286: SSPCON2 = 0x01;
  5965  001858  0E01               	movlw	1
  5966  00185A  6EC5               	movwf	4037,c	;volatile
  5967                           
  5968                           ; BSR set to: 0
  5969                           ;main.c: 288: PIR1bits.SSPIF = 0;
  5970  00185C  969E               	bcf	3998,3,c	;volatile
  5971                           
  5972                           ; BSR set to: 0
  5973                           ;main.c: 289: PIE1bits.SSPIE = 1;
  5974  00185E  869D               	bsf	3997,3,c	;volatile
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;main.c: 290: INTCONbits.GIE_GIEH = 1;
  5978  001860  8EF2               	bsf	intcon,7,c	;volatile
  5979                           
  5980                           ; BSR set to: 0
  5981                           ;main.c: 291: INTCONbits.PEIE_GIEL = 1;
  5982  001862  8CF2               	bsf	intcon,6,c	;volatile
  5983                           
  5984                           ; BSR set to: 0
  5985  001864  0012               	return		;funcret
  5986  001866                     __end_of_mcu_initialise:
  5987                           	opt stack 0
  5988                           tblptru	equ	0xFF8
  5989                           tblptrh	equ	0xFF7
  5990                           tblptrl	equ	0xFF6
  5991                           tablat	equ	0xFF5
  5992                           prodh	equ	0xFF4
  5993                           prodl	equ	0xFF3
  5994                           intcon	equ	0xFF2
  5995                           indf0	equ	0xFEF
  5996                           postinc0	equ	0xFEE
  5997                           fsr0h	equ	0xFEA
  5998                           fsr0l	equ	0xFE9
  5999                           wreg	equ	0xFE8
  6000                           indf1	equ	0xFE7
  6001                           postdec1	equ	0xFE5
  6002                           plusw1	equ	0xFE3
  6003                           fsr1h	equ	0xFE2
  6004                           fsr1l	equ	0xFE1
  6005                           indf2	equ	0xFDF
  6006                           postinc2	equ	0xFDE
  6007                           plusw2	equ	0xFDB
  6008                           fsr2h	equ	0xFDA
  6009                           fsr2l	equ	0xFD9
  6010                           status	equ	0xFD8
  6011                           
  6012 ;; *************** function _Eeprom_Read_Byte *****************
  6013 ;; Defined at:
  6014 ;;		line 20 in file "eeprom.h"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;  address         1    wreg     unsigned char 
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;  address         1   23[COMRAM] unsigned char 
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  1    wreg      unsigned char 
  6021 ;; Registers used:
  6022 ;;		wreg, status,2
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6028 ;;      Params:         0       0       0       0       0       0       0
  6029 ;;      Locals:         1       0       0       0       0       0       0
  6030 ;;      Temps:          0       0       0       0       0       0       0
  6031 ;;      Totals:         1       0       0       0       0       0       0
  6032 ;;Total ram usage:        1 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    2
  6035 ;; This function calls:
  6036 ;;		Nothing
  6037 ;; This function is called by:
  6038 ;;		_mcu_initialise
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           	psect	text14
  6043  0019EC                     __ptext14:
  6044                           	opt stack 0
  6045  0019EC                     _Eeprom_Read_Byte:
  6046                           	opt stack 27
  6047                           
  6048                           ; BSR set to: 0
  6049                           ;incstack = 0
  6050                           ;Eeprom_Read_Byte@address stored from wreg
  6051  0019EC  6E18               	movwf	Eeprom_Read_Byte@address,c
  6052                           
  6053                           ;eeprom.h: 24: EEADR = (unsigned char)address;
  6054  0019EE  C018  FFA9         	movff	Eeprom_Read_Byte@address,4009	;volatile
  6055                           
  6056                           ;eeprom.h: 26: EECON1bits.EEPGD = 0;
  6057  0019F2  9EA6               	bcf	4006,7,c	;volatile
  6058                           
  6059                           ;eeprom.h: 27: EECON1bits.CFGS = 0;
  6060  0019F4  9CA6               	bcf	4006,6,c	;volatile
  6061                           
  6062                           ;eeprom.h: 28: EECON1bits.RD = 1;
  6063  0019F6  80A6               	bsf	4006,0,c	;volatile
  6064  0019F8                     l149:
  6065  0019F8  B0A6               	btfsc	4006,0,c	;volatile
  6066  0019FA  D7FE               	goto	l149
  6067                           
  6068                           ;eeprom.h: 34: return EEDATA;
  6069  0019FC  50A8               	movf	4008,w,c	;volatile
  6070  0019FE  0012               	return		;funcret
  6071  001A00                     __end_of_Eeprom_Read_Byte:
  6072                           	opt stack 0
  6073                           tblptru	equ	0xFF8
  6074                           tblptrh	equ	0xFF7
  6075                           tblptrl	equ	0xFF6
  6076                           tablat	equ	0xFF5
  6077                           prodh	equ	0xFF4
  6078                           prodl	equ	0xFF3
  6079                           intcon	equ	0xFF2
  6080                           indf0	equ	0xFEF
  6081                           postinc0	equ	0xFEE
  6082                           fsr0h	equ	0xFEA
  6083                           fsr0l	equ	0xFE9
  6084                           wreg	equ	0xFE8
  6085                           indf1	equ	0xFE7
  6086                           postdec1	equ	0xFE5
  6087                           plusw1	equ	0xFE3
  6088                           fsr1h	equ	0xFE2
  6089                           fsr1l	equ	0xFE1
  6090                           indf2	equ	0xFDF
  6091                           postinc2	equ	0xFDE
  6092                           plusw2	equ	0xFDB
  6093                           fsr2h	equ	0xFDA
  6094                           fsr2l	equ	0xFD9
  6095                           status	equ	0xFD8
  6096                           
  6097 ;; *************** function _load_reg_map *****************
  6098 ;; Defined at:
  6099 ;;		line 328 in file "main.c"
  6100 ;; Parameters:    Size  Location     Type
  6101 ;;		None
  6102 ;; Auto vars:     Size  Location     Type
  6103 ;;  i               2   29[COMRAM] int 
  6104 ;;  i               2   27[COMRAM] int 
  6105 ;; Return value:  Size  Location     Type
  6106 ;;                  1    wreg      void 
  6107 ;; Registers used:
  6108 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6109 ;; Tracked objects:
  6110 ;;		On entry : 0/0
  6111 ;;		On exit  : 0/0
  6112 ;;		Unchanged: 0/0
  6113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6114 ;;      Params:         0       0       0       0       0       0       0
  6115 ;;      Locals:         4       0       0       0       0       0       0
  6116 ;;      Temps:          4       0       0       0       0       0       0
  6117 ;;      Totals:         8       0       0       0       0       0       0
  6118 ;;Total ram usage:        8 bytes
  6119 ;; Hardware stack levels used:    1
  6120 ;; Hardware stack levels required when called:    2
  6121 ;; This function calls:
  6122 ;;		Nothing
  6123 ;; This function is called by:
  6124 ;;		_main
  6125 ;; This function uses a non-reentrant model
  6126 ;;
  6127                           
  6128                           	psect	text15
  6129  00146C                     __ptext15:
  6130                           	opt stack 0
  6131  00146C                     _load_reg_map:
  6132                           	opt stack 28
  6133                           
  6134                           ;main.c: 336: for (int i = 0; i < 9; i++)
  6135                           
  6136                           ;incstack = 0
  6137  00146C  0E00               	movlw	0
  6138  00146E  6E1D               	movwf	load_reg_map@i+1,c
  6139  001470  0E00               	movlw	0
  6140  001472  6E1C               	movwf	load_reg_map@i,c
  6141  001474                     l4033:
  6142  001474  BE1D               	btfsc	load_reg_map@i+1,7,c
  6143  001476  D006               	goto	l4037
  6144  001478  501D               	movf	load_reg_map@i+1,w,c
  6145  00147A  E115               	bnz	l4043
  6146  00147C  0E09               	movlw	9
  6147  00147E  5C1C               	subwf	load_reg_map@i,w,c
  6148  001480  B0D8               	btfsc	status,0,c
  6149  001482  D011               	goto	l4043
  6150  001484                     l4037:
  6151                           
  6152                           ;main.c: 337: i2c_r_reg[i] = current_user[i];
  6153  001484  0EC3               	movlw	low _current_user
  6154  001486  241C               	addwf	load_reg_map@i,w,c
  6155  001488  6ED9               	movwf	fsr2l,c
  6156  00148A  0E00               	movlw	high _current_user
  6157  00148C  201D               	addwfc	load_reg_map@i+1,w,c
  6158  00148E  6EDA               	movwf	fsr2h,c
  6159  001490  0E00               	movlw	low _i2c_r_reg
  6160  001492  241C               	addwf	load_reg_map@i,w,c
  6161  001494  6EE1               	movwf	fsr1l,c
  6162  001496  0E01               	movlw	high _i2c_r_reg
  6163  001498  201D               	addwfc	load_reg_map@i+1,w,c
  6164  00149A  6EE2               	movwf	fsr1h,c
  6165  00149C  CFDF FFE7          	movff	indf2,indf1
  6166  0014A0  4A1C               	infsnz	load_reg_map@i,f,c
  6167  0014A2  2A1D               	incf	load_reg_map@i+1,f,c
  6168  0014A4  D7E7               	goto	l4033
  6169  0014A6                     l4043:
  6170                           
  6171                           ;main.c: 339: for (int i = 9; i < 18; i++)
  6172  0014A6  0E00               	movlw	0
  6173  0014A8  6E1F               	movwf	load_reg_map@i_840+1,c
  6174  0014AA  0E09               	movlw	9
  6175  0014AC  6E1E               	movwf	load_reg_map@i_840,c
  6176  0014AE                     l4045:
  6177  0014AE  BE1F               	btfsc	load_reg_map@i_840+1,7,c
  6178  0014B0  D006               	goto	l4049
  6179  0014B2  501F               	movf	load_reg_map@i_840+1,w,c
  6180  0014B4  E121               	bnz	l288
  6181  0014B6  0E12               	movlw	18
  6182  0014B8  5C1E               	subwf	load_reg_map@i_840,w,c
  6183  0014BA  B0D8               	btfsc	status,0,c
  6184  0014BC  0012               	return	
  6185  0014BE                     l4049:
  6186                           
  6187                           ;main.c: 340: i2c_r_reg[i] = current_pin[i - 9];
  6188  0014BE  0EF7               	movlw	247
  6189  0014C0  6E18               	movwf	??_load_reg_map& (0+255),c
  6190  0014C2  0EFF               	movlw	255
  6191  0014C4  6E19               	movwf	(??_load_reg_map+1)& (0+255),c
  6192  0014C6  C01E  F01A         	movff	load_reg_map@i_840,??_load_reg_map+2
  6193  0014CA  C01F  F01B         	movff	load_reg_map@i_840+1,??_load_reg_map+3
  6194  0014CE  5018               	movf	??_load_reg_map,w,c
  6195  0014D0  261A               	addwf	??_load_reg_map+2,f,c
  6196  0014D2  5019               	movf	??_load_reg_map+1,w,c
  6197  0014D4  221B               	addwfc	??_load_reg_map+3,f,c
  6198  0014D6  0EBA               	movlw	low _current_pin
  6199  0014D8  241A               	addwf	??_load_reg_map+2,w,c
  6200  0014DA  6ED9               	movwf	fsr2l,c
  6201  0014DC  0E00               	movlw	high _current_pin
  6202  0014DE  201B               	addwfc	??_load_reg_map+3,w,c
  6203  0014E0  6EDA               	movwf	fsr2h,c
  6204  0014E2  0E00               	movlw	low _i2c_r_reg
  6205  0014E4  241E               	addwf	load_reg_map@i_840,w,c
  6206  0014E6  6EE1               	movwf	fsr1l,c
  6207  0014E8  0E01               	movlw	high _i2c_r_reg
  6208  0014EA  201F               	addwfc	load_reg_map@i_840+1,w,c
  6209  0014EC  6EE2               	movwf	fsr1h,c
  6210  0014EE  CFDF FFE7          	movff	indf2,indf1
  6211  0014F2  4A1E               	infsnz	load_reg_map@i_840,f,c
  6212  0014F4  2A1F               	incf	load_reg_map@i_840+1,f,c
  6213  0014F6  D7DB               	goto	l4045
  6214  0014F8                     l288:
  6215  0014F8  0012               	return		;funcret
  6216  0014FA                     __end_of_load_reg_map:
  6217                           	opt stack 0
  6218                           tblptru	equ	0xFF8
  6219                           tblptrh	equ	0xFF7
  6220                           tblptrl	equ	0xFF6
  6221                           tablat	equ	0xFF5
  6222                           prodh	equ	0xFF4
  6223                           prodl	equ	0xFF3
  6224                           intcon	equ	0xFF2
  6225                           indf0	equ	0xFEF
  6226                           postinc0	equ	0xFEE
  6227                           fsr0h	equ	0xFEA
  6228                           fsr0l	equ	0xFE9
  6229                           wreg	equ	0xFE8
  6230                           indf1	equ	0xFE7
  6231                           postdec1	equ	0xFE5
  6232                           plusw1	equ	0xFE3
  6233                           fsr1h	equ	0xFE2
  6234                           fsr1l	equ	0xFE1
  6235                           indf2	equ	0xFDF
  6236                           postinc2	equ	0xFDE
  6237                           plusw2	equ	0xFDB
  6238                           fsr2h	equ	0xFDA
  6239                           fsr2l	equ	0xFD9
  6240                           status	equ	0xFD8
  6241                           
  6242 ;; *************** function _Lcd_Init *****************
  6243 ;; Defined at:
  6244 ;;		line 76 in file "lcd.h"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;		None
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;		None
  6249 ;; Return value:  Size  Location     Type
  6250 ;;                  1    wreg      void 
  6251 ;; Registers used:
  6252 ;;		wreg, status,2, cstack
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6258 ;;      Params:         0       0       0       0       0       0       0
  6259 ;;      Locals:         0       0       0       0       0       0       0
  6260 ;;      Temps:          1       0       0       0       0       0       0
  6261 ;;      Totals:         1       0       0       0       0       0       0
  6262 ;;Total ram usage:        1 bytes
  6263 ;; Hardware stack levels used:    1
  6264 ;; Hardware stack levels required when called:    4
  6265 ;; This function calls:
  6266 ;;		_Lcd_Cmd
  6267 ;;		_Lcd_Port
  6268 ;; This function is called by:
  6269 ;;		_main
  6270 ;; This function uses a non-reentrant model
  6271 ;;
  6272                           
  6273                           	psect	text16
  6274  00168A                     __ptext16:
  6275                           	opt stack 0
  6276  00168A                     _Lcd_Init:
  6277                           	opt stack 26
  6278                           
  6279                           ;lcd.h: 78: Lcd_Port(0x00);
  6280                           
  6281                           ;incstack = 0
  6282  00168A  0E00               	movlw	0
  6283  00168C  EC8B  F00C         	call	_Lcd_Port
  6284                           
  6285                           ;lcd.h: 79: _delay((unsigned long)((20)*(16000000/4000.0)));
  6286  001690  0E68               	movlw	104
  6287  001692  6E1A               	movwf	??_Lcd_Init& (0+255),c
  6288  001694  0EE4               	movlw	228
  6289  001696                     u4547:
  6290  001696  2EE8               	decfsz	wreg,f,c
  6291  001698  D7FE               	goto	u4547
  6292  00169A  2E1A               	decfsz	??_Lcd_Init& (0+255),f,c
  6293  00169C  D7FC               	goto	u4547
  6294  00169E  F000 F000          	nop2	
  6295                           
  6296                           ;lcd.h: 80: Lcd_Cmd(0x03);
  6297  0016A2  0E03               	movlw	3
  6298  0016A4  ECEA  F00C         	call	_Lcd_Cmd
  6299                           
  6300                           ;lcd.h: 81: _delay((unsigned long)((5)*(16000000/4000.0)));
  6301  0016A8  0E1A               	movlw	26
  6302  0016AA  6E1A               	movwf	??_Lcd_Init& (0+255),c
  6303  0016AC  0EF8               	movlw	248
  6304  0016AE                     u4557:
  6305  0016AE  2EE8               	decfsz	wreg,f,c
  6306  0016B0  D7FE               	goto	u4557
  6307  0016B2  2E1A               	decfsz	??_Lcd_Init& (0+255),f,c
  6308  0016B4  D7FC               	goto	u4557
  6309  0016B6  F000 F000          	nop2	
  6310                           
  6311                           ;lcd.h: 82: Lcd_Cmd(0x03);
  6312  0016BA  0E03               	movlw	3
  6313  0016BC  ECEA  F00C         	call	_Lcd_Cmd
  6314                           
  6315                           ;lcd.h: 83: _delay((unsigned long)((11)*(16000000/4000.0)));
  6316  0016C0  0E3A               	movlw	58
  6317  0016C2  6E1A               	movwf	??_Lcd_Init& (0+255),c
  6318  0016C4  0E23               	movlw	35
  6319  0016C6                     u4567:
  6320  0016C6  2EE8               	decfsz	wreg,f,c
  6321  0016C8  D7FE               	goto	u4567
  6322  0016CA  2E1A               	decfsz	??_Lcd_Init& (0+255),f,c
  6323  0016CC  D7FC               	goto	u4567
  6324  0016CE  F000               	nop	
  6325                           
  6326                           ;lcd.h: 84: Lcd_Cmd(0x03);
  6327  0016D0  0E03               	movlw	3
  6328  0016D2  ECEA  F00C         	call	_Lcd_Cmd
  6329                           
  6330                           ;lcd.h: 86: Lcd_Cmd(0x02);
  6331  0016D6  0E02               	movlw	2
  6332  0016D8  ECEA  F00C         	call	_Lcd_Cmd
  6333                           
  6334                           ;lcd.h: 87: Lcd_Cmd(0x02);
  6335  0016DC  0E02               	movlw	2
  6336  0016DE  ECEA  F00C         	call	_Lcd_Cmd
  6337                           
  6338                           ;lcd.h: 88: Lcd_Cmd(0x08);
  6339  0016E2  0E08               	movlw	8
  6340  0016E4  ECEA  F00C         	call	_Lcd_Cmd
  6341                           
  6342                           ;lcd.h: 89: Lcd_Cmd(0x00);
  6343  0016E8  0E00               	movlw	0
  6344  0016EA  ECEA  F00C         	call	_Lcd_Cmd
  6345                           
  6346                           ;lcd.h: 90: Lcd_Cmd(0x0C);
  6347  0016EE  0E0C               	movlw	12
  6348  0016F0  ECEA  F00C         	call	_Lcd_Cmd
  6349                           
  6350                           ;lcd.h: 91: Lcd_Cmd(0x00);
  6351  0016F4  0E00               	movlw	0
  6352  0016F6  ECEA  F00C         	call	_Lcd_Cmd
  6353                           
  6354                           ;lcd.h: 92: Lcd_Cmd(0x06);
  6355  0016FA  0E06               	movlw	6
  6356  0016FC  ECEA  F00C         	call	_Lcd_Cmd
  6357  001700  0012               	return		;funcret
  6358  001702                     __end_of_Lcd_Init:
  6359                           	opt stack 0
  6360                           tblptru	equ	0xFF8
  6361                           tblptrh	equ	0xFF7
  6362                           tblptrl	equ	0xFF6
  6363                           tablat	equ	0xFF5
  6364                           prodh	equ	0xFF4
  6365                           prodl	equ	0xFF3
  6366                           intcon	equ	0xFF2
  6367                           indf0	equ	0xFEF
  6368                           postinc0	equ	0xFEE
  6369                           fsr0h	equ	0xFEA
  6370                           fsr0l	equ	0xFE9
  6371                           wreg	equ	0xFE8
  6372                           indf1	equ	0xFE7
  6373                           postdec1	equ	0xFE5
  6374                           plusw1	equ	0xFE3
  6375                           fsr1h	equ	0xFE2
  6376                           fsr1l	equ	0xFE1
  6377                           indf2	equ	0xFDF
  6378                           postinc2	equ	0xFDE
  6379                           plusw2	equ	0xFDB
  6380                           fsr2h	equ	0xFDA
  6381                           fsr2l	equ	0xFD9
  6382                           status	equ	0xFD8
  6383                           
  6384 ;; *************** function _Lcd_Cmd *****************
  6385 ;; Defined at:
  6386 ;;		line 38 in file "lcd.h"
  6387 ;; Parameters:    Size  Location     Type
  6388 ;;  a               1    wreg     unsigned char 
  6389 ;; Auto vars:     Size  Location     Type
  6390 ;;  a               1   24[COMRAM] unsigned char 
  6391 ;; Return value:  Size  Location     Type
  6392 ;;                  1    wreg      void 
  6393 ;; Registers used:
  6394 ;;		wreg, status,2, cstack
  6395 ;; Tracked objects:
  6396 ;;		On entry : 0/0
  6397 ;;		On exit  : 0/0
  6398 ;;		Unchanged: 0/0
  6399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6400 ;;      Params:         0       0       0       0       0       0       0
  6401 ;;      Locals:         1       0       0       0       0       0       0
  6402 ;;      Temps:          0       0       0       0       0       0       0
  6403 ;;      Totals:         1       0       0       0       0       0       0
  6404 ;;Total ram usage:        1 bytes
  6405 ;; Hardware stack levels used:    1
  6406 ;; Hardware stack levels required when called:    3
  6407 ;; This function calls:
  6408 ;;		_Lcd_Port
  6409 ;; This function is called by:
  6410 ;;		_Lcd_Clear
  6411 ;;		_Lcd_Set_Cursor
  6412 ;;		_Lcd_Init
  6413 ;;		_Lcd_Shift_Right
  6414 ;;		_Lcd_Shift_Left
  6415 ;; This function uses a non-reentrant model
  6416 ;;
  6417                           
  6418                           	psect	text17
  6419  0019D4                     __ptext17:
  6420                           	opt stack 0
  6421  0019D4                     _Lcd_Cmd:
  6422                           	opt stack 24
  6423                           
  6424                           ;incstack = 0
  6425                           ;Lcd_Cmd@a stored from wreg
  6426  0019D4  6E19               	movwf	Lcd_Cmd@a,c
  6427                           
  6428                           ;lcd.h: 40: PORTDbits.RD5 = 0;
  6429  0019D6  9A83               	bcf	3971,5,c	;volatile
  6430                           
  6431                           ;lcd.h: 41: Lcd_Port(a);
  6432  0019D8  5019               	movf	Lcd_Cmd@a,w,c
  6433  0019DA  EC8B  F00C         	call	_Lcd_Port
  6434                           
  6435                           ;lcd.h: 42: PORTDbits.RD4 = 1;
  6436  0019DE  8883               	bsf	3971,4,c	;volatile
  6437                           
  6438                           ;lcd.h: 44: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6439  0019E0  0EC8               	movlw	200
  6440  0019E2                     u4577:
  6441  0019E2  F000               	nop	
  6442  0019E4  2EE8               	decfsz	wreg,f,c
  6443  0019E6  D7FD               	goto	u4577
  6444                           
  6445                           ;lcd.h: 45: PORTDbits.RD4 = 0;
  6446  0019E8  9883               	bcf	3971,4,c	;volatile
  6447  0019EA  0012               	return		;funcret
  6448  0019EC                     __end_of_Lcd_Cmd:
  6449                           	opt stack 0
  6450                           tblptru	equ	0xFF8
  6451                           tblptrh	equ	0xFF7
  6452                           tblptrl	equ	0xFF6
  6453                           tablat	equ	0xFF5
  6454                           prodh	equ	0xFF4
  6455                           prodl	equ	0xFF3
  6456                           intcon	equ	0xFF2
  6457                           indf0	equ	0xFEF
  6458                           postinc0	equ	0xFEE
  6459                           fsr0h	equ	0xFEA
  6460                           fsr0l	equ	0xFE9
  6461                           wreg	equ	0xFE8
  6462                           indf1	equ	0xFE7
  6463                           postdec1	equ	0xFE5
  6464                           plusw1	equ	0xFE3
  6465                           fsr1h	equ	0xFE2
  6466                           fsr1l	equ	0xFE1
  6467                           indf2	equ	0xFDF
  6468                           postinc2	equ	0xFDE
  6469                           plusw2	equ	0xFDB
  6470                           fsr2h	equ	0xFDA
  6471                           fsr2l	equ	0xFD9
  6472                           status	equ	0xFD8
  6473                           
  6474 ;; *************** function _Lcd_Port *****************
  6475 ;; Defined at:
  6476 ;;		line 16 in file "lcd.h"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;  a               1    wreg     unsigned char 
  6479 ;; Auto vars:     Size  Location     Type
  6480 ;;  a               1   23[COMRAM] unsigned char 
  6481 ;; Return value:  Size  Location     Type
  6482 ;;                  1    wreg      void 
  6483 ;; Registers used:
  6484 ;;		wreg
  6485 ;; Tracked objects:
  6486 ;;		On entry : 0/0
  6487 ;;		On exit  : 0/0
  6488 ;;		Unchanged: 0/0
  6489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6490 ;;      Params:         0       0       0       0       0       0       0
  6491 ;;      Locals:         1       0       0       0       0       0       0
  6492 ;;      Temps:          0       0       0       0       0       0       0
  6493 ;;      Totals:         1       0       0       0       0       0       0
  6494 ;;Total ram usage:        1 bytes
  6495 ;; Hardware stack levels used:    1
  6496 ;; Hardware stack levels required when called:    2
  6497 ;; This function calls:
  6498 ;;		Nothing
  6499 ;; This function is called by:
  6500 ;;		_Lcd_Cmd
  6501 ;;		_Lcd_Init
  6502 ;;		_Lcd_Write_Char
  6503 ;; This function uses a non-reentrant model
  6504 ;;
  6505                           
  6506                           	psect	text18
  6507  001916                     __ptext18:
  6508                           	opt stack 0
  6509  001916                     _Lcd_Port:
  6510                           	opt stack 24
  6511                           
  6512                           ;incstack = 0
  6513                           ;Lcd_Port@a stored from wreg
  6514  001916  6E18               	movwf	Lcd_Port@a,c
  6515                           
  6516                           ;lcd.h: 18: if(a & 1)
  6517  001918  A018               	btfss	Lcd_Port@a,0,c
  6518  00191A  D002               	goto	l71
  6519                           
  6520                           ;lcd.h: 19: PORTDbits.RD0 = 1;
  6521  00191C  8083               	bsf	3971,0,c	;volatile
  6522  00191E  D001               	goto	l3359
  6523  001920                     l71:
  6524                           
  6525                           ;lcd.h: 20: else
  6526                           ;lcd.h: 21: PORTDbits.RD0 = 0;
  6527  001920  9083               	bcf	3971,0,c	;volatile
  6528  001922                     l3359:
  6529                           
  6530                           ;lcd.h: 23: if(a & 2)
  6531  001922  A218               	btfss	Lcd_Port@a,1,c
  6532  001924  D002               	goto	l73
  6533                           
  6534                           ;lcd.h: 24: PORTDbits.RD1 = 1;
  6535  001926  8283               	bsf	3971,1,c	;volatile
  6536  001928  D001               	goto	l3363
  6537  00192A                     l73:
  6538                           
  6539                           ;lcd.h: 25: else
  6540                           ;lcd.h: 26: PORTDbits.RD1 = 0;
  6541  00192A  9283               	bcf	3971,1,c	;volatile
  6542  00192C                     l3363:
  6543                           
  6544                           ;lcd.h: 28: if(a & 4)
  6545  00192C  A418               	btfss	Lcd_Port@a,2,c
  6546  00192E  D002               	goto	l75
  6547                           
  6548                           ;lcd.h: 29: PORTDbits.RD2 = 1;
  6549  001930  8483               	bsf	3971,2,c	;volatile
  6550  001932  D001               	goto	l3367
  6551  001934                     l75:
  6552                           
  6553                           ;lcd.h: 30: else
  6554                           ;lcd.h: 31: PORTDbits.RD2 = 0;
  6555  001934  9483               	bcf	3971,2,c	;volatile
  6556  001936                     l3367:
  6557                           
  6558                           ;lcd.h: 33: if(a & 8)
  6559  001936  A618               	btfss	Lcd_Port@a,3,c
  6560  001938  D002               	goto	l77
  6561                           
  6562                           ;lcd.h: 34: PORTDbits.RD3 = 1;
  6563  00193A  8683               	bsf	3971,3,c	;volatile
  6564  00193C  0012               	return	
  6565  00193E                     l77:
  6566                           
  6567                           ;lcd.h: 35: else
  6568                           ;lcd.h: 36: PORTDbits.RD3 = 0;
  6569  00193E  9683               	bcf	3971,3,c	;volatile
  6570  001940  0012               	return	
  6571  001942                     __end_of_Lcd_Port:
  6572                           	opt stack 0
  6573                           tblptru	equ	0xFF8
  6574                           tblptrh	equ	0xFF7
  6575                           tblptrl	equ	0xFF6
  6576                           tablat	equ	0xFF5
  6577                           prodh	equ	0xFF4
  6578                           prodl	equ	0xFF3
  6579                           intcon	equ	0xFF2
  6580                           indf0	equ	0xFEF
  6581                           postinc0	equ	0xFEE
  6582                           fsr0h	equ	0xFEA
  6583                           fsr0l	equ	0xFE9
  6584                           wreg	equ	0xFE8
  6585                           indf1	equ	0xFE7
  6586                           postdec1	equ	0xFE5
  6587                           plusw1	equ	0xFE3
  6588                           fsr1h	equ	0xFE2
  6589                           fsr1l	equ	0xFE1
  6590                           indf2	equ	0xFDF
  6591                           postinc2	equ	0xFDE
  6592                           plusw2	equ	0xFDB
  6593                           fsr2h	equ	0xFDA
  6594                           fsr2l	equ	0xFD9
  6595                           status	equ	0xFD8
  6596                           
  6597 ;; *************** function _ISR *****************
  6598 ;; Defined at:
  6599 ;;		line 343 in file "main.c"
  6600 ;; Parameters:    Size  Location     Type
  6601 ;;		None
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;  sspBuf          1   22[COMRAM] unsigned char 
  6604 ;; Return value:  Size  Location     Type
  6605 ;;                  1    wreg      void 
  6606 ;; Registers used:
  6607 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6608 ;; Tracked objects:
  6609 ;;		On entry : 0/0
  6610 ;;		On exit  : 0/0
  6611 ;;		Unchanged: 0/0
  6612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6613 ;;      Params:         0       0       0       0       0       0       0
  6614 ;;      Locals:         1       0       0       0       0       0       0
  6615 ;;      Temps:         14       0       0       0       0       0       0
  6616 ;;      Totals:        15       0       0       0       0       0       0
  6617 ;;Total ram usage:       15 bytes
  6618 ;; Hardware stack levels used:    1
  6619 ;; Hardware stack levels required when called:    1
  6620 ;; This function calls:
  6621 ;;		i2_load_reg_map
  6622 ;; This function is called by:
  6623 ;;		Interrupt level 2
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           	psect	intcode
  6628  000008                     __pintcode:
  6629                           	opt stack 0
  6630  000008                     _ISR:
  6631                           	opt stack 24
  6632                           
  6633                           ;incstack = 0
  6634  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6635  00000A  CFFA F009          	movff	pclath,??_ISR
  6636  00000E  CFFB F00A          	movff	pclatu,??_ISR+1
  6637  000012  CFE9 F00B          	movff	fsr0l,??_ISR+2
  6638  000016  CFEA F00C          	movff	fsr0h,??_ISR+3
  6639  00001A  CFE1 F00D          	movff	fsr1l,??_ISR+4
  6640  00001E  CFE2 F00E          	movff	fsr1h,??_ISR+5
  6641  000022  CFD9 F00F          	movff	fsr2l,??_ISR+6
  6642  000026  CFDA F010          	movff	fsr2h,??_ISR+7
  6643  00002A  CFF3 F011          	movff	prodl,??_ISR+8
  6644  00002E  CFF4 F012          	movff	prodh,??_ISR+9
  6645  000032  CFF6 F013          	movff	tblptrl,??_ISR+10
  6646  000036  CFF7 F014          	movff	tblptrh,??_ISR+11
  6647  00003A  CFF8 F015          	movff	tblptru,??_ISR+12
  6648  00003E  CFF5 F016          	movff	tablat,??_ISR+13
  6649                           
  6650                           ;main.c: 345: unsigned char sspBuf;
  6651                           ;main.c: 346: load_reg_map();
  6652  000042  EC7D  F00A         	call	i2_load_reg_map	;wreg free
  6653                           
  6654                           ;main.c: 347: if (PIR1bits.SSPIF) {
  6655  000046  A69E               	btfss	3998,3,c	;volatile
  6656  000048  D03E               	goto	i2l301
  6657                           
  6658                           ;main.c: 349: if (!SSPSTATbits.D_NOT_A) {
  6659  00004A  BAC7               	btfsc	4039,5,c	;volatile
  6660  00004C  D013               	goto	i2l3327
  6661                           
  6662                           ;main.c: 353: i2c_byte_count = 0;
  6663  00004E  0E00               	movlw	0
  6664  000050  6E46               	movwf	_i2c_byte_count,c	;volatile
  6665                           
  6666                           ;main.c: 355: if (SSPSTATbits.BF) {
  6667  000052  B0C7               	btfsc	4039,0,c	;volatile
  6668                           
  6669                           ;main.c: 357: sspBuf = SSPBUF;
  6670  000054  CFC9 F017          	movff	4041,ISR@sspBuf	;volatile
  6671                           
  6672                           ;main.c: 358: }
  6673                           ;main.c: 360: if (SSPSTATbits.R_NOT_W) {
  6674  000058  A4C7               	btfss	4039,2,c	;volatile
  6675  00005A  D031               	goto	i2l3349
  6676                           
  6677                           ;main.c: 362: SSPCON1bits.WCOL = 0;
  6678  00005C  9EC6               	bcf	4038,7,c	;volatile
  6679                           
  6680                           ;main.c: 363: SSPBUF = i2c_r_reg[i2c_reg_addr++];
  6681  00005E  5047               	movf	_i2c_reg_addr,w,c	;volatile
  6682  000060  0D01               	mullw	1
  6683  000062  0E00               	movlw	low _i2c_r_reg
  6684  000064  24F3               	addwf	prodl,w,c
  6685  000066  6ED9               	movwf	fsr2l,c
  6686  000068  0E01               	movlw	high _i2c_r_reg
  6687  00006A  20F4               	addwfc	prodh,w,c
  6688  00006C  6EDA               	movwf	fsr2h,c
  6689  00006E  50DF               	movf	indf2,w,c
  6690  000070  6EC9               	movwf	4041,c	;volatile
  6691  000072  D024               	goto	i2l3347
  6692  000074                     i2l3327:
  6693                           
  6694                           ;main.c: 370: i2c_byte_count++;
  6695  000074  2A46               	incf	_i2c_byte_count,f,c	;volatile
  6696                           
  6697                           ;main.c: 372: if (SSPSTATbits.BF) {
  6698  000076  B0C7               	btfsc	4039,0,c	;volatile
  6699                           
  6700                           ;main.c: 373: sspBuf = SSPBUF;
  6701  000078  CFC9 F017          	movff	4041,ISR@sspBuf	;volatile
  6702                           
  6703                           ;main.c: 374: }
  6704                           ;main.c: 376: if (SSPSTATbits.R_NOT_W) {
  6705  00007C  A4C7               	btfss	4039,2,c	;volatile
  6706  00007E  D00E               	goto	i2l3341
  6707                           
  6708                           ;main.c: 379: SSPCON1bits.WCOL = 0;
  6709  000080  9EC6               	bcf	4038,7,c	;volatile
  6710                           
  6711                           ;main.c: 380: SSPBUF = i2c_r_reg[i2c_reg_addr++];
  6712  000082  5047               	movf	_i2c_reg_addr,w,c	;volatile
  6713  000084  0D01               	mullw	1
  6714  000086  0E00               	movlw	low _i2c_r_reg
  6715  000088  24F3               	addwf	prodl,w,c
  6716  00008A  6ED9               	movwf	fsr2l,c
  6717  00008C  0E01               	movlw	high _i2c_r_reg
  6718  00008E  20F4               	addwfc	prodh,w,c
  6719  000090  6EDA               	movwf	fsr2h,c
  6720  000092  50DF               	movf	indf2,w,c
  6721  000094  6EC9               	movwf	4041,c	;volatile
  6722  000096  2A47               	incf	_i2c_reg_addr,f,c	;volatile
  6723                           
  6724                           ;main.c: 381: LATDbits.LATD6 = 1;
  6725  000098  8C8C               	bsf	3980,6,c	;volatile
  6726                           
  6727                           ;main.c: 383: } else {
  6728  00009A  D011               	goto	i2l3349
  6729  00009C                     i2l3341:
  6730                           
  6731                           ;main.c: 385: if (i2c_byte_count == 1) {
  6732  00009C  0446               	decf	_i2c_byte_count,w,c	;volatile
  6733  00009E  A4D8               	btfss	status,2,c
  6734  0000A0  D003               	goto	i2l3345
  6735                           
  6736                           ;main.c: 387: i2c_reg_addr = sspBuf;
  6737  0000A2  C017  F047         	movff	ISR@sspBuf,_i2c_reg_addr	;volatile
  6738                           
  6739                           ;main.c: 389: } else {
  6740  0000A6  D00B               	goto	i2l3349
  6741  0000A8                     i2l3345:
  6742                           
  6743                           ;main.c: 392: i2c_w_reg[i2c_reg_addr++] = sspBuf;
  6744  0000A8  5047               	movf	_i2c_reg_addr,w,c	;volatile
  6745  0000AA  0D01               	mullw	1
  6746  0000AC  0E20               	movlw	low _i2c_w_reg
  6747  0000AE  24F3               	addwf	prodl,w,c
  6748  0000B0  6ED9               	movwf	fsr2l,c
  6749  0000B2  0E01               	movlw	high _i2c_w_reg
  6750  0000B4  20F4               	addwfc	prodh,w,c
  6751  0000B6  6EDA               	movwf	fsr2h,c
  6752  0000B8  C017  FFDF         	movff	ISR@sspBuf,indf2
  6753  0000BC                     i2l3347:
  6754  0000BC  2A47               	incf	_i2c_reg_addr,f,c	;volatile
  6755  0000BE                     i2l3349:
  6756                           
  6757                           ;main.c: 393: }
  6758                           ;main.c: 394: }
  6759                           ;main.c: 395: }
  6760                           ;main.c: 397: i2c_reg_addr %= sizeof(i2c_r_reg);
  6761  0000BE  0E1F               	movlw	31
  6762  0000C0  1647               	andwf	_i2c_reg_addr,f,c	;volatile
  6763                           
  6764                           ;main.c: 400: PIR1bits.SSPIF = 0;
  6765  0000C2  969E               	bcf	3998,3,c	;volatile
  6766                           
  6767                           ;main.c: 401: SSPCON1bits.CKP = 1;
  6768  0000C4  88C6               	bsf	4038,4,c	;volatile
  6769  0000C6                     i2l301:
  6770  0000C6  C016  FFF5         	movff	??_ISR+13,tablat
  6771  0000CA  C015  FFF8         	movff	??_ISR+12,tblptru
  6772  0000CE  C014  FFF7         	movff	??_ISR+11,tblptrh
  6773  0000D2  C013  FFF6         	movff	??_ISR+10,tblptrl
  6774  0000D6  C012  FFF4         	movff	??_ISR+9,prodh
  6775  0000DA  C011  FFF3         	movff	??_ISR+8,prodl
  6776  0000DE  C010  FFDA         	movff	??_ISR+7,fsr2h
  6777  0000E2  C00F  FFD9         	movff	??_ISR+6,fsr2l
  6778  0000E6  C00E  FFE2         	movff	??_ISR+5,fsr1h
  6779  0000EA  C00D  FFE1         	movff	??_ISR+4,fsr1l
  6780  0000EE  C00C  FFEA         	movff	??_ISR+3,fsr0h
  6781  0000F2  C00B  FFE9         	movff	??_ISR+2,fsr0l
  6782  0000F6  C00A  FFFB         	movff	??_ISR+1,pclatu
  6783  0000FA  C009  FFFA         	movff	??_ISR,pclath
  6784  0000FE  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6785  000100  0011               	retfie		f
  6786  000102                     __end_of_ISR:
  6787                           	opt stack 0
  6788                           pclatu	equ	0xFFB
  6789                           pclath	equ	0xFFA
  6790                           tblptru	equ	0xFF8
  6791                           tblptrh	equ	0xFF7
  6792                           tblptrl	equ	0xFF6
  6793                           tablat	equ	0xFF5
  6794                           prodh	equ	0xFF4
  6795                           prodl	equ	0xFF3
  6796                           intcon	equ	0xFF2
  6797                           indf0	equ	0xFEF
  6798                           postinc0	equ	0xFEE
  6799                           fsr0h	equ	0xFEA
  6800                           fsr0l	equ	0xFE9
  6801                           wreg	equ	0xFE8
  6802                           indf1	equ	0xFE7
  6803                           postdec1	equ	0xFE5
  6804                           plusw1	equ	0xFE3
  6805                           fsr1h	equ	0xFE2
  6806                           fsr1l	equ	0xFE1
  6807                           indf2	equ	0xFDF
  6808                           postinc2	equ	0xFDE
  6809                           plusw2	equ	0xFDB
  6810                           fsr2h	equ	0xFDA
  6811                           fsr2l	equ	0xFD9
  6812                           status	equ	0xFD8
  6813                           
  6814 ;; *************** function i2_load_reg_map *****************
  6815 ;; Defined at:
  6816 ;;		line 328 in file "main.c"
  6817 ;; Parameters:    Size  Location     Type
  6818 ;;		None
  6819 ;; Auto vars:     Size  Location     Type
  6820 ;;  load_reg_map    2    6[COMRAM] int 
  6821 ;;  load_reg_map    2    4[COMRAM] int 
  6822 ;; Return value:  Size  Location     Type
  6823 ;;                  1    wreg      void 
  6824 ;; Registers used:
  6825 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6826 ;; Tracked objects:
  6827 ;;		On entry : 0/0
  6828 ;;		On exit  : 0/0
  6829 ;;		Unchanged: 0/0
  6830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6831 ;;      Params:         0       0       0       0       0       0       0
  6832 ;;      Locals:         4       0       0       0       0       0       0
  6833 ;;      Temps:          4       0       0       0       0       0       0
  6834 ;;      Totals:         8       0       0       0       0       0       0
  6835 ;;Total ram usage:        8 bytes
  6836 ;; Hardware stack levels used:    1
  6837 ;; This function calls:
  6838 ;;		Nothing
  6839 ;; This function is called by:
  6840 ;;		_ISR
  6841 ;; This function uses a non-reentrant model
  6842 ;;
  6843                           
  6844                           	psect	text20
  6845  0014FA                     __ptext20:
  6846                           	opt stack 0
  6847  0014FA                     i2_load_reg_map:
  6848                           	opt stack 24
  6849                           
  6850                           ;main.c: 336: for (int i = 0; i < 9; i++)
  6851                           
  6852                           ;incstack = 0
  6853  0014FA  0E00               	movlw	0
  6854  0014FC  6E06               	movwf	i2load_reg_map@i+1,c
  6855  0014FE  0E00               	movlw	0
  6856  001500  6E05               	movwf	i2load_reg_map@i,c
  6857  001502                     i2l2861:
  6858  001502  BE06               	btfsc	i2load_reg_map@i+1,7,c
  6859  001504  D006               	goto	i2l2865
  6860  001506  5006               	movf	i2load_reg_map@i+1,w,c
  6861  001508  E115               	bnz	i2l2871
  6862  00150A  0E09               	movlw	9
  6863  00150C  5C05               	subwf	i2load_reg_map@i,w,c
  6864  00150E  B0D8               	btfsc	status,0,c
  6865  001510  D011               	goto	i2l2871
  6866  001512                     i2l2865:
  6867                           
  6868                           ;main.c: 337: i2c_r_reg[i] = current_user[i];
  6869  001512  0EC3               	movlw	low _current_user
  6870  001514  2405               	addwf	i2load_reg_map@i,w,c
  6871  001516  6ED9               	movwf	fsr2l,c
  6872  001518  0E00               	movlw	high _current_user
  6873  00151A  2006               	addwfc	i2load_reg_map@i+1,w,c
  6874  00151C  6EDA               	movwf	fsr2h,c
  6875  00151E  0E00               	movlw	low _i2c_r_reg
  6876  001520  2405               	addwf	i2load_reg_map@i,w,c
  6877  001522  6EE1               	movwf	fsr1l,c
  6878  001524  0E01               	movlw	high _i2c_r_reg
  6879  001526  2006               	addwfc	i2load_reg_map@i+1,w,c
  6880  001528  6EE2               	movwf	fsr1h,c
  6881  00152A  CFDF FFE7          	movff	indf2,indf1
  6882  00152E  4A05               	infsnz	i2load_reg_map@i,f,c
  6883  001530  2A06               	incf	i2load_reg_map@i+1,f,c
  6884  001532  D7E7               	goto	i2l2861
  6885  001534                     i2l2871:
  6886                           
  6887                           ;main.c: 339: for (int i = 9; i < 18; i++)
  6888  001534  0E00               	movlw	0
  6889  001536  6E08               	movwf	i2load_reg_map@i_840+1,c
  6890  001538  0E09               	movlw	9
  6891  00153A  6E07               	movwf	i2load_reg_map@i_840,c
  6892  00153C                     i2l2873:
  6893  00153C  BE08               	btfsc	i2load_reg_map@i_840+1,7,c
  6894  00153E  D006               	goto	i2l2877
  6895  001540  5008               	movf	i2load_reg_map@i_840+1,w,c
  6896  001542  E121               	bnz	i2l288
  6897  001544  0E12               	movlw	18
  6898  001546  5C07               	subwf	i2load_reg_map@i_840,w,c
  6899  001548  B0D8               	btfsc	status,0,c
  6900  00154A  0012               	return	
  6901  00154C                     i2l2877:
  6902                           
  6903                           ;main.c: 340: i2c_r_reg[i] = current_pin[i - 9];
  6904  00154C  0EF7               	movlw	247
  6905  00154E  6E01               	movwf	??i2_load_reg_map& (0+255),c
  6906  001550  0EFF               	movlw	255
  6907  001552  6E02               	movwf	(??i2_load_reg_map+1)& (0+255),c
  6908  001554  C007  F003         	movff	i2load_reg_map@i_840,??i2_load_reg_map+2
  6909  001558  C008  F004         	movff	i2load_reg_map@i_840+1,??i2_load_reg_map+3
  6910  00155C  5001               	movf	??i2_load_reg_map,w,c
  6911  00155E  2603               	addwf	??i2_load_reg_map+2,f,c
  6912  001560  5002               	movf	??i2_load_reg_map+1,w,c
  6913  001562  2204               	addwfc	??i2_load_reg_map+3,f,c
  6914  001564  0EBA               	movlw	low _current_pin
  6915  001566  2403               	addwf	??i2_load_reg_map+2,w,c
  6916  001568  6ED9               	movwf	fsr2l,c
  6917  00156A  0E00               	movlw	high _current_pin
  6918  00156C  2004               	addwfc	??i2_load_reg_map+3,w,c
  6919  00156E  6EDA               	movwf	fsr2h,c
  6920  001570  0E00               	movlw	low _i2c_r_reg
  6921  001572  2407               	addwf	i2load_reg_map@i_840,w,c
  6922  001574  6EE1               	movwf	fsr1l,c
  6923  001576  0E01               	movlw	high _i2c_r_reg
  6924  001578  2008               	addwfc	i2load_reg_map@i_840+1,w,c
  6925  00157A  6EE2               	movwf	fsr1h,c
  6926  00157C  CFDF FFE7          	movff	indf2,indf1
  6927  001580  4A07               	infsnz	i2load_reg_map@i_840,f,c
  6928  001582  2A08               	incf	i2load_reg_map@i_840+1,f,c
  6929  001584  D7DB               	goto	i2l2873
  6930  001586                     i2l288:
  6931  001586  0012               	return		;funcret
  6932  001588                     __end_ofi2_load_reg_map:
  6933                           	opt stack 0
  6934                           pclatu	equ	0xFFB
  6935                           pclath	equ	0xFFA
  6936                           tblptru	equ	0xFF8
  6937                           tblptrh	equ	0xFF7
  6938                           tblptrl	equ	0xFF6
  6939                           tablat	equ	0xFF5
  6940                           prodh	equ	0xFF4
  6941                           prodl	equ	0xFF3
  6942                           intcon	equ	0xFF2
  6943                           indf0	equ	0xFEF
  6944                           postinc0	equ	0xFEE
  6945                           fsr0h	equ	0xFEA
  6946                           fsr0l	equ	0xFE9
  6947                           wreg	equ	0xFE8
  6948                           indf1	equ	0xFE7
  6949                           postdec1	equ	0xFE5
  6950                           plusw1	equ	0xFE3
  6951                           fsr1h	equ	0xFE2
  6952                           fsr1l	equ	0xFE1
  6953                           indf2	equ	0xFDF
  6954                           postinc2	equ	0xFDE
  6955                           plusw2	equ	0xFDB
  6956                           fsr2h	equ	0xFDA
  6957                           fsr2l	equ	0xFD9
  6958                           status	equ	0xFD8
  6959                           pclatu	equ	0xFFB
  6960                           pclath	equ	0xFFA
  6961                           tblptru	equ	0xFF8
  6962                           tblptrh	equ	0xFF7
  6963                           tblptrl	equ	0xFF6
  6964                           tablat	equ	0xFF5
  6965                           prodh	equ	0xFF4
  6966                           prodl	equ	0xFF3
  6967                           intcon	equ	0xFF2
  6968                           indf0	equ	0xFEF
  6969                           postinc0	equ	0xFEE
  6970                           fsr0h	equ	0xFEA
  6971                           fsr0l	equ	0xFE9
  6972                           wreg	equ	0xFE8
  6973                           indf1	equ	0xFE7
  6974                           postdec1	equ	0xFE5
  6975                           plusw1	equ	0xFE3
  6976                           fsr1h	equ	0xFE2
  6977                           fsr1l	equ	0xFE1
  6978                           indf2	equ	0xFDF
  6979                           postinc2	equ	0xFDE
  6980                           plusw2	equ	0xFDB
  6981                           fsr2h	equ	0xFDA
  6982                           fsr2l	equ	0xFD9
  6983                           status	equ	0xFD8
  6984                           
  6985                           	psect	rparam
  6986  0000                     pclatu	equ	0xFFB
  6987                           pclath	equ	0xFFA
  6988                           tblptru	equ	0xFF8
  6989                           tblptrh	equ	0xFF7
  6990                           tblptrl	equ	0xFF6
  6991                           tablat	equ	0xFF5
  6992                           prodh	equ	0xFF4
  6993                           prodl	equ	0xFF3
  6994                           intcon	equ	0xFF2
  6995                           indf0	equ	0xFEF
  6996                           postinc0	equ	0xFEE
  6997                           fsr0h	equ	0xFEA
  6998                           fsr0l	equ	0xFE9
  6999                           wreg	equ	0xFE8
  7000                           indf1	equ	0xFE7
  7001                           postdec1	equ	0xFE5
  7002                           plusw1	equ	0xFE3
  7003                           fsr1h	equ	0xFE2
  7004                           fsr1l	equ	0xFE1
  7005                           indf2	equ	0xFDF
  7006                           postinc2	equ	0xFDE
  7007                           plusw2	equ	0xFDB
  7008                           fsr2h	equ	0xFDA
  7009                           fsr2l	equ	0xFD9
  7010                           status	equ	0xFD8
  7011                           
  7012                           	psect	temp
  7013  000048                     btemp:
  7014                           	opt stack 0
  7015  000048                     	ds	1
  7016  0000                     int$flags	set	btemp
  7017                           pclatu	equ	0xFFB
  7018                           pclath	equ	0xFFA
  7019                           tblptru	equ	0xFF8
  7020                           tblptrh	equ	0xFF7
  7021                           tblptrl	equ	0xFF6
  7022                           tablat	equ	0xFF5
  7023                           prodh	equ	0xFF4
  7024                           prodl	equ	0xFF3
  7025                           intcon	equ	0xFF2
  7026                           indf0	equ	0xFEF
  7027                           postinc0	equ	0xFEE
  7028                           fsr0h	equ	0xFEA
  7029                           fsr0l	equ	0xFE9
  7030                           wreg	equ	0xFE8
  7031                           indf1	equ	0xFE7
  7032                           postdec1	equ	0xFE5
  7033                           plusw1	equ	0xFE3
  7034                           fsr1h	equ	0xFE2
  7035                           fsr1l	equ	0xFE1
  7036                           indf2	equ	0xFDF
  7037                           postinc2	equ	0xFDE
  7038                           plusw2	equ	0xFDB
  7039                           fsr2h	equ	0xFDA
  7040                           fsr2l	equ	0xFD9
  7041                           status	equ	0xFD8


Data Sizes:
    Strings     318
    Constant    0
    Data        119
    BSS         22
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      71
    BANK0           160     50     112
    BANK1           256     51     115
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    start_routine@error_msg	PTR unsigned char  size(2) Largest target is 17
		 -> STR_27(CODE[17]), STR_26(CODE[17]), 

    latch_keypad@x	PTR unsigned char  size(2) Largest target is 1
		 -> start_routine@x(BANK0[1]), main@x(BANK1[1]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 1535
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[2]), 
		 -> STR_23(CODE[5]), STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), 
		 -> STR_19(CODE[17]), STR_18(CODE[17]), STR_17(CODE[11]), STR_16(CODE[6]), 
		 -> STR_15(CODE[5]), STR_14(CODE[17]), STR_13(CODE[17]), STR_12(CODE[17]), 
		 -> STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[17]), 
		 -> STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[2]), RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    _main->_start_routine
    _start_routine->_menu_progress_bar
    _menu_progress_bar->___wmul
    ___wmul->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _mcu_initialise->_Eeprom_Read_Byte
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR in COMRAM

    _ISR->i2_load_reg_map

Critical Paths under _main in BANK0

    _main->_start_routine
    _start_routine->_menu_progress_bar

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                59    59      0   47686
                                             46 COMRAM     8     8      0
                                              0 BANK1     51    51      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awdiv
                       _latch_keypad
                       _load_reg_map
                     _mcu_initialise
                  _menu_progress_bar
                        _read_keypad
                      _start_routine
 ---------------------------------------------------------------------------------
 (1) _start_routine                                       40    40      0   23208
                                             42 COMRAM     4     4      0
                                             14 BANK0     36    36      0
                  _Eeprom_Write_Byte
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awdiv
                       _latch_keypad
                  _menu_progress_bar
                        _read_keypad
 ---------------------------------------------------------------------------------
 (2) _menu_progress_bar                                   20    18      2   10655
                                             36 COMRAM     6     4      2
                                              0 BANK0     14    14      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     848
                                             30 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1781
                                             23 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_String                                     6     4      2    2463
                                             27 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_Char                                       3     3      0     254
                                             24 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Set_Cursor                                       5     4      1    4395
                                             25 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Clear                                            1     1      0     155
                                             25 COMRAM     1     1      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _latch_keypad                                         4     2      2     524
                                             23 COMRAM     4     2      2
                        _read_keypad
 ---------------------------------------------------------------------------------
 (2) _read_keypad                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1985
                                             23 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Write_Byte                                    2     1      1     139
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _mcu_initialise                                       0     0      0      31
                   _Eeprom_Read_Byte
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Read_Byte                                     1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _load_reg_map                                         8     8      0     260
                                             23 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     279
                                             25 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Cmd                                              1     1      0     155
                                             24 COMRAM     1     1      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (5) _Lcd_Port                                             1     1      0     124
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 15    15      0     226
                                              8 COMRAM    15    15      0
                     i2_load_reg_map
 ---------------------------------------------------------------------------------
 (7) i2_load_reg_map                                       8     8      0     180
                                              0 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___awdiv
   _latch_keypad
     _read_keypad
   _load_reg_map
   _mcu_initialise
     _Eeprom_Read_Byte
   _menu_progress_bar
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___lwdiv
     ___wmul
       ___lwdiv (ARG)
   _read_keypad
   _start_routine
     _Eeprom_Write_Byte
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___awdiv
     _latch_keypad
       _read_keypad
     _menu_progress_bar
       _Lcd_Clear
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Write_Char
         _Lcd_Port
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___lwdiv
       ___wmul
         ___lwdiv (ARG)
     _read_keypad

 _ISR (ROOT)
   i2_load_reg_map

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     33      73       7       44.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     32      70       5       70.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      47       1       75.5%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     12A      15        0.0%
DATA                 0      0     12A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Thu Sep 01 19:31:23 2016

          i2load_reg_map@i_840 0007                              _c 00A2                 start_routine@a 008A  
               start_routine@b 0080                 start_routine@h 006E                 start_routine@i 0074  
               start_routine@l 006F                 start_routine@n 0090                 start_routine@v 0073  
               start_routine@x 008F                    _SSPSTATbits 000FC7                             l71 1920  
                           l73 192A                             l75 1934                             l77 193E  
                 ___awdiv@sign 001D                             _hx 0092                start_routine@d1 0072  
          ___wmul@multiplicand 0021                start_routine@dh 008E                start_routine@dt 008B  
                 __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000  
       __size_of_start_routine 0780                   __CFG_CP3$OFF 000000                    __CFG_LVP$ON 000000  
                          l232 088A                            l155 19AA                            l228 074C  
                          l149 19F8                            l270 1428                            l263 13DC  
                          l272 1444                            l273 1450                            l265 13E8  
                          l337 10E0                            l274 145C                            l266 13F4  
                          l268 1410                            l269 141C                            l288 14F8  
                          l752 17BC                   __CFG_CPB$OFF 000000                   __CFG_CPD$OFF 000000  
                          _ISR 0008                   __CFG_BORV$30 000000                            prod 000FF3  
                          wreg 000FE8        Eeprom_Read_Byte@address 0018                           ?_ISR 0001  
                         l4013 11C4                           l4005 1194                           l4015 11CE  
                         l4033 1474                           l4025 1200                           l4009 11AA  
                         l4043 14A6                           l4019 11E4                           l4027 120C  
                         l4045 14AE                           l4037 1484                           l3413 17EE  
                         l4029 1216                           l4141 0124                           l3423 170C  
                         l4231 0386                           l4049 14BE                           l3513 1468  
                         l4321 065A                           l4241 03BE                           l4209 02EC  
                         l4153 0172                           l3363 192C                           l3427 1740  
                         l3531 1792                           l3603 13A0                           l4235 039C  
                         l4227 0374                           l4155 017C                           l4147 0148  
                         l3541 17B2                           l3533 1796                           l4421 08EC  
                         l4413 08CA                           l4341 0724                           l4333 06F8  
                         l4325 06C4                           l4317 0646                           l4229 037C  
                         l4165 01D6                           l3367 1936                           l3359 1922  
                         l3607 13BA                           l3551 127E                           l4431 0914  
                         l4319 064E                           l4247 0468                           l4239 03B2  
                         l4159 0192                           l3457 1400                           l3529 178A  
                         l4433 0920                           l4409 08B4                           l4361 07A6  
                         l4265 04D6                           l4177 0214                           l3635 18E0  
                         l3563 12C2                           l3555 1294                           l4427 090C  
                         l3661 15C2                           l3485 1434                           l3637 18F2  
                         l3813 0CBE                           l4437 092C                           l4365 07BC  
                         l3663 15CA                           l3655 15AC                           l3591 1372  
                         l3583 1348                           l3575 1318                           l3559 12A6  
                         l4455 09E8                           l4391 085E                           l4375 07FC  
                         l4383 0828                           l3681 1602                           l3673 15EA  
                         l3665 15CE                           l3649 159C                           l3569 12F8  
                         l3905 0EDE                           l3817 0CD8                           l3809 0CA8  
                         l4473 0A7C                           l3587 135C                           l3579 132E  
                         l3771 0B1E                           l3763 0AF2                           l3755 0AC2  
                         l4459 09FE                           l4395 0874                           l4379 0812  
                         l4299 05C0                           l3677 15F4                           l3597 1380  
                         l3925 0F40                           l4469 0A60                           l4477 0A84  
                         l3599 138A                           l3919 0F28                           l3839 0D42  
                         l3775 0B34                           l3759 0AD8                           l4399 088C  
                         l3945 100A                           l3873 0E10                           l3849 0D80  
                         l3971 10BA                           l3955 103E                           l3891 0E82  
                         l3787 0B74                           l3779 0B4E                           l3949 1020  
                         l3893 0E8A                           l3991 1144                           l3983 1114  
                         l3895 0E9A                           l3993 1154                           l3987 112A  
                         l3899 0EB0                           l3997 1168                           STR_2 7EC1  
                         STR_3 7F27                           STR_4 7ED2                           STR_5 7F5A  
                         STR_6 7ED2                           STR_7 7FD1                           STR_8 7F05  
                         STR_9 7FC0                           _LATC 000F8B                           u3050 1738  
                         u3060 176C                           u3057 172E                           u3067 1762  
                         u3235 123C                           u4071 04EA                           u4180 074C  
                         u4407 087A                           u4417 0ADE                           u4507 18C2  
                         u4427 0B3A                           u4517 18D4                           u4437 0CC4  
                         u3910 0146                           u4527 19C6                           u4447 10C0  
                         u3680 10E0                           u3920 0170                           u4537 18E6  
                         u4457 1130                           u4377 03A2                           u4547 1696  
                         u4467 11B0                           u4387 07AC                           u4557 16AE  
                         u4477 12AC                           u4397 0818                           u4567 16C6  
                         u4487 1334                           u4577 19E2                           u4497 13A6  
            ?_Lcd_Write_String 001C                           _main 0106                           fsr0h 000FEA  
                         fsr1h 000FE2                           indf0 000FEF                           fsr0l 000FE9  
                         fsr2h 000FDA                           indf1 000FE7                           fsr1l 000FE1  
                         indf2 000FDF                           fsr2l 000FD9                           btemp 0048  
                         pclat 000FFA                           prodh 000FF4                           prodl 000FF3  
                         start 0102             ??_Lcd_Write_String 001E                  __CFG_IESO$OFF 000000  
              __end_of_Lcd_Cmd 19EC                  __CFG_MCLRE$ON 000000                   ___param_bank 000010  
                        ??_ISR 0009                          ?_main 0001                __end_of___awdiv 160C  
                        _EEADR 000FA9                          STR_10 7EF4                          STR_11 7F9E  
                        STR_12 7EF4                          STR_20 7F49                          STR_13 7EC1  
                        STR_21 7FAF                          STR_22 7F49                          STR_14 7EE3  
                        STR_23 7FF8                          STR_15 7FF3                          STR_24 7FFD  
                        STR_16 7FED                          STR_17 7FE2                          STR_25 7F8D  
                        STR_26 7F6B                          STR_18 7F38                          STR_19 7F7C  
                        STR_27 7F16                ___awdiv@divisor 001A                __end_of___lwdiv 17C6  
                        i2l301 00C6                          i2l288 1586                ___awdiv@counter 001C  
                        _PORTC 000F82                          _PORTD 000F83        __size_of_Lcd_Set_Cursor 0050  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TRISD 000F95                 _i2c_byte_count 0046                  __CFG_PWRT$OFF 000000  
                __CFG_WRT0$OFF 000000                  ?_latch_keypad 0018                  __CFG_WRT1$OFF 000000  
                __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000                 __CFG_EBTR0$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000                     _Machine_ID 00CF  
           start_routine@F3721 00B6                 __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000  
                __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
                 ?_read_keypad 0001                 __CFG_EBTRB$OFF 000000                          main@a 0160  
                        main@c 0140                          main@i 0161                          main@n 0171  
                        main@p 0170                          main@x 0172                          tablat 000FF5  
           start_routine@i_900 007A             start_routine@i_903 007C             start_routine@i_906 007E  
           start_routine@i_907 0085             start_routine@i_882 0078             start_routine@i_874 0076  
           start_routine@i_894 008C             start_routine@i_897 0083                  _start_routine 0A9E  
                        plusw1 000FE3                          plusw2 000FDB                          status 000FD8  
menu_progress_bar@load_time_ms 0025                 __CFG_HFOFST$ON 000000               __end_of_Lcd_Init 1702  
             __end_of_Lcd_Port 1942                __initialization 160C                   __end_of_main 0A9E  
                       ??_main 002F             __size_of_Lcd_Clear 0020                  __activetblptr 000002  
         _credentials_accepted 00CD                 ??_latch_keypad 001A                  ?_load_reg_map 0001  
                       _EEDATA 000FA8                         _EECON2 000FA7               ___awdiv@dividend 0018  
               ?_start_routine 0001                         i2l3341 009C                 __CFG_WDTEN$OFF 000000  
                       i2l3327 0074                         i2l3345 00A8                         i2l3347 00BC  
                       i2l3349 00BE                         i2l2861 1502                         i2l2871 1534  
                       i2l2873 153C                         i2l2865 1512                         i2l2877 154C  
                       _OSCCON 000FD3                      ??_Lcd_Cmd 0019        __size_of_Lcd_Write_Char 0038  
                       _SSPADD 000FC8                         _SSPBUF 000FC9                 __CFG_XINST$OFF 000000  
                       ___wmul 196A                      ??___awdiv 001C                 __CFG_STVREN$ON 000000  
                    ??___lwdiv 001C              ?_Eeprom_Read_Byte 0001                         clear_0 1612  
             ___awdiv@quotient 001E             ??_Eeprom_Read_Byte 0018                   __pdataCOMRAM 0037  
             ??i2_load_reg_map 0001                   __mediumconst 7EC0                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                 ??_load_reg_map 0018  
              Lcd_Set_Cursor@a 001B                Lcd_Set_Cursor@b 001A                Lcd_Set_Cursor@y 001D  
              Lcd_Set_Cursor@z 001C                i2load_reg_map@i 0005                     __accesstop 0060  
      __end_of__initialization 167C                __CFG_PBADEN$OFF 000000              __end_of_Lcd_Clear 19D4  
                ___rparam_used 000001              _menu_progress_bar 121E                 __pcstackCOMRAM 0001  
                 __pidataBANK0 1942                   __pidataBANK1 1866             ?_menu_progress_bar 0025  
               _Lcd_Set_Cursor 17C6            ??_menu_progress_bar 0027                   _EEP_I2C_ADDR 00CC  
                    ?_Lcd_Init 0001                      ?_Lcd_Port 0001              load_reg_map@i_840 001E  
              ??_start_routine 002B           __size_of_read_keypad 00AC                     __pbssBANK0 00BA  
    __end_of_menu_progress_bar 13C0                      ISR@sspBuf 0017           __end_of_latch_keypad 1916  
                      ?___wmul 001F   start_routine@new_I2C_address 0091      __size_of_Lcd_Write_String 0072  
       __end_of_Lcd_Set_Cursor 1816         menu_progress_bar@i_723 0068         menu_progress_bar@i_724 006A  
       menu_progress_bar@i_725 006C                     ??_Lcd_Init 001A                     ??_Lcd_Port 0018  
                      _SSPCON1 000FC6                        _SSPCON2 000FC5        __size_of_mcu_initialise 0050  
                      _SSPSTAT 000FC7                 _Lcd_Write_Char 18A6                        _Lcd_Cmd 19D4  
                      __Hparam 0000                        __Lparam 0000           __end_of_load_reg_map 14FA  
                      ___awdiv 1588                __size_of___wmul 0026                        ___lwdiv 1774  
                      __pcinit 160C                        __ramtop 0600                ?_Lcd_Set_Cursor 001A  
                      __ptext0 0106                        __ptext1 0A9E                        __ptext2 121E  
                      __ptext3 196A                        __ptext4 1774                        __ptext5 1702  
                      __ptext6 18A6                        __ptext7 17C6                        __ptext8 19B4  
                      __ptext9 18DE            menu_progress_bar@ii 0064                   __size_of_ISR 00FA  
                      main@n_c 0155         __end_of_Lcd_Write_Char 18DE           end_of_initialization 167C  
                __Lmediumconst 7EC0     __size_of_menu_progress_bar 01A2                        postdec1 000FE5  
                      postinc0 000FEE                        postinc2 000FDE                      Lcd_Port@a 0018  
                    _PORTBbits 000F81                      _PORTDbits 000F83                ?_Lcd_Write_Char 0001  
    __size_of_Eeprom_Read_Byte 0014              Lcd_Write_String@a 001C              Lcd_Write_String@i 0020  
        __size_of_latch_keypad 0038                     main@digits 016F                     main@buffer 014A  
                 _i2c_reg_addr 0047                  latch_keypad@x 0018                      _Lcd_Clear 19B4  
               __end_of___wmul 1990               _Lcd_Write_String 1702                  __pidataCOMRAM 1A00  
            _Eeprom_Write_Byte 1990             ?_Eeprom_Write_Byte 0018            start_initialization 160C  
                 _latch_keypad 18DE                    __end_of_ISR 0102                      _i2c_r_reg 0100  
                    _i2c_w_reg 0120                 _mcu_initialise 1816            ??_Eeprom_Write_Byte 0019  
            __size_of_Lcd_Init 0078              __size_of_Lcd_Port 002C          __size_of_load_reg_map 008E  
                   ?_Lcd_Clear 0001                       ??___wmul 0023                    __pdataBANK0 0092  
                  __pdataBANK1 0100               __CFG_LPT1OSC$OFF 000000      __end_of_Eeprom_Write_Byte 19B4  
              Lcd_Write_Char@a 001B                Lcd_Write_Char@y 001A      menu_seconds_to_mmss@F3627 0037  
                  __pbssCOMRAM 0046         __end_of_mcu_initialise 1866                  __pcstackBANK0 0060  
                __pcstackBANK1 0140                  ??_read_keypad 0018                   _load_reg_map 146C  
        __end_of_start_routine 121E                       ?_Lcd_Cmd 0001        __size_ofi2_load_reg_map 008E  
                    __pnvBANK0 00CE                   _current_user 00C3               ___lwdiv@dividend 0018  
            __CFG_CCP2MX$PORTC 000000               ??_Lcd_Set_Cursor 001B                      __pintcode 0008  
                __pmediumconst 7EC0                       ?___awdiv 0018                       ?___lwdiv 0018  
                     _I2C_ADDR 00CE                ?_mcu_initialise 0001               ___lwdiv@quotient 001D  
             _Eeprom_Read_Byte 19EC             menu_progress_bar@d 0060             menu_progress_bar@i 0066  
          __end_of_read_keypad 146C                 ___wmul@product 0023                       _LATDbits 000F8C  
                     _PIE1bits 000F9D                       Lcd_Cmd@a 0019                       _PIR1bits 000F9E  
                     _PIR2bits 000FA1                    ??_Lcd_Clear 001A               __CFG_WDTPS$32768 000000  
                    main@F3695 00B9                      main@F3679 00AC     __size_of_Eeprom_Write_Byte 0024  
                    main@i_800 0153                      main@i_804 016D                      main@i_770 0157  
                    main@i_771 0167                      main@i_790 0159                      main@i_767 016B  
                    main@i_777 0163                      main@i_793 015B                      main@i_786 0165  
            ___wmul@multiplier 001F                      main@i_796 015D                      main@i_799 0169  
             ??_Lcd_Write_Char 0019                       _Lcd_Init 168A                       _Lcd_Port 1916  
                    copy_data0 1630                      copy_data1 1650                      copy_data2 1670  
     __end_of_Lcd_Write_String 1774               __size_of_Lcd_Cmd 0018                     _EECON1bits 000FA6  
                     __Hrparam 0000                       __Lrparam 0000             __CFG_BOREN$SBORDIS 000000  
             __size_of___awdiv 0084               __size_of___lwdiv 0052      start_routine@I2C_new_ADDR 0087  
                  _current_pin 00BA                  load_reg_map@i 001C                ___lwdiv@divisor 001A  
              ___lwdiv@counter 001C                    _read_keypad 13C0                       __ptext10 13C0  
                     __ptext11 1588                       __ptext20 14FA                       __ptext12 1990  
                     __ptext13 1816                       __ptext14 19EC                       __ptext15 146C  
                     __ptext16 168A                       __ptext17 19D4                       __ptext18 1916  
               i2_load_reg_map 14FA                  __size_of_main 0998           main@credential_state 0156  
        Eeprom_Write_Byte@data 0018       Eeprom_Write_Byte@address 0019                       int$flags 0048  
          main@is_leading_zero 015F                    _OSCTUNEbits 000F9B                     _INTCONbits 000FF2  
       __end_ofi2_load_reg_map 1588             Lcd_Write_Char@temp 0019                       intlevel2 0000  
     __end_of_Eeprom_Read_Byte 1A00             Lcd_Set_Cursor@temp 001E               ??_mcu_initialise 0019  
               menu_main@F3618 0041         start_routine@error_msg 0070                    _SSPCON1bits 000FC6  
              ?i2_load_reg_map 0001              __CFG_FOSC$INTIO67 000000  
