

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Oct 14 20:19:40 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	idataBANK0,global,class=CODE,delta=1
     8                           	psect	idataBANK1,global,class=CODE,delta=1
     9                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
    12                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    13                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           	psect	eeprom_data
    49  F00000  10 00 00 00 00 00 00 00 	db	16,0,0,0,0,0,0,0	;# 
    50                           
    51                           	psect	idataCOMRAM
    52  001C6A                     __pidataCOMRAM:
    53                           	opt stack 0
    54                           
    55                           ;initializer for menu_seconds_to_mmss@F3627
    56  001C6A  30                 	db	48
    57  001C6B  31                 	db	49
    58  001C6C  32                 	db	50
    59  001C6D  33                 	db	51
    60  001C6E  34                 	db	52
    61  001C6F  35                 	db	53
    62  001C70  36                 	db	54
    63  001C71  37                 	db	55
    64  001C72  38                 	db	56
    65  001C73  39                 	db	57
    66                           
    67                           ;initializer for running_display@F3744
    68  001C74  30                 	db	48
    69  001C75  31                 	db	49
    70  001C76  32                 	db	50
    71  001C77  33                 	db	51
    72  001C78  34                 	db	52
    73  001C79  35                 	db	53
    74  001C7A  36                 	db	54
    75  001C7B  37                 	db	55
    76  001C7C  38                 	db	56
    77  001C7D  39                 	db	57
    78                           
    79                           ;initializer for menu_main@F3618
    80  001C7E  30                 	db	48
    81  001C7F  30                 	db	48
    82  001C80  3A                 	db	58
    83  001C81  30                 	db	48
    84  001C82  30                 	db	48
    85                           
    86                           	psect	idataBANK0
    87  001AF6                     __pidataBANK0:
    88                           	opt stack 0
    89                           
    90                           ;initializer for _i2c_r_reg
    91  001AF6  2D                 	db	45
    92  001AF7  2D                 	db	45
    93  001AF8  2D                 	db	45
    94  001AF9  2D                 	db	45
    95  001AFA  2D                 	db	45
    96  001AFB  2D                 	db	45
    97  001AFC  2D                 	db	45
    98  001AFD  2D                 	db	45
    99  001AFE  2D                 	db	45
   100  001AFF  2D                 	db	45
   101  001B00  2D                 	db	45
   102  001B01  2D                 	db	45
   103  001B02  2D                 	db	45
   104  001B03  2D                 	db	45
   105  001B04  2D                 	db	45
   106  001B05  2D                 	db	45
   107  001B06  2D                 	db	45
   108  001B07  2D                 	db	45
   109  001B08  2D                 	db	45
   110  001B09  2D                 	db	45
   111  001B0A  2D                 	db	45
   112  001B0B  2D                 	db	45
   113  001B0C  2D                 	db	45
   114  001B0D  2D                 	db	45
   115  001B0E  2D                 	db	45
   116  001B0F  2D                 	db	45
   117  001B10  2D                 	db	45
   118  001B11  2D                 	db	45
   119  001B12  2D                 	db	45
   120  001B13  2D                 	db	45
   121  001B14  2D                 	db	45
   122  001B15  2D                 	db	45
   123                           
   124                           ;initializer for _c
   125  001B16  30                 	db	48
   126  001B17  31                 	db	49
   127  001B18  32                 	db	50
   128  001B19  33                 	db	51
   129  001B1A  34                 	db	52
   130  001B1B  35                 	db	53
   131  001B1C  36                 	db	54
   132  001B1D  37                 	db	55
   133  001B1E  38                 	db	56
   134  001B1F  39                 	db	57
   135                           
   136                           ;initializer for main@F3681
   137  001B20  30                 	db	48
   138  001B21  31                 	db	49
   139  001B22  32                 	db	50
   140  001B23  33                 	db	51
   141  001B24  34                 	db	52
   142  001B25  35                 	db	53
   143  001B26  36                 	db	54
   144  001B27  37                 	db	55
   145  001B28  38                 	db	56
   146  001B29  39                 	db	57
   147                           
   148                           ;initializer for running_display@F3741
   149  001B2A  30                 	db	48
   150  001B2B  30                 	db	48
   151  001B2C  3A                 	db	58
   152  001B2D  30                 	db	48
   153  001B2E  30                 	db	48
   154                           
   155                           ;initializer for start_routine@F3718
   156  001B2F  30                 	db	48
   157  001B30  30                 	db	48
   158  001B31  30                 	db	48
   159                           
   160                           ;initializer for _login_timeout
   161  001B32  0708               	dw	1800
   162                           
   163                           	psect	idataBANK1
   164  001BA4                     __pidataBANK1:
   165                           	opt stack 0
   166                           
   167                           ;initializer for _i2c_w_reg
   168  001BA4  2D                 	db	45
   169  001BA5  2D                 	db	45
   170  001BA6  2D                 	db	45
   171  001BA7  2D                 	db	45
   172  001BA8  2D                 	db	45
   173  001BA9  2D                 	db	45
   174  001BAA  2D                 	db	45
   175  001BAB  2D                 	db	45
   176  001BAC  2D                 	db	45
   177  001BAD  2D                 	db	45
   178  001BAE  2D                 	db	45
   179  001BAF  2D                 	db	45
   180  001BB0  2D                 	db	45
   181  001BB1  2D                 	db	45
   182  001BB2  2D                 	db	45
   183  001BB3  2D                 	db	45
   184  001BB4  2D                 	db	45
   185  001BB5  2D                 	db	45
   186  001BB6  2D                 	db	45
   187  001BB7  2D                 	db	45
   188  001BB8  2D                 	db	45
   189  001BB9  2D                 	db	45
   190  001BBA  2D                 	db	45
   191  001BBB  2D                 	db	45
   192  001BBC  2D                 	db	45
   193  001BBD  2D                 	db	45
   194  001BBE  2D                 	db	45
   195  001BBF  2D                 	db	45
   196  001BC0  2D                 	db	45
   197  001BC1  2D                 	db	45
   198  001BC2  2D                 	db	45
   199  001BC3  2D                 	db	45
   200                           
   201                           ;initializer for _hx
   202  001BC4  30                 	db	48
   203  001BC5  31                 	db	49
   204  001BC6  32                 	db	50
   205  001BC7  33                 	db	51
   206  001BC8  34                 	db	52
   207  001BC9  35                 	db	53
   208  001BCA  36                 	db	54
   209  001BCB  37                 	db	55
   210  001BCC  38                 	db	56
   211  001BCD  39                 	db	57
   212  001BCE  41                 	db	65
   213  001BCF  42                 	db	66
   214  001BD0  43                 	db	67
   215  001BD1  44                 	db	68
   216  001BD2  45                 	db	69
   217  001BD3  46                 	db	70
   218                           
   219                           	psect	nvCOMRAM
   220  00004F                     __pnvCOMRAM:
   221                           	opt stack 0
   222  00004F                     _Machine_ID:
   223                           	opt stack 0
   224  00004F                     	ds	1
   225                           
   226                           	psect	nvBANK0
   227  0000E2                     __pnvBANK0:
   228                           	opt stack 0
   229  0000E2                     _I2C_ADDR:
   230                           	opt stack 0
   231  0000E2                     	ds	1
   232  0000                     _EEADR	set	4009
   233  0000                     _EECON1bits	set	4006
   234  0000                     _EECON2	set	4007
   235  0000                     _EEDATA	set	4008
   236  0000                     _INTCONbits	set	4082
   237  0000                     _LATC	set	3979
   238  0000                     _LATDbits	set	3980
   239  0000                     _OSCCON	set	4051
   240  0000                     _OSCTUNEbits	set	3995
   241  0000                     _PIE1bits	set	3997
   242  0000                     _PIR1bits	set	3998
   243  0000                     _PIR2bits	set	4001
   244  0000                     _PORTB	set	3969
   245  0000                     _PORTBbits	set	3969
   246  0000                     _PORTDbits	set	3971
   247  0000                     _SSPADD	set	4040
   248  0000                     _SSPBUF	set	4041
   249  0000                     _SSPCON1	set	4038
   250  0000                     _SSPCON1bits	set	4038
   251  0000                     _SSPCON2	set	4037
   252  0000                     _SSPSTAT	set	4039
   253  0000                     _SSPSTATbits	set	4039
   254  0000                     _TRISA	set	3986
   255  0000                     _TRISB	set	3987
   256  0000                     _TRISC	set	3988
   257  0000                     _TRISD	set	3989
   258                           
   259                           	psect	mediumconst
   260  007EA8                     __pmediumconst:
   261                           	opt stack 0
   262  007EA8  00                 	db	0
   263  007EA9                     STR_2:
   264  007EA9  20                 	db	32
   265  007EAA  20                 	db	32
   266  007EAB  20                 	db	32
   267  007EAC  20                 	db	32
   268  007EAD  20                 	db	32
   269  007EAE  20                 	db	32
   270  007EAF  20                 	db	32
   271  007EB0  20                 	db	32
   272  007EB1  20                 	db	32
   273  007EB2  20                 	db	32
   274  007EB3  20                 	db	32
   275  007EB4  20                 	db	32
   276  007EB5  20                 	db	32
   277  007EB6  20                 	db	32
   278  007EB7  20                 	db	32
   279  007EB8  20                 	db	32
   280  007EB9  00                 	db	0
   281  007EBA                     STR_4:
   282  007EBA  5B                 	db	91	;'['
   283  007EBB  20                 	db	32
   284  007EBC  5D                 	db	93	;']'
   285  007EBD  20                 	db	32
   286  007EBE  20                 	db	32
   287  007EBF  20                 	db	32
   288  007EC0  20                 	db	32
   289  007EC1  20                 	db	32
   290  007EC2  20                 	db	32
   291  007EC3  20                 	db	32
   292  007EC4  20                 	db	32
   293  007EC5  20                 	db	32
   294  007EC6  20                 	db	32
   295  007EC7  20                 	db	32
   296  007EC8  20                 	db	32
   297  007EC9  20                 	db	32
   298  007ECA  00                 	db	0
   299  007ECB                     STR_13:
   300  007ECB  20                 	db	32
   301  007ECC  20                 	db	32
   302  007ECD  20                 	db	32
   303  007ECE  5B                 	db	91	;'['
   304  007ECF  20                 	db	32
   305  007ED0  41                 	db	65	;'A'
   306  007ED1  64                 	db	100	;'d'
   307  007ED2  69                 	db	105	;'i'
   308  007ED3  74                 	db	116	;'t'
   309  007ED4  75                 	db	117	;'u'
   310  007ED5  6D                 	db	109	;'m'
   311  007ED6  20                 	db	32
   312  007ED7  5D                 	db	93	;']'
   313  007ED8  20                 	db	32
   314  007ED9  20                 	db	32
   315  007EDA  20                 	db	32
   316  007EDB  00                 	db	0
   317  007EDC                     STR_10:
   318  007EDC  20                 	db	32
   319  007EDD  20                 	db	32
   320  007EDE  20                 	db	32
   321  007EDF  20                 	db	32
   322  007EE0  5B                 	db	91	;'['
   323  007EE1  20                 	db	32
   324  007EE2  52                 	db	82	;'R'
   325  007EE3  65                 	db	101	;'e'
   326  007EE4  74                 	db	116	;'t'
   327  007EE5  72                 	db	114	;'r'
   328  007EE6  79                 	db	121	;'y'
   329  007EE7  20                 	db	32
   330  007EE8  5D                 	db	93	;']'
   331  007EE9  20                 	db	32
   332  007EEA  20                 	db	32
   333  007EEB  20                 	db	32
   334  007EEC  00                 	db	0
   335  007EED                     STR_26:
   336  007EED  4F                 	db	79	;'O'
   337  007EEE  75                 	db	117	;'u'
   338  007EEF  74                 	db	116	;'t'
   339  007EF0  20                 	db	32
   340  007EF1  6F                 	db	111	;'o'
   341  007EF2  66                 	db	102	;'f'
   342  007EF3  20                 	db	32
   343  007EF4  62                 	db	98	;'b'
   344  007EF5  6F                 	db	111	;'o'
   345  007EF6  75                 	db	117	;'u'
   346  007EF7  6E                 	db	110	;'n'
   347  007EF8  64                 	db	100	;'d'
   348  007EF9  73                 	db	115	;'s'
   349  007EFA  21                 	db	33
   350  007EFB  20                 	db	32
   351  007EFC  20                 	db	32
   352  007EFD  00                 	db	0
   353  007EFE                     STR_3:
   354  007EFE  45                 	db	69	;'E'
   355  007EFF  6E                 	db	110	;'n'
   356  007F00  74                 	db	116	;'t'
   357  007F01  65                 	db	101	;'e'
   358  007F02  72                 	db	114	;'r'
   359  007F03  20                 	db	32
   360  007F04  79                 	db	121	;'y'
   361  007F05  6F                 	db	111	;'o'
   362  007F06  75                 	db	117	;'u'
   363  007F07  72                 	db	114	;'r'
   364  007F08  20                 	db	32
   365  007F09  49                 	db	73	;'I'
   366  007F0A  44                 	db	68	;'D'
   367  007F0B  3A                 	db	58	;':'
   368  007F0C  20                 	db	32
   369  007F0D  20                 	db	32
   370  007F0E  00                 	db	0
   371  007F0F                     STR_17:
   372  007F0F  20                 	db	32
   373  007F10  20                 	db	32
   374  007F11  5B                 	db	91	;'['
   375  007F12  20                 	db	32
   376  007F13  20                 	db	32
   377  007F14  41                 	db	65	;'A'
   378  007F15  64                 	db	100	;'d'
   379  007F16  69                 	db	105	;'i'
   380  007F17  74                 	db	116	;'t'
   381  007F18  75                 	db	117	;'u'
   382  007F19  6D                 	db	109	;'m'
   383  007F1A  20                 	db	32
   384  007F1B  20                 	db	32
   385  007F1C  5D                 	db	93	;']'
   386  007F1D  20                 	db	32
   387  007F1E  20                 	db	32
   388  007F1F  00                 	db	0
   389  007F20                     STR_8:
   390  007F20  20                 	db	32
   391  007F21  20                 	db	32
   392  007F22  20                 	db	32
   393  007F23  5B                 	db	91	;'['
   394  007F24  20                 	db	32
   395  007F25  57                 	db	87	;'W'
   396  007F26  65                 	db	101	;'e'
   397  007F27  6C                 	db	108	;'l'
   398  007F28  63                 	db	99	;'c'
   399  007F29  6F                 	db	111	;'o'
   400  007F2A  6D                 	db	109	;'m'
   401  007F2B  65                 	db	101	;'e'
   402  007F2C  20                 	db	32
   403  007F2D  5D                 	db	93	;']'
   404  007F2E  20                 	db	32
   405  007F2F  20                 	db	32
   406  007F30  00                 	db	0
   407  007F31                     STR_19:
   408  007F31  4E                 	db	78	;'N'
   409  007F32  65                 	db	101	;'e'
   410  007F33  77                 	db	119	;'w'
   411  007F34  20                 	db	32
   412  007F35  4D                 	db	77	;'M'
   413  007F36  61                 	db	97	;'a'
   414  007F37  63                 	db	99	;'c'
   415  007F38  68                 	db	104	;'h'
   416  007F39  69                 	db	105	;'i'
   417  007F3A  6E                 	db	110	;'n'
   418  007F3B  65                 	db	101	;'e'
   419  007F3C  20                 	db	32
   420  007F3D  49                 	db	73	;'I'
   421  007F3E  44                 	db	68	;'D'
   422  007F3F  3A                 	db	58	;':'
   423  007F40  20                 	db	32
   424  007F41  00                 	db	0
   425  007F42                     STR_5:
   426  007F42  45                 	db	69	;'E'
   427  007F43  6E                 	db	110	;'n'
   428  007F44  74                 	db	116	;'t'
   429  007F45  65                 	db	101	;'e'
   430  007F46  72                 	db	114	;'r'
   431  007F47  20                 	db	32
   432  007F48  79                 	db	121	;'y'
   433  007F49  6F                 	db	111	;'o'
   434  007F4A  75                 	db	117	;'u'
   435  007F4B  72                 	db	114	;'r'
   436  007F4C  20                 	db	32
   437  007F4D  50                 	db	80	;'P'
   438  007F4E  49                 	db	73	;'I'
   439  007F4F  4E                 	db	78	;'N'
   440  007F50  3A                 	db	58	;':'
   441  007F51  20                 	db	32
   442  007F52  00                 	db	0
   443  007F53                     STR_25:
   444  007F53  4D                 	db	77	;'M'
   445  007F54  61                 	db	97	;'a'
   446  007F55  79                 	db	121	;'y'
   447  007F56  20                 	db	32
   448  007F57  6E                 	db	110	;'n'
   449  007F58  6F                 	db	111	;'o'
   450  007F59  74                 	db	116	;'t'
   451  007F5A  20                 	db	32
   452  007F5B  62                 	db	98	;'b'
   453  007F5C  65                 	db	101	;'e'
   454  007F5D  20                 	db	32
   455  007F5E  7A                 	db	122	;'z'
   456  007F5F  65                 	db	101	;'e'
   457  007F60  72                 	db	114	;'r'
   458  007F61  6F                 	db	111	;'o'
   459  007F62  21                 	db	33
   460  007F63  00                 	db	0
   461  007F64                     STR_18:
   462  007F64  4C                 	db	76	;'L'
   463  007F65  6F                 	db	111	;'o'
   464  007F66  61                 	db	97	;'a'
   465  007F67  64                 	db	100	;'d'
   466  007F68  20                 	db	32
   467  007F69  49                 	db	73	;'I'
   468  007F6A  32                 	db	50	;'2'
   469  007F6B  43                 	db	67	;'C'
   470  007F6C  20                 	db	32
   471  007F6D  73                 	db	115	;'s'
   472  007F6E  65                 	db	101	;'e'
   473  007F6F  74                 	db	116	;'t'
   474  007F70  75                 	db	117	;'u'
   475  007F71  70                 	db	112	;'p'
   476  007F72  2E                 	db	46
   477  007F73  2E                 	db	46
   478  007F74  00                 	db	0
   479  007F75                     STR_28:
   480  007F75  4C                 	db	76	;'L'
   481  007F76  6F                 	db	111	;'o'
   482  007F77  67                 	db	103	;'g'
   483  007F78  67                 	db	103	;'g'
   484  007F79  69                 	db	105	;'i'
   485  007F7A  6E                 	db	110	;'n'
   486  007F7B  67                 	db	103	;'g'
   487  007F7C  20                 	db	32
   488  007F7D  79                 	db	121	;'y'
   489  007F7E  6F                 	db	111	;'o'
   490  007F7F  75                 	db	117	;'u'
   491  007F80  20                 	db	32
   492  007F81  6F                 	db	111	;'o'
   493  007F82  75                 	db	117	;'u'
   494  007F83  74                 	db	116	;'t'
   495  007F84  2E                 	db	46
   496  007F85  00                 	db	0
   497  007F86                     STR_24:
   498  007F86  49                 	db	73	;'I'
   499  007F87  32                 	db	50	;'2'
   500  007F88  43                 	db	67	;'C'
   501  007F89  5F                 	db	95	;'_'
   502  007F8A  41                 	db	65	;'A'
   503  007F8B  44                 	db	68	;'D'
   504  007F8C  44                 	db	68	;'D'
   505  007F8D  52                 	db	82	;'R'
   506  007F8E  3E                 	db	62	;'>'
   507  007F8F  3E                 	db	62	;'>'
   508  007F90  45                 	db	69	;'E'
   509  007F91  45                 	db	69	;'E'
   510  007F92  50                 	db	80	;'P'
   511  007F93  52                 	db	82	;'R'
   512  007F94  4F                 	db	79	;'O'
   513  007F95  4D                 	db	77	;'M'
   514  007F96  00                 	db	0
   515  007F97                     STR_11:
   516  007F97  5B                 	db	91	;'['
   517  007F98  20                 	db	32
   518  007F99  53                 	db	83	;'S'
   519  007F9A  79                 	db	121	;'y'
   520  007F9B  73                 	db	115	;'s'
   521  007F9C  74                 	db	116	;'t'
   522  007F9D  65                 	db	101	;'e'
   523  007F9E  6D                 	db	109	;'m'
   524  007F9F  20                 	db	32
   525  007FA0  45                 	db	69	;'E'
   526  007FA1  72                 	db	114	;'r'
   527  007FA2  72                 	db	114	;'r'
   528  007FA3  6F                 	db	111	;'o'
   529  007FA4  72                 	db	114	;'r'
   530  007FA5  20                 	db	32
   531  007FA6  5D                 	db	93	;']'
   532  007FA7  00                 	db	0
   533  007FA8                     STR_20:
   534  007FA8  20                 	db	32
   535  007FA9  20                 	db	32
   536  007FAA  20                 	db	32
   537  007FAB  20                 	db	32
   538  007FAC  20                 	db	32
   539  007FAD  20                 	db	32
   540  007FAE  20                 	db	32
   541  007FAF  5B                 	db	91	;'['
   542  007FB0  30                 	db	48	;'0'
   543  007FB1  30                 	db	48	;'0'
   544  007FB2  31                 	db	49	;'1'
   545  007FB3  2D                 	db	45
   546  007FB4  31                 	db	49	;'1'
   547  007FB5  30                 	db	48	;'0'
   548  007FB6  30                 	db	48	;'0'
   549  007FB7  5D                 	db	93	;']'
   550  007FB8  00                 	db	0
   551  007FB9                     STR_9:
   552  007FB9  5B                 	db	91	;'['
   553  007FBA  41                 	db	65	;'A'
   554  007FBB  63                 	db	99	;'c'
   555  007FBC  63                 	db	99	;'c'
   556  007FBD  65                 	db	101	;'e'
   557  007FBE  73                 	db	115	;'s'
   558  007FBF  73                 	db	115	;'s'
   559  007FC0  20                 	db	32
   560  007FC1  20                 	db	32
   561  007FC2  44                 	db	68	;'D'
   562  007FC3  65                 	db	101	;'e'
   563  007FC4  6E                 	db	110	;'n'
   564  007FC5  69                 	db	105	;'i'
   565  007FC6  65                 	db	101	;'e'
   566  007FC7  64                 	db	100	;'d'
   567  007FC8  5D                 	db	93	;']'
   568  007FC9  00                 	db	0
   569  007FCA                     STR_7:
   570  007FCA  5B                 	db	91	;'['
   571  007FCB  41                 	db	65	;'A'
   572  007FCC  63                 	db	99	;'c'
   573  007FCD  63                 	db	99	;'c'
   574  007FCE  65                 	db	101	;'e'
   575  007FCF  73                 	db	115	;'s'
   576  007FD0  73                 	db	115	;'s'
   577  007FD1  20                 	db	32
   578  007FD2  47                 	db	71	;'G'
   579  007FD3  72                 	db	114	;'r'
   580  007FD4  61                 	db	97	;'a'
   581  007FD5  6E                 	db	110	;'n'
   582  007FD6  74                 	db	116	;'t'
   583  007FD7  65                 	db	101	;'e'
   584  007FD8  64                 	db	100	;'d'
   585  007FD9  5D                 	db	93	;']'
   586  007FDA  00                 	db	0
   587  007FDB                     STR_16:
   588  007FDB  44                 	db	68	;'D'
   589  007FDC  65                 	db	101	;'e'
   590  007FDD  76                 	db	118	;'v'
   591  007FDE  69                 	db	105	;'i'
   592  007FDF  63                 	db	99	;'c'
   593  007FE0  65                 	db	101	;'e'
   594  007FE1  20                 	db	32
   595  007FE2  49                 	db	73	;'I'
   596  007FE3  44                 	db	68	;'D'
   597  007FE4  20                 	db	32
   598  007FE5  00                 	db	0
   599  007FE6                     STR_15:
   600  007FE6  31                 	db	49	;'1'
   601  007FE7  2E                 	db	46
   602  007FE8  30                 	db	48	;'0'
   603  007FE9  2E                 	db	46
   604  007FEA  30                 	db	48	;'0'
   605  007FEB  00                 	db	0
   606  007FEC                     STR_27:
   607  007FEC  30                 	db	48	;'0'
   608  007FED  30                 	db	48	;'0'
   609  007FEE  3A                 	db	58	;':'
   610  007FEF  30                 	db	48	;'0'
   611  007FF0  30                 	db	48	;'0'
   612  007FF1  00                 	db	0
   613  007FF2                     STR_14:
   614  007FF2  52                 	db	82	;'R'
   615  007FF3  65                 	db	101	;'e'
   616  007FF4  76                 	db	118	;'v'
   617  007FF5  20                 	db	32
   618  007FF6  00                 	db	0
   619  007FF7                     STR_22:
   620  007FF7  5B                 	db	91	;'['
   621  007FF8  4F                 	db	79	;'O'
   622  007FF9  4B                 	db	75	;'K'
   623  007FFA  5D                 	db	93	;']'
   624  007FFB  00                 	db	0
   625  007FFC                     STR_23:
   626  007FFC  78                 	db	120	;'x'
   627  007FFD  00                 	db	0
   628  0000                     
   629                           ; #config settings
   630  007FFE  00                 	db	0	; dummy byte at the end
   631  0000                     
   632                           	psect	cinit
   633  00179C                     __pcinit:
   634                           	opt stack 0
   635  00179C                     start_initialization:
   636                           	opt stack 0
   637  00179C                     __initialization:
   638                           	opt stack 0
   639                           
   640                           ; Clear objects allocated to BANK1 (16 bytes)
   641  00179C  EE01  F059         	lfsr	0,__pbssBANK1
   642  0017A0  0E10               	movlw	16
   643  0017A2                     clear_0:
   644  0017A2  6AEE               	clrf	postinc0,c
   645  0017A4  06E8               	decf	wreg,f,c
   646  0017A6  E1FD               	bnz	clear_0
   647                           
   648                           ; Clear objects allocated to BANK0 (20 bytes)
   649  0017A8  EE00  F0CE         	lfsr	0,__pbssBANK0
   650  0017AC  0E14               	movlw	20
   651  0017AE                     clear_1:
   652  0017AE  6AEE               	clrf	postinc0,c
   653  0017B0  06E8               	decf	wreg,f,c
   654  0017B2  E1FD               	bnz	clear_1
   655                           
   656                           ; Clear objects allocated to COMRAM (2 bytes)
   657  0017B4  6A4E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   658  0017B6  6A4D               	clrf	__pbssCOMRAM& (0+255),c
   659                           
   660                           ; Initialize objects allocated to BANK1 (48 bytes)
   661                           ; load TBLPTR registers with __pidataBANK1
   662  0017B8  0EA4               	movlw	low __pidataBANK1
   663  0017BA  6EF6               	movwf	tblptrl,c
   664  0017BC  0E1B               	movlw	high __pidataBANK1
   665  0017BE  6EF7               	movwf	tblptrh,c
   666  0017C0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   667  0017C2  6EF8               	movwf	tblptru,c
   668  0017C4  EE01  F000         	lfsr	0,__pdataBANK1
   669  0017C8  EE10 F030          	lfsr	1,48
   670  0017CC                     copy_data0:
   671  0017CC  0009               	tblrd		*+
   672  0017CE  CFF5 FFEE          	movff	tablat,postinc0
   673  0017D2  50E5               	movf	postdec1,w,c
   674  0017D4  50E1               	movf	fsr1l,w,c
   675  0017D6  E1FA               	bnz	copy_data0
   676                           
   677                           ; Initialize objects allocated to BANK0 (62 bytes)
   678                           ; load TBLPTR registers with __pidataBANK0
   679  0017D8  0EF6               	movlw	low __pidataBANK0
   680  0017DA  6EF6               	movwf	tblptrl,c
   681  0017DC  0E1A               	movlw	high __pidataBANK0
   682  0017DE  6EF7               	movwf	tblptrh,c
   683  0017E0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   684  0017E2  6EF8               	movwf	tblptru,c
   685  0017E4  EE00  F060         	lfsr	0,__pdataBANK0
   686  0017E8  EE10 F03E          	lfsr	1,62
   687  0017EC                     copy_data1:
   688  0017EC  0009               	tblrd		*+
   689  0017EE  CFF5 FFEE          	movff	tablat,postinc0
   690  0017F2  50E5               	movf	postdec1,w,c
   691  0017F4  50E1               	movf	fsr1l,w,c
   692  0017F6  E1FA               	bnz	copy_data1
   693                           
   694                           ; Initialize objects allocated to COMRAM (25 bytes)
   695                           ; load TBLPTR registers with __pidataCOMRAM
   696  0017F8  0E6A               	movlw	low __pidataCOMRAM
   697  0017FA  6EF6               	movwf	tblptrl,c
   698  0017FC  0E1C               	movlw	high __pidataCOMRAM
   699  0017FE  6EF7               	movwf	tblptrh,c
   700  001800  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   701  001802  6EF8               	movwf	tblptru,c
   702  001804  EE00  F034         	lfsr	0,__pdataCOMRAM
   703  001808  EE10 F019          	lfsr	1,25
   704  00180C                     copy_data2:
   705  00180C  0009               	tblrd		*+
   706  00180E  CFF5 FFEE          	movff	tablat,postinc0
   707  001812  50E5               	movf	postdec1,w,c
   708  001814  50E1               	movf	fsr1l,w,c
   709  001816  E1FA               	bnz	copy_data2
   710  001818                     end_of_initialization:
   711                           	opt stack 0
   712  001818                     __end_of__initialization:
   713                           	opt stack 0
   714  001818  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   715  00181A  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   716  00181C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   717  00181E  6EF8               	movwf	tblptru,c
   718  001820  0100               	movlb	0
   719  001822  EF81  F000         	goto	_main	;jump to C main() function
   720                           tblptru	equ	0xFF8
   721                           tblptrh	equ	0xFF7
   722                           tblptrl	equ	0xFF6
   723                           tablat	equ	0xFF5
   724                           postinc0	equ	0xFEE
   725                           wreg	equ	0xFE8
   726                           postdec1	equ	0xFE5
   727                           fsr1l	equ	0xFE1
   728                           
   729                           	psect	bssCOMRAM
   730  00004D                     __pbssCOMRAM:
   731                           	opt stack 0
   732  00004D                     _i2c_byte_count:
   733                           	opt stack 0
   734  00004D                     	ds	1
   735  00004E                     _i2c_reg_addr:
   736                           	opt stack 0
   737  00004E                     	ds	1
   738                           tblptru	equ	0xFF8
   739                           tblptrh	equ	0xFF7
   740                           tblptrl	equ	0xFF6
   741                           tablat	equ	0xFF5
   742                           postinc0	equ	0xFEE
   743                           wreg	equ	0xFE8
   744                           postdec1	equ	0xFE5
   745                           fsr1l	equ	0xFE1
   746                           
   747                           	psect	dataCOMRAM
   748  000034                     __pdataCOMRAM:
   749                           	opt stack 0
   750  000034                     menu_seconds_to_mmss@F3627:
   751                           	opt stack 0
   752  000034                     	ds	10
   753  00003E                     running_display@F3744:
   754                           	opt stack 0
   755  00003E                     	ds	10
   756  000048                     menu_main@F3618:
   757                           	opt stack 0
   758  000048                     	ds	5
   759                           tblptru	equ	0xFF8
   760                           tblptrh	equ	0xFF7
   761                           tblptrl	equ	0xFF6
   762                           tablat	equ	0xFF5
   763                           postinc0	equ	0xFEE
   764                           wreg	equ	0xFE8
   765                           postdec1	equ	0xFE5
   766                           fsr1l	equ	0xFE1
   767                           
   768                           	psect	bssBANK0
   769  0000CE                     __pbssBANK0:
   770                           	opt stack 0
   771  0000CE                     _current_pin:
   772                           	opt stack 0
   773  0000CE                     	ds	9
   774  0000D7                     _current_user:
   775                           	opt stack 0
   776  0000D7                     	ds	9
   777  0000E0                     _EEP_I2C_ADDR:
   778                           	opt stack 0
   779  0000E0                     	ds	1
   780  0000E1                     _credentials_accepted:
   781                           	opt stack 0
   782  0000E1                     	ds	1
   783                           tblptru	equ	0xFF8
   784                           tblptrh	equ	0xFF7
   785                           tblptrl	equ	0xFF6
   786                           tablat	equ	0xFF5
   787                           postinc0	equ	0xFEE
   788                           wreg	equ	0xFE8
   789                           postdec1	equ	0xFE5
   790                           fsr1l	equ	0xFE1
   791                           
   792                           	psect	dataBANK0
   793  000060                     __pdataBANK0:
   794                           	opt stack 0
   795  000060                     _i2c_r_reg:
   796                           	opt stack 0
   797  000060                     	ds	32
   798  000080                     _c:
   799                           	opt stack 0
   800  000080                     	ds	10
   801  00008A                     main@F3681:
   802                           	opt stack 0
   803  00008A                     	ds	10
   804  000094                     running_display@F3741:
   805                           	opt stack 0
   806  000094                     	ds	5
   807  000099                     start_routine@F3718:
   808                           	opt stack 0
   809  000099                     	ds	3
   810  00009C                     _login_timeout:
   811                           	opt stack 0
   812  00009C                     	ds	2
   813                           tblptru	equ	0xFF8
   814                           tblptrh	equ	0xFF7
   815                           tblptrl	equ	0xFF6
   816                           tablat	equ	0xFF5
   817                           postinc0	equ	0xFEE
   818                           wreg	equ	0xFE8
   819                           postdec1	equ	0xFE5
   820                           fsr1l	equ	0xFE1
   821                           
   822                           	psect	bssBANK1
   823  000159                     __pbssBANK1:
   824                           	opt stack 0
   825  000159                     _logged_user:
   826                           	opt stack 0
   827  000159                     	ds	16
   828                           tblptru	equ	0xFF8
   829                           tblptrh	equ	0xFF7
   830                           tblptrl	equ	0xFF6
   831                           tablat	equ	0xFF5
   832                           postinc0	equ	0xFEE
   833                           wreg	equ	0xFE8
   834                           postdec1	equ	0xFE5
   835                           fsr1l	equ	0xFE1
   836                           
   837                           	psect	dataBANK1
   838  000100                     __pdataBANK1:
   839                           	opt stack 0
   840  000100                     _i2c_w_reg:
   841                           	opt stack 0
   842  000100                     	ds	32
   843  000120                     _hx:
   844                           	opt stack 0
   845  000120                     	ds	16
   846                           tblptru	equ	0xFF8
   847                           tblptrh	equ	0xFF7
   848                           tblptrl	equ	0xFF6
   849                           tablat	equ	0xFF5
   850                           postinc0	equ	0xFEE
   851                           wreg	equ	0xFE8
   852                           postdec1	equ	0xFE5
   853                           fsr1l	equ	0xFE1
   854                           
   855                           	psect	cstackBANK1
   856  000130                     __pcstackBANK1:
   857                           	opt stack 0
   858  000130                     main@c:
   859                           	opt stack 0
   860                           
   861                           ; 10 bytes @ 0x0
   862  000130                     	ds	10
   863  00013A                     main@buffer:
   864                           	opt stack 0
   865                           
   866                           ; 9 bytes @ 0xA
   867  00013A                     	ds	9
   868  000143                     main@credential_state:
   869                           	opt stack 0
   870                           
   871                           ; 1 bytes @ 0x13
   872  000143                     	ds	1
   873  000144                     main@i_787:
   874                           	opt stack 0
   875                           
   876                           ; 2 bytes @ 0x14
   877  000144                     	ds	2
   878  000146                     main@i_790:
   879                           	opt stack 0
   880                           
   881                           ; 2 bytes @ 0x16
   882  000146                     	ds	2
   883  000148                     main@i_793:
   884                           	opt stack 0
   885                           
   886                           ; 2 bytes @ 0x18
   887  000148                     	ds	2
   888  00014A                     main@i_781:
   889                           	opt stack 0
   890                           
   891                           ; 2 bytes @ 0x1A
   892  00014A                     	ds	2
   893  00014C                     main@i_782:
   894                           	opt stack 0
   895                           
   896                           ; 2 bytes @ 0x1C
   897  00014C                     	ds	2
   898  00014E                     main@i:
   899                           	opt stack 0
   900                           
   901                           ; 2 bytes @ 0x1E
   902  00014E                     	ds	2
   903  000150                     main@i_775:
   904                           	opt stack 0
   905                           
   906                           ; 2 bytes @ 0x20
   907  000150                     	ds	2
   908  000152                     main@u:
   909                           	opt stack 0
   910                           
   911                           ; 2 bytes @ 0x22
   912  000152                     	ds	2
   913  000154                     main@i_772:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x24
   917  000154                     	ds	2
   918  000156                     main@p:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x26
   922  000156                     	ds	1
   923  000157                     main@n:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x27
   927  000157                     	ds	1
   928  000158                     main@x:
   929                           	opt stack 0
   930                           
   931                           ; 1 bytes @ 0x28
   932  000158                     	ds	1
   933                           tblptru	equ	0xFF8
   934                           tblptrh	equ	0xFF7
   935                           tblptrl	equ	0xFF6
   936                           tablat	equ	0xFF5
   937                           postinc0	equ	0xFEE
   938                           wreg	equ	0xFE8
   939                           postdec1	equ	0xFE5
   940                           fsr1l	equ	0xFE1
   941                           
   942                           	psect	cstackBANK0
   943  00009E                     __pcstackBANK0:
   944                           	opt stack 0
   945  00009E                     ??_start_routine:
   946  00009E                     running_display@t:
   947                           	opt stack 0
   948                           
   949                           ; 5 bytes @ 0x0
   950  00009E                     	ds	4
   951  0000A2                     start_routine@h:
   952                           	opt stack 0
   953                           
   954                           ; 1 bytes @ 0x4
   955  0000A2                     	ds	1
   956  0000A3                     start_routine@l:
   957                           	opt stack 0
   958  0000A3                     running_display@hour:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x5
   962  0000A3                     	ds	1
   963  0000A4                     start_routine@error_msg:
   964                           	opt stack 0
   965                           
   966                           ; 2 bytes @ 0x6
   967  0000A4                     	ds	1
   968  0000A5                     running_display@n:
   969                           	opt stack 0
   970                           
   971                           ; 10 bytes @ 0x7
   972  0000A5                     	ds	1
   973  0000A6                     start_routine@d1:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x8
   977  0000A6                     	ds	1
   978  0000A7                     start_routine@v:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0x9
   982  0000A7                     	ds	1
   983  0000A8                     start_routine@i:
   984                           	opt stack 0
   985                           
   986                           ; 2 bytes @ 0xA
   987  0000A8                     	ds	2
   988  0000AA                     start_routine@i_872:
   989                           	opt stack 0
   990                           
   991                           ; 2 bytes @ 0xC
   992  0000AA                     	ds	2
   993  0000AC                     start_routine@i_880:
   994                           	opt stack 0
   995                           
   996                           ; 2 bytes @ 0xE
   997  0000AC                     	ds	2
   998  0000AE                     start_routine@i_898:
   999                           	opt stack 0
  1000                           
  1001                           ; 2 bytes @ 0x10
  1002  0000AE                     	ds	1
  1003  0000AF                     running_display@exit_running:
  1004                           	opt stack 0
  1005                           
  1006                           ; 1 bytes @ 0x11
  1007  0000AF                     	ds	1
  1008  0000B0                     start_routine@i_901:
  1009                           	opt stack 0
  1010  0000B0                     running_display@i_911:
  1011                           	opt stack 0
  1012                           
  1013                           ; 2 bytes @ 0x12
  1014  0000B0                     	ds	2
  1015  0000B2                     running_display@is_leading_zero:
  1016                           	opt stack 0
  1017  0000B2                     start_routine@i_904:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x14
  1021  0000B2                     	ds	1
  1022  0000B3                     running_display@n_c:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x15
  1026  0000B3                     	ds	1
  1027  0000B4                     running_display@ms:
  1028                           	opt stack 0
  1029  0000B4                     start_routine@b:
  1030                           	opt stack 0
  1031                           
  1032                           ; 3 bytes @ 0x16
  1033  0000B4                     	ds	2
  1034  0000B6                     running_display@minute:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0x18
  1038  0000B6                     	ds	1
  1039  0000B7                     start_routine@i_895:
  1040                           	opt stack 0
  1041                           
  1042                           ; 2 bytes @ 0x19
  1043  0000B7                     	ds	1
  1044  0000B8                     running_display@i_912:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0x1A
  1048  0000B8                     	ds	1
  1049  0000B9                     start_routine@i_905:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0x1B
  1053  0000B9                     	ds	1
  1054  0000BA                     running_display@s:
  1055                           	opt stack 0
  1056                           
  1057                           ; 2 bytes @ 0x1C
  1058  0000BA                     	ds	1
  1059  0000BB                     start_routine@I2C_new_ADDR:
  1060                           	opt stack 0
  1061                           
  1062                           ; 3 bytes @ 0x1D
  1063  0000BB                     	ds	1
  1064  0000BC                     running_display@i:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0x1E
  1068  0000BC                     	ds	2
  1069  0000BE                     start_routine@a:
  1070                           	opt stack 0
  1071  0000BE                     running_display@second:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x20
  1075  0000BE                     	ds	1
  1076  0000BF                     start_routine@dt:
  1077                           	opt stack 0
  1078                           
  1079                           ; 1 bytes @ 0x21
  1080  0000BF                     	ds	1
  1081  0000C0                     start_routine@i_892:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x22
  1085  0000C0                     	ds	2
  1086  0000C2                     start_routine@dh:
  1087                           	opt stack 0
  1088                           
  1089                           ; 1 bytes @ 0x24
  1090  0000C2                     	ds	1
  1091  0000C3                     start_routine@x:
  1092                           	opt stack 0
  1093                           
  1094                           ; 1 bytes @ 0x25
  1095  0000C3                     	ds	1
  1096  0000C4                     start_routine@n:
  1097                           	opt stack 0
  1098                           
  1099                           ; 1 bytes @ 0x26
  1100  0000C4                     	ds	1
  1101  0000C5                     start_routine@new_I2C_address:
  1102                           	opt stack 0
  1103                           
  1104                           ; 1 bytes @ 0x27
  1105  0000C5                     	ds	1
  1106  0000C6                     ??_main:
  1107                           
  1108                           ; 1 bytes @ 0x28
  1109  0000C6                     	ds	8
  1110                           tblptru	equ	0xFF8
  1111                           tblptrh	equ	0xFF7
  1112                           tblptrl	equ	0xFF6
  1113                           tablat	equ	0xFF5
  1114                           postinc0	equ	0xFEE
  1115                           wreg	equ	0xFE8
  1116                           postdec1	equ	0xFE5
  1117                           fsr1l	equ	0xFE1
  1118                           
  1119                           	psect	cstackCOMRAM
  1120  000001                     __pcstackCOMRAM:
  1121                           	opt stack 0
  1122  000001                     ??_ISR:
  1123                           
  1124                           ; 1 bytes @ 0x0
  1125  000001                     	ds	14
  1126  00000F                     ISR@sspBuf:
  1127                           	opt stack 0
  1128                           
  1129                           ; 1 bytes @ 0xE
  1130  00000F                     	ds	1
  1131  000010                     ?___awdiv:
  1132                           	opt stack 0
  1133  000010                     ?___awmod:
  1134                           	opt stack 0
  1135  000010                     ?___lwdiv:
  1136                           	opt stack 0
  1137  000010                     Lcd_Port@a:
  1138                           	opt stack 0
  1139  000010                     Eeprom_Read_Byte@address:
  1140                           	opt stack 0
  1141  000010                     Eeprom_Write_Byte@data:
  1142                           	opt stack 0
  1143  000010                     latch_keypad@x:
  1144                           	opt stack 0
  1145  000010                     ___awdiv@dividend:
  1146                           	opt stack 0
  1147  000010                     ___awmod@dividend:
  1148                           	opt stack 0
  1149  000010                     ___lwdiv@dividend:
  1150                           	opt stack 0
  1151                           
  1152                           ; 2 bytes @ 0xF
  1153  000010                     	ds	1
  1154  000011                     Lcd_Cmd@a:
  1155                           	opt stack 0
  1156  000011                     Lcd_Write_Char@temp:
  1157                           	opt stack 0
  1158  000011                     Eeprom_Write_Byte@address:
  1159                           	opt stack 0
  1160                           
  1161                           ; 1 bytes @ 0x10
  1162  000011                     	ds	1
  1163  000012                     ??_latch_keypad:
  1164  000012                     ??_Lcd_Clear:
  1165  000012                     ??_Lcd_Init:
  1166  000012                     Lcd_Set_Cursor@b:
  1167                           	opt stack 0
  1168  000012                     Lcd_Write_Char@y:
  1169                           	opt stack 0
  1170  000012                     ___awdiv@divisor:
  1171                           	opt stack 0
  1172  000012                     ___awmod@divisor:
  1173                           	opt stack 0
  1174  000012                     ___lwdiv@divisor:
  1175                           	opt stack 0
  1176                           
  1177                           ; 2 bytes @ 0x11
  1178  000012                     	ds	1
  1179  000013                     Lcd_Set_Cursor@a:
  1180                           	opt stack 0
  1181  000013                     Lcd_Write_Char@a:
  1182                           	opt stack 0
  1183                           
  1184                           ; 1 bytes @ 0x12
  1185  000013                     	ds	1
  1186  000014                     Lcd_Set_Cursor@z:
  1187                           	opt stack 0
  1188  000014                     ___awdiv@counter:
  1189                           	opt stack 0
  1190  000014                     ___awmod@counter:
  1191                           	opt stack 0
  1192  000014                     ___lwdiv@counter:
  1193                           	opt stack 0
  1194  000014                     Lcd_Write_String@a:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x13
  1198  000014                     	ds	1
  1199  000015                     Lcd_Set_Cursor@y:
  1200                           	opt stack 0
  1201  000015                     ___awdiv@sign:
  1202                           	opt stack 0
  1203  000015                     ___awmod@sign:
  1204                           	opt stack 0
  1205  000015                     ___lwdiv@quotient:
  1206                           	opt stack 0
  1207                           
  1208                           ; 2 bytes @ 0x14
  1209  000015                     	ds	1
  1210  000016                     ??_Lcd_Write_String:
  1211  000016                     Lcd_Set_Cursor@temp:
  1212                           	opt stack 0
  1213  000016                     ___awdiv@quotient:
  1214                           	opt stack 0
  1215                           
  1216                           ; 2 bytes @ 0x15
  1217  000016                     	ds	1
  1218  000017                     ?___wmul:
  1219                           	opt stack 0
  1220  000017                     ___wmul@multiplier:
  1221                           	opt stack 0
  1222                           
  1223                           ; 2 bytes @ 0x16
  1224  000017                     	ds	1
  1225  000018                     ??_load_i2c_registers:
  1226  000018                     Lcd_Write_String@i:
  1227                           	opt stack 0
  1228                           
  1229                           ; 2 bytes @ 0x17
  1230  000018                     	ds	1
  1231  000019                     ___wmul@multiplicand:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x18
  1235  000019                     	ds	2
  1236  00001B                     ___wmul@product:
  1237                           	opt stack 0
  1238                           
  1239                           ; 2 bytes @ 0x1A
  1240  00001B                     	ds	1
  1241  00001C                     load_i2c_registers@checksum:
  1242                           	opt stack 0
  1243                           
  1244                           ; 2 bytes @ 0x1B
  1245  00001C                     	ds	1
  1246  00001D                     menu_progress_bar@load_time_ms:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x1C
  1250  00001D                     	ds	1
  1251  00001E                     load_i2c_registers@i_838:
  1252                           	opt stack 0
  1253                           
  1254                           ; 2 bytes @ 0x1D
  1255  00001E                     	ds	1
  1256  00001F                     ??_menu_progress_bar:
  1257                           
  1258                           ; 1 bytes @ 0x1E
  1259  00001F                     	ds	1
  1260  000020                     load_i2c_registers@i:
  1261                           	opt stack 0
  1262                           
  1263                           ; 2 bytes @ 0x1F
  1264  000020                     	ds	2
  1265  000022                     load_i2c_registers@i_836:
  1266                           	opt stack 0
  1267                           
  1268                           ; 2 bytes @ 0x21
  1269  000022                     	ds	1
  1270  000023                     menu_progress_bar@d:
  1271                           	opt stack 0
  1272                           
  1273                           ; 4 bytes @ 0x22
  1274  000023                     	ds	4
  1275  000027                     menu_progress_bar@ii:
  1276                           	opt stack 0
  1277                           
  1278                           ; 2 bytes @ 0x26
  1279  000027                     	ds	2
  1280  000029                     menu_progress_bar@i:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0x28
  1284  000029                     	ds	2
  1285  00002B                     menu_progress_bar@i_726:
  1286                           	opt stack 0
  1287                           
  1288                           ; 2 bytes @ 0x2A
  1289  00002B                     	ds	2
  1290  00002D                     menu_progress_bar@i_727:
  1291                           	opt stack 0
  1292                           
  1293                           ; 2 bytes @ 0x2C
  1294  00002D                     	ds	2
  1295  00002F                     menu_progress_bar@i_728:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x2E
  1299  00002F                     	ds	2
  1300  000031                     ??_running_display:
  1301                           
  1302                           ; 1 bytes @ 0x30
  1303  000031                     	ds	3
  1304                           tblptru	equ	0xFF8
  1305                           tblptrh	equ	0xFF7
  1306                           tblptrl	equ	0xFF6
  1307                           tablat	equ	0xFF5
  1308                           postinc0	equ	0xFEE
  1309                           wreg	equ	0xFE8
  1310                           postdec1	equ	0xFE5
  1311                           fsr1l	equ	0xFE1
  1312                           
  1313 ;;
  1314 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  1315 ;;
  1316 ;; *************** function _main *****************
  1317 ;; Defined at:
  1318 ;;		line 50 in file "main.c"
  1319 ;; Parameters:    Size  Location     Type
  1320 ;;		None
  1321 ;; Auto vars:     Size  Location     Type
  1322 ;;  i               2   24[BANK1 ] int 
  1323 ;;  i               2   22[BANK1 ] int 
  1324 ;;  i               2   20[BANK1 ] int 
  1325 ;;  u               2   34[BANK1 ] int 
  1326 ;;  i               2   28[BANK1 ] int 
  1327 ;;  i               2   26[BANK1 ] int 
  1328 ;;  c              10    0[BANK1 ] unsigned char [10]
  1329 ;;  i               2   32[BANK1 ] int 
  1330 ;;  i               2   36[BANK1 ] int 
  1331 ;;  buffer          9   10[BANK1 ] unsigned char [9]
  1332 ;;  credential_s    1   19[BANK1 ] unsigned char 
  1333 ;;  i               2   30[BANK1 ] int 
  1334 ;;  x               1   40[BANK1 ] unsigned char 
  1335 ;;  n               1   39[BANK1 ] unsigned char 
  1336 ;;  p               1   38[BANK1 ] unsigned char 
  1337 ;; Return value:  Size  Location     Type
  1338 ;;                  1    wreg      void 
  1339 ;; Registers used:
  1340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1341 ;; Tracked objects:
  1342 ;;		On entry : 0/0
  1343 ;;		On exit  : 0/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1346 ;;      Params:         0       0       0       0       0       0       0
  1347 ;;      Locals:         0       0      41       0       0       0       0
  1348 ;;      Temps:          0       8       0       0       0       0       0
  1349 ;;      Totals:         0       8      41       0       0       0       0
  1350 ;;Total ram usage:       49 bytes
  1351 ;; Hardware stack levels required when called:    6
  1352 ;; This function calls:
  1353 ;;		_Lcd_Init
  1354 ;;		_Lcd_Set_Cursor
  1355 ;;		_Lcd_Write_Char
  1356 ;;		_Lcd_Write_String
  1357 ;;		_latch_keypad
  1358 ;;		_load_i2c_registers
  1359 ;;		_mcu_initialise
  1360 ;;		_menu_progress_bar
  1361 ;;		_read_keypad
  1362 ;;		_running_display
  1363 ;;		_start_routine
  1364 ;; This function is called by:
  1365 ;;		Startup code after reset
  1366 ;; This function uses a non-reentrant model
  1367 ;;
  1368                           
  1369                           	psect	text0
  1370  000102                     __ptext0:
  1371                           	opt stack 0
  1372  000102                     _main:
  1373                           	opt stack 25
  1374                           
  1375                           ;main.c: 54: unsigned char n = 0, p = 0;
  1376                           
  1377                           ;incstack = 0
  1378  000102  0E00               	movlw	0
  1379  000104  0101               	movlb	1	; () banked
  1380  000106  6F57               	movwf	main@n& (0+255),b
  1381  000108  0E00               	movlw	0
  1382  00010A  0101               	movlb	1	; () banked
  1383  00010C  6F56               	movwf	main@p& (0+255),b
  1384                           
  1385                           ;main.c: 55: unsigned char x = '_';
  1386  00010E  0E5F               	movlw	95
  1387  000110  0101               	movlb	1	; () banked
  1388  000112  6F58               	movwf	main@x& (0+255),b
  1389                           
  1390                           ; BSR set to: 1
  1391                           ;main.c: 58: mcu_initialise();
  1392  000114  EC53  F00D         	call	_mcu_initialise	;wreg free
  1393                           
  1394                           ;main.c: 59: Lcd_Init();
  1395  000118  EC55  F00C         	call	_Lcd_Init	;wreg free
  1396                           
  1397                           ;main.c: 63: start_routine();
  1398  00011C  ECF2  F004         	call	_start_routine	;wreg free
  1399  000120                     l4452:
  1400                           
  1401                           ;main.c: 67: {
  1402                           ;main.c: 68: for (int i = 0; i < 32; i++)
  1403  000120  0E00               	movlw	0
  1404  000122  0101               	movlb	1	; () banked
  1405  000124  6F4F               	movwf	(main@i+1)& (0+255),b
  1406  000126  0E00               	movlw	0
  1407  000128  6F4E               	movwf	main@i& (0+255),b
  1408                           
  1409                           ; BSR set to: 1
  1410  00012A  0101               	movlb	1	; () banked
  1411  00012C  BF4F               	btfsc	(main@i+1)& (0+255),7,b
  1412  00012E  D00C               	goto	l4458
  1413  000130  0101               	movlb	1	; () banked
  1414  000132  514F               	movf	(main@i+1)& (0+255),w,b
  1415  000134  E107               	bnz	u4250
  1416  000136  0E20               	movlw	32
  1417  000138  0101               	movlb	1	; () banked
  1418  00013A  5D4E               	subwf	main@i& (0+255),w,b
  1419  00013C  B0D8               	btfsc	status,0,c
  1420  00013E  EFEB  F004         	goto	l4716
  1421  000142  D002               	goto	l4458
  1422  000144                     u4250:
  1423                           
  1424                           ; BSR set to: 1
  1425  000144  EFEB  F004         	goto	l4716
  1426  000148                     l4458:
  1427                           
  1428                           ; BSR set to: 1
  1429                           ;main.c: 69: {
  1430                           ;main.c: 70: i2c_w_reg[i] = '-';
  1431  000148  0E00               	movlw	low _i2c_w_reg
  1432  00014A  0101               	movlb	1	; () banked
  1433  00014C  254E               	addwf	main@i& (0+255),w,b
  1434  00014E  6ED9               	movwf	fsr2l,c
  1435  000150  0E01               	movlw	high _i2c_w_reg
  1436  000152  0101               	movlb	1	; () banked
  1437  000154  214F               	addwfc	(main@i+1)& (0+255),w,b
  1438  000156  6EDA               	movwf	fsr2h,c
  1439  000158  0E2D               	movlw	45
  1440  00015A  6EDF               	movwf	indf2,c
  1441                           
  1442                           ;main.c: 71: i2c_r_reg[i] = '-';
  1443  00015C  0E60               	movlw	low _i2c_r_reg
  1444  00015E  0101               	movlb	1	; () banked
  1445  000160  254E               	addwf	main@i& (0+255),w,b
  1446  000162  6ED9               	movwf	fsr2l,c
  1447  000164  0E00               	movlw	high _i2c_r_reg
  1448  000166  0101               	movlb	1	; () banked
  1449  000168  214F               	addwfc	(main@i+1)& (0+255),w,b
  1450  00016A  6EDA               	movwf	fsr2h,c
  1451  00016C  0E2D               	movlw	45
  1452  00016E  6EDF               	movwf	indf2,c
  1453                           
  1454                           ; BSR set to: 1
  1455  000170  0101               	movlb	1	; () banked
  1456  000172  4B4E               	infsnz	main@i& (0+255),f,b
  1457  000174  2B4F               	incf	(main@i+1)& (0+255),f,b
  1458                           
  1459                           ; BSR set to: 1
  1460  000176  0101               	movlb	1	; () banked
  1461  000178  BF4F               	btfsc	(main@i+1)& (0+255),7,b
  1462  00017A  D7E6               	goto	l4458
  1463  00017C  0101               	movlb	1	; () banked
  1464  00017E  514F               	movf	(main@i+1)& (0+255),w,b
  1465  000180  E101               	bnz	u4260
  1466  000182  D7D9               	goto	L1
  1467  000184                     u4260:
  1468                           
  1469                           ; BSR set to: 1
  1470                           ;main.c: 72: }
  1471                           ;main.c: 73: while (credentials_accepted == 0 )
  1472  000184  EFEB  F004         	goto	l4716
  1473  000188                     l4464:
  1474                           
  1475                           ;main.c: 74: {
  1476                           ;main.c: 75: unsigned char buffer[9];
  1477                           ;main.c: 76: for (int i = 0; i < 9; i++)
  1478  000188  0E00               	movlw	0
  1479  00018A  0101               	movlb	1	; () banked
  1480  00018C  6F55               	movwf	(main@i_772+1)& (0+255),b
  1481  00018E  0E00               	movlw	0
  1482  000190  6F54               	movwf	main@i_772& (0+255),b
  1483  000192                     l4466:
  1484                           
  1485                           ; BSR set to: 1
  1486  000192  0101               	movlb	1	; () banked
  1487  000194  BF55               	btfsc	(main@i_772+1)& (0+255),7,b
  1488  000196  D008               	goto	l4470
  1489  000198  0101               	movlb	1	; () banked
  1490  00019A  5155               	movf	(main@i_772+1)& (0+255),w,b
  1491  00019C  E127               	bnz	l4476
  1492  00019E  0E09               	movlw	9
  1493  0001A0  0101               	movlb	1	; () banked
  1494  0001A2  5D54               	subwf	main@i_772& (0+255),w,b
  1495  0001A4  B0D8               	btfsc	status,0,c
  1496  0001A6  D022               	goto	l4476
  1497  0001A8                     l4470:
  1498                           
  1499                           ; BSR set to: 1
  1500                           ;main.c: 77: {
  1501                           ;main.c: 78: current_user[i] = '0';
  1502  0001A8  0ED7               	movlw	low _current_user
  1503  0001AA  0101               	movlb	1	; () banked
  1504  0001AC  2554               	addwf	main@i_772& (0+255),w,b
  1505  0001AE  6ED9               	movwf	fsr2l,c
  1506  0001B0  0E00               	movlw	high _current_user
  1507  0001B2  0101               	movlb	1	; () banked
  1508  0001B4  2155               	addwfc	(main@i_772+1)& (0+255),w,b
  1509  0001B6  6EDA               	movwf	fsr2h,c
  1510  0001B8  0E30               	movlw	48
  1511  0001BA  6EDF               	movwf	indf2,c
  1512                           
  1513                           ;main.c: 79: current_pin[i] = '0';
  1514  0001BC  0ECE               	movlw	low _current_pin
  1515  0001BE  0101               	movlb	1	; () banked
  1516  0001C0  2554               	addwf	main@i_772& (0+255),w,b
  1517  0001C2  6ED9               	movwf	fsr2l,c
  1518  0001C4  0E00               	movlw	high _current_pin
  1519  0001C6  0101               	movlb	1	; () banked
  1520  0001C8  2155               	addwfc	(main@i_772+1)& (0+255),w,b
  1521  0001CA  6EDA               	movwf	fsr2h,c
  1522  0001CC  0E30               	movlw	48
  1523  0001CE  6EDF               	movwf	indf2,c
  1524                           
  1525                           ;main.c: 80: buffer[i] = '0';
  1526  0001D0  0E3A               	movlw	low main@buffer
  1527  0001D2  0101               	movlb	1	; () banked
  1528  0001D4  2554               	addwf	main@i_772& (0+255),w,b
  1529  0001D6  6ED9               	movwf	fsr2l,c
  1530  0001D8  0E01               	movlw	high main@buffer
  1531  0001DA  0101               	movlb	1	; () banked
  1532  0001DC  2155               	addwfc	(main@i_772+1)& (0+255),w,b
  1533  0001DE  6EDA               	movwf	fsr2h,c
  1534  0001E0  0E30               	movlw	48
  1535  0001E2  6EDF               	movwf	indf2,c
  1536                           
  1537                           ; BSR set to: 1
  1538  0001E4  0101               	movlb	1	; () banked
  1539  0001E6  4B54               	infsnz	main@i_772& (0+255),f,b
  1540  0001E8  2B55               	incf	(main@i_772+1)& (0+255),f,b
  1541  0001EA  D7D3               	goto	l4466
  1542  0001EC                     l4476:
  1543                           
  1544                           ; BSR set to: 1
  1545                           ;main.c: 81: }
  1546                           ;main.c: 82: n = 0;
  1547  0001EC  0E00               	movlw	0
  1548  0001EE  0101               	movlb	1	; () banked
  1549  0001F0  6F57               	movwf	main@n& (0+255),b
  1550                           
  1551                           ; BSR set to: 1
  1552                           ;main.c: 83: Lcd_Set_Cursor(1,1);
  1553  0001F2  0E01               	movlw	1
  1554  0001F4  6E12               	movwf	Lcd_Set_Cursor@b,c
  1555  0001F6  0E01               	movlw	1
  1556  0001F8  EC2B  F00D         	call	_Lcd_Set_Cursor
  1557                           
  1558                           ;main.c: 84: Lcd_Write_String("Enter your ID:  ");
  1559  0001FC  0EFE               	movlw	low STR_3
  1560  0001FE  6E14               	movwf	Lcd_Write_String@a,c
  1561  000200  0E7E               	movlw	high STR_3
  1562  000202  6E15               	movwf	Lcd_Write_String@a+1,c
  1563  000204  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  1564                           
  1565                           ;main.c: 85: Lcd_Set_Cursor(2,1);
  1566  000208  0E01               	movlw	1
  1567  00020A  6E12               	movwf	Lcd_Set_Cursor@b,c
  1568  00020C  0E02               	movlw	2
  1569  00020E  EC2B  F00D         	call	_Lcd_Set_Cursor
  1570                           
  1571                           ;main.c: 86: Lcd_Write_String("[ ]             ");
  1572  000212  0EBA               	movlw	low STR_4
  1573  000214  6E14               	movwf	Lcd_Write_String@a,c
  1574  000216  0E7E               	movlw	high STR_4
  1575  000218  6E15               	movwf	Lcd_Write_String@a+1,c
  1576  00021A  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  1577                           
  1578                           ;main.c: 87: Lcd_Set_Cursor(2,1);
  1579  00021E  0E01               	movlw	1
  1580  000220  6E12               	movwf	Lcd_Set_Cursor@b,c
  1581  000222  0E02               	movlw	2
  1582  000224  EC2B  F00D         	call	_Lcd_Set_Cursor
  1583                           
  1584                           ;main.c: 89: while (n < 10)
  1585  000228  D0D0               	goto	l4538
  1586  00022A                     l4488:
  1587                           
  1588                           ;main.c: 90: {
  1589                           ;main.c: 91: if (n == 9)
  1590  00022A  0E09               	movlw	9
  1591  00022C  0101               	movlb	1	; () banked
  1592  00022E  1957               	xorwf	main@n& (0+255),w,b
  1593  000230  B4D8               	btfsc	status,2,c
  1594  000232  D0CF               	goto	l4540
  1595                           
  1596                           ; BSR set to: 1
  1597                           ;main.c: 93: Lcd_Set_Cursor(2,2);
  1598                           
  1599                           ; BSR set to: 1
  1600                           
  1601                           ; BSR set to: 1
  1602                           ;main.c: 92: break;
  1603  000234  0E02               	movlw	2
  1604  000236  6E12               	movwf	Lcd_Set_Cursor@b,c
  1605  000238  0E02               	movlw	2
  1606  00023A  EC2B  F00D         	call	_Lcd_Set_Cursor
  1607                           
  1608                           ;main.c: 94: Lcd_Write_Char(c[9-n]);
  1609  00023E  0101               	movlb	1	; () banked
  1610  000240  5157               	movf	main@n& (0+255),w,b
  1611  000242  0100               	movlb	0	; () banked
  1612  000244  6FC6               	movwf	??_main& (0+255),b
  1613  000246  6BC7               	clrf	(??_main+1)& (0+255),b
  1614  000248  0100               	movlb	0	; () banked
  1615  00024A  1FC6               	comf	??_main& (0+255),f,b
  1616  00024C  1FC7               	comf	(??_main+1)& (0+255),f,b
  1617  00024E  4BC6               	infsnz	??_main& (0+255),f,b
  1618  000250  2BC7               	incf	(??_main+1)& (0+255),f,b
  1619  000252  0E09               	movlw	9
  1620  000254  0100               	movlb	0	; () banked
  1621  000256  27C6               	addwf	??_main& (0+255),f,b
  1622  000258  0E00               	movlw	0
  1623  00025A  23C7               	addwfc	(??_main+1)& (0+255),f,b
  1624  00025C  0E80               	movlw	low _c
  1625  00025E  0100               	movlb	0	; () banked
  1626  000260  25C6               	addwf	??_main& (0+255),w,b
  1627  000262  6ED9               	movwf	fsr2l,c
  1628  000264  0E00               	movlw	high _c
  1629  000266  0100               	movlb	0	; () banked
  1630  000268  21C7               	addwfc	(??_main+1)& (0+255),w,b
  1631  00026A  6EDA               	movwf	fsr2h,c
  1632  00026C  50DF               	movf	indf2,w,c
  1633  00026E  ECB6  F00D         	call	_Lcd_Write_Char
  1634                           
  1635                           ;main.c: 95: x = read_keypad();
  1636  000272  EC7C  F00B         	call	_read_keypad	;wreg free
  1637  000276  0101               	movlb	1	; () banked
  1638  000278  6F58               	movwf	main@x& (0+255),b
  1639                           
  1640                           ; BSR set to: 1
  1641                           ;main.c: 96: if (x != '_')
  1642  00027A  0E5F               	movlw	95
  1643  00027C  0101               	movlb	1	; () banked
  1644  00027E  1958               	xorwf	main@x& (0+255),w,b
  1645  000280  B4D8               	btfsc	status,2,c
  1646  000282  D0A3               	goto	l4538
  1647                           
  1648                           ; BSR set to: 1
  1649                           ;main.c: 97: {
  1650                           ;main.c: 98: if (((x - '#') == 0)&&(n > 0))
  1651  000284  0EDD               	movlw	221
  1652  000286  0100               	movlb	0	; () banked
  1653  000288  6FC6               	movwf	??_main& (0+255),b
  1654  00028A  0EFF               	movlw	255
  1655  00028C  0100               	movlb	0	; () banked
  1656  00028E  6FC7               	movwf	(??_main+1)& (0+255),b
  1657  000290  0101               	movlb	1	; () banked
  1658  000292  5158               	movf	main@x& (0+255),w,b
  1659  000294  0100               	movlb	0	; () banked
  1660  000296  6FC8               	movwf	(??_main+2)& (0+255),b
  1661  000298  6BC9               	clrf	(??_main+3)& (0+255),b
  1662  00029A  0100               	movlb	0	; () banked
  1663  00029C  51C6               	movf	??_main& (0+255),w,b
  1664  00029E  0100               	movlb	0	; () banked
  1665  0002A0  27C8               	addwf	(??_main+2)& (0+255),f,b
  1666  0002A2  0100               	movlb	0	; () banked
  1667  0002A4  51C7               	movf	(??_main+1)& (0+255),w,b
  1668  0002A6  0100               	movlb	0	; () banked
  1669  0002A8  23C9               	addwfc	(??_main+3)& (0+255),f,b
  1670  0002AA  0100               	movlb	0	; () banked
  1671  0002AC  51C8               	movf	(??_main+2)& (0+255),w,b
  1672  0002AE  0100               	movlb	0	; () banked
  1673  0002B0  11C9               	iorwf	(??_main+3)& (0+255),w,b
  1674  0002B2  A4D8               	btfss	status,2,c
  1675  0002B4  D034               	goto	l4520
  1676                           
  1677                           ; BSR set to: 0
  1678  0002B6  0101               	movlb	1	; () banked
  1679  0002B8  5157               	movf	main@n& (0+255),w,b
  1680  0002BA  0101               	movlb	1	; () banked
  1681  0002BC  B4D8               	btfsc	status,2,c
  1682  0002BE  D02F               	goto	l4520
  1683                           
  1684                           ; BSR set to: 1
  1685                           ;main.c: 99: {
  1686                           ;main.c: 100: buffer[n] = '?';
  1687  0002C0  0101               	movlb	1	; () banked
  1688  0002C2  5157               	movf	main@n& (0+255),w,b
  1689  0002C4  0D01               	mullw	1
  1690  0002C6  0E3A               	movlw	low main@buffer
  1691  0002C8  24F3               	addwf	prodl,w,c
  1692  0002CA  6ED9               	movwf	fsr2l,c
  1693  0002CC  0E01               	movlw	high main@buffer
  1694  0002CE  20F4               	addwfc	prodh,w,c
  1695  0002D0  6EDA               	movwf	fsr2h,c
  1696  0002D2  0E3F               	movlw	63
  1697  0002D4  6EDF               	movwf	indf2,c
  1698                           
  1699                           ; BSR set to: 1
  1700                           ;main.c: 101: Lcd_Set_Cursor(2, 7 + n);
  1701  0002D6  0101               	movlb	1	; () banked
  1702  0002D8  5157               	movf	main@n& (0+255),w,b
  1703  0002DA  0F07               	addlw	7
  1704  0002DC  6E12               	movwf	Lcd_Set_Cursor@b,c
  1705  0002DE  0E02               	movlw	2
  1706  0002E0  EC2B  F00D         	call	_Lcd_Set_Cursor
  1707                           
  1708                           ;main.c: 102: Lcd_Write_Char('_');
  1709  0002E4  0E5F               	movlw	95
  1710  0002E6  ECB6  F00D         	call	_Lcd_Write_Char
  1711                           
  1712                           ;main.c: 103: latch_keypad(&x);
  1713  0002EA  0E58               	movlw	low main@x
  1714  0002EC  6E10               	movwf	latch_keypad@x,c
  1715  0002EE  0E01               	movlw	high main@x
  1716  0002F0  6E11               	movwf	latch_keypad@x+1,c
  1717  0002F2  EC9A  F00D         	call	_latch_keypad	;wreg free
  1718                           
  1719                           ;main.c: 104: Lcd_Set_Cursor(2, 8 + n);
  1720  0002F6  0101               	movlb	1	; () banked
  1721  0002F8  5157               	movf	main@n& (0+255),w,b
  1722  0002FA  0F08               	addlw	8
  1723  0002FC  6E12               	movwf	Lcd_Set_Cursor@b,c
  1724  0002FE  0E02               	movlw	2
  1725  000300  EC2B  F00D         	call	_Lcd_Set_Cursor
  1726                           
  1727                           ;main.c: 105: Lcd_Write_Char(' ');
  1728  000304  0E20               	movlw	32
  1729  000306  ECB6  F00D         	call	_Lcd_Write_Char
  1730                           
  1731                           ;main.c: 106: Lcd_Set_Cursor(2, 7 + n);
  1732  00030A  0101               	movlb	1	; () banked
  1733  00030C  5157               	movf	main@n& (0+255),w,b
  1734  00030E  0F07               	addlw	7
  1735  000310  6E12               	movwf	Lcd_Set_Cursor@b,c
  1736  000312  0E02               	movlw	2
  1737  000314  EC2B  F00D         	call	_Lcd_Set_Cursor
  1738                           
  1739                           ;main.c: 107: n--;
  1740  000318  0101               	movlb	1	; () banked
  1741  00031A  0757               	decf	main@n& (0+255),f,b
  1742                           
  1743                           ;main.c: 108: }
  1744  00031C  D056               	goto	l4538
  1745  00031E                     l4520:
  1746                           
  1747                           ;main.c: 109: else if ((x - '#') != 0)
  1748  00031E  0EDD               	movlw	221
  1749  000320  0100               	movlb	0	; () banked
  1750  000322  6FC6               	movwf	??_main& (0+255),b
  1751  000324  0EFF               	movlw	255
  1752  000326  0100               	movlb	0	; () banked
  1753  000328  6FC7               	movwf	(??_main+1)& (0+255),b
  1754  00032A  0101               	movlb	1	; () banked
  1755  00032C  5158               	movf	main@x& (0+255),w,b
  1756  00032E  0100               	movlb	0	; () banked
  1757  000330  6FC8               	movwf	(??_main+2)& (0+255),b
  1758  000332  6BC9               	clrf	(??_main+3)& (0+255),b
  1759  000334  0100               	movlb	0	; () banked
  1760  000336  51C6               	movf	??_main& (0+255),w,b
  1761  000338  0100               	movlb	0	; () banked
  1762  00033A  27C8               	addwf	(??_main+2)& (0+255),f,b
  1763  00033C  0100               	movlb	0	; () banked
  1764  00033E  51C7               	movf	(??_main+1)& (0+255),w,b
  1765  000340  0100               	movlb	0	; () banked
  1766  000342  23C9               	addwfc	(??_main+3)& (0+255),f,b
  1767  000344  0100               	movlb	0	; () banked
  1768  000346  51C8               	movf	(??_main+2)& (0+255),w,b
  1769  000348  0100               	movlb	0	; () banked
  1770  00034A  11C9               	iorwf	(??_main+3)& (0+255),w,b
  1771  00034C  B4D8               	btfsc	status,2,c
  1772  00034E  D03D               	goto	l4538
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;main.c: 110: {
  1776                           ;main.c: 111: if ((x == '*')|(n == 9))
  1777  000350  0E2A               	movlw	42
  1778  000352  0101               	movlb	1	; () banked
  1779  000354  1958               	xorwf	main@x& (0+255),w,b
  1780  000356  B4D8               	btfsc	status,2,c
  1781  000358  D03C               	goto	l4540
  1782                           
  1783                           ; BSR set to: 1
  1784  00035A  0E09               	movlw	9
  1785  00035C  0101               	movlb	1	; () banked
  1786  00035E  1957               	xorwf	main@n& (0+255),w,b
  1787  000360  B4D8               	btfsc	status,2,c
  1788  000362  D037               	goto	l4540
  1789                           
  1790                           ; BSR set to: 1
  1791                           ;main.c: 114: }
  1792                           ;main.c: 115: n++;
  1793                           
  1794                           ; BSR set to: 1
  1795                           
  1796                           ; BSR set to: 1
  1797                           ;main.c: 112: {
  1798                           ;main.c: 113: break;
  1799  000364  0101               	movlb	1	; () banked
  1800  000366  2B57               	incf	main@n& (0+255),f,b
  1801                           
  1802                           ; BSR set to: 1
  1803                           ;main.c: 116: buffer[n-1] = x;
  1804  000368  0EFF               	movlw	255
  1805  00036A  0100               	movlb	0	; () banked
  1806  00036C  6FC6               	movwf	??_main& (0+255),b
  1807  00036E  0EFF               	movlw	255
  1808  000370  0100               	movlb	0	; () banked
  1809  000372  6FC7               	movwf	(??_main+1)& (0+255),b
  1810  000374  0101               	movlb	1	; () banked
  1811  000376  5157               	movf	main@n& (0+255),w,b
  1812  000378  0100               	movlb	0	; () banked
  1813  00037A  6FC8               	movwf	(??_main+2)& (0+255),b
  1814  00037C  6BC9               	clrf	(??_main+3)& (0+255),b
  1815  00037E  0100               	movlb	0	; () banked
  1816  000380  51C6               	movf	??_main& (0+255),w,b
  1817  000382  0100               	movlb	0	; () banked
  1818  000384  27C8               	addwf	(??_main+2)& (0+255),f,b
  1819  000386  0100               	movlb	0	; () banked
  1820  000388  51C7               	movf	(??_main+1)& (0+255),w,b
  1821  00038A  0100               	movlb	0	; () banked
  1822  00038C  23C9               	addwfc	(??_main+3)& (0+255),f,b
  1823  00038E  0E3A               	movlw	low main@buffer
  1824  000390  0100               	movlb	0	; () banked
  1825  000392  25C8               	addwf	(??_main+2)& (0+255),w,b
  1826  000394  6ED9               	movwf	fsr2l,c
  1827  000396  0E01               	movlw	high main@buffer
  1828  000398  0100               	movlb	0	; () banked
  1829  00039A  21C9               	addwfc	(??_main+3)& (0+255),w,b
  1830  00039C  6EDA               	movwf	fsr2h,c
  1831  00039E  C158  FFDF         	movff	main@x,indf2
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;main.c: 117: Lcd_Set_Cursor(2, 7 + n);
  1835  0003A2  0101               	movlb	1	; () banked
  1836  0003A4  5157               	movf	main@n& (0+255),w,b
  1837  0003A6  0F07               	addlw	7
  1838  0003A8  6E12               	movwf	Lcd_Set_Cursor@b,c
  1839  0003AA  0E02               	movlw	2
  1840  0003AC  EC2B  F00D         	call	_Lcd_Set_Cursor
  1841                           
  1842                           ;main.c: 118: Lcd_Write_Char(x);
  1843  0003B0  0101               	movlb	1	; () banked
  1844  0003B2  5158               	movf	main@x& (0+255),w,b
  1845  0003B4  ECB6  F00D         	call	_Lcd_Write_Char
  1846                           
  1847                           ;main.c: 119: Lcd_Write_Char('_');
  1848  0003B8  0E5F               	movlw	95
  1849  0003BA  ECB6  F00D         	call	_Lcd_Write_Char
  1850                           
  1851                           ;main.c: 120: latch_keypad(&x);
  1852  0003BE  0E58               	movlw	low main@x
  1853  0003C0  6E10               	movwf	latch_keypad@x,c
  1854  0003C2  0E01               	movlw	high main@x
  1855  0003C4  6E11               	movwf	latch_keypad@x+1,c
  1856  0003C6  EC9A  F00D         	call	_latch_keypad	;wreg free
  1857  0003CA                     l4538:
  1858  0003CA  0E09               	movlw	9
  1859  0003CC  0101               	movlb	1	; () banked
  1860  0003CE  6557               	cpfsgt	main@n& (0+255),b
  1861  0003D0  D72C               	goto	l4488
  1862  0003D2                     l4540:
  1863                           
  1864                           ; BSR set to: 1
  1865                           ;main.c: 121: }
  1866                           ;main.c: 122: }
  1867                           ;main.c: 123: }
  1868                           ;main.c: 124: for (int i = 0; i < n; i++)
  1869  0003D2  0E00               	movlw	0
  1870  0003D4  0101               	movlb	1	; () banked
  1871  0003D6  6F51               	movwf	(main@i_775+1)& (0+255),b
  1872  0003D8  0E00               	movlw	0
  1873  0003DA  6F50               	movwf	main@i_775& (0+255),b
  1874  0003DC  D075               	goto	l4548
  1875  0003DE                     l4542:
  1876                           
  1877                           ;main.c: 125: {
  1878                           ;main.c: 126: current_user[8 - i] = buffer[(n-1) - i];
  1879  0003DE  0EFF               	movlw	255
  1880  0003E0  0100               	movlb	0	; () banked
  1881  0003E2  6FC6               	movwf	??_main& (0+255),b
  1882  0003E4  0EFF               	movlw	255
  1883  0003E6  0100               	movlb	0	; () banked
  1884  0003E8  6FC7               	movwf	(??_main+1)& (0+255),b
  1885  0003EA  C150  F0C8         	movff	main@i_775,??_main+2
  1886  0003EE  C151  F0C9         	movff	main@i_775+1,??_main+3
  1887  0003F2  0100               	movlb	0	; () banked
  1888  0003F4  1FC8               	comf	(??_main+2)& (0+255),f,b
  1889  0003F6  1FC9               	comf	(??_main+3)& (0+255),f,b
  1890  0003F8  4BC8               	infsnz	(??_main+2)& (0+255),f,b
  1891  0003FA  2BC9               	incf	(??_main+3)& (0+255),f,b
  1892  0003FC  0101               	movlb	1	; () banked
  1893  0003FE  5157               	movf	main@n& (0+255),w,b
  1894  000400  0100               	movlb	0	; () banked
  1895  000402  6FCA               	movwf	(??_main+4)& (0+255),b
  1896  000404  6BCB               	clrf	(??_main+5)& (0+255),b
  1897  000406  0100               	movlb	0	; () banked
  1898  000408  51C8               	movf	(??_main+2)& (0+255),w,b
  1899  00040A  0100               	movlb	0	; () banked
  1900  00040C  27CA               	addwf	(??_main+4)& (0+255),f,b
  1901  00040E  0100               	movlb	0	; () banked
  1902  000410  51C9               	movf	(??_main+3)& (0+255),w,b
  1903  000412  0100               	movlb	0	; () banked
  1904  000414  23CB               	addwfc	(??_main+5)& (0+255),f,b
  1905  000416  0100               	movlb	0	; () banked
  1906  000418  51C6               	movf	??_main& (0+255),w,b
  1907  00041A  0100               	movlb	0	; () banked
  1908  00041C  27CA               	addwf	(??_main+4)& (0+255),f,b
  1909  00041E  0100               	movlb	0	; () banked
  1910  000420  51C7               	movf	(??_main+1)& (0+255),w,b
  1911  000422  0100               	movlb	0	; () banked
  1912  000424  23CB               	addwfc	(??_main+5)& (0+255),f,b
  1913  000426  0E3A               	movlw	low main@buffer
  1914  000428  0100               	movlb	0	; () banked
  1915  00042A  25CA               	addwf	(??_main+4)& (0+255),w,b
  1916  00042C  6ED9               	movwf	fsr2l,c
  1917  00042E  0E01               	movlw	high main@buffer
  1918  000430  0100               	movlb	0	; () banked
  1919  000432  21CB               	addwfc	(??_main+5)& (0+255),w,b
  1920  000434  6EDA               	movwf	fsr2h,c
  1921  000436  C150  F0CC         	movff	main@i_775,??_main+6
  1922  00043A  C151  F0CD         	movff	main@i_775+1,??_main+7
  1923  00043E  0100               	movlb	0	; () banked
  1924  000440  1FCC               	comf	(??_main+6)& (0+255),f,b
  1925  000442  1FCD               	comf	(??_main+7)& (0+255),f,b
  1926  000444  4BCC               	infsnz	(??_main+6)& (0+255),f,b
  1927  000446  2BCD               	incf	(??_main+7)& (0+255),f,b
  1928  000448  0E08               	movlw	8
  1929  00044A  0100               	movlb	0	; () banked
  1930  00044C  27CC               	addwf	(??_main+6)& (0+255),f,b
  1931  00044E  0E00               	movlw	0
  1932  000450  23CD               	addwfc	(??_main+7)& (0+255),f,b
  1933  000452  0ED7               	movlw	low _current_user
  1934  000454  0100               	movlb	0	; () banked
  1935  000456  25CC               	addwf	(??_main+6)& (0+255),w,b
  1936  000458  6EE1               	movwf	fsr1l,c
  1937  00045A  0E00               	movlw	high _current_user
  1938  00045C  0100               	movlb	0	; () banked
  1939  00045E  21CD               	addwfc	(??_main+7)& (0+255),w,b
  1940  000460  6EE2               	movwf	fsr1h,c
  1941  000462  CFDF FFE7          	movff	indf2,indf1
  1942                           
  1943                           ; BSR set to: 0
  1944                           ;main.c: 127: buffer[(n-1) - i] = '0';
  1945  000466  0EFF               	movlw	255
  1946  000468  0100               	movlb	0	; () banked
  1947  00046A  6FC6               	movwf	??_main& (0+255),b
  1948  00046C  0EFF               	movlw	255
  1949  00046E  0100               	movlb	0	; () banked
  1950  000470  6FC7               	movwf	(??_main+1)& (0+255),b
  1951  000472  C150  F0C8         	movff	main@i_775,??_main+2
  1952  000476  C151  F0C9         	movff	main@i_775+1,??_main+3
  1953  00047A  0100               	movlb	0	; () banked
  1954  00047C  1FC8               	comf	(??_main+2)& (0+255),f,b
  1955  00047E  1FC9               	comf	(??_main+3)& (0+255),f,b
  1956  000480  4BC8               	infsnz	(??_main+2)& (0+255),f,b
  1957  000482  2BC9               	incf	(??_main+3)& (0+255),f,b
  1958  000484  0101               	movlb	1	; () banked
  1959  000486  5157               	movf	main@n& (0+255),w,b
  1960  000488  0100               	movlb	0	; () banked
  1961  00048A  6FCA               	movwf	(??_main+4)& (0+255),b
  1962  00048C  6BCB               	clrf	(??_main+5)& (0+255),b
  1963  00048E  0100               	movlb	0	; () banked
  1964  000490  51C8               	movf	(??_main+2)& (0+255),w,b
  1965  000492  0100               	movlb	0	; () banked
  1966  000494  27CA               	addwf	(??_main+4)& (0+255),f,b
  1967  000496  0100               	movlb	0	; () banked
  1968  000498  51C9               	movf	(??_main+3)& (0+255),w,b
  1969  00049A  0100               	movlb	0	; () banked
  1970  00049C  23CB               	addwfc	(??_main+5)& (0+255),f,b
  1971  00049E  0100               	movlb	0	; () banked
  1972  0004A0  51C6               	movf	??_main& (0+255),w,b
  1973  0004A2  0100               	movlb	0	; () banked
  1974  0004A4  27CA               	addwf	(??_main+4)& (0+255),f,b
  1975  0004A6  0100               	movlb	0	; () banked
  1976  0004A8  51C7               	movf	(??_main+1)& (0+255),w,b
  1977  0004AA  0100               	movlb	0	; () banked
  1978  0004AC  23CB               	addwfc	(??_main+5)& (0+255),f,b
  1979  0004AE  0E3A               	movlw	low main@buffer
  1980  0004B0  0100               	movlb	0	; () banked
  1981  0004B2  25CA               	addwf	(??_main+4)& (0+255),w,b
  1982  0004B4  6ED9               	movwf	fsr2l,c
  1983  0004B6  0E01               	movlw	high main@buffer
  1984  0004B8  0100               	movlb	0	; () banked
  1985  0004BA  21CB               	addwfc	(??_main+5)& (0+255),w,b
  1986  0004BC  6EDA               	movwf	fsr2h,c
  1987  0004BE  0E30               	movlw	48
  1988  0004C0  6EDF               	movwf	indf2,c
  1989                           
  1990                           ; BSR set to: 0
  1991  0004C2  0101               	movlb	1	; () banked
  1992  0004C4  4B50               	infsnz	main@i_775& (0+255),f,b
  1993  0004C6  2B51               	incf	(main@i_775+1)& (0+255),f,b
  1994  0004C8                     l4548:
  1995                           
  1996                           ; BSR set to: 1
  1997  0004C8  0101               	movlb	1	; () banked
  1998  0004CA  5157               	movf	main@n& (0+255),w,b
  1999  0004CC  0100               	movlb	0	; () banked
  2000  0004CE  6FC6               	movwf	??_main& (0+255),b
  2001  0004D0  6BC7               	clrf	(??_main+1)& (0+255),b
  2002  0004D2  0100               	movlb	0	; () banked
  2003  0004D4  51C6               	movf	??_main& (0+255),w,b
  2004  0004D6  0101               	movlb	1	; () banked
  2005  0004D8  5D50               	subwf	main@i_775& (0+255),w,b
  2006  0004DA  0101               	movlb	1	; () banked
  2007  0004DC  5151               	movf	(main@i_775+1)& (0+255),w,b
  2008  0004DE  0A80               	xorlw	128
  2009  0004E0  0100               	movlb	0	; () banked
  2010  0004E2  6FC8               	movwf	(??_main+2)& (0+255),b
  2011  0004E4  0100               	movlb	0	; () banked
  2012  0004E6  51C7               	movf	(??_main+1)& (0+255),w,b
  2013  0004E8  0A80               	xorlw	128
  2014  0004EA  0100               	movlb	0	; () banked
  2015  0004EC  59C8               	subwfb	(??_main+2)& (0+255),w,b
  2016  0004EE  A0D8               	btfss	status,0,c
  2017  0004F0  D776               	goto	l4542
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;main.c: 128: }
  2021                           ;main.c: 129: menu_progress_bar(25);
  2022                           
  2023                           ; BSR set to: 0
  2024  0004F2  0E00               	movlw	0
  2025  0004F4  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  2026  0004F6  0E19               	movlw	25
  2027  0004F8  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  2028  0004FA  EC50  F00A         	call	_menu_progress_bar	;wreg free
  2029                           
  2030                           ;main.c: 131: p = 0;
  2031  0004FE  0E00               	movlw	0
  2032  000500  0101               	movlb	1	; () banked
  2033  000502  6F56               	movwf	main@p& (0+255),b
  2034                           
  2035                           ; BSR set to: 1
  2036                           ;main.c: 132: Lcd_Set_Cursor(1,1);
  2037  000504  0E01               	movlw	1
  2038  000506  6E12               	movwf	Lcd_Set_Cursor@b,c
  2039  000508  0E01               	movlw	1
  2040  00050A  EC2B  F00D         	call	_Lcd_Set_Cursor
  2041                           
  2042                           ;main.c: 133: Lcd_Write_String("Enter your PIN: ");
  2043  00050E  0E42               	movlw	low STR_5
  2044  000510  6E14               	movwf	Lcd_Write_String@a,c
  2045  000512  0E7F               	movlw	high STR_5
  2046  000514  6E15               	movwf	Lcd_Write_String@a+1,c
  2047  000516  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  2048                           
  2049                           ;main.c: 134: Lcd_Set_Cursor(2,1);
  2050  00051A  0E01               	movlw	1
  2051  00051C  6E12               	movwf	Lcd_Set_Cursor@b,c
  2052  00051E  0E02               	movlw	2
  2053  000520  EC2B  F00D         	call	_Lcd_Set_Cursor
  2054                           
  2055                           ;main.c: 135: Lcd_Write_String("[ ]             ");
  2056  000524  0EBA               	movlw	low STR_4
  2057  000526  6E14               	movwf	Lcd_Write_String@a,c
  2058  000528  0E7E               	movlw	high STR_4
  2059  00052A  6E15               	movwf	Lcd_Write_String@a+1,c
  2060  00052C  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  2061                           
  2062                           ;main.c: 136: Lcd_Set_Cursor(2,1);
  2063  000530  0E01               	movlw	1
  2064  000532  6E12               	movwf	Lcd_Set_Cursor@b,c
  2065  000534  0E02               	movlw	2
  2066  000536  EC2B  F00D         	call	_Lcd_Set_Cursor
  2067                           
  2068                           ;main.c: 137: while (p < 10)
  2069  00053A  D0D8               	goto	l4616
  2070  00053C                     l4564:
  2071                           
  2072                           ;main.c: 138: {
  2073                           ;main.c: 139: if (p == 9)
  2074  00053C  0E09               	movlw	9
  2075  00053E  0101               	movlb	1	; () banked
  2076  000540  1956               	xorwf	main@p& (0+255),w,b
  2077  000542  B4D8               	btfsc	status,2,c
  2078  000544  D0D7               	goto	l4618
  2079                           
  2080                           ; BSR set to: 1
  2081                           ;main.c: 141: char c[] = {'0','1','2','3','4','5','6','7','8','9'};
  2082                           
  2083                           ; BSR set to: 1
  2084                           
  2085                           ; BSR set to: 1
  2086                           ;main.c: 140: break;
  2087  000546  EE20  F08A         	lfsr	2,main@F3681
  2088  00054A  EE11  F030         	lfsr	1,main@c
  2089  00054E  0E09               	movlw	9
  2090  000550                     u4391:
  2091  000550  CFDB FFE3          	movff	plusw2,plusw1
  2092  000554  06E8               	decf	wreg,f,c
  2093  000556  E2FC               	bc	u4391
  2094                           
  2095                           ; BSR set to: 1
  2096                           ;main.c: 142: Lcd_Set_Cursor(2,2);
  2097  000558  0E02               	movlw	2
  2098  00055A  6E12               	movwf	Lcd_Set_Cursor@b,c
  2099  00055C  0E02               	movlw	2
  2100  00055E  EC2B  F00D         	call	_Lcd_Set_Cursor
  2101                           
  2102                           ;main.c: 143: Lcd_Write_Char(c[9-p]);
  2103  000562  0101               	movlb	1	; () banked
  2104  000564  5156               	movf	main@p& (0+255),w,b
  2105  000566  0100               	movlb	0	; () banked
  2106  000568  6FC6               	movwf	??_main& (0+255),b
  2107  00056A  6BC7               	clrf	(??_main+1)& (0+255),b
  2108  00056C  0100               	movlb	0	; () banked
  2109  00056E  1FC6               	comf	??_main& (0+255),f,b
  2110  000570  1FC7               	comf	(??_main+1)& (0+255),f,b
  2111  000572  4BC6               	infsnz	??_main& (0+255),f,b
  2112  000574  2BC7               	incf	(??_main+1)& (0+255),f,b
  2113  000576  0E09               	movlw	9
  2114  000578  0100               	movlb	0	; () banked
  2115  00057A  27C6               	addwf	??_main& (0+255),f,b
  2116  00057C  0E00               	movlw	0
  2117  00057E  23C7               	addwfc	(??_main+1)& (0+255),f,b
  2118  000580  0E30               	movlw	low main@c
  2119  000582  0100               	movlb	0	; () banked
  2120  000584  25C6               	addwf	??_main& (0+255),w,b
  2121  000586  6ED9               	movwf	fsr2l,c
  2122  000588  0E01               	movlw	high main@c
  2123  00058A  0100               	movlb	0	; () banked
  2124  00058C  21C7               	addwfc	(??_main+1)& (0+255),w,b
  2125  00058E  6EDA               	movwf	fsr2h,c
  2126  000590  50DF               	movf	indf2,w,c
  2127  000592  ECB6  F00D         	call	_Lcd_Write_Char
  2128                           
  2129                           ;main.c: 144: x = read_keypad();
  2130  000596  EC7C  F00B         	call	_read_keypad	;wreg free
  2131  00059A  0101               	movlb	1	; () banked
  2132  00059C  6F58               	movwf	main@x& (0+255),b
  2133                           
  2134                           ; BSR set to: 1
  2135                           ;main.c: 145: if (x != '_')
  2136  00059E  0E5F               	movlw	95
  2137  0005A0  0101               	movlb	1	; () banked
  2138  0005A2  1958               	xorwf	main@x& (0+255),w,b
  2139  0005A4  B4D8               	btfsc	status,2,c
  2140  0005A6  D0A2               	goto	l4616
  2141                           
  2142                           ; BSR set to: 1
  2143                           ;main.c: 146: {
  2144                           ;main.c: 147: if (((x - '#') == 0)&&(p > 0))
  2145  0005A8  0EDD               	movlw	221
  2146  0005AA  0100               	movlb	0	; () banked
  2147  0005AC  6FC6               	movwf	??_main& (0+255),b
  2148  0005AE  0EFF               	movlw	255
  2149  0005B0  0100               	movlb	0	; () banked
  2150  0005B2  6FC7               	movwf	(??_main+1)& (0+255),b
  2151  0005B4  0101               	movlb	1	; () banked
  2152  0005B6  5158               	movf	main@x& (0+255),w,b
  2153  0005B8  0100               	movlb	0	; () banked
  2154  0005BA  6FC8               	movwf	(??_main+2)& (0+255),b
  2155  0005BC  6BC9               	clrf	(??_main+3)& (0+255),b
  2156  0005BE  0100               	movlb	0	; () banked
  2157  0005C0  51C6               	movf	??_main& (0+255),w,b
  2158  0005C2  0100               	movlb	0	; () banked
  2159  0005C4  27C8               	addwf	(??_main+2)& (0+255),f,b
  2160  0005C6  0100               	movlb	0	; () banked
  2161  0005C8  51C7               	movf	(??_main+1)& (0+255),w,b
  2162  0005CA  0100               	movlb	0	; () banked
  2163  0005CC  23C9               	addwfc	(??_main+3)& (0+255),f,b
  2164  0005CE  0100               	movlb	0	; () banked
  2165  0005D0  51C8               	movf	(??_main+2)& (0+255),w,b
  2166  0005D2  0100               	movlb	0	; () banked
  2167  0005D4  11C9               	iorwf	(??_main+3)& (0+255),w,b
  2168  0005D6  A4D8               	btfss	status,2,c
  2169  0005D8  D034               	goto	l4598
  2170                           
  2171                           ; BSR set to: 0
  2172  0005DA  0101               	movlb	1	; () banked
  2173  0005DC  5156               	movf	main@p& (0+255),w,b
  2174  0005DE  0101               	movlb	1	; () banked
  2175  0005E0  B4D8               	btfsc	status,2,c
  2176  0005E2  D02F               	goto	l4598
  2177                           
  2178                           ; BSR set to: 1
  2179                           ;main.c: 148: {
  2180                           ;main.c: 149: buffer[p] = '?';
  2181  0005E4  0101               	movlb	1	; () banked
  2182  0005E6  5156               	movf	main@p& (0+255),w,b
  2183  0005E8  0D01               	mullw	1
  2184  0005EA  0E3A               	movlw	low main@buffer
  2185  0005EC  24F3               	addwf	prodl,w,c
  2186  0005EE  6ED9               	movwf	fsr2l,c
  2187  0005F0  0E01               	movlw	high main@buffer
  2188  0005F2  20F4               	addwfc	prodh,w,c
  2189  0005F4  6EDA               	movwf	fsr2h,c
  2190  0005F6  0E3F               	movlw	63
  2191  0005F8  6EDF               	movwf	indf2,c
  2192                           
  2193                           ; BSR set to: 1
  2194                           ;main.c: 150: Lcd_Set_Cursor(2, 7 + p);
  2195  0005FA  0101               	movlb	1	; () banked
  2196  0005FC  5156               	movf	main@p& (0+255),w,b
  2197  0005FE  0F07               	addlw	7
  2198  000600  6E12               	movwf	Lcd_Set_Cursor@b,c
  2199  000602  0E02               	movlw	2
  2200  000604  EC2B  F00D         	call	_Lcd_Set_Cursor
  2201                           
  2202                           ;main.c: 151: Lcd_Write_Char('_');
  2203  000608  0E5F               	movlw	95
  2204  00060A  ECB6  F00D         	call	_Lcd_Write_Char
  2205                           
  2206                           ;main.c: 152: latch_keypad(&x);
  2207  00060E  0E58               	movlw	low main@x
  2208  000610  6E10               	movwf	latch_keypad@x,c
  2209  000612  0E01               	movlw	high main@x
  2210  000614  6E11               	movwf	latch_keypad@x+1,c
  2211  000616  EC9A  F00D         	call	_latch_keypad	;wreg free
  2212                           
  2213                           ;main.c: 153: Lcd_Set_Cursor(2, 8 + p);
  2214  00061A  0101               	movlb	1	; () banked
  2215  00061C  5156               	movf	main@p& (0+255),w,b
  2216  00061E  0F08               	addlw	8
  2217  000620  6E12               	movwf	Lcd_Set_Cursor@b,c
  2218  000622  0E02               	movlw	2
  2219  000624  EC2B  F00D         	call	_Lcd_Set_Cursor
  2220                           
  2221                           ;main.c: 154: Lcd_Write_Char(' ');
  2222  000628  0E20               	movlw	32
  2223  00062A  ECB6  F00D         	call	_Lcd_Write_Char
  2224                           
  2225                           ;main.c: 155: Lcd_Set_Cursor(2, 7 + p);
  2226  00062E  0101               	movlb	1	; () banked
  2227  000630  5156               	movf	main@p& (0+255),w,b
  2228  000632  0F07               	addlw	7
  2229  000634  6E12               	movwf	Lcd_Set_Cursor@b,c
  2230  000636  0E02               	movlw	2
  2231  000638  EC2B  F00D         	call	_Lcd_Set_Cursor
  2232                           
  2233                           ;main.c: 156: p--;
  2234  00063C  0101               	movlb	1	; () banked
  2235  00063E  0756               	decf	main@p& (0+255),f,b
  2236                           
  2237                           ;main.c: 157: }
  2238  000640  D055               	goto	l4616
  2239  000642                     l4598:
  2240                           
  2241                           ;main.c: 158: else if ((x - '#') != 0)
  2242  000642  0EDD               	movlw	221
  2243  000644  0100               	movlb	0	; () banked
  2244  000646  6FC6               	movwf	??_main& (0+255),b
  2245  000648  0EFF               	movlw	255
  2246  00064A  0100               	movlb	0	; () banked
  2247  00064C  6FC7               	movwf	(??_main+1)& (0+255),b
  2248  00064E  0101               	movlb	1	; () banked
  2249  000650  5158               	movf	main@x& (0+255),w,b
  2250  000652  0100               	movlb	0	; () banked
  2251  000654  6FC8               	movwf	(??_main+2)& (0+255),b
  2252  000656  6BC9               	clrf	(??_main+3)& (0+255),b
  2253  000658  0100               	movlb	0	; () banked
  2254  00065A  51C6               	movf	??_main& (0+255),w,b
  2255  00065C  0100               	movlb	0	; () banked
  2256  00065E  27C8               	addwf	(??_main+2)& (0+255),f,b
  2257  000660  0100               	movlb	0	; () banked
  2258  000662  51C7               	movf	(??_main+1)& (0+255),w,b
  2259  000664  0100               	movlb	0	; () banked
  2260  000666  23C9               	addwfc	(??_main+3)& (0+255),f,b
  2261  000668  0100               	movlb	0	; () banked
  2262  00066A  51C8               	movf	(??_main+2)& (0+255),w,b
  2263  00066C  0100               	movlb	0	; () banked
  2264  00066E  11C9               	iorwf	(??_main+3)& (0+255),w,b
  2265  000670  B4D8               	btfsc	status,2,c
  2266  000672  D03C               	goto	l4616
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;main.c: 159: {
  2270                           ;main.c: 160: if ((x == '*')|(p == 9))
  2271  000674  0E2A               	movlw	42
  2272  000676  0101               	movlb	1	; () banked
  2273  000678  1958               	xorwf	main@x& (0+255),w,b
  2274  00067A  B4D8               	btfsc	status,2,c
  2275  00067C  D03B               	goto	l4618
  2276                           
  2277                           ; BSR set to: 1
  2278  00067E  0E09               	movlw	9
  2279  000680  0101               	movlb	1	; () banked
  2280  000682  1956               	xorwf	main@p& (0+255),w,b
  2281  000684  B4D8               	btfsc	status,2,c
  2282  000686  D036               	goto	l4618
  2283                           
  2284                           ; BSR set to: 1
  2285                           ;main.c: 163: }
  2286                           ;main.c: 164: p++;
  2287                           
  2288                           ; BSR set to: 1
  2289                           
  2290                           ; BSR set to: 1
  2291                           ;main.c: 161: {
  2292                           ;main.c: 162: break;
  2293  000688  0101               	movlb	1	; () banked
  2294  00068A  2B56               	incf	main@p& (0+255),f,b
  2295                           
  2296                           ; BSR set to: 1
  2297                           ;main.c: 165: buffer[p-1] = x;
  2298  00068C  0EFF               	movlw	255
  2299  00068E  0100               	movlb	0	; () banked
  2300  000690  6FC6               	movwf	??_main& (0+255),b
  2301  000692  0EFF               	movlw	255
  2302  000694  0100               	movlb	0	; () banked
  2303  000696  6FC7               	movwf	(??_main+1)& (0+255),b
  2304  000698  0101               	movlb	1	; () banked
  2305  00069A  5156               	movf	main@p& (0+255),w,b
  2306  00069C  0100               	movlb	0	; () banked
  2307  00069E  6FC8               	movwf	(??_main+2)& (0+255),b
  2308  0006A0  6BC9               	clrf	(??_main+3)& (0+255),b
  2309  0006A2  0100               	movlb	0	; () banked
  2310  0006A4  51C6               	movf	??_main& (0+255),w,b
  2311  0006A6  0100               	movlb	0	; () banked
  2312  0006A8  27C8               	addwf	(??_main+2)& (0+255),f,b
  2313  0006AA  0100               	movlb	0	; () banked
  2314  0006AC  51C7               	movf	(??_main+1)& (0+255),w,b
  2315  0006AE  0100               	movlb	0	; () banked
  2316  0006B0  23C9               	addwfc	(??_main+3)& (0+255),f,b
  2317  0006B2  0E3A               	movlw	low main@buffer
  2318  0006B4  0100               	movlb	0	; () banked
  2319  0006B6  25C8               	addwf	(??_main+2)& (0+255),w,b
  2320  0006B8  6ED9               	movwf	fsr2l,c
  2321  0006BA  0E01               	movlw	high main@buffer
  2322  0006BC  0100               	movlb	0	; () banked
  2323  0006BE  21C9               	addwfc	(??_main+3)& (0+255),w,b
  2324  0006C0  6EDA               	movwf	fsr2h,c
  2325  0006C2  C158  FFDF         	movff	main@x,indf2
  2326                           
  2327                           ; BSR set to: 0
  2328                           ;main.c: 166: Lcd_Set_Cursor(2, 7 + p);
  2329  0006C6  0101               	movlb	1	; () banked
  2330  0006C8  5156               	movf	main@p& (0+255),w,b
  2331  0006CA  0F07               	addlw	7
  2332  0006CC  6E12               	movwf	Lcd_Set_Cursor@b,c
  2333  0006CE  0E02               	movlw	2
  2334  0006D0  EC2B  F00D         	call	_Lcd_Set_Cursor
  2335                           
  2336                           ;main.c: 167: Lcd_Write_Char('*');
  2337  0006D4  0E2A               	movlw	42
  2338  0006D6  ECB6  F00D         	call	_Lcd_Write_Char
  2339                           
  2340                           ;main.c: 168: Lcd_Write_Char('_');
  2341  0006DA  0E5F               	movlw	95
  2342  0006DC  ECB6  F00D         	call	_Lcd_Write_Char
  2343                           
  2344                           ;main.c: 169: latch_keypad(&x);
  2345  0006E0  0E58               	movlw	low main@x
  2346  0006E2  6E10               	movwf	latch_keypad@x,c
  2347  0006E4  0E01               	movlw	high main@x
  2348  0006E6  6E11               	movwf	latch_keypad@x+1,c
  2349  0006E8  EC9A  F00D         	call	_latch_keypad	;wreg free
  2350  0006EC                     l4616:
  2351  0006EC  0E09               	movlw	9
  2352  0006EE  0101               	movlb	1	; () banked
  2353  0006F0  6556               	cpfsgt	main@p& (0+255),b
  2354  0006F2  D724               	goto	l4564
  2355  0006F4                     l4618:
  2356                           
  2357                           ; BSR set to: 1
  2358                           ;main.c: 170: }
  2359                           ;main.c: 171: }
  2360                           ;main.c: 172: }
  2361                           ;main.c: 173: for (int i = 0; i < p; i++)
  2362  0006F4  0E00               	movlw	0
  2363  0006F6  0101               	movlb	1	; () banked
  2364  0006F8  6F4B               	movwf	(main@i_781+1)& (0+255),b
  2365  0006FA  0E00               	movlw	0
  2366  0006FC  6F4A               	movwf	main@i_781& (0+255),b
  2367  0006FE  D047               	goto	l4624
  2368  000700                     l4620:
  2369                           
  2370                           ;main.c: 174: current_pin[8 - i] = buffer[(p-1) - i];
  2371  000700  0EFF               	movlw	255
  2372  000702  0100               	movlb	0	; () banked
  2373  000704  6FC6               	movwf	??_main& (0+255),b
  2374  000706  0EFF               	movlw	255
  2375  000708  0100               	movlb	0	; () banked
  2376  00070A  6FC7               	movwf	(??_main+1)& (0+255),b
  2377  00070C  C14A  F0C8         	movff	main@i_781,??_main+2
  2378  000710  C14B  F0C9         	movff	main@i_781+1,??_main+3
  2379  000714  0100               	movlb	0	; () banked
  2380  000716  1FC8               	comf	(??_main+2)& (0+255),f,b
  2381  000718  1FC9               	comf	(??_main+3)& (0+255),f,b
  2382  00071A  4BC8               	infsnz	(??_main+2)& (0+255),f,b
  2383  00071C  2BC9               	incf	(??_main+3)& (0+255),f,b
  2384  00071E  0101               	movlb	1	; () banked
  2385  000720  5156               	movf	main@p& (0+255),w,b
  2386  000722  0100               	movlb	0	; () banked
  2387  000724  6FCA               	movwf	(??_main+4)& (0+255),b
  2388  000726  6BCB               	clrf	(??_main+5)& (0+255),b
  2389  000728  0100               	movlb	0	; () banked
  2390  00072A  51C8               	movf	(??_main+2)& (0+255),w,b
  2391  00072C  0100               	movlb	0	; () banked
  2392  00072E  27CA               	addwf	(??_main+4)& (0+255),f,b
  2393  000730  0100               	movlb	0	; () banked
  2394  000732  51C9               	movf	(??_main+3)& (0+255),w,b
  2395  000734  0100               	movlb	0	; () banked
  2396  000736  23CB               	addwfc	(??_main+5)& (0+255),f,b
  2397  000738  0100               	movlb	0	; () banked
  2398  00073A  51C6               	movf	??_main& (0+255),w,b
  2399  00073C  0100               	movlb	0	; () banked
  2400  00073E  27CA               	addwf	(??_main+4)& (0+255),f,b
  2401  000740  0100               	movlb	0	; () banked
  2402  000742  51C7               	movf	(??_main+1)& (0+255),w,b
  2403  000744  0100               	movlb	0	; () banked
  2404  000746  23CB               	addwfc	(??_main+5)& (0+255),f,b
  2405  000748  0E3A               	movlw	low main@buffer
  2406  00074A  0100               	movlb	0	; () banked
  2407  00074C  25CA               	addwf	(??_main+4)& (0+255),w,b
  2408  00074E  6ED9               	movwf	fsr2l,c
  2409  000750  0E01               	movlw	high main@buffer
  2410  000752  0100               	movlb	0	; () banked
  2411  000754  21CB               	addwfc	(??_main+5)& (0+255),w,b
  2412  000756  6EDA               	movwf	fsr2h,c
  2413  000758  C14A  F0CC         	movff	main@i_781,??_main+6
  2414  00075C  C14B  F0CD         	movff	main@i_781+1,??_main+7
  2415  000760  0100               	movlb	0	; () banked
  2416  000762  1FCC               	comf	(??_main+6)& (0+255),f,b
  2417  000764  1FCD               	comf	(??_main+7)& (0+255),f,b
  2418  000766  4BCC               	infsnz	(??_main+6)& (0+255),f,b
  2419  000768  2BCD               	incf	(??_main+7)& (0+255),f,b
  2420  00076A  0E08               	movlw	8
  2421  00076C  0100               	movlb	0	; () banked
  2422  00076E  27CC               	addwf	(??_main+6)& (0+255),f,b
  2423  000770  0E00               	movlw	0
  2424  000772  23CD               	addwfc	(??_main+7)& (0+255),f,b
  2425  000774  0ECE               	movlw	low _current_pin
  2426  000776  0100               	movlb	0	; () banked
  2427  000778  25CC               	addwf	(??_main+6)& (0+255),w,b
  2428  00077A  6EE1               	movwf	fsr1l,c
  2429  00077C  0E00               	movlw	high _current_pin
  2430  00077E  0100               	movlb	0	; () banked
  2431  000780  21CD               	addwfc	(??_main+7)& (0+255),w,b
  2432  000782  6EE2               	movwf	fsr1h,c
  2433  000784  CFDF FFE7          	movff	indf2,indf1
  2434                           
  2435                           ; BSR set to: 0
  2436  000788  0101               	movlb	1	; () banked
  2437  00078A  4B4A               	infsnz	main@i_781& (0+255),f,b
  2438  00078C  2B4B               	incf	(main@i_781+1)& (0+255),f,b
  2439  00078E                     l4624:
  2440                           
  2441                           ; BSR set to: 1
  2442  00078E  0101               	movlb	1	; () banked
  2443  000790  5156               	movf	main@p& (0+255),w,b
  2444  000792  0100               	movlb	0	; () banked
  2445  000794  6FC6               	movwf	??_main& (0+255),b
  2446  000796  6BC7               	clrf	(??_main+1)& (0+255),b
  2447  000798  0100               	movlb	0	; () banked
  2448  00079A  51C6               	movf	??_main& (0+255),w,b
  2449  00079C  0101               	movlb	1	; () banked
  2450  00079E  5D4A               	subwf	main@i_781& (0+255),w,b
  2451  0007A0  0101               	movlb	1	; () banked
  2452  0007A2  514B               	movf	(main@i_781+1)& (0+255),w,b
  2453  0007A4  0A80               	xorlw	128
  2454  0007A6  0100               	movlb	0	; () banked
  2455  0007A8  6FC8               	movwf	(??_main+2)& (0+255),b
  2456  0007AA  0100               	movlb	0	; () banked
  2457  0007AC  51C7               	movf	(??_main+1)& (0+255),w,b
  2458  0007AE  0A80               	xorlw	128
  2459  0007B0  0100               	movlb	0	; () banked
  2460  0007B2  59C8               	subwfb	(??_main+2)& (0+255),w,b
  2461  0007B4  A0D8               	btfss	status,0,c
  2462  0007B6  D7A4               	goto	l4620
  2463                           
  2464                           ; BSR set to: 0
  2465                           ;main.c: 175: menu_progress_bar(25);
  2466                           
  2467                           ; BSR set to: 0
  2468  0007B8  0E00               	movlw	0
  2469  0007BA  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  2470  0007BC  0E19               	movlw	25
  2471  0007BE  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  2472  0007C0  EC50  F00A         	call	_menu_progress_bar	;wreg free
  2473                           
  2474                           ;main.c: 179: load_i2c_registers();
  2475  0007C4  EC06  F00B         	call	_load_i2c_registers	;wreg free
  2476                           
  2477                           ;main.c: 180: i2c_w_reg[0] = '-';
  2478  0007C8  0E2D               	movlw	45
  2479  0007CA  0101               	movlb	1	; () banked
  2480  0007CC  6F00               	movwf	_i2c_w_reg& (0+255),b	;volatile
  2481  0007CE                     l4632:
  2482                           
  2483                           ; BSR set to: 1
  2484  0007CE  0E2D               	movlw	45
  2485  0007D0  0101               	movlb	1	; () banked
  2486  0007D2  1900               	xorwf	_i2c_w_reg& (0+255),w,b	;volatile
  2487  0007D4  B4D8               	btfsc	status,2,c
  2488  0007D6  D7FB               	goto	l4632
  2489                           
  2490                           ; BSR set to: 1
  2491                           ;main.c: 184: }
  2492                           ;main.c: 185: for (int i = 0; i < 32; i++)
  2493                           
  2494                           ; BSR set to: 1
  2495  0007D8  0E00               	movlw	0
  2496  0007DA  0101               	movlb	1	; () banked
  2497  0007DC  6F4D               	movwf	(main@i_782+1)& (0+255),b
  2498  0007DE  0E00               	movlw	0
  2499  0007E0  6F4C               	movwf	main@i_782& (0+255),b
  2500                           
  2501                           ; BSR set to: 1
  2502  0007E2  0101               	movlb	1	; () banked
  2503  0007E4  BF4D               	btfsc	(main@i_782+1)& (0+255),7,b
  2504  0007E6  D008               	goto	l4640
  2505  0007E8  0101               	movlb	1	; () banked
  2506  0007EA  514D               	movf	(main@i_782+1)& (0+255),w,b
  2507  0007EC  E119               	bnz	l230
  2508  0007EE  0E20               	movlw	32
  2509  0007F0  0101               	movlb	1	; () banked
  2510  0007F2  5D4C               	subwf	main@i_782& (0+255),w,b
  2511  0007F4  B0D8               	btfsc	status,0,c
  2512  0007F6  D014               	goto	l230
  2513  0007F8                     l4640:
  2514                           
  2515                           ; BSR set to: 1
  2516                           ;main.c: 186: i2c_r_reg[i] = '-';
  2517  0007F8  0E60               	movlw	low _i2c_r_reg
  2518  0007FA  0101               	movlb	1	; () banked
  2519  0007FC  254C               	addwf	main@i_782& (0+255),w,b
  2520  0007FE  6ED9               	movwf	fsr2l,c
  2521  000800  0E00               	movlw	high _i2c_r_reg
  2522  000802  0101               	movlb	1	; () banked
  2523  000804  214D               	addwfc	(main@i_782+1)& (0+255),w,b
  2524  000806  6EDA               	movwf	fsr2h,c
  2525  000808  0E2D               	movlw	45
  2526  00080A  6EDF               	movwf	indf2,c
  2527                           
  2528                           ; BSR set to: 1
  2529  00080C  0101               	movlb	1	; () banked
  2530  00080E  4B4C               	infsnz	main@i_782& (0+255),f,b
  2531  000810  2B4D               	incf	(main@i_782+1)& (0+255),f,b
  2532                           
  2533                           ; BSR set to: 1
  2534  000812  0101               	movlb	1	; () banked
  2535  000814  BF4D               	btfsc	(main@i_782+1)& (0+255),7,b
  2536  000816  D7F0               	goto	l4640
  2537  000818  0101               	movlb	1	; () banked
  2538  00081A  514D               	movf	(main@i_782+1)& (0+255),w,b
  2539  00081C  E101               	bnz	u4500
  2540  00081E  D7E7               	goto	L2
  2541  000820                     u4500:
  2542  000820                     l230:
  2543                           
  2544                           ; BSR set to: 1
  2545                           ;main.c: 187: unsigned char credential_state = i2c_w_reg[0];
  2546  000820  C100  F143         	movff	_i2c_w_reg,main@credential_state	;volatile
  2547                           
  2548                           ; BSR set to: 1
  2549                           ;main.c: 188: if (credential_state == 0xA1)
  2550  000824  0EA1               	movlw	161
  2551  000826  0101               	movlb	1	; () banked
  2552  000828  1943               	xorwf	main@credential_state& (0+255),w,b
  2553  00082A  A4D8               	btfss	status,2,c
  2554  00082C  D06B               	goto	l4682
  2555                           
  2556                           ; BSR set to: 1
  2557                           ;main.c: 189: {
  2558                           ;main.c: 190: for (int u = 0; u < 16; u++)
  2559  00082E  0E00               	movlw	0
  2560  000830  0101               	movlb	1	; () banked
  2561  000832  6F53               	movwf	(main@u+1)& (0+255),b
  2562  000834  0E00               	movlw	0
  2563  000836  6F52               	movwf	main@u& (0+255),b
  2564  000838                     l4650:
  2565                           
  2566                           ; BSR set to: 1
  2567  000838  0101               	movlb	1	; () banked
  2568  00083A  BF53               	btfsc	(main@u+1)& (0+255),7,b
  2569  00083C  D008               	goto	l4654
  2570  00083E  0101               	movlb	1	; () banked
  2571  000840  5153               	movf	(main@u+1)& (0+255),w,b
  2572  000842  E125               	bnz	l4660
  2573  000844  0E10               	movlw	16
  2574  000846  0101               	movlb	1	; () banked
  2575  000848  5D52               	subwf	main@u& (0+255),w,b
  2576  00084A  B0D8               	btfsc	status,0,c
  2577  00084C  D020               	goto	l4660
  2578  00084E                     l4654:
  2579                           
  2580                           ; BSR set to: 1
  2581                           ;main.c: 191: logged_user[u] = i2c_w_reg[u+1];
  2582  00084E  0E01               	movlw	1
  2583  000850  0101               	movlb	1	; () banked
  2584  000852  2552               	addwf	main@u& (0+255),w,b
  2585  000854  0100               	movlb	0	; () banked
  2586  000856  6FC6               	movwf	??_main& (0+255),b
  2587  000858  0E00               	movlw	0
  2588  00085A  0101               	movlb	1	; () banked
  2589  00085C  2153               	addwfc	(main@u+1)& (0+255),w,b
  2590  00085E  0100               	movlb	0	; () banked
  2591  000860  6FC7               	movwf	(??_main+1)& (0+255),b
  2592  000862  0E00               	movlw	low _i2c_w_reg
  2593  000864  0100               	movlb	0	; () banked
  2594  000866  25C6               	addwf	??_main& (0+255),w,b
  2595  000868  6ED9               	movwf	fsr2l,c
  2596  00086A  0E01               	movlw	high _i2c_w_reg
  2597  00086C  0100               	movlb	0	; () banked
  2598  00086E  21C7               	addwfc	(??_main+1)& (0+255),w,b
  2599  000870  6EDA               	movwf	fsr2h,c
  2600  000872  0E59               	movlw	low _logged_user
  2601  000874  0101               	movlb	1	; () banked
  2602  000876  2552               	addwf	main@u& (0+255),w,b
  2603  000878  6EE1               	movwf	fsr1l,c
  2604  00087A  0E01               	movlw	high _logged_user
  2605  00087C  0101               	movlb	1	; () banked
  2606  00087E  2153               	addwfc	(main@u+1)& (0+255),w,b
  2607  000880  6EE2               	movwf	fsr1h,c
  2608  000882  CFDF FFE7          	movff	indf2,indf1
  2609                           
  2610                           ; BSR set to: 1
  2611  000886  0101               	movlb	1	; () banked
  2612  000888  4B52               	infsnz	main@u& (0+255),f,b
  2613  00088A  2B53               	incf	(main@u+1)& (0+255),f,b
  2614  00088C  D7D5               	goto	l4650
  2615  00088E                     l4660:
  2616                           
  2617                           ; BSR set to: 1
  2618                           ;main.c: 192: Lcd_Set_Cursor(1,1);
  2619  00088E  0E01               	movlw	1
  2620  000890  6E12               	movwf	Lcd_Set_Cursor@b,c
  2621  000892  0E01               	movlw	1
  2622  000894  EC2B  F00D         	call	_Lcd_Set_Cursor
  2623                           
  2624                           ;main.c: 193: Lcd_Write_String("[Access Granted]");
  2625  000898  0ECA               	movlw	low STR_7
  2626  00089A  6E14               	movwf	Lcd_Write_String@a,c
  2627  00089C  0E7F               	movlw	high STR_7
  2628  00089E  6E15               	movwf	Lcd_Write_String@a+1,c
  2629  0008A0  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  2630                           
  2631                           ;main.c: 194: menu_progress_bar(100);
  2632  0008A4  0E00               	movlw	0
  2633  0008A6  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  2634  0008A8  0E64               	movlw	100
  2635  0008AA  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  2636  0008AC  EC50  F00A         	call	_menu_progress_bar	;wreg free
  2637                           
  2638                           ;main.c: 195: Lcd_Set_Cursor(2,1);
  2639  0008B0  0E01               	movlw	1
  2640  0008B2  6E12               	movwf	Lcd_Set_Cursor@b,c
  2641  0008B4  0E02               	movlw	2
  2642  0008B6  EC2B  F00D         	call	_Lcd_Set_Cursor
  2643                           
  2644                           ;main.c: 196: Lcd_Write_String("   [ Welcome ]  ");
  2645  0008BA  0E20               	movlw	low STR_8
  2646  0008BC  6E14               	movwf	Lcd_Write_String@a,c
  2647  0008BE  0E7F               	movlw	high STR_8
  2648  0008C0  6E15               	movwf	Lcd_Write_String@a+1,c
  2649  0008C2  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  2650                           
  2651                           ;main.c: 197: for (int i = 0; i < 30; i++)
  2652  0008C6  0E00               	movlw	0
  2653  0008C8  0101               	movlb	1	; () banked
  2654  0008CA  6F45               	movwf	(main@i_787+1)& (0+255),b
  2655  0008CC  0E00               	movlw	0
  2656  0008CE  6F44               	movwf	main@i_787& (0+255),b
  2657  0008D0                     l4672:
  2658                           
  2659                           ; BSR set to: 1
  2660  0008D0  0101               	movlb	1	; () banked
  2661  0008D2  BF45               	btfsc	(main@i_787+1)& (0+255),7,b
  2662  0008D4  D008               	goto	l4676
  2663  0008D6  0101               	movlb	1	; () banked
  2664  0008D8  5145               	movf	(main@i_787+1)& (0+255),w,b
  2665  0008DA  E111               	bnz	l4680
  2666  0008DC  0E1E               	movlw	30
  2667  0008DE  0101               	movlb	1	; () banked
  2668  0008E0  5D44               	subwf	main@i_787& (0+255),w,b
  2669  0008E2  B0D8               	btfsc	status,0,c
  2670  0008E4  D00C               	goto	l4680
  2671  0008E6                     l4676:
  2672                           
  2673                           ; BSR set to: 1
  2674                           ;main.c: 198: {
  2675                           ;main.c: 199: _delay((unsigned long)((10)*(16000000/4000.0)));
  2676  0008E6  0E34               	movlw	52
  2677  0008E8  0100               	movlb	0	; () banked
  2678  0008EA  6FC6               	movwf	??_main& (0+255),b
  2679  0008EC  0EF2               	movlw	242
  2680  0008EE                     u4627:
  2681  0008EE  2EE8               	decfsz	wreg,f,c
  2682  0008F0  D7FE               	goto	u4627
  2683  0008F2  2FC6               	decfsz	??_main& (0+255),f,b
  2684  0008F4  D7FC               	goto	u4627
  2685  0008F6  0101               	movlb	1	; () banked
  2686  0008F8  4B44               	infsnz	main@i_787& (0+255),f,b
  2687  0008FA  2B45               	incf	(main@i_787+1)& (0+255),f,b
  2688  0008FC  D7E9               	goto	l4672
  2689  0008FE                     l4680:
  2690                           
  2691                           ; BSR set to: 1
  2692                           ;main.c: 200: }
  2693                           ;main.c: 202: running_display();
  2694  0008FE  ECD1  F008         	call	_running_display	;wreg free
  2695                           
  2696                           ;main.c: 203: }
  2697  000902  D069               	goto	l4716
  2698  000904                     l4682:
  2699                           
  2700                           ;main.c: 204: else if (credential_state == 0xA0)
  2701  000904  0EA0               	movlw	160
  2702  000906  0101               	movlb	1	; () banked
  2703  000908  1943               	xorwf	main@credential_state& (0+255),w,b
  2704  00090A  A4D8               	btfss	status,2,c
  2705  00090C  D032               	goto	l4700
  2706                           
  2707                           ; BSR set to: 1
  2708                           ;main.c: 205: {
  2709                           ;main.c: 206: Lcd_Set_Cursor(1,1);
  2710  00090E  0E01               	movlw	1
  2711  000910  6E12               	movwf	Lcd_Set_Cursor@b,c
  2712  000912  0E01               	movlw	1
  2713  000914  EC2B  F00D         	call	_Lcd_Set_Cursor
  2714                           
  2715                           ;main.c: 207: Lcd_Write_String("[Access  Denied]");
  2716  000918  0EB9               	movlw	low STR_9
  2717  00091A  6E14               	movwf	Lcd_Write_String@a,c
  2718  00091C  0E7F               	movlw	high STR_9
  2719  00091E  6E15               	movwf	Lcd_Write_String@a+1,c
  2720  000920  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  2721                           
  2722                           ;main.c: 208: Lcd_Set_Cursor(2,1);
  2723  000924  0E01               	movlw	1
  2724  000926  6E12               	movwf	Lcd_Set_Cursor@b,c
  2725  000928  0E02               	movlw	2
  2726  00092A  EC2B  F00D         	call	_Lcd_Set_Cursor
  2727                           
  2728                           ;main.c: 209: Lcd_Write_String("    [ Retry ]   ");
  2729  00092E  0EDC               	movlw	low STR_10
  2730  000930  6E14               	movwf	Lcd_Write_String@a,c
  2731  000932  0E7E               	movlw	high STR_10
  2732  000934  6E15               	movwf	Lcd_Write_String@a+1,c
  2733  000936  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  2734                           
  2735                           ;main.c: 210: for (int i = 0; i < 100; i++)
  2736  00093A  0E00               	movlw	0
  2737  00093C  0101               	movlb	1	; () banked
  2738  00093E  6F47               	movwf	(main@i_790+1)& (0+255),b
  2739  000940  0E00               	movlw	0
  2740  000942  6F46               	movwf	main@i_790& (0+255),b
  2741  000944                     l4692:
  2742                           
  2743                           ; BSR set to: 1
  2744  000944  0101               	movlb	1	; () banked
  2745  000946  BF47               	btfsc	(main@i_790+1)& (0+255),7,b
  2746  000948  D008               	goto	l4696
  2747  00094A  0101               	movlb	1	; () banked
  2748  00094C  5147               	movf	(main@i_790+1)& (0+255),w,b
  2749  00094E  E143               	bnz	l4716
  2750  000950  0E64               	movlw	100
  2751  000952  0101               	movlb	1	; () banked
  2752  000954  5D46               	subwf	main@i_790& (0+255),w,b
  2753  000956  B0D8               	btfsc	status,0,c
  2754  000958  D03E               	goto	l4716
  2755  00095A                     l4696:
  2756                           
  2757                           ; BSR set to: 1
  2758                           ;main.c: 211: {
  2759                           ;main.c: 212: _delay((unsigned long)((10)*(16000000/4000.0)));
  2760  00095A  0E34               	movlw	52
  2761  00095C  0100               	movlb	0	; () banked
  2762  00095E  6FC6               	movwf	??_main& (0+255),b
  2763  000960  0EF2               	movlw	242
  2764  000962                     u4637:
  2765  000962  2EE8               	decfsz	wreg,f,c
  2766  000964  D7FE               	goto	u4637
  2767  000966  2FC6               	decfsz	??_main& (0+255),f,b
  2768  000968  D7FC               	goto	u4637
  2769  00096A  0101               	movlb	1	; () banked
  2770  00096C  4B46               	infsnz	main@i_790& (0+255),f,b
  2771  00096E  2B47               	incf	(main@i_790+1)& (0+255),f,b
  2772  000970  D7E9               	goto	l4692
  2773  000972                     l4700:
  2774                           
  2775                           ; BSR set to: 1
  2776                           ;main.c: 215: else
  2777                           ;main.c: 216: {
  2778                           ;main.c: 217: Lcd_Set_Cursor(1,1);
  2779  000972  0E01               	movlw	1
  2780  000974  6E12               	movwf	Lcd_Set_Cursor@b,c
  2781  000976  0E01               	movlw	1
  2782  000978  EC2B  F00D         	call	_Lcd_Set_Cursor
  2783                           
  2784                           ;main.c: 218: Lcd_Write_String("[ System Error ]");
  2785  00097C  0E97               	movlw	low STR_11
  2786  00097E  6E14               	movwf	Lcd_Write_String@a,c
  2787  000980  0E7F               	movlw	high STR_11
  2788  000982  6E15               	movwf	Lcd_Write_String@a+1,c
  2789  000984  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  2790                           
  2791                           ;main.c: 219: Lcd_Set_Cursor(2,1);
  2792  000988  0E01               	movlw	1
  2793  00098A  6E12               	movwf	Lcd_Set_Cursor@b,c
  2794  00098C  0E02               	movlw	2
  2795  00098E  EC2B  F00D         	call	_Lcd_Set_Cursor
  2796                           
  2797                           ;main.c: 220: Lcd_Write_String("    [ Retry ]   ");
  2798  000992  0EDC               	movlw	low STR_10
  2799  000994  6E14               	movwf	Lcd_Write_String@a,c
  2800  000996  0E7E               	movlw	high STR_10
  2801  000998  6E15               	movwf	Lcd_Write_String@a+1,c
  2802  00099A  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  2803                           
  2804                           ;main.c: 221: for (int i = 0; i < 100; i++)
  2805  00099E  0E00               	movlw	0
  2806  0009A0  0101               	movlb	1	; () banked
  2807  0009A2  6F49               	movwf	(main@i_793+1)& (0+255),b
  2808  0009A4  0E00               	movlw	0
  2809  0009A6  6F48               	movwf	main@i_793& (0+255),b
  2810  0009A8                     l4708:
  2811                           
  2812                           ; BSR set to: 1
  2813  0009A8  0101               	movlb	1	; () banked
  2814  0009AA  BF49               	btfsc	(main@i_793+1)& (0+255),7,b
  2815  0009AC  D008               	goto	l4712
  2816  0009AE  0101               	movlb	1	; () banked
  2817  0009B0  5149               	movf	(main@i_793+1)& (0+255),w,b
  2818  0009B2  E111               	bnz	l4716
  2819  0009B4  0E64               	movlw	100
  2820  0009B6  0101               	movlb	1	; () banked
  2821  0009B8  5D48               	subwf	main@i_793& (0+255),w,b
  2822  0009BA  B0D8               	btfsc	status,0,c
  2823  0009BC  D00C               	goto	l4716
  2824  0009BE                     l4712:
  2825                           
  2826                           ; BSR set to: 1
  2827                           ;main.c: 222: {
  2828                           ;main.c: 223: _delay((unsigned long)((10)*(16000000/4000.0)));
  2829  0009BE  0E34               	movlw	52
  2830  0009C0  0100               	movlb	0	; () banked
  2831  0009C2  6FC6               	movwf	??_main& (0+255),b
  2832  0009C4  0EF2               	movlw	242
  2833  0009C6                     u4647:
  2834  0009C6  2EE8               	decfsz	wreg,f,c
  2835  0009C8  D7FE               	goto	u4647
  2836  0009CA  2FC6               	decfsz	??_main& (0+255),f,b
  2837  0009CC  D7FC               	goto	u4647
  2838  0009CE  0101               	movlb	1	; () banked
  2839  0009D0  4B48               	infsnz	main@i_793& (0+255),f,b
  2840  0009D2  2B49               	incf	(main@i_793+1)& (0+255),f,b
  2841  0009D4  D7E9               	goto	l4708
  2842  0009D6                     l4716:
  2843  0009D6  0100               	movlb	0	; () banked
  2844  0009D8  51E1               	movf	_credentials_accepted& (0+255),w,b	;volatile
  2845  0009DA  A4D8               	btfss	status,2,c
  2846  0009DC  EF90  F000         	goto	l4452
  2847  0009E0  EFC4  F000         	goto	l4464
  2848  0009E4                     __end_of_main:
  2849                           	opt stack 0
  2850                           tblptru	equ	0xFF8
  2851                           tblptrh	equ	0xFF7
  2852                           tblptrl	equ	0xFF6
  2853                           tablat	equ	0xFF5
  2854                           prodh	equ	0xFF4
  2855                           prodl	equ	0xFF3
  2856                           postinc0	equ	0xFEE
  2857                           wreg	equ	0xFE8
  2858                           indf1	equ	0xFE7
  2859                           postdec1	equ	0xFE5
  2860                           plusw1	equ	0xFE3
  2861                           fsr1h	equ	0xFE2
  2862                           fsr1l	equ	0xFE1
  2863                           indf2	equ	0xFDF
  2864                           plusw2	equ	0xFDB
  2865                           fsr2h	equ	0xFDA
  2866                           fsr2l	equ	0xFD9
  2867                           status	equ	0xFD8
  2868                           
  2869 ;; *************** function _start_routine *****************
  2870 ;; Defined at:
  2871 ;;		line 382 in file "main.c"
  2872 ;; Parameters:    Size  Location     Type
  2873 ;;		None
  2874 ;; Auto vars:     Size  Location     Type
  2875 ;;  i               2   27[BANK0 ] int 
  2876 ;;  i               2   20[BANK0 ] int 
  2877 ;;  i               2   18[BANK0 ] int 
  2878 ;;  i               2   16[BANK0 ] int 
  2879 ;;  i               2   25[BANK0 ] int 
  2880 ;;  i               2   34[BANK0 ] int 
  2881 ;;  b               3   22[BANK0 ] unsigned char [3]
  2882 ;;  error_msg       2    6[BANK0 ] PTR unsigned char 
  2883 ;;		 -> STR_26(17), STR_25(17), 
  2884 ;;  new_I2C_addr    1   39[BANK0 ] unsigned char 
  2885 ;;  I2C_new_ADDR    3   29[BANK0 ] unsigned char [3]
  2886 ;;  i               2   14[BANK0 ] int 
  2887 ;;  i               2   12[BANK0 ] int 
  2888 ;;  i               2   10[BANK0 ] int 
  2889 ;;  n               1   38[BANK0 ] unsigned char 
  2890 ;;  x               1   37[BANK0 ] unsigned char 
  2891 ;;  dh              1   36[BANK0 ] unsigned char 
  2892 ;;  dt              1   33[BANK0 ] unsigned char 
  2893 ;;  a               1   32[BANK0 ] unsigned char 
  2894 ;;  v               1    9[BANK0 ] unsigned char 
  2895 ;;  d1              1    8[BANK0 ] unsigned char 
  2896 ;;  l               1    5[BANK0 ] unsigned char 
  2897 ;;  h               1    4[BANK0 ] unsigned char 
  2898 ;; Return value:  Size  Location     Type
  2899 ;;                  1    wreg      void 
  2900 ;; Registers used:
  2901 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2902 ;; Tracked objects:
  2903 ;;		On entry : 0/0
  2904 ;;		On exit  : 0/0
  2905 ;;		Unchanged: 0/0
  2906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2907 ;;      Params:         0       0       0       0       0       0       0
  2908 ;;      Locals:         0      36       0       0       0       0       0
  2909 ;;      Temps:          0       4       0       0       0       0       0
  2910 ;;      Totals:         0      40       0       0       0       0       0
  2911 ;;Total ram usage:       40 bytes
  2912 ;; Hardware stack levels used:    1
  2913 ;; Hardware stack levels required when called:    5
  2914 ;; This function calls:
  2915 ;;		_Eeprom_Write_Byte
  2916 ;;		_Lcd_Clear
  2917 ;;		_Lcd_Set_Cursor
  2918 ;;		_Lcd_Write_Char
  2919 ;;		_Lcd_Write_String
  2920 ;;		___awdiv
  2921 ;;		_latch_keypad
  2922 ;;		_menu_progress_bar
  2923 ;;		_read_keypad
  2924 ;; This function is called by:
  2925 ;;		_main
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           	psect	text1
  2930  0009E4                     __ptext1:
  2931                           	opt stack 0
  2932  0009E4                     _start_routine:
  2933                           	opt stack 25
  2934                           
  2935                           ;main.c: 387: Lcd_Clear();
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;incstack = 0
  2939  0009E4  EC25  F00E         	call	_Lcd_Clear	;wreg free
  2940                           
  2941                           ;main.c: 388: Lcd_Set_Cursor(1, 1);
  2942  0009E8  0E01               	movlw	1
  2943  0009EA  6E12               	movwf	Lcd_Set_Cursor@b,c
  2944  0009EC  0E01               	movlw	1
  2945  0009EE  EC2B  F00D         	call	_Lcd_Set_Cursor
  2946                           
  2947                           ;main.c: 389: Lcd_Write_String("   [ Aditum ]   ");
  2948  0009F2  0ECB               	movlw	low STR_13
  2949  0009F4  6E14               	movwf	Lcd_Write_String@a,c
  2950  0009F6  0E7E               	movlw	high STR_13
  2951  0009F8  6E15               	movwf	Lcd_Write_String@a+1,c
  2952  0009FA  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  2953                           
  2954                           ;main.c: 390: for (int i = 0; i < 20; i++)
  2955  0009FE  0E00               	movlw	0
  2956  000A00  0100               	movlb	0	; () banked
  2957  000A02  6FA9               	movwf	(start_routine@i+1)& (0+255),b
  2958  000A04  0E00               	movlw	0
  2959  000A06  6FA8               	movwf	start_routine@i& (0+255),b
  2960  000A08                     l3938:
  2961                           
  2962                           ; BSR set to: 0
  2963  000A08  0100               	movlb	0	; () banked
  2964  000A0A  BFA9               	btfsc	(start_routine@i+1)& (0+255),7,b
  2965  000A0C  D008               	goto	l3942
  2966  000A0E  0100               	movlb	0	; () banked
  2967  000A10  51A9               	movf	(start_routine@i+1)& (0+255),w,b
  2968  000A12  E113               	bnz	l3946
  2969  000A14  0E14               	movlw	20
  2970  000A16  0100               	movlb	0	; () banked
  2971  000A18  5DA8               	subwf	start_routine@i& (0+255),w,b
  2972  000A1A  B0D8               	btfsc	status,0,c
  2973  000A1C  D00E               	goto	l3946
  2974  000A1E                     l3942:
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;main.c: 391: _delay((unsigned long)((20)*(16000000/4000.0)));
  2978  000A1E  0E68               	movlw	104
  2979  000A20  0100               	movlb	0	; () banked
  2980  000A22  6F9E               	movwf	??_start_routine& (0+255),b
  2981  000A24  0EE4               	movlw	228
  2982  000A26                     u4657:
  2983  000A26  2EE8               	decfsz	wreg,f,c
  2984  000A28  D7FE               	goto	u4657
  2985  000A2A  2F9E               	decfsz	??_start_routine& (0+255),f,b
  2986  000A2C  D7FC               	goto	u4657
  2987  000A2E  F000 F000          	nop2	
  2988  000A32  0100               	movlb	0	; () banked
  2989  000A34  4BA8               	infsnz	start_routine@i& (0+255),f,b
  2990  000A36  2BA9               	incf	(start_routine@i+1)& (0+255),f,b
  2991  000A38  D7E7               	goto	l3938
  2992  000A3A                     l3946:
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;main.c: 392: Lcd_Set_Cursor(2,1);
  2996  000A3A  0E01               	movlw	1
  2997  000A3C  6E12               	movwf	Lcd_Set_Cursor@b,c
  2998  000A3E  0E02               	movlw	2
  2999  000A40  EC2B  F00D         	call	_Lcd_Set_Cursor
  3000                           
  3001                           ;main.c: 393: Lcd_Write_String("Rev ");
  3002  000A44  0EF2               	movlw	low STR_14
  3003  000A46  6E14               	movwf	Lcd_Write_String@a,c
  3004  000A48  0E7F               	movlw	high STR_14
  3005  000A4A  6E15               	movwf	Lcd_Write_String@a+1,c
  3006  000A4C  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  3007                           
  3008                           ;main.c: 394: Lcd_Write_String("1.0.0");
  3009  000A50  0EE6               	movlw	low STR_15
  3010  000A52  6E14               	movwf	Lcd_Write_String@a,c
  3011  000A54  0E7F               	movlw	high STR_15
  3012  000A56  6E15               	movwf	Lcd_Write_String@a+1,c
  3013  000A58  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  3014                           
  3015                           ;main.c: 395: for (int i = 0; i < 50; i++)
  3016  000A5C  0E00               	movlw	0
  3017  000A5E  0100               	movlb	0	; () banked
  3018  000A60  6FAB               	movwf	(start_routine@i_872+1)& (0+255),b
  3019  000A62  0E00               	movlw	0
  3020  000A64  6FAA               	movwf	start_routine@i_872& (0+255),b
  3021  000A66                     l3954:
  3022                           
  3023                           ; BSR set to: 0
  3024  000A66  0100               	movlb	0	; () banked
  3025  000A68  BFAB               	btfsc	(start_routine@i_872+1)& (0+255),7,b
  3026  000A6A  D008               	goto	l3958
  3027  000A6C  0100               	movlb	0	; () banked
  3028  000A6E  51AB               	movf	(start_routine@i_872+1)& (0+255),w,b
  3029  000A70  E113               	bnz	l3962
  3030  000A72  0E32               	movlw	50
  3031  000A74  0100               	movlb	0	; () banked
  3032  000A76  5DAA               	subwf	start_routine@i_872& (0+255),w,b
  3033  000A78  B0D8               	btfsc	status,0,c
  3034  000A7A  D00E               	goto	l3962
  3035  000A7C                     l3958:
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;main.c: 396: _delay((unsigned long)((20)*(16000000/4000.0)));
  3039  000A7C  0E68               	movlw	104
  3040  000A7E  0100               	movlb	0	; () banked
  3041  000A80  6F9E               	movwf	??_start_routine& (0+255),b
  3042  000A82  0EE4               	movlw	228
  3043  000A84                     u4667:
  3044  000A84  2EE8               	decfsz	wreg,f,c
  3045  000A86  D7FE               	goto	u4667
  3046  000A88  2F9E               	decfsz	??_start_routine& (0+255),f,b
  3047  000A8A  D7FC               	goto	u4667
  3048  000A8C  F000 F000          	nop2	
  3049  000A90  0100               	movlb	0	; () banked
  3050  000A92  4BAA               	infsnz	start_routine@i_872& (0+255),f,b
  3051  000A94  2BAB               	incf	(start_routine@i_872+1)& (0+255),f,b
  3052  000A96  D7E7               	goto	l3954
  3053  000A98                     l3962:
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;main.c: 397: Lcd_Set_Cursor(2,1);
  3057  000A98  0E01               	movlw	1
  3058  000A9A  6E12               	movwf	Lcd_Set_Cursor@b,c
  3059  000A9C  0E02               	movlw	2
  3060  000A9E  EC2B  F00D         	call	_Lcd_Set_Cursor
  3061                           
  3062                           ;main.c: 398: Lcd_Write_String("Device ID ");
  3063  000AA2  0EDB               	movlw	low STR_16
  3064  000AA4  6E14               	movwf	Lcd_Write_String@a,c
  3065  000AA6  0E7F               	movlw	high STR_16
  3066  000AA8  6E15               	movwf	Lcd_Write_String@a+1,c
  3067  000AAA  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  3068                           
  3069                           ;main.c: 399: unsigned char a, h, l, dh, dt, d1;
  3070                           ;main.c: 400: if (I2C_ADDR != 0)
  3071  000AAE  0100               	movlb	0	; () banked
  3072  000AB0  51E2               	movf	_I2C_ADDR& (0+255),w,b
  3073  000AB2  B4D8               	btfsc	status,2,c
  3074  000AB4  D004               	goto	l3970
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;main.c: 401: a = I2C_ADDR - 0x0F;
  3078  000AB6  0100               	movlb	0	; () banked
  3079  000AB8  51E2               	movf	_I2C_ADDR& (0+255),w,b
  3080  000ABA  0FF1               	addlw	241
  3081  000ABC  D001               	goto	L3
  3082  000ABE                     l3970:
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;main.c: 402: else
  3086                           ;main.c: 403: a = 0;
  3087  000ABE  0E00               	movlw	0
  3088  000AC0                     L3:
  3089  000AC0  0100               	movlb	0	; () banked
  3090  000AC2  6FBE               	movwf	start_routine@a& (0+255),b
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;main.c: 405: dh = (a / 100);
  3094                           
  3095                           ; BSR set to: 0
  3096  000AC4  C0BE  F010         	movff	start_routine@a,___awdiv@dividend
  3097  000AC8  6A11               	clrf	___awdiv@dividend+1,c
  3098  000ACA  0E00               	movlw	0
  3099  000ACC  6E13               	movwf	___awdiv@divisor+1,c
  3100  000ACE  0E64               	movlw	100
  3101  000AD0  6E12               	movwf	___awdiv@divisor,c
  3102  000AD2  EC13  F00C         	call	___awdiv	;wreg free
  3103  000AD6  5010               	movf	?___awdiv,w,c
  3104  000AD8  0100               	movlb	0	; () banked
  3105  000ADA  6FC2               	movwf	start_routine@dh& (0+255),b
  3106                           
  3107                           ; BSR set to: 0
  3108                           ;main.c: 406: dt = (a - dh*100) / 10;
  3109  000ADC  0100               	movlb	0	; () banked
  3110  000ADE  51C2               	movf	start_routine@dh& (0+255),w,b
  3111  000AE0  0D64               	mullw	100
  3112  000AE2  1EF3               	comf	prodl,f,c
  3113  000AE4  1EF4               	comf	prodh,f,c
  3114  000AE6  4AF3               	infsnz	prodl,f,c
  3115  000AE8  2AF4               	incf	prodh,f,c
  3116  000AEA  0100               	movlb	0	; () banked
  3117  000AEC  51BE               	movf	start_routine@a& (0+255),w,b
  3118  000AEE  24F3               	addwf	prodl,w,c
  3119  000AF0  6E10               	movwf	___awdiv@dividend,c
  3120  000AF2  0E00               	movlw	0
  3121  000AF4  20F4               	addwfc	prodh,w,c
  3122  000AF6  6E11               	movwf	___awdiv@dividend+1,c
  3123  000AF8  0E00               	movlw	0
  3124  000AFA  6E13               	movwf	___awdiv@divisor+1,c
  3125  000AFC  0E0A               	movlw	10
  3126  000AFE  6E12               	movwf	___awdiv@divisor,c
  3127  000B00  EC13  F00C         	call	___awdiv	;wreg free
  3128  000B04  5010               	movf	?___awdiv,w,c
  3129  000B06  0100               	movlb	0	; () banked
  3130  000B08  6FBF               	movwf	start_routine@dt& (0+255),b
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;main.c: 407: d1 = (a - (dh*100+dt*10));
  3134  000B0A  0100               	movlb	0	; () banked
  3135  000B0C  51BF               	movf	start_routine@dt& (0+255),w,b
  3136  000B0E  0D0A               	mullw	10
  3137  000B10  CFF3 F09E          	movff	prodl,??_start_routine
  3138  000B14  0100               	movlb	0	; () banked
  3139  000B16  51C2               	movf	start_routine@dh& (0+255),w,b
  3140  000B18  0D64               	mullw	100
  3141  000B1A  50F3               	movf	prodl,w,c
  3142  000B1C  0100               	movlb	0	; () banked
  3143  000B1E  259E               	addwf	??_start_routine& (0+255),w,b
  3144  000B20  0800               	sublw	0
  3145  000B22  0100               	movlb	0	; () banked
  3146  000B24  25BE               	addwf	start_routine@a& (0+255),w,b
  3147  000B26  0100               	movlb	0	; () banked
  3148  000B28  6FA6               	movwf	start_routine@d1& (0+255),b
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;main.c: 408: Lcd_Write_Char(c[dh]);
  3152  000B2A  0100               	movlb	0	; () banked
  3153  000B2C  51C2               	movf	start_routine@dh& (0+255),w,b
  3154  000B2E  0D01               	mullw	1
  3155  000B30  0E80               	movlw	low _c
  3156  000B32  24F3               	addwf	prodl,w,c
  3157  000B34  6ED9               	movwf	fsr2l,c
  3158  000B36  0E00               	movlw	high _c
  3159  000B38  20F4               	addwfc	prodh,w,c
  3160  000B3A  6EDA               	movwf	fsr2h,c
  3161  000B3C  50DF               	movf	indf2,w,c
  3162  000B3E  ECB6  F00D         	call	_Lcd_Write_Char
  3163                           
  3164                           ;main.c: 409: Lcd_Write_Char(c[dt]);
  3165  000B42  0100               	movlb	0	; () banked
  3166  000B44  51BF               	movf	start_routine@dt& (0+255),w,b
  3167  000B46  0D01               	mullw	1
  3168  000B48  0E80               	movlw	low _c
  3169  000B4A  24F3               	addwf	prodl,w,c
  3170  000B4C  6ED9               	movwf	fsr2l,c
  3171  000B4E  0E00               	movlw	high _c
  3172  000B50  20F4               	addwfc	prodh,w,c
  3173  000B52  6EDA               	movwf	fsr2h,c
  3174  000B54  50DF               	movf	indf2,w,c
  3175  000B56  ECB6  F00D         	call	_Lcd_Write_Char
  3176                           
  3177                           ;main.c: 410: Lcd_Write_Char(c[d1]);
  3178  000B5A  0100               	movlb	0	; () banked
  3179  000B5C  51A6               	movf	start_routine@d1& (0+255),w,b
  3180  000B5E  0D01               	mullw	1
  3181  000B60  0E80               	movlw	low _c
  3182  000B62  24F3               	addwf	prodl,w,c
  3183  000B64  6ED9               	movwf	fsr2l,c
  3184  000B66  0E00               	movlw	high _c
  3185  000B68  20F4               	addwfc	prodh,w,c
  3186  000B6A  6EDA               	movwf	fsr2h,c
  3187  000B6C  50DF               	movf	indf2,w,c
  3188  000B6E  ECB6  F00D         	call	_Lcd_Write_Char
  3189                           
  3190                           ;main.c: 411: Lcd_Write_Char('|');
  3191  000B72  0E7C               	movlw	124
  3192  000B74  ECB6  F00D         	call	_Lcd_Write_Char
  3193                           
  3194                           ;main.c: 412: Lcd_Write_Char(hx[I2C_ADDR/16]);
  3195  000B78  C0E2  F010         	movff	_I2C_ADDR,___awdiv@dividend
  3196  000B7C  6A11               	clrf	___awdiv@dividend+1,c
  3197  000B7E  0E00               	movlw	0
  3198  000B80  6E13               	movwf	___awdiv@divisor+1,c
  3199  000B82  0E10               	movlw	16
  3200  000B84  6E12               	movwf	___awdiv@divisor,c
  3201  000B86  EC13  F00C         	call	___awdiv	;wreg free
  3202  000B8A  0E20               	movlw	low _hx
  3203  000B8C  2410               	addwf	?___awdiv,w,c
  3204  000B8E  6ED9               	movwf	fsr2l,c
  3205  000B90  0E01               	movlw	high _hx
  3206  000B92  2011               	addwfc	?___awdiv+1,w,c
  3207  000B94  6EDA               	movwf	fsr2h,c
  3208  000B96  50DF               	movf	indf2,w,c
  3209  000B98  ECB6  F00D         	call	_Lcd_Write_Char
  3210                           
  3211                           ;main.c: 413: Lcd_Write_Char(hx[I2C_ADDR - (I2C_ADDR/16)*16]);
  3212  000B9C  C0E2  F010         	movff	_I2C_ADDR,___awdiv@dividend
  3213  000BA0  6A11               	clrf	___awdiv@dividend+1,c
  3214  000BA2  0E00               	movlw	0
  3215  000BA4  6E13               	movwf	___awdiv@divisor+1,c
  3216  000BA6  0E10               	movlw	16
  3217  000BA8  6E12               	movwf	___awdiv@divisor,c
  3218  000BAA  EC13  F00C         	call	___awdiv	;wreg free
  3219  000BAE  3A10               	swapf	?___awdiv,f,c
  3220  000BB0  3A11               	swapf	?___awdiv+1,f,c
  3221  000BB2  0EF0               	movlw	240
  3222  000BB4  1611               	andwf	?___awdiv+1,f,c
  3223  000BB6  5010               	movf	?___awdiv,w,c
  3224  000BB8  0B0F               	andlw	15
  3225  000BBA  1211               	iorwf	?___awdiv+1,f,c
  3226  000BBC  0EF0               	movlw	240
  3227  000BBE  1610               	andwf	?___awdiv,f,c
  3228  000BC0  1E10               	comf	?___awdiv,f,c
  3229  000BC2  1E11               	comf	?___awdiv+1,f,c
  3230  000BC4  4A10               	infsnz	?___awdiv,f,c
  3231  000BC6  2A11               	incf	?___awdiv+1,f,c
  3232  000BC8  0100               	movlb	0	; () banked
  3233  000BCA  51E2               	movf	_I2C_ADDR& (0+255),w,b
  3234  000BCC  0100               	movlb	0	; () banked
  3235  000BCE  6F9E               	movwf	??_start_routine& (0+255),b
  3236  000BD0  6B9F               	clrf	(??_start_routine+1)& (0+255),b
  3237  000BD2  5010               	movf	?___awdiv,w,c
  3238  000BD4  0100               	movlb	0	; () banked
  3239  000BD6  279E               	addwf	??_start_routine& (0+255),f,b
  3240  000BD8  5011               	movf	?___awdiv+1,w,c
  3241  000BDA  0100               	movlb	0	; () banked
  3242  000BDC  239F               	addwfc	(??_start_routine+1)& (0+255),f,b
  3243  000BDE  0E20               	movlw	low _hx
  3244  000BE0  0100               	movlb	0	; () banked
  3245  000BE2  259E               	addwf	??_start_routine& (0+255),w,b
  3246  000BE4  6ED9               	movwf	fsr2l,c
  3247  000BE6  0E01               	movlw	high _hx
  3248  000BE8  0100               	movlb	0	; () banked
  3249  000BEA  219F               	addwfc	(??_start_routine+1)& (0+255),w,b
  3250  000BEC  6EDA               	movwf	fsr2h,c
  3251  000BEE  50DF               	movf	indf2,w,c
  3252  000BF0  ECB6  F00D         	call	_Lcd_Write_Char
  3253                           
  3254                           ;main.c: 414: for (int i = 0; i < 40; i++)
  3255  000BF4  0E00               	movlw	0
  3256  000BF6  0100               	movlb	0	; () banked
  3257  000BF8  6FAD               	movwf	(start_routine@i_880+1)& (0+255),b
  3258  000BFA  0E00               	movlw	0
  3259  000BFC  6FAC               	movwf	start_routine@i_880& (0+255),b
  3260  000BFE                     l3992:
  3261                           
  3262                           ; BSR set to: 0
  3263  000BFE  0100               	movlb	0	; () banked
  3264  000C00  BFAD               	btfsc	(start_routine@i_880+1)& (0+255),7,b
  3265  000C02  D008               	goto	l3996
  3266  000C04  0100               	movlb	0	; () banked
  3267  000C06  51AD               	movf	(start_routine@i_880+1)& (0+255),w,b
  3268  000C08  E113               	bnz	l4000
  3269  000C0A  0E28               	movlw	40
  3270  000C0C  0100               	movlb	0	; () banked
  3271  000C0E  5DAC               	subwf	start_routine@i_880& (0+255),w,b
  3272  000C10  B0D8               	btfsc	status,0,c
  3273  000C12  D00E               	goto	l4000
  3274  000C14                     l3996:
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;main.c: 415: _delay((unsigned long)((20)*(16000000/4000.0)));
  3278  000C14  0E68               	movlw	104
  3279  000C16  0100               	movlb	0	; () banked
  3280  000C18  6F9E               	movwf	??_start_routine& (0+255),b
  3281  000C1A  0EE4               	movlw	228
  3282  000C1C                     u4677:
  3283  000C1C  2EE8               	decfsz	wreg,f,c
  3284  000C1E  D7FE               	goto	u4677
  3285  000C20  2F9E               	decfsz	??_start_routine& (0+255),f,b
  3286  000C22  D7FC               	goto	u4677
  3287  000C24  F000 F000          	nop2	
  3288  000C28  0100               	movlb	0	; () banked
  3289  000C2A  4BAC               	infsnz	start_routine@i_880& (0+255),f,b
  3290  000C2C  2BAD               	incf	(start_routine@i_880+1)& (0+255),f,b
  3291  000C2E  D7E7               	goto	l3992
  3292  000C30                     l4000:
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;main.c: 416: Lcd_Clear();
  3296  000C30  EC25  F00E         	call	_Lcd_Clear	;wreg free
  3297                           
  3298                           ;main.c: 417: Lcd_Set_Cursor(1, 1);
  3299  000C34  0E01               	movlw	1
  3300  000C36  6E12               	movwf	Lcd_Set_Cursor@b,c
  3301  000C38  0E01               	movlw	1
  3302  000C3A  EC2B  F00D         	call	_Lcd_Set_Cursor
  3303                           
  3304                           ;main.c: 418: Lcd_Write_String("  [  Aditum  ]  ");
  3305  000C3E  0E0F               	movlw	low STR_17
  3306  000C40  6E14               	movwf	Lcd_Write_String@a,c
  3307  000C42  0E7F               	movlw	high STR_17
  3308  000C44  6E15               	movwf	Lcd_Write_String@a+1,c
  3309  000C46  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  3310                           
  3311                           ;main.c: 419: menu_progress_bar(700);
  3312  000C4A  0E02               	movlw	2
  3313  000C4C  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  3314  000C4E  0EBC               	movlw	188
  3315  000C50  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  3316  000C52  EC50  F00A         	call	_menu_progress_bar	;wreg free
  3317                           
  3318                           ;main.c: 422: unsigned char x, n = 0, v;
  3319  000C56  0E00               	movlw	0
  3320  000C58  0100               	movlb	0	; () banked
  3321  000C5A  6FC4               	movwf	start_routine@n& (0+255),b
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;main.c: 423: if (I2C_ADDR == 0x00)
  3325  000C5C  0100               	movlb	0	; () banked
  3326  000C5E  51E2               	movf	_I2C_ADDR& (0+255),w,b
  3327  000C60  A4D8               	btfss	status,2,c
  3328  000C62  D29B               	goto	l4212
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;main.c: 424: {
  3332                           ;main.c: 425: v = 0;
  3333  000C64  0E00               	movlw	0
  3334  000C66  0100               	movlb	0	; () banked
  3335  000C68  6FA7               	movwf	start_routine@v& (0+255),b
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;main.c: 426: Lcd_Set_Cursor(1,1);
  3339  000C6A  0E01               	movlw	1
  3340  000C6C  6E12               	movwf	Lcd_Set_Cursor@b,c
  3341  000C6E  0E01               	movlw	1
  3342  000C70  EC2B  F00D         	call	_Lcd_Set_Cursor
  3343                           
  3344                           ;main.c: 427: Lcd_Write_String("Load I2C setup..");
  3345  000C74  0E64               	movlw	low STR_18
  3346  000C76  6E14               	movwf	Lcd_Write_String@a,c
  3347  000C78  0E7F               	movlw	high STR_18
  3348  000C7A  6E15               	movwf	Lcd_Write_String@a+1,c
  3349  000C7C  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  3350                           
  3351                           ;main.c: 428: menu_progress_bar(300);
  3352  000C80  0E01               	movlw	1
  3353  000C82  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  3354  000C84  0E2C               	movlw	44
  3355  000C86  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  3356  000C88  EC50  F00A         	call	_menu_progress_bar	;wreg free
  3357                           
  3358                           ;main.c: 429: unsigned char I2C_new_ADDR[] = {'0', '0', '0'};
  3359  000C8C  C099  F0BB         	movff	start_routine@F3718,start_routine@I2C_new_ADDR
  3360  000C90  C09A  F0BC         	movff	start_routine@F3718+1,start_routine@I2C_new_ADDR+1
  3361  000C94  C09B  F0BD         	movff	start_routine@F3718+2,start_routine@I2C_new_ADDR+2
  3362                           
  3363                           ;main.c: 430: while (v != 1)
  3364  000C98  D27B               	goto	l4210
  3365  000C9A                     l4022:
  3366                           
  3367                           ;main.c: 431: {
  3368                           ;main.c: 432: Lcd_Set_Cursor(1,1);
  3369  000C9A  0E01               	movlw	1
  3370  000C9C  6E12               	movwf	Lcd_Set_Cursor@b,c
  3371  000C9E  0E01               	movlw	1
  3372  000CA0  EC2B  F00D         	call	_Lcd_Set_Cursor
  3373                           
  3374                           ;main.c: 433: Lcd_Write_String("New Machine ID: ");
  3375  000CA4  0E31               	movlw	low STR_19
  3376  000CA6  6E14               	movwf	Lcd_Write_String@a,c
  3377  000CA8  0E7F               	movlw	high STR_19
  3378  000CAA  6E15               	movwf	Lcd_Write_String@a+1,c
  3379  000CAC  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  3380                           
  3381                           ;main.c: 434: Lcd_Set_Cursor(2,1);
  3382  000CB0  0E01               	movlw	1
  3383  000CB2  6E12               	movwf	Lcd_Set_Cursor@b,c
  3384  000CB4  0E02               	movlw	2
  3385  000CB6  EC2B  F00D         	call	_Lcd_Set_Cursor
  3386                           
  3387                           ;main.c: 435: Lcd_Write_String("       [001-100]");
  3388  000CBA  0EA8               	movlw	low STR_20
  3389  000CBC  6E14               	movwf	Lcd_Write_String@a,c
  3390  000CBE  0E7F               	movlw	high STR_20
  3391  000CC0  6E15               	movwf	Lcd_Write_String@a+1,c
  3392  000CC2  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  3393                           
  3394                           ;main.c: 436: Lcd_Set_Cursor(2,1);
  3395  000CC6  0E01               	movlw	1
  3396  000CC8  6E12               	movwf	Lcd_Set_Cursor@b,c
  3397  000CCA  0E02               	movlw	2
  3398  000CCC  EC2B  F00D         	call	_Lcd_Set_Cursor
  3399                           
  3400                           ;main.c: 437: Lcd_Write_Char('_');
  3401  000CD0  0E5F               	movlw	95
  3402  000CD2  ECB6  F00D         	call	_Lcd_Write_Char
  3403                           
  3404                           ;main.c: 438: while (n < 3)
  3405  000CD6  D093               	goto	l4074
  3406  000CD8                     l4032:
  3407                           
  3408                           ;main.c: 439: {
  3409                           ;main.c: 440: x = read_keypad();
  3410  000CD8  EC7C  F00B         	call	_read_keypad	;wreg free
  3411  000CDC  0100               	movlb	0	; () banked
  3412  000CDE  6FC3               	movwf	start_routine@x& (0+255),b
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;main.c: 441: if (x != '_')
  3416  000CE0  0E5F               	movlw	95
  3417  000CE2  0100               	movlb	0	; () banked
  3418  000CE4  19C3               	xorwf	start_routine@x& (0+255),w,b
  3419  000CE6  B4D8               	btfsc	status,2,c
  3420  000CE8  D08A               	goto	l4074
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;main.c: 442: {
  3424                           ;main.c: 443: if (((x - '#') == 0)&&(n > 0))
  3425  000CEA  0EDD               	movlw	221
  3426  000CEC  0100               	movlb	0	; () banked
  3427  000CEE  6F9E               	movwf	??_start_routine& (0+255),b
  3428  000CF0  0EFF               	movlw	255
  3429  000CF2  0100               	movlb	0	; () banked
  3430  000CF4  6F9F               	movwf	(??_start_routine+1)& (0+255),b
  3431  000CF6  0100               	movlb	0	; () banked
  3432  000CF8  51C3               	movf	start_routine@x& (0+255),w,b
  3433  000CFA  0100               	movlb	0	; () banked
  3434  000CFC  6FA0               	movwf	(??_start_routine+2)& (0+255),b
  3435  000CFE  6BA1               	clrf	(??_start_routine+3)& (0+255),b
  3436  000D00  0100               	movlb	0	; () banked
  3437  000D02  519E               	movf	??_start_routine& (0+255),w,b
  3438  000D04  0100               	movlb	0	; () banked
  3439  000D06  27A0               	addwf	(??_start_routine+2)& (0+255),f,b
  3440  000D08  0100               	movlb	0	; () banked
  3441  000D0A  519F               	movf	(??_start_routine+1)& (0+255),w,b
  3442  000D0C  0100               	movlb	0	; () banked
  3443  000D0E  23A1               	addwfc	(??_start_routine+3)& (0+255),f,b
  3444  000D10  0100               	movlb	0	; () banked
  3445  000D12  51A0               	movf	(??_start_routine+2)& (0+255),w,b
  3446  000D14  0100               	movlb	0	; () banked
  3447  000D16  11A1               	iorwf	(??_start_routine+3)& (0+255),w,b
  3448  000D18  A4D8               	btfss	status,2,c
  3449  000D1A  D02F               	goto	l4056
  3450                           
  3451                           ; BSR set to: 0
  3452  000D1C  0100               	movlb	0	; () banked
  3453  000D1E  51C4               	movf	start_routine@n& (0+255),w,b
  3454  000D20  0100               	movlb	0	; () banked
  3455  000D22  B4D8               	btfsc	status,2,c
  3456  000D24  D02A               	goto	l4056
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;main.c: 444: {
  3460                           ;main.c: 445: I2C_new_ADDR[n] = 0;
  3461  000D26  0100               	movlb	0	; () banked
  3462  000D28  51C4               	movf	start_routine@n& (0+255),w,b
  3463  000D2A  0D01               	mullw	1
  3464  000D2C  0EBB               	movlw	low start_routine@I2C_new_ADDR
  3465  000D2E  24F3               	addwf	prodl,w,c
  3466  000D30  6ED9               	movwf	fsr2l,c
  3467  000D32  0E00               	movlw	high start_routine@I2C_new_ADDR
  3468  000D34  20F4               	addwfc	prodh,w,c
  3469  000D36  6EDA               	movwf	fsr2h,c
  3470  000D38  0E00               	movlw	0
  3471  000D3A  6EDF               	movwf	indf2,c
  3472                           
  3473                           ; BSR set to: 0
  3474                           ;main.c: 446: Lcd_Set_Cursor(2, n);
  3475  000D3C  C0C4  F012         	movff	start_routine@n,Lcd_Set_Cursor@b
  3476  000D40  0E02               	movlw	2
  3477  000D42  EC2B  F00D         	call	_Lcd_Set_Cursor
  3478                           
  3479                           ;main.c: 447: Lcd_Write_Char('_');
  3480  000D46  0E5F               	movlw	95
  3481  000D48  ECB6  F00D         	call	_Lcd_Write_Char
  3482                           
  3483                           ;main.c: 448: latch_keypad(&x);
  3484  000D4C  0EC3               	movlw	low start_routine@x
  3485  000D4E  6E10               	movwf	latch_keypad@x,c
  3486  000D50  0E00               	movlw	high start_routine@x
  3487  000D52  6E11               	movwf	latch_keypad@x+1,c
  3488  000D54  EC9A  F00D         	call	_latch_keypad	;wreg free
  3489                           
  3490                           ;main.c: 449: Lcd_Set_Cursor(2, 1 + n);
  3491  000D58  0100               	movlb	0	; () banked
  3492  000D5A  29C4               	incf	start_routine@n& (0+255),w,b
  3493  000D5C  6E12               	movwf	Lcd_Set_Cursor@b,c
  3494  000D5E  0E02               	movlw	2
  3495  000D60  EC2B  F00D         	call	_Lcd_Set_Cursor
  3496                           
  3497                           ;main.c: 450: Lcd_Write_Char(' ');
  3498  000D64  0E20               	movlw	32
  3499  000D66  ECB6  F00D         	call	_Lcd_Write_Char
  3500                           
  3501                           ;main.c: 451: Lcd_Set_Cursor(2, n);
  3502  000D6A  C0C4  F012         	movff	start_routine@n,Lcd_Set_Cursor@b
  3503  000D6E  0E02               	movlw	2
  3504  000D70  EC2B  F00D         	call	_Lcd_Set_Cursor
  3505                           
  3506                           ;main.c: 452: n--;
  3507  000D74  0100               	movlb	0	; () banked
  3508  000D76  07C4               	decf	start_routine@n& (0+255),f,b
  3509                           
  3510                           ;main.c: 453: }
  3511  000D78  D042               	goto	l4074
  3512  000D7A                     l4056:
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;main.c: 454: else if ((x - '#') != 0)
  3516  000D7A  0EDD               	movlw	221
  3517  000D7C  0100               	movlb	0	; () banked
  3518  000D7E  6F9E               	movwf	??_start_routine& (0+255),b
  3519  000D80  0EFF               	movlw	255
  3520  000D82  0100               	movlb	0	; () banked
  3521  000D84  6F9F               	movwf	(??_start_routine+1)& (0+255),b
  3522  000D86  0100               	movlb	0	; () banked
  3523  000D88  51C3               	movf	start_routine@x& (0+255),w,b
  3524  000D8A  0100               	movlb	0	; () banked
  3525  000D8C  6FA0               	movwf	(??_start_routine+2)& (0+255),b
  3526  000D8E  6BA1               	clrf	(??_start_routine+3)& (0+255),b
  3527  000D90  0100               	movlb	0	; () banked
  3528  000D92  519E               	movf	??_start_routine& (0+255),w,b
  3529  000D94  0100               	movlb	0	; () banked
  3530  000D96  27A0               	addwf	(??_start_routine+2)& (0+255),f,b
  3531  000D98  0100               	movlb	0	; () banked
  3532  000D9A  519F               	movf	(??_start_routine+1)& (0+255),w,b
  3533  000D9C  0100               	movlb	0	; () banked
  3534  000D9E  23A1               	addwfc	(??_start_routine+3)& (0+255),f,b
  3535  000DA0  0100               	movlb	0	; () banked
  3536  000DA2  51A0               	movf	(??_start_routine+2)& (0+255),w,b
  3537  000DA4  0100               	movlb	0	; () banked
  3538  000DA6  11A1               	iorwf	(??_start_routine+3)& (0+255),w,b
  3539  000DA8  B4D8               	btfsc	status,2,c
  3540  000DAA  D029               	goto	l4074
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;main.c: 455: {
  3544                           ;main.c: 456: if ((x == '*')|(n == 3))
  3545  000DAC  0E2A               	movlw	42
  3546  000DAE  0100               	movlb	0	; () banked
  3547  000DB0  19C3               	xorwf	start_routine@x& (0+255),w,b
  3548  000DB2  B4D8               	btfsc	status,2,c
  3549  000DB4  D028               	goto	l4076
  3550                           
  3551                           ; BSR set to: 0
  3552  000DB6  0E03               	movlw	3
  3553  000DB8  0100               	movlb	0	; () banked
  3554  000DBA  19C4               	xorwf	start_routine@n& (0+255),w,b
  3555  000DBC  B4D8               	btfsc	status,2,c
  3556  000DBE  D023               	goto	l4076
  3557                           
  3558                           ; BSR set to: 0
  3559                           ;main.c: 459: }
  3560                           ;main.c: 460: I2C_new_ADDR[n] = x;
  3561                           
  3562                           ; BSR set to: 0
  3563                           
  3564                           ; BSR set to: 0
  3565                           ;main.c: 457: {
  3566                           ;main.c: 458: break;
  3567  000DC0  0100               	movlb	0	; () banked
  3568  000DC2  51C4               	movf	start_routine@n& (0+255),w,b
  3569  000DC4  0D01               	mullw	1
  3570  000DC6  0EBB               	movlw	low start_routine@I2C_new_ADDR
  3571  000DC8  24F3               	addwf	prodl,w,c
  3572  000DCA  6ED9               	movwf	fsr2l,c
  3573  000DCC  0E00               	movlw	high start_routine@I2C_new_ADDR
  3574  000DCE  20F4               	addwfc	prodh,w,c
  3575  000DD0  6EDA               	movwf	fsr2h,c
  3576  000DD2  C0C3  FFDF         	movff	start_routine@x,indf2
  3577                           
  3578                           ; BSR set to: 0
  3579                           ;main.c: 461: n++;
  3580  000DD6  0100               	movlb	0	; () banked
  3581  000DD8  2BC4               	incf	start_routine@n& (0+255),f,b
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;main.c: 462: Lcd_Set_Cursor(2, n);
  3585  000DDA  C0C4  F012         	movff	start_routine@n,Lcd_Set_Cursor@b
  3586  000DDE  0E02               	movlw	2
  3587  000DE0  EC2B  F00D         	call	_Lcd_Set_Cursor
  3588                           
  3589                           ;main.c: 463: Lcd_Write_Char(x);
  3590  000DE4  0100               	movlb	0	; () banked
  3591  000DE6  51C3               	movf	start_routine@x& (0+255),w,b
  3592  000DE8  ECB6  F00D         	call	_Lcd_Write_Char
  3593                           
  3594                           ;main.c: 464: Lcd_Write_Char('_');
  3595  000DEC  0E5F               	movlw	95
  3596  000DEE  ECB6  F00D         	call	_Lcd_Write_Char
  3597                           
  3598                           ;main.c: 465: latch_keypad(&x);
  3599  000DF2  0EC3               	movlw	low start_routine@x
  3600  000DF4  6E10               	movwf	latch_keypad@x,c
  3601  000DF6  0E00               	movlw	high start_routine@x
  3602  000DF8  6E11               	movwf	latch_keypad@x+1,c
  3603  000DFA  EC9A  F00D         	call	_latch_keypad	;wreg free
  3604  000DFE                     l4074:
  3605  000DFE  0E02               	movlw	2
  3606  000E00  0100               	movlb	0	; () banked
  3607  000E02  65C4               	cpfsgt	start_routine@n& (0+255),b
  3608  000E04  D769               	goto	l4032
  3609  000E06                     l4076:
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;main.c: 466: }
  3613                           ;main.c: 467: }
  3614                           ;main.c: 468: }
  3615                           ;main.c: 470: unsigned char new_I2C_address = 0;
  3616  000E06  0E00               	movlw	0
  3617  000E08  0100               	movlb	0	; () banked
  3618  000E0A  6FC5               	movwf	start_routine@new_I2C_address& (0+255),b
  3619                           
  3620                           ;main.c: 471: unsigned char b[3];
  3621                           ;main.c: 472: for (int i = 0; i < 3; i++)
  3622  000E0C  0E00               	movlw	0
  3623  000E0E  0100               	movlb	0	; () banked
  3624  000E10  6FC1               	movwf	(start_routine@i_892+1)& (0+255),b
  3625  000E12  0E00               	movlw	0
  3626  000E14  6FC0               	movwf	start_routine@i_892& (0+255),b
  3627  000E16                     l4078:
  3628                           
  3629                           ; BSR set to: 0
  3630  000E16  0100               	movlb	0	; () banked
  3631  000E18  BFC1               	btfsc	(start_routine@i_892+1)& (0+255),7,b
  3632  000E1A  D008               	goto	l4082
  3633  000E1C  0100               	movlb	0	; () banked
  3634  000E1E  51C1               	movf	(start_routine@i_892+1)& (0+255),w,b
  3635  000E20  E11C               	bnz	l4088
  3636  000E22  0E03               	movlw	3
  3637  000E24  0100               	movlb	0	; () banked
  3638  000E26  5DC0               	subwf	start_routine@i_892& (0+255),w,b
  3639  000E28  B0D8               	btfsc	status,0,c
  3640  000E2A  D017               	goto	l4088
  3641  000E2C                     l4082:
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;main.c: 473: b[i] = I2C_new_ADDR[i] - '0';
  3645  000E2C  0EB4               	movlw	low start_routine@b
  3646  000E2E  0100               	movlb	0	; () banked
  3647  000E30  25C0               	addwf	start_routine@i_892& (0+255),w,b
  3648  000E32  6ED9               	movwf	fsr2l,c
  3649  000E34  0E00               	movlw	high start_routine@b
  3650  000E36  0100               	movlb	0	; () banked
  3651  000E38  21C1               	addwfc	(start_routine@i_892+1)& (0+255),w,b
  3652  000E3A  6EDA               	movwf	fsr2h,c
  3653  000E3C  0EBB               	movlw	low start_routine@I2C_new_ADDR
  3654  000E3E  0100               	movlb	0	; () banked
  3655  000E40  25C0               	addwf	start_routine@i_892& (0+255),w,b
  3656  000E42  6EE1               	movwf	fsr1l,c
  3657  000E44  0E00               	movlw	high start_routine@I2C_new_ADDR
  3658  000E46  0100               	movlb	0	; () banked
  3659  000E48  21C1               	addwfc	(start_routine@i_892+1)& (0+255),w,b
  3660  000E4A  6EE2               	movwf	fsr1h,c
  3661  000E4C  50E7               	movf	indf1,w,c
  3662  000E4E  0FD0               	addlw	208
  3663  000E50  6EDF               	movwf	indf2,c
  3664                           
  3665                           ; BSR set to: 0
  3666  000E52  0100               	movlb	0	; () banked
  3667  000E54  4BC0               	infsnz	start_routine@i_892& (0+255),f,b
  3668  000E56  2BC1               	incf	(start_routine@i_892+1)& (0+255),f,b
  3669  000E58  D7DE               	goto	l4078
  3670  000E5A                     l4088:
  3671                           
  3672                           ; BSR set to: 0
  3673                           ;main.c: 474: new_I2C_address += (100)*(I2C_new_ADDR[0] - '0');
  3674  000E5A  0100               	movlb	0	; () banked
  3675  000E5C  51BB               	movf	start_routine@I2C_new_ADDR& (0+255),w,b
  3676  000E5E  0FD0               	addlw	208
  3677  000E60  0D64               	mullw	100
  3678  000E62  50F3               	movf	prodl,w,c
  3679  000E64  0100               	movlb	0	; () banked
  3680  000E66  27C5               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3681                           
  3682                           ;main.c: 475: new_I2C_address += (10)*(I2C_new_ADDR[1] - '0');
  3683  000E68  0100               	movlb	0	; () banked
  3684  000E6A  51BC               	movf	(start_routine@I2C_new_ADDR+1)& (0+255),w,b
  3685  000E6C  0FD0               	addlw	208
  3686  000E6E  0D0A               	mullw	10
  3687  000E70  50F3               	movf	prodl,w,c
  3688  000E72  0100               	movlb	0	; () banked
  3689  000E74  27C5               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;main.c: 476: new_I2C_address += (1)*(I2C_new_ADDR[2] - '0');
  3693  000E76  0100               	movlb	0	; () banked
  3694  000E78  51BD               	movf	(start_routine@I2C_new_ADDR+2)& (0+255),w,b
  3695  000E7A  0FD0               	addlw	208
  3696  000E7C  0100               	movlb	0	; () banked
  3697  000E7E  27C5               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3698                           
  3699                           ; BSR set to: 0
  3700                           ;main.c: 477: Machine_ID = new_I2C_address;
  3701  000E80  C0C5  F04F         	movff	start_routine@new_I2C_address,_Machine_ID
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;main.c: 478: new_I2C_address += 0x0F;
  3705  000E84  0E0F               	movlw	15
  3706  000E86  0100               	movlb	0	; () banked
  3707  000E88  27C5               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;main.c: 480: char* error_msg;
  3711                           ;main.c: 481: if ( ((b[0]==0)&&((b[1]!=0)|(b[2]!=0))) | ((b[0]==1)&&(b[1]==0)&&(b[2]==0)
      +                          ) )
  3712  000E8A  0100               	movlb	0	; () banked
  3713  000E8C  51B4               	movf	start_routine@b& (0+255),w,b
  3714  000E8E  0100               	movlb	0	; () banked
  3715  000E90  A4D8               	btfss	status,2,c
  3716  000E92  D008               	goto	l4102
  3717                           
  3718                           ; BSR set to: 0
  3719  000E94  0100               	movlb	0	; () banked
  3720  000E96  51B5               	movf	(start_routine@b+1)& (0+255),w,b
  3721  000E98  A4D8               	btfss	status,2,c
  3722  000E9A  D010               	goto	l4108
  3723                           
  3724                           ; BSR set to: 0
  3725  000E9C  0100               	movlb	0	; () banked
  3726  000E9E  51B6               	movf	(start_routine@b+2)& (0+255),w,b
  3727  000EA0  A4D8               	btfss	status,2,c
  3728  000EA2  D00C               	goto	l4108
  3729  000EA4                     l4102:
  3730                           
  3731                           ; BSR set to: 0
  3732  000EA4  0100               	movlb	0	; () banked
  3733  000EA6  05B4               	decf	start_routine@b& (0+255),w,b
  3734  000EA8  A4D8               	btfss	status,2,c
  3735  000EAA  D115               	goto	l4176
  3736                           
  3737                           ; BSR set to: 0
  3738  000EAC  0100               	movlb	0	; () banked
  3739  000EAE  51B5               	movf	(start_routine@b+1)& (0+255),w,b
  3740  000EB0  A4D8               	btfss	status,2,c
  3741  000EB2  D111               	goto	l4176
  3742                           
  3743                           ; BSR set to: 0
  3744  000EB4  0100               	movlb	0	; () banked
  3745  000EB6  51B6               	movf	(start_routine@b+2)& (0+255),w,b
  3746  000EB8  A4D8               	btfss	status,2,c
  3747  000EBA  D10D               	goto	l4176
  3748  000EBC                     l4108:
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;main.c: 482: {
  3752                           ;main.c: 484: dh = (new_I2C_address / 100);
  3753  000EBC  C0C5  F010         	movff	start_routine@new_I2C_address,___awdiv@dividend
  3754  000EC0  6A11               	clrf	___awdiv@dividend+1,c
  3755  000EC2  0E00               	movlw	0
  3756  000EC4  6E13               	movwf	___awdiv@divisor+1,c
  3757  000EC6  0E64               	movlw	100
  3758  000EC8  6E12               	movwf	___awdiv@divisor,c
  3759  000ECA  EC13  F00C         	call	___awdiv	;wreg free
  3760  000ECE  5010               	movf	?___awdiv,w,c
  3761  000ED0  0100               	movlb	0	; () banked
  3762  000ED2  6FC2               	movwf	start_routine@dh& (0+255),b
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;main.c: 485: dt = (new_I2C_address - dh*100) / 10;
  3766  000ED4  0100               	movlb	0	; () banked
  3767  000ED6  51C2               	movf	start_routine@dh& (0+255),w,b
  3768  000ED8  0D64               	mullw	100
  3769  000EDA  1EF3               	comf	prodl,f,c
  3770  000EDC  1EF4               	comf	prodh,f,c
  3771  000EDE  4AF3               	infsnz	prodl,f,c
  3772  000EE0  2AF4               	incf	prodh,f,c
  3773  000EE2  0100               	movlb	0	; () banked
  3774  000EE4  51C5               	movf	start_routine@new_I2C_address& (0+255),w,b
  3775  000EE6  24F3               	addwf	prodl,w,c
  3776  000EE8  6E10               	movwf	___awdiv@dividend,c
  3777  000EEA  0E00               	movlw	0
  3778  000EEC  20F4               	addwfc	prodh,w,c
  3779  000EEE  6E11               	movwf	___awdiv@dividend+1,c
  3780  000EF0  0E00               	movlw	0
  3781  000EF2  6E13               	movwf	___awdiv@divisor+1,c
  3782  000EF4  0E0A               	movlw	10
  3783  000EF6  6E12               	movwf	___awdiv@divisor,c
  3784  000EF8  EC13  F00C         	call	___awdiv	;wreg free
  3785  000EFC  5010               	movf	?___awdiv,w,c
  3786  000EFE  0100               	movlb	0	; () banked
  3787  000F00  6FBF               	movwf	start_routine@dt& (0+255),b
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;main.c: 486: d1 = (new_I2C_address - (dh*100+dt*10));
  3791  000F02  0100               	movlb	0	; () banked
  3792  000F04  51BF               	movf	start_routine@dt& (0+255),w,b
  3793  000F06  0D0A               	mullw	10
  3794  000F08  CFF3 F09E          	movff	prodl,??_start_routine
  3795  000F0C  0100               	movlb	0	; () banked
  3796  000F0E  51C2               	movf	start_routine@dh& (0+255),w,b
  3797  000F10  0D64               	mullw	100
  3798  000F12  50F3               	movf	prodl,w,c
  3799  000F14  0100               	movlb	0	; () banked
  3800  000F16  259E               	addwf	??_start_routine& (0+255),w,b
  3801  000F18  0800               	sublw	0
  3802  000F1A  0100               	movlb	0	; () banked
  3803  000F1C  25C5               	addwf	start_routine@new_I2C_address& (0+255),w,b
  3804  000F1E  0100               	movlb	0	; () banked
  3805  000F20  6FA6               	movwf	start_routine@d1& (0+255),b
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;main.c: 488: h = new_I2C_address/16;
  3809  000F22  C0C5  F010         	movff	start_routine@new_I2C_address,___awdiv@dividend
  3810  000F26  6A11               	clrf	___awdiv@dividend+1,c
  3811  000F28  0E00               	movlw	0
  3812  000F2A  6E13               	movwf	___awdiv@divisor+1,c
  3813  000F2C  0E10               	movlw	16
  3814  000F2E  6E12               	movwf	___awdiv@divisor,c
  3815  000F30  EC13  F00C         	call	___awdiv	;wreg free
  3816  000F34  5010               	movf	?___awdiv,w,c
  3817  000F36  0100               	movlb	0	; () banked
  3818  000F38  6FA2               	movwf	start_routine@h& (0+255),b
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;main.c: 489: l = new_I2C_address - (new_I2C_address/16)*16;
  3822  000F3A  C0C5  F010         	movff	start_routine@new_I2C_address,___awdiv@dividend
  3823  000F3E  6A11               	clrf	___awdiv@dividend+1,c
  3824  000F40  0E00               	movlw	0
  3825  000F42  6E13               	movwf	___awdiv@divisor+1,c
  3826  000F44  0E10               	movlw	16
  3827  000F46  6E12               	movwf	___awdiv@divisor,c
  3828  000F48  EC13  F00C         	call	___awdiv	;wreg free
  3829  000F4C  3810               	swapf	?___awdiv,w,c
  3830  000F4E  0BF0               	andlw	240
  3831  000F50  0800               	sublw	0
  3832  000F52  0100               	movlb	0	; () banked
  3833  000F54  25C5               	addwf	start_routine@new_I2C_address& (0+255),w,b
  3834  000F56  0100               	movlb	0	; () banked
  3835  000F58  6FA3               	movwf	start_routine@l& (0+255),b
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;main.c: 490: Lcd_Clear();
  3839  000F5A  EC25  F00E         	call	_Lcd_Clear	;wreg free
  3840                           
  3841                           ;main.c: 491: Lcd_Set_Cursor(1,1);
  3842  000F5E  0E01               	movlw	1
  3843  000F60  6E12               	movwf	Lcd_Set_Cursor@b,c
  3844  000F62  0E01               	movlw	1
  3845  000F64  EC2B  F00D         	call	_Lcd_Set_Cursor
  3846                           
  3847                           ;main.c: 492: Lcd_Write_String("New Machine ID: ");
  3848  000F68  0E31               	movlw	low STR_19
  3849  000F6A  6E14               	movwf	Lcd_Write_String@a,c
  3850  000F6C  0E7F               	movlw	high STR_19
  3851  000F6E  6E15               	movwf	Lcd_Write_String@a+1,c
  3852  000F70  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  3853                           
  3854                           ;main.c: 493: Lcd_Set_Cursor(2,1);
  3855  000F74  0E01               	movlw	1
  3856  000F76  6E12               	movwf	Lcd_Set_Cursor@b,c
  3857  000F78  0E02               	movlw	2
  3858  000F7A  EC2B  F00D         	call	_Lcd_Set_Cursor
  3859                           
  3860                           ;main.c: 494: for (int i = 0; i < 3; i++)
  3861  000F7E  0E00               	movlw	0
  3862  000F80  0100               	movlb	0	; () banked
  3863  000F82  6FB8               	movwf	(start_routine@i_895+1)& (0+255),b
  3864  000F84  0E00               	movlw	0
  3865  000F86  6FB7               	movwf	start_routine@i_895& (0+255),b
  3866  000F88                     l4128:
  3867                           
  3868                           ; BSR set to: 0
  3869  000F88  0100               	movlb	0	; () banked
  3870  000F8A  BFB8               	btfsc	(start_routine@i_895+1)& (0+255),7,b
  3871  000F8C  D008               	goto	l4132
  3872  000F8E  0100               	movlb	0	; () banked
  3873  000F90  51B8               	movf	(start_routine@i_895+1)& (0+255),w,b
  3874  000F92  E114               	bnz	l4138
  3875  000F94  0E03               	movlw	3
  3876  000F96  0100               	movlb	0	; () banked
  3877  000F98  5DB7               	subwf	start_routine@i_895& (0+255),w,b
  3878  000F9A  B0D8               	btfsc	status,0,c
  3879  000F9C  D00F               	goto	l4138
  3880  000F9E                     l4132:
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;main.c: 495: Lcd_Write_Char(I2C_new_ADDR[i]);
  3884  000F9E  0EBB               	movlw	low start_routine@I2C_new_ADDR
  3885  000FA0  0100               	movlb	0	; () banked
  3886  000FA2  25B7               	addwf	start_routine@i_895& (0+255),w,b
  3887  000FA4  6ED9               	movwf	fsr2l,c
  3888  000FA6  0E00               	movlw	high start_routine@I2C_new_ADDR
  3889  000FA8  0100               	movlb	0	; () banked
  3890  000FAA  21B8               	addwfc	(start_routine@i_895+1)& (0+255),w,b
  3891  000FAC  6EDA               	movwf	fsr2h,c
  3892  000FAE  50DF               	movf	indf2,w,c
  3893  000FB0  ECB6  F00D         	call	_Lcd_Write_Char
  3894  000FB4  0100               	movlb	0	; () banked
  3895  000FB6  4BB7               	infsnz	start_routine@i_895& (0+255),f,b
  3896  000FB8  2BB8               	incf	(start_routine@i_895+1)& (0+255),f,b
  3897  000FBA  D7E6               	goto	l4128
  3898  000FBC                     l4138:
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;main.c: 496: Lcd_Set_Cursor(2, 7);
  3902  000FBC  0E07               	movlw	7
  3903  000FBE  6E12               	movwf	Lcd_Set_Cursor@b,c
  3904  000FC0  0E02               	movlw	2
  3905  000FC2  EC2B  F00D         	call	_Lcd_Set_Cursor
  3906                           
  3907                           ;main.c: 497: Lcd_Write_String("[OK]");
  3908  000FC6  0EF7               	movlw	low STR_22
  3909  000FC8  6E14               	movwf	Lcd_Write_String@a,c
  3910  000FCA  0E7F               	movlw	high STR_22
  3911  000FCC  6E15               	movwf	Lcd_Write_String@a+1,c
  3912  000FCE  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  3913                           
  3914                           ;main.c: 498: Lcd_Set_Cursor(2,14);
  3915  000FD2  0E0E               	movlw	14
  3916  000FD4  6E12               	movwf	Lcd_Set_Cursor@b,c
  3917  000FD6  0E02               	movlw	2
  3918  000FD8  EC2B  F00D         	call	_Lcd_Set_Cursor
  3919                           
  3920                           ;main.c: 499: Lcd_Write_String("x");
  3921  000FDC  0EFC               	movlw	low STR_23
  3922  000FDE  6E14               	movwf	Lcd_Write_String@a,c
  3923  000FE0  0E7F               	movlw	high STR_23
  3924  000FE2  6E15               	movwf	Lcd_Write_String@a+1,c
  3925  000FE4  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  3926                           
  3927                           ;main.c: 500: Lcd_Write_Char(hx[h]);
  3928  000FE8  0100               	movlb	0	; () banked
  3929  000FEA  51A2               	movf	start_routine@h& (0+255),w,b
  3930  000FEC  0D01               	mullw	1
  3931  000FEE  0E20               	movlw	low _hx
  3932  000FF0  24F3               	addwf	prodl,w,c
  3933  000FF2  6ED9               	movwf	fsr2l,c
  3934  000FF4  0E01               	movlw	high _hx
  3935  000FF6  20F4               	addwfc	prodh,w,c
  3936  000FF8  6EDA               	movwf	fsr2h,c
  3937  000FFA  50DF               	movf	indf2,w,c
  3938  000FFC  ECB6  F00D         	call	_Lcd_Write_Char
  3939                           
  3940                           ;main.c: 501: Lcd_Write_Char(hx[l]);
  3941  001000  0100               	movlb	0	; () banked
  3942  001002  51A3               	movf	start_routine@l& (0+255),w,b
  3943  001004  0D01               	mullw	1
  3944  001006  0E20               	movlw	low _hx
  3945  001008  24F3               	addwf	prodl,w,c
  3946  00100A  6ED9               	movwf	fsr2l,c
  3947  00100C  0E01               	movlw	high _hx
  3948  00100E  20F4               	addwfc	prodh,w,c
  3949  001010  6EDA               	movwf	fsr2h,c
  3950  001012  50DF               	movf	indf2,w,c
  3951  001014  ECB6  F00D         	call	_Lcd_Write_Char
  3952                           
  3953                           ;main.c: 502: for (int i = 0; i < 50; i++)
  3954  001018  0E00               	movlw	0
  3955  00101A  0100               	movlb	0	; () banked
  3956  00101C  6FAF               	movwf	(start_routine@i_898+1)& (0+255),b
  3957  00101E  0E00               	movlw	0
  3958  001020  6FAE               	movwf	start_routine@i_898& (0+255),b
  3959                           
  3960                           ; BSR set to: 0
  3961  001022  0100               	movlb	0	; () banked
  3962  001024  BFAF               	btfsc	(start_routine@i_898+1)& (0+255),7,b
  3963  001026  D008               	goto	l4154
  3964  001028  0100               	movlb	0	; () banked
  3965  00102A  51AF               	movf	(start_routine@i_898+1)& (0+255),w,b
  3966  00102C  E119               	bnz	l328
  3967  00102E  0E32               	movlw	50
  3968  001030  0100               	movlb	0	; () banked
  3969  001032  5DAE               	subwf	start_routine@i_898& (0+255),w,b
  3970  001034  B0D8               	btfsc	status,0,c
  3971  001036  D014               	goto	l328
  3972  001038                     l4154:
  3973                           
  3974                           ; BSR set to: 0
  3975                           ;main.c: 503: _delay((unsigned long)((20)*(16000000/4000.0)));
  3976  001038  0E68               	movlw	104
  3977  00103A  0100               	movlb	0	; () banked
  3978  00103C  6F9E               	movwf	??_start_routine& (0+255),b
  3979  00103E  0EE4               	movlw	228
  3980  001040                     u4687:
  3981  001040  2EE8               	decfsz	wreg,f,c
  3982  001042  D7FE               	goto	u4687
  3983  001044  2F9E               	decfsz	??_start_routine& (0+255),f,b
  3984  001046  D7FC               	goto	u4687
  3985  001048  F000 F000          	nop2	
  3986  00104C  0100               	movlb	0	; () banked
  3987  00104E  4BAE               	infsnz	start_routine@i_898& (0+255),f,b
  3988  001050  2BAF               	incf	(start_routine@i_898+1)& (0+255),f,b
  3989  001052  0100               	movlb	0	; () banked
  3990  001054  BFAF               	btfsc	(start_routine@i_898+1)& (0+255),7,b
  3991  001056  D7F0               	goto	l4154
  3992  001058  0100               	movlb	0	; () banked
  3993  00105A  51AF               	movf	(start_routine@i_898+1)& (0+255),w,b
  3994  00105C  E101               	bnz	u3880
  3995  00105E  D7E7               	goto	L4
  3996  001060                     u3880:
  3997  001060                     l328:
  3998                           
  3999                           ; BSR set to: 0
  4000                           ;main.c: 504: I2C_ADDR = new_I2C_address;
  4001  001060  C0C5  F0E2         	movff	start_routine@new_I2C_address,_I2C_ADDR
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;main.c: 505: Eeprom_Write_Byte(EEP_I2C_ADDR, I2C_ADDR);
  4005  001064  C0E2  F010         	movff	_I2C_ADDR,Eeprom_Write_Byte@data
  4006  001068  0100               	movlb	0	; () banked
  4007  00106A  51E0               	movf	_EEP_I2C_ADDR& (0+255),w,b
  4008  00106C  EC13  F00E         	call	_Eeprom_Write_Byte
  4009                           
  4010                           ;main.c: 506: Lcd_Clear();
  4011  001070  EC25  F00E         	call	_Lcd_Clear	;wreg free
  4012                           
  4013                           ;main.c: 507: Lcd_Set_Cursor(1,1);
  4014  001074  0E01               	movlw	1
  4015  001076  6E12               	movwf	Lcd_Set_Cursor@b,c
  4016  001078  0E01               	movlw	1
  4017  00107A  EC2B  F00D         	call	_Lcd_Set_Cursor
  4018                           
  4019                           ;main.c: 508: Lcd_Write_String("I2C_ADDR>>EEPROM");
  4020  00107E  0E86               	movlw	low STR_24
  4021  001080  6E14               	movwf	Lcd_Write_String@a,c
  4022  001082  0E7F               	movlw	high STR_24
  4023  001084  6E15               	movwf	Lcd_Write_String@a+1,c
  4024  001086  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  4025                           
  4026                           ;main.c: 515: for (int i = 0; i < 10; i++)
  4027  00108A  0E00               	movlw	0
  4028  00108C  0100               	movlb	0	; () banked
  4029  00108E  6FB1               	movwf	(start_routine@i_901+1)& (0+255),b
  4030  001090  0E00               	movlw	0
  4031  001092  6FB0               	movwf	start_routine@i_901& (0+255),b
  4032  001094                     l4166:
  4033                           
  4034                           ; BSR set to: 0
  4035  001094  0100               	movlb	0	; () banked
  4036  001096  BFB1               	btfsc	(start_routine@i_901+1)& (0+255),7,b
  4037  001098  D008               	goto	l4170
  4038  00109A  0100               	movlb	0	; () banked
  4039  00109C  51B1               	movf	(start_routine@i_901+1)& (0+255),w,b
  4040  00109E  E113               	bnz	l4174
  4041  0010A0  0E0A               	movlw	10
  4042  0010A2  0100               	movlb	0	; () banked
  4043  0010A4  5DB0               	subwf	start_routine@i_901& (0+255),w,b
  4044  0010A6  B0D8               	btfsc	status,0,c
  4045  0010A8  D00E               	goto	l4174
  4046  0010AA                     l4170:
  4047                           
  4048                           ; BSR set to: 0
  4049                           ;main.c: 516: _delay((unsigned long)((20)*(16000000/4000.0)));
  4050  0010AA  0E68               	movlw	104
  4051  0010AC  0100               	movlb	0	; () banked
  4052  0010AE  6F9E               	movwf	??_start_routine& (0+255),b
  4053  0010B0  0EE4               	movlw	228
  4054  0010B2                     u4697:
  4055  0010B2  2EE8               	decfsz	wreg,f,c
  4056  0010B4  D7FE               	goto	u4697
  4057  0010B6  2F9E               	decfsz	??_start_routine& (0+255),f,b
  4058  0010B8  D7FC               	goto	u4697
  4059  0010BA  F000 F000          	nop2	
  4060  0010BE  0100               	movlb	0	; () banked
  4061  0010C0  4BB0               	infsnz	start_routine@i_901& (0+255),f,b
  4062  0010C2  2BB1               	incf	(start_routine@i_901+1)& (0+255),f,b
  4063  0010C4  D7E7               	goto	l4166
  4064  0010C6                     l4174:
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;main.c: 517: menu_progress_bar(500);
  4068  0010C6  0E01               	movlw	1
  4069  0010C8  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  4070  0010CA  0EF4               	movlw	244
  4071  0010CC  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  4072  0010CE  EC50  F00A         	call	_menu_progress_bar	;wreg free
  4073  0010D2  00FF               	reset		;# 
  4074                           
  4075                           ;main.c: 519: }
  4076  0010D4  D05D               	goto	l4210
  4077  0010D6                     l4176:
  4078                           
  4079                           ;main.c: 520: else
  4080                           ;main.c: 521: {
  4081                           ;main.c: 522: if (new_I2C_address == 0)
  4082  0010D6  0100               	movlb	0	; () banked
  4083  0010D8  51C5               	movf	start_routine@new_I2C_address& (0+255),w,b
  4084  0010DA  0100               	movlb	0	; () banked
  4085  0010DC  A4D8               	btfss	status,2,c
  4086  0010DE  D005               	goto	l4180
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;main.c: 523: error_msg = "May not be zero!";
  4090  0010E0  0E53               	movlw	low STR_25
  4091  0010E2  0100               	movlb	0	; () banked
  4092  0010E4  6FA4               	movwf	start_routine@error_msg& (0+255),b
  4093  0010E6  0E7F               	movlw	high STR_25
  4094  0010E8  D004               	goto	L5
  4095  0010EA                     l4180:
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;main.c: 524: else
  4099                           ;main.c: 525: error_msg = "Out of bounds!  ";
  4100  0010EA  0EED               	movlw	low STR_26
  4101  0010EC  0100               	movlb	0	; () banked
  4102  0010EE  6FA4               	movwf	start_routine@error_msg& (0+255),b
  4103  0010F0  0E7E               	movlw	high STR_26
  4104  0010F2                     L5:
  4105  0010F2  0100               	movlb	0	; () banked
  4106  0010F4  6FA5               	movwf	(start_routine@error_msg+1)& (0+255),b
  4107                           
  4108                           ; BSR set to: 0
  4109                           ;main.c: 526: Lcd_Set_Cursor(2,1);
  4110                           
  4111                           ; BSR set to: 0
  4112  0010F6  0E01               	movlw	1
  4113  0010F8  6E12               	movwf	Lcd_Set_Cursor@b,c
  4114  0010FA  0E02               	movlw	2
  4115  0010FC  EC2B  F00D         	call	_Lcd_Set_Cursor
  4116                           
  4117                           ;main.c: 527: Lcd_Write_String(error_msg);
  4118  001100  C0A4  F014         	movff	start_routine@error_msg,Lcd_Write_String@a
  4119  001104  C0A5  F015         	movff	start_routine@error_msg+1,Lcd_Write_String@a+1
  4120  001108  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  4121                           
  4122                           ;main.c: 528: for (int i = 0; i < 50; i++)
  4123  00110C  0E00               	movlw	0
  4124  00110E  0100               	movlb	0	; () banked
  4125  001110  6FB3               	movwf	(start_routine@i_904+1)& (0+255),b
  4126  001112  0E00               	movlw	0
  4127  001114  6FB2               	movwf	start_routine@i_904& (0+255),b
  4128  001116                     l4188:
  4129                           
  4130                           ; BSR set to: 0
  4131  001116  0100               	movlb	0	; () banked
  4132  001118  BFB3               	btfsc	(start_routine@i_904+1)& (0+255),7,b
  4133  00111A  D008               	goto	l4192
  4134  00111C  0100               	movlb	0	; () banked
  4135  00111E  51B3               	movf	(start_routine@i_904+1)& (0+255),w,b
  4136  001120  E113               	bnz	l4196
  4137  001122  0E32               	movlw	50
  4138  001124  0100               	movlb	0	; () banked
  4139  001126  5DB2               	subwf	start_routine@i_904& (0+255),w,b
  4140  001128  B0D8               	btfsc	status,0,c
  4141  00112A  D00E               	goto	l4196
  4142  00112C                     l4192:
  4143                           
  4144                           ; BSR set to: 0
  4145                           ;main.c: 529: _delay((unsigned long)((20)*(16000000/4000.0)));
  4146  00112C  0E68               	movlw	104
  4147  00112E  0100               	movlb	0	; () banked
  4148  001130  6F9E               	movwf	??_start_routine& (0+255),b
  4149  001132  0EE4               	movlw	228
  4150  001134                     u4707:
  4151  001134  2EE8               	decfsz	wreg,f,c
  4152  001136  D7FE               	goto	u4707
  4153  001138  2F9E               	decfsz	??_start_routine& (0+255),f,b
  4154  00113A  D7FC               	goto	u4707
  4155  00113C  F000 F000          	nop2	
  4156  001140  0100               	movlb	0	; () banked
  4157  001142  4BB2               	infsnz	start_routine@i_904& (0+255),f,b
  4158  001144  2BB3               	incf	(start_routine@i_904+1)& (0+255),f,b
  4159  001146  D7E7               	goto	l4188
  4160  001148                     l4196:
  4161                           
  4162                           ; BSR set to: 0
  4163                           ;main.c: 530: for (int i = 0; i < 3; i++)
  4164  001148  0E00               	movlw	0
  4165  00114A  0100               	movlb	0	; () banked
  4166  00114C  6FBA               	movwf	(start_routine@i_905+1)& (0+255),b
  4167  00114E  0E00               	movlw	0
  4168  001150  6FB9               	movwf	start_routine@i_905& (0+255),b
  4169  001152                     l4198:
  4170                           
  4171                           ; BSR set to: 0
  4172  001152  0100               	movlb	0	; () banked
  4173  001154  BFBA               	btfsc	(start_routine@i_905+1)& (0+255),7,b
  4174  001156  D008               	goto	l4202
  4175  001158  0100               	movlb	0	; () banked
  4176  00115A  51BA               	movf	(start_routine@i_905+1)& (0+255),w,b
  4177  00115C  E113               	bnz	l4208
  4178  00115E  0E03               	movlw	3
  4179  001160  0100               	movlb	0	; () banked
  4180  001162  5DB9               	subwf	start_routine@i_905& (0+255),w,b
  4181  001164  B0D8               	btfsc	status,0,c
  4182  001166  D00E               	goto	l4208
  4183  001168                     l4202:
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;main.c: 531: I2C_new_ADDR[i] = '0';
  4187  001168  0EBB               	movlw	low start_routine@I2C_new_ADDR
  4188  00116A  0100               	movlb	0	; () banked
  4189  00116C  25B9               	addwf	start_routine@i_905& (0+255),w,b
  4190  00116E  6ED9               	movwf	fsr2l,c
  4191  001170  0E00               	movlw	high start_routine@I2C_new_ADDR
  4192  001172  0100               	movlb	0	; () banked
  4193  001174  21BA               	addwfc	(start_routine@i_905+1)& (0+255),w,b
  4194  001176  6EDA               	movwf	fsr2h,c
  4195  001178  0E30               	movlw	48
  4196  00117A  6EDF               	movwf	indf2,c
  4197                           
  4198                           ; BSR set to: 0
  4199  00117C  0100               	movlb	0	; () banked
  4200  00117E  4BB9               	infsnz	start_routine@i_905& (0+255),f,b
  4201  001180  2BBA               	incf	(start_routine@i_905+1)& (0+255),f,b
  4202  001182  D7E7               	goto	l4198
  4203  001184                     l4208:
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;main.c: 532: v = 0;
  4207  001184  0E00               	movlw	0
  4208  001186  0100               	movlb	0	; () banked
  4209  001188  6FA7               	movwf	start_routine@v& (0+255),b
  4210                           
  4211                           ;main.c: 533: n = 0;
  4212  00118A  0E00               	movlw	0
  4213  00118C  0100               	movlb	0	; () banked
  4214  00118E  6FC4               	movwf	start_routine@n& (0+255),b
  4215  001190                     l4210:
  4216  001190  0100               	movlb	0	; () banked
  4217  001192  05A7               	decf	start_routine@v& (0+255),w,b
  4218  001194  B4D8               	btfsc	status,2,c
  4219  001196  0012               	return	
  4220  001198  D580               	goto	l4022
  4221  00119A                     l4212:
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;main.c: 537: else
  4225                           ;main.c: 538: {
  4226                           ;main.c: 539: v = 1;
  4227  00119A  0E01               	movlw	1
  4228  00119C  0100               	movlb	0	; () banked
  4229  00119E  6FA7               	movwf	start_routine@v& (0+255),b
  4230  0011A0  0012               	return	
  4231  0011A2                     __end_of_start_routine:
  4232                           	opt stack 0
  4233                           tblptru	equ	0xFF8
  4234                           tblptrh	equ	0xFF7
  4235                           tblptrl	equ	0xFF6
  4236                           tablat	equ	0xFF5
  4237                           prodh	equ	0xFF4
  4238                           prodl	equ	0xFF3
  4239                           postinc0	equ	0xFEE
  4240                           wreg	equ	0xFE8
  4241                           indf1	equ	0xFE7
  4242                           postdec1	equ	0xFE5
  4243                           plusw1	equ	0xFE3
  4244                           fsr1h	equ	0xFE2
  4245                           fsr1l	equ	0xFE1
  4246                           indf2	equ	0xFDF
  4247                           plusw2	equ	0xFDB
  4248                           fsr2h	equ	0xFDA
  4249                           fsr2l	equ	0xFD9
  4250                           status	equ	0xFD8
  4251                           
  4252 ;; *************** function _latch_keypad *****************
  4253 ;; Defined at:
  4254 ;;		line 283 in file "main.c"
  4255 ;; Parameters:    Size  Location     Type
  4256 ;;  x               2   15[COMRAM] PTR unsigned char 
  4257 ;;		 -> start_routine@x(1), main@x(1), 
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;		None
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  1    wreg      void 
  4262 ;; Registers used:
  4263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4269 ;;      Params:         2       0       0       0       0       0       0
  4270 ;;      Locals:         0       0       0       0       0       0       0
  4271 ;;      Temps:          2       0       0       0       0       0       0
  4272 ;;      Totals:         4       0       0       0       0       0       0
  4273 ;;Total ram usage:        4 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; Hardware stack levels required when called:    2
  4276 ;; This function calls:
  4277 ;;		_read_keypad
  4278 ;; This function is called by:
  4279 ;;		_main
  4280 ;;		_start_routine
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           	psect	text2
  4285  001B34                     __ptext2:
  4286                           	opt stack 0
  4287  001B34                     _latch_keypad:
  4288                           	opt stack 27
  4289                           
  4290                           ;main.c: 285: while (*x == read_keypad())
  4291                           
  4292                           ; BSR set to: 0
  4293                           ;incstack = 0
  4294  001B34  D009               	goto	l3782
  4295  001B36                     l3780:
  4296                           
  4297                           ;main.c: 286: {
  4298                           ;main.c: 287: _delay((unsigned long)((20)*(16000000/4000.0)));
  4299  001B36  0E68               	movlw	104
  4300  001B38  6E12               	movwf	??_latch_keypad& (0+255),c
  4301  001B3A  0EE4               	movlw	228
  4302  001B3C                     u4717:
  4303  001B3C  2EE8               	decfsz	wreg,f,c
  4304  001B3E  D7FE               	goto	u4717
  4305  001B40  2E12               	decfsz	??_latch_keypad& (0+255),f,c
  4306  001B42  D7FC               	goto	u4717
  4307  001B44  F000 F000          	nop2	
  4308  001B48                     l3782:
  4309  001B48  C010  FFD9         	movff	latch_keypad@x,fsr2l
  4310  001B4C  C011  FFDA         	movff	latch_keypad@x+1,fsr2h
  4311  001B50  EC7C  F00B         	call	_read_keypad	;wreg free
  4312  001B54  6E13               	movwf	(??_latch_keypad+1)& (0+255),c
  4313  001B56  50DE               	movf	postinc2,w,c
  4314  001B58  1813               	xorwf	??_latch_keypad+1,w,c
  4315  001B5A  B4D8               	btfsc	status,2,c
  4316  001B5C  D7EC               	goto	l3780
  4317                           
  4318                           ;main.c: 288: }
  4319                           ;main.c: 289: *x = '_';
  4320  001B5E  C010  FFD9         	movff	latch_keypad@x,fsr2l
  4321  001B62  C011  FFDA         	movff	latch_keypad@x+1,fsr2h
  4322  001B66  0E5F               	movlw	95
  4323  001B68  6EDF               	movwf	indf2,c
  4324  001B6A  0012               	return		;funcret
  4325  001B6C                     __end_of_latch_keypad:
  4326                           	opt stack 0
  4327                           tblptru	equ	0xFF8
  4328                           tblptrh	equ	0xFF7
  4329                           tblptrl	equ	0xFF6
  4330                           tablat	equ	0xFF5
  4331                           prodh	equ	0xFF4
  4332                           prodl	equ	0xFF3
  4333                           postinc0	equ	0xFEE
  4334                           wreg	equ	0xFE8
  4335                           indf1	equ	0xFE7
  4336                           postdec1	equ	0xFE5
  4337                           plusw1	equ	0xFE3
  4338                           fsr1h	equ	0xFE2
  4339                           fsr1l	equ	0xFE1
  4340                           indf2	equ	0xFDF
  4341                           postinc2	equ	0xFDE
  4342                           plusw2	equ	0xFDB
  4343                           fsr2h	equ	0xFDA
  4344                           fsr2l	equ	0xFD9
  4345                           status	equ	0xFD8
  4346                           
  4347 ;; *************** function _Eeprom_Write_Byte *****************
  4348 ;; Defined at:
  4349 ;;		line 43 in file "eeprom.h"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;  address         1    wreg     unsigned char 
  4352 ;;  data            1   15[COMRAM] unsigned char 
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;  address         1   16[COMRAM] unsigned char 
  4355 ;; Return value:  Size  Location     Type
  4356 ;;                  1    wreg      void 
  4357 ;; Registers used:
  4358 ;;		wreg, status,2
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4364 ;;      Params:         1       0       0       0       0       0       0
  4365 ;;      Locals:         1       0       0       0       0       0       0
  4366 ;;      Temps:          0       0       0       0       0       0       0
  4367 ;;      Totals:         2       0       0       0       0       0       0
  4368 ;;Total ram usage:        2 bytes
  4369 ;; Hardware stack levels used:    1
  4370 ;; Hardware stack levels required when called:    1
  4371 ;; This function calls:
  4372 ;;		Nothing
  4373 ;; This function is called by:
  4374 ;;		_start_routine
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378                           	psect	text3
  4379  001C26                     __ptext3:
  4380                           	opt stack 0
  4381  001C26                     _Eeprom_Write_Byte:
  4382                           	opt stack 28
  4383                           
  4384                           ;incstack = 0
  4385                           ;Eeprom_Write_Byte@address stored from wreg
  4386  001C26  6E11               	movwf	Eeprom_Write_Byte@address,c
  4387                           
  4388                           ;eeprom.h: 46: EEADR = (unsigned char)address;
  4389  001C28  C011  FFA9         	movff	Eeprom_Write_Byte@address,4009	;volatile
  4390                           
  4391                           ;eeprom.h: 48: EEDATA = data;
  4392  001C2C  C010  FFA8         	movff	Eeprom_Write_Byte@data,4008	;volatile
  4393                           
  4394                           ;eeprom.h: 49: EECON1bits.EEPGD = 0;
  4395  001C30  9EA6               	bcf	4006,7,c	;volatile
  4396                           
  4397                           ;eeprom.h: 50: EECON1bits.CFGS = 0;
  4398  001C32  9CA6               	bcf	4006,6,c	;volatile
  4399                           
  4400                           ;eeprom.h: 51: EECON1bits.WREN = 1;
  4401  001C34  84A6               	bsf	4006,2,c	;volatile
  4402                           
  4403                           ;eeprom.h: 55: EECON2 = 0x55;
  4404  001C36  0E55               	movlw	85
  4405  001C38  6EA7               	movwf	4007,c	;volatile
  4406                           
  4407                           ;eeprom.h: 56: EECON2 = 0xAA;
  4408  001C3A  0EAA               	movlw	170
  4409  001C3C  6EA7               	movwf	4007,c	;volatile
  4410                           
  4411                           ;eeprom.h: 57: EECON1bits.WR = 1;
  4412  001C3E  82A6               	bsf	4006,1,c	;volatile
  4413  001C40                     l155:
  4414  001C40  A8A1               	btfss	4001,4,c	;volatile
  4415  001C42  D7FE               	goto	l155
  4416                           
  4417                           ;eeprom.h: 63: }
  4418                           ;eeprom.h: 65: PIR2bits.EEIF = 0;
  4419  001C44  98A1               	bcf	4001,4,c	;volatile
  4420                           
  4421                           ;eeprom.h: 66: EECON1bits.WREN = 0;
  4422  001C46  94A6               	bcf	4006,2,c	;volatile
  4423  001C48  0012               	return		;funcret
  4424  001C4A                     __end_of_Eeprom_Write_Byte:
  4425                           	opt stack 0
  4426                           tblptru	equ	0xFF8
  4427                           tblptrh	equ	0xFF7
  4428                           tblptrl	equ	0xFF6
  4429                           tablat	equ	0xFF5
  4430                           prodh	equ	0xFF4
  4431                           prodl	equ	0xFF3
  4432                           postinc0	equ	0xFEE
  4433                           wreg	equ	0xFE8
  4434                           indf1	equ	0xFE7
  4435                           postdec1	equ	0xFE5
  4436                           plusw1	equ	0xFE3
  4437                           fsr1h	equ	0xFE2
  4438                           fsr1l	equ	0xFE1
  4439                           indf2	equ	0xFDF
  4440                           postinc2	equ	0xFDE
  4441                           plusw2	equ	0xFDB
  4442                           fsr2h	equ	0xFDA
  4443                           fsr2l	equ	0xFD9
  4444                           status	equ	0xFD8
  4445                           
  4446 ;; *************** function _running_display *****************
  4447 ;; Defined at:
  4448 ;;		line 546 in file "main.c"
  4449 ;; Parameters:    Size  Location     Type
  4450 ;;		None
  4451 ;; Auto vars:     Size  Location     Type
  4452 ;;  n              10    7[BANK0 ] unsigned char [10]
  4453 ;;  second          2   32[BANK0 ] int 
  4454 ;;  minute          2   24[BANK0 ] int 
  4455 ;;  hour            2    5[BANK0 ] int 
  4456 ;;  i               2   26[BANK0 ] int 
  4457 ;;  i               2   18[BANK0 ] int 
  4458 ;;  i               2   30[BANK0 ] int 
  4459 ;;  t               5    0[BANK0 ] unsigned char [5]
  4460 ;;  s               2   28[BANK0 ] int 
  4461 ;;  ms              2   22[BANK0 ] int 
  4462 ;;  n_c             1   21[BANK0 ] unsigned char 
  4463 ;;  is_leading_z    1   20[BANK0 ] unsigned char 
  4464 ;;  exit_running    1   17[BANK0 ] unsigned char 
  4465 ;; Return value:  Size  Location     Type
  4466 ;;                  1    wreg      void 
  4467 ;; Registers used:
  4468 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4469 ;; Tracked objects:
  4470 ;;		On entry : 0/0
  4471 ;;		On exit  : 0/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4474 ;;      Params:         0       0       0       0       0       0       0
  4475 ;;      Locals:         0      34       0       0       0       0       0
  4476 ;;      Temps:          3       0       0       0       0       0       0
  4477 ;;      Totals:         3      34       0       0       0       0       0
  4478 ;;Total ram usage:       37 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; Hardware stack levels required when called:    5
  4481 ;; This function calls:
  4482 ;;		_Lcd_Clear
  4483 ;;		_Lcd_Set_Cursor
  4484 ;;		_Lcd_Write_Char
  4485 ;;		_Lcd_Write_String
  4486 ;;		___awdiv
  4487 ;;		___awmod
  4488 ;;		_menu_progress_bar
  4489 ;;		_read_keypad
  4490 ;; This function is called by:
  4491 ;;		_main
  4492 ;; This function uses a non-reentrant model
  4493 ;;
  4494                           
  4495                           	psect	text4
  4496  0011A2                     __ptext4:
  4497                           	opt stack 0
  4498  0011A2                     _running_display:
  4499                           	opt stack 25
  4500                           
  4501                           ;main.c: 548: unsigned char exit_running = 0x00;
  4502                           
  4503                           ;incstack = 0
  4504  0011A2  0E00               	movlw	0
  4505  0011A4  0100               	movlb	0	; () banked
  4506  0011A6  6FAF               	movwf	running_display@exit_running& (0+255),b
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;main.c: 549: Lcd_Clear();
  4510  0011A8  EC25  F00E         	call	_Lcd_Clear	;wreg free
  4511                           
  4512                           ;main.c: 550: Lcd_Set_Cursor(1,1);
  4513  0011AC  0E01               	movlw	1
  4514  0011AE  6E12               	movwf	Lcd_Set_Cursor@b,c
  4515  0011B0  0E01               	movlw	1
  4516  0011B2  EC2B  F00D         	call	_Lcd_Set_Cursor
  4517                           
  4518                           ;main.c: 551: unsigned char is_leading_zero = 1, n_c = 0;
  4519  0011B6  0E01               	movlw	1
  4520  0011B8  0100               	movlb	0	; () banked
  4521  0011BA  6FB2               	movwf	running_display@is_leading_zero& (0+255),b
  4522                           
  4523                           ; BSR set to: 0
  4524  0011BC  0E00               	movlw	0
  4525  0011BE  0100               	movlb	0	; () banked
  4526  0011C0  6FB3               	movwf	running_display@n_c& (0+255),b
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;main.c: 552: for (int i = 0; i < 9; i++)
  4530  0011C2  0E00               	movlw	0
  4531  0011C4  0100               	movlb	0	; () banked
  4532  0011C6  6FBD               	movwf	(running_display@i+1)& (0+255),b
  4533  0011C8  0E00               	movlw	0
  4534  0011CA  6FBC               	movwf	running_display@i& (0+255),b
  4535  0011CC                     l4266:
  4536                           
  4537                           ; BSR set to: 0
  4538  0011CC  0100               	movlb	0	; () banked
  4539  0011CE  BFBD               	btfsc	(running_display@i+1)& (0+255),7,b
  4540  0011D0  D008               	goto	l4270
  4541  0011D2  0100               	movlb	0	; () banked
  4542  0011D4  51BD               	movf	(running_display@i+1)& (0+255),w,b
  4543  0011D6  E12A               	bnz	l4288
  4544  0011D8  0E09               	movlw	9
  4545  0011DA  0100               	movlb	0	; () banked
  4546  0011DC  5DBC               	subwf	running_display@i& (0+255),w,b
  4547  0011DE  B0D8               	btfsc	status,0,c
  4548  0011E0  D025               	goto	l4288
  4549  0011E2                     l4270:
  4550                           
  4551                           ; BSR set to: 0
  4552                           ;main.c: 553: {
  4553                           ;main.c: 554: if ((current_user[i] == '0')&&(is_leading_zero))
  4554  0011E2  0ED7               	movlw	low _current_user
  4555  0011E4  0100               	movlb	0	; () banked
  4556  0011E6  25BC               	addwf	running_display@i& (0+255),w,b
  4557  0011E8  6ED9               	movwf	fsr2l,c
  4558  0011EA  0E00               	movlw	high _current_user
  4559  0011EC  0100               	movlb	0	; () banked
  4560  0011EE  21BD               	addwfc	(running_display@i+1)& (0+255),w,b
  4561  0011F0  6EDA               	movwf	fsr2h,c
  4562  0011F2  0E30               	movlw	48
  4563  0011F4  18DE               	xorwf	postinc2,w,c
  4564  0011F6  A4D8               	btfss	status,2,c
  4565  0011F8  D005               	goto	l4278
  4566                           
  4567                           ; BSR set to: 0
  4568  0011FA  0100               	movlb	0	; () banked
  4569  0011FC  51B2               	movf	running_display@is_leading_zero& (0+255),w,b
  4570  0011FE  0100               	movlb	0	; () banked
  4571  001200  A4D8               	btfss	status,2,c
  4572  001202  D010               	goto	l4284
  4573  001204                     l4278:
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;main.c: 556: else
  4577                           ;main.c: 557: {
  4578                           ;main.c: 558: is_leading_zero = 0;
  4579  001204  0E00               	movlw	0
  4580  001206  0100               	movlb	0	; () banked
  4581  001208  6FB2               	movwf	running_display@is_leading_zero& (0+255),b
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;main.c: 559: n_c++;
  4585  00120A  0100               	movlb	0	; () banked
  4586  00120C  2BB3               	incf	running_display@n_c& (0+255),f,b
  4587                           
  4588                           ; BSR set to: 0
  4589                           ;main.c: 560: Lcd_Write_Char(current_user[i]);
  4590  00120E  0ED7               	movlw	low _current_user
  4591  001210  0100               	movlb	0	; () banked
  4592  001212  25BC               	addwf	running_display@i& (0+255),w,b
  4593  001214  6ED9               	movwf	fsr2l,c
  4594  001216  0E00               	movlw	high _current_user
  4595  001218  0100               	movlb	0	; () banked
  4596  00121A  21BD               	addwfc	(running_display@i+1)& (0+255),w,b
  4597  00121C  6EDA               	movwf	fsr2h,c
  4598  00121E  50DF               	movf	indf2,w,c
  4599  001220  ECB6  F00D         	call	_Lcd_Write_Char
  4600  001224                     l4284:
  4601  001224  0100               	movlb	0	; () banked
  4602  001226  4BBC               	infsnz	running_display@i& (0+255),f,b
  4603  001228  2BBD               	incf	(running_display@i+1)& (0+255),f,b
  4604  00122A  D7D0               	goto	l4266
  4605  00122C                     l4288:
  4606                           
  4607                           ; BSR set to: 0
  4608                           ;main.c: 561: }
  4609                           ;main.c: 562: }
  4610                           ;main.c: 563: for (int i = 0; i < 13 - n_c; i++)
  4611  00122C  0E00               	movlw	0
  4612  00122E  0100               	movlb	0	; () banked
  4613  001230  6FB1               	movwf	(running_display@i_911+1)& (0+255),b
  4614  001232  0E00               	movlw	0
  4615  001234  6FB0               	movwf	running_display@i_911& (0+255),b
  4616  001236  D006               	goto	l4294
  4617  001238                     l4290:
  4618                           
  4619                           ; BSR set to: 0
  4620                           ;main.c: 564: Lcd_Write_Char(' ');
  4621  001238  0E20               	movlw	32
  4622  00123A  ECB6  F00D         	call	_Lcd_Write_Char
  4623  00123E  0100               	movlb	0	; () banked
  4624  001240  4BB0               	infsnz	running_display@i_911& (0+255),f,b
  4625  001242  2BB1               	incf	(running_display@i_911+1)& (0+255),f,b
  4626  001244                     l4294:
  4627                           
  4628                           ; BSR set to: 0
  4629  001244  0100               	movlb	0	; () banked
  4630  001246  51B3               	movf	running_display@n_c& (0+255),w,b
  4631  001248  6E31               	movwf	??_running_display& (0+255),c
  4632  00124A  6A32               	clrf	(??_running_display+1)& (0+255),c
  4633  00124C  1E31               	comf	??_running_display,f,c
  4634  00124E  1E32               	comf	??_running_display+1,f,c
  4635  001250  4A31               	infsnz	??_running_display,f,c
  4636  001252  2A32               	incf	??_running_display+1,f,c
  4637  001254  0E0D               	movlw	13
  4638  001256  2631               	addwf	??_running_display,f,c
  4639  001258  0E00               	movlw	0
  4640  00125A  2232               	addwfc	??_running_display+1,f,c
  4641  00125C  5031               	movf	??_running_display,w,c
  4642  00125E  0100               	movlb	0	; () banked
  4643  001260  5DB0               	subwf	running_display@i_911& (0+255),w,b
  4644  001262  0100               	movlb	0	; () banked
  4645  001264  51B1               	movf	(running_display@i_911+1)& (0+255),w,b
  4646  001266  0A80               	xorlw	128
  4647  001268  6E33               	movwf	(??_running_display+2)& (0+255),c
  4648  00126A  5032               	movf	??_running_display+1,w,c
  4649  00126C  0A80               	xorlw	128
  4650  00126E  5833               	subwfb	(??_running_display+2)& (0+255),w,c
  4651  001270  A0D8               	btfss	status,0,c
  4652  001272  D7E2               	goto	l4290
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;main.c: 565: Lcd_Set_Cursor(2,1);
  4656                           
  4657                           ; BSR set to: 0
  4658  001274  0E01               	movlw	1
  4659  001276  6E12               	movwf	Lcd_Set_Cursor@b,c
  4660  001278  0E02               	movlw	2
  4661  00127A  EC2B  F00D         	call	_Lcd_Set_Cursor
  4662                           
  4663                           ;main.c: 566: for (int i = 0; i < 16; i++)
  4664  00127E  0E00               	movlw	0
  4665  001280  0100               	movlb	0	; () banked
  4666  001282  6FB9               	movwf	(running_display@i_912+1)& (0+255),b
  4667  001284  0E00               	movlw	0
  4668  001286  6FB8               	movwf	running_display@i_912& (0+255),b
  4669  001288                     l4300:
  4670                           
  4671                           ; BSR set to: 0
  4672  001288  0100               	movlb	0	; () banked
  4673  00128A  BFB9               	btfsc	(running_display@i_912+1)& (0+255),7,b
  4674  00128C  D008               	goto	l4304
  4675  00128E  0100               	movlb	0	; () banked
  4676  001290  51B9               	movf	(running_display@i_912+1)& (0+255),w,b
  4677  001292  E114               	bnz	l4310
  4678  001294  0E10               	movlw	16
  4679  001296  0100               	movlb	0	; () banked
  4680  001298  5DB8               	subwf	running_display@i_912& (0+255),w,b
  4681  00129A  B0D8               	btfsc	status,0,c
  4682  00129C  D00F               	goto	l4310
  4683  00129E                     l4304:
  4684                           
  4685                           ; BSR set to: 0
  4686                           ;main.c: 567: Lcd_Write_Char(logged_user[i]);
  4687  00129E  0E59               	movlw	low _logged_user
  4688  0012A0  0100               	movlb	0	; () banked
  4689  0012A2  25B8               	addwf	running_display@i_912& (0+255),w,b
  4690  0012A4  6ED9               	movwf	fsr2l,c
  4691  0012A6  0E01               	movlw	high _logged_user
  4692  0012A8  0100               	movlb	0	; () banked
  4693  0012AA  21B9               	addwfc	(running_display@i_912+1)& (0+255),w,b
  4694  0012AC  6EDA               	movwf	fsr2h,c
  4695  0012AE  50DF               	movf	indf2,w,c
  4696  0012B0  ECB6  F00D         	call	_Lcd_Write_Char
  4697  0012B4  0100               	movlb	0	; () banked
  4698  0012B6  4BB8               	infsnz	running_display@i_912& (0+255),f,b
  4699  0012B8  2BB9               	incf	(running_display@i_912+1)& (0+255),f,b
  4700  0012BA  D7E6               	goto	l4300
  4701  0012BC                     l4310:
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;main.c: 569: Lcd_Set_Cursor(1,12);
  4705  0012BC  0E0C               	movlw	12
  4706  0012BE  6E12               	movwf	Lcd_Set_Cursor@b,c
  4707  0012C0  0E01               	movlw	1
  4708  0012C2  EC2B  F00D         	call	_Lcd_Set_Cursor
  4709                           
  4710                           ;main.c: 570: Lcd_Write_String("00:00");
  4711  0012C6  0EEC               	movlw	low STR_27
  4712  0012C8  6E14               	movwf	Lcd_Write_String@a,c
  4713  0012CA  0E7F               	movlw	high STR_27
  4714  0012CC  6E15               	movwf	Lcd_Write_String@a+1,c
  4715  0012CE  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  4716                           
  4717                           ;main.c: 571: int s = login_timeout, ms = 0;
  4718  0012D2  C09C  F0BA         	movff	_login_timeout,running_display@s
  4719  0012D6  C09D  F0BB         	movff	_login_timeout+1,running_display@s+1
  4720  0012DA  0E00               	movlw	0
  4721  0012DC  0100               	movlb	0	; () banked
  4722  0012DE  6FB5               	movwf	(running_display@ms+1)& (0+255),b
  4723  0012E0  0E00               	movlw	0
  4724  0012E2  6FB4               	movwf	running_display@ms& (0+255),b
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;main.c: 572: char t[] = {'0', '0', ':', '0', '0'};
  4728  0012E4  EE20  F094         	lfsr	2,running_display@F3741
  4729  0012E8  EE10  F09E         	lfsr	1,running_display@t
  4730  0012EC  0E04               	movlw	4
  4731  0012EE                     u4101:
  4732  0012EE  CFDB FFE3          	movff	plusw2,plusw1
  4733  0012F2  06E8               	decf	wreg,f,c
  4734  0012F4  E2FC               	bc	u4101
  4735                           
  4736                           ;main.c: 573: while (read_keypad() != '#')
  4737  0012F6  D0BB               	goto	l4354
  4738  0012F8                     l4320:
  4739                           
  4740                           ;main.c: 574: {
  4741                           ;main.c: 575: if (s == 0)
  4742  0012F8  0100               	movlb	0	; () banked
  4743  0012FA  51BA               	movf	running_display@s& (0+255),w,b
  4744  0012FC  0100               	movlb	0	; () banked
  4745  0012FE  11BB               	iorwf	(running_display@s+1)& (0+255),w,b
  4746  001300  B4D8               	btfsc	status,2,c
  4747  001302  D0BA               	goto	l4356
  4748                           
  4749                           ; BSR set to: 0
  4750                           ;main.c: 577: _delay((unsigned long)((442)*(16000000/4000000.0)));
  4751                           
  4752                           ; BSR set to: 0
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;main.c: 576: break;
  4756  001304  0EFC               	movlw	252
  4757  001306                     u4727:
  4758  001306  F000 F000          	nop2	
  4759  00130A  F000 F000          	nop2	
  4760  00130E  2EE8               	decfsz	wreg,f,c
  4761  001310  D7FA               	goto	u4727
  4762  001312  F000 F000          	nop2		;nop
  4763  001316  F000 F000          	nop2		;nop
  4764                           
  4765                           ;main.c: 578: ms += 1;
  4766  00131A  0100               	movlb	0	; () banked
  4767  00131C  4BB4               	infsnz	running_display@ms& (0+255),f,b
  4768  00131E  2BB5               	incf	(running_display@ms+1)& (0+255),f,b
  4769                           
  4770                           ;main.c: 579: if (ms == 1000)
  4771  001320  0EE8               	movlw	232
  4772  001322  0100               	movlb	0	; () banked
  4773  001324  19B4               	xorwf	running_display@ms& (0+255),w,b
  4774  001326  E104               	bnz	u4121
  4775  001328  0E03               	movlw	3
  4776  00132A  0100               	movlb	0	; () banked
  4777  00132C  19B5               	xorwf	(running_display@ms+1)& (0+255),w,b
  4778  00132E  A4D8               	btfss	status,2,c
  4779  001330                     u4121:
  4780  001330  D09E               	goto	l4354
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;main.c: 580: {
  4784                           ;main.c: 581: s -= 1;
  4785  001332  0100               	movlb	0	; () banked
  4786  001334  07BA               	decf	running_display@s& (0+255),f,b
  4787  001336  A0D8               	btfss	status,0,c
  4788  001338  07BB               	decf	(running_display@s+1)& (0+255),f,b
  4789                           
  4790                           ; BSR set to: 0
  4791                           ;main.c: 582: ms = 0;
  4792  00133A  0E00               	movlw	0
  4793  00133C  0100               	movlb	0	; () banked
  4794  00133E  6FB5               	movwf	(running_display@ms+1)& (0+255),b
  4795  001340  0E00               	movlw	0
  4796  001342  6FB4               	movwf	running_display@ms& (0+255),b
  4797                           
  4798                           ; BSR set to: 0
  4799                           ;main.c: 584: char n[] = {'0','1','2','3','4','5','6','7','8','9'};
  4800  001344  EE20  F03E         	lfsr	2,running_display@F3744
  4801  001348  EE10  F0A5         	lfsr	1,running_display@n
  4802  00134C  0E09               	movlw	9
  4803  00134E                     u4131:
  4804  00134E  CFDB FFE3          	movff	plusw2,plusw1
  4805  001352  06E8               	decf	wreg,f,c
  4806  001354  E2FC               	bc	u4131
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;main.c: 585: int hour=s/3600;
  4810  001356  C0BA  F010         	movff	running_display@s,___awdiv@dividend
  4811  00135A  C0BB  F011         	movff	running_display@s+1,___awdiv@dividend+1
  4812  00135E  0E0E               	movlw	14
  4813  001360  6E13               	movwf	___awdiv@divisor+1,c
  4814  001362  0E10               	movlw	16
  4815  001364  6E12               	movwf	___awdiv@divisor,c
  4816  001366  EC13  F00C         	call	___awdiv	;wreg free
  4817  00136A  C010  F0A3         	movff	?___awdiv,running_display@hour
  4818  00136E  C011  F0A4         	movff	?___awdiv+1,running_display@hour+1
  4819                           
  4820                           ;main.c: 586: int second=s % 3600;
  4821  001372  C0BA  F010         	movff	running_display@s,___awmod@dividend
  4822  001376  C0BB  F011         	movff	running_display@s+1,___awmod@dividend+1
  4823  00137A  0E0E               	movlw	14
  4824  00137C  6E13               	movwf	___awmod@divisor+1,c
  4825  00137E  0E10               	movlw	16
  4826  001380  6E12               	movwf	___awmod@divisor,c
  4827  001382  ECCA  F00C         	call	___awmod	;wreg free
  4828  001386  C010  F0BE         	movff	?___awmod,running_display@second
  4829  00138A  C011  F0BF         	movff	?___awmod+1,running_display@second+1
  4830                           
  4831                           ;main.c: 587: int minute=second/60;
  4832  00138E  C0BE  F010         	movff	running_display@second,___awdiv@dividend
  4833  001392  C0BF  F011         	movff	running_display@second+1,___awdiv@dividend+1
  4834  001396  0E00               	movlw	0
  4835  001398  6E13               	movwf	___awdiv@divisor+1,c
  4836  00139A  0E3C               	movlw	60
  4837  00139C  6E12               	movwf	___awdiv@divisor,c
  4838  00139E  EC13  F00C         	call	___awdiv	;wreg free
  4839  0013A2  C010  F0B6         	movff	?___awdiv,running_display@minute
  4840  0013A6  C011  F0B7         	movff	?___awdiv+1,running_display@minute+1
  4841                           
  4842                           ;main.c: 588: second %= 60;
  4843  0013AA  C0BE  F010         	movff	running_display@second,___awmod@dividend
  4844  0013AE  C0BF  F011         	movff	running_display@second+1,___awmod@dividend+1
  4845  0013B2  0E00               	movlw	0
  4846  0013B4  6E13               	movwf	___awmod@divisor+1,c
  4847  0013B6  0E3C               	movlw	60
  4848  0013B8  6E12               	movwf	___awmod@divisor,c
  4849  0013BA  ECCA  F00C         	call	___awmod	;wreg free
  4850  0013BE  C010  F0BE         	movff	?___awmod,running_display@second
  4851  0013C2  C011  F0BF         	movff	?___awmod+1,running_display@second+1
  4852                           
  4853                           ;main.c: 589: Lcd_Set_Cursor(1,12);
  4854  0013C6  0E0C               	movlw	12
  4855  0013C8  6E12               	movwf	Lcd_Set_Cursor@b,c
  4856  0013CA  0E01               	movlw	1
  4857  0013CC  EC2B  F00D         	call	_Lcd_Set_Cursor
  4858                           
  4859                           ;main.c: 590: Lcd_Write_Char(n[minute/10]);
  4860  0013D0  C0B6  F010         	movff	running_display@minute,___awdiv@dividend
  4861  0013D4  C0B7  F011         	movff	running_display@minute+1,___awdiv@dividend+1
  4862  0013D8  0E00               	movlw	0
  4863  0013DA  6E13               	movwf	___awdiv@divisor+1,c
  4864  0013DC  0E0A               	movlw	10
  4865  0013DE  6E12               	movwf	___awdiv@divisor,c
  4866  0013E0  EC13  F00C         	call	___awdiv	;wreg free
  4867  0013E4  0EA5               	movlw	low running_display@n
  4868  0013E6  2410               	addwf	?___awdiv,w,c
  4869  0013E8  6ED9               	movwf	fsr2l,c
  4870  0013EA  0E00               	movlw	high running_display@n
  4871  0013EC  2011               	addwfc	?___awdiv+1,w,c
  4872  0013EE  6EDA               	movwf	fsr2h,c
  4873  0013F0  50DF               	movf	indf2,w,c
  4874  0013F2  ECB6  F00D         	call	_Lcd_Write_Char
  4875                           
  4876                           ;main.c: 591: Lcd_Write_Char(n[minute%10]);
  4877  0013F6  C0B6  F010         	movff	running_display@minute,___awmod@dividend
  4878  0013FA  C0B7  F011         	movff	running_display@minute+1,___awmod@dividend+1
  4879  0013FE  0E00               	movlw	0
  4880  001400  6E13               	movwf	___awmod@divisor+1,c
  4881  001402  0E0A               	movlw	10
  4882  001404  6E12               	movwf	___awmod@divisor,c
  4883  001406  ECCA  F00C         	call	___awmod	;wreg free
  4884  00140A  0EA5               	movlw	low running_display@n
  4885  00140C  2410               	addwf	?___awmod,w,c
  4886  00140E  6ED9               	movwf	fsr2l,c
  4887  001410  0E00               	movlw	high running_display@n
  4888  001412  2011               	addwfc	?___awmod+1,w,c
  4889  001414  6EDA               	movwf	fsr2h,c
  4890  001416  50DF               	movf	indf2,w,c
  4891  001418  ECB6  F00D         	call	_Lcd_Write_Char
  4892                           
  4893                           ;main.c: 592: Lcd_Write_Char(':');
  4894  00141C  0E3A               	movlw	58
  4895  00141E  ECB6  F00D         	call	_Lcd_Write_Char
  4896                           
  4897                           ;main.c: 593: Lcd_Write_Char(n[second/10]);
  4898  001422  C0BE  F010         	movff	running_display@second,___awdiv@dividend
  4899  001426  C0BF  F011         	movff	running_display@second+1,___awdiv@dividend+1
  4900  00142A  0E00               	movlw	0
  4901  00142C  6E13               	movwf	___awdiv@divisor+1,c
  4902  00142E  0E0A               	movlw	10
  4903  001430  6E12               	movwf	___awdiv@divisor,c
  4904  001432  EC13  F00C         	call	___awdiv	;wreg free
  4905  001436  0EA5               	movlw	low running_display@n
  4906  001438  2410               	addwf	?___awdiv,w,c
  4907  00143A  6ED9               	movwf	fsr2l,c
  4908  00143C  0E00               	movlw	high running_display@n
  4909  00143E  2011               	addwfc	?___awdiv+1,w,c
  4910  001440  6EDA               	movwf	fsr2h,c
  4911  001442  50DF               	movf	indf2,w,c
  4912  001444  ECB6  F00D         	call	_Lcd_Write_Char
  4913                           
  4914                           ;main.c: 594: Lcd_Write_Char(n[second%10]);
  4915  001448  C0BE  F010         	movff	running_display@second,___awmod@dividend
  4916  00144C  C0BF  F011         	movff	running_display@second+1,___awmod@dividend+1
  4917  001450  0E00               	movlw	0
  4918  001452  6E13               	movwf	___awmod@divisor+1,c
  4919  001454  0E0A               	movlw	10
  4920  001456  6E12               	movwf	___awmod@divisor,c
  4921  001458  ECCA  F00C         	call	___awmod	;wreg free
  4922  00145C  0EA5               	movlw	low running_display@n
  4923  00145E  2410               	addwf	?___awmod,w,c
  4924  001460  6ED9               	movwf	fsr2l,c
  4925  001462  0E00               	movlw	high running_display@n
  4926  001464  2011               	addwfc	?___awmod+1,w,c
  4927  001466  6EDA               	movwf	fsr2h,c
  4928  001468  50DF               	movf	indf2,w,c
  4929  00146A  ECB6  F00D         	call	_Lcd_Write_Char
  4930  00146E                     l4354:
  4931  00146E  EC7C  F00B         	call	_read_keypad	;wreg free
  4932  001472  0A23               	xorlw	35
  4933  001474  A4D8               	btfss	status,2,c
  4934  001476  D740               	goto	l4320
  4935  001478                     l4356:
  4936                           
  4937                           ;main.c: 595: }
  4938                           ;main.c: 596: }
  4939                           ;main.c: 597: Lcd_Clear();
  4940  001478  EC25  F00E         	call	_Lcd_Clear	;wreg free
  4941                           
  4942                           ;main.c: 598: Lcd_Set_Cursor(1,1);
  4943  00147C  0E01               	movlw	1
  4944  00147E  6E12               	movwf	Lcd_Set_Cursor@b,c
  4945  001480  0E01               	movlw	1
  4946  001482  EC2B  F00D         	call	_Lcd_Set_Cursor
  4947                           
  4948                           ;main.c: 599: Lcd_Write_String("Logging you out.");
  4949  001486  0E75               	movlw	low STR_28
  4950  001488  6E14               	movwf	Lcd_Write_String@a,c
  4951  00148A  0E7F               	movlw	high STR_28
  4952  00148C  6E15               	movwf	Lcd_Write_String@a+1,c
  4953  00148E  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  4954                           
  4955                           ;main.c: 600: menu_progress_bar(200);
  4956  001492  0E00               	movlw	0
  4957  001494  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  4958  001496  0EC8               	movlw	200
  4959  001498  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  4960  00149A  EC50  F00A         	call	_menu_progress_bar	;wreg free
  4961  00149E  0012               	return	
  4962  0014A0                     __end_of_running_display:
  4963                           	opt stack 0
  4964                           tblptru	equ	0xFF8
  4965                           tblptrh	equ	0xFF7
  4966                           tblptrl	equ	0xFF6
  4967                           tablat	equ	0xFF5
  4968                           prodh	equ	0xFF4
  4969                           prodl	equ	0xFF3
  4970                           postinc0	equ	0xFEE
  4971                           wreg	equ	0xFE8
  4972                           indf1	equ	0xFE7
  4973                           postdec1	equ	0xFE5
  4974                           plusw1	equ	0xFE3
  4975                           fsr1h	equ	0xFE2
  4976                           fsr1l	equ	0xFE1
  4977                           indf2	equ	0xFDF
  4978                           postinc2	equ	0xFDE
  4979                           plusw2	equ	0xFDB
  4980                           fsr2h	equ	0xFDA
  4981                           fsr2l	equ	0xFD9
  4982                           status	equ	0xFD8
  4983                           
  4984 ;; *************** function _read_keypad *****************
  4985 ;; Defined at:
  4986 ;;		line 260 in file "main.c"
  4987 ;; Parameters:    Size  Location     Type
  4988 ;;		None
  4989 ;; Auto vars:     Size  Location     Type
  4990 ;;		None
  4991 ;; Return value:  Size  Location     Type
  4992 ;;                  1    wreg      unsigned char 
  4993 ;; Registers used:
  4994 ;;		wreg, status,2
  4995 ;; Tracked objects:
  4996 ;;		On entry : 0/0
  4997 ;;		On exit  : 0/0
  4998 ;;		Unchanged: 0/0
  4999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5000 ;;      Params:         0       0       0       0       0       0       0
  5001 ;;      Locals:         0       0       0       0       0       0       0
  5002 ;;      Temps:          0       0       0       0       0       0       0
  5003 ;;      Totals:         0       0       0       0       0       0       0
  5004 ;;Total ram usage:        0 bytes
  5005 ;; Hardware stack levels used:    1
  5006 ;; Hardware stack levels required when called:    1
  5007 ;; This function calls:
  5008 ;;		Nothing
  5009 ;; This function is called by:
  5010 ;;		_main
  5011 ;;		_latch_keypad
  5012 ;;		_start_routine
  5013 ;;		_running_display
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           	psect	text5
  5018  0016F8                     __ptext5:
  5019                           	opt stack 0
  5020  0016F8                     _read_keypad:
  5021                           	opt stack 28
  5022                           
  5023                           ;main.c: 262: TRISB = 0b01111000;
  5024                           
  5025                           ;incstack = 0
  5026  0016F8  0E78               	movlw	120
  5027  0016FA  6E93               	movwf	3987,c	;volatile
  5028                           
  5029                           ;main.c: 263: PORTB = 0b00000001;
  5030  0016FC  0E01               	movlw	1
  5031  0016FE  6E81               	movwf	3969,c	;volatile
  5032                           
  5033                           ;main.c: 265: if (PORTBbits.RB6) {PORTB = 0x00; return '*';}
  5034  001700  AC81               	btfss	3969,6,c	;volatile
  5035  001702  D004               	goto	l252
  5036  001704  0E00               	movlw	0
  5037  001706  6E81               	movwf	3969,c	;volatile
  5038  001708  0E2A               	movlw	42
  5039  00170A  0012               	return	
  5040  00170C                     l252:
  5041                           
  5042                           ;main.c: 266: if (PORTBbits.RB3) {PORTB = 0x00; return '1';}
  5043  00170C  A681               	btfss	3969,3,c	;volatile
  5044  00170E  D004               	goto	l254
  5045  001710  0E00               	movlw	0
  5046  001712  6E81               	movwf	3969,c	;volatile
  5047  001714  0E31               	movlw	49
  5048  001716  0012               	return	
  5049  001718                     l254:
  5050                           
  5051                           ;main.c: 267: if (PORTBbits.RB4) {PORTB = 0x00; return '4';}
  5052  001718  A881               	btfss	3969,4,c	;volatile
  5053  00171A  D004               	goto	l255
  5054  00171C  0E00               	movlw	0
  5055  00171E  6E81               	movwf	3969,c	;volatile
  5056  001720  0E34               	movlw	52
  5057  001722  0012               	return	
  5058  001724                     l255:
  5059                           
  5060                           ;main.c: 268: if (PORTBbits.RB5) {PORTB = 0x00; return '7';}
  5061  001724  AA81               	btfss	3969,5,c	;volatile
  5062  001726  D004               	goto	l3602
  5063  001728  0E00               	movlw	0
  5064  00172A  6E81               	movwf	3969,c	;volatile
  5065  00172C  0E37               	movlw	55
  5066  00172E  0012               	return	
  5067  001730                     l3602:
  5068                           
  5069                           ;main.c: 269: PORTB = 0b00000010;
  5070  001730  0E02               	movlw	2
  5071  001732  6E81               	movwf	3969,c	;volatile
  5072                           
  5073                           ;main.c: 271: if (PORTBbits.RB3) {PORTB = 0x00; return '2';}
  5074  001734  A681               	btfss	3969,3,c	;volatile
  5075  001736  D004               	goto	l257
  5076  001738  0E00               	movlw	0
  5077  00173A  6E81               	movwf	3969,c	;volatile
  5078  00173C  0E32               	movlw	50
  5079  00173E  0012               	return	
  5080  001740                     l257:
  5081                           
  5082                           ;main.c: 272: if (PORTBbits.RB4) {PORTB = 0x00; return '5';}
  5083  001740  A881               	btfss	3969,4,c	;volatile
  5084  001742  D004               	goto	l258
  5085  001744  0E00               	movlw	0
  5086  001746  6E81               	movwf	3969,c	;volatile
  5087  001748  0E35               	movlw	53
  5088  00174A  0012               	return	
  5089  00174C                     l258:
  5090                           
  5091                           ;main.c: 273: if (PORTBbits.RB5) {PORTB = 0x00; return '8';}
  5092  00174C  AA81               	btfss	3969,5,c	;volatile
  5093  00174E  D004               	goto	l259
  5094  001750  0E00               	movlw	0
  5095  001752  6E81               	movwf	3969,c	;volatile
  5096  001754  0E38               	movlw	56
  5097  001756  0012               	return	
  5098  001758                     l259:
  5099                           
  5100                           ;main.c: 274: if (PORTBbits.RB6) {PORTB = 0x00; return '0';}
  5101  001758  AC81               	btfss	3969,6,c	;volatile
  5102  00175A  D004               	goto	l3630
  5103  00175C  0E00               	movlw	0
  5104  00175E  6E81               	movwf	3969,c	;volatile
  5105  001760  0E30               	movlw	48
  5106  001762  0012               	return	
  5107  001764                     l3630:
  5108                           
  5109                           ;main.c: 275: PORTB = 0b00000100;
  5110  001764  0E04               	movlw	4
  5111  001766  6E81               	movwf	3969,c	;volatile
  5112                           
  5113                           ;main.c: 277: if (PORTBbits.RB3) {PORTB = 0x00; return '3';}
  5114  001768  A681               	btfss	3969,3,c	;volatile
  5115  00176A  D004               	goto	l261
  5116  00176C  0E00               	movlw	0
  5117  00176E  6E81               	movwf	3969,c	;volatile
  5118  001770  0E33               	movlw	51
  5119  001772  0012               	return	
  5120  001774                     l261:
  5121                           
  5122                           ;main.c: 278: if (PORTBbits.RB4) {PORTB = 0x00; return '6';}
  5123  001774  A881               	btfss	3969,4,c	;volatile
  5124  001776  D004               	goto	l262
  5125  001778  0E00               	movlw	0
  5126  00177A  6E81               	movwf	3969,c	;volatile
  5127  00177C  0E36               	movlw	54
  5128  00177E  0012               	return	
  5129  001780                     l262:
  5130                           
  5131                           ;main.c: 279: if (PORTBbits.RB5) {PORTB = 0x00; return '9';}
  5132  001780  AA81               	btfss	3969,5,c	;volatile
  5133  001782  D004               	goto	l263
  5134  001784  0E00               	movlw	0
  5135  001786  6E81               	movwf	3969,c	;volatile
  5136  001788  0E39               	movlw	57
  5137  00178A  0012               	return	
  5138  00178C                     l263:
  5139                           
  5140                           ;main.c: 280: if (PORTBbits.RB6) {PORTB = 0x00; return '#';}
  5141  00178C  AC81               	btfss	3969,6,c	;volatile
  5142  00178E  D004               	goto	l3658
  5143  001790  0E00               	movlw	0
  5144  001792  6E81               	movwf	3969,c	;volatile
  5145  001794  0E23               	movlw	35
  5146  001796  0012               	return	
  5147  001798                     l3658:
  5148                           
  5149                           ;main.c: 281: return '_';
  5150  001798  0E5F               	movlw	95
  5151  00179A  0012               	return	
  5152  00179C                     __end_of_read_keypad:
  5153                           	opt stack 0
  5154                           tblptru	equ	0xFF8
  5155                           tblptrh	equ	0xFF7
  5156                           tblptrl	equ	0xFF6
  5157                           tablat	equ	0xFF5
  5158                           prodh	equ	0xFF4
  5159                           prodl	equ	0xFF3
  5160                           postinc0	equ	0xFEE
  5161                           wreg	equ	0xFE8
  5162                           indf1	equ	0xFE7
  5163                           postdec1	equ	0xFE5
  5164                           plusw1	equ	0xFE3
  5165                           fsr1h	equ	0xFE2
  5166                           fsr1l	equ	0xFE1
  5167                           indf2	equ	0xFDF
  5168                           postinc2	equ	0xFDE
  5169                           plusw2	equ	0xFDB
  5170                           fsr2h	equ	0xFDA
  5171                           fsr2l	equ	0xFD9
  5172                           status	equ	0xFD8
  5173                           
  5174 ;; *************** function _menu_progress_bar *****************
  5175 ;; Defined at:
  5176 ;;		line 84 in file "menu.h"
  5177 ;; Parameters:    Size  Location     Type
  5178 ;;  load_time_ms    2   28[COMRAM] unsigned short 
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;  ii              2   38[COMRAM] int 
  5181 ;;  i               2   46[COMRAM] int 
  5182 ;;  i               2   44[COMRAM] int 
  5183 ;;  i               2   42[COMRAM] int 
  5184 ;;  i               2   40[COMRAM] int 
  5185 ;;  d               4   34[COMRAM] unsigned long 
  5186 ;; Return value:  Size  Location     Type
  5187 ;;                  1    wreg      void 
  5188 ;; Registers used:
  5189 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5190 ;; Tracked objects:
  5191 ;;		On entry : 0/0
  5192 ;;		On exit  : 0/0
  5193 ;;		Unchanged: 0/0
  5194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5195 ;;      Params:         2       0       0       0       0       0       0
  5196 ;;      Locals:        14       0       0       0       0       0       0
  5197 ;;      Temps:          4       0       0       0       0       0       0
  5198 ;;      Totals:        20       0       0       0       0       0       0
  5199 ;;Total ram usage:       20 bytes
  5200 ;; Hardware stack levels used:    1
  5201 ;; Hardware stack levels required when called:    4
  5202 ;; This function calls:
  5203 ;;		_Lcd_Clear
  5204 ;;		_Lcd_Set_Cursor
  5205 ;;		_Lcd_Write_Char
  5206 ;;		_Lcd_Write_String
  5207 ;;		___lwdiv
  5208 ;;		___wmul
  5209 ;; This function is called by:
  5210 ;;		_main
  5211 ;;		_start_routine
  5212 ;;		_running_display
  5213 ;; This function uses a non-reentrant model
  5214 ;;
  5215                           
  5216                           	psect	text6
  5217  0014A0                     __ptext6:
  5218                           	opt stack 0
  5219  0014A0                     _menu_progress_bar:
  5220                           	opt stack 25
  5221                           
  5222                           ;menu.h: 86: Lcd_Set_Cursor(2,1);
  5223                           
  5224                           ;incstack = 0
  5225  0014A0  0E01               	movlw	1
  5226  0014A2  6E12               	movwf	Lcd_Set_Cursor@b,c
  5227  0014A4  0E02               	movlw	2
  5228  0014A6  EC2B  F00D         	call	_Lcd_Set_Cursor
  5229                           
  5230                           ;menu.h: 87: unsigned long d = (((load_time_ms/16)/20)*20);
  5231  0014AA  0E00               	movlw	0
  5232  0014AC  6E13               	movwf	___lwdiv@divisor+1,c
  5233  0014AE  0E14               	movlw	20
  5234  0014B0  6E12               	movwf	___lwdiv@divisor,c
  5235  0014B2  C01D  F01F         	movff	menu_progress_bar@load_time_ms,??_menu_progress_bar
  5236  0014B6  C01E  F020         	movff	menu_progress_bar@load_time_ms+1,??_menu_progress_bar+1
  5237  0014BA  0E04               	movlw	4
  5238  0014BC  6E21               	movwf	(??_menu_progress_bar+2)& (0+255),c
  5239  0014BE                     u3375:
  5240  0014BE  90D8               	bcf	status,0,c
  5241  0014C0  3220               	rrcf	??_menu_progress_bar+1,f,c
  5242  0014C2  321F               	rrcf	??_menu_progress_bar,f,c
  5243  0014C4  2E21               	decfsz	(??_menu_progress_bar+2)& (0+255),f,c
  5244  0014C6  D7FB               	goto	u3375
  5245  0014C8  C01F  F010         	movff	??_menu_progress_bar,___lwdiv@dividend
  5246  0014CC  C020  F011         	movff	??_menu_progress_bar+1,___lwdiv@dividend+1
  5247  0014D0  EC02  F00D         	call	___lwdiv	;wreg free
  5248  0014D4  C010  F017         	movff	?___lwdiv,___wmul@multiplier
  5249  0014D8  C011  F018         	movff	?___lwdiv+1,___wmul@multiplier+1
  5250  0014DC  0E00               	movlw	0
  5251  0014DE  6E1A               	movwf	___wmul@multiplicand+1,c
  5252  0014E0  0E14               	movlw	20
  5253  0014E2  6E19               	movwf	___wmul@multiplicand,c
  5254  0014E4  EC00  F00E         	call	___wmul	;wreg free
  5255  0014E8  C017  F023         	movff	?___wmul,menu_progress_bar@d
  5256  0014EC  C018  F024         	movff	?___wmul+1,menu_progress_bar@d+1
  5257  0014F0  6A25               	clrf	menu_progress_bar@d+2,c
  5258  0014F2  6A26               	clrf	menu_progress_bar@d+3,c
  5259                           
  5260                           ;menu.h: 88: for (int i = 0; i < 16; i++)
  5261  0014F4  0E00               	movlw	0
  5262  0014F6  6E2A               	movwf	menu_progress_bar@i+1,c
  5263  0014F8  0E00               	movlw	0
  5264  0014FA  6E29               	movwf	menu_progress_bar@i,c
  5265  0014FC                     l3696:
  5266  0014FC  BE2A               	btfsc	menu_progress_bar@i+1,7,c
  5267  0014FE  D006               	goto	l3700
  5268  001500  502A               	movf	menu_progress_bar@i+1,w,c
  5269  001502  E12F               	bnz	l3714
  5270  001504  0E10               	movlw	16
  5271  001506  5C29               	subwf	menu_progress_bar@i,w,c
  5272  001508  B0D8               	btfsc	status,0,c
  5273  00150A  D02B               	goto	l3714
  5274  00150C                     l3700:
  5275                           
  5276                           ;menu.h: 89: {
  5277                           ;menu.h: 90: Lcd_Write_Char(0xFF);
  5278  00150C  0EFF               	movlw	255
  5279  00150E  ECB6  F00D         	call	_Lcd_Write_Char
  5280                           
  5281                           ;menu.h: 91: for (int ii = 0; ii < d; ii+=20)
  5282  001512  0E00               	movlw	0
  5283  001514  6E28               	movwf	menu_progress_bar@ii+1,c
  5284  001516  0E00               	movlw	0
  5285  001518  6E27               	movwf	menu_progress_bar@ii,c
  5286  00151A  D00D               	goto	l3708
  5287  00151C                     l3704:
  5288                           
  5289                           ;menu.h: 92: _delay((unsigned long)((20)*(16000000/4000.0)));
  5290  00151C  0E68               	movlw	104
  5291  00151E  6E1F               	movwf	??_menu_progress_bar& (0+255),c
  5292  001520  0EE4               	movlw	228
  5293  001522                     u4737:
  5294  001522  2EE8               	decfsz	wreg,f,c
  5295  001524  D7FE               	goto	u4737
  5296  001526  2E1F               	decfsz	??_menu_progress_bar& (0+255),f,c
  5297  001528  D7FC               	goto	u4737
  5298  00152A  F000 F000          	nop2	
  5299  00152E  0E14               	movlw	20
  5300  001530  2627               	addwf	menu_progress_bar@ii,f,c
  5301  001532  0E00               	movlw	0
  5302  001534  2228               	addwfc	menu_progress_bar@ii+1,f,c
  5303  001536                     l3708:
  5304  001536  C027  F01F         	movff	menu_progress_bar@ii,??_menu_progress_bar
  5305  00153A  C028  F020         	movff	menu_progress_bar@ii+1,??_menu_progress_bar+1
  5306  00153E  0E00               	movlw	0
  5307  001540  BE20               	btfsc	(??_menu_progress_bar+1)& (0+255),7,c
  5308  001542  0EFF               	movlw	255
  5309  001544  6E21               	movwf	(??_menu_progress_bar+2)& (0+255),c
  5310  001546  6E22               	movwf	(??_menu_progress_bar+3)& (0+255),c
  5311  001548  5023               	movf	menu_progress_bar@d,w,c
  5312  00154A  5C1F               	subwf	??_menu_progress_bar,w,c
  5313  00154C  5024               	movf	menu_progress_bar@d+1,w,c
  5314  00154E  5820               	subwfb	??_menu_progress_bar+1,w,c
  5315  001550  5025               	movf	menu_progress_bar@d+2,w,c
  5316  001552  5821               	subwfb	??_menu_progress_bar+2,w,c
  5317  001554  5026               	movf	menu_progress_bar@d+3,w,c
  5318  001556  5822               	subwfb	??_menu_progress_bar+3,w,c
  5319  001558  A0D8               	btfss	status,0,c
  5320  00155A  D7E0               	goto	l3704
  5321  00155C  4A29               	infsnz	menu_progress_bar@i,f,c
  5322  00155E  2A2A               	incf	menu_progress_bar@i+1,f,c
  5323  001560  D7CD               	goto	l3696
  5324  001562                     l3714:
  5325                           
  5326                           ;menu.h: 93: }
  5327                           ;menu.h: 94: Lcd_Set_Cursor(2,1);
  5328  001562  0E01               	movlw	1
  5329  001564  6E12               	movwf	Lcd_Set_Cursor@b,c
  5330  001566  0E02               	movlw	2
  5331  001568  EC2B  F00D         	call	_Lcd_Set_Cursor
  5332                           
  5333                           ;menu.h: 95: Lcd_Write_String("                ");
  5334  00156C  0EA9               	movlw	low STR_2
  5335  00156E  6E14               	movwf	Lcd_Write_String@a,c
  5336  001570  0E7E               	movlw	high STR_2
  5337  001572  6E15               	movwf	Lcd_Write_String@a+1,c
  5338  001574  EC91  F00C         	call	_Lcd_Write_String	;wreg free
  5339                           
  5340                           ;menu.h: 96: for (int i = 0; i < 5; i++)
  5341  001578  0E00               	movlw	0
  5342  00157A  6E2C               	movwf	menu_progress_bar@i_726+1,c
  5343  00157C  0E00               	movlw	0
  5344  00157E  6E2B               	movwf	menu_progress_bar@i_726,c
  5345  001580                     l3720:
  5346  001580  BE2C               	btfsc	menu_progress_bar@i_726+1,7,c
  5347  001582  D006               	goto	l3724
  5348  001584  502C               	movf	menu_progress_bar@i_726+1,w,c
  5349  001586  E110               	bnz	l3728
  5350  001588  0E05               	movlw	5
  5351  00158A  5C2B               	subwf	menu_progress_bar@i_726,w,c
  5352  00158C  B0D8               	btfsc	status,0,c
  5353  00158E  D00C               	goto	l3728
  5354  001590                     l3724:
  5355                           
  5356                           ;menu.h: 97: {
  5357                           ;menu.h: 98: _delay((unsigned long)((20)*(16000000/4000.0)));
  5358  001590  0E68               	movlw	104
  5359  001592  6E1F               	movwf	??_menu_progress_bar& (0+255),c
  5360  001594  0EE4               	movlw	228
  5361  001596                     u4747:
  5362  001596  2EE8               	decfsz	wreg,f,c
  5363  001598  D7FE               	goto	u4747
  5364  00159A  2E1F               	decfsz	??_menu_progress_bar& (0+255),f,c
  5365  00159C  D7FC               	goto	u4747
  5366  00159E  F000 F000          	nop2	
  5367  0015A2  4A2B               	infsnz	menu_progress_bar@i_726,f,c
  5368  0015A4  2A2C               	incf	menu_progress_bar@i_726+1,f,c
  5369  0015A6  D7EC               	goto	l3720
  5370  0015A8                     l3728:
  5371                           
  5372                           ;menu.h: 99: }
  5373                           ;menu.h: 100: Lcd_Set_Cursor(2,1);
  5374  0015A8  0E01               	movlw	1
  5375  0015AA  6E12               	movwf	Lcd_Set_Cursor@b,c
  5376  0015AC  0E02               	movlw	2
  5377  0015AE  EC2B  F00D         	call	_Lcd_Set_Cursor
  5378                           
  5379                           ;menu.h: 101: for (int i = 0; i < 16; i++)
  5380  0015B2  0E00               	movlw	0
  5381  0015B4  6E2E               	movwf	menu_progress_bar@i_727+1,c
  5382  0015B6  0E00               	movlw	0
  5383  0015B8  6E2D               	movwf	menu_progress_bar@i_727,c
  5384  0015BA                     l3732:
  5385  0015BA  BE2E               	btfsc	menu_progress_bar@i_727+1,7,c
  5386  0015BC  D006               	goto	l3736
  5387  0015BE  502E               	movf	menu_progress_bar@i_727+1,w,c
  5388  0015C0  E10A               	bnz	l3742
  5389  0015C2  0E10               	movlw	16
  5390  0015C4  5C2D               	subwf	menu_progress_bar@i_727,w,c
  5391  0015C6  B0D8               	btfsc	status,0,c
  5392  0015C8  D006               	goto	l3742
  5393  0015CA                     l3736:
  5394                           
  5395                           ;menu.h: 102: {
  5396                           ;menu.h: 103: Lcd_Write_Char(0xFF);
  5397  0015CA  0EFF               	movlw	255
  5398  0015CC  ECB6  F00D         	call	_Lcd_Write_Char
  5399  0015D0  4A2D               	infsnz	menu_progress_bar@i_727,f,c
  5400  0015D2  2A2E               	incf	menu_progress_bar@i_727+1,f,c
  5401  0015D4  D7F2               	goto	l3732
  5402  0015D6                     l3742:
  5403                           
  5404                           ;menu.h: 104: }
  5405                           ;menu.h: 105: for (int i = 0; i < 5; i++)
  5406  0015D6  0E00               	movlw	0
  5407  0015D8  6E30               	movwf	menu_progress_bar@i_728+1,c
  5408  0015DA  0E00               	movlw	0
  5409  0015DC  6E2F               	movwf	menu_progress_bar@i_728,c
  5410  0015DE                     l3744:
  5411  0015DE  BE30               	btfsc	menu_progress_bar@i_728+1,7,c
  5412  0015E0  D006               	goto	l3748
  5413  0015E2  5030               	movf	menu_progress_bar@i_728+1,w,c
  5414  0015E4  E110               	bnz	l3752
  5415  0015E6  0E05               	movlw	5
  5416  0015E8  5C2F               	subwf	menu_progress_bar@i_728,w,c
  5417  0015EA  B0D8               	btfsc	status,0,c
  5418  0015EC  D00C               	goto	l3752
  5419  0015EE                     l3748:
  5420                           
  5421                           ;menu.h: 106: {
  5422                           ;menu.h: 107: _delay((unsigned long)((20)*(16000000/4000.0)));
  5423  0015EE  0E68               	movlw	104
  5424  0015F0  6E1F               	movwf	??_menu_progress_bar& (0+255),c
  5425  0015F2  0EE4               	movlw	228
  5426  0015F4                     u4757:
  5427  0015F4  2EE8               	decfsz	wreg,f,c
  5428  0015F6  D7FE               	goto	u4757
  5429  0015F8  2E1F               	decfsz	??_menu_progress_bar& (0+255),f,c
  5430  0015FA  D7FC               	goto	u4757
  5431  0015FC  F000 F000          	nop2	
  5432  001600  4A2F               	infsnz	menu_progress_bar@i_728,f,c
  5433  001602  2A30               	incf	menu_progress_bar@i_728+1,f,c
  5434  001604  D7EC               	goto	l3744
  5435  001606                     l3752:
  5436                           
  5437                           ;menu.h: 108: }
  5438                           ;menu.h: 109: Lcd_Clear();
  5439  001606  EC25  F00E         	call	_Lcd_Clear	;wreg free
  5440  00160A  0012               	return		;funcret
  5441  00160C                     __end_of_menu_progress_bar:
  5442                           	opt stack 0
  5443                           tblptru	equ	0xFF8
  5444                           tblptrh	equ	0xFF7
  5445                           tblptrl	equ	0xFF6
  5446                           tablat	equ	0xFF5
  5447                           prodh	equ	0xFF4
  5448                           prodl	equ	0xFF3
  5449                           postinc0	equ	0xFEE
  5450                           wreg	equ	0xFE8
  5451                           indf1	equ	0xFE7
  5452                           postdec1	equ	0xFE5
  5453                           plusw1	equ	0xFE3
  5454                           fsr1h	equ	0xFE2
  5455                           fsr1l	equ	0xFE1
  5456                           indf2	equ	0xFDF
  5457                           postinc2	equ	0xFDE
  5458                           plusw2	equ	0xFDB
  5459                           fsr2h	equ	0xFDA
  5460                           fsr2l	equ	0xFD9
  5461                           status	equ	0xFD8
  5462                           
  5463 ;; *************** function ___wmul *****************
  5464 ;; Defined at:
  5465 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  5466 ;; Parameters:    Size  Location     Type
  5467 ;;  multiplier      2   22[COMRAM] unsigned int 
  5468 ;;  multiplicand    2   24[COMRAM] unsigned int 
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;  product         2   26[COMRAM] unsigned int 
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  2   22[COMRAM] unsigned int 
  5473 ;; Registers used:
  5474 ;;		wreg, status,2, status,0, prodl, prodh
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5480 ;;      Params:         4       0       0       0       0       0       0
  5481 ;;      Locals:         2       0       0       0       0       0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0
  5483 ;;      Totals:         6       0       0       0       0       0       0
  5484 ;;Total ram usage:        6 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    1
  5487 ;; This function calls:
  5488 ;;		Nothing
  5489 ;; This function is called by:
  5490 ;;		_menu_progress_bar
  5491 ;;		_menu_seconds_to_mmss
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           	psect	text7
  5496  001C00                     __ptext7:
  5497                           	opt stack 0
  5498  001C00                     ___wmul:
  5499                           	opt stack 27
  5500                           
  5501                           ;incstack = 0
  5502  001C00  5017               	movf	___wmul@multiplier,w,c
  5503  001C02  0219               	mulwf	___wmul@multiplicand,c
  5504  001C04  CFF3 F01B          	movff	prodl,___wmul@product
  5505  001C08  CFF4 F01C          	movff	prodh,___wmul@product+1
  5506  001C0C  5017               	movf	___wmul@multiplier,w,c
  5507  001C0E  021A               	mulwf	___wmul@multiplicand+1,c
  5508  001C10  50F3               	movf	prodl,w,c
  5509  001C12  261C               	addwf	___wmul@product+1,f,c
  5510  001C14  5018               	movf	___wmul@multiplier+1,w,c
  5511  001C16  0219               	mulwf	___wmul@multiplicand,c
  5512  001C18  50F3               	movf	prodl,w,c
  5513  001C1A  261C               	addwf	___wmul@product+1,f,c
  5514  001C1C  C01B  F017         	movff	___wmul@product,?___wmul
  5515  001C20  C01C  F018         	movff	___wmul@product+1,?___wmul+1
  5516  001C24  0012               	return	
  5517  001C26                     __end_of___wmul:
  5518                           	opt stack 0
  5519                           tblptru	equ	0xFF8
  5520                           tblptrh	equ	0xFF7
  5521                           tblptrl	equ	0xFF6
  5522                           tablat	equ	0xFF5
  5523                           prodh	equ	0xFF4
  5524                           prodl	equ	0xFF3
  5525                           postinc0	equ	0xFEE
  5526                           wreg	equ	0xFE8
  5527                           indf1	equ	0xFE7
  5528                           postdec1	equ	0xFE5
  5529                           plusw1	equ	0xFE3
  5530                           fsr1h	equ	0xFE2
  5531                           fsr1l	equ	0xFE1
  5532                           indf2	equ	0xFDF
  5533                           postinc2	equ	0xFDE
  5534                           plusw2	equ	0xFDB
  5535                           fsr2h	equ	0xFDA
  5536                           fsr2l	equ	0xFD9
  5537                           status	equ	0xFD8
  5538                           
  5539 ;; *************** function ___lwdiv *****************
  5540 ;; Defined at:
  5541 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;  dividend        2   15[COMRAM] unsigned int 
  5544 ;;  divisor         2   17[COMRAM] unsigned int 
  5545 ;; Auto vars:     Size  Location     Type
  5546 ;;  quotient        2   20[COMRAM] unsigned int 
  5547 ;;  counter         1   19[COMRAM] unsigned char 
  5548 ;; Return value:  Size  Location     Type
  5549 ;;                  2   15[COMRAM] unsigned int 
  5550 ;; Registers used:
  5551 ;;		wreg, status,2, status,0
  5552 ;; Tracked objects:
  5553 ;;		On entry : 0/0
  5554 ;;		On exit  : 0/0
  5555 ;;		Unchanged: 0/0
  5556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5557 ;;      Params:         4       0       0       0       0       0       0
  5558 ;;      Locals:         3       0       0       0       0       0       0
  5559 ;;      Temps:          0       0       0       0       0       0       0
  5560 ;;      Totals:         7       0       0       0       0       0       0
  5561 ;;Total ram usage:        7 bytes
  5562 ;; Hardware stack levels used:    1
  5563 ;; Hardware stack levels required when called:    1
  5564 ;; This function calls:
  5565 ;;		Nothing
  5566 ;; This function is called by:
  5567 ;;		_menu_progress_bar
  5568 ;;		_menu_seconds_to_mmss
  5569 ;; This function uses a non-reentrant model
  5570 ;;
  5571                           
  5572                           	psect	text8
  5573  001A04                     __ptext8:
  5574                           	opt stack 0
  5575  001A04                     ___lwdiv:
  5576                           	opt stack 27
  5577                           
  5578                           ;incstack = 0
  5579  001A04  0E00               	movlw	0
  5580  001A06  6E16               	movwf	___lwdiv@quotient+1,c
  5581  001A08  0E00               	movlw	0
  5582  001A0A  6E15               	movwf	___lwdiv@quotient,c
  5583  001A0C  5012               	movf	___lwdiv@divisor,w,c
  5584  001A0E  1013               	iorwf	___lwdiv@divisor+1,w,c
  5585  001A10  B4D8               	btfsc	status,2,c
  5586  001A12  D01C               	goto	l765
  5587  001A14  0E01               	movlw	1
  5588  001A16  6E14               	movwf	___lwdiv@counter,c
  5589  001A18  D004               	goto	l3676
  5590  001A1A                     l3674:
  5591  001A1A  90D8               	bcf	status,0,c
  5592  001A1C  3612               	rlcf	___lwdiv@divisor,f,c
  5593  001A1E  3613               	rlcf	___lwdiv@divisor+1,f,c
  5594  001A20  2A14               	incf	___lwdiv@counter,f,c
  5595  001A22                     l3676:
  5596  001A22  AE13               	btfss	___lwdiv@divisor+1,7,c
  5597  001A24  D7FA               	goto	l3674
  5598  001A26                     l3678:
  5599  001A26  90D8               	bcf	status,0,c
  5600  001A28  3615               	rlcf	___lwdiv@quotient,f,c
  5601  001A2A  3616               	rlcf	___lwdiv@quotient+1,f,c
  5602  001A2C  5012               	movf	___lwdiv@divisor,w,c
  5603  001A2E  5C10               	subwf	___lwdiv@dividend,w,c
  5604  001A30  5013               	movf	___lwdiv@divisor+1,w,c
  5605  001A32  5811               	subwfb	___lwdiv@dividend+1,w,c
  5606  001A34  A0D8               	btfss	status,0,c
  5607  001A36  D005               	goto	l3686
  5608  001A38  5012               	movf	___lwdiv@divisor,w,c
  5609  001A3A  5E10               	subwf	___lwdiv@dividend,f,c
  5610  001A3C  5013               	movf	___lwdiv@divisor+1,w,c
  5611  001A3E  5A11               	subwfb	___lwdiv@dividend+1,f,c
  5612  001A40  8015               	bsf	___lwdiv@quotient,0,c
  5613  001A42                     l3686:
  5614  001A42  90D8               	bcf	status,0,c
  5615  001A44  3213               	rrcf	___lwdiv@divisor+1,f,c
  5616  001A46  3212               	rrcf	___lwdiv@divisor,f,c
  5617  001A48  2E14               	decfsz	___lwdiv@counter,f,c
  5618  001A4A  D7ED               	goto	l3678
  5619  001A4C                     l765:
  5620  001A4C  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
  5621  001A50  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5622  001A54  0012               	return		;funcret
  5623  001A56                     __end_of___lwdiv:
  5624                           	opt stack 0
  5625                           tblptru	equ	0xFF8
  5626                           tblptrh	equ	0xFF7
  5627                           tblptrl	equ	0xFF6
  5628                           tablat	equ	0xFF5
  5629                           prodh	equ	0xFF4
  5630                           prodl	equ	0xFF3
  5631                           postinc0	equ	0xFEE
  5632                           wreg	equ	0xFE8
  5633                           indf1	equ	0xFE7
  5634                           postdec1	equ	0xFE5
  5635                           plusw1	equ	0xFE3
  5636                           fsr1h	equ	0xFE2
  5637                           fsr1l	equ	0xFE1
  5638                           indf2	equ	0xFDF
  5639                           postinc2	equ	0xFDE
  5640                           plusw2	equ	0xFDB
  5641                           fsr2h	equ	0xFDA
  5642                           fsr2l	equ	0xFD9
  5643                           status	equ	0xFD8
  5644                           
  5645 ;; *************** function _Lcd_Write_String *****************
  5646 ;; Defined at:
  5647 ;;		line 111 in file "lcd.h"
  5648 ;; Parameters:    Size  Location     Type
  5649 ;;  a               2   19[COMRAM] PTR unsigned char 
  5650 ;;		 -> STR_28(17), STR_27(6), STR_26(17), STR_25(17), 
  5651 ;;		 -> STR_24(17), STR_23(2), STR_22(5), STR_21(17), 
  5652 ;;		 -> STR_20(17), STR_19(17), STR_18(17), STR_17(17), 
  5653 ;;		 -> STR_16(11), STR_15(6), STR_14(5), STR_13(17), 
  5654 ;;		 -> STR_12(17), STR_11(17), STR_10(17), STR_9(17), 
  5655 ;;		 -> STR_8(17), STR_7(17), STR_6(17), STR_5(17), 
  5656 ;;		 -> STR_4(17), STR_3(17), STR_2(17), STR_1(2), 
  5657 ;;		 -> RAM(1535), 
  5658 ;; Auto vars:     Size  Location     Type
  5659 ;;  i               2   23[COMRAM] int 
  5660 ;; Return value:  Size  Location     Type
  5661 ;;                  1    wreg      void 
  5662 ;; Registers used:
  5663 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5664 ;; Tracked objects:
  5665 ;;		On entry : 0/0
  5666 ;;		On exit  : 0/0
  5667 ;;		Unchanged: 0/0
  5668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5669 ;;      Params:         2       0       0       0       0       0       0
  5670 ;;      Locals:         2       0       0       0       0       0       0
  5671 ;;      Temps:          2       0       0       0       0       0       0
  5672 ;;      Totals:         6       0       0       0       0       0       0
  5673 ;;Total ram usage:        6 bytes
  5674 ;; Hardware stack levels used:    1
  5675 ;; Hardware stack levels required when called:    3
  5676 ;; This function calls:
  5677 ;;		_Lcd_Write_Char
  5678 ;; This function is called by:
  5679 ;;		_menu_progress_bar
  5680 ;;		_main
  5681 ;;		_start_routine
  5682 ;;		_running_display
  5683 ;;		_menu_animation_i2c
  5684 ;; This function uses a non-reentrant model
  5685 ;;
  5686                           
  5687                           	psect	text9
  5688  001922                     __ptext9:
  5689                           	opt stack 0
  5690  001922                     _Lcd_Write_String:
  5691                           	opt stack 25
  5692                           
  5693                           ;lcd.h: 113: int i;
  5694                           ;lcd.h: 114: for(i=0;a[i]!='\0';i++)
  5695                           
  5696                           ;incstack = 0
  5697  001922  0E00               	movlw	0
  5698  001924  6E19               	movwf	Lcd_Write_String@i+1,c
  5699  001926  0E00               	movlw	0
  5700  001928  6E18               	movwf	Lcd_Write_String@i,c
  5701  00192A  D01A               	goto	l3572
  5702  00192C                     l3568:
  5703                           
  5704                           ;lcd.h: 115: Lcd_Write_Char(a[i]);
  5705  00192C  5018               	movf	Lcd_Write_String@i,w,c
  5706  00192E  2414               	addwf	Lcd_Write_String@a,w,c
  5707  001930  6E16               	movwf	??_Lcd_Write_String& (0+255),c
  5708  001932  5019               	movf	Lcd_Write_String@i+1,w,c
  5709  001934  2015               	addwfc	Lcd_Write_String@a+1,w,c
  5710  001936  6E17               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  5711  001938  C016  FFF6         	movff	??_Lcd_Write_String,tblptrl
  5712  00193C  C017  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  5713  001940  6AF8               	clrf	tblptru,c
  5714  001942  0E05               	movlw	(high __ramtop+-1)
  5715  001944  64F7               	cpfsgt	tblptrh,c
  5716  001946  D003               	bra	u3197
  5717  001948  0008               	tblrd		*
  5718  00194A  50F5               	movf	tablat,w,c
  5719  00194C  D005               	bra	u3190
  5720  00194E                     u3197:
  5721  00194E  CFF6 FFE9          	movff	tblptrl,fsr0l
  5722  001952  CFF7 FFEA          	movff	tblptrh,fsr0h
  5723  001956  50EF               	movf	indf0,w,c
  5724  001958                     u3190:
  5725  001958  ECB6  F00D         	call	_Lcd_Write_Char
  5726  00195C  4A18               	infsnz	Lcd_Write_String@i,f,c
  5727  00195E  2A19               	incf	Lcd_Write_String@i+1,f,c
  5728  001960                     l3572:
  5729  001960  5018               	movf	Lcd_Write_String@i,w,c
  5730  001962  2414               	addwf	Lcd_Write_String@a,w,c
  5731  001964  6E16               	movwf	??_Lcd_Write_String& (0+255),c
  5732  001966  5019               	movf	Lcd_Write_String@i+1,w,c
  5733  001968  2015               	addwfc	Lcd_Write_String@a+1,w,c
  5734  00196A  6E17               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  5735  00196C  C016  FFF6         	movff	??_Lcd_Write_String,tblptrl
  5736  001970  C017  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  5737  001974  6AF8               	clrf	tblptru,c
  5738  001976  0E05               	movlw	(high __ramtop+-1)
  5739  001978  64F7               	cpfsgt	tblptrh,c
  5740  00197A  D003               	bra	u3207
  5741  00197C  0008               	tblrd		*
  5742  00197E  50F5               	movf	tablat,w,c
  5743  001980  D005               	bra	u3200
  5744  001982                     u3207:
  5745  001982  CFF6 FFE9          	movff	tblptrl,fsr0l
  5746  001986  CFF7 FFEA          	movff	tblptrh,fsr0h
  5747  00198A  50EF               	movf	indf0,w,c
  5748  00198C                     u3200:
  5749  00198C  0900               	iorlw	0
  5750  00198E  B4D8               	btfsc	status,2,c
  5751  001990  0012               	return	
  5752  001992  D7CC               	goto	l3568
  5753  001994                     __end_of_Lcd_Write_String:
  5754                           	opt stack 0
  5755                           tblptru	equ	0xFF8
  5756                           tblptrh	equ	0xFF7
  5757                           tblptrl	equ	0xFF6
  5758                           tablat	equ	0xFF5
  5759                           prodh	equ	0xFF4
  5760                           prodl	equ	0xFF3
  5761                           indf0	equ	0xFEF
  5762                           postinc0	equ	0xFEE
  5763                           fsr0h	equ	0xFEA
  5764                           fsr0l	equ	0xFE9
  5765                           wreg	equ	0xFE8
  5766                           indf1	equ	0xFE7
  5767                           postdec1	equ	0xFE5
  5768                           plusw1	equ	0xFE3
  5769                           fsr1h	equ	0xFE2
  5770                           fsr1l	equ	0xFE1
  5771                           indf2	equ	0xFDF
  5772                           postinc2	equ	0xFDE
  5773                           plusw2	equ	0xFDB
  5774                           fsr2h	equ	0xFDA
  5775                           fsr2l	equ	0xFD9
  5776                           status	equ	0xFD8
  5777                           
  5778 ;; *************** function _Lcd_Write_Char *****************
  5779 ;; Defined at:
  5780 ;;		line 95 in file "lcd.h"
  5781 ;; Parameters:    Size  Location     Type
  5782 ;;  a               1    wreg     unsigned char 
  5783 ;; Auto vars:     Size  Location     Type
  5784 ;;  a               1   18[COMRAM] unsigned char 
  5785 ;;  y               1   17[COMRAM] unsigned char 
  5786 ;;  temp            1   16[COMRAM] unsigned char 
  5787 ;; Return value:  Size  Location     Type
  5788 ;;                  1    wreg      void 
  5789 ;; Registers used:
  5790 ;;		wreg, status,2, status,0, cstack
  5791 ;; Tracked objects:
  5792 ;;		On entry : 0/0
  5793 ;;		On exit  : 0/0
  5794 ;;		Unchanged: 0/0
  5795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5796 ;;      Params:         0       0       0       0       0       0       0
  5797 ;;      Locals:         3       0       0       0       0       0       0
  5798 ;;      Temps:          0       0       0       0       0       0       0
  5799 ;;      Totals:         3       0       0       0       0       0       0
  5800 ;;Total ram usage:        3 bytes
  5801 ;; Hardware stack levels used:    1
  5802 ;; Hardware stack levels required when called:    2
  5803 ;; This function calls:
  5804 ;;		_Lcd_Port
  5805 ;; This function is called by:
  5806 ;;		_Lcd_Write_String
  5807 ;;		_menu_progress_bar
  5808 ;;		_main
  5809 ;;		_start_routine
  5810 ;;		_running_display
  5811 ;;		_menu_main
  5812 ;; This function uses a non-reentrant model
  5813 ;;
  5814                           
  5815                           	psect	text10
  5816  001B6C                     __ptext10:
  5817                           	opt stack 0
  5818  001B6C                     _Lcd_Write_Char:
  5819                           	opt stack 25
  5820                           
  5821                           ;incstack = 0
  5822                           ;Lcd_Write_Char@a stored from wreg
  5823  001B6C  6E13               	movwf	Lcd_Write_Char@a,c
  5824                           
  5825                           ;lcd.h: 97: char temp,y;
  5826                           ;lcd.h: 98: temp = a&0x0F;
  5827  001B6E  5013               	movf	Lcd_Write_Char@a,w,c
  5828  001B70  0B0F               	andlw	15
  5829  001B72  6E11               	movwf	Lcd_Write_Char@temp,c
  5830                           
  5831                           ;lcd.h: 99: y = a&0xF0;
  5832  001B74  5013               	movf	Lcd_Write_Char@a,w,c
  5833  001B76  0BF0               	andlw	240
  5834  001B78  6E12               	movwf	Lcd_Write_Char@y,c
  5835                           
  5836                           ;lcd.h: 100: PORTDbits.RD5 = 1;
  5837  001B7A  8A83               	bsf	3971,5,c	;volatile
  5838                           
  5839                           ;lcd.h: 101: Lcd_Port(y>>4);
  5840  001B7C  3812               	swapf	Lcd_Write_Char@y,w,c
  5841  001B7E  0B0F               	andlw	15
  5842  001B80  ECEA  F00D         	call	_Lcd_Port
  5843                           
  5844                           ;lcd.h: 102: PORTDbits.RD4 = 1;
  5845  001B84  8883               	bsf	3971,4,c	;volatile
  5846                           
  5847                           ;lcd.h: 103: _delay((unsigned long)((40)*(16000000/4000000.0)));
  5848  001B86  0E35               	movlw	53
  5849  001B88                     u4767:
  5850  001B88  2EE8               	decfsz	wreg,f,c
  5851  001B8A  D7FE               	goto	u4767
  5852  001B8C  F000               	nop	
  5853                           
  5854                           ;lcd.h: 104: PORTDbits.RD4 = 0;
  5855  001B8E  9883               	bcf	3971,4,c	;volatile
  5856                           
  5857                           ;lcd.h: 105: Lcd_Port(temp);
  5858  001B90  5011               	movf	Lcd_Write_Char@temp,w,c
  5859  001B92  ECEA  F00D         	call	_Lcd_Port
  5860                           
  5861                           ;lcd.h: 106: PORTDbits.RD4 = 1;
  5862  001B96  8883               	bsf	3971,4,c	;volatile
  5863                           
  5864                           ;lcd.h: 107: _delay((unsigned long)((40)*(16000000/4000000.0)));
  5865  001B98  0E35               	movlw	53
  5866  001B9A                     u4777:
  5867  001B9A  2EE8               	decfsz	wreg,f,c
  5868  001B9C  D7FE               	goto	u4777
  5869  001B9E  F000               	nop	
  5870                           
  5871                           ;lcd.h: 108: PORTDbits.RD4 = 0;
  5872  001BA0  9883               	bcf	3971,4,c	;volatile
  5873  001BA2  0012               	return		;funcret
  5874  001BA4                     __end_of_Lcd_Write_Char:
  5875                           	opt stack 0
  5876                           tblptru	equ	0xFF8
  5877                           tblptrh	equ	0xFF7
  5878                           tblptrl	equ	0xFF6
  5879                           tablat	equ	0xFF5
  5880                           prodh	equ	0xFF4
  5881                           prodl	equ	0xFF3
  5882                           indf0	equ	0xFEF
  5883                           postinc0	equ	0xFEE
  5884                           fsr0h	equ	0xFEA
  5885                           fsr0l	equ	0xFE9
  5886                           wreg	equ	0xFE8
  5887                           indf1	equ	0xFE7
  5888                           postdec1	equ	0xFE5
  5889                           plusw1	equ	0xFE3
  5890                           fsr1h	equ	0xFE2
  5891                           fsr1l	equ	0xFE1
  5892                           indf2	equ	0xFDF
  5893                           postinc2	equ	0xFDE
  5894                           plusw2	equ	0xFDB
  5895                           fsr2h	equ	0xFDA
  5896                           fsr2l	equ	0xFD9
  5897                           status	equ	0xFD8
  5898                           
  5899 ;; *************** function _Lcd_Set_Cursor *****************
  5900 ;; Defined at:
  5901 ;;		line 55 in file "lcd.h"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;  a               1    wreg     unsigned char 
  5904 ;;  b               1   17[COMRAM] unsigned char 
  5905 ;; Auto vars:     Size  Location     Type
  5906 ;;  a               1   18[COMRAM] unsigned char 
  5907 ;;  temp            1   21[COMRAM] unsigned char 
  5908 ;;  y               1   20[COMRAM] unsigned char 
  5909 ;;  z               1   19[COMRAM] unsigned char 
  5910 ;; Return value:  Size  Location     Type
  5911 ;;                  1    wreg      void 
  5912 ;; Registers used:
  5913 ;;		wreg, status,2, status,0, cstack
  5914 ;; Tracked objects:
  5915 ;;		On entry : 0/0
  5916 ;;		On exit  : 0/0
  5917 ;;		Unchanged: 0/0
  5918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5919 ;;      Params:         1       0       0       0       0       0       0
  5920 ;;      Locals:         4       0       0       0       0       0       0
  5921 ;;      Temps:          0       0       0       0       0       0       0
  5922 ;;      Totals:         5       0       0       0       0       0       0
  5923 ;;Total ram usage:        5 bytes
  5924 ;; Hardware stack levels used:    1
  5925 ;; Hardware stack levels required when called:    3
  5926 ;; This function calls:
  5927 ;;		_Lcd_Cmd
  5928 ;; This function is called by:
  5929 ;;		_menu_progress_bar
  5930 ;;		_main
  5931 ;;		_start_routine
  5932 ;;		_running_display
  5933 ;;		_menu_main
  5934 ;;		_menu_animation_i2c
  5935 ;; This function uses a non-reentrant model
  5936 ;;
  5937                           
  5938                           	psect	text11
  5939  001A56                     __ptext11:
  5940                           	opt stack 0
  5941  001A56                     _Lcd_Set_Cursor:
  5942                           	opt stack 25
  5943                           
  5944                           ;incstack = 0
  5945                           ;Lcd_Set_Cursor@a stored from wreg
  5946  001A56  6E13               	movwf	Lcd_Set_Cursor@a,c
  5947                           
  5948                           ;lcd.h: 57: char temp,z,y;
  5949                           ;lcd.h: 58: if(a == 1)
  5950  001A58  0413               	decf	Lcd_Set_Cursor@a,w,c
  5951  001A5A  A4D8               	btfss	status,2,c
  5952  001A5C  D010               	goto	l3558
  5953                           
  5954                           ;lcd.h: 59: {
  5955                           ;lcd.h: 60: temp = 0x80 + b - 1;
  5956  001A5E  5012               	movf	Lcd_Set_Cursor@b,w,c
  5957  001A60  0F7F               	addlw	127
  5958  001A62  6E16               	movwf	Lcd_Set_Cursor@temp,c
  5959                           
  5960                           ;lcd.h: 61: z = temp>>4;
  5961  001A64  3816               	swapf	Lcd_Set_Cursor@temp,w,c
  5962  001A66  0B0F               	andlw	15
  5963  001A68  6E14               	movwf	Lcd_Set_Cursor@z,c
  5964                           
  5965                           ;lcd.h: 62: y = temp & 0x0F;
  5966  001A6A  5016               	movf	Lcd_Set_Cursor@temp,w,c
  5967  001A6C  0B0F               	andlw	15
  5968  001A6E  6E15               	movwf	Lcd_Set_Cursor@y,c
  5969                           
  5970                           ;lcd.h: 63: Lcd_Cmd(z);
  5971  001A70  5014               	movf	Lcd_Set_Cursor@z,w,c
  5972  001A72  EC42  F00E         	call	_Lcd_Cmd
  5973                           
  5974                           ;lcd.h: 64: Lcd_Cmd(y);
  5975  001A76  5015               	movf	Lcd_Set_Cursor@y,w,c
  5976  001A78  EC42  F00E         	call	_Lcd_Cmd
  5977                           
  5978                           ;lcd.h: 65: }
  5979  001A7C  0012               	return	
  5980  001A7E                     l3558:
  5981                           
  5982                           ;lcd.h: 66: else if(a == 2)
  5983  001A7E  0E02               	movlw	2
  5984  001A80  1813               	xorwf	Lcd_Set_Cursor@a,w,c
  5985  001A82  A4D8               	btfss	status,2,c
  5986  001A84  0012               	return	
  5987                           
  5988                           ;lcd.h: 67: {
  5989                           ;lcd.h: 68: temp = 0xC0 + b - 1;
  5990  001A86  5012               	movf	Lcd_Set_Cursor@b,w,c
  5991  001A88  0FBF               	addlw	191
  5992  001A8A  6E16               	movwf	Lcd_Set_Cursor@temp,c
  5993                           
  5994                           ;lcd.h: 69: z = temp>>4;
  5995  001A8C  3816               	swapf	Lcd_Set_Cursor@temp,w,c
  5996  001A8E  0B0F               	andlw	15
  5997  001A90  6E14               	movwf	Lcd_Set_Cursor@z,c
  5998                           
  5999                           ;lcd.h: 70: y = temp & 0x0F;
  6000  001A92  5016               	movf	Lcd_Set_Cursor@temp,w,c
  6001  001A94  0B0F               	andlw	15
  6002  001A96  6E15               	movwf	Lcd_Set_Cursor@y,c
  6003                           
  6004                           ;lcd.h: 71: Lcd_Cmd(z);
  6005  001A98  5014               	movf	Lcd_Set_Cursor@z,w,c
  6006  001A9A  EC42  F00E         	call	_Lcd_Cmd
  6007                           
  6008                           ;lcd.h: 72: Lcd_Cmd(y);
  6009  001A9E  5015               	movf	Lcd_Set_Cursor@y,w,c
  6010  001AA0  EC42  F00E         	call	_Lcd_Cmd
  6011  001AA4  0012               	return	
  6012  001AA6                     __end_of_Lcd_Set_Cursor:
  6013                           	opt stack 0
  6014                           tblptru	equ	0xFF8
  6015                           tblptrh	equ	0xFF7
  6016                           tblptrl	equ	0xFF6
  6017                           tablat	equ	0xFF5
  6018                           prodh	equ	0xFF4
  6019                           prodl	equ	0xFF3
  6020                           indf0	equ	0xFEF
  6021                           postinc0	equ	0xFEE
  6022                           fsr0h	equ	0xFEA
  6023                           fsr0l	equ	0xFE9
  6024                           wreg	equ	0xFE8
  6025                           indf1	equ	0xFE7
  6026                           postdec1	equ	0xFE5
  6027                           plusw1	equ	0xFE3
  6028                           fsr1h	equ	0xFE2
  6029                           fsr1l	equ	0xFE1
  6030                           indf2	equ	0xFDF
  6031                           postinc2	equ	0xFDE
  6032                           plusw2	equ	0xFDB
  6033                           fsr2h	equ	0xFDA
  6034                           fsr2l	equ	0xFD9
  6035                           status	equ	0xFD8
  6036                           
  6037 ;; *************** function _Lcd_Clear *****************
  6038 ;; Defined at:
  6039 ;;		line 48 in file "lcd.h"
  6040 ;; Parameters:    Size  Location     Type
  6041 ;;		None
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;		None
  6044 ;; Return value:  Size  Location     Type
  6045 ;;                  1    wreg      void 
  6046 ;; Registers used:
  6047 ;;		wreg, status,2, cstack
  6048 ;; Tracked objects:
  6049 ;;		On entry : 0/0
  6050 ;;		On exit  : 0/0
  6051 ;;		Unchanged: 0/0
  6052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6053 ;;      Params:         0       0       0       0       0       0       0
  6054 ;;      Locals:         0       0       0       0       0       0       0
  6055 ;;      Temps:          1       0       0       0       0       0       0
  6056 ;;      Totals:         1       0       0       0       0       0       0
  6057 ;;Total ram usage:        1 bytes
  6058 ;; Hardware stack levels used:    1
  6059 ;; Hardware stack levels required when called:    3
  6060 ;; This function calls:
  6061 ;;		_Lcd_Cmd
  6062 ;; This function is called by:
  6063 ;;		_menu_progress_bar
  6064 ;;		_start_routine
  6065 ;;		_running_display
  6066 ;; This function uses a non-reentrant model
  6067 ;;
  6068                           
  6069                           	psect	text12
  6070  001C4A                     __ptext12:
  6071                           	opt stack 0
  6072  001C4A                     _Lcd_Clear:
  6073                           	opt stack 25
  6074                           
  6075                           ;lcd.h: 50: Lcd_Cmd(0);
  6076                           
  6077                           ;incstack = 0
  6078  001C4A  0E00               	movlw	0
  6079  001C4C  EC42  F00E         	call	_Lcd_Cmd
  6080                           
  6081                           ;lcd.h: 51: Lcd_Cmd(1);
  6082  001C50  0E01               	movlw	1
  6083  001C52  EC42  F00E         	call	_Lcd_Cmd
  6084                           
  6085                           ;lcd.h: 52: _delay((unsigned long)((5)*(16000000/4000.0)));
  6086  001C56  0E1A               	movlw	26
  6087  001C58  6E12               	movwf	??_Lcd_Clear& (0+255),c
  6088  001C5A  0EF8               	movlw	248
  6089  001C5C                     u4787:
  6090  001C5C  2EE8               	decfsz	wreg,f,c
  6091  001C5E  D7FE               	goto	u4787
  6092  001C60  2E12               	decfsz	??_Lcd_Clear& (0+255),f,c
  6093  001C62  D7FC               	goto	u4787
  6094  001C64  F000 F000          	nop2	
  6095  001C68  0012               	return		;funcret
  6096  001C6A                     __end_of_Lcd_Clear:
  6097                           	opt stack 0
  6098                           tblptru	equ	0xFF8
  6099                           tblptrh	equ	0xFF7
  6100                           tblptrl	equ	0xFF6
  6101                           tablat	equ	0xFF5
  6102                           prodh	equ	0xFF4
  6103                           prodl	equ	0xFF3
  6104                           indf0	equ	0xFEF
  6105                           postinc0	equ	0xFEE
  6106                           fsr0h	equ	0xFEA
  6107                           fsr0l	equ	0xFE9
  6108                           wreg	equ	0xFE8
  6109                           indf1	equ	0xFE7
  6110                           postdec1	equ	0xFE5
  6111                           plusw1	equ	0xFE3
  6112                           fsr1h	equ	0xFE2
  6113                           fsr1l	equ	0xFE1
  6114                           indf2	equ	0xFDF
  6115                           postinc2	equ	0xFDE
  6116                           plusw2	equ	0xFDB
  6117                           fsr2h	equ	0xFDA
  6118                           fsr2l	equ	0xFD9
  6119                           status	equ	0xFD8
  6120                           
  6121 ;; *************** function ___awmod *****************
  6122 ;; Defined at:
  6123 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  6124 ;; Parameters:    Size  Location     Type
  6125 ;;  dividend        2   15[COMRAM] int 
  6126 ;;  divisor         2   17[COMRAM] int 
  6127 ;; Auto vars:     Size  Location     Type
  6128 ;;  sign            1   20[COMRAM] unsigned char 
  6129 ;;  counter         1   19[COMRAM] unsigned char 
  6130 ;; Return value:  Size  Location     Type
  6131 ;;                  2   15[COMRAM] int 
  6132 ;; Registers used:
  6133 ;;		wreg, status,2, status,0
  6134 ;; Tracked objects:
  6135 ;;		On entry : 0/0
  6136 ;;		On exit  : 0/0
  6137 ;;		Unchanged: 0/0
  6138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6139 ;;      Params:         4       0       0       0       0       0       0
  6140 ;;      Locals:         2       0       0       0       0       0       0
  6141 ;;      Temps:          0       0       0       0       0       0       0
  6142 ;;      Totals:         6       0       0       0       0       0       0
  6143 ;;Total ram usage:        6 bytes
  6144 ;; Hardware stack levels used:    1
  6145 ;; Hardware stack levels required when called:    1
  6146 ;; This function calls:
  6147 ;;		Nothing
  6148 ;; This function is called by:
  6149 ;;		_running_display
  6150 ;; This function uses a non-reentrant model
  6151 ;;
  6152                           
  6153                           	psect	text13
  6154  001994                     __ptext13:
  6155                           	opt stack 0
  6156  001994                     ___awmod:
  6157                           	opt stack 28
  6158                           
  6159                           ;incstack = 0
  6160  001994  0E00               	movlw	0
  6161  001996  6E15               	movwf	___awmod@sign,c
  6162  001998  AE11               	btfss	___awmod@dividend+1,7,c
  6163  00199A  D006               	goto	l3838
  6164  00199C  6C10               	negf	___awmod@dividend,c
  6165  00199E  1E11               	comf	___awmod@dividend+1,f,c
  6166  0019A0  B0D8               	btfsc	status,0,c
  6167  0019A2  2A11               	incf	___awmod@dividend+1,f,c
  6168  0019A4  0E01               	movlw	1
  6169  0019A6  6E15               	movwf	___awmod@sign,c
  6170  0019A8                     l3838:
  6171  0019A8  AE13               	btfss	___awmod@divisor+1,7,c
  6172  0019AA  D004               	goto	l3842
  6173  0019AC  6C12               	negf	___awmod@divisor,c
  6174  0019AE  1E13               	comf	___awmod@divisor+1,f,c
  6175  0019B0  B0D8               	btfsc	status,0,c
  6176  0019B2  2A13               	incf	___awmod@divisor+1,f,c
  6177  0019B4                     l3842:
  6178  0019B4  5012               	movf	___awmod@divisor,w,c
  6179  0019B6  1013               	iorwf	___awmod@divisor+1,w,c
  6180  0019B8  B4D8               	btfsc	status,2,c
  6181  0019BA  D018               	goto	l3858
  6182  0019BC  0E01               	movlw	1
  6183  0019BE  6E14               	movwf	___awmod@counter,c
  6184  0019C0  D004               	goto	l3848
  6185  0019C2                     l3846:
  6186  0019C2  90D8               	bcf	status,0,c
  6187  0019C4  3612               	rlcf	___awmod@divisor,f,c
  6188  0019C6  3613               	rlcf	___awmod@divisor+1,f,c
  6189  0019C8  2A14               	incf	___awmod@counter,f,c
  6190  0019CA                     l3848:
  6191  0019CA  AE13               	btfss	___awmod@divisor+1,7,c
  6192  0019CC  D7FA               	goto	l3846
  6193  0019CE                     l3850:
  6194  0019CE  5012               	movf	___awmod@divisor,w,c
  6195  0019D0  5C10               	subwf	___awmod@dividend,w,c
  6196  0019D2  5013               	movf	___awmod@divisor+1,w,c
  6197  0019D4  5811               	subwfb	___awmod@dividend+1,w,c
  6198  0019D6  A0D8               	btfss	status,0,c
  6199  0019D8  D004               	goto	l3854
  6200  0019DA  5012               	movf	___awmod@divisor,w,c
  6201  0019DC  5E10               	subwf	___awmod@dividend,f,c
  6202  0019DE  5013               	movf	___awmod@divisor+1,w,c
  6203  0019E0  5A11               	subwfb	___awmod@dividend+1,f,c
  6204  0019E2                     l3854:
  6205  0019E2  90D8               	bcf	status,0,c
  6206  0019E4  3213               	rrcf	___awmod@divisor+1,f,c
  6207  0019E6  3212               	rrcf	___awmod@divisor,f,c
  6208  0019E8  2E14               	decfsz	___awmod@counter,f,c
  6209  0019EA  D7F1               	goto	l3850
  6210  0019EC                     l3858:
  6211  0019EC  5015               	movf	___awmod@sign,w,c
  6212  0019EE  B4D8               	btfsc	status,2,c
  6213  0019F0  D004               	goto	l3862
  6214  0019F2  6C10               	negf	___awmod@dividend,c
  6215  0019F4  1E11               	comf	___awmod@dividend+1,f,c
  6216  0019F6  B0D8               	btfsc	status,0,c
  6217  0019F8  2A11               	incf	___awmod@dividend+1,f,c
  6218  0019FA                     l3862:
  6219  0019FA  C010  F010         	movff	___awmod@dividend,?___awmod
  6220  0019FE  C011  F011         	movff	___awmod@dividend+1,?___awmod+1
  6221  001A02  0012               	return	
  6222  001A04                     __end_of___awmod:
  6223                           	opt stack 0
  6224                           tblptru	equ	0xFF8
  6225                           tblptrh	equ	0xFF7
  6226                           tblptrl	equ	0xFF6
  6227                           tablat	equ	0xFF5
  6228                           prodh	equ	0xFF4
  6229                           prodl	equ	0xFF3
  6230                           indf0	equ	0xFEF
  6231                           postinc0	equ	0xFEE
  6232                           fsr0h	equ	0xFEA
  6233                           fsr0l	equ	0xFE9
  6234                           wreg	equ	0xFE8
  6235                           indf1	equ	0xFE7
  6236                           postdec1	equ	0xFE5
  6237                           plusw1	equ	0xFE3
  6238                           fsr1h	equ	0xFE2
  6239                           fsr1l	equ	0xFE1
  6240                           indf2	equ	0xFDF
  6241                           postinc2	equ	0xFDE
  6242                           plusw2	equ	0xFDB
  6243                           fsr2h	equ	0xFDA
  6244                           fsr2l	equ	0xFD9
  6245                           status	equ	0xFD8
  6246                           
  6247 ;; *************** function _mcu_initialise *****************
  6248 ;; Defined at:
  6249 ;;		line 230 in file "main.c"
  6250 ;; Parameters:    Size  Location     Type
  6251 ;;		None
  6252 ;; Auto vars:     Size  Location     Type
  6253 ;;		None
  6254 ;; Return value:  Size  Location     Type
  6255 ;;                  1    wreg      void 
  6256 ;; Registers used:
  6257 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6258 ;; Tracked objects:
  6259 ;;		On entry : 0/0
  6260 ;;		On exit  : 0/0
  6261 ;;		Unchanged: 0/0
  6262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6263 ;;      Params:         0       0       0       0       0       0       0
  6264 ;;      Locals:         0       0       0       0       0       0       0
  6265 ;;      Temps:          0       0       0       0       0       0       0
  6266 ;;      Totals:         0       0       0       0       0       0       0
  6267 ;;Total ram usage:        0 bytes
  6268 ;; Hardware stack levels used:    1
  6269 ;; Hardware stack levels required when called:    2
  6270 ;; This function calls:
  6271 ;;		_Eeprom_Read_Byte
  6272 ;; This function is called by:
  6273 ;;		_main
  6274 ;; This function uses a non-reentrant model
  6275 ;;
  6276                           
  6277                           	psect	text14
  6278  001AA6                     __ptext14:
  6279                           	opt stack 0
  6280  001AA6                     _mcu_initialise:
  6281                           	opt stack 28
  6282                           
  6283                           ;main.c: 233: I2C_ADDR = Eeprom_Read_Byte(EEP_I2C_ADDR);
  6284                           
  6285                           ;incstack = 0
  6286  001AA6  0100               	movlb	0	; () banked
  6287  001AA8  51E0               	movf	_EEP_I2C_ADDR& (0+255),w,b
  6288  001AAA  EC4E  F00E         	call	_Eeprom_Read_Byte
  6289  001AAE  0100               	movlb	0	; () banked
  6290  001AB0  6FE2               	movwf	_I2C_ADDR& (0+255),b
  6291                           
  6292                           ; BSR set to: 0
  6293                           ;main.c: 234: Machine_ID = I2C_ADDR - 0x0F;
  6294  001AB2  0100               	movlb	0	; () banked
  6295  001AB4  51E2               	movf	_I2C_ADDR& (0+255),w,b
  6296  001AB6  0FF1               	addlw	241
  6297  001AB8  6E4F               	movwf	_Machine_ID,c
  6298                           
  6299                           ; BSR set to: 0
  6300                           ;main.c: 237: OSCCON = 0x60;
  6301  001ABA  0E60               	movlw	96
  6302  001ABC  6ED3               	movwf	4051,c	;volatile
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;main.c: 238: OSCTUNEbits.PLLEN = 0;
  6306  001ABE  9C9B               	bcf	3995,6,c	;volatile
  6307                           
  6308                           ; BSR set to: 0
  6309                           ;main.c: 240: TRISA = 0x00;
  6310  001AC0  0E00               	movlw	0
  6311  001AC2  6E92               	movwf	3986,c	;volatile
  6312                           
  6313                           ; BSR set to: 0
  6314                           ;main.c: 241: TRISB = 0x01;
  6315  001AC4  0E01               	movlw	1
  6316  001AC6  6E93               	movwf	3987,c	;volatile
  6317                           
  6318                           ; BSR set to: 0
  6319                           ;main.c: 242: TRISC = 0b00011000;
  6320  001AC8  0E18               	movlw	24
  6321  001ACA  6E94               	movwf	3988,c	;volatile
  6322                           
  6323                           ; BSR set to: 0
  6324                           ;main.c: 243: TRISD = 0x00;
  6325  001ACC  0E00               	movlw	0
  6326  001ACE  6E95               	movwf	3989,c	;volatile
  6327                           
  6328                           ; BSR set to: 0
  6329                           ;main.c: 244: LATC = 0b00011000;
  6330  001AD0  0E18               	movlw	24
  6331  001AD2  6E8B               	movwf	3979,c	;volatile
  6332                           
  6333                           ; BSR set to: 0
  6334                           ;main.c: 246: SSPADD = I2C_ADDR * 2;
  6335  001AD4  0100               	movlb	0	; () banked
  6336  001AD6  51E2               	movf	_I2C_ADDR& (0+255),w,b
  6337  001AD8  0D02               	mullw	2
  6338  001ADA  CFF3 FFC8          	movff	prodl,4040	;volatile
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;main.c: 247: SSPCON1 = 0x36;
  6342  001ADE  0E36               	movlw	54
  6343  001AE0  6EC6               	movwf	4038,c	;volatile
  6344                           
  6345                           ; BSR set to: 0
  6346                           ;main.c: 250: SSPSTAT = 0x00;
  6347  001AE2  0E00               	movlw	0
  6348  001AE4  6EC7               	movwf	4039,c	;volatile
  6349                           
  6350                           ; BSR set to: 0
  6351                           ;main.c: 251: SSPCON2 = 0x01;
  6352  001AE6  0E01               	movlw	1
  6353  001AE8  6EC5               	movwf	4037,c	;volatile
  6354                           
  6355                           ; BSR set to: 0
  6356                           ;main.c: 253: PIR1bits.SSPIF = 0;
  6357  001AEA  969E               	bcf	3998,3,c	;volatile
  6358                           
  6359                           ; BSR set to: 0
  6360                           ;main.c: 254: PIE1bits.SSPIE = 1;
  6361  001AEC  869D               	bsf	3997,3,c	;volatile
  6362                           
  6363                           ; BSR set to: 0
  6364                           ;main.c: 255: INTCONbits.GIE_GIEH = 1;
  6365  001AEE  8EF2               	bsf	intcon,7,c	;volatile
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;main.c: 256: INTCONbits.PEIE_GIEL = 1;
  6369  001AF0  8CF2               	bsf	intcon,6,c	;volatile
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;main.c: 257: INTCONbits.RBIE = 0;
  6373  001AF2  96F2               	bcf	intcon,3,c	;volatile
  6374                           
  6375                           ; BSR set to: 0
  6376  001AF4  0012               	return		;funcret
  6377  001AF6                     __end_of_mcu_initialise:
  6378                           	opt stack 0
  6379                           tblptru	equ	0xFF8
  6380                           tblptrh	equ	0xFF7
  6381                           tblptrl	equ	0xFF6
  6382                           tablat	equ	0xFF5
  6383                           prodh	equ	0xFF4
  6384                           prodl	equ	0xFF3
  6385                           intcon	equ	0xFF2
  6386                           indf0	equ	0xFEF
  6387                           postinc0	equ	0xFEE
  6388                           fsr0h	equ	0xFEA
  6389                           fsr0l	equ	0xFE9
  6390                           wreg	equ	0xFE8
  6391                           indf1	equ	0xFE7
  6392                           postdec1	equ	0xFE5
  6393                           plusw1	equ	0xFE3
  6394                           fsr1h	equ	0xFE2
  6395                           fsr1l	equ	0xFE1
  6396                           indf2	equ	0xFDF
  6397                           postinc2	equ	0xFDE
  6398                           plusw2	equ	0xFDB
  6399                           fsr2h	equ	0xFDA
  6400                           fsr2l	equ	0xFD9
  6401                           status	equ	0xFD8
  6402                           
  6403 ;; *************** function _Eeprom_Read_Byte *****************
  6404 ;; Defined at:
  6405 ;;		line 20 in file "eeprom.h"
  6406 ;; Parameters:    Size  Location     Type
  6407 ;;  address         1    wreg     unsigned char 
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;  address         1   15[COMRAM] unsigned char 
  6410 ;; Return value:  Size  Location     Type
  6411 ;;                  1    wreg      unsigned char 
  6412 ;; Registers used:
  6413 ;;		wreg, status,2
  6414 ;; Tracked objects:
  6415 ;;		On entry : 0/0
  6416 ;;		On exit  : 0/0
  6417 ;;		Unchanged: 0/0
  6418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6419 ;;      Params:         0       0       0       0       0       0       0
  6420 ;;      Locals:         1       0       0       0       0       0       0
  6421 ;;      Temps:          0       0       0       0       0       0       0
  6422 ;;      Totals:         1       0       0       0       0       0       0
  6423 ;;Total ram usage:        1 bytes
  6424 ;; Hardware stack levels used:    1
  6425 ;; Hardware stack levels required when called:    1
  6426 ;; This function calls:
  6427 ;;		Nothing
  6428 ;; This function is called by:
  6429 ;;		_mcu_initialise
  6430 ;; This function uses a non-reentrant model
  6431 ;;
  6432                           
  6433                           	psect	text15
  6434  001C9C                     __ptext15:
  6435                           	opt stack 0
  6436  001C9C                     _Eeprom_Read_Byte:
  6437                           	opt stack 28
  6438                           
  6439                           ; BSR set to: 0
  6440                           ;incstack = 0
  6441                           ;Eeprom_Read_Byte@address stored from wreg
  6442  001C9C  6E10               	movwf	Eeprom_Read_Byte@address,c
  6443                           
  6444                           ;eeprom.h: 24: EEADR = (unsigned char)address;
  6445  001C9E  C010  FFA9         	movff	Eeprom_Read_Byte@address,4009	;volatile
  6446                           
  6447                           ;eeprom.h: 26: EECON1bits.EEPGD = 0;
  6448  001CA2  9EA6               	bcf	4006,7,c	;volatile
  6449                           
  6450                           ;eeprom.h: 27: EECON1bits.CFGS = 0;
  6451  001CA4  9CA6               	bcf	4006,6,c	;volatile
  6452                           
  6453                           ;eeprom.h: 28: EECON1bits.RD = 1;
  6454  001CA6  80A6               	bsf	4006,0,c	;volatile
  6455  001CA8                     l149:
  6456  001CA8  B0A6               	btfsc	4006,0,c	;volatile
  6457  001CAA  D7FE               	goto	l149
  6458                           
  6459                           ;eeprom.h: 34: return EEDATA;
  6460  001CAC  50A8               	movf	4008,w,c	;volatile
  6461  001CAE  0012               	return		;funcret
  6462  001CB0                     __end_of_Eeprom_Read_Byte:
  6463                           	opt stack 0
  6464                           tblptru	equ	0xFF8
  6465                           tblptrh	equ	0xFF7
  6466                           tblptrl	equ	0xFF6
  6467                           tablat	equ	0xFF5
  6468                           prodh	equ	0xFF4
  6469                           prodl	equ	0xFF3
  6470                           intcon	equ	0xFF2
  6471                           indf0	equ	0xFEF
  6472                           postinc0	equ	0xFEE
  6473                           fsr0h	equ	0xFEA
  6474                           fsr0l	equ	0xFE9
  6475                           wreg	equ	0xFE8
  6476                           indf1	equ	0xFE7
  6477                           postdec1	equ	0xFE5
  6478                           plusw1	equ	0xFE3
  6479                           fsr1h	equ	0xFE2
  6480                           fsr1l	equ	0xFE1
  6481                           indf2	equ	0xFDF
  6482                           postinc2	equ	0xFDE
  6483                           plusw2	equ	0xFDB
  6484                           fsr2h	equ	0xFDA
  6485                           fsr2l	equ	0xFD9
  6486                           status	equ	0xFD8
  6487                           
  6488 ;; *************** function _load_i2c_registers *****************
  6489 ;; Defined at:
  6490 ;;		line 292 in file "main.c"
  6491 ;; Parameters:    Size  Location     Type
  6492 ;;		None
  6493 ;; Auto vars:     Size  Location     Type
  6494 ;;  i               2   29[COMRAM] int 
  6495 ;;  i               2   33[COMRAM] int 
  6496 ;;  i               2   31[COMRAM] int 
  6497 ;;  checksum        2   27[COMRAM] int 
  6498 ;; Return value:  Size  Location     Type
  6499 ;;                  1    wreg      void 
  6500 ;; Registers used:
  6501 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6502 ;; Tracked objects:
  6503 ;;		On entry : 0/0
  6504 ;;		On exit  : 0/0
  6505 ;;		Unchanged: 0/0
  6506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6507 ;;      Params:         0       0       0       0       0       0       0
  6508 ;;      Locals:         8       0       0       0       0       0       0
  6509 ;;      Temps:          4       0       0       0       0       0       0
  6510 ;;      Totals:        12       0       0       0       0       0       0
  6511 ;;Total ram usage:       12 bytes
  6512 ;; Hardware stack levels used:    1
  6513 ;; Hardware stack levels required when called:    2
  6514 ;; This function calls:
  6515 ;;		___awdiv
  6516 ;; This function is called by:
  6517 ;;		_main
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           	psect	text16
  6522  00160C                     __ptext16:
  6523                           	opt stack 0
  6524  00160C                     _load_i2c_registers:
  6525                           	opt stack 28
  6526                           
  6527                           ;main.c: 301: for (int i = 0; i < 9; i++)
  6528                           
  6529                           ;incstack = 0
  6530  00160C  0E00               	movlw	0
  6531  00160E  6E21               	movwf	load_i2c_registers@i+1,c
  6532  001610  0E00               	movlw	0
  6533  001612  6E20               	movwf	load_i2c_registers@i,c
  6534  001614                     l4216:
  6535  001614  BE21               	btfsc	load_i2c_registers@i+1,7,c
  6536  001616  D006               	goto	l4220
  6537  001618  5021               	movf	load_i2c_registers@i+1,w,c
  6538  00161A  E115               	bnz	l4226
  6539  00161C  0E09               	movlw	9
  6540  00161E  5C20               	subwf	load_i2c_registers@i,w,c
  6541  001620  B0D8               	btfsc	status,0,c
  6542  001622  D011               	goto	l4226
  6543  001624                     l4220:
  6544                           
  6545                           ;main.c: 302: i2c_r_reg[i] = current_user[i];
  6546  001624  0ED7               	movlw	low _current_user
  6547  001626  2420               	addwf	load_i2c_registers@i,w,c
  6548  001628  6ED9               	movwf	fsr2l,c
  6549  00162A  0E00               	movlw	high _current_user
  6550  00162C  2021               	addwfc	load_i2c_registers@i+1,w,c
  6551  00162E  6EDA               	movwf	fsr2h,c
  6552  001630  0E60               	movlw	low _i2c_r_reg
  6553  001632  2420               	addwf	load_i2c_registers@i,w,c
  6554  001634  6EE1               	movwf	fsr1l,c
  6555  001636  0E00               	movlw	high _i2c_r_reg
  6556  001638  2021               	addwfc	load_i2c_registers@i+1,w,c
  6557  00163A  6EE2               	movwf	fsr1h,c
  6558  00163C  CFDF FFE7          	movff	indf2,indf1
  6559  001640  4A20               	infsnz	load_i2c_registers@i,f,c
  6560  001642  2A21               	incf	load_i2c_registers@i+1,f,c
  6561  001644  D7E7               	goto	l4216
  6562  001646                     l4226:
  6563                           
  6564                           ;main.c: 304: for (int i = 9; i < 18; i++)
  6565  001646  0E00               	movlw	0
  6566  001648  6E23               	movwf	load_i2c_registers@i_836+1,c
  6567  00164A  0E09               	movlw	9
  6568  00164C  6E22               	movwf	load_i2c_registers@i_836,c
  6569  00164E                     l4228:
  6570  00164E  BE23               	btfsc	load_i2c_registers@i_836+1,7,c
  6571  001650  D006               	goto	l4232
  6572  001652  5023               	movf	load_i2c_registers@i_836+1,w,c
  6573  001654  E121               	bnz	l4238
  6574  001656  0E12               	movlw	18
  6575  001658  5C22               	subwf	load_i2c_registers@i_836,w,c
  6576  00165A  B0D8               	btfsc	status,0,c
  6577  00165C  D01D               	goto	l4238
  6578  00165E                     l4232:
  6579                           
  6580                           ;main.c: 305: i2c_r_reg[i] = current_pin[i - 9];
  6581  00165E  0EF7               	movlw	247
  6582  001660  6E18               	movwf	??_load_i2c_registers& (0+255),c
  6583  001662  0EFF               	movlw	255
  6584  001664  6E19               	movwf	(??_load_i2c_registers+1)& (0+255),c
  6585  001666  C022  F01A         	movff	load_i2c_registers@i_836,??_load_i2c_registers+2
  6586  00166A  C023  F01B         	movff	load_i2c_registers@i_836+1,??_load_i2c_registers+3
  6587  00166E  5018               	movf	??_load_i2c_registers,w,c
  6588  001670  261A               	addwf	??_load_i2c_registers+2,f,c
  6589  001672  5019               	movf	??_load_i2c_registers+1,w,c
  6590  001674  221B               	addwfc	??_load_i2c_registers+3,f,c
  6591  001676  0ECE               	movlw	low _current_pin
  6592  001678  241A               	addwf	??_load_i2c_registers+2,w,c
  6593  00167A  6ED9               	movwf	fsr2l,c
  6594  00167C  0E00               	movlw	high _current_pin
  6595  00167E  201B               	addwfc	??_load_i2c_registers+3,w,c
  6596  001680  6EDA               	movwf	fsr2h,c
  6597  001682  0E60               	movlw	low _i2c_r_reg
  6598  001684  2422               	addwf	load_i2c_registers@i_836,w,c
  6599  001686  6EE1               	movwf	fsr1l,c
  6600  001688  0E00               	movlw	high _i2c_r_reg
  6601  00168A  2023               	addwfc	load_i2c_registers@i_836+1,w,c
  6602  00168C  6EE2               	movwf	fsr1h,c
  6603  00168E  CFDF FFE7          	movff	indf2,indf1
  6604  001692  4A22               	infsnz	load_i2c_registers@i_836,f,c
  6605  001694  2A23               	incf	load_i2c_registers@i_836+1,f,c
  6606  001696  D7DB               	goto	l4228
  6607  001698                     l4238:
  6608                           
  6609                           ;main.c: 308: int checksum = 0x00;
  6610  001698  0E00               	movlw	0
  6611  00169A  6E1D               	movwf	load_i2c_registers@checksum+1,c
  6612  00169C  0E00               	movlw	0
  6613  00169E  6E1C               	movwf	load_i2c_registers@checksum,c
  6614                           
  6615                           ;main.c: 309: for (int i = 0; i < 31; i++)
  6616  0016A0  0E00               	movlw	0
  6617  0016A2  6E1F               	movwf	load_i2c_registers@i_838+1,c
  6618  0016A4  0E00               	movlw	0
  6619  0016A6  6E1E               	movwf	load_i2c_registers@i_838,c
  6620  0016A8                     l4240:
  6621  0016A8  BE1F               	btfsc	load_i2c_registers@i_838+1,7,c
  6622  0016AA  D006               	goto	l4244
  6623  0016AC  501F               	movf	load_i2c_registers@i_838+1,w,c
  6624  0016AE  E113               	bnz	l4250
  6625  0016B0  0E1F               	movlw	31
  6626  0016B2  5C1E               	subwf	load_i2c_registers@i_838,w,c
  6627  0016B4  B0D8               	btfsc	status,0,c
  6628  0016B6  D00F               	goto	l4250
  6629  0016B8                     l4244:
  6630                           
  6631                           ;main.c: 310: {
  6632                           ;main.c: 311: checksum += i2c_r_reg[i];
  6633  0016B8  0E60               	movlw	low _i2c_r_reg
  6634  0016BA  241E               	addwf	load_i2c_registers@i_838,w,c
  6635  0016BC  6ED9               	movwf	fsr2l,c
  6636  0016BE  0E00               	movlw	high _i2c_r_reg
  6637  0016C0  201F               	addwfc	load_i2c_registers@i_838+1,w,c
  6638  0016C2  6EDA               	movwf	fsr2h,c
  6639  0016C4  50DF               	movf	indf2,w,c
  6640  0016C6  6E18               	movwf	??_load_i2c_registers& (0+255),c
  6641  0016C8  5018               	movf	??_load_i2c_registers,w,c
  6642  0016CA  261C               	addwf	load_i2c_registers@checksum,f,c
  6643  0016CC  0E00               	movlw	0
  6644  0016CE  221D               	addwfc	load_i2c_registers@checksum+1,f,c
  6645  0016D0  4A1E               	infsnz	load_i2c_registers@i_838,f,c
  6646  0016D2  2A1F               	incf	load_i2c_registers@i_838+1,f,c
  6647  0016D4  D7E9               	goto	l4240
  6648  0016D6                     l4250:
  6649                           
  6650                           ;main.c: 312: }
  6651                           ;main.c: 313: checksum /= 32;
  6652  0016D6  C01C  F010         	movff	load_i2c_registers@checksum,___awdiv@dividend
  6653  0016DA  C01D  F011         	movff	load_i2c_registers@checksum+1,___awdiv@dividend+1
  6654  0016DE  0E00               	movlw	0
  6655  0016E0  6E13               	movwf	___awdiv@divisor+1,c
  6656  0016E2  0E20               	movlw	32
  6657  0016E4  6E12               	movwf	___awdiv@divisor,c
  6658  0016E6  EC13  F00C         	call	___awdiv	;wreg free
  6659  0016EA  C010  F01C         	movff	?___awdiv,load_i2c_registers@checksum
  6660  0016EE  C011  F01D         	movff	?___awdiv+1,load_i2c_registers@checksum+1
  6661                           
  6662                           ;main.c: 314: i2c_r_reg[31] = checksum;
  6663  0016F2  C01C  F07F         	movff	load_i2c_registers@checksum,_i2c_r_reg+31	;volatile
  6664  0016F6  0012               	return		;funcret
  6665  0016F8                     __end_of_load_i2c_registers:
  6666                           	opt stack 0
  6667                           tblptru	equ	0xFF8
  6668                           tblptrh	equ	0xFF7
  6669                           tblptrl	equ	0xFF6
  6670                           tablat	equ	0xFF5
  6671                           prodh	equ	0xFF4
  6672                           prodl	equ	0xFF3
  6673                           intcon	equ	0xFF2
  6674                           indf0	equ	0xFEF
  6675                           postinc0	equ	0xFEE
  6676                           fsr0h	equ	0xFEA
  6677                           fsr0l	equ	0xFE9
  6678                           wreg	equ	0xFE8
  6679                           indf1	equ	0xFE7
  6680                           postdec1	equ	0xFE5
  6681                           plusw1	equ	0xFE3
  6682                           fsr1h	equ	0xFE2
  6683                           fsr1l	equ	0xFE1
  6684                           indf2	equ	0xFDF
  6685                           postinc2	equ	0xFDE
  6686                           plusw2	equ	0xFDB
  6687                           fsr2h	equ	0xFDA
  6688                           fsr2l	equ	0xFD9
  6689                           status	equ	0xFD8
  6690                           
  6691 ;; *************** function ___awdiv *****************
  6692 ;; Defined at:
  6693 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  6694 ;; Parameters:    Size  Location     Type
  6695 ;;  dividend        2   15[COMRAM] int 
  6696 ;;  divisor         2   17[COMRAM] int 
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;  quotient        2   21[COMRAM] int 
  6699 ;;  sign            1   20[COMRAM] unsigned char 
  6700 ;;  counter         1   19[COMRAM] unsigned char 
  6701 ;; Return value:  Size  Location     Type
  6702 ;;                  2   15[COMRAM] int 
  6703 ;; Registers used:
  6704 ;;		wreg, status,2, status,0
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6710 ;;      Params:         4       0       0       0       0       0       0
  6711 ;;      Locals:         4       0       0       0       0       0       0
  6712 ;;      Temps:          0       0       0       0       0       0       0
  6713 ;;      Totals:         8       0       0       0       0       0       0
  6714 ;;Total ram usage:        8 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:    1
  6717 ;; This function calls:
  6718 ;;		Nothing
  6719 ;; This function is called by:
  6720 ;;		_load_i2c_registers
  6721 ;;		_start_routine
  6722 ;;		_running_display
  6723 ;; This function uses a non-reentrant model
  6724 ;;
  6725                           
  6726                           	psect	text17
  6727  001826                     __ptext17:
  6728                           	opt stack 0
  6729  001826                     ___awdiv:
  6730                           	opt stack 28
  6731                           
  6732                           ;incstack = 0
  6733  001826  0E00               	movlw	0
  6734  001828  6E15               	movwf	___awdiv@sign,c
  6735  00182A  AE13               	btfss	___awdiv@divisor+1,7,c
  6736  00182C  D006               	goto	l3794
  6737  00182E  6C12               	negf	___awdiv@divisor,c
  6738  001830  1E13               	comf	___awdiv@divisor+1,f,c
  6739  001832  B0D8               	btfsc	status,0,c
  6740  001834  2A13               	incf	___awdiv@divisor+1,f,c
  6741  001836  0E01               	movlw	1
  6742  001838  6E15               	movwf	___awdiv@sign,c
  6743  00183A                     l3794:
  6744  00183A  AE11               	btfss	___awdiv@dividend+1,7,c
  6745  00183C  D006               	goto	l3800
  6746  00183E  6C10               	negf	___awdiv@dividend,c
  6747  001840  1E11               	comf	___awdiv@dividend+1,f,c
  6748  001842  B0D8               	btfsc	status,0,c
  6749  001844  2A11               	incf	___awdiv@dividend+1,f,c
  6750  001846  0E01               	movlw	1
  6751  001848  1A15               	xorwf	___awdiv@sign,f,c
  6752  00184A                     l3800:
  6753  00184A  0E00               	movlw	0
  6754  00184C  6E17               	movwf	___awdiv@quotient+1,c
  6755  00184E  0E00               	movlw	0
  6756  001850  6E16               	movwf	___awdiv@quotient,c
  6757  001852  5012               	movf	___awdiv@divisor,w,c
  6758  001854  1013               	iorwf	___awdiv@divisor+1,w,c
  6759  001856  B4D8               	btfsc	status,2,c
  6760  001858  D01C               	goto	l3822
  6761  00185A  0E01               	movlw	1
  6762  00185C  6E14               	movwf	___awdiv@counter,c
  6763  00185E  D004               	goto	l3808
  6764  001860                     l3806:
  6765  001860  90D8               	bcf	status,0,c
  6766  001862  3612               	rlcf	___awdiv@divisor,f,c
  6767  001864  3613               	rlcf	___awdiv@divisor+1,f,c
  6768  001866  2A14               	incf	___awdiv@counter,f,c
  6769  001868                     l3808:
  6770  001868  AE13               	btfss	___awdiv@divisor+1,7,c
  6771  00186A  D7FA               	goto	l3806
  6772  00186C                     l3810:
  6773  00186C  90D8               	bcf	status,0,c
  6774  00186E  3616               	rlcf	___awdiv@quotient,f,c
  6775  001870  3617               	rlcf	___awdiv@quotient+1,f,c
  6776  001872  5012               	movf	___awdiv@divisor,w,c
  6777  001874  5C10               	subwf	___awdiv@dividend,w,c
  6778  001876  5013               	movf	___awdiv@divisor+1,w,c
  6779  001878  5811               	subwfb	___awdiv@dividend+1,w,c
  6780  00187A  A0D8               	btfss	status,0,c
  6781  00187C  D005               	goto	l3818
  6782  00187E  5012               	movf	___awdiv@divisor,w,c
  6783  001880  5E10               	subwf	___awdiv@dividend,f,c
  6784  001882  5013               	movf	___awdiv@divisor+1,w,c
  6785  001884  5A11               	subwfb	___awdiv@dividend+1,f,c
  6786  001886  8016               	bsf	___awdiv@quotient,0,c
  6787  001888                     l3818:
  6788  001888  90D8               	bcf	status,0,c
  6789  00188A  3213               	rrcf	___awdiv@divisor+1,f,c
  6790  00188C  3212               	rrcf	___awdiv@divisor,f,c
  6791  00188E  2E14               	decfsz	___awdiv@counter,f,c
  6792  001890  D7ED               	goto	l3810
  6793  001892                     l3822:
  6794  001892  5015               	movf	___awdiv@sign,w,c
  6795  001894  B4D8               	btfsc	status,2,c
  6796  001896  D004               	goto	l3826
  6797  001898  6C16               	negf	___awdiv@quotient,c
  6798  00189A  1E17               	comf	___awdiv@quotient+1,f,c
  6799  00189C  B0D8               	btfsc	status,0,c
  6800  00189E  2A17               	incf	___awdiv@quotient+1,f,c
  6801  0018A0                     l3826:
  6802  0018A0  C016  F010         	movff	___awdiv@quotient,?___awdiv
  6803  0018A4  C017  F011         	movff	___awdiv@quotient+1,?___awdiv+1
  6804  0018A8  0012               	return	
  6805  0018AA                     __end_of___awdiv:
  6806                           	opt stack 0
  6807                           tblptru	equ	0xFF8
  6808                           tblptrh	equ	0xFF7
  6809                           tblptrl	equ	0xFF6
  6810                           tablat	equ	0xFF5
  6811                           prodh	equ	0xFF4
  6812                           prodl	equ	0xFF3
  6813                           intcon	equ	0xFF2
  6814                           indf0	equ	0xFEF
  6815                           postinc0	equ	0xFEE
  6816                           fsr0h	equ	0xFEA
  6817                           fsr0l	equ	0xFE9
  6818                           wreg	equ	0xFE8
  6819                           indf1	equ	0xFE7
  6820                           postdec1	equ	0xFE5
  6821                           plusw1	equ	0xFE3
  6822                           fsr1h	equ	0xFE2
  6823                           fsr1l	equ	0xFE1
  6824                           indf2	equ	0xFDF
  6825                           postinc2	equ	0xFDE
  6826                           plusw2	equ	0xFDB
  6827                           fsr2h	equ	0xFDA
  6828                           fsr2l	equ	0xFD9
  6829                           status	equ	0xFD8
  6830                           
  6831 ;; *************** function _Lcd_Init *****************
  6832 ;; Defined at:
  6833 ;;		line 76 in file "lcd.h"
  6834 ;; Parameters:    Size  Location     Type
  6835 ;;		None
  6836 ;; Auto vars:     Size  Location     Type
  6837 ;;		None
  6838 ;; Return value:  Size  Location     Type
  6839 ;;                  1    wreg      void 
  6840 ;; Registers used:
  6841 ;;		wreg, status,2, cstack
  6842 ;; Tracked objects:
  6843 ;;		On entry : 0/0
  6844 ;;		On exit  : 0/0
  6845 ;;		Unchanged: 0/0
  6846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6847 ;;      Params:         0       0       0       0       0       0       0
  6848 ;;      Locals:         0       0       0       0       0       0       0
  6849 ;;      Temps:          1       0       0       0       0       0       0
  6850 ;;      Totals:         1       0       0       0       0       0       0
  6851 ;;Total ram usage:        1 bytes
  6852 ;; Hardware stack levels used:    1
  6853 ;; Hardware stack levels required when called:    3
  6854 ;; This function calls:
  6855 ;;		_Lcd_Cmd
  6856 ;;		_Lcd_Port
  6857 ;; This function is called by:
  6858 ;;		_main
  6859 ;; This function uses a non-reentrant model
  6860 ;;
  6861                           
  6862                           	psect	text18
  6863  0018AA                     __ptext18:
  6864                           	opt stack 0
  6865  0018AA                     _Lcd_Init:
  6866                           	opt stack 27
  6867                           
  6868                           ;lcd.h: 78: Lcd_Port(0x00);
  6869                           
  6870                           ;incstack = 0
  6871  0018AA  0E00               	movlw	0
  6872  0018AC  ECEA  F00D         	call	_Lcd_Port
  6873                           
  6874                           ;lcd.h: 79: _delay((unsigned long)((20)*(16000000/4000.0)));
  6875  0018B0  0E68               	movlw	104
  6876  0018B2  6E12               	movwf	??_Lcd_Init& (0+255),c
  6877  0018B4  0EE4               	movlw	228
  6878  0018B6                     u4797:
  6879  0018B6  2EE8               	decfsz	wreg,f,c
  6880  0018B8  D7FE               	goto	u4797
  6881  0018BA  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
  6882  0018BC  D7FC               	goto	u4797
  6883  0018BE  F000 F000          	nop2	
  6884                           
  6885                           ;lcd.h: 80: Lcd_Cmd(0x03);
  6886  0018C2  0E03               	movlw	3
  6887  0018C4  EC42  F00E         	call	_Lcd_Cmd
  6888                           
  6889                           ;lcd.h: 81: _delay((unsigned long)((5)*(16000000/4000.0)));
  6890  0018C8  0E1A               	movlw	26
  6891  0018CA  6E12               	movwf	??_Lcd_Init& (0+255),c
  6892  0018CC  0EF8               	movlw	248
  6893  0018CE                     u4807:
  6894  0018CE  2EE8               	decfsz	wreg,f,c
  6895  0018D0  D7FE               	goto	u4807
  6896  0018D2  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
  6897  0018D4  D7FC               	goto	u4807
  6898  0018D6  F000 F000          	nop2	
  6899                           
  6900                           ;lcd.h: 82: Lcd_Cmd(0x03);
  6901  0018DA  0E03               	movlw	3
  6902  0018DC  EC42  F00E         	call	_Lcd_Cmd
  6903                           
  6904                           ;lcd.h: 83: _delay((unsigned long)((11)*(16000000/4000.0)));
  6905  0018E0  0E3A               	movlw	58
  6906  0018E2  6E12               	movwf	??_Lcd_Init& (0+255),c
  6907  0018E4  0E23               	movlw	35
  6908  0018E6                     u4817:
  6909  0018E6  2EE8               	decfsz	wreg,f,c
  6910  0018E8  D7FE               	goto	u4817
  6911  0018EA  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
  6912  0018EC  D7FC               	goto	u4817
  6913  0018EE  F000               	nop	
  6914                           
  6915                           ;lcd.h: 84: Lcd_Cmd(0x03);
  6916  0018F0  0E03               	movlw	3
  6917  0018F2  EC42  F00E         	call	_Lcd_Cmd
  6918                           
  6919                           ;lcd.h: 86: Lcd_Cmd(0x02);
  6920  0018F6  0E02               	movlw	2
  6921  0018F8  EC42  F00E         	call	_Lcd_Cmd
  6922                           
  6923                           ;lcd.h: 87: Lcd_Cmd(0x02);
  6924  0018FC  0E02               	movlw	2
  6925  0018FE  EC42  F00E         	call	_Lcd_Cmd
  6926                           
  6927                           ;lcd.h: 88: Lcd_Cmd(0x08);
  6928  001902  0E08               	movlw	8
  6929  001904  EC42  F00E         	call	_Lcd_Cmd
  6930                           
  6931                           ;lcd.h: 89: Lcd_Cmd(0x00);
  6932  001908  0E00               	movlw	0
  6933  00190A  EC42  F00E         	call	_Lcd_Cmd
  6934                           
  6935                           ;lcd.h: 90: Lcd_Cmd(0x0C);
  6936  00190E  0E0C               	movlw	12
  6937  001910  EC42  F00E         	call	_Lcd_Cmd
  6938                           
  6939                           ;lcd.h: 91: Lcd_Cmd(0x00);
  6940  001914  0E00               	movlw	0
  6941  001916  EC42  F00E         	call	_Lcd_Cmd
  6942                           
  6943                           ;lcd.h: 92: Lcd_Cmd(0x06);
  6944  00191A  0E06               	movlw	6
  6945  00191C  EC42  F00E         	call	_Lcd_Cmd
  6946  001920  0012               	return		;funcret
  6947  001922                     __end_of_Lcd_Init:
  6948                           	opt stack 0
  6949                           tblptru	equ	0xFF8
  6950                           tblptrh	equ	0xFF7
  6951                           tblptrl	equ	0xFF6
  6952                           tablat	equ	0xFF5
  6953                           prodh	equ	0xFF4
  6954                           prodl	equ	0xFF3
  6955                           intcon	equ	0xFF2
  6956                           indf0	equ	0xFEF
  6957                           postinc0	equ	0xFEE
  6958                           fsr0h	equ	0xFEA
  6959                           fsr0l	equ	0xFE9
  6960                           wreg	equ	0xFE8
  6961                           indf1	equ	0xFE7
  6962                           postdec1	equ	0xFE5
  6963                           plusw1	equ	0xFE3
  6964                           fsr1h	equ	0xFE2
  6965                           fsr1l	equ	0xFE1
  6966                           indf2	equ	0xFDF
  6967                           postinc2	equ	0xFDE
  6968                           plusw2	equ	0xFDB
  6969                           fsr2h	equ	0xFDA
  6970                           fsr2l	equ	0xFD9
  6971                           status	equ	0xFD8
  6972                           
  6973 ;; *************** function _Lcd_Cmd *****************
  6974 ;; Defined at:
  6975 ;;		line 38 in file "lcd.h"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;  a               1    wreg     unsigned char 
  6978 ;; Auto vars:     Size  Location     Type
  6979 ;;  a               1   16[COMRAM] unsigned char 
  6980 ;; Return value:  Size  Location     Type
  6981 ;;                  1    wreg      void 
  6982 ;; Registers used:
  6983 ;;		wreg, status,2, cstack
  6984 ;; Tracked objects:
  6985 ;;		On entry : 0/0
  6986 ;;		On exit  : 0/0
  6987 ;;		Unchanged: 0/0
  6988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6989 ;;      Params:         0       0       0       0       0       0       0
  6990 ;;      Locals:         1       0       0       0       0       0       0
  6991 ;;      Temps:          0       0       0       0       0       0       0
  6992 ;;      Totals:         1       0       0       0       0       0       0
  6993 ;;Total ram usage:        1 bytes
  6994 ;; Hardware stack levels used:    1
  6995 ;; Hardware stack levels required when called:    2
  6996 ;; This function calls:
  6997 ;;		_Lcd_Port
  6998 ;; This function is called by:
  6999 ;;		_Lcd_Clear
  7000 ;;		_Lcd_Set_Cursor
  7001 ;;		_Lcd_Init
  7002 ;;		_Lcd_Shift_Right
  7003 ;;		_Lcd_Shift_Left
  7004 ;; This function uses a non-reentrant model
  7005 ;;
  7006                           
  7007                           	psect	text19
  7008  001C84                     __ptext19:
  7009                           	opt stack 0
  7010  001C84                     _Lcd_Cmd:
  7011                           	opt stack 25
  7012                           
  7013                           ;incstack = 0
  7014                           ;Lcd_Cmd@a stored from wreg
  7015  001C84  6E11               	movwf	Lcd_Cmd@a,c
  7016                           
  7017                           ;lcd.h: 40: PORTDbits.RD5 = 0;
  7018  001C86  9A83               	bcf	3971,5,c	;volatile
  7019                           
  7020                           ;lcd.h: 41: Lcd_Port(a);
  7021  001C88  5011               	movf	Lcd_Cmd@a,w,c
  7022  001C8A  ECEA  F00D         	call	_Lcd_Port
  7023                           
  7024                           ;lcd.h: 42: PORTDbits.RD4 = 1;
  7025  001C8E  8883               	bsf	3971,4,c	;volatile
  7026                           
  7027                           ;lcd.h: 44: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7028  001C90  0EC8               	movlw	200
  7029  001C92                     u4827:
  7030  001C92  F000               	nop	
  7031  001C94  2EE8               	decfsz	wreg,f,c
  7032  001C96  D7FD               	goto	u4827
  7033                           
  7034                           ;lcd.h: 45: PORTDbits.RD4 = 0;
  7035  001C98  9883               	bcf	3971,4,c	;volatile
  7036  001C9A  0012               	return		;funcret
  7037  001C9C                     __end_of_Lcd_Cmd:
  7038                           	opt stack 0
  7039                           tblptru	equ	0xFF8
  7040                           tblptrh	equ	0xFF7
  7041                           tblptrl	equ	0xFF6
  7042                           tablat	equ	0xFF5
  7043                           prodh	equ	0xFF4
  7044                           prodl	equ	0xFF3
  7045                           intcon	equ	0xFF2
  7046                           indf0	equ	0xFEF
  7047                           postinc0	equ	0xFEE
  7048                           fsr0h	equ	0xFEA
  7049                           fsr0l	equ	0xFE9
  7050                           wreg	equ	0xFE8
  7051                           indf1	equ	0xFE7
  7052                           postdec1	equ	0xFE5
  7053                           plusw1	equ	0xFE3
  7054                           fsr1h	equ	0xFE2
  7055                           fsr1l	equ	0xFE1
  7056                           indf2	equ	0xFDF
  7057                           postinc2	equ	0xFDE
  7058                           plusw2	equ	0xFDB
  7059                           fsr2h	equ	0xFDA
  7060                           fsr2l	equ	0xFD9
  7061                           status	equ	0xFD8
  7062                           
  7063 ;; *************** function _Lcd_Port *****************
  7064 ;; Defined at:
  7065 ;;		line 16 in file "lcd.h"
  7066 ;; Parameters:    Size  Location     Type
  7067 ;;  a               1    wreg     unsigned char 
  7068 ;; Auto vars:     Size  Location     Type
  7069 ;;  a               1   15[COMRAM] unsigned char 
  7070 ;; Return value:  Size  Location     Type
  7071 ;;                  1    wreg      void 
  7072 ;; Registers used:
  7073 ;;		wreg
  7074 ;; Tracked objects:
  7075 ;;		On entry : 0/0
  7076 ;;		On exit  : 0/0
  7077 ;;		Unchanged: 0/0
  7078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7079 ;;      Params:         0       0       0       0       0       0       0
  7080 ;;      Locals:         1       0       0       0       0       0       0
  7081 ;;      Temps:          0       0       0       0       0       0       0
  7082 ;;      Totals:         1       0       0       0       0       0       0
  7083 ;;Total ram usage:        1 bytes
  7084 ;; Hardware stack levels used:    1
  7085 ;; Hardware stack levels required when called:    1
  7086 ;; This function calls:
  7087 ;;		Nothing
  7088 ;; This function is called by:
  7089 ;;		_Lcd_Cmd
  7090 ;;		_Lcd_Init
  7091 ;;		_Lcd_Write_Char
  7092 ;; This function uses a non-reentrant model
  7093 ;;
  7094                           
  7095                           	psect	text20
  7096  001BD4                     __ptext20:
  7097                           	opt stack 0
  7098  001BD4                     _Lcd_Port:
  7099                           	opt stack 25
  7100                           
  7101                           ;incstack = 0
  7102                           ;Lcd_Port@a stored from wreg
  7103  001BD4  6E10               	movwf	Lcd_Port@a,c
  7104                           
  7105                           ;lcd.h: 18: if(a & 1)
  7106  001BD6  A010               	btfss	Lcd_Port@a,0,c
  7107  001BD8  D002               	goto	l71
  7108                           
  7109                           ;lcd.h: 19: PORTDbits.RD0 = 1;
  7110  001BDA  8083               	bsf	3971,0,c	;volatile
  7111  001BDC  D001               	goto	l3504
  7112  001BDE                     l71:
  7113                           
  7114                           ;lcd.h: 20: else
  7115                           ;lcd.h: 21: PORTDbits.RD0 = 0;
  7116  001BDE  9083               	bcf	3971,0,c	;volatile
  7117  001BE0                     l3504:
  7118                           
  7119                           ;lcd.h: 23: if(a & 2)
  7120  001BE0  A210               	btfss	Lcd_Port@a,1,c
  7121  001BE2  D002               	goto	l73
  7122                           
  7123                           ;lcd.h: 24: PORTDbits.RD1 = 1;
  7124  001BE4  8283               	bsf	3971,1,c	;volatile
  7125  001BE6  D001               	goto	l3508
  7126  001BE8                     l73:
  7127                           
  7128                           ;lcd.h: 25: else
  7129                           ;lcd.h: 26: PORTDbits.RD1 = 0;
  7130  001BE8  9283               	bcf	3971,1,c	;volatile
  7131  001BEA                     l3508:
  7132                           
  7133                           ;lcd.h: 28: if(a & 4)
  7134  001BEA  A410               	btfss	Lcd_Port@a,2,c
  7135  001BEC  D002               	goto	l75
  7136                           
  7137                           ;lcd.h: 29: PORTDbits.RD2 = 1;
  7138  001BEE  8483               	bsf	3971,2,c	;volatile
  7139  001BF0  D001               	goto	l3512
  7140  001BF2                     l75:
  7141                           
  7142                           ;lcd.h: 30: else
  7143                           ;lcd.h: 31: PORTDbits.RD2 = 0;
  7144  001BF2  9483               	bcf	3971,2,c	;volatile
  7145  001BF4                     l3512:
  7146                           
  7147                           ;lcd.h: 33: if(a & 8)
  7148  001BF4  A610               	btfss	Lcd_Port@a,3,c
  7149  001BF6  D002               	goto	l77
  7150                           
  7151                           ;lcd.h: 34: PORTDbits.RD3 = 1;
  7152  001BF8  8683               	bsf	3971,3,c	;volatile
  7153  001BFA  0012               	return	
  7154  001BFC                     l77:
  7155                           
  7156                           ;lcd.h: 35: else
  7157                           ;lcd.h: 36: PORTDbits.RD3 = 0;
  7158  001BFC  9683               	bcf	3971,3,c	;volatile
  7159  001BFE  0012               	return	
  7160  001C00                     __end_of_Lcd_Port:
  7161                           	opt stack 0
  7162                           tblptru	equ	0xFF8
  7163                           tblptrh	equ	0xFF7
  7164                           tblptrl	equ	0xFF6
  7165                           tablat	equ	0xFF5
  7166                           prodh	equ	0xFF4
  7167                           prodl	equ	0xFF3
  7168                           intcon	equ	0xFF2
  7169                           indf0	equ	0xFEF
  7170                           postinc0	equ	0xFEE
  7171                           fsr0h	equ	0xFEA
  7172                           fsr0l	equ	0xFE9
  7173                           wreg	equ	0xFE8
  7174                           indf1	equ	0xFE7
  7175                           postdec1	equ	0xFE5
  7176                           plusw1	equ	0xFE3
  7177                           fsr1h	equ	0xFE2
  7178                           fsr1l	equ	0xFE1
  7179                           indf2	equ	0xFDF
  7180                           postinc2	equ	0xFDE
  7181                           plusw2	equ	0xFDB
  7182                           fsr2h	equ	0xFDA
  7183                           fsr2l	equ	0xFD9
  7184                           status	equ	0xFD8
  7185                           
  7186 ;; *************** function _ISR *****************
  7187 ;; Defined at:
  7188 ;;		line 320 in file "main.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;		None
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;  sspBuf          1   14[COMRAM] unsigned char 
  7193 ;; Return value:  Size  Location     Type
  7194 ;;                  1    wreg      void 
  7195 ;; Registers used:
  7196 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7197 ;; Tracked objects:
  7198 ;;		On entry : 0/0
  7199 ;;		On exit  : 0/0
  7200 ;;		Unchanged: 0/0
  7201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7202 ;;      Params:         0       0       0       0       0       0       0
  7203 ;;      Locals:         1       0       0       0       0       0       0
  7204 ;;      Temps:         14       0       0       0       0       0       0
  7205 ;;      Totals:        15       0       0       0       0       0       0
  7206 ;;Total ram usage:       15 bytes
  7207 ;; Hardware stack levels used:    1
  7208 ;; This function calls:
  7209 ;;		Nothing
  7210 ;; This function is called by:
  7211 ;;		Interrupt level 2
  7212 ;; This function uses a non-reentrant model
  7213 ;;
  7214                           
  7215                           	psect	intcode
  7216  000008                     __pintcode:
  7217                           	opt stack 0
  7218  000008                     _ISR:
  7219                           	opt stack 25
  7220                           
  7221                           ;incstack = 0
  7222  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7223  00000A  CFFA F001          	movff	pclath,??_ISR
  7224  00000E  CFFB F002          	movff	pclatu,??_ISR+1
  7225  000012  CFE9 F003          	movff	fsr0l,??_ISR+2
  7226  000016  CFEA F004          	movff	fsr0h,??_ISR+3
  7227  00001A  CFE1 F005          	movff	fsr1l,??_ISR+4
  7228  00001E  CFE2 F006          	movff	fsr1h,??_ISR+5
  7229  000022  CFD9 F007          	movff	fsr2l,??_ISR+6
  7230  000026  CFDA F008          	movff	fsr2h,??_ISR+7
  7231  00002A  CFF3 F009          	movff	prodl,??_ISR+8
  7232  00002E  CFF4 F00A          	movff	prodh,??_ISR+9
  7233  000032  CFF6 F00B          	movff	tblptrl,??_ISR+10
  7234  000036  CFF7 F00C          	movff	tblptrh,??_ISR+11
  7235  00003A  CFF8 F00D          	movff	tblptru,??_ISR+12
  7236  00003E  CFF5 F00E          	movff	tablat,??_ISR+13
  7237                           
  7238                           ;main.c: 322: unsigned char sspBuf;
  7239                           ;main.c: 324: if (PIR1bits.SSPIF) {
  7240  000042  A69E               	btfss	3998,3,c	;volatile
  7241  000044  D03E               	goto	i2l292
  7242                           
  7243                           ;main.c: 326: if (!SSPSTATbits.D_NOT_A) {
  7244  000046  BAC7               	btfsc	4039,5,c	;volatile
  7245  000048  D013               	goto	i2l3472
  7246                           
  7247                           ;main.c: 330: i2c_byte_count = 0;
  7248  00004A  0E00               	movlw	0
  7249  00004C  6E4D               	movwf	_i2c_byte_count,c	;volatile
  7250                           
  7251                           ;main.c: 332: if (SSPSTATbits.BF) {
  7252  00004E  B0C7               	btfsc	4039,0,c	;volatile
  7253                           
  7254                           ;main.c: 334: sspBuf = SSPBUF;
  7255  000050  CFC9 F00F          	movff	4041,ISR@sspBuf	;volatile
  7256                           
  7257                           ;main.c: 335: }
  7258                           ;main.c: 337: if (SSPSTATbits.R_NOT_W) {
  7259  000054  A4C7               	btfss	4039,2,c	;volatile
  7260  000056  D031               	goto	i2l3494
  7261                           
  7262                           ;main.c: 339: SSPCON1bits.WCOL = 0;
  7263  000058  9EC6               	bcf	4038,7,c	;volatile
  7264                           
  7265                           ;main.c: 340: SSPBUF = i2c_r_reg[i2c_reg_addr++];
  7266  00005A  504E               	movf	_i2c_reg_addr,w,c	;volatile
  7267  00005C  0D01               	mullw	1
  7268  00005E  0E60               	movlw	low _i2c_r_reg
  7269  000060  24F3               	addwf	prodl,w,c
  7270  000062  6ED9               	movwf	fsr2l,c
  7271  000064  0E00               	movlw	high _i2c_r_reg
  7272  000066  20F4               	addwfc	prodh,w,c
  7273  000068  6EDA               	movwf	fsr2h,c
  7274  00006A  50DF               	movf	indf2,w,c
  7275  00006C  6EC9               	movwf	4041,c	;volatile
  7276  00006E  D024               	goto	i2l3492
  7277  000070                     i2l3472:
  7278                           
  7279                           ;main.c: 347: i2c_byte_count++;
  7280  000070  2A4D               	incf	_i2c_byte_count,f,c	;volatile
  7281                           
  7282                           ;main.c: 349: if (SSPSTATbits.BF) {
  7283  000072  B0C7               	btfsc	4039,0,c	;volatile
  7284                           
  7285                           ;main.c: 350: sspBuf = SSPBUF;
  7286  000074  CFC9 F00F          	movff	4041,ISR@sspBuf	;volatile
  7287                           
  7288                           ;main.c: 351: }
  7289                           ;main.c: 353: if (SSPSTATbits.R_NOT_W) {
  7290  000078  A4C7               	btfss	4039,2,c	;volatile
  7291  00007A  D00E               	goto	i2l3486
  7292                           
  7293                           ;main.c: 356: SSPCON1bits.WCOL = 0;
  7294  00007C  9EC6               	bcf	4038,7,c	;volatile
  7295                           
  7296                           ;main.c: 357: SSPBUF = i2c_r_reg[i2c_reg_addr++];
  7297  00007E  504E               	movf	_i2c_reg_addr,w,c	;volatile
  7298  000080  0D01               	mullw	1
  7299  000082  0E60               	movlw	low _i2c_r_reg
  7300  000084  24F3               	addwf	prodl,w,c
  7301  000086  6ED9               	movwf	fsr2l,c
  7302  000088  0E00               	movlw	high _i2c_r_reg
  7303  00008A  20F4               	addwfc	prodh,w,c
  7304  00008C  6EDA               	movwf	fsr2h,c
  7305  00008E  50DF               	movf	indf2,w,c
  7306  000090  6EC9               	movwf	4041,c	;volatile
  7307  000092  2A4E               	incf	_i2c_reg_addr,f,c	;volatile
  7308                           
  7309                           ;main.c: 358: LATDbits.LATD6 = 1;
  7310  000094  8C8C               	bsf	3980,6,c	;volatile
  7311                           
  7312                           ;main.c: 360: } else {
  7313  000096  D011               	goto	i2l3494
  7314  000098                     i2l3486:
  7315                           
  7316                           ;main.c: 362: if (i2c_byte_count == 1) {
  7317  000098  044D               	decf	_i2c_byte_count,w,c	;volatile
  7318  00009A  A4D8               	btfss	status,2,c
  7319  00009C  D003               	goto	i2l3490
  7320                           
  7321                           ;main.c: 364: i2c_reg_addr = sspBuf;
  7322  00009E  C00F  F04E         	movff	ISR@sspBuf,_i2c_reg_addr	;volatile
  7323                           
  7324                           ;main.c: 366: } else {
  7325  0000A2  D00B               	goto	i2l3494
  7326  0000A4                     i2l3490:
  7327                           
  7328                           ;main.c: 369: i2c_w_reg[i2c_reg_addr++] = sspBuf;
  7329  0000A4  504E               	movf	_i2c_reg_addr,w,c	;volatile
  7330  0000A6  0D01               	mullw	1
  7331  0000A8  0E00               	movlw	low _i2c_w_reg
  7332  0000AA  24F3               	addwf	prodl,w,c
  7333  0000AC  6ED9               	movwf	fsr2l,c
  7334  0000AE  0E01               	movlw	high _i2c_w_reg
  7335  0000B0  20F4               	addwfc	prodh,w,c
  7336  0000B2  6EDA               	movwf	fsr2h,c
  7337  0000B4  C00F  FFDF         	movff	ISR@sspBuf,indf2
  7338  0000B8                     i2l3492:
  7339  0000B8  2A4E               	incf	_i2c_reg_addr,f,c	;volatile
  7340  0000BA                     i2l3494:
  7341                           
  7342                           ;main.c: 370: }
  7343                           ;main.c: 371: }
  7344                           ;main.c: 372: }
  7345                           ;main.c: 374: i2c_reg_addr %= sizeof(i2c_r_reg);
  7346  0000BA  0E1F               	movlw	31
  7347  0000BC  164E               	andwf	_i2c_reg_addr,f,c	;volatile
  7348                           
  7349                           ;main.c: 377: PIR1bits.SSPIF = 0;
  7350  0000BE  969E               	bcf	3998,3,c	;volatile
  7351                           
  7352                           ;main.c: 378: SSPCON1bits.CKP = 1;
  7353  0000C0  88C6               	bsf	4038,4,c	;volatile
  7354  0000C2                     i2l292:
  7355  0000C2  C00E  FFF5         	movff	??_ISR+13,tablat
  7356  0000C6  C00D  FFF8         	movff	??_ISR+12,tblptru
  7357  0000CA  C00C  FFF7         	movff	??_ISR+11,tblptrh
  7358  0000CE  C00B  FFF6         	movff	??_ISR+10,tblptrl
  7359  0000D2  C00A  FFF4         	movff	??_ISR+9,prodh
  7360  0000D6  C009  FFF3         	movff	??_ISR+8,prodl
  7361  0000DA  C008  FFDA         	movff	??_ISR+7,fsr2h
  7362  0000DE  C007  FFD9         	movff	??_ISR+6,fsr2l
  7363  0000E2  C006  FFE2         	movff	??_ISR+5,fsr1h
  7364  0000E6  C005  FFE1         	movff	??_ISR+4,fsr1l
  7365  0000EA  C004  FFEA         	movff	??_ISR+3,fsr0h
  7366  0000EE  C003  FFE9         	movff	??_ISR+2,fsr0l
  7367  0000F2  C002  FFFB         	movff	??_ISR+1,pclatu
  7368  0000F6  C001  FFFA         	movff	??_ISR,pclath
  7369  0000FA  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7370  0000FC  0011               	retfie		f
  7371  0000FE                     __end_of_ISR:
  7372                           	opt stack 0
  7373                           pclatu	equ	0xFFB
  7374                           pclath	equ	0xFFA
  7375                           tblptru	equ	0xFF8
  7376                           tblptrh	equ	0xFF7
  7377                           tblptrl	equ	0xFF6
  7378                           tablat	equ	0xFF5
  7379                           prodh	equ	0xFF4
  7380                           prodl	equ	0xFF3
  7381                           intcon	equ	0xFF2
  7382                           indf0	equ	0xFEF
  7383                           postinc0	equ	0xFEE
  7384                           fsr0h	equ	0xFEA
  7385                           fsr0l	equ	0xFE9
  7386                           wreg	equ	0xFE8
  7387                           indf1	equ	0xFE7
  7388                           postdec1	equ	0xFE5
  7389                           plusw1	equ	0xFE3
  7390                           fsr1h	equ	0xFE2
  7391                           fsr1l	equ	0xFE1
  7392                           indf2	equ	0xFDF
  7393                           postinc2	equ	0xFDE
  7394                           plusw2	equ	0xFDB
  7395                           fsr2h	equ	0xFDA
  7396                           fsr2l	equ	0xFD9
  7397                           status	equ	0xFD8
  7398                           pclatu	equ	0xFFB
  7399                           pclath	equ	0xFFA
  7400                           tblptru	equ	0xFF8
  7401                           tblptrh	equ	0xFF7
  7402                           tblptrl	equ	0xFF6
  7403                           tablat	equ	0xFF5
  7404                           prodh	equ	0xFF4
  7405                           prodl	equ	0xFF3
  7406                           intcon	equ	0xFF2
  7407                           indf0	equ	0xFEF
  7408                           postinc0	equ	0xFEE
  7409                           fsr0h	equ	0xFEA
  7410                           fsr0l	equ	0xFE9
  7411                           wreg	equ	0xFE8
  7412                           indf1	equ	0xFE7
  7413                           postdec1	equ	0xFE5
  7414                           plusw1	equ	0xFE3
  7415                           fsr1h	equ	0xFE2
  7416                           fsr1l	equ	0xFE1
  7417                           indf2	equ	0xFDF
  7418                           postinc2	equ	0xFDE
  7419                           plusw2	equ	0xFDB
  7420                           fsr2h	equ	0xFDA
  7421                           fsr2l	equ	0xFD9
  7422                           status	equ	0xFD8
  7423                           
  7424                           	psect	rparam
  7425  0000                     pclatu	equ	0xFFB
  7426                           pclath	equ	0xFFA
  7427                           tblptru	equ	0xFF8
  7428                           tblptrh	equ	0xFF7
  7429                           tblptrl	equ	0xFF6
  7430                           tablat	equ	0xFF5
  7431                           prodh	equ	0xFF4
  7432                           prodl	equ	0xFF3
  7433                           intcon	equ	0xFF2
  7434                           indf0	equ	0xFEF
  7435                           postinc0	equ	0xFEE
  7436                           fsr0h	equ	0xFEA
  7437                           fsr0l	equ	0xFE9
  7438                           wreg	equ	0xFE8
  7439                           indf1	equ	0xFE7
  7440                           postdec1	equ	0xFE5
  7441                           plusw1	equ	0xFE3
  7442                           fsr1h	equ	0xFE2
  7443                           fsr1l	equ	0xFE1
  7444                           indf2	equ	0xFDF
  7445                           postinc2	equ	0xFDE
  7446                           plusw2	equ	0xFDB
  7447                           fsr2h	equ	0xFDA
  7448                           fsr2l	equ	0xFD9
  7449                           status	equ	0xFD8
  7450                           
  7451                           	psect	temp
  7452  000050                     btemp:
  7453                           	opt stack 0
  7454  000050                     	ds	1
  7455  0000                     int$flags	set	btemp
  7456                           pclatu	equ	0xFFB
  7457                           pclath	equ	0xFFA
  7458                           tblptru	equ	0xFF8
  7459                           tblptrh	equ	0xFF7
  7460                           tblptrl	equ	0xFF6
  7461                           tablat	equ	0xFF5
  7462                           prodh	equ	0xFF4
  7463                           prodl	equ	0xFF3
  7464                           intcon	equ	0xFF2
  7465                           indf0	equ	0xFEF
  7466                           postinc0	equ	0xFEE
  7467                           fsr0h	equ	0xFEA
  7468                           fsr0l	equ	0xFE9
  7469                           wreg	equ	0xFE8
  7470                           indf1	equ	0xFE7
  7471                           postdec1	equ	0xFE5
  7472                           plusw1	equ	0xFE3
  7473                           fsr1h	equ	0xFE2
  7474                           fsr1l	equ	0xFE1
  7475                           indf2	equ	0xFDF
  7476                           postinc2	equ	0xFDE
  7477                           plusw2	equ	0xFDB
  7478                           fsr2h	equ	0xFDA
  7479                           fsr2l	equ	0xFD9
  7480                           status	equ	0xFD8


Data Sizes:
    Strings     341
    Constant    0
    Data        135
    BSS         38
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     51      79
    BANK0           160     48     131
    BANK1           256     41     105
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    start_routine@error_msg	PTR unsigned char  size(2) Largest target is 17
		 -> STR_26(CODE[17]), STR_25(CODE[17]), 

    latch_keypad@x	PTR unsigned char  size(2) Largest target is 1
		 -> start_routine@x(BANK0[1]), main@x(BANK1[1]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 1535
		 -> STR_28(CODE[17]), STR_27(CODE[6]), STR_26(CODE[17]), STR_25(CODE[17]), 
		 -> STR_24(CODE[17]), STR_23(CODE[2]), STR_22(CODE[5]), STR_21(CODE[17]), 
		 -> STR_20(CODE[17]), STR_19(CODE[17]), STR_18(CODE[17]), STR_17(CODE[17]), 
		 -> STR_16(CODE[11]), STR_15(CODE[6]), STR_14(CODE[5]), STR_13(CODE[17]), 
		 -> STR_12(CODE[17]), STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), 
		 -> STR_8(CODE[17]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), 
		 -> STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[2]), 
		 -> RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    _main->_running_display
    _start_routine->_menu_progress_bar
    _running_display->_menu_progress_bar
    _menu_progress_bar->___wmul
    ___wmul->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _mcu_initialise->_Eeprom_Read_Byte
    _load_i2c_registers->___awdiv
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_start_routine

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                49    49      0   71925
                                             40 BANK0      8     8      0
                                              0 BANK1     41    41      0
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                       _latch_keypad
                 _load_i2c_registers
                     _mcu_initialise
                  _menu_progress_bar
                        _read_keypad
                    _running_display
                      _start_routine
 ---------------------------------------------------------------------------------
 (1) _start_routine                                       40    40      0   24286
                                              0 BANK0     40    40      0
                  _Eeprom_Write_Byte
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awdiv
                       _latch_keypad
                  _menu_progress_bar
                        _read_keypad
 ---------------------------------------------------------------------------------
 (2) _latch_keypad                                         4     2      2     524
                                             15 COMRAM     4     2      2
                        _read_keypad
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Write_Byte                                    2     1      1     139
                                             15 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _running_display                                     37    37      0   22856
                                             48 COMRAM     3     3      0
                                              0 BANK0     34    34      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awdiv
                            ___awmod
                  _menu_progress_bar
                        _read_keypad
 ---------------------------------------------------------------------------------
 (2) _read_keypad                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _menu_progress_bar                                   20    18      2   11040
                                             28 COMRAM    20    18      2
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     848
                                             22 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1781
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_String                                     6     4      2    2540
                                             19 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_Char                                       3     3      0     254
                                             16 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Set_Cursor                                       5     4      1    4549
                                             17 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Clear                                            1     1      0     155
                                             17 COMRAM     1     1      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1049
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _mcu_initialise                                       0     0      0      31
                   _Eeprom_Read_Byte
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Read_Byte                                     1     1      0      31
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _load_i2c_registers                                  12    12      0    2877
                                             23 COMRAM    12    12      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2447
                                             15 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     279
                                             17 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Cmd                                              1     1      0     155
                                             16 COMRAM     1     1      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (5) _Lcd_Port                                             1     1      0     124
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 15    15      0      46
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _latch_keypad
     _read_keypad
   _load_i2c_registers
     ___awdiv
   _mcu_initialise
     _Eeprom_Read_Byte
   _menu_progress_bar
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___lwdiv
     ___wmul
       ___lwdiv (ARG)
   _read_keypad
   _running_display
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___awdiv
     ___awmod
     _menu_progress_bar
       _Lcd_Clear
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Write_Char
         _Lcd_Port
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___lwdiv
       ___wmul
         ___lwdiv (ARG)
     _read_keypad
   _start_routine
     _Eeprom_Write_Byte
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___awdiv
     _latch_keypad
       _read_keypad
     _menu_progress_bar
       _Lcd_Clear
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Write_Char
         _Lcd_Port
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___lwdiv
       ___wmul
         ___lwdiv (ARG)
     _read_keypad

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     29      69       7       41.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     30      83       5       81.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     33      4F       1       84.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13B      15        0.0%
DATA                 0      0     13B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Oct 14 20:19:40 2016

                             _c 0080                  start_routine@a 00BE                  start_routine@b 00B4  
                start_routine@h 00A2                  start_routine@i 00A8                  start_routine@l 00A3  
                start_routine@n 00C4                  start_routine@v 00A7                  start_routine@x 00C3  
                   _SSPSTATbits 000FC7                              l71 1BDE                              l73 1BE8  
                            l75 1BF2                              l77 1BFC                    ___awdiv@sign 0015  
                            _hx 0120                 start_routine@d1 00A6             ___wmul@multiplicand 0019  
               start_routine@dh 00C2                 start_routine@dt 00BF     __size_of_load_i2c_registers 00EC  
                  __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000  
        __size_of_start_routine 07BE                    __CFG_CP3$OFF 000000                             l230 0820  
                           l155 1C40                             l252 170C                             l149 1CA8  
                           l261 1774                             l262 1780                             l254 1718  
                           l263 178C                             l255 1724                             l328 1060  
                           l257 1740                             l258 174C                             l259 1758  
                           l765 1A4C                    __CFG_CPB$OFF 000000                    __CFG_CPD$OFF 000000  
                           _ISR 0008                    __CFG_BORV$30 000000                    ___awmod@sign 0015  
                           prod 000FF3                             wreg 000FE8         Eeprom_Read_Byte@address 0010  
       __end_of_running_display 14A0                    __CFG_LVP$OFF 000000                            ?_ISR 0001  
                          l4000 0C30                            l4102 0EA4                            l4022 0C9A  
                          l4032 0CD8                            l4202 1168                            l4210 1190  
                          l4220 1624                            l4300 1288                            l4132 0F9E  
                          l4108 0EBC                            l4212 119A                            l4310 12BC  
                          l3512 1BF4                            l3504 1BE0                            l4240 16A8  
                          l4232 165E                            l4216 1614                            l4320 12F8  
                          l4304 129E                            l4208 1184                            l4128 0F88  
                          l4056 0D7A                            l4250 16D6                            l4226 1646  
                          l3602 1730                            l4170 10AA                            l4154 1038  
                          l4138 0FBC                            l4082 0E2C                            l4074 0DFE  
                          l3508 1BEA                            l4244 16B8                            l4228 164E  
                          l3700 150C                            l4180 10EA                            l4076 0E06  
                          l4238 1698                            l3630 1764                            l4270 11E2  
                          l4174 10C6                            l4166 1094                            l4078 0E16  
                          l3800 184A                            l3720 1580                            l3704 151C  
                          l4192 112C                            l4176 10D6                            l4088 0E5A  
                          l4520 031E                            l3810 186C                            l3714 1562  
                          l4354 146E                            l4290 1238                            l4266 11CC  
                          l3572 1960                            l3732 15BA                            l3724 1590  
                          l3708 1536                            l4356 1478                            l4284 1224  
                          l4196 1148                            l4188 1116                            l4700 0972  
                          l4620 0700                            l4540 03D2                            l4452 0120  
                          l3806 1860                            l3822 1892                            l3558 1A7E  
                          l3742 15D6                            l4294 1244                            l4278 1204  
                          l4198 1152                            l4542 03DE                            l4470 01A8  
                          l3808 1868                            l3568 192C                            l3752 1606  
                          l3744 15DE                            l3736 15CA                            l3728 15A8  
                          l4288 122C                            l4712 09BE                            l4640 07F8  
                          l4632 07CE                            l4624 078E                            l4616 06EC  
                          l4464 0188                            l3826 18A0                            l3818 1888  
                          l3850 19CE                            l3842 19B4                            l3674 1A1A  
                          l3658 1798                            l4650 0838                            l4618 06F4  
                          l4538 03CA                            l4466 0192                            l4458 0148  
                          l3676 1A22                            l3748 15EE                            l3780 1B36  
                          l4708 09A8                            l4660 088E                            l4564 053C  
                          l4548 04C8                            l4476 01EC                            l4716 09D6  
                          l3862 19FA                            l3854 19E2                            l3846 19C2  
                          l3838 19A8                            l3686 1A42                            l3678 1A26  
                          l3782 1B48                            l3942 0A1E                            l4654 084E  
                          l3848 19CA                            l3696 14FC                            l4680 08FE  
                          l4672 08D0                            l4488 022A                            l3794 183A  
                          l3858 19EC                            l3970 0ABE                            l3962 0A98  
                          l3954 0A66                            l3946 0A3A                            l3938 0A08  
                          l4682 0904                            l4692 0944                            l4676 08E6  
                          l3958 0A7C                            l4598 0642                            l3992 0BFE  
                          l4696 095A                            l3996 0C14                            STR_2 7EA9  
                          STR_3 7EFE                            STR_4 7EBA                            STR_5 7F42  
                          STR_6 7EBA                            STR_7 7FCA                            STR_8 7F20  
                          STR_9 7FB9                            _LATC 000F8B                            u3200 198C  
                          u4101 12EE                            u3207 1982                            u4121 1330  
                          u4131 134E                            u3190 1958                            u4250 0144  
                          u4500 0820                            u4260 0184                            u3197 194E  
                          u3375 14BE                            u4391 0550                            u4707 1134  
                          u4627 08EE                            u4717 1B3C                            u4637 0962  
                          u4807 18CE                            u4727 1306                            u4647 09C6  
                          u3880 1060                            u4817 18E6                            u4737 1522  
                          u4657 0A26                            u4827 1C92                            u4747 1596  
                          u4667 0A84                            u4757 15F4                            u4677 0C1C  
                          u4767 1B88                            u4687 1040                            u4777 1B9A  
                          u4697 10B2                            u4787 1C5C                            u4797 18B6  
             ?_Lcd_Write_String 0014                            _main 0102                            fsr0h 000FEA  
                          fsr1h 000FE2                            indf0 000FEF                            fsr0l 000FE9  
                          fsr2h 000FDA                            indf1 000FE7                            fsr1l 000FE1  
                          indf2 000FDF                            fsr2l 000FD9                            btemp 0050  
                          pclat 000FFA                            prodh 000FF4                            prodl 000FF3  
                          start 00FE              ??_Lcd_Write_String 0016                   __CFG_IESO$OFF 000000  
               __end_of_Lcd_Cmd 1C9C                   __CFG_MCLRE$ON 000000                    ___param_bank 000010  
                         ??_ISR 0001                           ?_main 0001                 __end_of___awdiv 18AA  
                         _EEADR 000FA9                           STR_10 7EDC                           STR_11 7F97  
                         STR_12 7EDC                           STR_20 7FA8                           STR_21 7F31  
                         STR_13 7ECB                           STR_22 7FF7                           STR_14 7FF2  
                         STR_23 7FFC                           STR_15 7FE6                           STR_16 7FDB  
                         STR_24 7F86                           STR_25 7F53                           STR_17 7F0F  
                         STR_18 7F64                           STR_26 7EED                           STR_27 7FEC  
                         STR_19 7F31                           STR_28 7F75                 __end_of___awmod 1A04  
               ___awdiv@divisor 0012                 __end_of___lwdiv 1A56                           i2l292 00C2  
               ___awdiv@counter 0014                           _PORTB 000F81         __size_of_Lcd_Set_Cursor 0050  
                         _TRISA 000F92                           _TRISB 000F93                           _TRISC 000F94  
                         _TRISD 000F95                  _i2c_byte_count 004D                   __CFG_PWRT$OFF 000000  
                 __CFG_WRT0$OFF 000000                   ?_latch_keypad 0010                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                      _Machine_ID 004F  
                __CFG_EBTR2$OFF 000000              start_routine@F3718 0099                  __CFG_EBTR3$OFF 000000  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
                  ?_read_keypad 0001                  __CFG_EBTRB$OFF 000000                           main@c 0130  
                         main@i 014E                           main@n 0157                           main@p 0156  
                         main@u 0152                           main@x 0158                           tablat 000FF5  
            start_routine@i_901 00B0              start_routine@i_904 00B2              start_routine@i_905 00B9  
            start_routine@i_880 00AC              start_routine@i_872 00AA              start_routine@i_892 00C0  
            start_routine@i_895 00B7              start_routine@i_898 00AE         load_i2c_registers@i_836 0022  
       load_i2c_registers@i_838 001E                   _start_routine 09E4                           plusw1 000FE3  
                         plusw2 000FDB                           status 000FD8   menu_progress_bar@load_time_ms 001D  
                __CFG_HFOFST$ON 000000                __end_of_Lcd_Init 1922                __end_of_Lcd_Port 1C00  
               __initialization 179C                    __end_of_main 09E4                          ??_main 00C6  
            __size_of_Lcd_Clear 0020                   __activetblptr 000002            _credentials_accepted 00E1  
                ??_latch_keypad 0012                ?_running_display 0001                          _EEDATA 000FA8  
                        _EECON2 000FA7                ___awdiv@dividend 0010                  ?_start_routine 0001  
                __CFG_WDTEN$OFF 000000                          i2l3472 0070                          i2l3490 00A4  
                        i2l3492 00B8                          i2l3486 0098                          i2l3494 00BA  
                        _OSCCON 000FD3                       ??_Lcd_Cmd 0011         __size_of_Lcd_Write_Char 0038  
                        _SSPADD 000FC8                          _SSPBUF 000FC9                  __CFG_XINST$OFF 000000  
                        ___wmul 1C00                       ??___awdiv 0014                  __CFG_STVREN$ON 000000  
                     ??___awmod 0014                       ??___lwdiv 0014               ?_Eeprom_Read_Byte 0001  
                        clear_0 17A2                          clear_1 17AE                ___awdiv@quotient 0016  
               ___awmod@divisor 0012                 ___awmod@counter 0014              ??_Eeprom_Read_Byte 0010  
                  __pdataCOMRAM 0034                    __mediumconst 7EA8                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                 Lcd_Set_Cursor@a 0013  
               Lcd_Set_Cursor@b 0012                 Lcd_Set_Cursor@y 0015                 Lcd_Set_Cursor@z 0014  
                    __accesstop 0060         __end_of__initialization 1818                 __CFG_PBADEN$OFF 000000  
             __end_of_Lcd_Clear 1C6A                   ___rparam_used 000001               _menu_progress_bar 14A0  
                __pcstackCOMRAM 0001                    __pidataBANK0 1AF6                    __pidataBANK1 1BA4  
            ?_menu_progress_bar 001D            running_display@F3741 0094            running_display@F3744 003E  
                _Lcd_Set_Cursor 1A56             ??_menu_progress_bar 001F            running_display@i_911 00B0  
          running_display@i_912 00B8                    _EEP_I2C_ADDR 00E0                       ?_Lcd_Init 0001  
                     ?_Lcd_Port 0001                 ??_start_routine 009E            __size_of_read_keypad 00A4  
                    __pbssBANK0 00CE                      __pbssBANK1 0159                      __pnvCOMRAM 004F  
     __end_of_menu_progress_bar 160C              running_display@n_c 00B3                       ISR@sspBuf 000F  
          __end_of_latch_keypad 1B6C                         ?___wmul 0017      __end_of_load_i2c_registers 16F8  
  start_routine@new_I2C_address 00C5       __size_of_Lcd_Write_String 0072          __end_of_Lcd_Set_Cursor 1AA6  
        menu_progress_bar@i_726 002B          menu_progress_bar@i_727 002D          menu_progress_bar@i_728 002F  
                    ??_Lcd_Init 0012                      ??_Lcd_Port 0010                         _SSPCON1 000FC6  
                       _SSPCON2 000FC5         __size_of_mcu_initialise 0050                         _SSPSTAT 000FC7  
                _Lcd_Write_Char 1B6C                         _Lcd_Cmd 1C84                         __Hparam 0000  
                       __Lparam 0000                         ___awdiv 1826                         ___awmod 1994  
               __size_of___wmul 0026                         ___lwdiv 1A04                         __pcinit 179C  
                       __ramtop 0600                 ?_Lcd_Set_Cursor 0012                         __ptext0 0102  
                       __ptext1 09E4                         __ptext2 1B34                         __ptext3 1C26  
                       __ptext4 11A2                         __ptext5 16F8                         __ptext6 14A0  
                       __ptext7 1C00                         __ptext8 1A04                         __ptext9 1922  
           menu_progress_bar@ii 0027                    __size_of_ISR 00F6                ___awmod@dividend 0010  
        __end_of_Lcd_Write_Char 1BA4            end_of_initialization 1818                   __Lmediumconst 7EA8  
    __size_of_menu_progress_bar 016C                   _login_timeout 009C                         postdec1 000FE5  
                       postinc0 000FEE                         postinc2 000FDE                       Lcd_Port@a 0010  
                     _PORTBbits 000F81                       _PORTDbits 000F83                 ?_Lcd_Write_Char 0001  
     __size_of_Eeprom_Read_Byte 0014               Lcd_Write_String@a 0014               Lcd_Write_String@i 0018  
         __size_of_latch_keypad 0038                      main@buffer 013A        __size_of_running_display 02FE  
                  _i2c_reg_addr 004E                   latch_keypad@x 0010                       _Lcd_Clear 1C4A  
                __end_of___wmul 1C26                _Lcd_Write_String 1922                   __pidataCOMRAM 1C6A  
             _Eeprom_Write_Byte 1C26              ?_Eeprom_Write_Byte 0010             start_initialization 179C  
                  _latch_keypad 1B34                     __end_of_ISR 00FE                       _i2c_r_reg 0060  
                     _i2c_w_reg 0100                  _mcu_initialise 1AA6             ??_Eeprom_Write_Byte 0011  
             __size_of_Lcd_Init 0078               __size_of_Lcd_Port 002C  running_display@is_leading_zero 00B2  
                    ?_Lcd_Clear 0001                        ??___wmul 001B                     __pdataBANK0 0060  
                   __pdataBANK1 0100                __CFG_LPT1OSC$OFF 000000       __end_of_Eeprom_Write_Byte 1C4A  
               Lcd_Write_Char@a 0013                 Lcd_Write_Char@y 0012       menu_seconds_to_mmss@F3627 0034  
         running_display@minute 00B6           running_display@second 00BE                     __pbssCOMRAM 004D  
        __end_of_mcu_initialise 1AF6                   __pcstackBANK0 009E                   __pcstackBANK1 0130  
                 ??_read_keypad 0010              _load_i2c_registers 160C           __end_of_start_routine 11A2  
           ?_load_i2c_registers 0001                        ?_Lcd_Cmd 0001             running_display@hour 00A3  
                     __pnvBANK0 00E2                    _current_user 00D7               running_display@ms 00B4  
              ___lwdiv@dividend 0010               __CFG_CCP2MX$PORTC 000000                ??_Lcd_Set_Cursor 0013  
                     __pintcode 0008                   __pmediumconst 7EA8                        ?___awdiv 0010  
                      ?___awmod 0010               ??_running_display 0031                        ?___lwdiv 0010  
          ??_load_i2c_registers 0018                        _I2C_ADDR 00E2                 ?_mcu_initialise 0001  
              ___lwdiv@quotient 0015                _Eeprom_Read_Byte 1C9C              menu_progress_bar@d 0023  
            menu_progress_bar@i 0029             __end_of_read_keypad 179C                  ___wmul@product 001B  
                      _LATDbits 000F8C                        _PIE1bits 000F9D                        Lcd_Cmd@a 0011  
                      _PIR1bits 000F9E                        _PIR2bits 000FA1                     ??_Lcd_Clear 0012  
              __CFG_WDTPS$32768 000000      load_i2c_registers@checksum 001C                       main@F3681 008A  
    __size_of_Eeprom_Write_Byte 0024                       main@i_772 0154                       main@i_781 014A  
                     main@i_782 014C                       main@i_790 0146                       main@i_775 0150  
                     main@i_793 0148                       main@i_787 0144               ___wmul@multiplier 0017  
              ??_Lcd_Write_Char 0011                        _Lcd_Init 18AA                        _Lcd_Port 1BD4  
                     copy_data0 17CC                       copy_data1 17EC                       copy_data2 180C  
      __end_of_Lcd_Write_String 1994     running_display@exit_running 00AF                __size_of_Lcd_Cmd 0018  
                    _EECON1bits 000FA6                        __Hrparam 0000                        __Lrparam 0000  
            __CFG_BOREN$SBORDIS 000000                __size_of___awdiv 0084                __size_of___awmod 0070  
              __size_of___lwdiv 0052             load_i2c_registers@i 0020       start_routine@I2C_new_ADDR 00BB  
                   _current_pin 00CE                running_display@i 00BC                running_display@n 00A5  
              running_display@s 00BA                running_display@t 009E                 ___lwdiv@divisor 0012  
               ___lwdiv@counter 0014                     _read_keypad 16F8                        __ptext10 1B6C  
                      __ptext11 1A56                        __ptext20 1BD4                        __ptext12 1C4A  
                      __ptext13 1994                        __ptext14 1AA6                        __ptext15 1C9C  
                      __ptext16 160C                        __ptext17 1826                        __ptext18 18AA  
                      __ptext19 1C84                     _logged_user 0159                   __size_of_main 08E2  
          main@credential_state 0143           Eeprom_Write_Byte@data 0010        Eeprom_Write_Byte@address 0011  
                      int$flags 0050                     _OSCTUNEbits 000F9B                      _INTCONbits 000FF2  
            Lcd_Write_Char@temp 0011                        intlevel2 0000                 _running_display 11A2  
      __end_of_Eeprom_Read_Byte 1CB0              Lcd_Set_Cursor@temp 0016                ??_mcu_initialise 0011  
                menu_main@F3618 0048          start_routine@error_msg 00A4                     _SSPCON1bits 000FC6  
             __CFG_FOSC$INTIO67 000000  
