

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Oct 15 12:05:31 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	idataBANK0,global,class=CODE,delta=1
     8                           	psect	idataBANK1,global,class=CODE,delta=1
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    44                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    45  0000                     
    46                           	psect	eeprom_data
    47  F00000  10 00 00 00 00 00 00 00 	db	16,0,0,0,0,0,0,0	;# 
    48                           
    49                           	psect	idataCOMRAM
    50  001B74                     __pidataCOMRAM:
    51                           	opt stack 0
    52                           
    53                           ;initializer for _hx
    54  001B74  30                 	db	48
    55  001B75  31                 	db	49
    56  001B76  32                 	db	50
    57  001B77  33                 	db	51
    58  001B78  34                 	db	52
    59  001B79  35                 	db	53
    60  001B7A  36                 	db	54
    61  001B7B  37                 	db	55
    62  001B7C  38                 	db	56
    63  001B7D  39                 	db	57
    64  001B7E  41                 	db	65
    65  001B7F  42                 	db	66
    66  001B80  43                 	db	67
    67  001B81  44                 	db	68
    68  001B82  45                 	db	69
    69  001B83  46                 	db	70
    70                           
    71                           ;initializer for menu_seconds_to_mmss@F3627
    72  001B84  30                 	db	48
    73  001B85  31                 	db	49
    74  001B86  32                 	db	50
    75  001B87  33                 	db	51
    76  001B88  34                 	db	52
    77  001B89  35                 	db	53
    78  001B8A  36                 	db	54
    79  001B8B  37                 	db	55
    80  001B8C  38                 	db	56
    81  001B8D  39                 	db	57
    82                           
    83                           ;initializer for menu_main@F3618
    84  001B8E  30                 	db	48
    85  001B8F  30                 	db	48
    86  001B90  3A                 	db	58
    87  001B91  30                 	db	48
    88  001B92  30                 	db	48
    89                           
    90                           	psect	idataBANK0
    91  001AE2                     __pidataBANK0:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _c
    95  001AE2  30                 	db	48
    96  001AE3  31                 	db	49
    97  001AE4  32                 	db	50
    98  001AE5  33                 	db	51
    99  001AE6  34                 	db	52
   100  001AE7  35                 	db	53
   101  001AE8  36                 	db	54
   102  001AE9  37                 	db	55
   103  001AEA  38                 	db	56
   104  001AEB  39                 	db	57
   105                           
   106                           ;initializer for main@F3681
   107  001AEC  30                 	db	48
   108  001AED  31                 	db	49
   109  001AEE  32                 	db	50
   110  001AEF  33                 	db	51
   111  001AF0  34                 	db	52
   112  001AF1  35                 	db	53
   113  001AF2  36                 	db	54
   114  001AF3  37                 	db	55
   115  001AF4  38                 	db	56
   116  001AF5  39                 	db	57
   117                           
   118                           ;initializer for running_display@F3744
   119  001AF6  30                 	db	48
   120  001AF7  31                 	db	49
   121  001AF8  32                 	db	50
   122  001AF9  33                 	db	51
   123  001AFA  34                 	db	52
   124  001AFB  35                 	db	53
   125  001AFC  36                 	db	54
   126  001AFD  37                 	db	55
   127  001AFE  38                 	db	56
   128  001AFF  39                 	db	57
   129                           
   130                           ;initializer for running_display@F3741
   131  001B00  30                 	db	48
   132  001B01  30                 	db	48
   133  001B02  3A                 	db	58
   134  001B03  30                 	db	48
   135  001B04  30                 	db	48
   136                           
   137                           ;initializer for start_routine@F3718
   138  001B05  30                 	db	48
   139  001B06  30                 	db	48
   140  001B07  30                 	db	48
   141                           
   142                           ;initializer for _login_timeout
   143  001B08  0708               	dw	1800
   144                           
   145                           	psect	idataBANK1
   146  001A06                     __pidataBANK1:
   147                           	opt stack 0
   148                           
   149                           ;initializer for _i2c_r_reg
   150  001A06  2D                 	db	45
   151  001A07  2D                 	db	45
   152  001A08  2D                 	db	45
   153  001A09  2D                 	db	45
   154  001A0A  2D                 	db	45
   155  001A0B  2D                 	db	45
   156  001A0C  2D                 	db	45
   157  001A0D  2D                 	db	45
   158  001A0E  2D                 	db	45
   159  001A0F  2D                 	db	45
   160  001A10  2D                 	db	45
   161  001A11  2D                 	db	45
   162  001A12  2D                 	db	45
   163  001A13  2D                 	db	45
   164  001A14  2D                 	db	45
   165  001A15  2D                 	db	45
   166  001A16  2D                 	db	45
   167  001A17  2D                 	db	45
   168  001A18  2D                 	db	45
   169  001A19  2D                 	db	45
   170  001A1A  2D                 	db	45
   171  001A1B  2D                 	db	45
   172  001A1C  2D                 	db	45
   173  001A1D  2D                 	db	45
   174  001A1E  2D                 	db	45
   175  001A1F  2D                 	db	45
   176  001A20  2D                 	db	45
   177  001A21  2D                 	db	45
   178  001A22  2D                 	db	45
   179  001A23  2D                 	db	45
   180  001A24  2D                 	db	45
   181  001A25  2D                 	db	45
   182                           
   183                           ;initializer for _i2c_w_reg
   184  001A26  2D                 	db	45
   185  001A27  2D                 	db	45
   186  001A28  2D                 	db	45
   187  001A29  2D                 	db	45
   188  001A2A  2D                 	db	45
   189  001A2B  2D                 	db	45
   190  001A2C  2D                 	db	45
   191  001A2D  2D                 	db	45
   192  001A2E  2D                 	db	45
   193  001A2F  2D                 	db	45
   194  001A30  2D                 	db	45
   195  001A31  2D                 	db	45
   196  001A32  2D                 	db	45
   197  001A33  2D                 	db	45
   198  001A34  2D                 	db	45
   199  001A35  2D                 	db	45
   200  001A36  2D                 	db	45
   201  001A37  2D                 	db	45
   202  001A38  2D                 	db	45
   203  001A39  2D                 	db	45
   204  001A3A  2D                 	db	45
   205  001A3B  2D                 	db	45
   206  001A3C  2D                 	db	45
   207  001A3D  2D                 	db	45
   208  001A3E  2D                 	db	45
   209  001A3F  2D                 	db	45
   210  001A40  2D                 	db	45
   211  001A41  2D                 	db	45
   212  001A42  2D                 	db	45
   213  001A43  2D                 	db	45
   214  001A44  2D                 	db	45
   215  001A45  2D                 	db	45
   216                           
   217                           	psect	nvBANK0
   218  0000DE                     __pnvBANK0:
   219                           	opt stack 0
   220  0000DE                     _I2C_ADDR:
   221                           	opt stack 0
   222  0000DE                     	ds	1
   223  0000DF                     _Machine_ID:
   224                           	opt stack 0
   225  0000DF                     	ds	1
   226  0000                     _EEADR	set	4009
   227  0000                     _EECON1bits	set	4006
   228  0000                     _EECON2	set	4007
   229  0000                     _EEDATA	set	4008
   230  0000                     _INTCONbits	set	4082
   231  0000                     _LATC	set	3979
   232  0000                     _LATDbits	set	3980
   233  0000                     _OSCCON	set	4051
   234  0000                     _OSCTUNEbits	set	3995
   235  0000                     _PIE1bits	set	3997
   236  0000                     _PIR1bits	set	3998
   237  0000                     _PIR2bits	set	4001
   238  0000                     _PORTB	set	3969
   239  0000                     _PORTBbits	set	3969
   240  0000                     _PORTD	set	3971
   241  0000                     _PORTDbits	set	3971
   242  0000                     _SSPADD	set	4040
   243  0000                     _SSPBUF	set	4041
   244  0000                     _SSPCON1	set	4038
   245  0000                     _SSPCON1bits	set	4038
   246  0000                     _SSPCON2	set	4037
   247  0000                     _SSPSTAT	set	4039
   248  0000                     _SSPSTATbits	set	4039
   249  0000                     _TRISA	set	3986
   250  0000                     _TRISB	set	3987
   251  0000                     _TRISC	set	3988
   252  0000                     _TRISD	set	3989
   253                           
   254                           	psect	mediumconst
   255  007E86                     __pmediumconst:
   256                           	opt stack 0
   257  007E86  00                 	db	0
   258  007E87                     STR_2:
   259  007E87  20                 	db	32
   260  007E88  20                 	db	32
   261  007E89  20                 	db	32
   262  007E8A  20                 	db	32
   263  007E8B  20                 	db	32
   264  007E8C  20                 	db	32
   265  007E8D  20                 	db	32
   266  007E8E  20                 	db	32
   267  007E8F  20                 	db	32
   268  007E90  20                 	db	32
   269  007E91  20                 	db	32
   270  007E92  20                 	db	32
   271  007E93  20                 	db	32
   272  007E94  20                 	db	32
   273  007E95  20                 	db	32
   274  007E96  20                 	db	32
   275  007E97  00                 	db	0
   276  007E98                     STR_4:
   277  007E98  5B                 	db	91	;'['
   278  007E99  20                 	db	32
   279  007E9A  5D                 	db	93	;']'
   280  007E9B  20                 	db	32
   281  007E9C  20                 	db	32
   282  007E9D  20                 	db	32
   283  007E9E  20                 	db	32
   284  007E9F  20                 	db	32
   285  007EA0  20                 	db	32
   286  007EA1  20                 	db	32
   287  007EA2  20                 	db	32
   288  007EA3  20                 	db	32
   289  007EA4  20                 	db	32
   290  007EA5  20                 	db	32
   291  007EA6  20                 	db	32
   292  007EA7  20                 	db	32
   293  007EA8  00                 	db	0
   294  007EA9                     STR_8:
   295  007EA9  52                 	db	82	;'R'
   296  007EAA  65                 	db	101	;'e'
   297  007EAB  73                 	db	115	;'s'
   298  007EAC  70                 	db	112	;'p'
   299  007EAD  6F                 	db	111	;'o'
   300  007EAE  6E                 	db	110	;'n'
   301  007EAF  73                 	db	115	;'s'
   302  007EB0  65                 	db	101	;'e'
   303  007EB1  2E                 	db	46
   304  007EB2  2E                 	db	46
   305  007EB3  2E                 	db	46
   306  007EB4  20                 	db	32
   307  007EB5  20                 	db	32
   308  007EB6  20                 	db	32
   309  007EB7  20                 	db	32
   310  007EB8  20                 	db	32
   311  007EB9  00                 	db	0
   312  007EBA                     STR_15:
   313  007EBA  20                 	db	32
   314  007EBB  20                 	db	32
   315  007EBC  20                 	db	32
   316  007EBD  5B                 	db	91	;'['
   317  007EBE  20                 	db	32
   318  007EBF  41                 	db	65	;'A'
   319  007EC0  64                 	db	100	;'d'
   320  007EC1  69                 	db	105	;'i'
   321  007EC2  74                 	db	116	;'t'
   322  007EC3  75                 	db	117	;'u'
   323  007EC4  6D                 	db	109	;'m'
   324  007EC5  20                 	db	32
   325  007EC6  5D                 	db	93	;']'
   326  007EC7  20                 	db	32
   327  007EC8  20                 	db	32
   328  007EC9  20                 	db	32
   329  007ECA  00                 	db	0
   330  007ECB                     STR_12:
   331  007ECB  20                 	db	32
   332  007ECC  20                 	db	32
   333  007ECD  20                 	db	32
   334  007ECE  20                 	db	32
   335  007ECF  5B                 	db	91	;'['
   336  007ED0  20                 	db	32
   337  007ED1  52                 	db	82	;'R'
   338  007ED2  65                 	db	101	;'e'
   339  007ED3  74                 	db	116	;'t'
   340  007ED4  72                 	db	114	;'r'
   341  007ED5  79                 	db	121	;'y'
   342  007ED6  20                 	db	32
   343  007ED7  5D                 	db	93	;']'
   344  007ED8  20                 	db	32
   345  007ED9  20                 	db	32
   346  007EDA  20                 	db	32
   347  007EDB  00                 	db	0
   348  007EDC                     STR_28:
   349  007EDC  4F                 	db	79	;'O'
   350  007EDD  75                 	db	117	;'u'
   351  007EDE  74                 	db	116	;'t'
   352  007EDF  20                 	db	32
   353  007EE0  6F                 	db	111	;'o'
   354  007EE1  66                 	db	102	;'f'
   355  007EE2  20                 	db	32
   356  007EE3  62                 	db	98	;'b'
   357  007EE4  6F                 	db	111	;'o'
   358  007EE5  75                 	db	117	;'u'
   359  007EE6  6E                 	db	110	;'n'
   360  007EE7  64                 	db	100	;'d'
   361  007EE8  73                 	db	115	;'s'
   362  007EE9  21                 	db	33
   363  007EEA  20                 	db	32
   364  007EEB  20                 	db	32
   365  007EEC  00                 	db	0
   366  007EED                     STR_3:
   367  007EED  45                 	db	69	;'E'
   368  007EEE  6E                 	db	110	;'n'
   369  007EEF  74                 	db	116	;'t'
   370  007EF0  65                 	db	101	;'e'
   371  007EF1  72                 	db	114	;'r'
   372  007EF2  20                 	db	32
   373  007EF3  79                 	db	121	;'y'
   374  007EF4  6F                 	db	111	;'o'
   375  007EF5  75                 	db	117	;'u'
   376  007EF6  72                 	db	114	;'r'
   377  007EF7  20                 	db	32
   378  007EF8  49                 	db	73	;'I'
   379  007EF9  44                 	db	68	;'D'
   380  007EFA  3A                 	db	58	;':'
   381  007EFB  20                 	db	32
   382  007EFC  20                 	db	32
   383  007EFD  00                 	db	0
   384  007EFE                     STR_19:
   385  007EFE  20                 	db	32
   386  007EFF  20                 	db	32
   387  007F00  5B                 	db	91	;'['
   388  007F01  20                 	db	32
   389  007F02  20                 	db	32
   390  007F03  41                 	db	65	;'A'
   391  007F04  64                 	db	100	;'d'
   392  007F05  69                 	db	105	;'i'
   393  007F06  74                 	db	116	;'t'
   394  007F07  75                 	db	117	;'u'
   395  007F08  6D                 	db	109	;'m'
   396  007F09  20                 	db	32
   397  007F0A  20                 	db	32
   398  007F0B  5D                 	db	93	;']'
   399  007F0C  20                 	db	32
   400  007F0D  20                 	db	32
   401  007F0E  00                 	db	0
   402  007F0F                     STR_10:
   403  007F0F  20                 	db	32
   404  007F10  20                 	db	32
   405  007F11  20                 	db	32
   406  007F12  5B                 	db	91	;'['
   407  007F13  20                 	db	32
   408  007F14  57                 	db	87	;'W'
   409  007F15  65                 	db	101	;'e'
   410  007F16  6C                 	db	108	;'l'
   411  007F17  63                 	db	99	;'c'
   412  007F18  6F                 	db	111	;'o'
   413  007F19  6D                 	db	109	;'m'
   414  007F1A  65                 	db	101	;'e'
   415  007F1B  20                 	db	32
   416  007F1C  5D                 	db	93	;']'
   417  007F1D  20                 	db	32
   418  007F1E  20                 	db	32
   419  007F1F  00                 	db	0
   420  007F20                     STR_7:
   421  007F20  57                 	db	87	;'W'
   422  007F21  61                 	db	97	;'a'
   423  007F22  69                 	db	105	;'i'
   424  007F23  74                 	db	116	;'t'
   425  007F24  69                 	db	105	;'i'
   426  007F25  6E                 	db	110	;'n'
   427  007F26  67                 	db	103	;'g'
   428  007F27  20                 	db	32
   429  007F28  53                 	db	83	;'S'
   430  007F29  79                 	db	121	;'y'
   431  007F2A  73                 	db	115	;'s'
   432  007F2B  74                 	db	116	;'t'
   433  007F2C  65                 	db	101	;'e'
   434  007F2D  6D                 	db	109	;'m'
   435  007F2E  20                 	db	32
   436  007F2F  20                 	db	32
   437  007F30  00                 	db	0
   438  007F31                     STR_21:
   439  007F31  4E                 	db	78	;'N'
   440  007F32  65                 	db	101	;'e'
   441  007F33  77                 	db	119	;'w'
   442  007F34  20                 	db	32
   443  007F35  4D                 	db	77	;'M'
   444  007F36  61                 	db	97	;'a'
   445  007F37  63                 	db	99	;'c'
   446  007F38  68                 	db	104	;'h'
   447  007F39  69                 	db	105	;'i'
   448  007F3A  6E                 	db	110	;'n'
   449  007F3B  65                 	db	101	;'e'
   450  007F3C  20                 	db	32
   451  007F3D  49                 	db	73	;'I'
   452  007F3E  44                 	db	68	;'D'
   453  007F3F  3A                 	db	58	;':'
   454  007F40  20                 	db	32
   455  007F41  00                 	db	0
   456  007F42                     STR_5:
   457  007F42  45                 	db	69	;'E'
   458  007F43  6E                 	db	110	;'n'
   459  007F44  74                 	db	116	;'t'
   460  007F45  65                 	db	101	;'e'
   461  007F46  72                 	db	114	;'r'
   462  007F47  20                 	db	32
   463  007F48  79                 	db	121	;'y'
   464  007F49  6F                 	db	111	;'o'
   465  007F4A  75                 	db	117	;'u'
   466  007F4B  72                 	db	114	;'r'
   467  007F4C  20                 	db	32
   468  007F4D  50                 	db	80	;'P'
   469  007F4E  49                 	db	73	;'I'
   470  007F4F  4E                 	db	78	;'N'
   471  007F50  3A                 	db	58	;':'
   472  007F51  20                 	db	32
   473  007F52  00                 	db	0
   474  007F53                     STR_27:
   475  007F53  4D                 	db	77	;'M'
   476  007F54  61                 	db	97	;'a'
   477  007F55  79                 	db	121	;'y'
   478  007F56  20                 	db	32
   479  007F57  6E                 	db	110	;'n'
   480  007F58  6F                 	db	111	;'o'
   481  007F59  74                 	db	116	;'t'
   482  007F5A  20                 	db	32
   483  007F5B  62                 	db	98	;'b'
   484  007F5C  65                 	db	101	;'e'
   485  007F5D  20                 	db	32
   486  007F5E  7A                 	db	122	;'z'
   487  007F5F  65                 	db	101	;'e'
   488  007F60  72                 	db	114	;'r'
   489  007F61  6F                 	db	111	;'o'
   490  007F62  21                 	db	33
   491  007F63  00                 	db	0
   492  007F64                     STR_20:
   493  007F64  4C                 	db	76	;'L'
   494  007F65  6F                 	db	111	;'o'
   495  007F66  61                 	db	97	;'a'
   496  007F67  64                 	db	100	;'d'
   497  007F68  20                 	db	32
   498  007F69  49                 	db	73	;'I'
   499  007F6A  32                 	db	50	;'2'
   500  007F6B  43                 	db	67	;'C'
   501  007F6C  20                 	db	32
   502  007F6D  73                 	db	115	;'s'
   503  007F6E  65                 	db	101	;'e'
   504  007F6F  74                 	db	116	;'t'
   505  007F70  75                 	db	117	;'u'
   506  007F71  70                 	db	112	;'p'
   507  007F72  2E                 	db	46
   508  007F73  2E                 	db	46
   509  007F74  00                 	db	0
   510  007F75                     STR_30:
   511  007F75  4C                 	db	76	;'L'
   512  007F76  6F                 	db	111	;'o'
   513  007F77  67                 	db	103	;'g'
   514  007F78  67                 	db	103	;'g'
   515  007F79  69                 	db	105	;'i'
   516  007F7A  6E                 	db	110	;'n'
   517  007F7B  67                 	db	103	;'g'
   518  007F7C  20                 	db	32
   519  007F7D  79                 	db	121	;'y'
   520  007F7E  6F                 	db	111	;'o'
   521  007F7F  75                 	db	117	;'u'
   522  007F80  20                 	db	32
   523  007F81  6F                 	db	111	;'o'
   524  007F82  75                 	db	117	;'u'
   525  007F83  74                 	db	116	;'t'
   526  007F84  2E                 	db	46
   527  007F85  00                 	db	0
   528  007F86                     STR_26:
   529  007F86  49                 	db	73	;'I'
   530  007F87  32                 	db	50	;'2'
   531  007F88  43                 	db	67	;'C'
   532  007F89  5F                 	db	95	;'_'
   533  007F8A  41                 	db	65	;'A'
   534  007F8B  44                 	db	68	;'D'
   535  007F8C  44                 	db	68	;'D'
   536  007F8D  52                 	db	82	;'R'
   537  007F8E  3E                 	db	62	;'>'
   538  007F8F  3E                 	db	62	;'>'
   539  007F90  45                 	db	69	;'E'
   540  007F91  45                 	db	69	;'E'
   541  007F92  50                 	db	80	;'P'
   542  007F93  52                 	db	82	;'R'
   543  007F94  4F                 	db	79	;'O'
   544  007F95  4D                 	db	77	;'M'
   545  007F96  00                 	db	0
   546  007F97                     STR_13:
   547  007F97  5B                 	db	91	;'['
   548  007F98  20                 	db	32
   549  007F99  53                 	db	83	;'S'
   550  007F9A  79                 	db	121	;'y'
   551  007F9B  73                 	db	115	;'s'
   552  007F9C  74                 	db	116	;'t'
   553  007F9D  65                 	db	101	;'e'
   554  007F9E  6D                 	db	109	;'m'
   555  007F9F  20                 	db	32
   556  007FA0  45                 	db	69	;'E'
   557  007FA1  72                 	db	114	;'r'
   558  007FA2  72                 	db	114	;'r'
   559  007FA3  6F                 	db	111	;'o'
   560  007FA4  72                 	db	114	;'r'
   561  007FA5  20                 	db	32
   562  007FA6  5D                 	db	93	;']'
   563  007FA7  00                 	db	0
   564  007FA8                     STR_22:
   565  007FA8  20                 	db	32
   566  007FA9  20                 	db	32
   567  007FAA  20                 	db	32
   568  007FAB  20                 	db	32
   569  007FAC  20                 	db	32
   570  007FAD  20                 	db	32
   571  007FAE  20                 	db	32
   572  007FAF  5B                 	db	91	;'['
   573  007FB0  30                 	db	48	;'0'
   574  007FB1  30                 	db	48	;'0'
   575  007FB2  31                 	db	49	;'1'
   576  007FB3  2D                 	db	45
   577  007FB4  31                 	db	49	;'1'
   578  007FB5  30                 	db	48	;'0'
   579  007FB6  30                 	db	48	;'0'
   580  007FB7  5D                 	db	93	;']'
   581  007FB8  00                 	db	0
   582  007FB9                     STR_11:
   583  007FB9  5B                 	db	91	;'['
   584  007FBA  41                 	db	65	;'A'
   585  007FBB  63                 	db	99	;'c'
   586  007FBC  63                 	db	99	;'c'
   587  007FBD  65                 	db	101	;'e'
   588  007FBE  73                 	db	115	;'s'
   589  007FBF  73                 	db	115	;'s'
   590  007FC0  20                 	db	32
   591  007FC1  20                 	db	32
   592  007FC2  44                 	db	68	;'D'
   593  007FC3  65                 	db	101	;'e'
   594  007FC4  6E                 	db	110	;'n'
   595  007FC5  69                 	db	105	;'i'
   596  007FC6  65                 	db	101	;'e'
   597  007FC7  64                 	db	100	;'d'
   598  007FC8  5D                 	db	93	;']'
   599  007FC9  00                 	db	0
   600  007FCA                     STR_9:
   601  007FCA  5B                 	db	91	;'['
   602  007FCB  41                 	db	65	;'A'
   603  007FCC  63                 	db	99	;'c'
   604  007FCD  63                 	db	99	;'c'
   605  007FCE  65                 	db	101	;'e'
   606  007FCF  73                 	db	115	;'s'
   607  007FD0  73                 	db	115	;'s'
   608  007FD1  20                 	db	32
   609  007FD2  47                 	db	71	;'G'
   610  007FD3  72                 	db	114	;'r'
   611  007FD4  61                 	db	97	;'a'
   612  007FD5  6E                 	db	110	;'n'
   613  007FD6  74                 	db	116	;'t'
   614  007FD7  65                 	db	101	;'e'
   615  007FD8  64                 	db	100	;'d'
   616  007FD9  5D                 	db	93	;']'
   617  007FDA  00                 	db	0
   618  007FDB                     STR_18:
   619  007FDB  44                 	db	68	;'D'
   620  007FDC  65                 	db	101	;'e'
   621  007FDD  76                 	db	118	;'v'
   622  007FDE  69                 	db	105	;'i'
   623  007FDF  63                 	db	99	;'c'
   624  007FE0  65                 	db	101	;'e'
   625  007FE1  20                 	db	32
   626  007FE2  49                 	db	73	;'I'
   627  007FE3  44                 	db	68	;'D'
   628  007FE4  20                 	db	32
   629  007FE5  00                 	db	0
   630  007FE6                     STR_17:
   631  007FE6  31                 	db	49	;'1'
   632  007FE7  2E                 	db	46
   633  007FE8  30                 	db	48	;'0'
   634  007FE9  2E                 	db	46
   635  007FEA  30                 	db	48	;'0'
   636  007FEB  00                 	db	0
   637  007FEC                     STR_29:
   638  007FEC  30                 	db	48	;'0'
   639  007FED  30                 	db	48	;'0'
   640  007FEE  3A                 	db	58	;':'
   641  007FEF  30                 	db	48	;'0'
   642  007FF0  30                 	db	48	;'0'
   643  007FF1  00                 	db	0
   644  007FF2                     STR_16:
   645  007FF2  52                 	db	82	;'R'
   646  007FF3  65                 	db	101	;'e'
   647  007FF4  76                 	db	118	;'v'
   648  007FF5  20                 	db	32
   649  007FF6  00                 	db	0
   650  007FF7                     STR_24:
   651  007FF7  5B                 	db	91	;'['
   652  007FF8  4F                 	db	79	;'O'
   653  007FF9  4B                 	db	75	;'K'
   654  007FFA  5D                 	db	93	;']'
   655  007FFB  00                 	db	0
   656  007FFC                     STR_25:
   657  007FFC  78                 	db	120	;'x'
   658  007FFD  00                 	db	0
   659  0000                     
   660                           ; #config settings
   661  007FFE  00                 	db	0	; dummy byte at the end
   662  0000                     
   663                           	psect	cinit
   664  001736                     __pcinit:
   665                           	opt stack 0
   666  001736                     start_initialization:
   667                           	opt stack 0
   668  001736                     __initialization:
   669                           	opt stack 0
   670                           
   671                           ; Clear objects allocated to BANK0 (36 bytes)
   672  001736  EE00  F0BA         	lfsr	0,__pbssBANK0
   673  00173A  0E24               	movlw	36
   674  00173C                     clear_0:
   675  00173C  6AEE               	clrf	postinc0,c
   676  00173E  06E8               	decf	wreg,f,c
   677  001740  E1FD               	bnz	clear_0
   678                           
   679                           ; Clear objects allocated to COMRAM (2 bytes)
   680  001742  6A4F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   681  001744  6A4E               	clrf	__pbssCOMRAM& (0+255),c
   682                           
   683                           ; Initialize objects allocated to BANK1 (64 bytes)
   684                           ; load TBLPTR registers with __pidataBANK1
   685  001746  0E06               	movlw	low __pidataBANK1
   686  001748  6EF6               	movwf	tblptrl,c
   687  00174A  0E1A               	movlw	high __pidataBANK1
   688  00174C  6EF7               	movwf	tblptrh,c
   689  00174E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   690  001750  6EF8               	movwf	tblptru,c
   691  001752  EE01  F000         	lfsr	0,__pdataBANK1
   692  001756  EE10 F040          	lfsr	1,64
   693  00175A                     copy_data0:
   694  00175A  0009               	tblrd		*+
   695  00175C  CFF5 FFEE          	movff	tablat,postinc0
   696  001760  50E5               	movf	postdec1,w,c
   697  001762  50E1               	movf	fsr1l,w,c
   698  001764  E1FA               	bnz	copy_data0
   699                           
   700                           ; Initialize objects allocated to BANK0 (40 bytes)
   701                           ; load TBLPTR registers with __pidataBANK0
   702  001766  0EE2               	movlw	low __pidataBANK0
   703  001768  6EF6               	movwf	tblptrl,c
   704  00176A  0E1A               	movlw	high __pidataBANK0
   705  00176C  6EF7               	movwf	tblptrh,c
   706  00176E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   707  001770  6EF8               	movwf	tblptru,c
   708  001772  EE00  F092         	lfsr	0,__pdataBANK0
   709  001776  EE10 F028          	lfsr	1,40
   710  00177A                     copy_data1:
   711  00177A  0009               	tblrd		*+
   712  00177C  CFF5 FFEE          	movff	tablat,postinc0
   713  001780  50E5               	movf	postdec1,w,c
   714  001782  50E1               	movf	fsr1l,w,c
   715  001784  E1FA               	bnz	copy_data1
   716                           
   717                           ; Initialize objects allocated to COMRAM (31 bytes)
   718                           ; load TBLPTR registers with __pidataCOMRAM
   719  001786  0E74               	movlw	low __pidataCOMRAM
   720  001788  6EF6               	movwf	tblptrl,c
   721  00178A  0E1B               	movlw	high __pidataCOMRAM
   722  00178C  6EF7               	movwf	tblptrh,c
   723  00178E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   724  001790  6EF8               	movwf	tblptru,c
   725  001792  EE00  F02F         	lfsr	0,__pdataCOMRAM
   726  001796  EE10 F01F          	lfsr	1,31
   727  00179A                     copy_data2:
   728  00179A  0009               	tblrd		*+
   729  00179C  CFF5 FFEE          	movff	tablat,postinc0
   730  0017A0  50E5               	movf	postdec1,w,c
   731  0017A2  50E1               	movf	fsr1l,w,c
   732  0017A4  E1FA               	bnz	copy_data2
   733  0017A6                     end_of_initialization:
   734                           	opt stack 0
   735  0017A6                     __end_of__initialization:
   736                           	opt stack 0
   737  0017A6  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   738  0017A8  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   739  0017AA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   740  0017AC  6EF8               	movwf	tblptru,c
   741  0017AE  0100               	movlb	0
   742  0017B0  EF81  F000         	goto	_main	;jump to C main() function
   743                           tblptru	equ	0xFF8
   744                           tblptrh	equ	0xFF7
   745                           tblptrl	equ	0xFF6
   746                           tablat	equ	0xFF5
   747                           postinc0	equ	0xFEE
   748                           wreg	equ	0xFE8
   749                           postdec1	equ	0xFE5
   750                           fsr1l	equ	0xFE1
   751                           
   752                           	psect	bssCOMRAM
   753  00004E                     __pbssCOMRAM:
   754                           	opt stack 0
   755  00004E                     _i2c_byte_count:
   756                           	opt stack 0
   757  00004E                     	ds	1
   758  00004F                     _i2c_reg_addr:
   759                           	opt stack 0
   760  00004F                     	ds	1
   761                           tblptru	equ	0xFF8
   762                           tblptrh	equ	0xFF7
   763                           tblptrl	equ	0xFF6
   764                           tablat	equ	0xFF5
   765                           postinc0	equ	0xFEE
   766                           wreg	equ	0xFE8
   767                           postdec1	equ	0xFE5
   768                           fsr1l	equ	0xFE1
   769                           
   770                           	psect	dataCOMRAM
   771  00002F                     __pdataCOMRAM:
   772                           	opt stack 0
   773  00002F                     _hx:
   774                           	opt stack 0
   775  00002F                     	ds	16
   776  00003F                     menu_seconds_to_mmss@F3627:
   777                           	opt stack 0
   778  00003F                     	ds	10
   779  000049                     menu_main@F3618:
   780                           	opt stack 0
   781  000049                     	ds	5
   782                           tblptru	equ	0xFF8
   783                           tblptrh	equ	0xFF7
   784                           tblptrl	equ	0xFF6
   785                           tablat	equ	0xFF5
   786                           postinc0	equ	0xFEE
   787                           wreg	equ	0xFE8
   788                           postdec1	equ	0xFE5
   789                           fsr1l	equ	0xFE1
   790                           
   791                           	psect	bssBANK0
   792  0000BA                     __pbssBANK0:
   793                           	opt stack 0
   794  0000BA                     _logged_user:
   795                           	opt stack 0
   796  0000BA                     	ds	16
   797  0000CA                     _current_pin:
   798                           	opt stack 0
   799  0000CA                     	ds	9
   800  0000D3                     _current_user:
   801                           	opt stack 0
   802  0000D3                     	ds	9
   803  0000DC                     _EEP_I2C_ADDR:
   804                           	opt stack 0
   805  0000DC                     	ds	1
   806  0000DD                     _credentials_accepted:
   807                           	opt stack 0
   808  0000DD                     	ds	1
   809                           tblptru	equ	0xFF8
   810                           tblptrh	equ	0xFF7
   811                           tblptrl	equ	0xFF6
   812                           tablat	equ	0xFF5
   813                           postinc0	equ	0xFEE
   814                           wreg	equ	0xFE8
   815                           postdec1	equ	0xFE5
   816                           fsr1l	equ	0xFE1
   817                           
   818                           	psect	dataBANK0
   819  000092                     __pdataBANK0:
   820                           	opt stack 0
   821  000092                     _c:
   822                           	opt stack 0
   823  000092                     	ds	10
   824  00009C                     main@F3681:
   825                           	opt stack 0
   826  00009C                     	ds	10
   827  0000A6                     running_display@F3744:
   828                           	opt stack 0
   829  0000A6                     	ds	10
   830  0000B0                     running_display@F3741:
   831                           	opt stack 0
   832  0000B0                     	ds	5
   833  0000B5                     start_routine@F3718:
   834                           	opt stack 0
   835  0000B5                     	ds	3
   836  0000B8                     _login_timeout:
   837                           	opt stack 0
   838  0000B8                     	ds	2
   839                           tblptru	equ	0xFF8
   840                           tblptrh	equ	0xFF7
   841                           tblptrl	equ	0xFF6
   842                           tablat	equ	0xFF5
   843                           postinc0	equ	0xFEE
   844                           wreg	equ	0xFE8
   845                           postdec1	equ	0xFE5
   846                           fsr1l	equ	0xFE1
   847                           
   848                           	psect	dataBANK1
   849  000100                     __pdataBANK1:
   850                           	opt stack 0
   851  000100                     _i2c_r_reg:
   852                           	opt stack 0
   853  000100                     	ds	32
   854  000120                     _i2c_w_reg:
   855                           	opt stack 0
   856  000120                     	ds	32
   857                           tblptru	equ	0xFF8
   858                           tblptrh	equ	0xFF7
   859                           tblptrl	equ	0xFF6
   860                           tablat	equ	0xFF5
   861                           postinc0	equ	0xFEE
   862                           wreg	equ	0xFE8
   863                           postdec1	equ	0xFE5
   864                           fsr1l	equ	0xFE1
   865                           
   866                           	psect	cstackBANK1
   867  000140                     __pcstackBANK1:
   868                           	opt stack 0
   869  000140                     main@c:
   870                           	opt stack 0
   871                           
   872                           ; 10 bytes @ 0x0
   873  000140                     	ds	10
   874  00014A                     main@buffer:
   875                           	opt stack 0
   876                           
   877                           ; 9 bytes @ 0xA
   878  00014A                     	ds	9
   879  000153                     main@i_790:
   880                           	opt stack 0
   881                           
   882                           ; 2 bytes @ 0x13
   883  000153                     	ds	2
   884  000155                     main@i_793:
   885                           	opt stack 0
   886                           
   887                           ; 2 bytes @ 0x15
   888  000155                     	ds	2
   889  000157                     main@i_796:
   890                           	opt stack 0
   891                           
   892                           ; 2 bytes @ 0x17
   893  000157                     	ds	2
   894  000159                     main@credential_state:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0x19
   898  000159                     	ds	1
   899  00015A                     main@i_782:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0x1A
   903  00015A                     	ds	2
   904  00015C                     main@i_786:
   905                           	opt stack 0
   906                           
   907                           ; 2 bytes @ 0x1C
   908  00015C                     	ds	2
   909  00015E                     main@i:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x1E
   913  00015E                     	ds	2
   914  000160                     main@i_776:
   915                           	opt stack 0
   916                           
   917                           ; 2 bytes @ 0x20
   918  000160                     	ds	2
   919  000162                     main@u:
   920                           	opt stack 0
   921                           
   922                           ; 2 bytes @ 0x22
   923  000162                     	ds	2
   924  000164                     main@i_773:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x24
   928  000164                     	ds	2
   929  000166                     main@p:
   930                           	opt stack 0
   931                           
   932                           ; 1 bytes @ 0x26
   933  000166                     	ds	1
   934  000167                     main@n:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x27
   938  000167                     	ds	1
   939  000168                     main@x:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x28
   943  000168                     	ds	1
   944                           tblptru	equ	0xFF8
   945                           tblptrh	equ	0xFF7
   946                           tblptrl	equ	0xFF6
   947                           tablat	equ	0xFF5
   948                           postinc0	equ	0xFEE
   949                           wreg	equ	0xFE8
   950                           postdec1	equ	0xFE5
   951                           fsr1l	equ	0xFE1
   952                           
   953                           	psect	cstackBANK0
   954  000060                     __pcstackBANK0:
   955                           	opt stack 0
   956  000060                     menu_progress_bar@d:
   957                           	opt stack 0
   958                           
   959                           ; 4 bytes @ 0x0
   960  000060                     	ds	4
   961  000064                     menu_progress_bar@ii:
   962                           	opt stack 0
   963                           
   964                           ; 2 bytes @ 0x4
   965  000064                     	ds	2
   966  000066                     menu_progress_bar@i:
   967                           	opt stack 0
   968                           
   969                           ; 2 bytes @ 0x6
   970  000066                     	ds	2
   971  000068                     menu_progress_bar@i_727:
   972                           	opt stack 0
   973                           
   974                           ; 2 bytes @ 0x8
   975  000068                     	ds	2
   976  00006A                     menu_progress_bar@i_728:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0xA
   980  00006A                     	ds	2
   981  00006C                     menu_progress_bar@i_729:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0xC
   985  00006C                     	ds	2
   986  00006E                     start_routine@h:
   987                           	opt stack 0
   988  00006E                     running_display@t:
   989                           	opt stack 0
   990                           
   991                           ; 5 bytes @ 0xE
   992  00006E                     	ds	1
   993  00006F                     start_routine@l:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0xF
   997  00006F                     	ds	1
   998  000070                     start_routine@error_msg:
   999                           	opt stack 0
  1000                           
  1001                           ; 2 bytes @ 0x10
  1002  000070                     	ds	2
  1003  000072                     start_routine@d1:
  1004                           	opt stack 0
  1005                           
  1006                           ; 1 bytes @ 0x12
  1007  000072                     	ds	1
  1008  000073                     start_routine@v:
  1009                           	opt stack 0
  1010  000073                     running_display@hour:
  1011                           	opt stack 0
  1012                           
  1013                           ; 2 bytes @ 0x13
  1014  000073                     	ds	1
  1015  000074                     start_routine@i:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0x14
  1019  000074                     	ds	1
  1020  000075                     running_display@n:
  1021                           	opt stack 0
  1022                           
  1023                           ; 10 bytes @ 0x15
  1024  000075                     	ds	1
  1025  000076                     start_routine@i_875:
  1026                           	opt stack 0
  1027                           
  1028                           ; 2 bytes @ 0x16
  1029  000076                     	ds	2
  1030  000078                     start_routine@i_883:
  1031                           	opt stack 0
  1032                           
  1033                           ; 2 bytes @ 0x18
  1034  000078                     	ds	2
  1035  00007A                     start_routine@i_901:
  1036                           	opt stack 0
  1037                           
  1038                           ; 2 bytes @ 0x1A
  1039  00007A                     	ds	2
  1040  00007C                     start_routine@i_904:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x1C
  1044  00007C                     	ds	2
  1045  00007E                     start_routine@i_907:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x1E
  1049  00007E                     	ds	1
  1050  00007F                     running_display@exit_running:
  1051                           	opt stack 0
  1052                           
  1053                           ; 1 bytes @ 0x1F
  1054  00007F                     	ds	1
  1055  000080                     running_display@i_914:
  1056                           	opt stack 0
  1057  000080                     start_routine@b:
  1058                           	opt stack 0
  1059                           
  1060                           ; 3 bytes @ 0x20
  1061  000080                     	ds	2
  1062  000082                     running_display@is_leading_zero:
  1063                           	opt stack 0
  1064                           
  1065                           ; 1 bytes @ 0x22
  1066  000082                     	ds	1
  1067  000083                     running_display@n_c:
  1068                           	opt stack 0
  1069  000083                     start_routine@i_898:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x23
  1073  000083                     	ds	1
  1074  000084                     running_display@ms:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x24
  1078  000084                     	ds	1
  1079  000085                     start_routine@i_908:
  1080                           	opt stack 0
  1081                           
  1082                           ; 2 bytes @ 0x25
  1083  000085                     	ds	1
  1084  000086                     running_display@minute:
  1085                           	opt stack 0
  1086                           
  1087                           ; 2 bytes @ 0x26
  1088  000086                     	ds	1
  1089  000087                     start_routine@I2C_new_ADDR:
  1090                           	opt stack 0
  1091                           
  1092                           ; 3 bytes @ 0x27
  1093  000087                     	ds	1
  1094  000088                     running_display@i_915:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x28
  1098  000088                     	ds	2
  1099  00008A                     start_routine@a:
  1100                           	opt stack 0
  1101  00008A                     running_display@s:
  1102                           	opt stack 0
  1103                           
  1104                           ; 2 bytes @ 0x2A
  1105  00008A                     	ds	1
  1106  00008B                     start_routine@dt:
  1107                           	opt stack 0
  1108                           
  1109                           ; 1 bytes @ 0x2B
  1110  00008B                     	ds	1
  1111  00008C                     start_routine@i_895:
  1112                           	opt stack 0
  1113  00008C                     running_display@i:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x2C
  1117  00008C                     	ds	2
  1118  00008E                     start_routine@dh:
  1119                           	opt stack 0
  1120  00008E                     running_display@second:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x2E
  1124  00008E                     	ds	1
  1125  00008F                     start_routine@x:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0x2F
  1129  00008F                     	ds	1
  1130  000090                     start_routine@n:
  1131                           	opt stack 0
  1132                           
  1133                           ; 1 bytes @ 0x30
  1134  000090                     	ds	1
  1135  000091                     start_routine@new_I2C_address:
  1136                           	opt stack 0
  1137                           
  1138                           ; 1 bytes @ 0x31
  1139  000091                     	ds	1
  1140                           tblptru	equ	0xFF8
  1141                           tblptrh	equ	0xFF7
  1142                           tblptrl	equ	0xFF6
  1143                           tablat	equ	0xFF5
  1144                           postinc0	equ	0xFEE
  1145                           wreg	equ	0xFE8
  1146                           postdec1	equ	0xFE5
  1147                           fsr1l	equ	0xFE1
  1148                           
  1149                           	psect	cstackCOMRAM
  1150  000001                     __pcstackCOMRAM:
  1151                           	opt stack 0
  1152  000001                     ??_ISR:
  1153                           
  1154                           ; 1 bytes @ 0x0
  1155  000001                     	ds	14
  1156  00000F                     ISR@sspBuf:
  1157                           	opt stack 0
  1158                           
  1159                           ; 1 bytes @ 0xE
  1160  00000F                     	ds	1
  1161  000010                     ?___awdiv:
  1162                           	opt stack 0
  1163  000010                     ?___awmod:
  1164                           	opt stack 0
  1165  000010                     ?___lwdiv:
  1166                           	opt stack 0
  1167  000010                     Lcd_Port@a:
  1168                           	opt stack 0
  1169  000010                     Eeprom_Read_Byte@address:
  1170                           	opt stack 0
  1171  000010                     Eeprom_Write_Byte@data:
  1172                           	opt stack 0
  1173  000010                     latch_keypad@x:
  1174                           	opt stack 0
  1175  000010                     ___awdiv@dividend:
  1176                           	opt stack 0
  1177  000010                     ___awmod@dividend:
  1178                           	opt stack 0
  1179  000010                     ___lwdiv@dividend:
  1180                           	opt stack 0
  1181                           
  1182                           ; 2 bytes @ 0xF
  1183  000010                     	ds	1
  1184  000011                     Lcd_Cmd@a:
  1185                           	opt stack 0
  1186  000011                     Lcd_Write_Char@temp:
  1187                           	opt stack 0
  1188  000011                     Eeprom_Write_Byte@address:
  1189                           	opt stack 0
  1190                           
  1191                           ; 1 bytes @ 0x10
  1192  000011                     	ds	1
  1193  000012                     ??_latch_keypad:
  1194  000012                     ??_Lcd_Clear:
  1195  000012                     ??_Lcd_Init:
  1196  000012                     Lcd_Set_Cursor@b:
  1197                           	opt stack 0
  1198  000012                     Lcd_Write_Char@y:
  1199                           	opt stack 0
  1200  000012                     ___awdiv@divisor:
  1201                           	opt stack 0
  1202  000012                     ___awmod@divisor:
  1203                           	opt stack 0
  1204  000012                     ___lwdiv@divisor:
  1205                           	opt stack 0
  1206                           
  1207                           ; 2 bytes @ 0x11
  1208  000012                     	ds	1
  1209  000013                     Lcd_Set_Cursor@a:
  1210                           	opt stack 0
  1211  000013                     Lcd_Write_Char@a:
  1212                           	opt stack 0
  1213                           
  1214                           ; 1 bytes @ 0x12
  1215  000013                     	ds	1
  1216  000014                     Lcd_Set_Cursor@z:
  1217                           	opt stack 0
  1218  000014                     ___awdiv@counter:
  1219                           	opt stack 0
  1220  000014                     ___awmod@counter:
  1221                           	opt stack 0
  1222  000014                     ___lwdiv@counter:
  1223                           	opt stack 0
  1224  000014                     Lcd_Write_String@a:
  1225                           	opt stack 0
  1226                           
  1227                           ; 2 bytes @ 0x13
  1228  000014                     	ds	1
  1229  000015                     Lcd_Set_Cursor@y:
  1230                           	opt stack 0
  1231  000015                     ___awdiv@sign:
  1232                           	opt stack 0
  1233  000015                     ___awmod@sign:
  1234                           	opt stack 0
  1235  000015                     ___lwdiv@quotient:
  1236                           	opt stack 0
  1237                           
  1238                           ; 2 bytes @ 0x14
  1239  000015                     	ds	1
  1240  000016                     ??_Lcd_Write_String:
  1241  000016                     Lcd_Set_Cursor@temp:
  1242                           	opt stack 0
  1243  000016                     ___awdiv@quotient:
  1244                           	opt stack 0
  1245                           
  1246                           ; 2 bytes @ 0x15
  1247  000016                     	ds	1
  1248  000017                     ?___wmul:
  1249                           	opt stack 0
  1250  000017                     ___wmul@multiplier:
  1251                           	opt stack 0
  1252                           
  1253                           ; 2 bytes @ 0x16
  1254  000017                     	ds	1
  1255  000018                     ??_load_i2c_registers:
  1256  000018                     Lcd_Write_String@i:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x17
  1260  000018                     	ds	1
  1261  000019                     ___wmul@multiplicand:
  1262                           	opt stack 0
  1263                           
  1264                           ; 2 bytes @ 0x18
  1265  000019                     	ds	2
  1266  00001B                     ___wmul@product:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x1A
  1270  00001B                     	ds	1
  1271  00001C                     load_i2c_registers@checksum:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x1B
  1275  00001C                     	ds	1
  1276  00001D                     menu_progress_bar@load_time_ms:
  1277                           	opt stack 0
  1278                           
  1279                           ; 2 bytes @ 0x1C
  1280  00001D                     	ds	1
  1281  00001E                     load_i2c_registers@i_841:
  1282                           	opt stack 0
  1283                           
  1284                           ; 2 bytes @ 0x1D
  1285  00001E                     	ds	1
  1286  00001F                     ??_menu_progress_bar:
  1287                           
  1288                           ; 1 bytes @ 0x1E
  1289  00001F                     	ds	1
  1290  000020                     load_i2c_registers@i:
  1291                           	opt stack 0
  1292                           
  1293                           ; 2 bytes @ 0x1F
  1294  000020                     	ds	2
  1295  000022                     load_i2c_registers@i_839:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x21
  1299  000022                     	ds	1
  1300  000023                     ??_start_routine:
  1301  000023                     ??_running_display:
  1302                           
  1303                           ; 1 bytes @ 0x22
  1304  000023                     	ds	4
  1305  000027                     ??_main:
  1306                           
  1307                           ; 1 bytes @ 0x26
  1308  000027                     	ds	8
  1309                           tblptru	equ	0xFF8
  1310                           tblptrh	equ	0xFF7
  1311                           tblptrl	equ	0xFF6
  1312                           tablat	equ	0xFF5
  1313                           postinc0	equ	0xFEE
  1314                           wreg	equ	0xFE8
  1315                           postdec1	equ	0xFE5
  1316                           fsr1l	equ	0xFE1
  1317                           
  1318 ;;
  1319 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  1320 ;;
  1321 ;; *************** function _main *****************
  1322 ;; Defined at:
  1323 ;;		line 50 in file "main.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;		None
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;  i               2   23[BANK1 ] int 
  1328 ;;  i               2   21[BANK1 ] int 
  1329 ;;  i               2   19[BANK1 ] int 
  1330 ;;  u               2   34[BANK1 ] int 
  1331 ;;  i               2   28[BANK1 ] int 
  1332 ;;  i               2   26[BANK1 ] int 
  1333 ;;  c              10    0[BANK1 ] unsigned char [10]
  1334 ;;  i               2   32[BANK1 ] int 
  1335 ;;  i               2   36[BANK1 ] int 
  1336 ;;  buffer          9   10[BANK1 ] unsigned char [9]
  1337 ;;  credential_s    1   25[BANK1 ] unsigned char 
  1338 ;;  i               2   30[BANK1 ] int 
  1339 ;;  x               1   40[BANK1 ] unsigned char 
  1340 ;;  n               1   39[BANK1 ] unsigned char 
  1341 ;;  p               1   38[BANK1 ] unsigned char 
  1342 ;; Return value:  Size  Location     Type
  1343 ;;                  1    wreg      void 
  1344 ;; Registers used:
  1345 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1351 ;;      Params:         0       0       0       0       0       0       0
  1352 ;;      Locals:         0       0      41       0       0       0       0
  1353 ;;      Temps:          8       0       0       0       0       0       0
  1354 ;;      Totals:         8       0      41       0       0       0       0
  1355 ;;Total ram usage:       49 bytes
  1356 ;; Hardware stack levels required when called:    6
  1357 ;; This function calls:
  1358 ;;		_Lcd_Init
  1359 ;;		_Lcd_Set_Cursor
  1360 ;;		_Lcd_Write_Char
  1361 ;;		_Lcd_Write_String
  1362 ;;		_latch_keypad
  1363 ;;		_load_i2c_registers
  1364 ;;		_mcu_initialise
  1365 ;;		_menu_progress_bar
  1366 ;;		_read_keypad
  1367 ;;		_running_display
  1368 ;;		_start_routine
  1369 ;; This function is called by:
  1370 ;;		Startup code after reset
  1371 ;; This function uses a non-reentrant model
  1372 ;;
  1373                           
  1374                           	psect	text0
  1375  000102                     __ptext0:
  1376                           	opt stack 0
  1377  000102                     _main:
  1378                           	opt stack 25
  1379                           
  1380                           ;main.c: 54: unsigned char n = 0, p = 0;
  1381                           
  1382                           ;incstack = 0
  1383  000102  0E00               	movlw	0
  1384  000104  0101               	movlb	1	; () banked
  1385  000106  6F67               	movwf	main@n& (0+255),b
  1386  000108  0E00               	movlw	0
  1387  00010A  0101               	movlb	1	; () banked
  1388  00010C  6F66               	movwf	main@p& (0+255),b
  1389                           
  1390                           ;main.c: 55: unsigned char x = '_';
  1391  00010E  0E5F               	movlw	95
  1392  000110  0101               	movlb	1	; () banked
  1393  000112  6F68               	movwf	main@x& (0+255),b
  1394                           
  1395                           ; BSR set to: 1
  1396                           ;main.c: 58: mcu_initialise();
  1397  000114  EC87  F00C         	call	_mcu_initialise	;wreg free
  1398                           
  1399                           ;main.c: 59: Lcd_Init();
  1400  000118  ECDA  F00B         	call	_Lcd_Init	;wreg free
  1401                           
  1402                           ;main.c: 63: start_routine();
  1403  00011C  EC85  F004         	call	_start_routine	;wreg free
  1404  000120                     l4504:
  1405                           
  1406                           ;main.c: 67: {
  1407                           ;main.c: 68: PORTDbits.RD7 = 0;
  1408  000120  9E83               	bcf	3971,7,c	;volatile
  1409                           
  1410                           ;main.c: 69: for (int i = 0; i < 32; i++)
  1411  000122  0E00               	movlw	0
  1412  000124  0101               	movlb	1	; () banked
  1413  000126  6F5F               	movwf	(main@i+1)& (0+255),b
  1414  000128  0E00               	movlw	0
  1415  00012A  6F5E               	movwf	main@i& (0+255),b
  1416                           
  1417                           ; BSR set to: 1
  1418  00012C  0101               	movlb	1	; () banked
  1419  00012E  BF5F               	btfsc	(main@i+1)& (0+255),7,b
  1420  000130  D00A               	goto	l4512
  1421  000132  0101               	movlb	1	; () banked
  1422  000134  515F               	movf	(main@i+1)& (0+255),w,b
  1423  000136  E106               	bnz	u4270
  1424  000138  0E20               	movlw	32
  1425  00013A  0101               	movlb	1	; () banked
  1426  00013C  5D5E               	subwf	main@i& (0+255),w,b
  1427  00013E  B0D8               	btfsc	status,0,c
  1428  000140  D3DF               	goto	l4784
  1429  000142  D001               	goto	l4512
  1430  000144                     u4270:
  1431                           
  1432                           ; BSR set to: 1
  1433  000144  D3DD               	goto	l4784
  1434  000146                     l4512:
  1435                           
  1436                           ; BSR set to: 1
  1437                           ;main.c: 70: {
  1438                           ;main.c: 71: i2c_w_reg[i] = '-';
  1439  000146  0E20               	movlw	low _i2c_w_reg
  1440  000148  0101               	movlb	1	; () banked
  1441  00014A  255E               	addwf	main@i& (0+255),w,b
  1442  00014C  6ED9               	movwf	fsr2l,c
  1443  00014E  0E01               	movlw	high _i2c_w_reg
  1444  000150  0101               	movlb	1	; () banked
  1445  000152  215F               	addwfc	(main@i+1)& (0+255),w,b
  1446  000154  6EDA               	movwf	fsr2h,c
  1447  000156  0E2D               	movlw	45
  1448  000158  6EDF               	movwf	indf2,c
  1449                           
  1450                           ;main.c: 72: i2c_r_reg[i] = '-';
  1451  00015A  0E00               	movlw	low _i2c_r_reg
  1452  00015C  0101               	movlb	1	; () banked
  1453  00015E  255E               	addwf	main@i& (0+255),w,b
  1454  000160  6ED9               	movwf	fsr2l,c
  1455  000162  0E01               	movlw	high _i2c_r_reg
  1456  000164  0101               	movlb	1	; () banked
  1457  000166  215F               	addwfc	(main@i+1)& (0+255),w,b
  1458  000168  6EDA               	movwf	fsr2h,c
  1459  00016A  0E2D               	movlw	45
  1460  00016C  6EDF               	movwf	indf2,c
  1461                           
  1462                           ; BSR set to: 1
  1463  00016E  0101               	movlb	1	; () banked
  1464  000170  4B5E               	infsnz	main@i& (0+255),f,b
  1465  000172  2B5F               	incf	(main@i+1)& (0+255),f,b
  1466                           
  1467                           ; BSR set to: 1
  1468  000174  0101               	movlb	1	; () banked
  1469  000176  BF5F               	btfsc	(main@i+1)& (0+255),7,b
  1470  000178  D7E6               	goto	l4512
  1471  00017A  0101               	movlb	1	; () banked
  1472  00017C  515F               	movf	(main@i+1)& (0+255),w,b
  1473  00017E  E101               	bnz	u4280
  1474  000180  D7DB               	goto	L1
  1475  000182                     u4280:
  1476                           
  1477                           ; BSR set to: 1
  1478                           ;main.c: 73: }
  1479                           ;main.c: 74: while (credentials_accepted == 0 )
  1480  000182  D3BE               	goto	l4784
  1481  000184                     l4518:
  1482                           
  1483                           ;main.c: 75: {
  1484                           ;main.c: 76: unsigned char buffer[9];
  1485                           ;main.c: 77: for (int i = 0; i < 9; i++)
  1486  000184  0E00               	movlw	0
  1487  000186  0101               	movlb	1	; () banked
  1488  000188  6F65               	movwf	(main@i_773+1)& (0+255),b
  1489  00018A  0E00               	movlw	0
  1490  00018C  6F64               	movwf	main@i_773& (0+255),b
  1491  00018E                     l4520:
  1492                           
  1493                           ; BSR set to: 1
  1494  00018E  0101               	movlb	1	; () banked
  1495  000190  BF65               	btfsc	(main@i_773+1)& (0+255),7,b
  1496  000192  D008               	goto	l4524
  1497  000194  0101               	movlb	1	; () banked
  1498  000196  5165               	movf	(main@i_773+1)& (0+255),w,b
  1499  000198  E127               	bnz	l4530
  1500  00019A  0E09               	movlw	9
  1501  00019C  0101               	movlb	1	; () banked
  1502  00019E  5D64               	subwf	main@i_773& (0+255),w,b
  1503  0001A0  B0D8               	btfsc	status,0,c
  1504  0001A2  D022               	goto	l4530
  1505  0001A4                     l4524:
  1506                           
  1507                           ; BSR set to: 1
  1508                           ;main.c: 78: {
  1509                           ;main.c: 79: current_user[i] = '0';
  1510  0001A4  0ED3               	movlw	low _current_user
  1511  0001A6  0101               	movlb	1	; () banked
  1512  0001A8  2564               	addwf	main@i_773& (0+255),w,b
  1513  0001AA  6ED9               	movwf	fsr2l,c
  1514  0001AC  0E00               	movlw	high _current_user
  1515  0001AE  0101               	movlb	1	; () banked
  1516  0001B0  2165               	addwfc	(main@i_773+1)& (0+255),w,b
  1517  0001B2  6EDA               	movwf	fsr2h,c
  1518  0001B4  0E30               	movlw	48
  1519  0001B6  6EDF               	movwf	indf2,c
  1520                           
  1521                           ;main.c: 80: current_pin[i] = '0';
  1522  0001B8  0ECA               	movlw	low _current_pin
  1523  0001BA  0101               	movlb	1	; () banked
  1524  0001BC  2564               	addwf	main@i_773& (0+255),w,b
  1525  0001BE  6ED9               	movwf	fsr2l,c
  1526  0001C0  0E00               	movlw	high _current_pin
  1527  0001C2  0101               	movlb	1	; () banked
  1528  0001C4  2165               	addwfc	(main@i_773+1)& (0+255),w,b
  1529  0001C6  6EDA               	movwf	fsr2h,c
  1530  0001C8  0E30               	movlw	48
  1531  0001CA  6EDF               	movwf	indf2,c
  1532                           
  1533                           ;main.c: 81: buffer[i] = '0';
  1534  0001CC  0E4A               	movlw	low main@buffer
  1535  0001CE  0101               	movlb	1	; () banked
  1536  0001D0  2564               	addwf	main@i_773& (0+255),w,b
  1537  0001D2  6ED9               	movwf	fsr2l,c
  1538  0001D4  0E01               	movlw	high main@buffer
  1539  0001D6  0101               	movlb	1	; () banked
  1540  0001D8  2165               	addwfc	(main@i_773+1)& (0+255),w,b
  1541  0001DA  6EDA               	movwf	fsr2h,c
  1542  0001DC  0E30               	movlw	48
  1543  0001DE  6EDF               	movwf	indf2,c
  1544                           
  1545                           ; BSR set to: 1
  1546  0001E0  0101               	movlb	1	; () banked
  1547  0001E2  4B64               	infsnz	main@i_773& (0+255),f,b
  1548  0001E4  2B65               	incf	(main@i_773+1)& (0+255),f,b
  1549  0001E6  D7D3               	goto	l4520
  1550  0001E8                     l4530:
  1551                           
  1552                           ; BSR set to: 1
  1553                           ;main.c: 82: }
  1554                           ;main.c: 83: n = 0;
  1555  0001E8  0E00               	movlw	0
  1556  0001EA  0101               	movlb	1	; () banked
  1557  0001EC  6F67               	movwf	main@n& (0+255),b
  1558                           
  1559                           ; BSR set to: 1
  1560                           ;main.c: 84: Lcd_Set_Cursor(1,1);
  1561  0001EE  0E01               	movlw	1
  1562  0001F0  6E12               	movwf	Lcd_Set_Cursor@b,c
  1563  0001F2  0E01               	movlw	1
  1564  0001F4  ECDB  F00C         	call	_Lcd_Set_Cursor
  1565                           
  1566                           ;main.c: 85: Lcd_Write_String("Enter your ID:  ");
  1567  0001F8  0EED               	movlw	low STR_3
  1568  0001FA  6E14               	movwf	Lcd_Write_String@a,c
  1569  0001FC  0E7E               	movlw	high STR_3
  1570  0001FE  6E15               	movwf	Lcd_Write_String@a+1,c
  1571  000200  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  1572                           
  1573                           ;main.c: 86: Lcd_Set_Cursor(2,1);
  1574  000204  0E01               	movlw	1
  1575  000206  6E12               	movwf	Lcd_Set_Cursor@b,c
  1576  000208  0E02               	movlw	2
  1577  00020A  ECDB  F00C         	call	_Lcd_Set_Cursor
  1578                           
  1579                           ;main.c: 87: Lcd_Write_String("[ ]             ");
  1580  00020E  0E98               	movlw	low STR_4
  1581  000210  6E14               	movwf	Lcd_Write_String@a,c
  1582  000212  0E7E               	movlw	high STR_4
  1583  000214  6E15               	movwf	Lcd_Write_String@a+1,c
  1584  000216  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  1585                           
  1586                           ;main.c: 88: Lcd_Set_Cursor(2,1);
  1587  00021A  0E01               	movlw	1
  1588  00021C  6E12               	movwf	Lcd_Set_Cursor@b,c
  1589  00021E  0E02               	movlw	2
  1590  000220  ECDB  F00C         	call	_Lcd_Set_Cursor
  1591                           
  1592                           ;main.c: 90: while (n < 10)
  1593  000224  D0B0               	goto	l4592
  1594  000226                     l4542:
  1595                           
  1596                           ;main.c: 91: {
  1597                           ;main.c: 92: if (n == 9)
  1598  000226  0E09               	movlw	9
  1599  000228  0101               	movlb	1	; () banked
  1600  00022A  1967               	xorwf	main@n& (0+255),w,b
  1601  00022C  B4D8               	btfsc	status,2,c
  1602  00022E  D0AF               	goto	l4594
  1603                           
  1604                           ; BSR set to: 1
  1605                           ;main.c: 94: Lcd_Set_Cursor(2,2);
  1606                           
  1607                           ; BSR set to: 1
  1608                           
  1609                           ; BSR set to: 1
  1610                           ;main.c: 93: break;
  1611  000230  0E02               	movlw	2
  1612  000232  6E12               	movwf	Lcd_Set_Cursor@b,c
  1613  000234  0E02               	movlw	2
  1614  000236  ECDB  F00C         	call	_Lcd_Set_Cursor
  1615                           
  1616                           ;main.c: 95: Lcd_Write_Char(c[9-n]);
  1617  00023A  0101               	movlb	1	; () banked
  1618  00023C  5167               	movf	main@n& (0+255),w,b
  1619  00023E  6E27               	movwf	??_main& (0+255),c
  1620  000240  6A28               	clrf	(??_main+1)& (0+255),c
  1621  000242  1E27               	comf	??_main,f,c
  1622  000244  1E28               	comf	??_main+1,f,c
  1623  000246  4A27               	infsnz	??_main,f,c
  1624  000248  2A28               	incf	??_main+1,f,c
  1625  00024A  0E09               	movlw	9
  1626  00024C  2627               	addwf	??_main,f,c
  1627  00024E  0E00               	movlw	0
  1628  000250  2228               	addwfc	??_main+1,f,c
  1629  000252  0E92               	movlw	low _c
  1630  000254  2427               	addwf	??_main,w,c
  1631  000256  6ED9               	movwf	fsr2l,c
  1632  000258  0E00               	movlw	high _c
  1633  00025A  2028               	addwfc	??_main+1,w,c
  1634  00025C  6EDA               	movwf	fsr2h,c
  1635  00025E  50DF               	movf	indf2,w,c
  1636  000260  EC3F  F00D         	call	_Lcd_Write_Char
  1637                           
  1638                           ;main.c: 96: x = read_keypad();
  1639  000264  EC07  F00B         	call	_read_keypad	;wreg free
  1640  000268  0101               	movlb	1	; () banked
  1641  00026A  6F68               	movwf	main@x& (0+255),b
  1642                           
  1643                           ; BSR set to: 1
  1644                           ;main.c: 97: if (x != '_')
  1645  00026C  0E5F               	movlw	95
  1646  00026E  0101               	movlb	1	; () banked
  1647  000270  1968               	xorwf	main@x& (0+255),w,b
  1648  000272  B4D8               	btfsc	status,2,c
  1649  000274  D088               	goto	l4592
  1650                           
  1651                           ; BSR set to: 1
  1652                           ;main.c: 98: {
  1653                           ;main.c: 99: if (((x - '#') == 0)&&(n > 0))
  1654  000276  0EDD               	movlw	221
  1655  000278  6E27               	movwf	??_main& (0+255),c
  1656  00027A  0EFF               	movlw	255
  1657  00027C  6E28               	movwf	(??_main+1)& (0+255),c
  1658  00027E  0101               	movlb	1	; () banked
  1659  000280  5168               	movf	main@x& (0+255),w,b
  1660  000282  6E29               	movwf	(??_main+2)& (0+255),c
  1661  000284  6A2A               	clrf	(??_main+3)& (0+255),c
  1662  000286  5027               	movf	??_main,w,c
  1663  000288  2629               	addwf	??_main+2,f,c
  1664  00028A  5028               	movf	??_main+1,w,c
  1665  00028C  222A               	addwfc	??_main+3,f,c
  1666  00028E  5029               	movf	??_main+2,w,c
  1667  000290  102A               	iorwf	??_main+3,w,c
  1668  000292  A4D8               	btfss	status,2,c
  1669  000294  D034               	goto	l4574
  1670                           
  1671                           ; BSR set to: 1
  1672  000296  0101               	movlb	1	; () banked
  1673  000298  5167               	movf	main@n& (0+255),w,b
  1674  00029A  0101               	movlb	1	; () banked
  1675  00029C  B4D8               	btfsc	status,2,c
  1676  00029E  D02F               	goto	l4574
  1677                           
  1678                           ; BSR set to: 1
  1679                           ;main.c: 100: {
  1680                           ;main.c: 101: buffer[n] = '?';
  1681  0002A0  0101               	movlb	1	; () banked
  1682  0002A2  5167               	movf	main@n& (0+255),w,b
  1683  0002A4  0D01               	mullw	1
  1684  0002A6  0E4A               	movlw	low main@buffer
  1685  0002A8  24F3               	addwf	prodl,w,c
  1686  0002AA  6ED9               	movwf	fsr2l,c
  1687  0002AC  0E01               	movlw	high main@buffer
  1688  0002AE  20F4               	addwfc	prodh,w,c
  1689  0002B0  6EDA               	movwf	fsr2h,c
  1690  0002B2  0E3F               	movlw	63
  1691  0002B4  6EDF               	movwf	indf2,c
  1692                           
  1693                           ; BSR set to: 1
  1694                           ;main.c: 102: Lcd_Set_Cursor(2, 7 + n);
  1695  0002B6  0101               	movlb	1	; () banked
  1696  0002B8  5167               	movf	main@n& (0+255),w,b
  1697  0002BA  0F07               	addlw	7
  1698  0002BC  6E12               	movwf	Lcd_Set_Cursor@b,c
  1699  0002BE  0E02               	movlw	2
  1700  0002C0  ECDB  F00C         	call	_Lcd_Set_Cursor
  1701                           
  1702                           ;main.c: 103: Lcd_Write_Char('_');
  1703  0002C4  0E5F               	movlw	95
  1704  0002C6  EC3F  F00D         	call	_Lcd_Write_Char
  1705                           
  1706                           ;main.c: 104: latch_keypad(&x);
  1707  0002CA  0E68               	movlw	low main@x
  1708  0002CC  6E10               	movwf	latch_keypad@x,c
  1709  0002CE  0E01               	movlw	high main@x
  1710  0002D0  6E11               	movwf	latch_keypad@x+1,c
  1711  0002D2  EC23  F00D         	call	_latch_keypad	;wreg free
  1712                           
  1713                           ;main.c: 105: Lcd_Set_Cursor(2, 8 + n);
  1714  0002D6  0101               	movlb	1	; () banked
  1715  0002D8  5167               	movf	main@n& (0+255),w,b
  1716  0002DA  0F08               	addlw	8
  1717  0002DC  6E12               	movwf	Lcd_Set_Cursor@b,c
  1718  0002DE  0E02               	movlw	2
  1719  0002E0  ECDB  F00C         	call	_Lcd_Set_Cursor
  1720                           
  1721                           ;main.c: 106: Lcd_Write_Char(' ');
  1722  0002E4  0E20               	movlw	32
  1723  0002E6  EC3F  F00D         	call	_Lcd_Write_Char
  1724                           
  1725                           ;main.c: 107: Lcd_Set_Cursor(2, 7 + n);
  1726  0002EA  0101               	movlb	1	; () banked
  1727  0002EC  5167               	movf	main@n& (0+255),w,b
  1728  0002EE  0F07               	addlw	7
  1729  0002F0  6E12               	movwf	Lcd_Set_Cursor@b,c
  1730  0002F2  0E02               	movlw	2
  1731  0002F4  ECDB  F00C         	call	_Lcd_Set_Cursor
  1732                           
  1733                           ;main.c: 108: n--;
  1734  0002F8  0101               	movlb	1	; () banked
  1735  0002FA  0767               	decf	main@n& (0+255),f,b
  1736                           
  1737                           ;main.c: 109: }
  1738  0002FC  D044               	goto	l4592
  1739  0002FE                     l4574:
  1740                           
  1741                           ; BSR set to: 1
  1742                           ;main.c: 110: else if ((x - '#') != 0)
  1743  0002FE  0EDD               	movlw	221
  1744  000300  6E27               	movwf	??_main& (0+255),c
  1745  000302  0EFF               	movlw	255
  1746  000304  6E28               	movwf	(??_main+1)& (0+255),c
  1747  000306  0101               	movlb	1	; () banked
  1748  000308  5168               	movf	main@x& (0+255),w,b
  1749  00030A  6E29               	movwf	(??_main+2)& (0+255),c
  1750  00030C  6A2A               	clrf	(??_main+3)& (0+255),c
  1751  00030E  5027               	movf	??_main,w,c
  1752  000310  2629               	addwf	??_main+2,f,c
  1753  000312  5028               	movf	??_main+1,w,c
  1754  000314  222A               	addwfc	??_main+3,f,c
  1755  000316  5029               	movf	??_main+2,w,c
  1756  000318  102A               	iorwf	??_main+3,w,c
  1757  00031A  B4D8               	btfsc	status,2,c
  1758  00031C  D034               	goto	l4592
  1759                           
  1760                           ; BSR set to: 1
  1761                           ;main.c: 111: {
  1762                           ;main.c: 112: if ((x == '*')|(n == 9))
  1763  00031E  0E2A               	movlw	42
  1764  000320  0101               	movlb	1	; () banked
  1765  000322  1968               	xorwf	main@x& (0+255),w,b
  1766  000324  B4D8               	btfsc	status,2,c
  1767  000326  D033               	goto	l4594
  1768                           
  1769                           ; BSR set to: 1
  1770  000328  0E09               	movlw	9
  1771  00032A  0101               	movlb	1	; () banked
  1772  00032C  1967               	xorwf	main@n& (0+255),w,b
  1773  00032E  B4D8               	btfsc	status,2,c
  1774  000330  D02E               	goto	l4594
  1775                           
  1776                           ; BSR set to: 1
  1777                           ;main.c: 115: }
  1778                           ;main.c: 116: n++;
  1779                           
  1780                           ; BSR set to: 1
  1781                           
  1782                           ; BSR set to: 1
  1783                           ;main.c: 113: {
  1784                           ;main.c: 114: break;
  1785  000332  0101               	movlb	1	; () banked
  1786  000334  2B67               	incf	main@n& (0+255),f,b
  1787                           
  1788                           ; BSR set to: 1
  1789                           ;main.c: 117: buffer[n-1] = x;
  1790  000336  0EFF               	movlw	255
  1791  000338  6E27               	movwf	??_main& (0+255),c
  1792  00033A  0EFF               	movlw	255
  1793  00033C  6E28               	movwf	(??_main+1)& (0+255),c
  1794  00033E  0101               	movlb	1	; () banked
  1795  000340  5167               	movf	main@n& (0+255),w,b
  1796  000342  6E29               	movwf	(??_main+2)& (0+255),c
  1797  000344  6A2A               	clrf	(??_main+3)& (0+255),c
  1798  000346  5027               	movf	??_main,w,c
  1799  000348  2629               	addwf	??_main+2,f,c
  1800  00034A  5028               	movf	??_main+1,w,c
  1801  00034C  222A               	addwfc	??_main+3,f,c
  1802  00034E  0E4A               	movlw	low main@buffer
  1803  000350  2429               	addwf	??_main+2,w,c
  1804  000352  6ED9               	movwf	fsr2l,c
  1805  000354  0E01               	movlw	high main@buffer
  1806  000356  202A               	addwfc	??_main+3,w,c
  1807  000358  6EDA               	movwf	fsr2h,c
  1808  00035A  C168  FFDF         	movff	main@x,indf2
  1809                           
  1810                           ; BSR set to: 1
  1811                           ;main.c: 118: Lcd_Set_Cursor(2, 7 + n);
  1812  00035E  0101               	movlb	1	; () banked
  1813  000360  5167               	movf	main@n& (0+255),w,b
  1814  000362  0F07               	addlw	7
  1815  000364  6E12               	movwf	Lcd_Set_Cursor@b,c
  1816  000366  0E02               	movlw	2
  1817  000368  ECDB  F00C         	call	_Lcd_Set_Cursor
  1818                           
  1819                           ;main.c: 119: Lcd_Write_Char(x);
  1820  00036C  0101               	movlb	1	; () banked
  1821  00036E  5168               	movf	main@x& (0+255),w,b
  1822  000370  EC3F  F00D         	call	_Lcd_Write_Char
  1823                           
  1824                           ;main.c: 120: Lcd_Write_Char('_');
  1825  000374  0E5F               	movlw	95
  1826  000376  EC3F  F00D         	call	_Lcd_Write_Char
  1827                           
  1828                           ;main.c: 121: latch_keypad(&x);
  1829  00037A  0E68               	movlw	low main@x
  1830  00037C  6E10               	movwf	latch_keypad@x,c
  1831  00037E  0E01               	movlw	high main@x
  1832  000380  6E11               	movwf	latch_keypad@x+1,c
  1833  000382  EC23  F00D         	call	_latch_keypad	;wreg free
  1834  000386                     l4592:
  1835  000386  0E09               	movlw	9
  1836  000388  0101               	movlb	1	; () banked
  1837  00038A  6567               	cpfsgt	main@n& (0+255),b
  1838  00038C  D74C               	goto	l4542
  1839  00038E                     l4594:
  1840                           
  1841                           ; BSR set to: 1
  1842                           ;main.c: 122: }
  1843                           ;main.c: 123: }
  1844                           ;main.c: 124: }
  1845                           ;main.c: 125: for (int i = 0; i < n; i++)
  1846  00038E  0E00               	movlw	0
  1847  000390  0101               	movlb	1	; () banked
  1848  000392  6F61               	movwf	(main@i_776+1)& (0+255),b
  1849  000394  0E00               	movlw	0
  1850  000396  6F60               	movwf	main@i_776& (0+255),b
  1851  000398  D055               	goto	l4602
  1852  00039A                     l4596:
  1853                           
  1854                           ; BSR set to: 1
  1855                           ;main.c: 126: {
  1856                           ;main.c: 127: current_user[8 - i] = buffer[(n-1) - i];
  1857  00039A  0EFF               	movlw	255
  1858  00039C  6E27               	movwf	??_main& (0+255),c
  1859  00039E  0EFF               	movlw	255
  1860  0003A0  6E28               	movwf	(??_main+1)& (0+255),c
  1861  0003A2  C160  F029         	movff	main@i_776,??_main+2
  1862  0003A6  C161  F02A         	movff	main@i_776+1,??_main+3
  1863  0003AA  1E29               	comf	??_main+2,f,c
  1864  0003AC  1E2A               	comf	??_main+3,f,c
  1865  0003AE  4A29               	infsnz	??_main+2,f,c
  1866  0003B0  2A2A               	incf	??_main+3,f,c
  1867  0003B2  0101               	movlb	1	; () banked
  1868  0003B4  5167               	movf	main@n& (0+255),w,b
  1869  0003B6  6E2B               	movwf	(??_main+4)& (0+255),c
  1870  0003B8  6A2C               	clrf	(??_main+5)& (0+255),c
  1871  0003BA  5029               	movf	??_main+2,w,c
  1872  0003BC  262B               	addwf	??_main+4,f,c
  1873  0003BE  502A               	movf	??_main+3,w,c
  1874  0003C0  222C               	addwfc	??_main+5,f,c
  1875  0003C2  5027               	movf	??_main,w,c
  1876  0003C4  262B               	addwf	??_main+4,f,c
  1877  0003C6  5028               	movf	??_main+1,w,c
  1878  0003C8  222C               	addwfc	??_main+5,f,c
  1879  0003CA  0E4A               	movlw	low main@buffer
  1880  0003CC  242B               	addwf	??_main+4,w,c
  1881  0003CE  6ED9               	movwf	fsr2l,c
  1882  0003D0  0E01               	movlw	high main@buffer
  1883  0003D2  202C               	addwfc	??_main+5,w,c
  1884  0003D4  6EDA               	movwf	fsr2h,c
  1885  0003D6  C160  F02D         	movff	main@i_776,??_main+6
  1886  0003DA  C161  F02E         	movff	main@i_776+1,??_main+7
  1887  0003DE  1E2D               	comf	??_main+6,f,c
  1888  0003E0  1E2E               	comf	??_main+7,f,c
  1889  0003E2  4A2D               	infsnz	??_main+6,f,c
  1890  0003E4  2A2E               	incf	??_main+7,f,c
  1891  0003E6  0E08               	movlw	8
  1892  0003E8  262D               	addwf	??_main+6,f,c
  1893  0003EA  0E00               	movlw	0
  1894  0003EC  222E               	addwfc	??_main+7,f,c
  1895  0003EE  0ED3               	movlw	low _current_user
  1896  0003F0  242D               	addwf	??_main+6,w,c
  1897  0003F2  6EE1               	movwf	fsr1l,c
  1898  0003F4  0E00               	movlw	high _current_user
  1899  0003F6  202E               	addwfc	??_main+7,w,c
  1900  0003F8  6EE2               	movwf	fsr1h,c
  1901  0003FA  CFDF FFE7          	movff	indf2,indf1
  1902                           
  1903                           ; BSR set to: 1
  1904                           ;main.c: 128: buffer[(n-1) - i] = '0';
  1905  0003FE  0EFF               	movlw	255
  1906  000400  6E27               	movwf	??_main& (0+255),c
  1907  000402  0EFF               	movlw	255
  1908  000404  6E28               	movwf	(??_main+1)& (0+255),c
  1909  000406  C160  F029         	movff	main@i_776,??_main+2
  1910  00040A  C161  F02A         	movff	main@i_776+1,??_main+3
  1911  00040E  1E29               	comf	??_main+2,f,c
  1912  000410  1E2A               	comf	??_main+3,f,c
  1913  000412  4A29               	infsnz	??_main+2,f,c
  1914  000414  2A2A               	incf	??_main+3,f,c
  1915  000416  0101               	movlb	1	; () banked
  1916  000418  5167               	movf	main@n& (0+255),w,b
  1917  00041A  6E2B               	movwf	(??_main+4)& (0+255),c
  1918  00041C  6A2C               	clrf	(??_main+5)& (0+255),c
  1919  00041E  5029               	movf	??_main+2,w,c
  1920  000420  262B               	addwf	??_main+4,f,c
  1921  000422  502A               	movf	??_main+3,w,c
  1922  000424  222C               	addwfc	??_main+5,f,c
  1923  000426  5027               	movf	??_main,w,c
  1924  000428  262B               	addwf	??_main+4,f,c
  1925  00042A  5028               	movf	??_main+1,w,c
  1926  00042C  222C               	addwfc	??_main+5,f,c
  1927  00042E  0E4A               	movlw	low main@buffer
  1928  000430  242B               	addwf	??_main+4,w,c
  1929  000432  6ED9               	movwf	fsr2l,c
  1930  000434  0E01               	movlw	high main@buffer
  1931  000436  202C               	addwfc	??_main+5,w,c
  1932  000438  6EDA               	movwf	fsr2h,c
  1933  00043A  0E30               	movlw	48
  1934  00043C  6EDF               	movwf	indf2,c
  1935                           
  1936                           ; BSR set to: 1
  1937  00043E  0101               	movlb	1	; () banked
  1938  000440  4B60               	infsnz	main@i_776& (0+255),f,b
  1939  000442  2B61               	incf	(main@i_776+1)& (0+255),f,b
  1940  000444                     l4602:
  1941                           
  1942                           ; BSR set to: 1
  1943  000444  0101               	movlb	1	; () banked
  1944  000446  5167               	movf	main@n& (0+255),w,b
  1945  000448  6E27               	movwf	??_main& (0+255),c
  1946  00044A  6A28               	clrf	(??_main+1)& (0+255),c
  1947  00044C  5027               	movf	??_main,w,c
  1948  00044E  0101               	movlb	1	; () banked
  1949  000450  5D60               	subwf	main@i_776& (0+255),w,b
  1950  000452  0101               	movlb	1	; () banked
  1951  000454  5161               	movf	(main@i_776+1)& (0+255),w,b
  1952  000456  0A80               	xorlw	128
  1953  000458  6E29               	movwf	(??_main+2)& (0+255),c
  1954  00045A  5028               	movf	??_main+1,w,c
  1955  00045C  0A80               	xorlw	128
  1956  00045E  5829               	subwfb	(??_main+2)& (0+255),w,c
  1957  000460  A0D8               	btfss	status,0,c
  1958  000462  D79B               	goto	l4596
  1959                           
  1960                           ; BSR set to: 1
  1961                           ;main.c: 129: }
  1962                           ;main.c: 130: menu_progress_bar(25);
  1963                           
  1964                           ; BSR set to: 1
  1965  000464  0E00               	movlw	0
  1966  000466  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  1967  000468  0E19               	movlw	25
  1968  00046A  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  1969  00046C  ECC0  F009         	call	_menu_progress_bar	;wreg free
  1970                           
  1971                           ;main.c: 132: p = 0;
  1972  000470  0E00               	movlw	0
  1973  000472  0101               	movlb	1	; () banked
  1974  000474  6F66               	movwf	main@p& (0+255),b
  1975                           
  1976                           ; BSR set to: 1
  1977                           ;main.c: 133: Lcd_Set_Cursor(1,1);
  1978  000476  0E01               	movlw	1
  1979  000478  6E12               	movwf	Lcd_Set_Cursor@b,c
  1980  00047A  0E01               	movlw	1
  1981  00047C  ECDB  F00C         	call	_Lcd_Set_Cursor
  1982                           
  1983                           ;main.c: 134: Lcd_Write_String("Enter your PIN: ");
  1984  000480  0E42               	movlw	low STR_5
  1985  000482  6E14               	movwf	Lcd_Write_String@a,c
  1986  000484  0E7F               	movlw	high STR_5
  1987  000486  6E15               	movwf	Lcd_Write_String@a+1,c
  1988  000488  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  1989                           
  1990                           ;main.c: 135: Lcd_Set_Cursor(2,1);
  1991  00048C  0E01               	movlw	1
  1992  00048E  6E12               	movwf	Lcd_Set_Cursor@b,c
  1993  000490  0E02               	movlw	2
  1994  000492  ECDB  F00C         	call	_Lcd_Set_Cursor
  1995                           
  1996                           ;main.c: 136: Lcd_Write_String("[ ]             ");
  1997  000496  0E98               	movlw	low STR_4
  1998  000498  6E14               	movwf	Lcd_Write_String@a,c
  1999  00049A  0E7E               	movlw	high STR_4
  2000  00049C  6E15               	movwf	Lcd_Write_String@a+1,c
  2001  00049E  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  2002                           
  2003                           ;main.c: 137: Lcd_Set_Cursor(2,1);
  2004  0004A2  0E01               	movlw	1
  2005  0004A4  6E12               	movwf	Lcd_Set_Cursor@b,c
  2006  0004A6  0E02               	movlw	2
  2007  0004A8  ECDB  F00C         	call	_Lcd_Set_Cursor
  2008                           
  2009                           ;main.c: 138: while (p < 10)
  2010  0004AC  D0B8               	goto	l4670
  2011  0004AE                     l4618:
  2012                           
  2013                           ;main.c: 139: {
  2014                           ;main.c: 140: if (p == 9)
  2015  0004AE  0E09               	movlw	9
  2016  0004B0  0101               	movlb	1	; () banked
  2017  0004B2  1966               	xorwf	main@p& (0+255),w,b
  2018  0004B4  B4D8               	btfsc	status,2,c
  2019  0004B6  D0B7               	goto	l4672
  2020                           
  2021                           ; BSR set to: 1
  2022                           ;main.c: 142: char c[] = {'0','1','2','3','4','5','6','7','8','9'};
  2023                           
  2024                           ; BSR set to: 1
  2025                           
  2026                           ; BSR set to: 1
  2027                           ;main.c: 141: break;
  2028  0004B8  EE20  F09C         	lfsr	2,main@F3681
  2029  0004BC  EE11  F040         	lfsr	1,main@c
  2030  0004C0  0E09               	movlw	9
  2031  0004C2                     u4411:
  2032  0004C2  CFDB FFE3          	movff	plusw2,plusw1
  2033  0004C6  06E8               	decf	wreg,f,c
  2034  0004C8  E2FC               	bc	u4411
  2035                           
  2036                           ; BSR set to: 1
  2037                           ;main.c: 143: Lcd_Set_Cursor(2,2);
  2038  0004CA  0E02               	movlw	2
  2039  0004CC  6E12               	movwf	Lcd_Set_Cursor@b,c
  2040  0004CE  0E02               	movlw	2
  2041  0004D0  ECDB  F00C         	call	_Lcd_Set_Cursor
  2042                           
  2043                           ;main.c: 144: Lcd_Write_Char(c[9-p]);
  2044  0004D4  0101               	movlb	1	; () banked
  2045  0004D6  5166               	movf	main@p& (0+255),w,b
  2046  0004D8  6E27               	movwf	??_main& (0+255),c
  2047  0004DA  6A28               	clrf	(??_main+1)& (0+255),c
  2048  0004DC  1E27               	comf	??_main,f,c
  2049  0004DE  1E28               	comf	??_main+1,f,c
  2050  0004E0  4A27               	infsnz	??_main,f,c
  2051  0004E2  2A28               	incf	??_main+1,f,c
  2052  0004E4  0E09               	movlw	9
  2053  0004E6  2627               	addwf	??_main,f,c
  2054  0004E8  0E00               	movlw	0
  2055  0004EA  2228               	addwfc	??_main+1,f,c
  2056  0004EC  0E40               	movlw	low main@c
  2057  0004EE  2427               	addwf	??_main,w,c
  2058  0004F0  6ED9               	movwf	fsr2l,c
  2059  0004F2  0E01               	movlw	high main@c
  2060  0004F4  2028               	addwfc	??_main+1,w,c
  2061  0004F6  6EDA               	movwf	fsr2h,c
  2062  0004F8  50DF               	movf	indf2,w,c
  2063  0004FA  EC3F  F00D         	call	_Lcd_Write_Char
  2064                           
  2065                           ;main.c: 145: x = read_keypad();
  2066  0004FE  EC07  F00B         	call	_read_keypad	;wreg free
  2067  000502  0101               	movlb	1	; () banked
  2068  000504  6F68               	movwf	main@x& (0+255),b
  2069                           
  2070                           ; BSR set to: 1
  2071                           ;main.c: 146: if (x != '_')
  2072  000506  0E5F               	movlw	95
  2073  000508  0101               	movlb	1	; () banked
  2074  00050A  1968               	xorwf	main@x& (0+255),w,b
  2075  00050C  B4D8               	btfsc	status,2,c
  2076  00050E  D087               	goto	l4670
  2077                           
  2078                           ; BSR set to: 1
  2079                           ;main.c: 147: {
  2080                           ;main.c: 148: if (((x - '#') == 0)&&(p > 0))
  2081  000510  0EDD               	movlw	221
  2082  000512  6E27               	movwf	??_main& (0+255),c
  2083  000514  0EFF               	movlw	255
  2084  000516  6E28               	movwf	(??_main+1)& (0+255),c
  2085  000518  0101               	movlb	1	; () banked
  2086  00051A  5168               	movf	main@x& (0+255),w,b
  2087  00051C  6E29               	movwf	(??_main+2)& (0+255),c
  2088  00051E  6A2A               	clrf	(??_main+3)& (0+255),c
  2089  000520  5027               	movf	??_main,w,c
  2090  000522  2629               	addwf	??_main+2,f,c
  2091  000524  5028               	movf	??_main+1,w,c
  2092  000526  222A               	addwfc	??_main+3,f,c
  2093  000528  5029               	movf	??_main+2,w,c
  2094  00052A  102A               	iorwf	??_main+3,w,c
  2095  00052C  A4D8               	btfss	status,2,c
  2096  00052E  D034               	goto	l4652
  2097                           
  2098                           ; BSR set to: 1
  2099  000530  0101               	movlb	1	; () banked
  2100  000532  5166               	movf	main@p& (0+255),w,b
  2101  000534  0101               	movlb	1	; () banked
  2102  000536  B4D8               	btfsc	status,2,c
  2103  000538  D02F               	goto	l4652
  2104                           
  2105                           ; BSR set to: 1
  2106                           ;main.c: 149: {
  2107                           ;main.c: 150: buffer[p] = '?';
  2108  00053A  0101               	movlb	1	; () banked
  2109  00053C  5166               	movf	main@p& (0+255),w,b
  2110  00053E  0D01               	mullw	1
  2111  000540  0E4A               	movlw	low main@buffer
  2112  000542  24F3               	addwf	prodl,w,c
  2113  000544  6ED9               	movwf	fsr2l,c
  2114  000546  0E01               	movlw	high main@buffer
  2115  000548  20F4               	addwfc	prodh,w,c
  2116  00054A  6EDA               	movwf	fsr2h,c
  2117  00054C  0E3F               	movlw	63
  2118  00054E  6EDF               	movwf	indf2,c
  2119                           
  2120                           ; BSR set to: 1
  2121                           ;main.c: 151: Lcd_Set_Cursor(2, 7 + p);
  2122  000550  0101               	movlb	1	; () banked
  2123  000552  5166               	movf	main@p& (0+255),w,b
  2124  000554  0F07               	addlw	7
  2125  000556  6E12               	movwf	Lcd_Set_Cursor@b,c
  2126  000558  0E02               	movlw	2
  2127  00055A  ECDB  F00C         	call	_Lcd_Set_Cursor
  2128                           
  2129                           ;main.c: 152: Lcd_Write_Char('_');
  2130  00055E  0E5F               	movlw	95
  2131  000560  EC3F  F00D         	call	_Lcd_Write_Char
  2132                           
  2133                           ;main.c: 153: latch_keypad(&x);
  2134  000564  0E68               	movlw	low main@x
  2135  000566  6E10               	movwf	latch_keypad@x,c
  2136  000568  0E01               	movlw	high main@x
  2137  00056A  6E11               	movwf	latch_keypad@x+1,c
  2138  00056C  EC23  F00D         	call	_latch_keypad	;wreg free
  2139                           
  2140                           ;main.c: 154: Lcd_Set_Cursor(2, 8 + p);
  2141  000570  0101               	movlb	1	; () banked
  2142  000572  5166               	movf	main@p& (0+255),w,b
  2143  000574  0F08               	addlw	8
  2144  000576  6E12               	movwf	Lcd_Set_Cursor@b,c
  2145  000578  0E02               	movlw	2
  2146  00057A  ECDB  F00C         	call	_Lcd_Set_Cursor
  2147                           
  2148                           ;main.c: 155: Lcd_Write_Char(' ');
  2149  00057E  0E20               	movlw	32
  2150  000580  EC3F  F00D         	call	_Lcd_Write_Char
  2151                           
  2152                           ;main.c: 156: Lcd_Set_Cursor(2, 7 + p);
  2153  000584  0101               	movlb	1	; () banked
  2154  000586  5166               	movf	main@p& (0+255),w,b
  2155  000588  0F07               	addlw	7
  2156  00058A  6E12               	movwf	Lcd_Set_Cursor@b,c
  2157  00058C  0E02               	movlw	2
  2158  00058E  ECDB  F00C         	call	_Lcd_Set_Cursor
  2159                           
  2160                           ;main.c: 157: p--;
  2161  000592  0101               	movlb	1	; () banked
  2162  000594  0766               	decf	main@p& (0+255),f,b
  2163                           
  2164                           ;main.c: 158: }
  2165  000596  D043               	goto	l4670
  2166  000598                     l4652:
  2167                           
  2168                           ; BSR set to: 1
  2169                           ;main.c: 159: else if ((x - '#') != 0)
  2170  000598  0EDD               	movlw	221
  2171  00059A  6E27               	movwf	??_main& (0+255),c
  2172  00059C  0EFF               	movlw	255
  2173  00059E  6E28               	movwf	(??_main+1)& (0+255),c
  2174  0005A0  0101               	movlb	1	; () banked
  2175  0005A2  5168               	movf	main@x& (0+255),w,b
  2176  0005A4  6E29               	movwf	(??_main+2)& (0+255),c
  2177  0005A6  6A2A               	clrf	(??_main+3)& (0+255),c
  2178  0005A8  5027               	movf	??_main,w,c
  2179  0005AA  2629               	addwf	??_main+2,f,c
  2180  0005AC  5028               	movf	??_main+1,w,c
  2181  0005AE  222A               	addwfc	??_main+3,f,c
  2182  0005B0  5029               	movf	??_main+2,w,c
  2183  0005B2  102A               	iorwf	??_main+3,w,c
  2184  0005B4  B4D8               	btfsc	status,2,c
  2185  0005B6  D033               	goto	l4670
  2186                           
  2187                           ; BSR set to: 1
  2188                           ;main.c: 160: {
  2189                           ;main.c: 161: if ((x == '*')|(p == 9))
  2190  0005B8  0E2A               	movlw	42
  2191  0005BA  0101               	movlb	1	; () banked
  2192  0005BC  1968               	xorwf	main@x& (0+255),w,b
  2193  0005BE  B4D8               	btfsc	status,2,c
  2194  0005C0  D032               	goto	l4672
  2195                           
  2196                           ; BSR set to: 1
  2197  0005C2  0E09               	movlw	9
  2198  0005C4  0101               	movlb	1	; () banked
  2199  0005C6  1966               	xorwf	main@p& (0+255),w,b
  2200  0005C8  B4D8               	btfsc	status,2,c
  2201  0005CA  D02D               	goto	l4672
  2202                           
  2203                           ; BSR set to: 1
  2204                           ;main.c: 164: }
  2205                           ;main.c: 165: p++;
  2206                           
  2207                           ; BSR set to: 1
  2208                           
  2209                           ; BSR set to: 1
  2210                           ;main.c: 162: {
  2211                           ;main.c: 163: break;
  2212  0005CC  0101               	movlb	1	; () banked
  2213  0005CE  2B66               	incf	main@p& (0+255),f,b
  2214                           
  2215                           ; BSR set to: 1
  2216                           ;main.c: 166: buffer[p-1] = x;
  2217  0005D0  0EFF               	movlw	255
  2218  0005D2  6E27               	movwf	??_main& (0+255),c
  2219  0005D4  0EFF               	movlw	255
  2220  0005D6  6E28               	movwf	(??_main+1)& (0+255),c
  2221  0005D8  0101               	movlb	1	; () banked
  2222  0005DA  5166               	movf	main@p& (0+255),w,b
  2223  0005DC  6E29               	movwf	(??_main+2)& (0+255),c
  2224  0005DE  6A2A               	clrf	(??_main+3)& (0+255),c
  2225  0005E0  5027               	movf	??_main,w,c
  2226  0005E2  2629               	addwf	??_main+2,f,c
  2227  0005E4  5028               	movf	??_main+1,w,c
  2228  0005E6  222A               	addwfc	??_main+3,f,c
  2229  0005E8  0E4A               	movlw	low main@buffer
  2230  0005EA  2429               	addwf	??_main+2,w,c
  2231  0005EC  6ED9               	movwf	fsr2l,c
  2232  0005EE  0E01               	movlw	high main@buffer
  2233  0005F0  202A               	addwfc	??_main+3,w,c
  2234  0005F2  6EDA               	movwf	fsr2h,c
  2235  0005F4  C168  FFDF         	movff	main@x,indf2
  2236                           
  2237                           ; BSR set to: 1
  2238                           ;main.c: 167: Lcd_Set_Cursor(2, 7 + p);
  2239  0005F8  0101               	movlb	1	; () banked
  2240  0005FA  5166               	movf	main@p& (0+255),w,b
  2241  0005FC  0F07               	addlw	7
  2242  0005FE  6E12               	movwf	Lcd_Set_Cursor@b,c
  2243  000600  0E02               	movlw	2
  2244  000602  ECDB  F00C         	call	_Lcd_Set_Cursor
  2245                           
  2246                           ;main.c: 168: Lcd_Write_Char('*');
  2247  000606  0E2A               	movlw	42
  2248  000608  EC3F  F00D         	call	_Lcd_Write_Char
  2249                           
  2250                           ;main.c: 169: Lcd_Write_Char('_');
  2251  00060C  0E5F               	movlw	95
  2252  00060E  EC3F  F00D         	call	_Lcd_Write_Char
  2253                           
  2254                           ;main.c: 170: latch_keypad(&x);
  2255  000612  0E68               	movlw	low main@x
  2256  000614  6E10               	movwf	latch_keypad@x,c
  2257  000616  0E01               	movlw	high main@x
  2258  000618  6E11               	movwf	latch_keypad@x+1,c
  2259  00061A  EC23  F00D         	call	_latch_keypad	;wreg free
  2260  00061E                     l4670:
  2261  00061E  0E09               	movlw	9
  2262  000620  0101               	movlb	1	; () banked
  2263  000622  6566               	cpfsgt	main@p& (0+255),b
  2264  000624  D744               	goto	l4618
  2265  000626                     l4672:
  2266                           
  2267                           ; BSR set to: 1
  2268                           ;main.c: 171: }
  2269                           ;main.c: 172: }
  2270                           ;main.c: 173: }
  2271                           ;main.c: 174: for (int i = 0; i < p; i++)
  2272  000626  0E00               	movlw	0
  2273  000628  0101               	movlb	1	; () banked
  2274  00062A  6F5B               	movwf	(main@i_782+1)& (0+255),b
  2275  00062C  0E00               	movlw	0
  2276  00062E  6F5A               	movwf	main@i_782& (0+255),b
  2277  000630  D035               	goto	l4678
  2278  000632                     l4674:
  2279                           
  2280                           ; BSR set to: 1
  2281                           ;main.c: 175: current_pin[8 - i] = buffer[(p-1) - i];
  2282  000632  0EFF               	movlw	255
  2283  000634  6E27               	movwf	??_main& (0+255),c
  2284  000636  0EFF               	movlw	255
  2285  000638  6E28               	movwf	(??_main+1)& (0+255),c
  2286  00063A  C15A  F029         	movff	main@i_782,??_main+2
  2287  00063E  C15B  F02A         	movff	main@i_782+1,??_main+3
  2288  000642  1E29               	comf	??_main+2,f,c
  2289  000644  1E2A               	comf	??_main+3,f,c
  2290  000646  4A29               	infsnz	??_main+2,f,c
  2291  000648  2A2A               	incf	??_main+3,f,c
  2292  00064A  0101               	movlb	1	; () banked
  2293  00064C  5166               	movf	main@p& (0+255),w,b
  2294  00064E  6E2B               	movwf	(??_main+4)& (0+255),c
  2295  000650  6A2C               	clrf	(??_main+5)& (0+255),c
  2296  000652  5029               	movf	??_main+2,w,c
  2297  000654  262B               	addwf	??_main+4,f,c
  2298  000656  502A               	movf	??_main+3,w,c
  2299  000658  222C               	addwfc	??_main+5,f,c
  2300  00065A  5027               	movf	??_main,w,c
  2301  00065C  262B               	addwf	??_main+4,f,c
  2302  00065E  5028               	movf	??_main+1,w,c
  2303  000660  222C               	addwfc	??_main+5,f,c
  2304  000662  0E4A               	movlw	low main@buffer
  2305  000664  242B               	addwf	??_main+4,w,c
  2306  000666  6ED9               	movwf	fsr2l,c
  2307  000668  0E01               	movlw	high main@buffer
  2308  00066A  202C               	addwfc	??_main+5,w,c
  2309  00066C  6EDA               	movwf	fsr2h,c
  2310  00066E  C15A  F02D         	movff	main@i_782,??_main+6
  2311  000672  C15B  F02E         	movff	main@i_782+1,??_main+7
  2312  000676  1E2D               	comf	??_main+6,f,c
  2313  000678  1E2E               	comf	??_main+7,f,c
  2314  00067A  4A2D               	infsnz	??_main+6,f,c
  2315  00067C  2A2E               	incf	??_main+7,f,c
  2316  00067E  0E08               	movlw	8
  2317  000680  262D               	addwf	??_main+6,f,c
  2318  000682  0E00               	movlw	0
  2319  000684  222E               	addwfc	??_main+7,f,c
  2320  000686  0ECA               	movlw	low _current_pin
  2321  000688  242D               	addwf	??_main+6,w,c
  2322  00068A  6EE1               	movwf	fsr1l,c
  2323  00068C  0E00               	movlw	high _current_pin
  2324  00068E  202E               	addwfc	??_main+7,w,c
  2325  000690  6EE2               	movwf	fsr1h,c
  2326  000692  CFDF FFE7          	movff	indf2,indf1
  2327                           
  2328                           ; BSR set to: 1
  2329  000696  0101               	movlb	1	; () banked
  2330  000698  4B5A               	infsnz	main@i_782& (0+255),f,b
  2331  00069A  2B5B               	incf	(main@i_782+1)& (0+255),f,b
  2332  00069C                     l4678:
  2333                           
  2334                           ; BSR set to: 1
  2335  00069C  0101               	movlb	1	; () banked
  2336  00069E  5166               	movf	main@p& (0+255),w,b
  2337  0006A0  6E27               	movwf	??_main& (0+255),c
  2338  0006A2  6A28               	clrf	(??_main+1)& (0+255),c
  2339  0006A4  5027               	movf	??_main,w,c
  2340  0006A6  0101               	movlb	1	; () banked
  2341  0006A8  5D5A               	subwf	main@i_782& (0+255),w,b
  2342  0006AA  0101               	movlb	1	; () banked
  2343  0006AC  515B               	movf	(main@i_782+1)& (0+255),w,b
  2344  0006AE  0A80               	xorlw	128
  2345  0006B0  6E29               	movwf	(??_main+2)& (0+255),c
  2346  0006B2  5028               	movf	??_main+1,w,c
  2347  0006B4  0A80               	xorlw	128
  2348  0006B6  5829               	subwfb	(??_main+2)& (0+255),w,c
  2349  0006B8  A0D8               	btfss	status,0,c
  2350  0006BA  D7BB               	goto	l4674
  2351                           
  2352                           ; BSR set to: 1
  2353                           ;main.c: 176: menu_progress_bar(25);
  2354                           
  2355                           ; BSR set to: 1
  2356  0006BC  0E00               	movlw	0
  2357  0006BE  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  2358  0006C0  0E19               	movlw	25
  2359  0006C2  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  2360  0006C4  ECC0  F009         	call	_menu_progress_bar	;wreg free
  2361                           
  2362                           ;main.c: 177: Lcd_Set_Cursor(1,1);
  2363  0006C8  0E01               	movlw	1
  2364  0006CA  6E12               	movwf	Lcd_Set_Cursor@b,c
  2365  0006CC  0E01               	movlw	1
  2366  0006CE  ECDB  F00C         	call	_Lcd_Set_Cursor
  2367                           
  2368                           ;main.c: 178: Lcd_Write_String("Waiting System  ");
  2369  0006D2  0E20               	movlw	low STR_7
  2370  0006D4  6E14               	movwf	Lcd_Write_String@a,c
  2371  0006D6  0E7F               	movlw	high STR_7
  2372  0006D8  6E15               	movwf	Lcd_Write_String@a+1,c
  2373  0006DA  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  2374                           
  2375                           ;main.c: 179: Lcd_Set_Cursor(2,1);
  2376  0006DE  0E01               	movlw	1
  2377  0006E0  6E12               	movwf	Lcd_Set_Cursor@b,c
  2378  0006E2  0E02               	movlw	2
  2379  0006E4  ECDB  F00C         	call	_Lcd_Set_Cursor
  2380                           
  2381                           ;main.c: 180: Lcd_Write_String("Response...     ");
  2382  0006E8  0EA9               	movlw	low STR_8
  2383  0006EA  6E14               	movwf	Lcd_Write_String@a,c
  2384  0006EC  0E7E               	movlw	high STR_8
  2385  0006EE  6E15               	movwf	Lcd_Write_String@a+1,c
  2386  0006F0  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  2387                           
  2388                           ;main.c: 184: load_i2c_registers();
  2389  0006F4  EC91  F00A         	call	_load_i2c_registers	;wreg free
  2390                           
  2391                           ;main.c: 185: unsigned char credential_state = 0;
  2392  0006F8  0E00               	movlw	0
  2393  0006FA  0101               	movlb	1	; () banked
  2394  0006FC  6F59               	movwf	main@credential_state& (0+255),b
  2395                           
  2396                           ; BSR set to: 1
  2397                           ;main.c: 186: for (int i = 0; i < 32; i++)
  2398  0006FE  0E00               	movlw	0
  2399  000700  0101               	movlb	1	; () banked
  2400  000702  6F5D               	movwf	(main@i_786+1)& (0+255),b
  2401  000704  0E00               	movlw	0
  2402  000706  6F5C               	movwf	main@i_786& (0+255),b
  2403  000708                     l4696:
  2404                           
  2405                           ; BSR set to: 1
  2406  000708  0101               	movlb	1	; () banked
  2407  00070A  BF5D               	btfsc	(main@i_786+1)& (0+255),7,b
  2408  00070C  D008               	goto	l4700
  2409  00070E  0101               	movlb	1	; () banked
  2410  000710  515D               	movf	(main@i_786+1)& (0+255),w,b
  2411  000712  E113               	bnz	l4706
  2412  000714  0E20               	movlw	32
  2413  000716  0101               	movlb	1	; () banked
  2414  000718  5D5C               	subwf	main@i_786& (0+255),w,b
  2415  00071A  B0D8               	btfsc	status,0,c
  2416  00071C  D00E               	goto	l4706
  2417  00071E                     l4700:
  2418                           
  2419                           ; BSR set to: 1
  2420                           ;main.c: 187: i2c_w_reg[i] = '-';
  2421  00071E  0E20               	movlw	low _i2c_w_reg
  2422  000720  0101               	movlb	1	; () banked
  2423  000722  255C               	addwf	main@i_786& (0+255),w,b
  2424  000724  6ED9               	movwf	fsr2l,c
  2425  000726  0E01               	movlw	high _i2c_w_reg
  2426  000728  0101               	movlb	1	; () banked
  2427  00072A  215D               	addwfc	(main@i_786+1)& (0+255),w,b
  2428  00072C  6EDA               	movwf	fsr2h,c
  2429  00072E  0E2D               	movlw	45
  2430  000730  6EDF               	movwf	indf2,c
  2431                           
  2432                           ; BSR set to: 1
  2433  000732  0101               	movlb	1	; () banked
  2434  000734  4B5C               	infsnz	main@i_786& (0+255),f,b
  2435  000736  2B5D               	incf	(main@i_786+1)& (0+255),f,b
  2436  000738  D7E7               	goto	l4696
  2437  00073A                     l4706:
  2438                           
  2439                           ; BSR set to: 1
  2440  00073A  0E2D               	movlw	45
  2441  00073C  0101               	movlb	1	; () banked
  2442  00073E  1920               	xorwf	_i2c_w_reg& (0+255),w,b	;volatile
  2443  000740  B4D8               	btfsc	status,2,c
  2444  000742  D7FB               	goto	l4706
  2445                           
  2446                           ; BSR set to: 1
  2447  000744  0E2D               	movlw	45
  2448  000746  0101               	movlb	1	; () banked
  2449  000748  193F               	xorwf	(_i2c_w_reg+31)& (0+255),w,b	;volatile
  2450  00074A  B4D8               	btfsc	status,2,c
  2451  00074C  D7F6               	goto	l4706
  2452                           
  2453                           ; BSR set to: 1
  2454                           ;main.c: 192: }
  2455                           ;main.c: 193: i2c_r_reg[0] = '-';
  2456                           
  2457                           ; BSR set to: 1
  2458  00074E  0E2D               	movlw	45
  2459  000750  0101               	movlb	1	; () banked
  2460  000752  6F00               	movwf	_i2c_r_reg& (0+255),b	;volatile
  2461                           
  2462                           ; BSR set to: 1
  2463                           ;main.c: 194: credential_state = i2c_w_reg[0];
  2464  000754  C120  F159         	movff	_i2c_w_reg,main@credential_state	;volatile
  2465                           
  2466                           ;main.c: 195: for (int u = 0; u < 16; u++)
  2467  000758  0E00               	movlw	0
  2468  00075A  0101               	movlb	1	; () banked
  2469  00075C  6F63               	movwf	(main@u+1)& (0+255),b
  2470  00075E  0E00               	movlw	0
  2471  000760  6F62               	movwf	main@u& (0+255),b
  2472  000762                     l4714:
  2473                           
  2474                           ; BSR set to: 1
  2475  000762  0101               	movlb	1	; () banked
  2476  000764  BF63               	btfsc	(main@u+1)& (0+255),7,b
  2477  000766  D008               	goto	l4718
  2478  000768  0101               	movlb	1	; () banked
  2479  00076A  5163               	movf	(main@u+1)& (0+255),w,b
  2480  00076C  E121               	bnz	l4724
  2481  00076E  0E10               	movlw	16
  2482  000770  0101               	movlb	1	; () banked
  2483  000772  5D62               	subwf	main@u& (0+255),w,b
  2484  000774  B0D8               	btfsc	status,0,c
  2485  000776  D01C               	goto	l4724
  2486  000778                     l4718:
  2487                           
  2488                           ; BSR set to: 1
  2489                           ;main.c: 196: logged_user[u] = i2c_w_reg[u+1];
  2490  000778  0E01               	movlw	1
  2491  00077A  0101               	movlb	1	; () banked
  2492  00077C  2562               	addwf	main@u& (0+255),w,b
  2493  00077E  6E27               	movwf	??_main& (0+255),c
  2494  000780  0E00               	movlw	0
  2495  000782  0101               	movlb	1	; () banked
  2496  000784  2163               	addwfc	(main@u+1)& (0+255),w,b
  2497  000786  6E28               	movwf	(??_main+1)& (0+255),c
  2498  000788  0E20               	movlw	low _i2c_w_reg
  2499  00078A  2427               	addwf	??_main,w,c
  2500  00078C  6ED9               	movwf	fsr2l,c
  2501  00078E  0E01               	movlw	high _i2c_w_reg
  2502  000790  2028               	addwfc	??_main+1,w,c
  2503  000792  6EDA               	movwf	fsr2h,c
  2504  000794  0EBA               	movlw	low _logged_user
  2505  000796  0101               	movlb	1	; () banked
  2506  000798  2562               	addwf	main@u& (0+255),w,b
  2507  00079A  6EE1               	movwf	fsr1l,c
  2508  00079C  0E00               	movlw	high _logged_user
  2509  00079E  0101               	movlb	1	; () banked
  2510  0007A0  2163               	addwfc	(main@u+1)& (0+255),w,b
  2511  0007A2  6EE2               	movwf	fsr1h,c
  2512  0007A4  CFDF FFE7          	movff	indf2,indf1
  2513                           
  2514                           ; BSR set to: 1
  2515  0007A8  0101               	movlb	1	; () banked
  2516  0007AA  4B62               	infsnz	main@u& (0+255),f,b
  2517  0007AC  2B63               	incf	(main@u+1)& (0+255),f,b
  2518  0007AE  D7D9               	goto	l4714
  2519  0007B0                     l4724:
  2520                           
  2521                           ; BSR set to: 1
  2522                           ;main.c: 197: if (credential_state == 0xA1)
  2523  0007B0  0EA1               	movlw	161
  2524  0007B2  0101               	movlb	1	; () banked
  2525  0007B4  1959               	xorwf	main@credential_state& (0+255),w,b
  2526  0007B6  A4D8               	btfss	status,2,c
  2527  0007B8  D03A               	goto	l4748
  2528                           
  2529                           ; BSR set to: 1
  2530                           ;main.c: 198: {
  2531                           ;main.c: 199: Lcd_Set_Cursor(1,1);
  2532  0007BA  0E01               	movlw	1
  2533  0007BC  6E12               	movwf	Lcd_Set_Cursor@b,c
  2534  0007BE  0E01               	movlw	1
  2535  0007C0  ECDB  F00C         	call	_Lcd_Set_Cursor
  2536                           
  2537                           ;main.c: 200: Lcd_Write_String("[Access Granted]");
  2538  0007C4  0ECA               	movlw	low STR_9
  2539  0007C6  6E14               	movwf	Lcd_Write_String@a,c
  2540  0007C8  0E7F               	movlw	high STR_9
  2541  0007CA  6E15               	movwf	Lcd_Write_String@a+1,c
  2542  0007CC  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  2543                           
  2544                           ;main.c: 201: menu_progress_bar(100);
  2545  0007D0  0E00               	movlw	0
  2546  0007D2  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  2547  0007D4  0E64               	movlw	100
  2548  0007D6  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  2549  0007D8  ECC0  F009         	call	_menu_progress_bar	;wreg free
  2550                           
  2551                           ;main.c: 202: Lcd_Set_Cursor(1,1);
  2552  0007DC  0E01               	movlw	1
  2553  0007DE  6E12               	movwf	Lcd_Set_Cursor@b,c
  2554  0007E0  0E01               	movlw	1
  2555  0007E2  ECDB  F00C         	call	_Lcd_Set_Cursor
  2556                           
  2557                           ;main.c: 203: Lcd_Write_String("   [ Welcome ]  ");
  2558  0007E6  0E0F               	movlw	low STR_10
  2559  0007E8  6E14               	movwf	Lcd_Write_String@a,c
  2560  0007EA  0E7F               	movlw	high STR_10
  2561  0007EC  6E15               	movwf	Lcd_Write_String@a+1,c
  2562  0007EE  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  2563                           
  2564                           ;main.c: 204: for (int i = 0; i < 20; i++)
  2565  0007F2  0E00               	movlw	0
  2566  0007F4  0101               	movlb	1	; () banked
  2567  0007F6  6F54               	movwf	(main@i_790+1)& (0+255),b
  2568  0007F8  0E00               	movlw	0
  2569  0007FA  6F53               	movwf	main@i_790& (0+255),b
  2570  0007FC                     l4738:
  2571                           
  2572                           ; BSR set to: 1
  2573  0007FC  0101               	movlb	1	; () banked
  2574  0007FE  BF54               	btfsc	(main@i_790+1)& (0+255),7,b
  2575  000800  D008               	goto	l4742
  2576  000802  0101               	movlb	1	; () banked
  2577  000804  5154               	movf	(main@i_790+1)& (0+255),w,b
  2578  000806  E110               	bnz	l4746
  2579  000808  0E14               	movlw	20
  2580  00080A  0101               	movlb	1	; () banked
  2581  00080C  5D53               	subwf	main@i_790& (0+255),w,b
  2582  00080E  B0D8               	btfsc	status,0,c
  2583  000810  D00B               	goto	l4746
  2584  000812                     l4742:
  2585                           
  2586                           ; BSR set to: 1
  2587                           ;main.c: 205: {
  2588                           ;main.c: 206: _delay((unsigned long)((10)*(16000000/4000.0)));
  2589  000812  0E34               	movlw	52
  2590  000814  6E27               	movwf	??_main& (0+255),c
  2591  000816  0EF2               	movlw	242
  2592  000818                     u4657:
  2593  000818  2EE8               	decfsz	wreg,f,c
  2594  00081A  D7FE               	goto	u4657
  2595  00081C  2E27               	decfsz	??_main& (0+255),f,c
  2596  00081E  D7FC               	goto	u4657
  2597  000820  0101               	movlb	1	; () banked
  2598  000822  4B53               	infsnz	main@i_790& (0+255),f,b
  2599  000824  2B54               	incf	(main@i_790+1)& (0+255),f,b
  2600  000826  D7EA               	goto	l4738
  2601  000828                     l4746:
  2602                           
  2603                           ; BSR set to: 1
  2604                           ;main.c: 207: }
  2605                           ;main.c: 208: running_display();
  2606  000828  EC45  F008         	call	_running_display	;wreg free
  2607                           
  2608                           ;main.c: 209: }
  2609  00082C  D069               	goto	l4784
  2610  00082E                     l4748:
  2611                           
  2612                           ;main.c: 210: else if (credential_state == 0xA0)
  2613  00082E  0EA0               	movlw	160
  2614  000830  0101               	movlb	1	; () banked
  2615  000832  1959               	xorwf	main@credential_state& (0+255),w,b
  2616  000834  A4D8               	btfss	status,2,c
  2617  000836  D032               	goto	l239
  2618                           
  2619                           ; BSR set to: 1
  2620                           ;main.c: 211: {
  2621                           ;main.c: 212: PORTDbits.RD7 = 0;
  2622  000838  9E83               	bcf	3971,7,c	;volatile
  2623                           
  2624                           ; BSR set to: 1
  2625                           ;main.c: 213: Lcd_Set_Cursor(1,1);
  2626  00083A  0E01               	movlw	1
  2627  00083C  6E12               	movwf	Lcd_Set_Cursor@b,c
  2628  00083E  0E01               	movlw	1
  2629  000840  ECDB  F00C         	call	_Lcd_Set_Cursor
  2630                           
  2631                           ;main.c: 214: Lcd_Write_String("[Access  Denied]");
  2632  000844  0EB9               	movlw	low STR_11
  2633  000846  6E14               	movwf	Lcd_Write_String@a,c
  2634  000848  0E7F               	movlw	high STR_11
  2635  00084A  6E15               	movwf	Lcd_Write_String@a+1,c
  2636  00084C  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  2637                           
  2638                           ;main.c: 215: Lcd_Set_Cursor(2,1);
  2639  000850  0E01               	movlw	1
  2640  000852  6E12               	movwf	Lcd_Set_Cursor@b,c
  2641  000854  0E02               	movlw	2
  2642  000856  ECDB  F00C         	call	_Lcd_Set_Cursor
  2643                           
  2644                           ;main.c: 216: Lcd_Write_String("    [ Retry ]   ");
  2645  00085A  0ECB               	movlw	low STR_12
  2646  00085C  6E14               	movwf	Lcd_Write_String@a,c
  2647  00085E  0E7E               	movlw	high STR_12
  2648  000860  6E15               	movwf	Lcd_Write_String@a+1,c
  2649  000862  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  2650                           
  2651                           ;main.c: 217: for (int i = 0; i < 100; i++)
  2652  000866  0E00               	movlw	0
  2653  000868  0101               	movlb	1	; () banked
  2654  00086A  6F56               	movwf	(main@i_793+1)& (0+255),b
  2655  00086C  0E00               	movlw	0
  2656  00086E  6F55               	movwf	main@i_793& (0+255),b
  2657  000870                     l4760:
  2658                           
  2659                           ; BSR set to: 1
  2660  000870  0101               	movlb	1	; () banked
  2661  000872  BF56               	btfsc	(main@i_793+1)& (0+255),7,b
  2662  000874  D008               	goto	l4764
  2663  000876  0101               	movlb	1	; () banked
  2664  000878  5156               	movf	(main@i_793+1)& (0+255),w,b
  2665  00087A  E142               	bnz	l4784
  2666  00087C  0E64               	movlw	100
  2667  00087E  0101               	movlb	1	; () banked
  2668  000880  5D55               	subwf	main@i_793& (0+255),w,b
  2669  000882  B0D8               	btfsc	status,0,c
  2670  000884  D03D               	goto	l4784
  2671  000886                     l4764:
  2672                           
  2673                           ; BSR set to: 1
  2674                           ;main.c: 218: {
  2675                           ;main.c: 219: _delay((unsigned long)((10)*(16000000/4000.0)));
  2676  000886  0E34               	movlw	52
  2677  000888  6E27               	movwf	??_main& (0+255),c
  2678  00088A  0EF2               	movlw	242
  2679  00088C                     u4667:
  2680  00088C  2EE8               	decfsz	wreg,f,c
  2681  00088E  D7FE               	goto	u4667
  2682  000890  2E27               	decfsz	??_main& (0+255),f,c
  2683  000892  D7FC               	goto	u4667
  2684  000894  0101               	movlb	1	; () banked
  2685  000896  4B55               	infsnz	main@i_793& (0+255),f,b
  2686  000898  2B56               	incf	(main@i_793+1)& (0+255),f,b
  2687  00089A  D7EA               	goto	l4760
  2688  00089C                     l239:
  2689                           
  2690                           ; BSR set to: 1
  2691                           ;main.c: 222: else
  2692                           ;main.c: 223: {
  2693                           ;main.c: 224: PORTDbits.RD7 = 0;
  2694  00089C  9E83               	bcf	3971,7,c	;volatile
  2695                           
  2696                           ; BSR set to: 1
  2697                           ;main.c: 225: Lcd_Set_Cursor(1,1);
  2698  00089E  0E01               	movlw	1
  2699  0008A0  6E12               	movwf	Lcd_Set_Cursor@b,c
  2700  0008A2  0E01               	movlw	1
  2701  0008A4  ECDB  F00C         	call	_Lcd_Set_Cursor
  2702                           
  2703                           ;main.c: 226: Lcd_Write_String("[ System Error ]");
  2704  0008A8  0E97               	movlw	low STR_13
  2705  0008AA  6E14               	movwf	Lcd_Write_String@a,c
  2706  0008AC  0E7F               	movlw	high STR_13
  2707  0008AE  6E15               	movwf	Lcd_Write_String@a+1,c
  2708  0008B0  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  2709                           
  2710                           ;main.c: 227: Lcd_Set_Cursor(2,1);
  2711  0008B4  0E01               	movlw	1
  2712  0008B6  6E12               	movwf	Lcd_Set_Cursor@b,c
  2713  0008B8  0E02               	movlw	2
  2714  0008BA  ECDB  F00C         	call	_Lcd_Set_Cursor
  2715                           
  2716                           ;main.c: 228: Lcd_Write_String("    [ Retry ]   ");
  2717  0008BE  0ECB               	movlw	low STR_12
  2718  0008C0  6E14               	movwf	Lcd_Write_String@a,c
  2719  0008C2  0E7E               	movlw	high STR_12
  2720  0008C4  6E15               	movwf	Lcd_Write_String@a+1,c
  2721  0008C6  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  2722                           
  2723                           ;main.c: 229: for (int i = 0; i < 100; i++)
  2724  0008CA  0E00               	movlw	0
  2725  0008CC  0101               	movlb	1	; () banked
  2726  0008CE  6F58               	movwf	(main@i_796+1)& (0+255),b
  2727  0008D0  0E00               	movlw	0
  2728  0008D2  6F57               	movwf	main@i_796& (0+255),b
  2729  0008D4                     l4776:
  2730                           
  2731                           ; BSR set to: 1
  2732  0008D4  0101               	movlb	1	; () banked
  2733  0008D6  BF58               	btfsc	(main@i_796+1)& (0+255),7,b
  2734  0008D8  D008               	goto	l4780
  2735  0008DA  0101               	movlb	1	; () banked
  2736  0008DC  5158               	movf	(main@i_796+1)& (0+255),w,b
  2737  0008DE  E110               	bnz	l4784
  2738  0008E0  0E64               	movlw	100
  2739  0008E2  0101               	movlb	1	; () banked
  2740  0008E4  5D57               	subwf	main@i_796& (0+255),w,b
  2741  0008E6  B0D8               	btfsc	status,0,c
  2742  0008E8  D00B               	goto	l4784
  2743  0008EA                     l4780:
  2744                           
  2745                           ; BSR set to: 1
  2746                           ;main.c: 230: {
  2747                           ;main.c: 231: _delay((unsigned long)((10)*(16000000/4000.0)));
  2748  0008EA  0E34               	movlw	52
  2749  0008EC  6E27               	movwf	??_main& (0+255),c
  2750  0008EE  0EF2               	movlw	242
  2751  0008F0                     u4677:
  2752  0008F0  2EE8               	decfsz	wreg,f,c
  2753  0008F2  D7FE               	goto	u4677
  2754  0008F4  2E27               	decfsz	??_main& (0+255),f,c
  2755  0008F6  D7FC               	goto	u4677
  2756  0008F8  0101               	movlb	1	; () banked
  2757  0008FA  4B57               	infsnz	main@i_796& (0+255),f,b
  2758  0008FC  2B58               	incf	(main@i_796+1)& (0+255),f,b
  2759  0008FE  D7EA               	goto	l4776
  2760  000900                     l4784:
  2761  000900  0100               	movlb	0	; () banked
  2762  000902  51DD               	movf	_credentials_accepted& (0+255),w,b	;volatile
  2763  000904  A4D8               	btfss	status,2,c
  2764  000906  D40C               	goto	l4504
  2765  000908  D43D               	goto	l4518
  2766  00090A                     __end_of_main:
  2767                           	opt stack 0
  2768                           tblptru	equ	0xFF8
  2769                           tblptrh	equ	0xFF7
  2770                           tblptrl	equ	0xFF6
  2771                           tablat	equ	0xFF5
  2772                           prodh	equ	0xFF4
  2773                           prodl	equ	0xFF3
  2774                           postinc0	equ	0xFEE
  2775                           wreg	equ	0xFE8
  2776                           indf1	equ	0xFE7
  2777                           postdec1	equ	0xFE5
  2778                           plusw1	equ	0xFE3
  2779                           fsr1h	equ	0xFE2
  2780                           fsr1l	equ	0xFE1
  2781                           indf2	equ	0xFDF
  2782                           plusw2	equ	0xFDB
  2783                           fsr2h	equ	0xFDA
  2784                           fsr2l	equ	0xFD9
  2785                           status	equ	0xFD8
  2786                           
  2787 ;; *************** function _start_routine *****************
  2788 ;; Defined at:
  2789 ;;		line 392 in file "main.c"
  2790 ;; Parameters:    Size  Location     Type
  2791 ;;		None
  2792 ;; Auto vars:     Size  Location     Type
  2793 ;;  i               2   37[BANK0 ] int 
  2794 ;;  i               2   30[BANK0 ] int 
  2795 ;;  i               2   28[BANK0 ] int 
  2796 ;;  i               2   26[BANK0 ] int 
  2797 ;;  i               2   35[BANK0 ] int 
  2798 ;;  i               2   44[BANK0 ] int 
  2799 ;;  b               3   32[BANK0 ] unsigned char [3]
  2800 ;;  error_msg       2   16[BANK0 ] PTR unsigned char 
  2801 ;;		 -> STR_28(17), STR_27(17), 
  2802 ;;  new_I2C_addr    1   49[BANK0 ] unsigned char 
  2803 ;;  I2C_new_ADDR    3   39[BANK0 ] unsigned char [3]
  2804 ;;  i               2   24[BANK0 ] int 
  2805 ;;  i               2   22[BANK0 ] int 
  2806 ;;  i               2   20[BANK0 ] int 
  2807 ;;  n               1   48[BANK0 ] unsigned char 
  2808 ;;  x               1   47[BANK0 ] unsigned char 
  2809 ;;  dh              1   46[BANK0 ] unsigned char 
  2810 ;;  dt              1   43[BANK0 ] unsigned char 
  2811 ;;  a               1   42[BANK0 ] unsigned char 
  2812 ;;  v               1   19[BANK0 ] unsigned char 
  2813 ;;  d1              1   18[BANK0 ] unsigned char 
  2814 ;;  l               1   15[BANK0 ] unsigned char 
  2815 ;;  h               1   14[BANK0 ] unsigned char 
  2816 ;; Return value:  Size  Location     Type
  2817 ;;                  1    wreg      void 
  2818 ;; Registers used:
  2819 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2825 ;;      Params:         0       0       0       0       0       0       0
  2826 ;;      Locals:         0      36       0       0       0       0       0
  2827 ;;      Temps:          4       0       0       0       0       0       0
  2828 ;;      Totals:         4      36       0       0       0       0       0
  2829 ;;Total ram usage:       40 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    5
  2832 ;; This function calls:
  2833 ;;		_Eeprom_Write_Byte
  2834 ;;		_Lcd_Clear
  2835 ;;		_Lcd_Set_Cursor
  2836 ;;		_Lcd_Write_Char
  2837 ;;		_Lcd_Write_String
  2838 ;;		___awdiv
  2839 ;;		_latch_keypad
  2840 ;;		_menu_progress_bar
  2841 ;;		_read_keypad
  2842 ;; This function is called by:
  2843 ;;		_main
  2844 ;; This function uses a non-reentrant model
  2845 ;;
  2846                           
  2847                           	psect	text1
  2848  00090A                     __ptext1:
  2849                           	opt stack 0
  2850  00090A                     _start_routine:
  2851                           	opt stack 25
  2852                           
  2853                           ;main.c: 397: Lcd_Clear();
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;incstack = 0
  2857  00090A  ECAA  F00D         	call	_Lcd_Clear	;wreg free
  2858                           
  2859                           ;main.c: 398: Lcd_Set_Cursor(1, 1);
  2860  00090E  0E01               	movlw	1
  2861  000910  6E12               	movwf	Lcd_Set_Cursor@b,c
  2862  000912  0E01               	movlw	1
  2863  000914  ECDB  F00C         	call	_Lcd_Set_Cursor
  2864                           
  2865                           ;main.c: 399: Lcd_Write_String("   [ Aditum ]   ");
  2866  000918  0EBA               	movlw	low STR_15
  2867  00091A  6E14               	movwf	Lcd_Write_String@a,c
  2868  00091C  0E7E               	movlw	high STR_15
  2869  00091E  6E15               	movwf	Lcd_Write_String@a+1,c
  2870  000920  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  2871                           
  2872                           ;main.c: 400: for (int i = 0; i < 20; i++)
  2873  000924  0E00               	movlw	0
  2874  000926  0100               	movlb	0	; () banked
  2875  000928  6F75               	movwf	(start_routine@i+1)& (0+255),b
  2876  00092A  0E00               	movlw	0
  2877  00092C  6F74               	movwf	start_routine@i& (0+255),b
  2878  00092E                     l3986:
  2879                           
  2880                           ; BSR set to: 0
  2881  00092E  0100               	movlb	0	; () banked
  2882  000930  BF75               	btfsc	(start_routine@i+1)& (0+255),7,b
  2883  000932  D008               	goto	l3990
  2884  000934  0100               	movlb	0	; () banked
  2885  000936  5175               	movf	(start_routine@i+1)& (0+255),w,b
  2886  000938  E112               	bnz	l3994
  2887  00093A  0E14               	movlw	20
  2888  00093C  0100               	movlb	0	; () banked
  2889  00093E  5D74               	subwf	start_routine@i& (0+255),w,b
  2890  000940  B0D8               	btfsc	status,0,c
  2891  000942  D00D               	goto	l3994
  2892  000944                     l3990:
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;main.c: 401: _delay((unsigned long)((20)*(16000000/4000.0)));
  2896  000944  0E68               	movlw	104
  2897  000946  6E23               	movwf	??_start_routine& (0+255),c
  2898  000948  0EE4               	movlw	228
  2899  00094A                     u4687:
  2900  00094A  2EE8               	decfsz	wreg,f,c
  2901  00094C  D7FE               	goto	u4687
  2902  00094E  2E23               	decfsz	??_start_routine& (0+255),f,c
  2903  000950  D7FC               	goto	u4687
  2904  000952  F000 F000          	nop2	
  2905  000956  0100               	movlb	0	; () banked
  2906  000958  4B74               	infsnz	start_routine@i& (0+255),f,b
  2907  00095A  2B75               	incf	(start_routine@i+1)& (0+255),f,b
  2908  00095C  D7E8               	goto	l3986
  2909  00095E                     l3994:
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;main.c: 402: Lcd_Set_Cursor(2,1);
  2913  00095E  0E01               	movlw	1
  2914  000960  6E12               	movwf	Lcd_Set_Cursor@b,c
  2915  000962  0E02               	movlw	2
  2916  000964  ECDB  F00C         	call	_Lcd_Set_Cursor
  2917                           
  2918                           ;main.c: 403: Lcd_Write_String("Rev ");
  2919  000968  0EF2               	movlw	low STR_16
  2920  00096A  6E14               	movwf	Lcd_Write_String@a,c
  2921  00096C  0E7F               	movlw	high STR_16
  2922  00096E  6E15               	movwf	Lcd_Write_String@a+1,c
  2923  000970  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  2924                           
  2925                           ;main.c: 404: Lcd_Write_String("1.0.0");
  2926  000974  0EE6               	movlw	low STR_17
  2927  000976  6E14               	movwf	Lcd_Write_String@a,c
  2928  000978  0E7F               	movlw	high STR_17
  2929  00097A  6E15               	movwf	Lcd_Write_String@a+1,c
  2930  00097C  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  2931                           
  2932                           ;main.c: 405: for (int i = 0; i < 50; i++)
  2933  000980  0E00               	movlw	0
  2934  000982  0100               	movlb	0	; () banked
  2935  000984  6F77               	movwf	(start_routine@i_875+1)& (0+255),b
  2936  000986  0E00               	movlw	0
  2937  000988  6F76               	movwf	start_routine@i_875& (0+255),b
  2938  00098A                     l4002:
  2939                           
  2940                           ; BSR set to: 0
  2941  00098A  0100               	movlb	0	; () banked
  2942  00098C  BF77               	btfsc	(start_routine@i_875+1)& (0+255),7,b
  2943  00098E  D008               	goto	l4006
  2944  000990  0100               	movlb	0	; () banked
  2945  000992  5177               	movf	(start_routine@i_875+1)& (0+255),w,b
  2946  000994  E112               	bnz	l4010
  2947  000996  0E32               	movlw	50
  2948  000998  0100               	movlb	0	; () banked
  2949  00099A  5D76               	subwf	start_routine@i_875& (0+255),w,b
  2950  00099C  B0D8               	btfsc	status,0,c
  2951  00099E  D00D               	goto	l4010
  2952  0009A0                     l4006:
  2953                           
  2954                           ; BSR set to: 0
  2955                           ;main.c: 406: _delay((unsigned long)((20)*(16000000/4000.0)));
  2956  0009A0  0E68               	movlw	104
  2957  0009A2  6E23               	movwf	??_start_routine& (0+255),c
  2958  0009A4  0EE4               	movlw	228
  2959  0009A6                     u4697:
  2960  0009A6  2EE8               	decfsz	wreg,f,c
  2961  0009A8  D7FE               	goto	u4697
  2962  0009AA  2E23               	decfsz	??_start_routine& (0+255),f,c
  2963  0009AC  D7FC               	goto	u4697
  2964  0009AE  F000 F000          	nop2	
  2965  0009B2  0100               	movlb	0	; () banked
  2966  0009B4  4B76               	infsnz	start_routine@i_875& (0+255),f,b
  2967  0009B6  2B77               	incf	(start_routine@i_875+1)& (0+255),f,b
  2968  0009B8  D7E8               	goto	l4002
  2969  0009BA                     l4010:
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;main.c: 407: Lcd_Set_Cursor(2,1);
  2973  0009BA  0E01               	movlw	1
  2974  0009BC  6E12               	movwf	Lcd_Set_Cursor@b,c
  2975  0009BE  0E02               	movlw	2
  2976  0009C0  ECDB  F00C         	call	_Lcd_Set_Cursor
  2977                           
  2978                           ;main.c: 408: Lcd_Write_String("Device ID ");
  2979  0009C4  0EDB               	movlw	low STR_18
  2980  0009C6  6E14               	movwf	Lcd_Write_String@a,c
  2981  0009C8  0E7F               	movlw	high STR_18
  2982  0009CA  6E15               	movwf	Lcd_Write_String@a+1,c
  2983  0009CC  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  2984                           
  2985                           ;main.c: 409: unsigned char a, h, l, dh, dt, d1;
  2986                           ;main.c: 410: if (I2C_ADDR != 0)
  2987  0009D0  0100               	movlb	0	; () banked
  2988  0009D2  51DE               	movf	_I2C_ADDR& (0+255),w,b
  2989  0009D4  B4D8               	btfsc	status,2,c
  2990  0009D6  D004               	goto	l4018
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;main.c: 411: a = I2C_ADDR - 0x0F;
  2994  0009D8  0100               	movlb	0	; () banked
  2995  0009DA  51DE               	movf	_I2C_ADDR& (0+255),w,b
  2996  0009DC  0FF1               	addlw	241
  2997  0009DE  D001               	goto	L2
  2998  0009E0                     l4018:
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;main.c: 412: else
  3002                           ;main.c: 413: a = 0;
  3003  0009E0  0E00               	movlw	0
  3004  0009E2                     L2:
  3005  0009E2  0100               	movlb	0	; () banked
  3006  0009E4  6F8A               	movwf	start_routine@a& (0+255),b
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;main.c: 415: dh = (a / 100);
  3010                           
  3011                           ; BSR set to: 0
  3012  0009E6  C08A  F010         	movff	start_routine@a,___awdiv@dividend
  3013  0009EA  6A11               	clrf	___awdiv@dividend+1,c
  3014  0009EC  0E00               	movlw	0
  3015  0009EE  6E13               	movwf	___awdiv@divisor+1,c
  3016  0009F0  0E64               	movlw	100
  3017  0009F2  6E12               	movwf	___awdiv@divisor,c
  3018  0009F4  EC59  F00B         	call	___awdiv	;wreg free
  3019  0009F8  5010               	movf	?___awdiv,w,c
  3020  0009FA  0100               	movlb	0	; () banked
  3021  0009FC  6F8E               	movwf	start_routine@dh& (0+255),b
  3022                           
  3023                           ; BSR set to: 0
  3024                           ;main.c: 416: dt = (a - dh*100) / 10;
  3025  0009FE  0100               	movlb	0	; () banked
  3026  000A00  518E               	movf	start_routine@dh& (0+255),w,b
  3027  000A02  0D64               	mullw	100
  3028  000A04  1EF3               	comf	prodl,f,c
  3029  000A06  1EF4               	comf	prodh,f,c
  3030  000A08  4AF3               	infsnz	prodl,f,c
  3031  000A0A  2AF4               	incf	prodh,f,c
  3032  000A0C  0100               	movlb	0	; () banked
  3033  000A0E  518A               	movf	start_routine@a& (0+255),w,b
  3034  000A10  24F3               	addwf	prodl,w,c
  3035  000A12  6E10               	movwf	___awdiv@dividend,c
  3036  000A14  0E00               	movlw	0
  3037  000A16  20F4               	addwfc	prodh,w,c
  3038  000A18  6E11               	movwf	___awdiv@dividend+1,c
  3039  000A1A  0E00               	movlw	0
  3040  000A1C  6E13               	movwf	___awdiv@divisor+1,c
  3041  000A1E  0E0A               	movlw	10
  3042  000A20  6E12               	movwf	___awdiv@divisor,c
  3043  000A22  EC59  F00B         	call	___awdiv	;wreg free
  3044  000A26  5010               	movf	?___awdiv,w,c
  3045  000A28  0100               	movlb	0	; () banked
  3046  000A2A  6F8B               	movwf	start_routine@dt& (0+255),b
  3047                           
  3048                           ; BSR set to: 0
  3049                           ;main.c: 417: d1 = (a - (dh*100+dt*10));
  3050  000A2C  0100               	movlb	0	; () banked
  3051  000A2E  518B               	movf	start_routine@dt& (0+255),w,b
  3052  000A30  0D0A               	mullw	10
  3053  000A32  CFF3 F023          	movff	prodl,??_start_routine
  3054  000A36  0100               	movlb	0	; () banked
  3055  000A38  518E               	movf	start_routine@dh& (0+255),w,b
  3056  000A3A  0D64               	mullw	100
  3057  000A3C  50F3               	movf	prodl,w,c
  3058  000A3E  2423               	addwf	??_start_routine,w,c
  3059  000A40  0800               	sublw	0
  3060  000A42  0100               	movlb	0	; () banked
  3061  000A44  258A               	addwf	start_routine@a& (0+255),w,b
  3062  000A46  0100               	movlb	0	; () banked
  3063  000A48  6F72               	movwf	start_routine@d1& (0+255),b
  3064                           
  3065                           ; BSR set to: 0
  3066                           ;main.c: 418: Lcd_Write_Char(c[dh]);
  3067  000A4A  0100               	movlb	0	; () banked
  3068  000A4C  518E               	movf	start_routine@dh& (0+255),w,b
  3069  000A4E  0D01               	mullw	1
  3070  000A50  0E92               	movlw	low _c
  3071  000A52  24F3               	addwf	prodl,w,c
  3072  000A54  6ED9               	movwf	fsr2l,c
  3073  000A56  0E00               	movlw	high _c
  3074  000A58  20F4               	addwfc	prodh,w,c
  3075  000A5A  6EDA               	movwf	fsr2h,c
  3076  000A5C  50DF               	movf	indf2,w,c
  3077  000A5E  EC3F  F00D         	call	_Lcd_Write_Char
  3078                           
  3079                           ;main.c: 419: Lcd_Write_Char(c[dt]);
  3080  000A62  0100               	movlb	0	; () banked
  3081  000A64  518B               	movf	start_routine@dt& (0+255),w,b
  3082  000A66  0D01               	mullw	1
  3083  000A68  0E92               	movlw	low _c
  3084  000A6A  24F3               	addwf	prodl,w,c
  3085  000A6C  6ED9               	movwf	fsr2l,c
  3086  000A6E  0E00               	movlw	high _c
  3087  000A70  20F4               	addwfc	prodh,w,c
  3088  000A72  6EDA               	movwf	fsr2h,c
  3089  000A74  50DF               	movf	indf2,w,c
  3090  000A76  EC3F  F00D         	call	_Lcd_Write_Char
  3091                           
  3092                           ;main.c: 420: Lcd_Write_Char(c[d1]);
  3093  000A7A  0100               	movlb	0	; () banked
  3094  000A7C  5172               	movf	start_routine@d1& (0+255),w,b
  3095  000A7E  0D01               	mullw	1
  3096  000A80  0E92               	movlw	low _c
  3097  000A82  24F3               	addwf	prodl,w,c
  3098  000A84  6ED9               	movwf	fsr2l,c
  3099  000A86  0E00               	movlw	high _c
  3100  000A88  20F4               	addwfc	prodh,w,c
  3101  000A8A  6EDA               	movwf	fsr2h,c
  3102  000A8C  50DF               	movf	indf2,w,c
  3103  000A8E  EC3F  F00D         	call	_Lcd_Write_Char
  3104                           
  3105                           ;main.c: 421: Lcd_Write_Char('|');
  3106  000A92  0E7C               	movlw	124
  3107  000A94  EC3F  F00D         	call	_Lcd_Write_Char
  3108                           
  3109                           ;main.c: 422: Lcd_Write_Char(hx[I2C_ADDR/16]);
  3110  000A98  C0DE  F010         	movff	_I2C_ADDR,___awdiv@dividend
  3111  000A9C  6A11               	clrf	___awdiv@dividend+1,c
  3112  000A9E  0E00               	movlw	0
  3113  000AA0  6E13               	movwf	___awdiv@divisor+1,c
  3114  000AA2  0E10               	movlw	16
  3115  000AA4  6E12               	movwf	___awdiv@divisor,c
  3116  000AA6  EC59  F00B         	call	___awdiv	;wreg free
  3117  000AAA  0E2F               	movlw	low _hx
  3118  000AAC  2410               	addwf	?___awdiv,w,c
  3119  000AAE  6ED9               	movwf	fsr2l,c
  3120  000AB0  0E00               	movlw	high _hx
  3121  000AB2  2011               	addwfc	?___awdiv+1,w,c
  3122  000AB4  6EDA               	movwf	fsr2h,c
  3123  000AB6  50DF               	movf	indf2,w,c
  3124  000AB8  EC3F  F00D         	call	_Lcd_Write_Char
  3125                           
  3126                           ;main.c: 423: Lcd_Write_Char(hx[I2C_ADDR - (I2C_ADDR/16)*16]);
  3127  000ABC  C0DE  F010         	movff	_I2C_ADDR,___awdiv@dividend
  3128  000AC0  6A11               	clrf	___awdiv@dividend+1,c
  3129  000AC2  0E00               	movlw	0
  3130  000AC4  6E13               	movwf	___awdiv@divisor+1,c
  3131  000AC6  0E10               	movlw	16
  3132  000AC8  6E12               	movwf	___awdiv@divisor,c
  3133  000ACA  EC59  F00B         	call	___awdiv	;wreg free
  3134  000ACE  3A10               	swapf	?___awdiv,f,c
  3135  000AD0  3A11               	swapf	?___awdiv+1,f,c
  3136  000AD2  0EF0               	movlw	240
  3137  000AD4  1611               	andwf	?___awdiv+1,f,c
  3138  000AD6  5010               	movf	?___awdiv,w,c
  3139  000AD8  0B0F               	andlw	15
  3140  000ADA  1211               	iorwf	?___awdiv+1,f,c
  3141  000ADC  0EF0               	movlw	240
  3142  000ADE  1610               	andwf	?___awdiv,f,c
  3143  000AE0  1E10               	comf	?___awdiv,f,c
  3144  000AE2  1E11               	comf	?___awdiv+1,f,c
  3145  000AE4  4A10               	infsnz	?___awdiv,f,c
  3146  000AE6  2A11               	incf	?___awdiv+1,f,c
  3147  000AE8  0100               	movlb	0	; () banked
  3148  000AEA  51DE               	movf	_I2C_ADDR& (0+255),w,b
  3149  000AEC  6E23               	movwf	??_start_routine& (0+255),c
  3150  000AEE  6A24               	clrf	(??_start_routine+1)& (0+255),c
  3151  000AF0  5010               	movf	?___awdiv,w,c
  3152  000AF2  2623               	addwf	??_start_routine,f,c
  3153  000AF4  5011               	movf	?___awdiv+1,w,c
  3154  000AF6  2224               	addwfc	??_start_routine+1,f,c
  3155  000AF8  0E2F               	movlw	low _hx
  3156  000AFA  2423               	addwf	??_start_routine,w,c
  3157  000AFC  6ED9               	movwf	fsr2l,c
  3158  000AFE  0E00               	movlw	high _hx
  3159  000B00  2024               	addwfc	??_start_routine+1,w,c
  3160  000B02  6EDA               	movwf	fsr2h,c
  3161  000B04  50DF               	movf	indf2,w,c
  3162  000B06  EC3F  F00D         	call	_Lcd_Write_Char
  3163                           
  3164                           ;main.c: 424: for (int i = 0; i < 40; i++)
  3165  000B0A  0E00               	movlw	0
  3166  000B0C  0100               	movlb	0	; () banked
  3167  000B0E  6F79               	movwf	(start_routine@i_883+1)& (0+255),b
  3168  000B10  0E00               	movlw	0
  3169  000B12  6F78               	movwf	start_routine@i_883& (0+255),b
  3170  000B14                     l4040:
  3171                           
  3172                           ; BSR set to: 0
  3173  000B14  0100               	movlb	0	; () banked
  3174  000B16  BF79               	btfsc	(start_routine@i_883+1)& (0+255),7,b
  3175  000B18  D008               	goto	l4044
  3176  000B1A  0100               	movlb	0	; () banked
  3177  000B1C  5179               	movf	(start_routine@i_883+1)& (0+255),w,b
  3178  000B1E  E112               	bnz	l4048
  3179  000B20  0E28               	movlw	40
  3180  000B22  0100               	movlb	0	; () banked
  3181  000B24  5D78               	subwf	start_routine@i_883& (0+255),w,b
  3182  000B26  B0D8               	btfsc	status,0,c
  3183  000B28  D00D               	goto	l4048
  3184  000B2A                     l4044:
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;main.c: 425: _delay((unsigned long)((20)*(16000000/4000.0)));
  3188  000B2A  0E68               	movlw	104
  3189  000B2C  6E23               	movwf	??_start_routine& (0+255),c
  3190  000B2E  0EE4               	movlw	228
  3191  000B30                     u4707:
  3192  000B30  2EE8               	decfsz	wreg,f,c
  3193  000B32  D7FE               	goto	u4707
  3194  000B34  2E23               	decfsz	??_start_routine& (0+255),f,c
  3195  000B36  D7FC               	goto	u4707
  3196  000B38  F000 F000          	nop2	
  3197  000B3C  0100               	movlb	0	; () banked
  3198  000B3E  4B78               	infsnz	start_routine@i_883& (0+255),f,b
  3199  000B40  2B79               	incf	(start_routine@i_883+1)& (0+255),f,b
  3200  000B42  D7E8               	goto	l4040
  3201  000B44                     l4048:
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;main.c: 426: Lcd_Clear();
  3205  000B44  ECAA  F00D         	call	_Lcd_Clear	;wreg free
  3206                           
  3207                           ;main.c: 427: Lcd_Set_Cursor(1, 1);
  3208  000B48  0E01               	movlw	1
  3209  000B4A  6E12               	movwf	Lcd_Set_Cursor@b,c
  3210  000B4C  0E01               	movlw	1
  3211  000B4E  ECDB  F00C         	call	_Lcd_Set_Cursor
  3212                           
  3213                           ;main.c: 428: Lcd_Write_String("  [  Aditum  ]  ");
  3214  000B52  0EFE               	movlw	low STR_19
  3215  000B54  6E14               	movwf	Lcd_Write_String@a,c
  3216  000B56  0E7E               	movlw	high STR_19
  3217  000B58  6E15               	movwf	Lcd_Write_String@a+1,c
  3218  000B5A  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  3219                           
  3220                           ;main.c: 429: menu_progress_bar(700);
  3221  000B5E  0E02               	movlw	2
  3222  000B60  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  3223  000B62  0EBC               	movlw	188
  3224  000B64  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  3225  000B66  ECC0  F009         	call	_menu_progress_bar	;wreg free
  3226                           
  3227                           ;main.c: 432: unsigned char x, n = 0, v;
  3228  000B6A  0E00               	movlw	0
  3229  000B6C  0100               	movlb	0	; () banked
  3230  000B6E  6F90               	movwf	start_routine@n& (0+255),b
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;main.c: 433: if (I2C_ADDR == 0x00)
  3234  000B70  0100               	movlb	0	; () banked
  3235  000B72  51DE               	movf	_I2C_ADDR& (0+255),w,b
  3236  000B74  A4D8               	btfss	status,2,c
  3237  000B76  D285               	goto	l4260
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;main.c: 434: {
  3241                           ;main.c: 435: v = 0;
  3242  000B78  0E00               	movlw	0
  3243  000B7A  0100               	movlb	0	; () banked
  3244  000B7C  6F73               	movwf	start_routine@v& (0+255),b
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;main.c: 436: Lcd_Set_Cursor(1,1);
  3248  000B7E  0E01               	movlw	1
  3249  000B80  6E12               	movwf	Lcd_Set_Cursor@b,c
  3250  000B82  0E01               	movlw	1
  3251  000B84  ECDB  F00C         	call	_Lcd_Set_Cursor
  3252                           
  3253                           ;main.c: 437: Lcd_Write_String("Load I2C setup..");
  3254  000B88  0E64               	movlw	low STR_20
  3255  000B8A  6E14               	movwf	Lcd_Write_String@a,c
  3256  000B8C  0E7F               	movlw	high STR_20
  3257  000B8E  6E15               	movwf	Lcd_Write_String@a+1,c
  3258  000B90  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  3259                           
  3260                           ;main.c: 438: menu_progress_bar(300);
  3261  000B94  0E01               	movlw	1
  3262  000B96  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  3263  000B98  0E2C               	movlw	44
  3264  000B9A  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  3265  000B9C  ECC0  F009         	call	_menu_progress_bar	;wreg free
  3266                           
  3267                           ;main.c: 439: unsigned char I2C_new_ADDR[] = {'0', '0', '0'};
  3268  000BA0  C0B5  F087         	movff	start_routine@F3718,start_routine@I2C_new_ADDR
  3269  000BA4  C0B6  F088         	movff	start_routine@F3718+1,start_routine@I2C_new_ADDR+1
  3270  000BA8  C0B7  F089         	movff	start_routine@F3718+2,start_routine@I2C_new_ADDR+2
  3271                           
  3272                           ;main.c: 440: while (v != 1)
  3273  000BAC  D265               	goto	l4258
  3274  000BAE                     l4070:
  3275                           
  3276                           ;main.c: 441: {
  3277                           ;main.c: 442: Lcd_Set_Cursor(1,1);
  3278  000BAE  0E01               	movlw	1
  3279  000BB0  6E12               	movwf	Lcd_Set_Cursor@b,c
  3280  000BB2  0E01               	movlw	1
  3281  000BB4  ECDB  F00C         	call	_Lcd_Set_Cursor
  3282                           
  3283                           ;main.c: 443: Lcd_Write_String("New Machine ID: ");
  3284  000BB8  0E31               	movlw	low STR_21
  3285  000BBA  6E14               	movwf	Lcd_Write_String@a,c
  3286  000BBC  0E7F               	movlw	high STR_21
  3287  000BBE  6E15               	movwf	Lcd_Write_String@a+1,c
  3288  000BC0  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  3289                           
  3290                           ;main.c: 444: Lcd_Set_Cursor(2,1);
  3291  000BC4  0E01               	movlw	1
  3292  000BC6  6E12               	movwf	Lcd_Set_Cursor@b,c
  3293  000BC8  0E02               	movlw	2
  3294  000BCA  ECDB  F00C         	call	_Lcd_Set_Cursor
  3295                           
  3296                           ;main.c: 445: Lcd_Write_String("       [001-100]");
  3297  000BCE  0EA8               	movlw	low STR_22
  3298  000BD0  6E14               	movwf	Lcd_Write_String@a,c
  3299  000BD2  0E7F               	movlw	high STR_22
  3300  000BD4  6E15               	movwf	Lcd_Write_String@a+1,c
  3301  000BD6  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  3302                           
  3303                           ;main.c: 446: Lcd_Set_Cursor(2,1);
  3304  000BDA  0E01               	movlw	1
  3305  000BDC  6E12               	movwf	Lcd_Set_Cursor@b,c
  3306  000BDE  0E02               	movlw	2
  3307  000BE0  ECDB  F00C         	call	_Lcd_Set_Cursor
  3308                           
  3309                           ;main.c: 447: Lcd_Write_Char('_');
  3310  000BE4  0E5F               	movlw	95
  3311  000BE6  EC3F  F00D         	call	_Lcd_Write_Char
  3312                           
  3313                           ;main.c: 448: while (n < 3)
  3314  000BEA  D081               	goto	l4122
  3315  000BEC                     l4080:
  3316                           
  3317                           ;main.c: 449: {
  3318                           ;main.c: 450: x = read_keypad();
  3319  000BEC  EC07  F00B         	call	_read_keypad	;wreg free
  3320  000BF0  0100               	movlb	0	; () banked
  3321  000BF2  6F8F               	movwf	start_routine@x& (0+255),b
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;main.c: 451: if (x != '_')
  3325  000BF4  0E5F               	movlw	95
  3326  000BF6  0100               	movlb	0	; () banked
  3327  000BF8  198F               	xorwf	start_routine@x& (0+255),w,b
  3328  000BFA  B4D8               	btfsc	status,2,c
  3329  000BFC  D078               	goto	l4122
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;main.c: 452: {
  3333                           ;main.c: 453: if (((x - '#') == 0)&&(n > 0))
  3334  000BFE  0EDD               	movlw	221
  3335  000C00  6E23               	movwf	??_start_routine& (0+255),c
  3336  000C02  0EFF               	movlw	255
  3337  000C04  6E24               	movwf	(??_start_routine+1)& (0+255),c
  3338  000C06  0100               	movlb	0	; () banked
  3339  000C08  518F               	movf	start_routine@x& (0+255),w,b
  3340  000C0A  6E25               	movwf	(??_start_routine+2)& (0+255),c
  3341  000C0C  6A26               	clrf	(??_start_routine+3)& (0+255),c
  3342  000C0E  5023               	movf	??_start_routine,w,c
  3343  000C10  2625               	addwf	??_start_routine+2,f,c
  3344  000C12  5024               	movf	??_start_routine+1,w,c
  3345  000C14  2226               	addwfc	??_start_routine+3,f,c
  3346  000C16  5025               	movf	??_start_routine+2,w,c
  3347  000C18  1026               	iorwf	??_start_routine+3,w,c
  3348  000C1A  A4D8               	btfss	status,2,c
  3349  000C1C  D02F               	goto	l4104
  3350                           
  3351                           ; BSR set to: 0
  3352  000C1E  0100               	movlb	0	; () banked
  3353  000C20  5190               	movf	start_routine@n& (0+255),w,b
  3354  000C22  0100               	movlb	0	; () banked
  3355  000C24  B4D8               	btfsc	status,2,c
  3356  000C26  D02A               	goto	l4104
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;main.c: 454: {
  3360                           ;main.c: 455: I2C_new_ADDR[n] = 0;
  3361  000C28  0100               	movlb	0	; () banked
  3362  000C2A  5190               	movf	start_routine@n& (0+255),w,b
  3363  000C2C  0D01               	mullw	1
  3364  000C2E  0E87               	movlw	low start_routine@I2C_new_ADDR
  3365  000C30  24F3               	addwf	prodl,w,c
  3366  000C32  6ED9               	movwf	fsr2l,c
  3367  000C34  0E00               	movlw	high start_routine@I2C_new_ADDR
  3368  000C36  20F4               	addwfc	prodh,w,c
  3369  000C38  6EDA               	movwf	fsr2h,c
  3370  000C3A  0E00               	movlw	0
  3371  000C3C  6EDF               	movwf	indf2,c
  3372                           
  3373                           ; BSR set to: 0
  3374                           ;main.c: 456: Lcd_Set_Cursor(2, n);
  3375  000C3E  C090  F012         	movff	start_routine@n,Lcd_Set_Cursor@b
  3376  000C42  0E02               	movlw	2
  3377  000C44  ECDB  F00C         	call	_Lcd_Set_Cursor
  3378                           
  3379                           ;main.c: 457: Lcd_Write_Char('_');
  3380  000C48  0E5F               	movlw	95
  3381  000C4A  EC3F  F00D         	call	_Lcd_Write_Char
  3382                           
  3383                           ;main.c: 458: latch_keypad(&x);
  3384  000C4E  0E8F               	movlw	low start_routine@x
  3385  000C50  6E10               	movwf	latch_keypad@x,c
  3386  000C52  0E00               	movlw	high start_routine@x
  3387  000C54  6E11               	movwf	latch_keypad@x+1,c
  3388  000C56  EC23  F00D         	call	_latch_keypad	;wreg free
  3389                           
  3390                           ;main.c: 459: Lcd_Set_Cursor(2, 1 + n);
  3391  000C5A  0100               	movlb	0	; () banked
  3392  000C5C  2990               	incf	start_routine@n& (0+255),w,b
  3393  000C5E  6E12               	movwf	Lcd_Set_Cursor@b,c
  3394  000C60  0E02               	movlw	2
  3395  000C62  ECDB  F00C         	call	_Lcd_Set_Cursor
  3396                           
  3397                           ;main.c: 460: Lcd_Write_Char(' ');
  3398  000C66  0E20               	movlw	32
  3399  000C68  EC3F  F00D         	call	_Lcd_Write_Char
  3400                           
  3401                           ;main.c: 461: Lcd_Set_Cursor(2, n);
  3402  000C6C  C090  F012         	movff	start_routine@n,Lcd_Set_Cursor@b
  3403  000C70  0E02               	movlw	2
  3404  000C72  ECDB  F00C         	call	_Lcd_Set_Cursor
  3405                           
  3406                           ;main.c: 462: n--;
  3407  000C76  0100               	movlb	0	; () banked
  3408  000C78  0790               	decf	start_routine@n& (0+255),f,b
  3409                           
  3410                           ;main.c: 463: }
  3411  000C7A  D039               	goto	l4122
  3412  000C7C                     l4104:
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;main.c: 464: else if ((x - '#') != 0)
  3416  000C7C  0EDD               	movlw	221
  3417  000C7E  6E23               	movwf	??_start_routine& (0+255),c
  3418  000C80  0EFF               	movlw	255
  3419  000C82  6E24               	movwf	(??_start_routine+1)& (0+255),c
  3420  000C84  0100               	movlb	0	; () banked
  3421  000C86  518F               	movf	start_routine@x& (0+255),w,b
  3422  000C88  6E25               	movwf	(??_start_routine+2)& (0+255),c
  3423  000C8A  6A26               	clrf	(??_start_routine+3)& (0+255),c
  3424  000C8C  5023               	movf	??_start_routine,w,c
  3425  000C8E  2625               	addwf	??_start_routine+2,f,c
  3426  000C90  5024               	movf	??_start_routine+1,w,c
  3427  000C92  2226               	addwfc	??_start_routine+3,f,c
  3428  000C94  5025               	movf	??_start_routine+2,w,c
  3429  000C96  1026               	iorwf	??_start_routine+3,w,c
  3430  000C98  B4D8               	btfsc	status,2,c
  3431  000C9A  D029               	goto	l4122
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;main.c: 465: {
  3435                           ;main.c: 466: if ((x == '*')|(n == 3))
  3436  000C9C  0E2A               	movlw	42
  3437  000C9E  0100               	movlb	0	; () banked
  3438  000CA0  198F               	xorwf	start_routine@x& (0+255),w,b
  3439  000CA2  B4D8               	btfsc	status,2,c
  3440  000CA4  D028               	goto	l4124
  3441                           
  3442                           ; BSR set to: 0
  3443  000CA6  0E03               	movlw	3
  3444  000CA8  0100               	movlb	0	; () banked
  3445  000CAA  1990               	xorwf	start_routine@n& (0+255),w,b
  3446  000CAC  B4D8               	btfsc	status,2,c
  3447  000CAE  D023               	goto	l4124
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;main.c: 469: }
  3451                           ;main.c: 470: I2C_new_ADDR[n] = x;
  3452                           
  3453                           ; BSR set to: 0
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;main.c: 467: {
  3457                           ;main.c: 468: break;
  3458  000CB0  0100               	movlb	0	; () banked
  3459  000CB2  5190               	movf	start_routine@n& (0+255),w,b
  3460  000CB4  0D01               	mullw	1
  3461  000CB6  0E87               	movlw	low start_routine@I2C_new_ADDR
  3462  000CB8  24F3               	addwf	prodl,w,c
  3463  000CBA  6ED9               	movwf	fsr2l,c
  3464  000CBC  0E00               	movlw	high start_routine@I2C_new_ADDR
  3465  000CBE  20F4               	addwfc	prodh,w,c
  3466  000CC0  6EDA               	movwf	fsr2h,c
  3467  000CC2  C08F  FFDF         	movff	start_routine@x,indf2
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;main.c: 471: n++;
  3471  000CC6  0100               	movlb	0	; () banked
  3472  000CC8  2B90               	incf	start_routine@n& (0+255),f,b
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;main.c: 472: Lcd_Set_Cursor(2, n);
  3476  000CCA  C090  F012         	movff	start_routine@n,Lcd_Set_Cursor@b
  3477  000CCE  0E02               	movlw	2
  3478  000CD0  ECDB  F00C         	call	_Lcd_Set_Cursor
  3479                           
  3480                           ;main.c: 473: Lcd_Write_Char(x);
  3481  000CD4  0100               	movlb	0	; () banked
  3482  000CD6  518F               	movf	start_routine@x& (0+255),w,b
  3483  000CD8  EC3F  F00D         	call	_Lcd_Write_Char
  3484                           
  3485                           ;main.c: 474: Lcd_Write_Char('_');
  3486  000CDC  0E5F               	movlw	95
  3487  000CDE  EC3F  F00D         	call	_Lcd_Write_Char
  3488                           
  3489                           ;main.c: 475: latch_keypad(&x);
  3490  000CE2  0E8F               	movlw	low start_routine@x
  3491  000CE4  6E10               	movwf	latch_keypad@x,c
  3492  000CE6  0E00               	movlw	high start_routine@x
  3493  000CE8  6E11               	movwf	latch_keypad@x+1,c
  3494  000CEA  EC23  F00D         	call	_latch_keypad	;wreg free
  3495  000CEE                     l4122:
  3496  000CEE  0E02               	movlw	2
  3497  000CF0  0100               	movlb	0	; () banked
  3498  000CF2  6590               	cpfsgt	start_routine@n& (0+255),b
  3499  000CF4  D77B               	goto	l4080
  3500  000CF6                     l4124:
  3501                           
  3502                           ; BSR set to: 0
  3503                           ;main.c: 476: }
  3504                           ;main.c: 477: }
  3505                           ;main.c: 478: }
  3506                           ;main.c: 480: unsigned char new_I2C_address = 0;
  3507  000CF6  0E00               	movlw	0
  3508  000CF8  0100               	movlb	0	; () banked
  3509  000CFA  6F91               	movwf	start_routine@new_I2C_address& (0+255),b
  3510                           
  3511                           ;main.c: 481: unsigned char b[3];
  3512                           ;main.c: 482: for (int i = 0; i < 3; i++)
  3513  000CFC  0E00               	movlw	0
  3514  000CFE  0100               	movlb	0	; () banked
  3515  000D00  6F8D               	movwf	(start_routine@i_895+1)& (0+255),b
  3516  000D02  0E00               	movlw	0
  3517  000D04  6F8C               	movwf	start_routine@i_895& (0+255),b
  3518  000D06                     l4126:
  3519                           
  3520                           ; BSR set to: 0
  3521  000D06  0100               	movlb	0	; () banked
  3522  000D08  BF8D               	btfsc	(start_routine@i_895+1)& (0+255),7,b
  3523  000D0A  D008               	goto	l4130
  3524  000D0C  0100               	movlb	0	; () banked
  3525  000D0E  518D               	movf	(start_routine@i_895+1)& (0+255),w,b
  3526  000D10  E11C               	bnz	l4136
  3527  000D12  0E03               	movlw	3
  3528  000D14  0100               	movlb	0	; () banked
  3529  000D16  5D8C               	subwf	start_routine@i_895& (0+255),w,b
  3530  000D18  B0D8               	btfsc	status,0,c
  3531  000D1A  D017               	goto	l4136
  3532  000D1C                     l4130:
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;main.c: 483: b[i] = I2C_new_ADDR[i] - '0';
  3536  000D1C  0E80               	movlw	low start_routine@b
  3537  000D1E  0100               	movlb	0	; () banked
  3538  000D20  258C               	addwf	start_routine@i_895& (0+255),w,b
  3539  000D22  6ED9               	movwf	fsr2l,c
  3540  000D24  0E00               	movlw	high start_routine@b
  3541  000D26  0100               	movlb	0	; () banked
  3542  000D28  218D               	addwfc	(start_routine@i_895+1)& (0+255),w,b
  3543  000D2A  6EDA               	movwf	fsr2h,c
  3544  000D2C  0E87               	movlw	low start_routine@I2C_new_ADDR
  3545  000D2E  0100               	movlb	0	; () banked
  3546  000D30  258C               	addwf	start_routine@i_895& (0+255),w,b
  3547  000D32  6EE1               	movwf	fsr1l,c
  3548  000D34  0E00               	movlw	high start_routine@I2C_new_ADDR
  3549  000D36  0100               	movlb	0	; () banked
  3550  000D38  218D               	addwfc	(start_routine@i_895+1)& (0+255),w,b
  3551  000D3A  6EE2               	movwf	fsr1h,c
  3552  000D3C  50E7               	movf	indf1,w,c
  3553  000D3E  0FD0               	addlw	208
  3554  000D40  6EDF               	movwf	indf2,c
  3555                           
  3556                           ; BSR set to: 0
  3557  000D42  0100               	movlb	0	; () banked
  3558  000D44  4B8C               	infsnz	start_routine@i_895& (0+255),f,b
  3559  000D46  2B8D               	incf	(start_routine@i_895+1)& (0+255),f,b
  3560  000D48  D7DE               	goto	l4126
  3561  000D4A                     l4136:
  3562                           
  3563                           ; BSR set to: 0
  3564                           ;main.c: 484: new_I2C_address += (100)*(I2C_new_ADDR[0] - '0');
  3565  000D4A  0100               	movlb	0	; () banked
  3566  000D4C  5187               	movf	start_routine@I2C_new_ADDR& (0+255),w,b
  3567  000D4E  0FD0               	addlw	208
  3568  000D50  0D64               	mullw	100
  3569  000D52  50F3               	movf	prodl,w,c
  3570  000D54  0100               	movlb	0	; () banked
  3571  000D56  2791               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3572                           
  3573                           ;main.c: 485: new_I2C_address += (10)*(I2C_new_ADDR[1] - '0');
  3574  000D58  0100               	movlb	0	; () banked
  3575  000D5A  5188               	movf	(start_routine@I2C_new_ADDR+1)& (0+255),w,b
  3576  000D5C  0FD0               	addlw	208
  3577  000D5E  0D0A               	mullw	10
  3578  000D60  50F3               	movf	prodl,w,c
  3579  000D62  0100               	movlb	0	; () banked
  3580  000D64  2791               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;main.c: 486: new_I2C_address += (1)*(I2C_new_ADDR[2] - '0');
  3584  000D66  0100               	movlb	0	; () banked
  3585  000D68  5189               	movf	(start_routine@I2C_new_ADDR+2)& (0+255),w,b
  3586  000D6A  0FD0               	addlw	208
  3587  000D6C  0100               	movlb	0	; () banked
  3588  000D6E  2791               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;main.c: 487: Machine_ID = new_I2C_address;
  3592  000D70  C091  F0DF         	movff	start_routine@new_I2C_address,_Machine_ID
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;main.c: 488: new_I2C_address += 0x0F;
  3596  000D74  0E0F               	movlw	15
  3597  000D76  0100               	movlb	0	; () banked
  3598  000D78  2791               	addwf	start_routine@new_I2C_address& (0+255),f,b
  3599                           
  3600                           ; BSR set to: 0
  3601                           ;main.c: 490: char* error_msg;
  3602                           ;main.c: 491: if ( ((b[0]==0)&&((b[1]!=0)|(b[2]!=0))) | ((b[0]==1)&&(b[1]==0)&&(b[2]==0)
      +                          ) )
  3603  000D7A  0100               	movlb	0	; () banked
  3604  000D7C  5180               	movf	start_routine@b& (0+255),w,b
  3605  000D7E  0100               	movlb	0	; () banked
  3606  000D80  A4D8               	btfss	status,2,c
  3607  000D82  D008               	goto	l4150
  3608                           
  3609                           ; BSR set to: 0
  3610  000D84  0100               	movlb	0	; () banked
  3611  000D86  5181               	movf	(start_routine@b+1)& (0+255),w,b
  3612  000D88  A4D8               	btfss	status,2,c
  3613  000D8A  D010               	goto	l4156
  3614                           
  3615                           ; BSR set to: 0
  3616  000D8C  0100               	movlb	0	; () banked
  3617  000D8E  5182               	movf	(start_routine@b+2)& (0+255),w,b
  3618  000D90  A4D8               	btfss	status,2,c
  3619  000D92  D00C               	goto	l4156
  3620  000D94                     l4150:
  3621                           
  3622                           ; BSR set to: 0
  3623  000D94  0100               	movlb	0	; () banked
  3624  000D96  0580               	decf	start_routine@b& (0+255),w,b
  3625  000D98  A4D8               	btfss	status,2,c
  3626  000D9A  D112               	goto	l4224
  3627                           
  3628                           ; BSR set to: 0
  3629  000D9C  0100               	movlb	0	; () banked
  3630  000D9E  5181               	movf	(start_routine@b+1)& (0+255),w,b
  3631  000DA0  A4D8               	btfss	status,2,c
  3632  000DA2  D10E               	goto	l4224
  3633                           
  3634                           ; BSR set to: 0
  3635  000DA4  0100               	movlb	0	; () banked
  3636  000DA6  5182               	movf	(start_routine@b+2)& (0+255),w,b
  3637  000DA8  A4D8               	btfss	status,2,c
  3638  000DAA  D10A               	goto	l4224
  3639  000DAC                     l4156:
  3640                           
  3641                           ; BSR set to: 0
  3642                           ;main.c: 492: {
  3643                           ;main.c: 494: dh = (new_I2C_address / 100);
  3644  000DAC  C091  F010         	movff	start_routine@new_I2C_address,___awdiv@dividend
  3645  000DB0  6A11               	clrf	___awdiv@dividend+1,c
  3646  000DB2  0E00               	movlw	0
  3647  000DB4  6E13               	movwf	___awdiv@divisor+1,c
  3648  000DB6  0E64               	movlw	100
  3649  000DB8  6E12               	movwf	___awdiv@divisor,c
  3650  000DBA  EC59  F00B         	call	___awdiv	;wreg free
  3651  000DBE  5010               	movf	?___awdiv,w,c
  3652  000DC0  0100               	movlb	0	; () banked
  3653  000DC2  6F8E               	movwf	start_routine@dh& (0+255),b
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;main.c: 495: dt = (new_I2C_address - dh*100) / 10;
  3657  000DC4  0100               	movlb	0	; () banked
  3658  000DC6  518E               	movf	start_routine@dh& (0+255),w,b
  3659  000DC8  0D64               	mullw	100
  3660  000DCA  1EF3               	comf	prodl,f,c
  3661  000DCC  1EF4               	comf	prodh,f,c
  3662  000DCE  4AF3               	infsnz	prodl,f,c
  3663  000DD0  2AF4               	incf	prodh,f,c
  3664  000DD2  0100               	movlb	0	; () banked
  3665  000DD4  5191               	movf	start_routine@new_I2C_address& (0+255),w,b
  3666  000DD6  24F3               	addwf	prodl,w,c
  3667  000DD8  6E10               	movwf	___awdiv@dividend,c
  3668  000DDA  0E00               	movlw	0
  3669  000DDC  20F4               	addwfc	prodh,w,c
  3670  000DDE  6E11               	movwf	___awdiv@dividend+1,c
  3671  000DE0  0E00               	movlw	0
  3672  000DE2  6E13               	movwf	___awdiv@divisor+1,c
  3673  000DE4  0E0A               	movlw	10
  3674  000DE6  6E12               	movwf	___awdiv@divisor,c
  3675  000DE8  EC59  F00B         	call	___awdiv	;wreg free
  3676  000DEC  5010               	movf	?___awdiv,w,c
  3677  000DEE  0100               	movlb	0	; () banked
  3678  000DF0  6F8B               	movwf	start_routine@dt& (0+255),b
  3679                           
  3680                           ; BSR set to: 0
  3681                           ;main.c: 496: d1 = (new_I2C_address - (dh*100+dt*10));
  3682  000DF2  0100               	movlb	0	; () banked
  3683  000DF4  518B               	movf	start_routine@dt& (0+255),w,b
  3684  000DF6  0D0A               	mullw	10
  3685  000DF8  CFF3 F023          	movff	prodl,??_start_routine
  3686  000DFC  0100               	movlb	0	; () banked
  3687  000DFE  518E               	movf	start_routine@dh& (0+255),w,b
  3688  000E00  0D64               	mullw	100
  3689  000E02  50F3               	movf	prodl,w,c
  3690  000E04  2423               	addwf	??_start_routine,w,c
  3691  000E06  0800               	sublw	0
  3692  000E08  0100               	movlb	0	; () banked
  3693  000E0A  2591               	addwf	start_routine@new_I2C_address& (0+255),w,b
  3694  000E0C  0100               	movlb	0	; () banked
  3695  000E0E  6F72               	movwf	start_routine@d1& (0+255),b
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;main.c: 498: h = new_I2C_address/16;
  3699  000E10  C091  F010         	movff	start_routine@new_I2C_address,___awdiv@dividend
  3700  000E14  6A11               	clrf	___awdiv@dividend+1,c
  3701  000E16  0E00               	movlw	0
  3702  000E18  6E13               	movwf	___awdiv@divisor+1,c
  3703  000E1A  0E10               	movlw	16
  3704  000E1C  6E12               	movwf	___awdiv@divisor,c
  3705  000E1E  EC59  F00B         	call	___awdiv	;wreg free
  3706  000E22  5010               	movf	?___awdiv,w,c
  3707  000E24  0100               	movlb	0	; () banked
  3708  000E26  6F6E               	movwf	start_routine@h& (0+255),b
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;main.c: 499: l = new_I2C_address - (new_I2C_address/16)*16;
  3712  000E28  C091  F010         	movff	start_routine@new_I2C_address,___awdiv@dividend
  3713  000E2C  6A11               	clrf	___awdiv@dividend+1,c
  3714  000E2E  0E00               	movlw	0
  3715  000E30  6E13               	movwf	___awdiv@divisor+1,c
  3716  000E32  0E10               	movlw	16
  3717  000E34  6E12               	movwf	___awdiv@divisor,c
  3718  000E36  EC59  F00B         	call	___awdiv	;wreg free
  3719  000E3A  3810               	swapf	?___awdiv,w,c
  3720  000E3C  0BF0               	andlw	240
  3721  000E3E  0800               	sublw	0
  3722  000E40  0100               	movlb	0	; () banked
  3723  000E42  2591               	addwf	start_routine@new_I2C_address& (0+255),w,b
  3724  000E44  0100               	movlb	0	; () banked
  3725  000E46  6F6F               	movwf	start_routine@l& (0+255),b
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;main.c: 500: Lcd_Clear();
  3729  000E48  ECAA  F00D         	call	_Lcd_Clear	;wreg free
  3730                           
  3731                           ;main.c: 501: Lcd_Set_Cursor(1,1);
  3732  000E4C  0E01               	movlw	1
  3733  000E4E  6E12               	movwf	Lcd_Set_Cursor@b,c
  3734  000E50  0E01               	movlw	1
  3735  000E52  ECDB  F00C         	call	_Lcd_Set_Cursor
  3736                           
  3737                           ;main.c: 502: Lcd_Write_String("New Machine ID: ");
  3738  000E56  0E31               	movlw	low STR_21
  3739  000E58  6E14               	movwf	Lcd_Write_String@a,c
  3740  000E5A  0E7F               	movlw	high STR_21
  3741  000E5C  6E15               	movwf	Lcd_Write_String@a+1,c
  3742  000E5E  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  3743                           
  3744                           ;main.c: 503: Lcd_Set_Cursor(2,1);
  3745  000E62  0E01               	movlw	1
  3746  000E64  6E12               	movwf	Lcd_Set_Cursor@b,c
  3747  000E66  0E02               	movlw	2
  3748  000E68  ECDB  F00C         	call	_Lcd_Set_Cursor
  3749                           
  3750                           ;main.c: 504: for (int i = 0; i < 3; i++)
  3751  000E6C  0E00               	movlw	0
  3752  000E6E  0100               	movlb	0	; () banked
  3753  000E70  6F84               	movwf	(start_routine@i_898+1)& (0+255),b
  3754  000E72  0E00               	movlw	0
  3755  000E74  6F83               	movwf	start_routine@i_898& (0+255),b
  3756  000E76                     l4176:
  3757                           
  3758                           ; BSR set to: 0
  3759  000E76  0100               	movlb	0	; () banked
  3760  000E78  BF84               	btfsc	(start_routine@i_898+1)& (0+255),7,b
  3761  000E7A  D008               	goto	l4180
  3762  000E7C  0100               	movlb	0	; () banked
  3763  000E7E  5184               	movf	(start_routine@i_898+1)& (0+255),w,b
  3764  000E80  E114               	bnz	l4186
  3765  000E82  0E03               	movlw	3
  3766  000E84  0100               	movlb	0	; () banked
  3767  000E86  5D83               	subwf	start_routine@i_898& (0+255),w,b
  3768  000E88  B0D8               	btfsc	status,0,c
  3769  000E8A  D00F               	goto	l4186
  3770  000E8C                     l4180:
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;main.c: 505: Lcd_Write_Char(I2C_new_ADDR[i]);
  3774  000E8C  0E87               	movlw	low start_routine@I2C_new_ADDR
  3775  000E8E  0100               	movlb	0	; () banked
  3776  000E90  2583               	addwf	start_routine@i_898& (0+255),w,b
  3777  000E92  6ED9               	movwf	fsr2l,c
  3778  000E94  0E00               	movlw	high start_routine@I2C_new_ADDR
  3779  000E96  0100               	movlb	0	; () banked
  3780  000E98  2184               	addwfc	(start_routine@i_898+1)& (0+255),w,b
  3781  000E9A  6EDA               	movwf	fsr2h,c
  3782  000E9C  50DF               	movf	indf2,w,c
  3783  000E9E  EC3F  F00D         	call	_Lcd_Write_Char
  3784  000EA2  0100               	movlb	0	; () banked
  3785  000EA4  4B83               	infsnz	start_routine@i_898& (0+255),f,b
  3786  000EA6  2B84               	incf	(start_routine@i_898+1)& (0+255),f,b
  3787  000EA8  D7E6               	goto	l4176
  3788  000EAA                     l4186:
  3789                           
  3790                           ; BSR set to: 0
  3791                           ;main.c: 506: Lcd_Set_Cursor(2, 7);
  3792  000EAA  0E07               	movlw	7
  3793  000EAC  6E12               	movwf	Lcd_Set_Cursor@b,c
  3794  000EAE  0E02               	movlw	2
  3795  000EB0  ECDB  F00C         	call	_Lcd_Set_Cursor
  3796                           
  3797                           ;main.c: 507: Lcd_Write_String("[OK]");
  3798  000EB4  0EF7               	movlw	low STR_24
  3799  000EB6  6E14               	movwf	Lcd_Write_String@a,c
  3800  000EB8  0E7F               	movlw	high STR_24
  3801  000EBA  6E15               	movwf	Lcd_Write_String@a+1,c
  3802  000EBC  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  3803                           
  3804                           ;main.c: 508: Lcd_Set_Cursor(2,14);
  3805  000EC0  0E0E               	movlw	14
  3806  000EC2  6E12               	movwf	Lcd_Set_Cursor@b,c
  3807  000EC4  0E02               	movlw	2
  3808  000EC6  ECDB  F00C         	call	_Lcd_Set_Cursor
  3809                           
  3810                           ;main.c: 509: Lcd_Write_String("x");
  3811  000ECA  0EFC               	movlw	low STR_25
  3812  000ECC  6E14               	movwf	Lcd_Write_String@a,c
  3813  000ECE  0E7F               	movlw	high STR_25
  3814  000ED0  6E15               	movwf	Lcd_Write_String@a+1,c
  3815  000ED2  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  3816                           
  3817                           ;main.c: 510: Lcd_Write_Char(hx[h]);
  3818  000ED6  0100               	movlb	0	; () banked
  3819  000ED8  516E               	movf	start_routine@h& (0+255),w,b
  3820  000EDA  0D01               	mullw	1
  3821  000EDC  0E2F               	movlw	low _hx
  3822  000EDE  24F3               	addwf	prodl,w,c
  3823  000EE0  6ED9               	movwf	fsr2l,c
  3824  000EE2  0E00               	movlw	high _hx
  3825  000EE4  20F4               	addwfc	prodh,w,c
  3826  000EE6  6EDA               	movwf	fsr2h,c
  3827  000EE8  50DF               	movf	indf2,w,c
  3828  000EEA  EC3F  F00D         	call	_Lcd_Write_Char
  3829                           
  3830                           ;main.c: 511: Lcd_Write_Char(hx[l]);
  3831  000EEE  0100               	movlb	0	; () banked
  3832  000EF0  516F               	movf	start_routine@l& (0+255),w,b
  3833  000EF2  0D01               	mullw	1
  3834  000EF4  0E2F               	movlw	low _hx
  3835  000EF6  24F3               	addwf	prodl,w,c
  3836  000EF8  6ED9               	movwf	fsr2l,c
  3837  000EFA  0E00               	movlw	high _hx
  3838  000EFC  20F4               	addwfc	prodh,w,c
  3839  000EFE  6EDA               	movwf	fsr2h,c
  3840  000F00  50DF               	movf	indf2,w,c
  3841  000F02  EC3F  F00D         	call	_Lcd_Write_Char
  3842                           
  3843                           ;main.c: 512: for (int i = 0; i < 50; i++)
  3844  000F06  0E00               	movlw	0
  3845  000F08  0100               	movlb	0	; () banked
  3846  000F0A  6F7B               	movwf	(start_routine@i_901+1)& (0+255),b
  3847  000F0C  0E00               	movlw	0
  3848  000F0E  6F7A               	movwf	start_routine@i_901& (0+255),b
  3849                           
  3850                           ; BSR set to: 0
  3851  000F10  0100               	movlb	0	; () banked
  3852  000F12  BF7B               	btfsc	(start_routine@i_901+1)& (0+255),7,b
  3853  000F14  D008               	goto	l4202
  3854  000F16  0100               	movlb	0	; () banked
  3855  000F18  517B               	movf	(start_routine@i_901+1)& (0+255),w,b
  3856  000F1A  E118               	bnz	l330
  3857  000F1C  0E32               	movlw	50
  3858  000F1E  0100               	movlb	0	; () banked
  3859  000F20  5D7A               	subwf	start_routine@i_901& (0+255),w,b
  3860  000F22  B0D8               	btfsc	status,0,c
  3861  000F24  D013               	goto	l330
  3862  000F26                     l4202:
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;main.c: 513: _delay((unsigned long)((20)*(16000000/4000.0)));
  3866  000F26  0E68               	movlw	104
  3867  000F28  6E23               	movwf	??_start_routine& (0+255),c
  3868  000F2A  0EE4               	movlw	228
  3869  000F2C                     u4717:
  3870  000F2C  2EE8               	decfsz	wreg,f,c
  3871  000F2E  D7FE               	goto	u4717
  3872  000F30  2E23               	decfsz	??_start_routine& (0+255),f,c
  3873  000F32  D7FC               	goto	u4717
  3874  000F34  F000 F000          	nop2	
  3875  000F38  0100               	movlb	0	; () banked
  3876  000F3A  4B7A               	infsnz	start_routine@i_901& (0+255),f,b
  3877  000F3C  2B7B               	incf	(start_routine@i_901+1)& (0+255),f,b
  3878  000F3E  0100               	movlb	0	; () banked
  3879  000F40  BF7B               	btfsc	(start_routine@i_901+1)& (0+255),7,b
  3880  000F42  D7F1               	goto	l4202
  3881  000F44  0100               	movlb	0	; () banked
  3882  000F46  517B               	movf	(start_routine@i_901+1)& (0+255),w,b
  3883  000F48  E101               	bnz	u3900
  3884  000F4A  D7E8               	goto	L3
  3885  000F4C                     u3900:
  3886  000F4C                     l330:
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;main.c: 514: I2C_ADDR = new_I2C_address;
  3890  000F4C  C091  F0DE         	movff	start_routine@new_I2C_address,_I2C_ADDR
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;main.c: 515: Eeprom_Write_Byte(EEP_I2C_ADDR, I2C_ADDR);
  3894  000F50  C0DE  F010         	movff	_I2C_ADDR,Eeprom_Write_Byte@data
  3895  000F54  0100               	movlb	0	; () banked
  3896  000F56  51DC               	movf	_EEP_I2C_ADDR& (0+255),w,b
  3897  000F58  EC98  F00D         	call	_Eeprom_Write_Byte
  3898                           
  3899                           ;main.c: 516: Lcd_Clear();
  3900  000F5C  ECAA  F00D         	call	_Lcd_Clear	;wreg free
  3901                           
  3902                           ;main.c: 517: Lcd_Set_Cursor(1,1);
  3903  000F60  0E01               	movlw	1
  3904  000F62  6E12               	movwf	Lcd_Set_Cursor@b,c
  3905  000F64  0E01               	movlw	1
  3906  000F66  ECDB  F00C         	call	_Lcd_Set_Cursor
  3907                           
  3908                           ;main.c: 518: Lcd_Write_String("I2C_ADDR>>EEPROM");
  3909  000F6A  0E86               	movlw	low STR_26
  3910  000F6C  6E14               	movwf	Lcd_Write_String@a,c
  3911  000F6E  0E7F               	movlw	high STR_26
  3912  000F70  6E15               	movwf	Lcd_Write_String@a+1,c
  3913  000F72  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  3914                           
  3915                           ;main.c: 525: for (int i = 0; i < 10; i++)
  3916  000F76  0E00               	movlw	0
  3917  000F78  0100               	movlb	0	; () banked
  3918  000F7A  6F7D               	movwf	(start_routine@i_904+1)& (0+255),b
  3919  000F7C  0E00               	movlw	0
  3920  000F7E  6F7C               	movwf	start_routine@i_904& (0+255),b
  3921  000F80                     l4214:
  3922                           
  3923                           ; BSR set to: 0
  3924  000F80  0100               	movlb	0	; () banked
  3925  000F82  BF7D               	btfsc	(start_routine@i_904+1)& (0+255),7,b
  3926  000F84  D008               	goto	l4218
  3927  000F86  0100               	movlb	0	; () banked
  3928  000F88  517D               	movf	(start_routine@i_904+1)& (0+255),w,b
  3929  000F8A  E112               	bnz	l4222
  3930  000F8C  0E0A               	movlw	10
  3931  000F8E  0100               	movlb	0	; () banked
  3932  000F90  5D7C               	subwf	start_routine@i_904& (0+255),w,b
  3933  000F92  B0D8               	btfsc	status,0,c
  3934  000F94  D00D               	goto	l4222
  3935  000F96                     l4218:
  3936                           
  3937                           ; BSR set to: 0
  3938                           ;main.c: 526: _delay((unsigned long)((20)*(16000000/4000.0)));
  3939  000F96  0E68               	movlw	104
  3940  000F98  6E23               	movwf	??_start_routine& (0+255),c
  3941  000F9A  0EE4               	movlw	228
  3942  000F9C                     u4727:
  3943  000F9C  2EE8               	decfsz	wreg,f,c
  3944  000F9E  D7FE               	goto	u4727
  3945  000FA0  2E23               	decfsz	??_start_routine& (0+255),f,c
  3946  000FA2  D7FC               	goto	u4727
  3947  000FA4  F000 F000          	nop2	
  3948  000FA8  0100               	movlb	0	; () banked
  3949  000FAA  4B7C               	infsnz	start_routine@i_904& (0+255),f,b
  3950  000FAC  2B7D               	incf	(start_routine@i_904+1)& (0+255),f,b
  3951  000FAE  D7E8               	goto	l4214
  3952  000FB0                     l4222:
  3953                           
  3954                           ; BSR set to: 0
  3955                           ;main.c: 527: menu_progress_bar(500);
  3956  000FB0  0E01               	movlw	1
  3957  000FB2  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  3958  000FB4  0EF4               	movlw	244
  3959  000FB6  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  3960  000FB8  ECC0  F009         	call	_menu_progress_bar	;wreg free
  3961  000FBC  00FF               	reset		;# 
  3962                           
  3963                           ;main.c: 529: }
  3964  000FBE  D05C               	goto	l4258
  3965  000FC0                     l4224:
  3966                           
  3967                           ;main.c: 530: else
  3968                           ;main.c: 531: {
  3969                           ;main.c: 532: if (new_I2C_address == 0)
  3970  000FC0  0100               	movlb	0	; () banked
  3971  000FC2  5191               	movf	start_routine@new_I2C_address& (0+255),w,b
  3972  000FC4  0100               	movlb	0	; () banked
  3973  000FC6  A4D8               	btfss	status,2,c
  3974  000FC8  D005               	goto	l4228
  3975                           
  3976                           ; BSR set to: 0
  3977                           ;main.c: 533: error_msg = "May not be zero!";
  3978  000FCA  0E53               	movlw	low STR_27
  3979  000FCC  0100               	movlb	0	; () banked
  3980  000FCE  6F70               	movwf	start_routine@error_msg& (0+255),b
  3981  000FD0  0E7F               	movlw	high STR_27
  3982  000FD2  D004               	goto	L4
  3983  000FD4                     l4228:
  3984                           
  3985                           ; BSR set to: 0
  3986                           ;main.c: 534: else
  3987                           ;main.c: 535: error_msg = "Out of bounds!  ";
  3988  000FD4  0EDC               	movlw	low STR_28
  3989  000FD6  0100               	movlb	0	; () banked
  3990  000FD8  6F70               	movwf	start_routine@error_msg& (0+255),b
  3991  000FDA  0E7E               	movlw	high STR_28
  3992  000FDC                     L4:
  3993  000FDC  0100               	movlb	0	; () banked
  3994  000FDE  6F71               	movwf	(start_routine@error_msg+1)& (0+255),b
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;main.c: 536: Lcd_Set_Cursor(2,1);
  3998                           
  3999                           ; BSR set to: 0
  4000  000FE0  0E01               	movlw	1
  4001  000FE2  6E12               	movwf	Lcd_Set_Cursor@b,c
  4002  000FE4  0E02               	movlw	2
  4003  000FE6  ECDB  F00C         	call	_Lcd_Set_Cursor
  4004                           
  4005                           ;main.c: 537: Lcd_Write_String(error_msg);
  4006  000FEA  C070  F014         	movff	start_routine@error_msg,Lcd_Write_String@a
  4007  000FEE  C071  F015         	movff	start_routine@error_msg+1,Lcd_Write_String@a+1
  4008  000FF2  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  4009                           
  4010                           ;main.c: 538: for (int i = 0; i < 50; i++)
  4011  000FF6  0E00               	movlw	0
  4012  000FF8  0100               	movlb	0	; () banked
  4013  000FFA  6F7F               	movwf	(start_routine@i_907+1)& (0+255),b
  4014  000FFC  0E00               	movlw	0
  4015  000FFE  6F7E               	movwf	start_routine@i_907& (0+255),b
  4016  001000                     l4236:
  4017                           
  4018                           ; BSR set to: 0
  4019  001000  0100               	movlb	0	; () banked
  4020  001002  BF7F               	btfsc	(start_routine@i_907+1)& (0+255),7,b
  4021  001004  D008               	goto	l4240
  4022  001006  0100               	movlb	0	; () banked
  4023  001008  517F               	movf	(start_routine@i_907+1)& (0+255),w,b
  4024  00100A  E112               	bnz	l4244
  4025  00100C  0E32               	movlw	50
  4026  00100E  0100               	movlb	0	; () banked
  4027  001010  5D7E               	subwf	start_routine@i_907& (0+255),w,b
  4028  001012  B0D8               	btfsc	status,0,c
  4029  001014  D00D               	goto	l4244
  4030  001016                     l4240:
  4031                           
  4032                           ; BSR set to: 0
  4033                           ;main.c: 539: _delay((unsigned long)((20)*(16000000/4000.0)));
  4034  001016  0E68               	movlw	104
  4035  001018  6E23               	movwf	??_start_routine& (0+255),c
  4036  00101A  0EE4               	movlw	228
  4037  00101C                     u4737:
  4038  00101C  2EE8               	decfsz	wreg,f,c
  4039  00101E  D7FE               	goto	u4737
  4040  001020  2E23               	decfsz	??_start_routine& (0+255),f,c
  4041  001022  D7FC               	goto	u4737
  4042  001024  F000 F000          	nop2	
  4043  001028  0100               	movlb	0	; () banked
  4044  00102A  4B7E               	infsnz	start_routine@i_907& (0+255),f,b
  4045  00102C  2B7F               	incf	(start_routine@i_907+1)& (0+255),f,b
  4046  00102E  D7E8               	goto	l4236
  4047  001030                     l4244:
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;main.c: 540: for (int i = 0; i < 3; i++)
  4051  001030  0E00               	movlw	0
  4052  001032  0100               	movlb	0	; () banked
  4053  001034  6F86               	movwf	(start_routine@i_908+1)& (0+255),b
  4054  001036  0E00               	movlw	0
  4055  001038  6F85               	movwf	start_routine@i_908& (0+255),b
  4056  00103A                     l4246:
  4057                           
  4058                           ; BSR set to: 0
  4059  00103A  0100               	movlb	0	; () banked
  4060  00103C  BF86               	btfsc	(start_routine@i_908+1)& (0+255),7,b
  4061  00103E  D008               	goto	l4250
  4062  001040  0100               	movlb	0	; () banked
  4063  001042  5186               	movf	(start_routine@i_908+1)& (0+255),w,b
  4064  001044  E113               	bnz	l4256
  4065  001046  0E03               	movlw	3
  4066  001048  0100               	movlb	0	; () banked
  4067  00104A  5D85               	subwf	start_routine@i_908& (0+255),w,b
  4068  00104C  B0D8               	btfsc	status,0,c
  4069  00104E  D00E               	goto	l4256
  4070  001050                     l4250:
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;main.c: 541: I2C_new_ADDR[i] = '0';
  4074  001050  0E87               	movlw	low start_routine@I2C_new_ADDR
  4075  001052  0100               	movlb	0	; () banked
  4076  001054  2585               	addwf	start_routine@i_908& (0+255),w,b
  4077  001056  6ED9               	movwf	fsr2l,c
  4078  001058  0E00               	movlw	high start_routine@I2C_new_ADDR
  4079  00105A  0100               	movlb	0	; () banked
  4080  00105C  2186               	addwfc	(start_routine@i_908+1)& (0+255),w,b
  4081  00105E  6EDA               	movwf	fsr2h,c
  4082  001060  0E30               	movlw	48
  4083  001062  6EDF               	movwf	indf2,c
  4084                           
  4085                           ; BSR set to: 0
  4086  001064  0100               	movlb	0	; () banked
  4087  001066  4B85               	infsnz	start_routine@i_908& (0+255),f,b
  4088  001068  2B86               	incf	(start_routine@i_908+1)& (0+255),f,b
  4089  00106A  D7E7               	goto	l4246
  4090  00106C                     l4256:
  4091                           
  4092                           ; BSR set to: 0
  4093                           ;main.c: 542: v = 0;
  4094  00106C  0E00               	movlw	0
  4095  00106E  0100               	movlb	0	; () banked
  4096  001070  6F73               	movwf	start_routine@v& (0+255),b
  4097                           
  4098                           ;main.c: 543: n = 0;
  4099  001072  0E00               	movlw	0
  4100  001074  0100               	movlb	0	; () banked
  4101  001076  6F90               	movwf	start_routine@n& (0+255),b
  4102  001078                     l4258:
  4103  001078  0100               	movlb	0	; () banked
  4104  00107A  0573               	decf	start_routine@v& (0+255),w,b
  4105  00107C  B4D8               	btfsc	status,2,c
  4106  00107E  0012               	return	
  4107  001080  D596               	goto	l4070
  4108  001082                     l4260:
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;main.c: 547: else
  4112                           ;main.c: 548: {
  4113                           ;main.c: 549: v = 1;
  4114  001082  0E01               	movlw	1
  4115  001084  0100               	movlb	0	; () banked
  4116  001086  6F73               	movwf	start_routine@v& (0+255),b
  4117  001088  0012               	return	
  4118  00108A                     __end_of_start_routine:
  4119                           	opt stack 0
  4120                           tblptru	equ	0xFF8
  4121                           tblptrh	equ	0xFF7
  4122                           tblptrl	equ	0xFF6
  4123                           tablat	equ	0xFF5
  4124                           prodh	equ	0xFF4
  4125                           prodl	equ	0xFF3
  4126                           postinc0	equ	0xFEE
  4127                           wreg	equ	0xFE8
  4128                           indf1	equ	0xFE7
  4129                           postdec1	equ	0xFE5
  4130                           plusw1	equ	0xFE3
  4131                           fsr1h	equ	0xFE2
  4132                           fsr1l	equ	0xFE1
  4133                           indf2	equ	0xFDF
  4134                           plusw2	equ	0xFDB
  4135                           fsr2h	equ	0xFDA
  4136                           fsr2l	equ	0xFD9
  4137                           status	equ	0xFD8
  4138                           
  4139 ;; *************** function _latch_keypad *****************
  4140 ;; Defined at:
  4141 ;;		line 293 in file "main.c"
  4142 ;; Parameters:    Size  Location     Type
  4143 ;;  x               2   15[COMRAM] PTR unsigned char 
  4144 ;;		 -> start_routine@x(1), main@x(1), 
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;		None
  4147 ;; Return value:  Size  Location     Type
  4148 ;;                  1    wreg      void 
  4149 ;; Registers used:
  4150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4151 ;; Tracked objects:
  4152 ;;		On entry : 0/0
  4153 ;;		On exit  : 0/0
  4154 ;;		Unchanged: 0/0
  4155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4156 ;;      Params:         2       0       0       0       0       0       0
  4157 ;;      Locals:         0       0       0       0       0       0       0
  4158 ;;      Temps:          2       0       0       0       0       0       0
  4159 ;;      Totals:         4       0       0       0       0       0       0
  4160 ;;Total ram usage:        4 bytes
  4161 ;; Hardware stack levels used:    1
  4162 ;; Hardware stack levels required when called:    2
  4163 ;; This function calls:
  4164 ;;		_read_keypad
  4165 ;; This function is called by:
  4166 ;;		_main
  4167 ;;		_start_routine
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           	psect	text2
  4172  001A46                     __ptext2:
  4173                           	opt stack 0
  4174  001A46                     _latch_keypad:
  4175                           	opt stack 27
  4176                           
  4177                           ;main.c: 295: while (*x == read_keypad())
  4178                           
  4179                           ; BSR set to: 0
  4180                           ;incstack = 0
  4181  001A46  D009               	goto	l3828
  4182  001A48                     l3826:
  4183                           
  4184                           ;main.c: 296: {
  4185                           ;main.c: 297: _delay((unsigned long)((20)*(16000000/4000.0)));
  4186  001A48  0E68               	movlw	104
  4187  001A4A  6E12               	movwf	??_latch_keypad& (0+255),c
  4188  001A4C  0EE4               	movlw	228
  4189  001A4E                     u4747:
  4190  001A4E  2EE8               	decfsz	wreg,f,c
  4191  001A50  D7FE               	goto	u4747
  4192  001A52  2E12               	decfsz	??_latch_keypad& (0+255),f,c
  4193  001A54  D7FC               	goto	u4747
  4194  001A56  F000 F000          	nop2	
  4195  001A5A                     l3828:
  4196  001A5A  C010  FFD9         	movff	latch_keypad@x,fsr2l
  4197  001A5E  C011  FFDA         	movff	latch_keypad@x+1,fsr2h
  4198  001A62  EC07  F00B         	call	_read_keypad	;wreg free
  4199  001A66  6E13               	movwf	(??_latch_keypad+1)& (0+255),c
  4200  001A68  50DE               	movf	postinc2,w,c
  4201  001A6A  1813               	xorwf	??_latch_keypad+1,w,c
  4202  001A6C  B4D8               	btfsc	status,2,c
  4203  001A6E  D7EC               	goto	l3826
  4204                           
  4205                           ;main.c: 298: }
  4206                           ;main.c: 299: *x = '_';
  4207  001A70  C010  FFD9         	movff	latch_keypad@x,fsr2l
  4208  001A74  C011  FFDA         	movff	latch_keypad@x+1,fsr2h
  4209  001A78  0E5F               	movlw	95
  4210  001A7A  6EDF               	movwf	indf2,c
  4211  001A7C  0012               	return		;funcret
  4212  001A7E                     __end_of_latch_keypad:
  4213                           	opt stack 0
  4214                           tblptru	equ	0xFF8
  4215                           tblptrh	equ	0xFF7
  4216                           tblptrl	equ	0xFF6
  4217                           tablat	equ	0xFF5
  4218                           prodh	equ	0xFF4
  4219                           prodl	equ	0xFF3
  4220                           postinc0	equ	0xFEE
  4221                           wreg	equ	0xFE8
  4222                           indf1	equ	0xFE7
  4223                           postdec1	equ	0xFE5
  4224                           plusw1	equ	0xFE3
  4225                           fsr1h	equ	0xFE2
  4226                           fsr1l	equ	0xFE1
  4227                           indf2	equ	0xFDF
  4228                           postinc2	equ	0xFDE
  4229                           plusw2	equ	0xFDB
  4230                           fsr2h	equ	0xFDA
  4231                           fsr2l	equ	0xFD9
  4232                           status	equ	0xFD8
  4233                           
  4234 ;; *************** function _Eeprom_Write_Byte *****************
  4235 ;; Defined at:
  4236 ;;		line 43 in file "eeprom.h"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;  address         1    wreg     unsigned char 
  4239 ;;  data            1   15[COMRAM] unsigned char 
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;  address         1   16[COMRAM] unsigned char 
  4242 ;; Return value:  Size  Location     Type
  4243 ;;                  1    wreg      void 
  4244 ;; Registers used:
  4245 ;;		wreg, status,2
  4246 ;; Tracked objects:
  4247 ;;		On entry : 0/0
  4248 ;;		On exit  : 0/0
  4249 ;;		Unchanged: 0/0
  4250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4251 ;;      Params:         1       0       0       0       0       0       0
  4252 ;;      Locals:         1       0       0       0       0       0       0
  4253 ;;      Temps:          0       0       0       0       0       0       0
  4254 ;;      Totals:         2       0       0       0       0       0       0
  4255 ;;Total ram usage:        2 bytes
  4256 ;; Hardware stack levels used:    1
  4257 ;; Hardware stack levels required when called:    1
  4258 ;; This function calls:
  4259 ;;		Nothing
  4260 ;; This function is called by:
  4261 ;;		_start_routine
  4262 ;; This function uses a non-reentrant model
  4263 ;;
  4264                           
  4265                           	psect	text3
  4266  001B30                     __ptext3:
  4267                           	opt stack 0
  4268  001B30                     _Eeprom_Write_Byte:
  4269                           	opt stack 28
  4270                           
  4271                           ;incstack = 0
  4272                           ;Eeprom_Write_Byte@address stored from wreg
  4273  001B30  6E11               	movwf	Eeprom_Write_Byte@address,c
  4274                           
  4275                           ;eeprom.h: 46: EEADR = (unsigned char)address;
  4276  001B32  C011  FFA9         	movff	Eeprom_Write_Byte@address,4009	;volatile
  4277                           
  4278                           ;eeprom.h: 48: EEDATA = data;
  4279  001B36  C010  FFA8         	movff	Eeprom_Write_Byte@data,4008	;volatile
  4280                           
  4281                           ;eeprom.h: 49: EECON1bits.EEPGD = 0;
  4282  001B3A  9EA6               	bcf	4006,7,c	;volatile
  4283                           
  4284                           ;eeprom.h: 50: EECON1bits.CFGS = 0;
  4285  001B3C  9CA6               	bcf	4006,6,c	;volatile
  4286                           
  4287                           ;eeprom.h: 51: EECON1bits.WREN = 1;
  4288  001B3E  84A6               	bsf	4006,2,c	;volatile
  4289                           
  4290                           ;eeprom.h: 55: EECON2 = 0x55;
  4291  001B40  0E55               	movlw	85
  4292  001B42  6EA7               	movwf	4007,c	;volatile
  4293                           
  4294                           ;eeprom.h: 56: EECON2 = 0xAA;
  4295  001B44  0EAA               	movlw	170
  4296  001B46  6EA7               	movwf	4007,c	;volatile
  4297                           
  4298                           ;eeprom.h: 57: EECON1bits.WR = 1;
  4299  001B48  82A6               	bsf	4006,1,c	;volatile
  4300  001B4A                     l157:
  4301  001B4A  A8A1               	btfss	4001,4,c	;volatile
  4302  001B4C  D7FE               	goto	l157
  4303                           
  4304                           ;eeprom.h: 63: }
  4305                           ;eeprom.h: 65: PIR2bits.EEIF = 0;
  4306  001B4E  98A1               	bcf	4001,4,c	;volatile
  4307                           
  4308                           ;eeprom.h: 66: EECON1bits.WREN = 0;
  4309  001B50  94A6               	bcf	4006,2,c	;volatile
  4310  001B52  0012               	return		;funcret
  4311  001B54                     __end_of_Eeprom_Write_Byte:
  4312                           	opt stack 0
  4313                           tblptru	equ	0xFF8
  4314                           tblptrh	equ	0xFF7
  4315                           tblptrl	equ	0xFF6
  4316                           tablat	equ	0xFF5
  4317                           prodh	equ	0xFF4
  4318                           prodl	equ	0xFF3
  4319                           postinc0	equ	0xFEE
  4320                           wreg	equ	0xFE8
  4321                           indf1	equ	0xFE7
  4322                           postdec1	equ	0xFE5
  4323                           plusw1	equ	0xFE3
  4324                           fsr1h	equ	0xFE2
  4325                           fsr1l	equ	0xFE1
  4326                           indf2	equ	0xFDF
  4327                           postinc2	equ	0xFDE
  4328                           plusw2	equ	0xFDB
  4329                           fsr2h	equ	0xFDA
  4330                           fsr2l	equ	0xFD9
  4331                           status	equ	0xFD8
  4332                           
  4333 ;; *************** function _running_display *****************
  4334 ;; Defined at:
  4335 ;;		line 556 in file "main.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;		None
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;  n              10   21[BANK0 ] unsigned char [10]
  4340 ;;  second          2   46[BANK0 ] int 
  4341 ;;  minute          2   38[BANK0 ] int 
  4342 ;;  hour            2   19[BANK0 ] int 
  4343 ;;  i               2   40[BANK0 ] int 
  4344 ;;  i               2   32[BANK0 ] int 
  4345 ;;  i               2   44[BANK0 ] int 
  4346 ;;  t               5   14[BANK0 ] unsigned char [5]
  4347 ;;  s               2   42[BANK0 ] int 
  4348 ;;  ms              2   36[BANK0 ] int 
  4349 ;;  n_c             1   35[BANK0 ] unsigned char 
  4350 ;;  is_leading_z    1   34[BANK0 ] unsigned char 
  4351 ;;  exit_running    1   31[BANK0 ] unsigned char 
  4352 ;; Return value:  Size  Location     Type
  4353 ;;                  1    wreg      void 
  4354 ;; Registers used:
  4355 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4356 ;; Tracked objects:
  4357 ;;		On entry : 0/0
  4358 ;;		On exit  : 0/0
  4359 ;;		Unchanged: 0/0
  4360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4361 ;;      Params:         0       0       0       0       0       0       0
  4362 ;;      Locals:         0      34       0       0       0       0       0
  4363 ;;      Temps:          3       0       0       0       0       0       0
  4364 ;;      Totals:         3      34       0       0       0       0       0
  4365 ;;Total ram usage:       37 bytes
  4366 ;; Hardware stack levels used:    1
  4367 ;; Hardware stack levels required when called:    5
  4368 ;; This function calls:
  4369 ;;		_Lcd_Clear
  4370 ;;		_Lcd_Set_Cursor
  4371 ;;		_Lcd_Write_Char
  4372 ;;		_Lcd_Write_String
  4373 ;;		___awdiv
  4374 ;;		___awmod
  4375 ;;		_menu_progress_bar
  4376 ;;		_read_keypad
  4377 ;; This function is called by:
  4378 ;;		_main
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           	psect	text4
  4383  00108A                     __ptext4:
  4384                           	opt stack 0
  4385  00108A                     _running_display:
  4386                           	opt stack 25
  4387                           
  4388                           ;main.c: 558: PORTDbits.RD7 = 1;
  4389                           
  4390                           ;incstack = 0
  4391  00108A  8E83               	bsf	3971,7,c	;volatile
  4392                           
  4393                           ;main.c: 559: unsigned char exit_running = 0x00;
  4394  00108C  0E00               	movlw	0
  4395  00108E  0100               	movlb	0	; () banked
  4396  001090  6F7F               	movwf	running_display@exit_running& (0+255),b
  4397                           
  4398                           ; BSR set to: 0
  4399                           ;main.c: 560: Lcd_Clear();
  4400  001092  ECAA  F00D         	call	_Lcd_Clear	;wreg free
  4401                           
  4402                           ;main.c: 561: Lcd_Set_Cursor(1,1);
  4403  001096  0E01               	movlw	1
  4404  001098  6E12               	movwf	Lcd_Set_Cursor@b,c
  4405  00109A  0E01               	movlw	1
  4406  00109C  ECDB  F00C         	call	_Lcd_Set_Cursor
  4407                           
  4408                           ;main.c: 562: unsigned char is_leading_zero = 1, n_c = 0;
  4409  0010A0  0E01               	movlw	1
  4410  0010A2  0100               	movlb	0	; () banked
  4411  0010A4  6F82               	movwf	running_display@is_leading_zero& (0+255),b
  4412                           
  4413                           ; BSR set to: 0
  4414  0010A6  0E00               	movlw	0
  4415  0010A8  0100               	movlb	0	; () banked
  4416  0010AA  6F83               	movwf	running_display@n_c& (0+255),b
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;main.c: 563: for (int i = 0; i < 9; i++)
  4420  0010AC  0E00               	movlw	0
  4421  0010AE  0100               	movlb	0	; () banked
  4422  0010B0  6F8D               	movwf	(running_display@i+1)& (0+255),b
  4423  0010B2  0E00               	movlw	0
  4424  0010B4  6F8C               	movwf	running_display@i& (0+255),b
  4425  0010B6                     l4316:
  4426                           
  4427                           ; BSR set to: 0
  4428  0010B6  0100               	movlb	0	; () banked
  4429  0010B8  BF8D               	btfsc	(running_display@i+1)& (0+255),7,b
  4430  0010BA  D008               	goto	l4320
  4431  0010BC  0100               	movlb	0	; () banked
  4432  0010BE  518D               	movf	(running_display@i+1)& (0+255),w,b
  4433  0010C0  E12A               	bnz	l4338
  4434  0010C2  0E09               	movlw	9
  4435  0010C4  0100               	movlb	0	; () banked
  4436  0010C6  5D8C               	subwf	running_display@i& (0+255),w,b
  4437  0010C8  B0D8               	btfsc	status,0,c
  4438  0010CA  D025               	goto	l4338
  4439  0010CC                     l4320:
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;main.c: 564: {
  4443                           ;main.c: 565: if ((current_user[i] == '0')&&(is_leading_zero))
  4444  0010CC  0ED3               	movlw	low _current_user
  4445  0010CE  0100               	movlb	0	; () banked
  4446  0010D0  258C               	addwf	running_display@i& (0+255),w,b
  4447  0010D2  6ED9               	movwf	fsr2l,c
  4448  0010D4  0E00               	movlw	high _current_user
  4449  0010D6  0100               	movlb	0	; () banked
  4450  0010D8  218D               	addwfc	(running_display@i+1)& (0+255),w,b
  4451  0010DA  6EDA               	movwf	fsr2h,c
  4452  0010DC  0E30               	movlw	48
  4453  0010DE  18DE               	xorwf	postinc2,w,c
  4454  0010E0  A4D8               	btfss	status,2,c
  4455  0010E2  D005               	goto	l4328
  4456                           
  4457                           ; BSR set to: 0
  4458  0010E4  0100               	movlb	0	; () banked
  4459  0010E6  5182               	movf	running_display@is_leading_zero& (0+255),w,b
  4460  0010E8  0100               	movlb	0	; () banked
  4461  0010EA  A4D8               	btfss	status,2,c
  4462  0010EC  D010               	goto	l4334
  4463  0010EE                     l4328:
  4464                           
  4465                           ; BSR set to: 0
  4466                           ;main.c: 567: else
  4467                           ;main.c: 568: {
  4468                           ;main.c: 569: is_leading_zero = 0;
  4469  0010EE  0E00               	movlw	0
  4470  0010F0  0100               	movlb	0	; () banked
  4471  0010F2  6F82               	movwf	running_display@is_leading_zero& (0+255),b
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;main.c: 570: n_c++;
  4475  0010F4  0100               	movlb	0	; () banked
  4476  0010F6  2B83               	incf	running_display@n_c& (0+255),f,b
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;main.c: 571: Lcd_Write_Char(current_user[i]);
  4480  0010F8  0ED3               	movlw	low _current_user
  4481  0010FA  0100               	movlb	0	; () banked
  4482  0010FC  258C               	addwf	running_display@i& (0+255),w,b
  4483  0010FE  6ED9               	movwf	fsr2l,c
  4484  001100  0E00               	movlw	high _current_user
  4485  001102  0100               	movlb	0	; () banked
  4486  001104  218D               	addwfc	(running_display@i+1)& (0+255),w,b
  4487  001106  6EDA               	movwf	fsr2h,c
  4488  001108  50DF               	movf	indf2,w,c
  4489  00110A  EC3F  F00D         	call	_Lcd_Write_Char
  4490  00110E                     l4334:
  4491  00110E  0100               	movlb	0	; () banked
  4492  001110  4B8C               	infsnz	running_display@i& (0+255),f,b
  4493  001112  2B8D               	incf	(running_display@i+1)& (0+255),f,b
  4494  001114  D7D0               	goto	l4316
  4495  001116                     l4338:
  4496                           
  4497                           ; BSR set to: 0
  4498                           ;main.c: 572: }
  4499                           ;main.c: 573: }
  4500                           ;main.c: 574: for (int i = 0; i < 13 - n_c; i++)
  4501  001116  0E00               	movlw	0
  4502  001118  0100               	movlb	0	; () banked
  4503  00111A  6F81               	movwf	(running_display@i_914+1)& (0+255),b
  4504  00111C  0E00               	movlw	0
  4505  00111E  6F80               	movwf	running_display@i_914& (0+255),b
  4506  001120  D006               	goto	l4344
  4507  001122                     l4340:
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;main.c: 575: Lcd_Write_Char(' ');
  4511  001122  0E20               	movlw	32
  4512  001124  EC3F  F00D         	call	_Lcd_Write_Char
  4513  001128  0100               	movlb	0	; () banked
  4514  00112A  4B80               	infsnz	running_display@i_914& (0+255),f,b
  4515  00112C  2B81               	incf	(running_display@i_914+1)& (0+255),f,b
  4516  00112E                     l4344:
  4517                           
  4518                           ; BSR set to: 0
  4519  00112E  0100               	movlb	0	; () banked
  4520  001130  5183               	movf	running_display@n_c& (0+255),w,b
  4521  001132  6E23               	movwf	??_running_display& (0+255),c
  4522  001134  6A24               	clrf	(??_running_display+1)& (0+255),c
  4523  001136  1E23               	comf	??_running_display,f,c
  4524  001138  1E24               	comf	??_running_display+1,f,c
  4525  00113A  4A23               	infsnz	??_running_display,f,c
  4526  00113C  2A24               	incf	??_running_display+1,f,c
  4527  00113E  0E0D               	movlw	13
  4528  001140  2623               	addwf	??_running_display,f,c
  4529  001142  0E00               	movlw	0
  4530  001144  2224               	addwfc	??_running_display+1,f,c
  4531  001146  5023               	movf	??_running_display,w,c
  4532  001148  0100               	movlb	0	; () banked
  4533  00114A  5D80               	subwf	running_display@i_914& (0+255),w,b
  4534  00114C  0100               	movlb	0	; () banked
  4535  00114E  5181               	movf	(running_display@i_914+1)& (0+255),w,b
  4536  001150  0A80               	xorlw	128
  4537  001152  6E25               	movwf	(??_running_display+2)& (0+255),c
  4538  001154  5024               	movf	??_running_display+1,w,c
  4539  001156  0A80               	xorlw	128
  4540  001158  5825               	subwfb	(??_running_display+2)& (0+255),w,c
  4541  00115A  A0D8               	btfss	status,0,c
  4542  00115C  D7E2               	goto	l4340
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;main.c: 576: Lcd_Set_Cursor(2,1);
  4546                           
  4547                           ; BSR set to: 0
  4548  00115E  0E01               	movlw	1
  4549  001160  6E12               	movwf	Lcd_Set_Cursor@b,c
  4550  001162  0E02               	movlw	2
  4551  001164  ECDB  F00C         	call	_Lcd_Set_Cursor
  4552                           
  4553                           ;main.c: 577: for (int i = 0; i < 16; i++)
  4554  001168  0E00               	movlw	0
  4555  00116A  0100               	movlb	0	; () banked
  4556  00116C  6F89               	movwf	(running_display@i_915+1)& (0+255),b
  4557  00116E  0E00               	movlw	0
  4558  001170  6F88               	movwf	running_display@i_915& (0+255),b
  4559  001172                     l4350:
  4560                           
  4561                           ; BSR set to: 0
  4562  001172  0100               	movlb	0	; () banked
  4563  001174  BF89               	btfsc	(running_display@i_915+1)& (0+255),7,b
  4564  001176  D008               	goto	l4354
  4565  001178  0100               	movlb	0	; () banked
  4566  00117A  5189               	movf	(running_display@i_915+1)& (0+255),w,b
  4567  00117C  E114               	bnz	l4360
  4568  00117E  0E10               	movlw	16
  4569  001180  0100               	movlb	0	; () banked
  4570  001182  5D88               	subwf	running_display@i_915& (0+255),w,b
  4571  001184  B0D8               	btfsc	status,0,c
  4572  001186  D00F               	goto	l4360
  4573  001188                     l4354:
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;main.c: 578: Lcd_Write_Char(logged_user[i]);
  4577  001188  0EBA               	movlw	low _logged_user
  4578  00118A  0100               	movlb	0	; () banked
  4579  00118C  2588               	addwf	running_display@i_915& (0+255),w,b
  4580  00118E  6ED9               	movwf	fsr2l,c
  4581  001190  0E00               	movlw	high _logged_user
  4582  001192  0100               	movlb	0	; () banked
  4583  001194  2189               	addwfc	(running_display@i_915+1)& (0+255),w,b
  4584  001196  6EDA               	movwf	fsr2h,c
  4585  001198  50DF               	movf	indf2,w,c
  4586  00119A  EC3F  F00D         	call	_Lcd_Write_Char
  4587  00119E  0100               	movlb	0	; () banked
  4588  0011A0  4B88               	infsnz	running_display@i_915& (0+255),f,b
  4589  0011A2  2B89               	incf	(running_display@i_915+1)& (0+255),f,b
  4590  0011A4  D7E6               	goto	l4350
  4591  0011A6                     l4360:
  4592                           
  4593                           ; BSR set to: 0
  4594                           ;main.c: 580: Lcd_Set_Cursor(1,12);
  4595  0011A6  0E0C               	movlw	12
  4596  0011A8  6E12               	movwf	Lcd_Set_Cursor@b,c
  4597  0011AA  0E01               	movlw	1
  4598  0011AC  ECDB  F00C         	call	_Lcd_Set_Cursor
  4599                           
  4600                           ;main.c: 581: Lcd_Write_String("00:00");
  4601  0011B0  0EEC               	movlw	low STR_29
  4602  0011B2  6E14               	movwf	Lcd_Write_String@a,c
  4603  0011B4  0E7F               	movlw	high STR_29
  4604  0011B6  6E15               	movwf	Lcd_Write_String@a+1,c
  4605  0011B8  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  4606                           
  4607                           ;main.c: 582: int s = login_timeout, ms = 0;
  4608  0011BC  C0B8  F08A         	movff	_login_timeout,running_display@s
  4609  0011C0  C0B9  F08B         	movff	_login_timeout+1,running_display@s+1
  4610  0011C4  0E00               	movlw	0
  4611  0011C6  0100               	movlb	0	; () banked
  4612  0011C8  6F85               	movwf	(running_display@ms+1)& (0+255),b
  4613  0011CA  0E00               	movlw	0
  4614  0011CC  6F84               	movwf	running_display@ms& (0+255),b
  4615                           
  4616                           ; BSR set to: 0
  4617                           ;main.c: 583: char t[] = {'0', '0', ':', '0', '0'};
  4618  0011CE  EE20  F0B0         	lfsr	2,running_display@F3741
  4619  0011D2  EE10  F06E         	lfsr	1,running_display@t
  4620  0011D6  0E04               	movlw	4
  4621  0011D8                     u4121:
  4622  0011D8  CFDB FFE3          	movff	plusw2,plusw1
  4623  0011DC  06E8               	decf	wreg,f,c
  4624  0011DE  E2FC               	bc	u4121
  4625                           
  4626                           ;main.c: 584: while (read_keypad() != '#')
  4627  0011E0  D0B5               	goto	l4404
  4628  0011E2                     l4370:
  4629                           
  4630                           ;main.c: 585: {
  4631                           ;main.c: 586: if (s == 0)
  4632  0011E2  0100               	movlb	0	; () banked
  4633  0011E4  518A               	movf	running_display@s& (0+255),w,b
  4634  0011E6  0100               	movlb	0	; () banked
  4635  0011E8  118B               	iorwf	(running_display@s+1)& (0+255),w,b
  4636  0011EA  B4D8               	btfsc	status,2,c
  4637  0011EC  D0B4               	goto	l4406
  4638                           
  4639                           ; BSR set to: 0
  4640                           ;main.c: 588: _delay((unsigned long)((265)*(16000000/4000000.0)));
  4641                           
  4642                           ; BSR set to: 0
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;main.c: 587: break;
  4646  0011EE  0ED4               	movlw	212
  4647  0011F0                     u4757:
  4648  0011F0  F000 F000          	nop2	
  4649  0011F4  2EE8               	decfsz	wreg,f,c
  4650  0011F6  D7FC               	goto	u4757
  4651                           
  4652                           ;main.c: 589: ms += 1;
  4653  0011F8  0100               	movlb	0	; () banked
  4654  0011FA  4B84               	infsnz	running_display@ms& (0+255),f,b
  4655  0011FC  2B85               	incf	(running_display@ms+1)& (0+255),f,b
  4656                           
  4657                           ;main.c: 590: if (ms == 1000)
  4658  0011FE  0EE8               	movlw	232
  4659  001200  0100               	movlb	0	; () banked
  4660  001202  1984               	xorwf	running_display@ms& (0+255),w,b
  4661  001204  E104               	bnz	u4141
  4662  001206  0E03               	movlw	3
  4663  001208  0100               	movlb	0	; () banked
  4664  00120A  1985               	xorwf	(running_display@ms+1)& (0+255),w,b
  4665  00120C  A4D8               	btfss	status,2,c
  4666  00120E                     u4141:
  4667  00120E  D09E               	goto	l4404
  4668                           
  4669                           ; BSR set to: 0
  4670                           ;main.c: 591: {
  4671                           ;main.c: 592: s -= 1;
  4672  001210  0100               	movlb	0	; () banked
  4673  001212  078A               	decf	running_display@s& (0+255),f,b
  4674  001214  A0D8               	btfss	status,0,c
  4675  001216  078B               	decf	(running_display@s+1)& (0+255),f,b
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;main.c: 593: ms = 0;
  4679  001218  0E00               	movlw	0
  4680  00121A  0100               	movlb	0	; () banked
  4681  00121C  6F85               	movwf	(running_display@ms+1)& (0+255),b
  4682  00121E  0E00               	movlw	0
  4683  001220  6F84               	movwf	running_display@ms& (0+255),b
  4684                           
  4685                           ; BSR set to: 0
  4686                           ;main.c: 595: char n[] = {'0','1','2','3','4','5','6','7','8','9'};
  4687  001222  EE20  F0A6         	lfsr	2,running_display@F3744
  4688  001226  EE10  F075         	lfsr	1,running_display@n
  4689  00122A  0E09               	movlw	9
  4690  00122C                     u4151:
  4691  00122C  CFDB FFE3          	movff	plusw2,plusw1
  4692  001230  06E8               	decf	wreg,f,c
  4693  001232  E2FC               	bc	u4151
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;main.c: 596: int hour=s/3600;
  4697  001234  C08A  F010         	movff	running_display@s,___awdiv@dividend
  4698  001238  C08B  F011         	movff	running_display@s+1,___awdiv@dividend+1
  4699  00123C  0E0E               	movlw	14
  4700  00123E  6E13               	movwf	___awdiv@divisor+1,c
  4701  001240  0E10               	movlw	16
  4702  001242  6E12               	movwf	___awdiv@divisor,c
  4703  001244  EC59  F00B         	call	___awdiv	;wreg free
  4704  001248  C010  F073         	movff	?___awdiv,running_display@hour
  4705  00124C  C011  F074         	movff	?___awdiv+1,running_display@hour+1
  4706                           
  4707                           ;main.c: 597: int second=s % 3600;
  4708  001250  C08A  F010         	movff	running_display@s,___awmod@dividend
  4709  001254  C08B  F011         	movff	running_display@s+1,___awmod@dividend+1
  4710  001258  0E0E               	movlw	14
  4711  00125A  6E13               	movwf	___awmod@divisor+1,c
  4712  00125C  0E10               	movlw	16
  4713  00125E  6E12               	movwf	___awmod@divisor,c
  4714  001260  EC4F  F00C         	call	___awmod	;wreg free
  4715  001264  C010  F08E         	movff	?___awmod,running_display@second
  4716  001268  C011  F08F         	movff	?___awmod+1,running_display@second+1
  4717                           
  4718                           ;main.c: 598: int minute=second/60;
  4719  00126C  C08E  F010         	movff	running_display@second,___awdiv@dividend
  4720  001270  C08F  F011         	movff	running_display@second+1,___awdiv@dividend+1
  4721  001274  0E00               	movlw	0
  4722  001276  6E13               	movwf	___awdiv@divisor+1,c
  4723  001278  0E3C               	movlw	60
  4724  00127A  6E12               	movwf	___awdiv@divisor,c
  4725  00127C  EC59  F00B         	call	___awdiv	;wreg free
  4726  001280  C010  F086         	movff	?___awdiv,running_display@minute
  4727  001284  C011  F087         	movff	?___awdiv+1,running_display@minute+1
  4728                           
  4729                           ;main.c: 599: second %= 60;
  4730  001288  C08E  F010         	movff	running_display@second,___awmod@dividend
  4731  00128C  C08F  F011         	movff	running_display@second+1,___awmod@dividend+1
  4732  001290  0E00               	movlw	0
  4733  001292  6E13               	movwf	___awmod@divisor+1,c
  4734  001294  0E3C               	movlw	60
  4735  001296  6E12               	movwf	___awmod@divisor,c
  4736  001298  EC4F  F00C         	call	___awmod	;wreg free
  4737  00129C  C010  F08E         	movff	?___awmod,running_display@second
  4738  0012A0  C011  F08F         	movff	?___awmod+1,running_display@second+1
  4739                           
  4740                           ;main.c: 600: Lcd_Set_Cursor(1,12);
  4741  0012A4  0E0C               	movlw	12
  4742  0012A6  6E12               	movwf	Lcd_Set_Cursor@b,c
  4743  0012A8  0E01               	movlw	1
  4744  0012AA  ECDB  F00C         	call	_Lcd_Set_Cursor
  4745                           
  4746                           ;main.c: 601: Lcd_Write_Char(n[minute/10]);
  4747  0012AE  C086  F010         	movff	running_display@minute,___awdiv@dividend
  4748  0012B2  C087  F011         	movff	running_display@minute+1,___awdiv@dividend+1
  4749  0012B6  0E00               	movlw	0
  4750  0012B8  6E13               	movwf	___awdiv@divisor+1,c
  4751  0012BA  0E0A               	movlw	10
  4752  0012BC  6E12               	movwf	___awdiv@divisor,c
  4753  0012BE  EC59  F00B         	call	___awdiv	;wreg free
  4754  0012C2  0E75               	movlw	low running_display@n
  4755  0012C4  2410               	addwf	?___awdiv,w,c
  4756  0012C6  6ED9               	movwf	fsr2l,c
  4757  0012C8  0E00               	movlw	high running_display@n
  4758  0012CA  2011               	addwfc	?___awdiv+1,w,c
  4759  0012CC  6EDA               	movwf	fsr2h,c
  4760  0012CE  50DF               	movf	indf2,w,c
  4761  0012D0  EC3F  F00D         	call	_Lcd_Write_Char
  4762                           
  4763                           ;main.c: 602: Lcd_Write_Char(n[minute%10]);
  4764  0012D4  C086  F010         	movff	running_display@minute,___awmod@dividend
  4765  0012D8  C087  F011         	movff	running_display@minute+1,___awmod@dividend+1
  4766  0012DC  0E00               	movlw	0
  4767  0012DE  6E13               	movwf	___awmod@divisor+1,c
  4768  0012E0  0E0A               	movlw	10
  4769  0012E2  6E12               	movwf	___awmod@divisor,c
  4770  0012E4  EC4F  F00C         	call	___awmod	;wreg free
  4771  0012E8  0E75               	movlw	low running_display@n
  4772  0012EA  2410               	addwf	?___awmod,w,c
  4773  0012EC  6ED9               	movwf	fsr2l,c
  4774  0012EE  0E00               	movlw	high running_display@n
  4775  0012F0  2011               	addwfc	?___awmod+1,w,c
  4776  0012F2  6EDA               	movwf	fsr2h,c
  4777  0012F4  50DF               	movf	indf2,w,c
  4778  0012F6  EC3F  F00D         	call	_Lcd_Write_Char
  4779                           
  4780                           ;main.c: 603: Lcd_Write_Char(':');
  4781  0012FA  0E3A               	movlw	58
  4782  0012FC  EC3F  F00D         	call	_Lcd_Write_Char
  4783                           
  4784                           ;main.c: 604: Lcd_Write_Char(n[second/10]);
  4785  001300  C08E  F010         	movff	running_display@second,___awdiv@dividend
  4786  001304  C08F  F011         	movff	running_display@second+1,___awdiv@dividend+1
  4787  001308  0E00               	movlw	0
  4788  00130A  6E13               	movwf	___awdiv@divisor+1,c
  4789  00130C  0E0A               	movlw	10
  4790  00130E  6E12               	movwf	___awdiv@divisor,c
  4791  001310  EC59  F00B         	call	___awdiv	;wreg free
  4792  001314  0E75               	movlw	low running_display@n
  4793  001316  2410               	addwf	?___awdiv,w,c
  4794  001318  6ED9               	movwf	fsr2l,c
  4795  00131A  0E00               	movlw	high running_display@n
  4796  00131C  2011               	addwfc	?___awdiv+1,w,c
  4797  00131E  6EDA               	movwf	fsr2h,c
  4798  001320  50DF               	movf	indf2,w,c
  4799  001322  EC3F  F00D         	call	_Lcd_Write_Char
  4800                           
  4801                           ;main.c: 605: Lcd_Write_Char(n[second%10]);
  4802  001326  C08E  F010         	movff	running_display@second,___awmod@dividend
  4803  00132A  C08F  F011         	movff	running_display@second+1,___awmod@dividend+1
  4804  00132E  0E00               	movlw	0
  4805  001330  6E13               	movwf	___awmod@divisor+1,c
  4806  001332  0E0A               	movlw	10
  4807  001334  6E12               	movwf	___awmod@divisor,c
  4808  001336  EC4F  F00C         	call	___awmod	;wreg free
  4809  00133A  0E75               	movlw	low running_display@n
  4810  00133C  2410               	addwf	?___awmod,w,c
  4811  00133E  6ED9               	movwf	fsr2l,c
  4812  001340  0E00               	movlw	high running_display@n
  4813  001342  2011               	addwfc	?___awmod+1,w,c
  4814  001344  6EDA               	movwf	fsr2h,c
  4815  001346  50DF               	movf	indf2,w,c
  4816  001348  EC3F  F00D         	call	_Lcd_Write_Char
  4817  00134C                     l4404:
  4818  00134C  EC07  F00B         	call	_read_keypad	;wreg free
  4819  001350  0A23               	xorlw	35
  4820  001352  A4D8               	btfss	status,2,c
  4821  001354  D746               	goto	l4370
  4822  001356                     l4406:
  4823                           
  4824                           ;main.c: 606: }
  4825                           ;main.c: 607: }
  4826                           ;main.c: 608: Lcd_Clear();
  4827  001356  ECAA  F00D         	call	_Lcd_Clear	;wreg free
  4828                           
  4829                           ;main.c: 609: Lcd_Set_Cursor(1,1);
  4830  00135A  0E01               	movlw	1
  4831  00135C  6E12               	movwf	Lcd_Set_Cursor@b,c
  4832  00135E  0E01               	movlw	1
  4833  001360  ECDB  F00C         	call	_Lcd_Set_Cursor
  4834                           
  4835                           ;main.c: 610: Lcd_Write_String("Logging you out.");
  4836  001364  0E75               	movlw	low STR_30
  4837  001366  6E14               	movwf	Lcd_Write_String@a,c
  4838  001368  0E7F               	movlw	high STR_30
  4839  00136A  6E15               	movwf	Lcd_Write_String@a+1,c
  4840  00136C  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  4841                           
  4842                           ;main.c: 611: menu_progress_bar(200);
  4843  001370  0E00               	movlw	0
  4844  001372  6E1E               	movwf	menu_progress_bar@load_time_ms+1,c
  4845  001374  0EC8               	movlw	200
  4846  001376  6E1D               	movwf	menu_progress_bar@load_time_ms,c
  4847  001378  ECC0  F009         	call	_menu_progress_bar	;wreg free
  4848                           
  4849                           ;main.c: 612: PORTDbits.RD7 = 0;
  4850  00137C  9E83               	bcf	3971,7,c	;volatile
  4851  00137E  0012               	return	
  4852  001380                     __end_of_running_display:
  4853                           	opt stack 0
  4854                           tblptru	equ	0xFF8
  4855                           tblptrh	equ	0xFF7
  4856                           tblptrl	equ	0xFF6
  4857                           tablat	equ	0xFF5
  4858                           prodh	equ	0xFF4
  4859                           prodl	equ	0xFF3
  4860                           postinc0	equ	0xFEE
  4861                           wreg	equ	0xFE8
  4862                           indf1	equ	0xFE7
  4863                           postdec1	equ	0xFE5
  4864                           plusw1	equ	0xFE3
  4865                           fsr1h	equ	0xFE2
  4866                           fsr1l	equ	0xFE1
  4867                           indf2	equ	0xFDF
  4868                           postinc2	equ	0xFDE
  4869                           plusw2	equ	0xFDB
  4870                           fsr2h	equ	0xFDA
  4871                           fsr2l	equ	0xFD9
  4872                           status	equ	0xFD8
  4873                           
  4874 ;; *************** function _read_keypad *****************
  4875 ;; Defined at:
  4876 ;;		line 270 in file "main.c"
  4877 ;; Parameters:    Size  Location     Type
  4878 ;;		None
  4879 ;; Auto vars:     Size  Location     Type
  4880 ;;		None
  4881 ;; Return value:  Size  Location     Type
  4882 ;;                  1    wreg      unsigned char 
  4883 ;; Registers used:
  4884 ;;		wreg, status,2
  4885 ;; Tracked objects:
  4886 ;;		On entry : 0/0
  4887 ;;		On exit  : 0/0
  4888 ;;		Unchanged: 0/0
  4889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4890 ;;      Params:         0       0       0       0       0       0       0
  4891 ;;      Locals:         0       0       0       0       0       0       0
  4892 ;;      Temps:          0       0       0       0       0       0       0
  4893 ;;      Totals:         0       0       0       0       0       0       0
  4894 ;;Total ram usage:        0 bytes
  4895 ;; Hardware stack levels used:    1
  4896 ;; Hardware stack levels required when called:    1
  4897 ;; This function calls:
  4898 ;;		Nothing
  4899 ;; This function is called by:
  4900 ;;		_main
  4901 ;;		_latch_keypad
  4902 ;;		_start_routine
  4903 ;;		_running_display
  4904 ;; This function uses a non-reentrant model
  4905 ;;
  4906                           
  4907                           	psect	text5
  4908  00160E                     __ptext5:
  4909                           	opt stack 0
  4910  00160E                     _read_keypad:
  4911                           	opt stack 28
  4912                           
  4913                           ;main.c: 272: TRISB = 0b01111000;
  4914                           
  4915                           ;incstack = 0
  4916  00160E  0E78               	movlw	120
  4917  001610  6E93               	movwf	3987,c	;volatile
  4918                           
  4919                           ;main.c: 273: PORTB = 0b00000001;
  4920  001612  0E01               	movlw	1
  4921  001614  6E81               	movwf	3969,c	;volatile
  4922                           
  4923                           ;main.c: 275: if (PORTBbits.RB6) {PORTB = 0x00; return '*';}
  4924  001616  AC81               	btfss	3969,6,c	;volatile
  4925  001618  D004               	goto	l254
  4926  00161A  0E00               	movlw	0
  4927  00161C  6E81               	movwf	3969,c	;volatile
  4928  00161E  0E2A               	movlw	42
  4929  001620  0012               	return	
  4930  001622                     l254:
  4931                           
  4932                           ;main.c: 276: if (PORTBbits.RB3) {PORTB = 0x00; return '1';}
  4933  001622  A681               	btfss	3969,3,c	;volatile
  4934  001624  D004               	goto	l256
  4935  001626  0E00               	movlw	0
  4936  001628  6E81               	movwf	3969,c	;volatile
  4937  00162A  0E31               	movlw	49
  4938  00162C  0012               	return	
  4939  00162E                     l256:
  4940                           
  4941                           ;main.c: 277: if (PORTBbits.RB4) {PORTB = 0x00; return '4';}
  4942  00162E  A881               	btfss	3969,4,c	;volatile
  4943  001630  D004               	goto	l257
  4944  001632  0E00               	movlw	0
  4945  001634  6E81               	movwf	3969,c	;volatile
  4946  001636  0E34               	movlw	52
  4947  001638  0012               	return	
  4948  00163A                     l257:
  4949                           
  4950                           ;main.c: 278: if (PORTBbits.RB5) {PORTB = 0x00; return '7';}
  4951  00163A  AA81               	btfss	3969,5,c	;volatile
  4952  00163C  D004               	goto	l3648
  4953  00163E  0E00               	movlw	0
  4954  001640  6E81               	movwf	3969,c	;volatile
  4955  001642  0E37               	movlw	55
  4956  001644  0012               	return	
  4957  001646                     l3648:
  4958                           
  4959                           ;main.c: 279: PORTB = 0b00000010;
  4960  001646  0E02               	movlw	2
  4961  001648  6E81               	movwf	3969,c	;volatile
  4962                           
  4963                           ;main.c: 281: if (PORTBbits.RB3) {PORTB = 0x00; return '2';}
  4964  00164A  A681               	btfss	3969,3,c	;volatile
  4965  00164C  D004               	goto	l259
  4966  00164E  0E00               	movlw	0
  4967  001650  6E81               	movwf	3969,c	;volatile
  4968  001652  0E32               	movlw	50
  4969  001654  0012               	return	
  4970  001656                     l259:
  4971                           
  4972                           ;main.c: 282: if (PORTBbits.RB4) {PORTB = 0x00; return '5';}
  4973  001656  A881               	btfss	3969,4,c	;volatile
  4974  001658  D004               	goto	l260
  4975  00165A  0E00               	movlw	0
  4976  00165C  6E81               	movwf	3969,c	;volatile
  4977  00165E  0E35               	movlw	53
  4978  001660  0012               	return	
  4979  001662                     l260:
  4980                           
  4981                           ;main.c: 283: if (PORTBbits.RB5) {PORTB = 0x00; return '8';}
  4982  001662  AA81               	btfss	3969,5,c	;volatile
  4983  001664  D004               	goto	l261
  4984  001666  0E00               	movlw	0
  4985  001668  6E81               	movwf	3969,c	;volatile
  4986  00166A  0E38               	movlw	56
  4987  00166C  0012               	return	
  4988  00166E                     l261:
  4989                           
  4990                           ;main.c: 284: if (PORTBbits.RB6) {PORTB = 0x00; return '0';}
  4991  00166E  AC81               	btfss	3969,6,c	;volatile
  4992  001670  D004               	goto	l3676
  4993  001672  0E00               	movlw	0
  4994  001674  6E81               	movwf	3969,c	;volatile
  4995  001676  0E30               	movlw	48
  4996  001678  0012               	return	
  4997  00167A                     l3676:
  4998                           
  4999                           ;main.c: 285: PORTB = 0b00000100;
  5000  00167A  0E04               	movlw	4
  5001  00167C  6E81               	movwf	3969,c	;volatile
  5002                           
  5003                           ;main.c: 287: if (PORTBbits.RB3) {PORTB = 0x00; return '3';}
  5004  00167E  A681               	btfss	3969,3,c	;volatile
  5005  001680  D004               	goto	l263
  5006  001682  0E00               	movlw	0
  5007  001684  6E81               	movwf	3969,c	;volatile
  5008  001686  0E33               	movlw	51
  5009  001688  0012               	return	
  5010  00168A                     l263:
  5011                           
  5012                           ;main.c: 288: if (PORTBbits.RB4) {PORTB = 0x00; return '6';}
  5013  00168A  A881               	btfss	3969,4,c	;volatile
  5014  00168C  D004               	goto	l264
  5015  00168E  0E00               	movlw	0
  5016  001690  6E81               	movwf	3969,c	;volatile
  5017  001692  0E36               	movlw	54
  5018  001694  0012               	return	
  5019  001696                     l264:
  5020                           
  5021                           ;main.c: 289: if (PORTBbits.RB5) {PORTB = 0x00; return '9';}
  5022  001696  AA81               	btfss	3969,5,c	;volatile
  5023  001698  D004               	goto	l265
  5024  00169A  0E00               	movlw	0
  5025  00169C  6E81               	movwf	3969,c	;volatile
  5026  00169E  0E39               	movlw	57
  5027  0016A0  0012               	return	
  5028  0016A2                     l265:
  5029                           
  5030                           ;main.c: 290: if (PORTBbits.RB6) {PORTB = 0x00; return '#';}
  5031  0016A2  AC81               	btfss	3969,6,c	;volatile
  5032  0016A4  D004               	goto	l3704
  5033  0016A6  0E00               	movlw	0
  5034  0016A8  6E81               	movwf	3969,c	;volatile
  5035  0016AA  0E23               	movlw	35
  5036  0016AC  0012               	return	
  5037  0016AE                     l3704:
  5038                           
  5039                           ;main.c: 291: return '_';
  5040  0016AE  0E5F               	movlw	95
  5041  0016B0  0012               	return	
  5042  0016B2                     __end_of_read_keypad:
  5043                           	opt stack 0
  5044                           tblptru	equ	0xFF8
  5045                           tblptrh	equ	0xFF7
  5046                           tblptrl	equ	0xFF6
  5047                           tablat	equ	0xFF5
  5048                           prodh	equ	0xFF4
  5049                           prodl	equ	0xFF3
  5050                           postinc0	equ	0xFEE
  5051                           wreg	equ	0xFE8
  5052                           indf1	equ	0xFE7
  5053                           postdec1	equ	0xFE5
  5054                           plusw1	equ	0xFE3
  5055                           fsr1h	equ	0xFE2
  5056                           fsr1l	equ	0xFE1
  5057                           indf2	equ	0xFDF
  5058                           postinc2	equ	0xFDE
  5059                           plusw2	equ	0xFDB
  5060                           fsr2h	equ	0xFDA
  5061                           fsr2l	equ	0xFD9
  5062                           status	equ	0xFD8
  5063                           
  5064 ;; *************** function _menu_progress_bar *****************
  5065 ;; Defined at:
  5066 ;;		line 84 in file "menu.h"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;  load_time_ms    2   28[COMRAM] unsigned short 
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;  ii              2    4[BANK0 ] int 
  5071 ;;  i               2   12[BANK0 ] int 
  5072 ;;  i               2   10[BANK0 ] int 
  5073 ;;  i               2    8[BANK0 ] int 
  5074 ;;  i               2    6[BANK0 ] int 
  5075 ;;  d               4    0[BANK0 ] unsigned long 
  5076 ;; Return value:  Size  Location     Type
  5077 ;;                  1    wreg      void 
  5078 ;; Registers used:
  5079 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5080 ;; Tracked objects:
  5081 ;;		On entry : 0/0
  5082 ;;		On exit  : 0/0
  5083 ;;		Unchanged: 0/0
  5084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5085 ;;      Params:         2       0       0       0       0       0       0
  5086 ;;      Locals:         0      14       0       0       0       0       0
  5087 ;;      Temps:          4       0       0       0       0       0       0
  5088 ;;      Totals:         6      14       0       0       0       0       0
  5089 ;;Total ram usage:       20 bytes
  5090 ;; Hardware stack levels used:    1
  5091 ;; Hardware stack levels required when called:    4
  5092 ;; This function calls:
  5093 ;;		_Lcd_Clear
  5094 ;;		_Lcd_Set_Cursor
  5095 ;;		_Lcd_Write_Char
  5096 ;;		_Lcd_Write_String
  5097 ;;		___lwdiv
  5098 ;;		___wmul
  5099 ;; This function is called by:
  5100 ;;		_main
  5101 ;;		_start_routine
  5102 ;;		_running_display
  5103 ;; This function uses a non-reentrant model
  5104 ;;
  5105                           
  5106                           	psect	text6
  5107  001380                     __ptext6:
  5108                           	opt stack 0
  5109  001380                     _menu_progress_bar:
  5110                           	opt stack 25
  5111                           
  5112                           ;menu.h: 86: Lcd_Set_Cursor(2,1);
  5113                           
  5114                           ;incstack = 0
  5115  001380  0E01               	movlw	1
  5116  001382  6E12               	movwf	Lcd_Set_Cursor@b,c
  5117  001384  0E02               	movlw	2
  5118  001386  ECDB  F00C         	call	_Lcd_Set_Cursor
  5119                           
  5120                           ;menu.h: 87: unsigned long d = (((load_time_ms/16)/20)*20);
  5121  00138A  0E00               	movlw	0
  5122  00138C  6E13               	movwf	___lwdiv@divisor+1,c
  5123  00138E  0E14               	movlw	20
  5124  001390  6E12               	movwf	___lwdiv@divisor,c
  5125  001392  C01D  F01F         	movff	menu_progress_bar@load_time_ms,??_menu_progress_bar
  5126  001396  C01E  F020         	movff	menu_progress_bar@load_time_ms+1,??_menu_progress_bar+1
  5127  00139A  0E04               	movlw	4
  5128  00139C  6E21               	movwf	(??_menu_progress_bar+2)& (0+255),c
  5129  00139E                     u3395:
  5130  00139E  90D8               	bcf	status,0,c
  5131  0013A0  3220               	rrcf	??_menu_progress_bar+1,f,c
  5132  0013A2  321F               	rrcf	??_menu_progress_bar,f,c
  5133  0013A4  2E21               	decfsz	(??_menu_progress_bar+2)& (0+255),f,c
  5134  0013A6  D7FB               	goto	u3395
  5135  0013A8  C01F  F010         	movff	??_menu_progress_bar,___lwdiv@dividend
  5136  0013AC  C020  F011         	movff	??_menu_progress_bar+1,___lwdiv@dividend+1
  5137  0013B0  ECB2  F00C         	call	___lwdiv	;wreg free
  5138  0013B4  C010  F017         	movff	?___lwdiv,___wmul@multiplier
  5139  0013B8  C011  F018         	movff	?___lwdiv+1,___wmul@multiplier+1
  5140  0013BC  0E00               	movlw	0
  5141  0013BE  6E1A               	movwf	___wmul@multiplicand+1,c
  5142  0013C0  0E14               	movlw	20
  5143  0013C2  6E19               	movwf	___wmul@multiplicand,c
  5144  0013C4  EC85  F00D         	call	___wmul	;wreg free
  5145  0013C8  C017  F060         	movff	?___wmul,menu_progress_bar@d
  5146  0013CC  C018  F061         	movff	?___wmul+1,menu_progress_bar@d+1
  5147  0013D0  0100               	movlb	0	; () banked
  5148  0013D2  6B62               	clrf	(menu_progress_bar@d+2)& (0+255),b
  5149  0013D4  6B63               	clrf	(menu_progress_bar@d+3)& (0+255),b
  5150                           
  5151                           ; BSR set to: 0
  5152                           ;menu.h: 88: for (int i = 0; i < 16; i++)
  5153  0013D6  0E00               	movlw	0
  5154  0013D8  0100               	movlb	0	; () banked
  5155  0013DA  6F67               	movwf	(menu_progress_bar@i+1)& (0+255),b
  5156  0013DC  0E00               	movlw	0
  5157  0013DE  6F66               	movwf	menu_progress_bar@i& (0+255),b
  5158  0013E0                     l3742:
  5159                           
  5160                           ; BSR set to: 0
  5161  0013E0  0100               	movlb	0	; () banked
  5162  0013E2  BF67               	btfsc	(menu_progress_bar@i+1)& (0+255),7,b
  5163  0013E4  D008               	goto	l3746
  5164  0013E6  0100               	movlb	0	; () banked
  5165  0013E8  5167               	movf	(menu_progress_bar@i+1)& (0+255),w,b
  5166  0013EA  E137               	bnz	l3760
  5167  0013EC  0E10               	movlw	16
  5168  0013EE  0100               	movlb	0	; () banked
  5169  0013F0  5D66               	subwf	menu_progress_bar@i& (0+255),w,b
  5170  0013F2  B0D8               	btfsc	status,0,c
  5171  0013F4  D032               	goto	l3760
  5172  0013F6                     l3746:
  5173                           
  5174                           ; BSR set to: 0
  5175                           ;menu.h: 89: {
  5176                           ;menu.h: 90: Lcd_Write_Char(0xFF);
  5177  0013F6  0EFF               	movlw	255
  5178  0013F8  EC3F  F00D         	call	_Lcd_Write_Char
  5179                           
  5180                           ;menu.h: 91: for (int ii = 0; ii < d; ii+=20)
  5181  0013FC  0E00               	movlw	0
  5182  0013FE  0100               	movlb	0	; () banked
  5183  001400  6F65               	movwf	(menu_progress_bar@ii+1)& (0+255),b
  5184  001402  0E00               	movlw	0
  5185  001404  6F64               	movwf	menu_progress_bar@ii& (0+255),b
  5186  001406  D00E               	goto	l3754
  5187  001408                     l3750:
  5188                           
  5189                           ; BSR set to: 0
  5190                           ;menu.h: 92: _delay((unsigned long)((20)*(16000000/4000.0)));
  5191  001408  0E68               	movlw	104
  5192  00140A  6E1F               	movwf	??_menu_progress_bar& (0+255),c
  5193  00140C  0EE4               	movlw	228
  5194  00140E                     u4767:
  5195  00140E  2EE8               	decfsz	wreg,f,c
  5196  001410  D7FE               	goto	u4767
  5197  001412  2E1F               	decfsz	??_menu_progress_bar& (0+255),f,c
  5198  001414  D7FC               	goto	u4767
  5199  001416  F000 F000          	nop2	
  5200  00141A  0E14               	movlw	20
  5201  00141C  0100               	movlb	0	; () banked
  5202  00141E  2764               	addwf	menu_progress_bar@ii& (0+255),f,b
  5203  001420  0E00               	movlw	0
  5204  001422  2365               	addwfc	(menu_progress_bar@ii+1)& (0+255),f,b
  5205  001424                     l3754:
  5206                           
  5207                           ; BSR set to: 0
  5208  001424  C064  F01F         	movff	menu_progress_bar@ii,??_menu_progress_bar
  5209  001428  C065  F020         	movff	menu_progress_bar@ii+1,??_menu_progress_bar+1
  5210  00142C  0E00               	movlw	0
  5211  00142E  BE20               	btfsc	(??_menu_progress_bar+1)& (0+255),7,c
  5212  001430  0EFF               	movlw	255
  5213  001432  6E21               	movwf	(??_menu_progress_bar+2)& (0+255),c
  5214  001434  6E22               	movwf	(??_menu_progress_bar+3)& (0+255),c
  5215  001436  0100               	movlb	0	; () banked
  5216  001438  5160               	movf	menu_progress_bar@d& (0+255),w,b
  5217  00143A  5C1F               	subwf	??_menu_progress_bar,w,c
  5218  00143C  0100               	movlb	0	; () banked
  5219  00143E  5161               	movf	(menu_progress_bar@d+1)& (0+255),w,b
  5220  001440  5820               	subwfb	??_menu_progress_bar+1,w,c
  5221  001442  0100               	movlb	0	; () banked
  5222  001444  5162               	movf	(menu_progress_bar@d+2)& (0+255),w,b
  5223  001446  5821               	subwfb	??_menu_progress_bar+2,w,c
  5224  001448  0100               	movlb	0	; () banked
  5225  00144A  5163               	movf	(menu_progress_bar@d+3)& (0+255),w,b
  5226  00144C  5822               	subwfb	??_menu_progress_bar+3,w,c
  5227  00144E  A0D8               	btfss	status,0,c
  5228  001450  D7DB               	goto	l3750
  5229                           
  5230                           ; BSR set to: 0
  5231                           
  5232                           ; BSR set to: 0
  5233  001452  0100               	movlb	0	; () banked
  5234  001454  4B66               	infsnz	menu_progress_bar@i& (0+255),f,b
  5235  001456  2B67               	incf	(menu_progress_bar@i+1)& (0+255),f,b
  5236  001458  D7C3               	goto	l3742
  5237  00145A                     l3760:
  5238                           
  5239                           ; BSR set to: 0
  5240                           ;menu.h: 93: }
  5241                           ;menu.h: 94: Lcd_Set_Cursor(2,1);
  5242  00145A  0E01               	movlw	1
  5243  00145C  6E12               	movwf	Lcd_Set_Cursor@b,c
  5244  00145E  0E02               	movlw	2
  5245  001460  ECDB  F00C         	call	_Lcd_Set_Cursor
  5246                           
  5247                           ;menu.h: 95: Lcd_Write_String("                ");
  5248  001464  0E87               	movlw	low STR_2
  5249  001466  6E14               	movwf	Lcd_Write_String@a,c
  5250  001468  0E7E               	movlw	high STR_2
  5251  00146A  6E15               	movwf	Lcd_Write_String@a+1,c
  5252  00146C  EC16  F00C         	call	_Lcd_Write_String	;wreg free
  5253                           
  5254                           ;menu.h: 96: for (int i = 0; i < 5; i++)
  5255  001470  0E00               	movlw	0
  5256  001472  0100               	movlb	0	; () banked
  5257  001474  6F69               	movwf	(menu_progress_bar@i_727+1)& (0+255),b
  5258  001476  0E00               	movlw	0
  5259  001478  6F68               	movwf	menu_progress_bar@i_727& (0+255),b
  5260  00147A                     l3766:
  5261                           
  5262                           ; BSR set to: 0
  5263  00147A  0100               	movlb	0	; () banked
  5264  00147C  BF69               	btfsc	(menu_progress_bar@i_727+1)& (0+255),7,b
  5265  00147E  D008               	goto	l3770
  5266  001480  0100               	movlb	0	; () banked
  5267  001482  5169               	movf	(menu_progress_bar@i_727+1)& (0+255),w,b
  5268  001484  E112               	bnz	l3774
  5269  001486  0E05               	movlw	5
  5270  001488  0100               	movlb	0	; () banked
  5271  00148A  5D68               	subwf	menu_progress_bar@i_727& (0+255),w,b
  5272  00148C  B0D8               	btfsc	status,0,c
  5273  00148E  D00D               	goto	l3774
  5274  001490                     l3770:
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;menu.h: 97: {
  5278                           ;menu.h: 98: _delay((unsigned long)((20)*(16000000/4000.0)));
  5279  001490  0E68               	movlw	104
  5280  001492  6E1F               	movwf	??_menu_progress_bar& (0+255),c
  5281  001494  0EE4               	movlw	228
  5282  001496                     u4777:
  5283  001496  2EE8               	decfsz	wreg,f,c
  5284  001498  D7FE               	goto	u4777
  5285  00149A  2E1F               	decfsz	??_menu_progress_bar& (0+255),f,c
  5286  00149C  D7FC               	goto	u4777
  5287  00149E  F000 F000          	nop2	
  5288  0014A2  0100               	movlb	0	; () banked
  5289  0014A4  4B68               	infsnz	menu_progress_bar@i_727& (0+255),f,b
  5290  0014A6  2B69               	incf	(menu_progress_bar@i_727+1)& (0+255),f,b
  5291  0014A8  D7E8               	goto	l3766
  5292  0014AA                     l3774:
  5293                           
  5294                           ; BSR set to: 0
  5295                           ;menu.h: 99: }
  5296                           ;menu.h: 100: Lcd_Set_Cursor(2,1);
  5297  0014AA  0E01               	movlw	1
  5298  0014AC  6E12               	movwf	Lcd_Set_Cursor@b,c
  5299  0014AE  0E02               	movlw	2
  5300  0014B0  ECDB  F00C         	call	_Lcd_Set_Cursor
  5301                           
  5302                           ;menu.h: 101: for (int i = 0; i < 16; i++)
  5303  0014B4  0E00               	movlw	0
  5304  0014B6  0100               	movlb	0	; () banked
  5305  0014B8  6F6B               	movwf	(menu_progress_bar@i_728+1)& (0+255),b
  5306  0014BA  0E00               	movlw	0
  5307  0014BC  6F6A               	movwf	menu_progress_bar@i_728& (0+255),b
  5308  0014BE                     l3778:
  5309                           
  5310                           ; BSR set to: 0
  5311  0014BE  0100               	movlb	0	; () banked
  5312  0014C0  BF6B               	btfsc	(menu_progress_bar@i_728+1)& (0+255),7,b
  5313  0014C2  D008               	goto	l3782
  5314  0014C4  0100               	movlb	0	; () banked
  5315  0014C6  516B               	movf	(menu_progress_bar@i_728+1)& (0+255),w,b
  5316  0014C8  E10C               	bnz	l3788
  5317  0014CA  0E10               	movlw	16
  5318  0014CC  0100               	movlb	0	; () banked
  5319  0014CE  5D6A               	subwf	menu_progress_bar@i_728& (0+255),w,b
  5320  0014D0  B0D8               	btfsc	status,0,c
  5321  0014D2  D007               	goto	l3788
  5322  0014D4                     l3782:
  5323                           
  5324                           ; BSR set to: 0
  5325                           ;menu.h: 102: {
  5326                           ;menu.h: 103: Lcd_Write_Char(0xFF);
  5327  0014D4  0EFF               	movlw	255
  5328  0014D6  EC3F  F00D         	call	_Lcd_Write_Char
  5329  0014DA  0100               	movlb	0	; () banked
  5330  0014DC  4B6A               	infsnz	menu_progress_bar@i_728& (0+255),f,b
  5331  0014DE  2B6B               	incf	(menu_progress_bar@i_728+1)& (0+255),f,b
  5332  0014E0  D7EE               	goto	l3778
  5333  0014E2                     l3788:
  5334                           
  5335                           ; BSR set to: 0
  5336                           ;menu.h: 104: }
  5337                           ;menu.h: 105: for (int i = 0; i < 5; i++)
  5338  0014E2  0E00               	movlw	0
  5339  0014E4  0100               	movlb	0	; () banked
  5340  0014E6  6F6D               	movwf	(menu_progress_bar@i_729+1)& (0+255),b
  5341  0014E8  0E00               	movlw	0
  5342  0014EA  6F6C               	movwf	menu_progress_bar@i_729& (0+255),b
  5343  0014EC                     l3790:
  5344                           
  5345                           ; BSR set to: 0
  5346  0014EC  0100               	movlb	0	; () banked
  5347  0014EE  BF6D               	btfsc	(menu_progress_bar@i_729+1)& (0+255),7,b
  5348  0014F0  D008               	goto	l3794
  5349  0014F2  0100               	movlb	0	; () banked
  5350  0014F4  516D               	movf	(menu_progress_bar@i_729+1)& (0+255),w,b
  5351  0014F6  E112               	bnz	l3798
  5352  0014F8  0E05               	movlw	5
  5353  0014FA  0100               	movlb	0	; () banked
  5354  0014FC  5D6C               	subwf	menu_progress_bar@i_729& (0+255),w,b
  5355  0014FE  B0D8               	btfsc	status,0,c
  5356  001500  D00D               	goto	l3798
  5357  001502                     l3794:
  5358                           
  5359                           ; BSR set to: 0
  5360                           ;menu.h: 106: {
  5361                           ;menu.h: 107: _delay((unsigned long)((20)*(16000000/4000.0)));
  5362  001502  0E68               	movlw	104
  5363  001504  6E1F               	movwf	??_menu_progress_bar& (0+255),c
  5364  001506  0EE4               	movlw	228
  5365  001508                     u4787:
  5366  001508  2EE8               	decfsz	wreg,f,c
  5367  00150A  D7FE               	goto	u4787
  5368  00150C  2E1F               	decfsz	??_menu_progress_bar& (0+255),f,c
  5369  00150E  D7FC               	goto	u4787
  5370  001510  F000 F000          	nop2	
  5371  001514  0100               	movlb	0	; () banked
  5372  001516  4B6C               	infsnz	menu_progress_bar@i_729& (0+255),f,b
  5373  001518  2B6D               	incf	(menu_progress_bar@i_729+1)& (0+255),f,b
  5374  00151A  D7E8               	goto	l3790
  5375  00151C                     l3798:
  5376                           
  5377                           ; BSR set to: 0
  5378                           ;menu.h: 108: }
  5379                           ;menu.h: 109: Lcd_Clear();
  5380  00151C  ECAA  F00D         	call	_Lcd_Clear	;wreg free
  5381  001520  0012               	return		;funcret
  5382  001522                     __end_of_menu_progress_bar:
  5383                           	opt stack 0
  5384                           tblptru	equ	0xFF8
  5385                           tblptrh	equ	0xFF7
  5386                           tblptrl	equ	0xFF6
  5387                           tablat	equ	0xFF5
  5388                           prodh	equ	0xFF4
  5389                           prodl	equ	0xFF3
  5390                           postinc0	equ	0xFEE
  5391                           wreg	equ	0xFE8
  5392                           indf1	equ	0xFE7
  5393                           postdec1	equ	0xFE5
  5394                           plusw1	equ	0xFE3
  5395                           fsr1h	equ	0xFE2
  5396                           fsr1l	equ	0xFE1
  5397                           indf2	equ	0xFDF
  5398                           postinc2	equ	0xFDE
  5399                           plusw2	equ	0xFDB
  5400                           fsr2h	equ	0xFDA
  5401                           fsr2l	equ	0xFD9
  5402                           status	equ	0xFD8
  5403                           
  5404 ;; *************** function ___wmul *****************
  5405 ;; Defined at:
  5406 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  5407 ;; Parameters:    Size  Location     Type
  5408 ;;  multiplier      2   22[COMRAM] unsigned int 
  5409 ;;  multiplicand    2   24[COMRAM] unsigned int 
  5410 ;; Auto vars:     Size  Location     Type
  5411 ;;  product         2   26[COMRAM] unsigned int 
  5412 ;; Return value:  Size  Location     Type
  5413 ;;                  2   22[COMRAM] unsigned int 
  5414 ;; Registers used:
  5415 ;;		wreg, status,2, status,0, prodl, prodh
  5416 ;; Tracked objects:
  5417 ;;		On entry : 0/0
  5418 ;;		On exit  : 0/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5421 ;;      Params:         4       0       0       0       0       0       0
  5422 ;;      Locals:         2       0       0       0       0       0       0
  5423 ;;      Temps:          0       0       0       0       0       0       0
  5424 ;;      Totals:         6       0       0       0       0       0       0
  5425 ;;Total ram usage:        6 bytes
  5426 ;; Hardware stack levels used:    1
  5427 ;; Hardware stack levels required when called:    1
  5428 ;; This function calls:
  5429 ;;		Nothing
  5430 ;; This function is called by:
  5431 ;;		_menu_progress_bar
  5432 ;;		_menu_seconds_to_mmss
  5433 ;; This function uses a non-reentrant model
  5434 ;;
  5435                           
  5436                           	psect	text7
  5437  001B0A                     __ptext7:
  5438                           	opt stack 0
  5439  001B0A                     ___wmul:
  5440                           	opt stack 27
  5441                           
  5442                           ;incstack = 0
  5443  001B0A  5017               	movf	___wmul@multiplier,w,c
  5444  001B0C  0219               	mulwf	___wmul@multiplicand,c
  5445  001B0E  CFF3 F01B          	movff	prodl,___wmul@product
  5446  001B12  CFF4 F01C          	movff	prodh,___wmul@product+1
  5447  001B16  5017               	movf	___wmul@multiplier,w,c
  5448  001B18  021A               	mulwf	___wmul@multiplicand+1,c
  5449  001B1A  50F3               	movf	prodl,w,c
  5450  001B1C  261C               	addwf	___wmul@product+1,f,c
  5451  001B1E  5018               	movf	___wmul@multiplier+1,w,c
  5452  001B20  0219               	mulwf	___wmul@multiplicand,c
  5453  001B22  50F3               	movf	prodl,w,c
  5454  001B24  261C               	addwf	___wmul@product+1,f,c
  5455  001B26  C01B  F017         	movff	___wmul@product,?___wmul
  5456  001B2A  C01C  F018         	movff	___wmul@product+1,?___wmul+1
  5457  001B2E  0012               	return	
  5458  001B30                     __end_of___wmul:
  5459                           	opt stack 0
  5460                           tblptru	equ	0xFF8
  5461                           tblptrh	equ	0xFF7
  5462                           tblptrl	equ	0xFF6
  5463                           tablat	equ	0xFF5
  5464                           prodh	equ	0xFF4
  5465                           prodl	equ	0xFF3
  5466                           postinc0	equ	0xFEE
  5467                           wreg	equ	0xFE8
  5468                           indf1	equ	0xFE7
  5469                           postdec1	equ	0xFE5
  5470                           plusw1	equ	0xFE3
  5471                           fsr1h	equ	0xFE2
  5472                           fsr1l	equ	0xFE1
  5473                           indf2	equ	0xFDF
  5474                           postinc2	equ	0xFDE
  5475                           plusw2	equ	0xFDB
  5476                           fsr2h	equ	0xFDA
  5477                           fsr2l	equ	0xFD9
  5478                           status	equ	0xFD8
  5479                           
  5480 ;; *************** function ___lwdiv *****************
  5481 ;; Defined at:
  5482 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;  dividend        2   15[COMRAM] unsigned int 
  5485 ;;  divisor         2   17[COMRAM] unsigned int 
  5486 ;; Auto vars:     Size  Location     Type
  5487 ;;  quotient        2   20[COMRAM] unsigned int 
  5488 ;;  counter         1   19[COMRAM] unsigned char 
  5489 ;; Return value:  Size  Location     Type
  5490 ;;                  2   15[COMRAM] unsigned int 
  5491 ;; Registers used:
  5492 ;;		wreg, status,2, status,0
  5493 ;; Tracked objects:
  5494 ;;		On entry : 0/0
  5495 ;;		On exit  : 0/0
  5496 ;;		Unchanged: 0/0
  5497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5498 ;;      Params:         4       0       0       0       0       0       0
  5499 ;;      Locals:         3       0       0       0       0       0       0
  5500 ;;      Temps:          0       0       0       0       0       0       0
  5501 ;;      Totals:         7       0       0       0       0       0       0
  5502 ;;Total ram usage:        7 bytes
  5503 ;; Hardware stack levels used:    1
  5504 ;; Hardware stack levels required when called:    1
  5505 ;; This function calls:
  5506 ;;		Nothing
  5507 ;; This function is called by:
  5508 ;;		_menu_progress_bar
  5509 ;;		_menu_seconds_to_mmss
  5510 ;; This function uses a non-reentrant model
  5511 ;;
  5512                           
  5513                           	psect	text8
  5514  001964                     __ptext8:
  5515                           	opt stack 0
  5516  001964                     ___lwdiv:
  5517                           	opt stack 27
  5518                           
  5519                           ;incstack = 0
  5520  001964  0E00               	movlw	0
  5521  001966  6E16               	movwf	___lwdiv@quotient+1,c
  5522  001968  0E00               	movlw	0
  5523  00196A  6E15               	movwf	___lwdiv@quotient,c
  5524  00196C  5012               	movf	___lwdiv@divisor,w,c
  5525  00196E  1013               	iorwf	___lwdiv@divisor+1,w,c
  5526  001970  B4D8               	btfsc	status,2,c
  5527  001972  D01C               	goto	l767
  5528  001974  0E01               	movlw	1
  5529  001976  6E14               	movwf	___lwdiv@counter,c
  5530  001978  D004               	goto	l3722
  5531  00197A                     l3720:
  5532  00197A  90D8               	bcf	status,0,c
  5533  00197C  3612               	rlcf	___lwdiv@divisor,f,c
  5534  00197E  3613               	rlcf	___lwdiv@divisor+1,f,c
  5535  001980  2A14               	incf	___lwdiv@counter,f,c
  5536  001982                     l3722:
  5537  001982  AE13               	btfss	___lwdiv@divisor+1,7,c
  5538  001984  D7FA               	goto	l3720
  5539  001986                     l3724:
  5540  001986  90D8               	bcf	status,0,c
  5541  001988  3615               	rlcf	___lwdiv@quotient,f,c
  5542  00198A  3616               	rlcf	___lwdiv@quotient+1,f,c
  5543  00198C  5012               	movf	___lwdiv@divisor,w,c
  5544  00198E  5C10               	subwf	___lwdiv@dividend,w,c
  5545  001990  5013               	movf	___lwdiv@divisor+1,w,c
  5546  001992  5811               	subwfb	___lwdiv@dividend+1,w,c
  5547  001994  A0D8               	btfss	status,0,c
  5548  001996  D005               	goto	l3732
  5549  001998  5012               	movf	___lwdiv@divisor,w,c
  5550  00199A  5E10               	subwf	___lwdiv@dividend,f,c
  5551  00199C  5013               	movf	___lwdiv@divisor+1,w,c
  5552  00199E  5A11               	subwfb	___lwdiv@dividend+1,f,c
  5553  0019A0  8015               	bsf	___lwdiv@quotient,0,c
  5554  0019A2                     l3732:
  5555  0019A2  90D8               	bcf	status,0,c
  5556  0019A4  3213               	rrcf	___lwdiv@divisor+1,f,c
  5557  0019A6  3212               	rrcf	___lwdiv@divisor,f,c
  5558  0019A8  2E14               	decfsz	___lwdiv@counter,f,c
  5559  0019AA  D7ED               	goto	l3724
  5560  0019AC                     l767:
  5561  0019AC  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
  5562  0019B0  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5563  0019B4  0012               	return		;funcret
  5564  0019B6                     __end_of___lwdiv:
  5565                           	opt stack 0
  5566                           tblptru	equ	0xFF8
  5567                           tblptrh	equ	0xFF7
  5568                           tblptrl	equ	0xFF6
  5569                           tablat	equ	0xFF5
  5570                           prodh	equ	0xFF4
  5571                           prodl	equ	0xFF3
  5572                           postinc0	equ	0xFEE
  5573                           wreg	equ	0xFE8
  5574                           indf1	equ	0xFE7
  5575                           postdec1	equ	0xFE5
  5576                           plusw1	equ	0xFE3
  5577                           fsr1h	equ	0xFE2
  5578                           fsr1l	equ	0xFE1
  5579                           indf2	equ	0xFDF
  5580                           postinc2	equ	0xFDE
  5581                           plusw2	equ	0xFDB
  5582                           fsr2h	equ	0xFDA
  5583                           fsr2l	equ	0xFD9
  5584                           status	equ	0xFD8
  5585                           
  5586 ;; *************** function _Lcd_Write_String *****************
  5587 ;; Defined at:
  5588 ;;		line 111 in file "lcd.h"
  5589 ;; Parameters:    Size  Location     Type
  5590 ;;  a               2   19[COMRAM] PTR unsigned char 
  5591 ;;		 -> STR_30(17), STR_29(6), STR_28(17), STR_27(17), 
  5592 ;;		 -> STR_26(17), STR_25(2), STR_24(5), STR_23(17), 
  5593 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
  5594 ;;		 -> STR_18(11), STR_17(6), STR_16(5), STR_15(17), 
  5595 ;;		 -> STR_14(17), STR_13(17), STR_12(17), STR_11(17), 
  5596 ;;		 -> STR_10(17), STR_9(17), STR_8(17), STR_7(17), 
  5597 ;;		 -> STR_6(17), STR_5(17), STR_4(17), STR_3(17), 
  5598 ;;		 -> STR_2(17), STR_1(2), RAM(1535), 
  5599 ;; Auto vars:     Size  Location     Type
  5600 ;;  i               2   23[COMRAM] int 
  5601 ;; Return value:  Size  Location     Type
  5602 ;;                  1    wreg      void 
  5603 ;; Registers used:
  5604 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5605 ;; Tracked objects:
  5606 ;;		On entry : 0/0
  5607 ;;		On exit  : 0/0
  5608 ;;		Unchanged: 0/0
  5609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5610 ;;      Params:         2       0       0       0       0       0       0
  5611 ;;      Locals:         2       0       0       0       0       0       0
  5612 ;;      Temps:          2       0       0       0       0       0       0
  5613 ;;      Totals:         6       0       0       0       0       0       0
  5614 ;;Total ram usage:        6 bytes
  5615 ;; Hardware stack levels used:    1
  5616 ;; Hardware stack levels required when called:    3
  5617 ;; This function calls:
  5618 ;;		_Lcd_Write_Char
  5619 ;; This function is called by:
  5620 ;;		_menu_progress_bar
  5621 ;;		_main
  5622 ;;		_start_routine
  5623 ;;		_running_display
  5624 ;;		_menu_animation_i2c
  5625 ;; This function uses a non-reentrant model
  5626 ;;
  5627                           
  5628                           	psect	text9
  5629  00182C                     __ptext9:
  5630                           	opt stack 0
  5631  00182C                     _Lcd_Write_String:
  5632                           	opt stack 25
  5633                           
  5634                           ;lcd.h: 113: int i;
  5635                           ;lcd.h: 114: for(i=0;a[i]!='\0';i++)
  5636                           
  5637                           ;incstack = 0
  5638  00182C  0E00               	movlw	0
  5639  00182E  6E19               	movwf	Lcd_Write_String@i+1,c
  5640  001830  0E00               	movlw	0
  5641  001832  6E18               	movwf	Lcd_Write_String@i,c
  5642  001834  D01A               	goto	l3618
  5643  001836                     l3614:
  5644                           
  5645                           ;lcd.h: 115: Lcd_Write_Char(a[i]);
  5646  001836  5018               	movf	Lcd_Write_String@i,w,c
  5647  001838  2414               	addwf	Lcd_Write_String@a,w,c
  5648  00183A  6E16               	movwf	??_Lcd_Write_String& (0+255),c
  5649  00183C  5019               	movf	Lcd_Write_String@i+1,w,c
  5650  00183E  2015               	addwfc	Lcd_Write_String@a+1,w,c
  5651  001840  6E17               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  5652  001842  C016  FFF6         	movff	??_Lcd_Write_String,tblptrl
  5653  001846  C017  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  5654  00184A  6AF8               	clrf	tblptru,c
  5655  00184C  0E05               	movlw	(high __ramtop+-1)
  5656  00184E  64F7               	cpfsgt	tblptrh,c
  5657  001850  D003               	bra	u3217
  5658  001852  0008               	tblrd		*
  5659  001854  50F5               	movf	tablat,w,c
  5660  001856  D005               	bra	u3210
  5661  001858                     u3217:
  5662  001858  CFF6 FFE9          	movff	tblptrl,fsr0l
  5663  00185C  CFF7 FFEA          	movff	tblptrh,fsr0h
  5664  001860  50EF               	movf	indf0,w,c
  5665  001862                     u3210:
  5666  001862  EC3F  F00D         	call	_Lcd_Write_Char
  5667  001866  4A18               	infsnz	Lcd_Write_String@i,f,c
  5668  001868  2A19               	incf	Lcd_Write_String@i+1,f,c
  5669  00186A                     l3618:
  5670  00186A  5018               	movf	Lcd_Write_String@i,w,c
  5671  00186C  2414               	addwf	Lcd_Write_String@a,w,c
  5672  00186E  6E16               	movwf	??_Lcd_Write_String& (0+255),c
  5673  001870  5019               	movf	Lcd_Write_String@i+1,w,c
  5674  001872  2015               	addwfc	Lcd_Write_String@a+1,w,c
  5675  001874  6E17               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  5676  001876  C016  FFF6         	movff	??_Lcd_Write_String,tblptrl
  5677  00187A  C017  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  5678  00187E  6AF8               	clrf	tblptru,c
  5679  001880  0E05               	movlw	(high __ramtop+-1)
  5680  001882  64F7               	cpfsgt	tblptrh,c
  5681  001884  D003               	bra	u3227
  5682  001886  0008               	tblrd		*
  5683  001888  50F5               	movf	tablat,w,c
  5684  00188A  D005               	bra	u3220
  5685  00188C                     u3227:
  5686  00188C  CFF6 FFE9          	movff	tblptrl,fsr0l
  5687  001890  CFF7 FFEA          	movff	tblptrh,fsr0h
  5688  001894  50EF               	movf	indf0,w,c
  5689  001896                     u3220:
  5690  001896  0900               	iorlw	0
  5691  001898  B4D8               	btfsc	status,2,c
  5692  00189A  0012               	return	
  5693  00189C  D7CC               	goto	l3614
  5694  00189E                     __end_of_Lcd_Write_String:
  5695                           	opt stack 0
  5696                           tblptru	equ	0xFF8
  5697                           tblptrh	equ	0xFF7
  5698                           tblptrl	equ	0xFF6
  5699                           tablat	equ	0xFF5
  5700                           prodh	equ	0xFF4
  5701                           prodl	equ	0xFF3
  5702                           indf0	equ	0xFEF
  5703                           postinc0	equ	0xFEE
  5704                           fsr0h	equ	0xFEA
  5705                           fsr0l	equ	0xFE9
  5706                           wreg	equ	0xFE8
  5707                           indf1	equ	0xFE7
  5708                           postdec1	equ	0xFE5
  5709                           plusw1	equ	0xFE3
  5710                           fsr1h	equ	0xFE2
  5711                           fsr1l	equ	0xFE1
  5712                           indf2	equ	0xFDF
  5713                           postinc2	equ	0xFDE
  5714                           plusw2	equ	0xFDB
  5715                           fsr2h	equ	0xFDA
  5716                           fsr2l	equ	0xFD9
  5717                           status	equ	0xFD8
  5718                           
  5719 ;; *************** function _Lcd_Write_Char *****************
  5720 ;; Defined at:
  5721 ;;		line 95 in file "lcd.h"
  5722 ;; Parameters:    Size  Location     Type
  5723 ;;  a               1    wreg     unsigned char 
  5724 ;; Auto vars:     Size  Location     Type
  5725 ;;  a               1   18[COMRAM] unsigned char 
  5726 ;;  y               1   17[COMRAM] unsigned char 
  5727 ;;  temp            1   16[COMRAM] unsigned char 
  5728 ;; Return value:  Size  Location     Type
  5729 ;;                  1    wreg      void 
  5730 ;; Registers used:
  5731 ;;		wreg, status,2, status,0, cstack
  5732 ;; Tracked objects:
  5733 ;;		On entry : 0/0
  5734 ;;		On exit  : 0/0
  5735 ;;		Unchanged: 0/0
  5736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5737 ;;      Params:         0       0       0       0       0       0       0
  5738 ;;      Locals:         3       0       0       0       0       0       0
  5739 ;;      Temps:          0       0       0       0       0       0       0
  5740 ;;      Totals:         3       0       0       0       0       0       0
  5741 ;;Total ram usage:        3 bytes
  5742 ;; Hardware stack levels used:    1
  5743 ;; Hardware stack levels required when called:    2
  5744 ;; This function calls:
  5745 ;;		_Lcd_Port
  5746 ;; This function is called by:
  5747 ;;		_Lcd_Write_String
  5748 ;;		_menu_progress_bar
  5749 ;;		_main
  5750 ;;		_start_routine
  5751 ;;		_running_display
  5752 ;;		_menu_main
  5753 ;; This function uses a non-reentrant model
  5754 ;;
  5755                           
  5756                           	psect	text10
  5757  001A7E                     __ptext10:
  5758                           	opt stack 0
  5759  001A7E                     _Lcd_Write_Char:
  5760                           	opt stack 25
  5761                           
  5762                           ;incstack = 0
  5763                           ;Lcd_Write_Char@a stored from wreg
  5764  001A7E  6E13               	movwf	Lcd_Write_Char@a,c
  5765                           
  5766                           ;lcd.h: 97: char temp,y;
  5767                           ;lcd.h: 98: temp = a&0x0F;
  5768  001A80  5013               	movf	Lcd_Write_Char@a,w,c
  5769  001A82  0B0F               	andlw	15
  5770  001A84  6E11               	movwf	Lcd_Write_Char@temp,c
  5771                           
  5772                           ;lcd.h: 99: y = a&0xF0;
  5773  001A86  5013               	movf	Lcd_Write_Char@a,w,c
  5774  001A88  0BF0               	andlw	240
  5775  001A8A  6E12               	movwf	Lcd_Write_Char@y,c
  5776                           
  5777                           ;lcd.h: 100: PORTDbits.RD5 = 1;
  5778  001A8C  8A83               	bsf	3971,5,c	;volatile
  5779                           
  5780                           ;lcd.h: 101: Lcd_Port(y>>4);
  5781  001A8E  3812               	swapf	Lcd_Write_Char@y,w,c
  5782  001A90  0B0F               	andlw	15
  5783  001A92  EC5B  F00D         	call	_Lcd_Port
  5784                           
  5785                           ;lcd.h: 102: PORTDbits.RD4 = 1;
  5786  001A96  8883               	bsf	3971,4,c	;volatile
  5787                           
  5788                           ;lcd.h: 103: _delay((unsigned long)((40)*(16000000/4000000.0)));
  5789  001A98  0E35               	movlw	53
  5790  001A9A                     u4797:
  5791  001A9A  2EE8               	decfsz	wreg,f,c
  5792  001A9C  D7FE               	goto	u4797
  5793  001A9E  F000               	nop	
  5794                           
  5795                           ;lcd.h: 104: PORTDbits.RD4 = 0;
  5796  001AA0  9883               	bcf	3971,4,c	;volatile
  5797                           
  5798                           ;lcd.h: 105: Lcd_Port(temp);
  5799  001AA2  5011               	movf	Lcd_Write_Char@temp,w,c
  5800  001AA4  EC5B  F00D         	call	_Lcd_Port
  5801                           
  5802                           ;lcd.h: 106: PORTDbits.RD4 = 1;
  5803  001AA8  8883               	bsf	3971,4,c	;volatile
  5804                           
  5805                           ;lcd.h: 107: _delay((unsigned long)((40)*(16000000/4000000.0)));
  5806  001AAA  0E35               	movlw	53
  5807  001AAC                     u4807:
  5808  001AAC  2EE8               	decfsz	wreg,f,c
  5809  001AAE  D7FE               	goto	u4807
  5810  001AB0  F000               	nop	
  5811                           
  5812                           ;lcd.h: 108: PORTDbits.RD4 = 0;
  5813  001AB2  9883               	bcf	3971,4,c	;volatile
  5814  001AB4  0012               	return		;funcret
  5815  001AB6                     __end_of_Lcd_Write_Char:
  5816                           	opt stack 0
  5817                           tblptru	equ	0xFF8
  5818                           tblptrh	equ	0xFF7
  5819                           tblptrl	equ	0xFF6
  5820                           tablat	equ	0xFF5
  5821                           prodh	equ	0xFF4
  5822                           prodl	equ	0xFF3
  5823                           indf0	equ	0xFEF
  5824                           postinc0	equ	0xFEE
  5825                           fsr0h	equ	0xFEA
  5826                           fsr0l	equ	0xFE9
  5827                           wreg	equ	0xFE8
  5828                           indf1	equ	0xFE7
  5829                           postdec1	equ	0xFE5
  5830                           plusw1	equ	0xFE3
  5831                           fsr1h	equ	0xFE2
  5832                           fsr1l	equ	0xFE1
  5833                           indf2	equ	0xFDF
  5834                           postinc2	equ	0xFDE
  5835                           plusw2	equ	0xFDB
  5836                           fsr2h	equ	0xFDA
  5837                           fsr2l	equ	0xFD9
  5838                           status	equ	0xFD8
  5839                           
  5840 ;; *************** function _Lcd_Set_Cursor *****************
  5841 ;; Defined at:
  5842 ;;		line 55 in file "lcd.h"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;  a               1    wreg     unsigned char 
  5845 ;;  b               1   17[COMRAM] unsigned char 
  5846 ;; Auto vars:     Size  Location     Type
  5847 ;;  a               1   18[COMRAM] unsigned char 
  5848 ;;  temp            1   21[COMRAM] unsigned char 
  5849 ;;  y               1   20[COMRAM] unsigned char 
  5850 ;;  z               1   19[COMRAM] unsigned char 
  5851 ;; Return value:  Size  Location     Type
  5852 ;;                  1    wreg      void 
  5853 ;; Registers used:
  5854 ;;		wreg, status,2, status,0, cstack
  5855 ;; Tracked objects:
  5856 ;;		On entry : 0/0
  5857 ;;		On exit  : 0/0
  5858 ;;		Unchanged: 0/0
  5859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5860 ;;      Params:         1       0       0       0       0       0       0
  5861 ;;      Locals:         4       0       0       0       0       0       0
  5862 ;;      Temps:          0       0       0       0       0       0       0
  5863 ;;      Totals:         5       0       0       0       0       0       0
  5864 ;;Total ram usage:        5 bytes
  5865 ;; Hardware stack levels used:    1
  5866 ;; Hardware stack levels required when called:    3
  5867 ;; This function calls:
  5868 ;;		_Lcd_Cmd
  5869 ;; This function is called by:
  5870 ;;		_menu_progress_bar
  5871 ;;		_main
  5872 ;;		_start_routine
  5873 ;;		_running_display
  5874 ;;		_menu_main
  5875 ;;		_menu_animation_i2c
  5876 ;; This function uses a non-reentrant model
  5877 ;;
  5878                           
  5879                           	psect	text11
  5880  0019B6                     __ptext11:
  5881                           	opt stack 0
  5882  0019B6                     _Lcd_Set_Cursor:
  5883                           	opt stack 25
  5884                           
  5885                           ;incstack = 0
  5886                           ;Lcd_Set_Cursor@a stored from wreg
  5887  0019B6  6E13               	movwf	Lcd_Set_Cursor@a,c
  5888                           
  5889                           ;lcd.h: 57: char temp,z,y;
  5890                           ;lcd.h: 58: if(a == 1)
  5891  0019B8  0413               	decf	Lcd_Set_Cursor@a,w,c
  5892  0019BA  A4D8               	btfss	status,2,c
  5893  0019BC  D010               	goto	l3604
  5894                           
  5895                           ;lcd.h: 59: {
  5896                           ;lcd.h: 60: temp = 0x80 + b - 1;
  5897  0019BE  5012               	movf	Lcd_Set_Cursor@b,w,c
  5898  0019C0  0F7F               	addlw	127
  5899  0019C2  6E16               	movwf	Lcd_Set_Cursor@temp,c
  5900                           
  5901                           ;lcd.h: 61: z = temp>>4;
  5902  0019C4  3816               	swapf	Lcd_Set_Cursor@temp,w,c
  5903  0019C6  0B0F               	andlw	15
  5904  0019C8  6E14               	movwf	Lcd_Set_Cursor@z,c
  5905                           
  5906                           ;lcd.h: 62: y = temp & 0x0F;
  5907  0019CA  5016               	movf	Lcd_Set_Cursor@temp,w,c
  5908  0019CC  0B0F               	andlw	15
  5909  0019CE  6E15               	movwf	Lcd_Set_Cursor@y,c
  5910                           
  5911                           ;lcd.h: 63: Lcd_Cmd(z);
  5912  0019D0  5014               	movf	Lcd_Set_Cursor@z,w,c
  5913  0019D2  ECCA  F00D         	call	_Lcd_Cmd
  5914                           
  5915                           ;lcd.h: 64: Lcd_Cmd(y);
  5916  0019D6  5015               	movf	Lcd_Set_Cursor@y,w,c
  5917  0019D8  ECCA  F00D         	call	_Lcd_Cmd
  5918                           
  5919                           ;lcd.h: 65: }
  5920  0019DC  0012               	return	
  5921  0019DE                     l3604:
  5922                           
  5923                           ;lcd.h: 66: else if(a == 2)
  5924  0019DE  0E02               	movlw	2
  5925  0019E0  1813               	xorwf	Lcd_Set_Cursor@a,w,c
  5926  0019E2  A4D8               	btfss	status,2,c
  5927  0019E4  0012               	return	
  5928                           
  5929                           ;lcd.h: 67: {
  5930                           ;lcd.h: 68: temp = 0xC0 + b - 1;
  5931  0019E6  5012               	movf	Lcd_Set_Cursor@b,w,c
  5932  0019E8  0FBF               	addlw	191
  5933  0019EA  6E16               	movwf	Lcd_Set_Cursor@temp,c
  5934                           
  5935                           ;lcd.h: 69: z = temp>>4;
  5936  0019EC  3816               	swapf	Lcd_Set_Cursor@temp,w,c
  5937  0019EE  0B0F               	andlw	15
  5938  0019F0  6E14               	movwf	Lcd_Set_Cursor@z,c
  5939                           
  5940                           ;lcd.h: 70: y = temp & 0x0F;
  5941  0019F2  5016               	movf	Lcd_Set_Cursor@temp,w,c
  5942  0019F4  0B0F               	andlw	15
  5943  0019F6  6E15               	movwf	Lcd_Set_Cursor@y,c
  5944                           
  5945                           ;lcd.h: 71: Lcd_Cmd(z);
  5946  0019F8  5014               	movf	Lcd_Set_Cursor@z,w,c
  5947  0019FA  ECCA  F00D         	call	_Lcd_Cmd
  5948                           
  5949                           ;lcd.h: 72: Lcd_Cmd(y);
  5950  0019FE  5015               	movf	Lcd_Set_Cursor@y,w,c
  5951  001A00  ECCA  F00D         	call	_Lcd_Cmd
  5952  001A04  0012               	return	
  5953  001A06                     __end_of_Lcd_Set_Cursor:
  5954                           	opt stack 0
  5955                           tblptru	equ	0xFF8
  5956                           tblptrh	equ	0xFF7
  5957                           tblptrl	equ	0xFF6
  5958                           tablat	equ	0xFF5
  5959                           prodh	equ	0xFF4
  5960                           prodl	equ	0xFF3
  5961                           indf0	equ	0xFEF
  5962                           postinc0	equ	0xFEE
  5963                           fsr0h	equ	0xFEA
  5964                           fsr0l	equ	0xFE9
  5965                           wreg	equ	0xFE8
  5966                           indf1	equ	0xFE7
  5967                           postdec1	equ	0xFE5
  5968                           plusw1	equ	0xFE3
  5969                           fsr1h	equ	0xFE2
  5970                           fsr1l	equ	0xFE1
  5971                           indf2	equ	0xFDF
  5972                           postinc2	equ	0xFDE
  5973                           plusw2	equ	0xFDB
  5974                           fsr2h	equ	0xFDA
  5975                           fsr2l	equ	0xFD9
  5976                           status	equ	0xFD8
  5977                           
  5978 ;; *************** function _Lcd_Clear *****************
  5979 ;; Defined at:
  5980 ;;		line 48 in file "lcd.h"
  5981 ;; Parameters:    Size  Location     Type
  5982 ;;		None
  5983 ;; Auto vars:     Size  Location     Type
  5984 ;;		None
  5985 ;; Return value:  Size  Location     Type
  5986 ;;                  1    wreg      void 
  5987 ;; Registers used:
  5988 ;;		wreg, status,2, cstack
  5989 ;; Tracked objects:
  5990 ;;		On entry : 0/0
  5991 ;;		On exit  : 0/0
  5992 ;;		Unchanged: 0/0
  5993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5994 ;;      Params:         0       0       0       0       0       0       0
  5995 ;;      Locals:         0       0       0       0       0       0       0
  5996 ;;      Temps:          1       0       0       0       0       0       0
  5997 ;;      Totals:         1       0       0       0       0       0       0
  5998 ;;Total ram usage:        1 bytes
  5999 ;; Hardware stack levels used:    1
  6000 ;; Hardware stack levels required when called:    3
  6001 ;; This function calls:
  6002 ;;		_Lcd_Cmd
  6003 ;; This function is called by:
  6004 ;;		_menu_progress_bar
  6005 ;;		_start_routine
  6006 ;;		_running_display
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010                           	psect	text12
  6011  001B54                     __ptext12:
  6012                           	opt stack 0
  6013  001B54                     _Lcd_Clear:
  6014                           	opt stack 25
  6015                           
  6016                           ;lcd.h: 50: Lcd_Cmd(0);
  6017                           
  6018                           ;incstack = 0
  6019  001B54  0E00               	movlw	0
  6020  001B56  ECCA  F00D         	call	_Lcd_Cmd
  6021                           
  6022                           ;lcd.h: 51: Lcd_Cmd(1);
  6023  001B5A  0E01               	movlw	1
  6024  001B5C  ECCA  F00D         	call	_Lcd_Cmd
  6025                           
  6026                           ;lcd.h: 52: _delay((unsigned long)((5)*(16000000/4000.0)));
  6027  001B60  0E1A               	movlw	26
  6028  001B62  6E12               	movwf	??_Lcd_Clear& (0+255),c
  6029  001B64  0EF8               	movlw	248
  6030  001B66                     u4817:
  6031  001B66  2EE8               	decfsz	wreg,f,c
  6032  001B68  D7FE               	goto	u4817
  6033  001B6A  2E12               	decfsz	??_Lcd_Clear& (0+255),f,c
  6034  001B6C  D7FC               	goto	u4817
  6035  001B6E  F000 F000          	nop2	
  6036  001B72  0012               	return		;funcret
  6037  001B74                     __end_of_Lcd_Clear:
  6038                           	opt stack 0
  6039                           tblptru	equ	0xFF8
  6040                           tblptrh	equ	0xFF7
  6041                           tblptrl	equ	0xFF6
  6042                           tablat	equ	0xFF5
  6043                           prodh	equ	0xFF4
  6044                           prodl	equ	0xFF3
  6045                           indf0	equ	0xFEF
  6046                           postinc0	equ	0xFEE
  6047                           fsr0h	equ	0xFEA
  6048                           fsr0l	equ	0xFE9
  6049                           wreg	equ	0xFE8
  6050                           indf1	equ	0xFE7
  6051                           postdec1	equ	0xFE5
  6052                           plusw1	equ	0xFE3
  6053                           fsr1h	equ	0xFE2
  6054                           fsr1l	equ	0xFE1
  6055                           indf2	equ	0xFDF
  6056                           postinc2	equ	0xFDE
  6057                           plusw2	equ	0xFDB
  6058                           fsr2h	equ	0xFDA
  6059                           fsr2l	equ	0xFD9
  6060                           status	equ	0xFD8
  6061                           
  6062 ;; *************** function ___awmod *****************
  6063 ;; Defined at:
  6064 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  6065 ;; Parameters:    Size  Location     Type
  6066 ;;  dividend        2   15[COMRAM] int 
  6067 ;;  divisor         2   17[COMRAM] int 
  6068 ;; Auto vars:     Size  Location     Type
  6069 ;;  sign            1   20[COMRAM] unsigned char 
  6070 ;;  counter         1   19[COMRAM] unsigned char 
  6071 ;; Return value:  Size  Location     Type
  6072 ;;                  2   15[COMRAM] int 
  6073 ;; Registers used:
  6074 ;;		wreg, status,2, status,0
  6075 ;; Tracked objects:
  6076 ;;		On entry : 0/0
  6077 ;;		On exit  : 0/0
  6078 ;;		Unchanged: 0/0
  6079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6080 ;;      Params:         4       0       0       0       0       0       0
  6081 ;;      Locals:         2       0       0       0       0       0       0
  6082 ;;      Temps:          0       0       0       0       0       0       0
  6083 ;;      Totals:         6       0       0       0       0       0       0
  6084 ;;Total ram usage:        6 bytes
  6085 ;; Hardware stack levels used:    1
  6086 ;; Hardware stack levels required when called:    1
  6087 ;; This function calls:
  6088 ;;		Nothing
  6089 ;; This function is called by:
  6090 ;;		_running_display
  6091 ;; This function uses a non-reentrant model
  6092 ;;
  6093                           
  6094                           	psect	text13
  6095  00189E                     __ptext13:
  6096                           	opt stack 0
  6097  00189E                     ___awmod:
  6098                           	opt stack 28
  6099                           
  6100                           ;incstack = 0
  6101  00189E  0E00               	movlw	0
  6102  0018A0  6E15               	movwf	___awmod@sign,c
  6103  0018A2  AE11               	btfss	___awmod@dividend+1,7,c
  6104  0018A4  D006               	goto	l3884
  6105  0018A6  6C10               	negf	___awmod@dividend,c
  6106  0018A8  1E11               	comf	___awmod@dividend+1,f,c
  6107  0018AA  B0D8               	btfsc	status,0,c
  6108  0018AC  2A11               	incf	___awmod@dividend+1,f,c
  6109  0018AE  0E01               	movlw	1
  6110  0018B0  6E15               	movwf	___awmod@sign,c
  6111  0018B2                     l3884:
  6112  0018B2  AE13               	btfss	___awmod@divisor+1,7,c
  6113  0018B4  D004               	goto	l3888
  6114  0018B6  6C12               	negf	___awmod@divisor,c
  6115  0018B8  1E13               	comf	___awmod@divisor+1,f,c
  6116  0018BA  B0D8               	btfsc	status,0,c
  6117  0018BC  2A13               	incf	___awmod@divisor+1,f,c
  6118  0018BE                     l3888:
  6119  0018BE  5012               	movf	___awmod@divisor,w,c
  6120  0018C0  1013               	iorwf	___awmod@divisor+1,w,c
  6121  0018C2  B4D8               	btfsc	status,2,c
  6122  0018C4  D018               	goto	l3904
  6123  0018C6  0E01               	movlw	1
  6124  0018C8  6E14               	movwf	___awmod@counter,c
  6125  0018CA  D004               	goto	l3894
  6126  0018CC                     l3892:
  6127  0018CC  90D8               	bcf	status,0,c
  6128  0018CE  3612               	rlcf	___awmod@divisor,f,c
  6129  0018D0  3613               	rlcf	___awmod@divisor+1,f,c
  6130  0018D2  2A14               	incf	___awmod@counter,f,c
  6131  0018D4                     l3894:
  6132  0018D4  AE13               	btfss	___awmod@divisor+1,7,c
  6133  0018D6  D7FA               	goto	l3892
  6134  0018D8                     l3896:
  6135  0018D8  5012               	movf	___awmod@divisor,w,c
  6136  0018DA  5C10               	subwf	___awmod@dividend,w,c
  6137  0018DC  5013               	movf	___awmod@divisor+1,w,c
  6138  0018DE  5811               	subwfb	___awmod@dividend+1,w,c
  6139  0018E0  A0D8               	btfss	status,0,c
  6140  0018E2  D004               	goto	l3900
  6141  0018E4  5012               	movf	___awmod@divisor,w,c
  6142  0018E6  5E10               	subwf	___awmod@dividend,f,c
  6143  0018E8  5013               	movf	___awmod@divisor+1,w,c
  6144  0018EA  5A11               	subwfb	___awmod@dividend+1,f,c
  6145  0018EC                     l3900:
  6146  0018EC  90D8               	bcf	status,0,c
  6147  0018EE  3213               	rrcf	___awmod@divisor+1,f,c
  6148  0018F0  3212               	rrcf	___awmod@divisor,f,c
  6149  0018F2  2E14               	decfsz	___awmod@counter,f,c
  6150  0018F4  D7F1               	goto	l3896
  6151  0018F6                     l3904:
  6152  0018F6  5015               	movf	___awmod@sign,w,c
  6153  0018F8  B4D8               	btfsc	status,2,c
  6154  0018FA  D004               	goto	l3908
  6155  0018FC  6C10               	negf	___awmod@dividend,c
  6156  0018FE  1E11               	comf	___awmod@dividend+1,f,c
  6157  001900  B0D8               	btfsc	status,0,c
  6158  001902  2A11               	incf	___awmod@dividend+1,f,c
  6159  001904                     l3908:
  6160  001904  C010  F010         	movff	___awmod@dividend,?___awmod
  6161  001908  C011  F011         	movff	___awmod@dividend+1,?___awmod+1
  6162  00190C  0012               	return	
  6163  00190E                     __end_of___awmod:
  6164                           	opt stack 0
  6165                           tblptru	equ	0xFF8
  6166                           tblptrh	equ	0xFF7
  6167                           tblptrl	equ	0xFF6
  6168                           tablat	equ	0xFF5
  6169                           prodh	equ	0xFF4
  6170                           prodl	equ	0xFF3
  6171                           indf0	equ	0xFEF
  6172                           postinc0	equ	0xFEE
  6173                           fsr0h	equ	0xFEA
  6174                           fsr0l	equ	0xFE9
  6175                           wreg	equ	0xFE8
  6176                           indf1	equ	0xFE7
  6177                           postdec1	equ	0xFE5
  6178                           plusw1	equ	0xFE3
  6179                           fsr1h	equ	0xFE2
  6180                           fsr1l	equ	0xFE1
  6181                           indf2	equ	0xFDF
  6182                           postinc2	equ	0xFDE
  6183                           plusw2	equ	0xFDB
  6184                           fsr2h	equ	0xFDA
  6185                           fsr2l	equ	0xFD9
  6186                           status	equ	0xFD8
  6187                           
  6188 ;; *************** function _mcu_initialise *****************
  6189 ;; Defined at:
  6190 ;;		line 238 in file "main.c"
  6191 ;; Parameters:    Size  Location     Type
  6192 ;;		None
  6193 ;; Auto vars:     Size  Location     Type
  6194 ;;		None
  6195 ;; Return value:  Size  Location     Type
  6196 ;;                  1    wreg      void 
  6197 ;; Registers used:
  6198 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6199 ;; Tracked objects:
  6200 ;;		On entry : 0/0
  6201 ;;		On exit  : 0/0
  6202 ;;		Unchanged: 0/0
  6203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6204 ;;      Params:         0       0       0       0       0       0       0
  6205 ;;      Locals:         0       0       0       0       0       0       0
  6206 ;;      Temps:          0       0       0       0       0       0       0
  6207 ;;      Totals:         0       0       0       0       0       0       0
  6208 ;;Total ram usage:        0 bytes
  6209 ;; Hardware stack levels used:    1
  6210 ;; Hardware stack levels required when called:    2
  6211 ;; This function calls:
  6212 ;;		_Eeprom_Read_Byte
  6213 ;; This function is called by:
  6214 ;;		_main
  6215 ;; This function uses a non-reentrant model
  6216 ;;
  6217                           
  6218                           	psect	text14
  6219  00190E                     __ptext14:
  6220                           	opt stack 0
  6221  00190E                     _mcu_initialise:
  6222                           	opt stack 28
  6223                           
  6224                           ;main.c: 241: I2C_ADDR = Eeprom_Read_Byte(EEP_I2C_ADDR);
  6225                           
  6226                           ;incstack = 0
  6227  00190E  0100               	movlb	0	; () banked
  6228  001910  51DC               	movf	_EEP_I2C_ADDR& (0+255),w,b
  6229  001912  ECD6  F00D         	call	_Eeprom_Read_Byte
  6230  001916  0100               	movlb	0	; () banked
  6231  001918  6FDE               	movwf	_I2C_ADDR& (0+255),b
  6232                           
  6233                           ; BSR set to: 0
  6234                           ;main.c: 242: Machine_ID = I2C_ADDR - 0x0F;
  6235  00191A  0100               	movlb	0	; () banked
  6236  00191C  51DE               	movf	_I2C_ADDR& (0+255),w,b
  6237  00191E  0FF1               	addlw	241
  6238  001920  0100               	movlb	0	; () banked
  6239  001922  6FDF               	movwf	_Machine_ID& (0+255),b
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;main.c: 245: OSCCON = 0x60;
  6243  001924  0E60               	movlw	96
  6244  001926  6ED3               	movwf	4051,c	;volatile
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;main.c: 246: OSCTUNEbits.PLLEN = 0;
  6248  001928  9C9B               	bcf	3995,6,c	;volatile
  6249                           
  6250                           ; BSR set to: 0
  6251                           ;main.c: 248: TRISA = 0x00;
  6252  00192A  0E00               	movlw	0
  6253  00192C  6E92               	movwf	3986,c	;volatile
  6254                           
  6255                           ; BSR set to: 0
  6256                           ;main.c: 249: TRISB = 0x01;
  6257  00192E  0E01               	movlw	1
  6258  001930  6E93               	movwf	3987,c	;volatile
  6259                           
  6260                           ; BSR set to: 0
  6261                           ;main.c: 250: TRISC = 0b00011000;
  6262  001932  0E18               	movlw	24
  6263  001934  6E94               	movwf	3988,c	;volatile
  6264                           
  6265                           ; BSR set to: 0
  6266                           ;main.c: 251: TRISD = 0b00000000;
  6267  001936  0E00               	movlw	0
  6268  001938  6E95               	movwf	3989,c	;volatile
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;main.c: 252: PORTD = 0b00000000;
  6272  00193A  0E00               	movlw	0
  6273  00193C  6E83               	movwf	3971,c	;volatile
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;main.c: 253: LATC = 0b00011000;
  6277  00193E  0E18               	movlw	24
  6278  001940  6E8B               	movwf	3979,c	;volatile
  6279                           
  6280                           ; BSR set to: 0
  6281                           ;main.c: 255: SSPADD = I2C_ADDR * 2;
  6282  001942  0100               	movlb	0	; () banked
  6283  001944  51DE               	movf	_I2C_ADDR& (0+255),w,b
  6284  001946  0D02               	mullw	2
  6285  001948  CFF3 FFC8          	movff	prodl,4040	;volatile
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;main.c: 256: SSPCON1 = 0x36;
  6289  00194C  0E36               	movlw	54
  6290  00194E  6EC6               	movwf	4038,c	;volatile
  6291                           
  6292                           ; BSR set to: 0
  6293                           ;main.c: 259: SSPSTAT = 0x00;
  6294  001950  0E00               	movlw	0
  6295  001952  6EC7               	movwf	4039,c	;volatile
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;main.c: 260: SSPCON2 = 0x01;
  6299  001954  0E01               	movlw	1
  6300  001956  6EC5               	movwf	4037,c	;volatile
  6301                           
  6302                           ; BSR set to: 0
  6303                           ;main.c: 262: PIR1bits.SSPIF = 0;
  6304  001958  969E               	bcf	3998,3,c	;volatile
  6305                           
  6306                           ; BSR set to: 0
  6307                           ;main.c: 263: PIE1bits.SSPIE = 1;
  6308  00195A  869D               	bsf	3997,3,c	;volatile
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;main.c: 264: INTCONbits.GIE_GIEH = 1;
  6312  00195C  8EF2               	bsf	intcon,7,c	;volatile
  6313                           
  6314                           ; BSR set to: 0
  6315                           ;main.c: 265: INTCONbits.PEIE_GIEL = 1;
  6316  00195E  8CF2               	bsf	intcon,6,c	;volatile
  6317                           
  6318                           ; BSR set to: 0
  6319                           ;main.c: 266: INTCONbits.RBIE = 0;
  6320  001960  96F2               	bcf	intcon,3,c	;volatile
  6321                           
  6322                           ; BSR set to: 0
  6323  001962  0012               	return		;funcret
  6324  001964                     __end_of_mcu_initialise:
  6325                           	opt stack 0
  6326                           tblptru	equ	0xFF8
  6327                           tblptrh	equ	0xFF7
  6328                           tblptrl	equ	0xFF6
  6329                           tablat	equ	0xFF5
  6330                           prodh	equ	0xFF4
  6331                           prodl	equ	0xFF3
  6332                           intcon	equ	0xFF2
  6333                           indf0	equ	0xFEF
  6334                           postinc0	equ	0xFEE
  6335                           fsr0h	equ	0xFEA
  6336                           fsr0l	equ	0xFE9
  6337                           wreg	equ	0xFE8
  6338                           indf1	equ	0xFE7
  6339                           postdec1	equ	0xFE5
  6340                           plusw1	equ	0xFE3
  6341                           fsr1h	equ	0xFE2
  6342                           fsr1l	equ	0xFE1
  6343                           indf2	equ	0xFDF
  6344                           postinc2	equ	0xFDE
  6345                           plusw2	equ	0xFDB
  6346                           fsr2h	equ	0xFDA
  6347                           fsr2l	equ	0xFD9
  6348                           status	equ	0xFD8
  6349                           
  6350 ;; *************** function _Eeprom_Read_Byte *****************
  6351 ;; Defined at:
  6352 ;;		line 20 in file "eeprom.h"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;  address         1    wreg     unsigned char 
  6355 ;; Auto vars:     Size  Location     Type
  6356 ;;  address         1   15[COMRAM] unsigned char 
  6357 ;; Return value:  Size  Location     Type
  6358 ;;                  1    wreg      unsigned char 
  6359 ;; Registers used:
  6360 ;;		wreg, status,2
  6361 ;; Tracked objects:
  6362 ;;		On entry : 0/0
  6363 ;;		On exit  : 0/0
  6364 ;;		Unchanged: 0/0
  6365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6366 ;;      Params:         0       0       0       0       0       0       0
  6367 ;;      Locals:         1       0       0       0       0       0       0
  6368 ;;      Temps:          0       0       0       0       0       0       0
  6369 ;;      Totals:         1       0       0       0       0       0       0
  6370 ;;Total ram usage:        1 bytes
  6371 ;; Hardware stack levels used:    1
  6372 ;; Hardware stack levels required when called:    1
  6373 ;; This function calls:
  6374 ;;		Nothing
  6375 ;; This function is called by:
  6376 ;;		_mcu_initialise
  6377 ;; This function uses a non-reentrant model
  6378 ;;
  6379                           
  6380                           	psect	text15
  6381  001BAC                     __ptext15:
  6382                           	opt stack 0
  6383  001BAC                     _Eeprom_Read_Byte:
  6384                           	opt stack 28
  6385                           
  6386                           ; BSR set to: 0
  6387                           ;incstack = 0
  6388                           ;Eeprom_Read_Byte@address stored from wreg
  6389  001BAC  6E10               	movwf	Eeprom_Read_Byte@address,c
  6390                           
  6391                           ;eeprom.h: 24: EEADR = (unsigned char)address;
  6392  001BAE  C010  FFA9         	movff	Eeprom_Read_Byte@address,4009	;volatile
  6393                           
  6394                           ;eeprom.h: 26: EECON1bits.EEPGD = 0;
  6395  001BB2  9EA6               	bcf	4006,7,c	;volatile
  6396                           
  6397                           ;eeprom.h: 27: EECON1bits.CFGS = 0;
  6398  001BB4  9CA6               	bcf	4006,6,c	;volatile
  6399                           
  6400                           ;eeprom.h: 28: EECON1bits.RD = 1;
  6401  001BB6  80A6               	bsf	4006,0,c	;volatile
  6402  001BB8                     l151:
  6403  001BB8  B0A6               	btfsc	4006,0,c	;volatile
  6404  001BBA  D7FE               	goto	l151
  6405                           
  6406                           ;eeprom.h: 34: return EEDATA;
  6407  001BBC  50A8               	movf	4008,w,c	;volatile
  6408  001BBE  0012               	return		;funcret
  6409  001BC0                     __end_of_Eeprom_Read_Byte:
  6410                           	opt stack 0
  6411                           tblptru	equ	0xFF8
  6412                           tblptrh	equ	0xFF7
  6413                           tblptrl	equ	0xFF6
  6414                           tablat	equ	0xFF5
  6415                           prodh	equ	0xFF4
  6416                           prodl	equ	0xFF3
  6417                           intcon	equ	0xFF2
  6418                           indf0	equ	0xFEF
  6419                           postinc0	equ	0xFEE
  6420                           fsr0h	equ	0xFEA
  6421                           fsr0l	equ	0xFE9
  6422                           wreg	equ	0xFE8
  6423                           indf1	equ	0xFE7
  6424                           postdec1	equ	0xFE5
  6425                           plusw1	equ	0xFE3
  6426                           fsr1h	equ	0xFE2
  6427                           fsr1l	equ	0xFE1
  6428                           indf2	equ	0xFDF
  6429                           postinc2	equ	0xFDE
  6430                           plusw2	equ	0xFDB
  6431                           fsr2h	equ	0xFDA
  6432                           fsr2l	equ	0xFD9
  6433                           status	equ	0xFD8
  6434                           
  6435 ;; *************** function _load_i2c_registers *****************
  6436 ;; Defined at:
  6437 ;;		line 302 in file "main.c"
  6438 ;; Parameters:    Size  Location     Type
  6439 ;;		None
  6440 ;; Auto vars:     Size  Location     Type
  6441 ;;  i               2   29[COMRAM] int 
  6442 ;;  i               2   33[COMRAM] int 
  6443 ;;  i               2   31[COMRAM] int 
  6444 ;;  checksum        2   27[COMRAM] int 
  6445 ;; Return value:  Size  Location     Type
  6446 ;;                  1    wreg      void 
  6447 ;; Registers used:
  6448 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6454 ;;      Params:         0       0       0       0       0       0       0
  6455 ;;      Locals:         8       0       0       0       0       0       0
  6456 ;;      Temps:          4       0       0       0       0       0       0
  6457 ;;      Totals:        12       0       0       0       0       0       0
  6458 ;;Total ram usage:       12 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:    2
  6461 ;; This function calls:
  6462 ;;		___awdiv
  6463 ;; This function is called by:
  6464 ;;		_main
  6465 ;; This function uses a non-reentrant model
  6466 ;;
  6467                           
  6468                           	psect	text16
  6469  001522                     __ptext16:
  6470                           	opt stack 0
  6471  001522                     _load_i2c_registers:
  6472                           	opt stack 28
  6473                           
  6474                           ;main.c: 311: for (int i = 0; i < 9; i++)
  6475                           
  6476                           ;incstack = 0
  6477  001522  0E00               	movlw	0
  6478  001524  6E21               	movwf	load_i2c_registers@i+1,c
  6479  001526  0E00               	movlw	0
  6480  001528  6E20               	movwf	load_i2c_registers@i,c
  6481  00152A                     l4264:
  6482  00152A  BE21               	btfsc	load_i2c_registers@i+1,7,c
  6483  00152C  D006               	goto	l4268
  6484  00152E  5021               	movf	load_i2c_registers@i+1,w,c
  6485  001530  E115               	bnz	l4274
  6486  001532  0E09               	movlw	9
  6487  001534  5C20               	subwf	load_i2c_registers@i,w,c
  6488  001536  B0D8               	btfsc	status,0,c
  6489  001538  D011               	goto	l4274
  6490  00153A                     l4268:
  6491                           
  6492                           ;main.c: 312: i2c_r_reg[i] = current_user[i];
  6493  00153A  0ED3               	movlw	low _current_user
  6494  00153C  2420               	addwf	load_i2c_registers@i,w,c
  6495  00153E  6ED9               	movwf	fsr2l,c
  6496  001540  0E00               	movlw	high _current_user
  6497  001542  2021               	addwfc	load_i2c_registers@i+1,w,c
  6498  001544  6EDA               	movwf	fsr2h,c
  6499  001546  0E00               	movlw	low _i2c_r_reg
  6500  001548  2420               	addwf	load_i2c_registers@i,w,c
  6501  00154A  6EE1               	movwf	fsr1l,c
  6502  00154C  0E01               	movlw	high _i2c_r_reg
  6503  00154E  2021               	addwfc	load_i2c_registers@i+1,w,c
  6504  001550  6EE2               	movwf	fsr1h,c
  6505  001552  CFDF FFE7          	movff	indf2,indf1
  6506  001556  4A20               	infsnz	load_i2c_registers@i,f,c
  6507  001558  2A21               	incf	load_i2c_registers@i+1,f,c
  6508  00155A  D7E7               	goto	l4264
  6509  00155C                     l4274:
  6510                           
  6511                           ;main.c: 314: for (int i = 9; i < 18; i++)
  6512  00155C  0E00               	movlw	0
  6513  00155E  6E23               	movwf	load_i2c_registers@i_839+1,c
  6514  001560  0E09               	movlw	9
  6515  001562  6E22               	movwf	load_i2c_registers@i_839,c
  6516  001564                     l4276:
  6517  001564  BE23               	btfsc	load_i2c_registers@i_839+1,7,c
  6518  001566  D006               	goto	l4280
  6519  001568  5023               	movf	load_i2c_registers@i_839+1,w,c
  6520  00156A  E121               	bnz	l4286
  6521  00156C  0E12               	movlw	18
  6522  00156E  5C22               	subwf	load_i2c_registers@i_839,w,c
  6523  001570  B0D8               	btfsc	status,0,c
  6524  001572  D01D               	goto	l4286
  6525  001574                     l4280:
  6526                           
  6527                           ;main.c: 315: i2c_r_reg[i] = current_pin[i - 9];
  6528  001574  0EF7               	movlw	247
  6529  001576  6E18               	movwf	??_load_i2c_registers& (0+255),c
  6530  001578  0EFF               	movlw	255
  6531  00157A  6E19               	movwf	(??_load_i2c_registers+1)& (0+255),c
  6532  00157C  C022  F01A         	movff	load_i2c_registers@i_839,??_load_i2c_registers+2
  6533  001580  C023  F01B         	movff	load_i2c_registers@i_839+1,??_load_i2c_registers+3
  6534  001584  5018               	movf	??_load_i2c_registers,w,c
  6535  001586  261A               	addwf	??_load_i2c_registers+2,f,c
  6536  001588  5019               	movf	??_load_i2c_registers+1,w,c
  6537  00158A  221B               	addwfc	??_load_i2c_registers+3,f,c
  6538  00158C  0ECA               	movlw	low _current_pin
  6539  00158E  241A               	addwf	??_load_i2c_registers+2,w,c
  6540  001590  6ED9               	movwf	fsr2l,c
  6541  001592  0E00               	movlw	high _current_pin
  6542  001594  201B               	addwfc	??_load_i2c_registers+3,w,c
  6543  001596  6EDA               	movwf	fsr2h,c
  6544  001598  0E00               	movlw	low _i2c_r_reg
  6545  00159A  2422               	addwf	load_i2c_registers@i_839,w,c
  6546  00159C  6EE1               	movwf	fsr1l,c
  6547  00159E  0E01               	movlw	high _i2c_r_reg
  6548  0015A0  2023               	addwfc	load_i2c_registers@i_839+1,w,c
  6549  0015A2  6EE2               	movwf	fsr1h,c
  6550  0015A4  CFDF FFE7          	movff	indf2,indf1
  6551  0015A8  4A22               	infsnz	load_i2c_registers@i_839,f,c
  6552  0015AA  2A23               	incf	load_i2c_registers@i_839+1,f,c
  6553  0015AC  D7DB               	goto	l4276
  6554  0015AE                     l4286:
  6555                           
  6556                           ;main.c: 318: int checksum = 0x00;
  6557  0015AE  0E00               	movlw	0
  6558  0015B0  6E1D               	movwf	load_i2c_registers@checksum+1,c
  6559  0015B2  0E00               	movlw	0
  6560  0015B4  6E1C               	movwf	load_i2c_registers@checksum,c
  6561                           
  6562                           ;main.c: 319: for (int i = 0; i < 31; i++)
  6563  0015B6  0E00               	movlw	0
  6564  0015B8  6E1F               	movwf	load_i2c_registers@i_841+1,c
  6565  0015BA  0E00               	movlw	0
  6566  0015BC  6E1E               	movwf	load_i2c_registers@i_841,c
  6567  0015BE                     l4288:
  6568  0015BE  BE1F               	btfsc	load_i2c_registers@i_841+1,7,c
  6569  0015C0  D006               	goto	l4292
  6570  0015C2  501F               	movf	load_i2c_registers@i_841+1,w,c
  6571  0015C4  E113               	bnz	l4298
  6572  0015C6  0E1F               	movlw	31
  6573  0015C8  5C1E               	subwf	load_i2c_registers@i_841,w,c
  6574  0015CA  B0D8               	btfsc	status,0,c
  6575  0015CC  D00F               	goto	l4298
  6576  0015CE                     l4292:
  6577                           
  6578                           ;main.c: 320: {
  6579                           ;main.c: 321: checksum += i2c_r_reg[i];
  6580  0015CE  0E00               	movlw	low _i2c_r_reg
  6581  0015D0  241E               	addwf	load_i2c_registers@i_841,w,c
  6582  0015D2  6ED9               	movwf	fsr2l,c
  6583  0015D4  0E01               	movlw	high _i2c_r_reg
  6584  0015D6  201F               	addwfc	load_i2c_registers@i_841+1,w,c
  6585  0015D8  6EDA               	movwf	fsr2h,c
  6586  0015DA  50DF               	movf	indf2,w,c
  6587  0015DC  6E18               	movwf	??_load_i2c_registers& (0+255),c
  6588  0015DE  5018               	movf	??_load_i2c_registers,w,c
  6589  0015E0  261C               	addwf	load_i2c_registers@checksum,f,c
  6590  0015E2  0E00               	movlw	0
  6591  0015E4  221D               	addwfc	load_i2c_registers@checksum+1,f,c
  6592  0015E6  4A1E               	infsnz	load_i2c_registers@i_841,f,c
  6593  0015E8  2A1F               	incf	load_i2c_registers@i_841+1,f,c
  6594  0015EA  D7E9               	goto	l4288
  6595  0015EC                     l4298:
  6596                           
  6597                           ;main.c: 322: }
  6598                           ;main.c: 323: checksum /= 32;
  6599  0015EC  C01C  F010         	movff	load_i2c_registers@checksum,___awdiv@dividend
  6600  0015F0  C01D  F011         	movff	load_i2c_registers@checksum+1,___awdiv@dividend+1
  6601  0015F4  0E00               	movlw	0
  6602  0015F6  6E13               	movwf	___awdiv@divisor+1,c
  6603  0015F8  0E20               	movlw	32
  6604  0015FA  6E12               	movwf	___awdiv@divisor,c
  6605  0015FC  EC59  F00B         	call	___awdiv	;wreg free
  6606  001600  C010  F01C         	movff	?___awdiv,load_i2c_registers@checksum
  6607  001604  C011  F01D         	movff	?___awdiv+1,load_i2c_registers@checksum+1
  6608                           
  6609                           ;main.c: 324: i2c_r_reg[31] = checksum;
  6610  001608  C01C  F11F         	movff	load_i2c_registers@checksum,_i2c_r_reg+31	;volatile
  6611  00160C  0012               	return		;funcret
  6612  00160E                     __end_of_load_i2c_registers:
  6613                           	opt stack 0
  6614                           tblptru	equ	0xFF8
  6615                           tblptrh	equ	0xFF7
  6616                           tblptrl	equ	0xFF6
  6617                           tablat	equ	0xFF5
  6618                           prodh	equ	0xFF4
  6619                           prodl	equ	0xFF3
  6620                           intcon	equ	0xFF2
  6621                           indf0	equ	0xFEF
  6622                           postinc0	equ	0xFEE
  6623                           fsr0h	equ	0xFEA
  6624                           fsr0l	equ	0xFE9
  6625                           wreg	equ	0xFE8
  6626                           indf1	equ	0xFE7
  6627                           postdec1	equ	0xFE5
  6628                           plusw1	equ	0xFE3
  6629                           fsr1h	equ	0xFE2
  6630                           fsr1l	equ	0xFE1
  6631                           indf2	equ	0xFDF
  6632                           postinc2	equ	0xFDE
  6633                           plusw2	equ	0xFDB
  6634                           fsr2h	equ	0xFDA
  6635                           fsr2l	equ	0xFD9
  6636                           status	equ	0xFD8
  6637                           
  6638 ;; *************** function ___awdiv *****************
  6639 ;; Defined at:
  6640 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  6641 ;; Parameters:    Size  Location     Type
  6642 ;;  dividend        2   15[COMRAM] int 
  6643 ;;  divisor         2   17[COMRAM] int 
  6644 ;; Auto vars:     Size  Location     Type
  6645 ;;  quotient        2   21[COMRAM] int 
  6646 ;;  sign            1   20[COMRAM] unsigned char 
  6647 ;;  counter         1   19[COMRAM] unsigned char 
  6648 ;; Return value:  Size  Location     Type
  6649 ;;                  2   15[COMRAM] int 
  6650 ;; Registers used:
  6651 ;;		wreg, status,2, status,0
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6657 ;;      Params:         4       0       0       0       0       0       0
  6658 ;;      Locals:         4       0       0       0       0       0       0
  6659 ;;      Temps:          0       0       0       0       0       0       0
  6660 ;;      Totals:         8       0       0       0       0       0       0
  6661 ;;Total ram usage:        8 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:    1
  6664 ;; This function calls:
  6665 ;;		Nothing
  6666 ;; This function is called by:
  6667 ;;		_load_i2c_registers
  6668 ;;		_start_routine
  6669 ;;		_running_display
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           	psect	text17
  6674  0016B2                     __ptext17:
  6675                           	opt stack 0
  6676  0016B2                     ___awdiv:
  6677                           	opt stack 28
  6678                           
  6679                           ;incstack = 0
  6680  0016B2  0E00               	movlw	0
  6681  0016B4  6E15               	movwf	___awdiv@sign,c
  6682  0016B6  AE13               	btfss	___awdiv@divisor+1,7,c
  6683  0016B8  D006               	goto	l3840
  6684  0016BA  6C12               	negf	___awdiv@divisor,c
  6685  0016BC  1E13               	comf	___awdiv@divisor+1,f,c
  6686  0016BE  B0D8               	btfsc	status,0,c
  6687  0016C0  2A13               	incf	___awdiv@divisor+1,f,c
  6688  0016C2  0E01               	movlw	1
  6689  0016C4  6E15               	movwf	___awdiv@sign,c
  6690  0016C6                     l3840:
  6691  0016C6  AE11               	btfss	___awdiv@dividend+1,7,c
  6692  0016C8  D006               	goto	l3846
  6693  0016CA  6C10               	negf	___awdiv@dividend,c
  6694  0016CC  1E11               	comf	___awdiv@dividend+1,f,c
  6695  0016CE  B0D8               	btfsc	status,0,c
  6696  0016D0  2A11               	incf	___awdiv@dividend+1,f,c
  6697  0016D2  0E01               	movlw	1
  6698  0016D4  1A15               	xorwf	___awdiv@sign,f,c
  6699  0016D6                     l3846:
  6700  0016D6  0E00               	movlw	0
  6701  0016D8  6E17               	movwf	___awdiv@quotient+1,c
  6702  0016DA  0E00               	movlw	0
  6703  0016DC  6E16               	movwf	___awdiv@quotient,c
  6704  0016DE  5012               	movf	___awdiv@divisor,w,c
  6705  0016E0  1013               	iorwf	___awdiv@divisor+1,w,c
  6706  0016E2  B4D8               	btfsc	status,2,c
  6707  0016E4  D01C               	goto	l3868
  6708  0016E6  0E01               	movlw	1
  6709  0016E8  6E14               	movwf	___awdiv@counter,c
  6710  0016EA  D004               	goto	l3854
  6711  0016EC                     l3852:
  6712  0016EC  90D8               	bcf	status,0,c
  6713  0016EE  3612               	rlcf	___awdiv@divisor,f,c
  6714  0016F0  3613               	rlcf	___awdiv@divisor+1,f,c
  6715  0016F2  2A14               	incf	___awdiv@counter,f,c
  6716  0016F4                     l3854:
  6717  0016F4  AE13               	btfss	___awdiv@divisor+1,7,c
  6718  0016F6  D7FA               	goto	l3852
  6719  0016F8                     l3856:
  6720  0016F8  90D8               	bcf	status,0,c
  6721  0016FA  3616               	rlcf	___awdiv@quotient,f,c
  6722  0016FC  3617               	rlcf	___awdiv@quotient+1,f,c
  6723  0016FE  5012               	movf	___awdiv@divisor,w,c
  6724  001700  5C10               	subwf	___awdiv@dividend,w,c
  6725  001702  5013               	movf	___awdiv@divisor+1,w,c
  6726  001704  5811               	subwfb	___awdiv@dividend+1,w,c
  6727  001706  A0D8               	btfss	status,0,c
  6728  001708  D005               	goto	l3864
  6729  00170A  5012               	movf	___awdiv@divisor,w,c
  6730  00170C  5E10               	subwf	___awdiv@dividend,f,c
  6731  00170E  5013               	movf	___awdiv@divisor+1,w,c
  6732  001710  5A11               	subwfb	___awdiv@dividend+1,f,c
  6733  001712  8016               	bsf	___awdiv@quotient,0,c
  6734  001714                     l3864:
  6735  001714  90D8               	bcf	status,0,c
  6736  001716  3213               	rrcf	___awdiv@divisor+1,f,c
  6737  001718  3212               	rrcf	___awdiv@divisor,f,c
  6738  00171A  2E14               	decfsz	___awdiv@counter,f,c
  6739  00171C  D7ED               	goto	l3856
  6740  00171E                     l3868:
  6741  00171E  5015               	movf	___awdiv@sign,w,c
  6742  001720  B4D8               	btfsc	status,2,c
  6743  001722  D004               	goto	l3872
  6744  001724  6C16               	negf	___awdiv@quotient,c
  6745  001726  1E17               	comf	___awdiv@quotient+1,f,c
  6746  001728  B0D8               	btfsc	status,0,c
  6747  00172A  2A17               	incf	___awdiv@quotient+1,f,c
  6748  00172C                     l3872:
  6749  00172C  C016  F010         	movff	___awdiv@quotient,?___awdiv
  6750  001730  C017  F011         	movff	___awdiv@quotient+1,?___awdiv+1
  6751  001734  0012               	return	
  6752  001736                     __end_of___awdiv:
  6753                           	opt stack 0
  6754                           tblptru	equ	0xFF8
  6755                           tblptrh	equ	0xFF7
  6756                           tblptrl	equ	0xFF6
  6757                           tablat	equ	0xFF5
  6758                           prodh	equ	0xFF4
  6759                           prodl	equ	0xFF3
  6760                           intcon	equ	0xFF2
  6761                           indf0	equ	0xFEF
  6762                           postinc0	equ	0xFEE
  6763                           fsr0h	equ	0xFEA
  6764                           fsr0l	equ	0xFE9
  6765                           wreg	equ	0xFE8
  6766                           indf1	equ	0xFE7
  6767                           postdec1	equ	0xFE5
  6768                           plusw1	equ	0xFE3
  6769                           fsr1h	equ	0xFE2
  6770                           fsr1l	equ	0xFE1
  6771                           indf2	equ	0xFDF
  6772                           postinc2	equ	0xFDE
  6773                           plusw2	equ	0xFDB
  6774                           fsr2h	equ	0xFDA
  6775                           fsr2l	equ	0xFD9
  6776                           status	equ	0xFD8
  6777                           
  6778 ;; *************** function _Lcd_Init *****************
  6779 ;; Defined at:
  6780 ;;		line 76 in file "lcd.h"
  6781 ;; Parameters:    Size  Location     Type
  6782 ;;		None
  6783 ;; Auto vars:     Size  Location     Type
  6784 ;;		None
  6785 ;; Return value:  Size  Location     Type
  6786 ;;                  1    wreg      void 
  6787 ;; Registers used:
  6788 ;;		wreg, status,2, cstack
  6789 ;; Tracked objects:
  6790 ;;		On entry : 0/0
  6791 ;;		On exit  : 0/0
  6792 ;;		Unchanged: 0/0
  6793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6794 ;;      Params:         0       0       0       0       0       0       0
  6795 ;;      Locals:         0       0       0       0       0       0       0
  6796 ;;      Temps:          1       0       0       0       0       0       0
  6797 ;;      Totals:         1       0       0       0       0       0       0
  6798 ;;Total ram usage:        1 bytes
  6799 ;; Hardware stack levels used:    1
  6800 ;; Hardware stack levels required when called:    3
  6801 ;; This function calls:
  6802 ;;		_Lcd_Cmd
  6803 ;;		_Lcd_Port
  6804 ;; This function is called by:
  6805 ;;		_main
  6806 ;; This function uses a non-reentrant model
  6807 ;;
  6808                           
  6809                           	psect	text18
  6810  0017B4                     __ptext18:
  6811                           	opt stack 0
  6812  0017B4                     _Lcd_Init:
  6813                           	opt stack 27
  6814                           
  6815                           ;lcd.h: 78: Lcd_Port(0x00);
  6816                           
  6817                           ;incstack = 0
  6818  0017B4  0E00               	movlw	0
  6819  0017B6  EC5B  F00D         	call	_Lcd_Port
  6820                           
  6821                           ;lcd.h: 79: _delay((unsigned long)((20)*(16000000/4000.0)));
  6822  0017BA  0E68               	movlw	104
  6823  0017BC  6E12               	movwf	??_Lcd_Init& (0+255),c
  6824  0017BE  0EE4               	movlw	228
  6825  0017C0                     u4827:
  6826  0017C0  2EE8               	decfsz	wreg,f,c
  6827  0017C2  D7FE               	goto	u4827
  6828  0017C4  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
  6829  0017C6  D7FC               	goto	u4827
  6830  0017C8  F000 F000          	nop2	
  6831                           
  6832                           ;lcd.h: 80: Lcd_Cmd(0x03);
  6833  0017CC  0E03               	movlw	3
  6834  0017CE  ECCA  F00D         	call	_Lcd_Cmd
  6835                           
  6836                           ;lcd.h: 81: _delay((unsigned long)((5)*(16000000/4000.0)));
  6837  0017D2  0E1A               	movlw	26
  6838  0017D4  6E12               	movwf	??_Lcd_Init& (0+255),c
  6839  0017D6  0EF8               	movlw	248
  6840  0017D8                     u4837:
  6841  0017D8  2EE8               	decfsz	wreg,f,c
  6842  0017DA  D7FE               	goto	u4837
  6843  0017DC  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
  6844  0017DE  D7FC               	goto	u4837
  6845  0017E0  F000 F000          	nop2	
  6846                           
  6847                           ;lcd.h: 82: Lcd_Cmd(0x03);
  6848  0017E4  0E03               	movlw	3
  6849  0017E6  ECCA  F00D         	call	_Lcd_Cmd
  6850                           
  6851                           ;lcd.h: 83: _delay((unsigned long)((11)*(16000000/4000.0)));
  6852  0017EA  0E3A               	movlw	58
  6853  0017EC  6E12               	movwf	??_Lcd_Init& (0+255),c
  6854  0017EE  0E23               	movlw	35
  6855  0017F0                     u4847:
  6856  0017F0  2EE8               	decfsz	wreg,f,c
  6857  0017F2  D7FE               	goto	u4847
  6858  0017F4  2E12               	decfsz	??_Lcd_Init& (0+255),f,c
  6859  0017F6  D7FC               	goto	u4847
  6860  0017F8  F000               	nop	
  6861                           
  6862                           ;lcd.h: 84: Lcd_Cmd(0x03);
  6863  0017FA  0E03               	movlw	3
  6864  0017FC  ECCA  F00D         	call	_Lcd_Cmd
  6865                           
  6866                           ;lcd.h: 86: Lcd_Cmd(0x02);
  6867  001800  0E02               	movlw	2
  6868  001802  ECCA  F00D         	call	_Lcd_Cmd
  6869                           
  6870                           ;lcd.h: 87: Lcd_Cmd(0x02);
  6871  001806  0E02               	movlw	2
  6872  001808  ECCA  F00D         	call	_Lcd_Cmd
  6873                           
  6874                           ;lcd.h: 88: Lcd_Cmd(0x08);
  6875  00180C  0E08               	movlw	8
  6876  00180E  ECCA  F00D         	call	_Lcd_Cmd
  6877                           
  6878                           ;lcd.h: 89: Lcd_Cmd(0x00);
  6879  001812  0E00               	movlw	0
  6880  001814  ECCA  F00D         	call	_Lcd_Cmd
  6881                           
  6882                           ;lcd.h: 90: Lcd_Cmd(0x0C);
  6883  001818  0E0C               	movlw	12
  6884  00181A  ECCA  F00D         	call	_Lcd_Cmd
  6885                           
  6886                           ;lcd.h: 91: Lcd_Cmd(0x00);
  6887  00181E  0E00               	movlw	0
  6888  001820  ECCA  F00D         	call	_Lcd_Cmd
  6889                           
  6890                           ;lcd.h: 92: Lcd_Cmd(0x06);
  6891  001824  0E06               	movlw	6
  6892  001826  ECCA  F00D         	call	_Lcd_Cmd
  6893  00182A  0012               	return		;funcret
  6894  00182C                     __end_of_Lcd_Init:
  6895                           	opt stack 0
  6896                           tblptru	equ	0xFF8
  6897                           tblptrh	equ	0xFF7
  6898                           tblptrl	equ	0xFF6
  6899                           tablat	equ	0xFF5
  6900                           prodh	equ	0xFF4
  6901                           prodl	equ	0xFF3
  6902                           intcon	equ	0xFF2
  6903                           indf0	equ	0xFEF
  6904                           postinc0	equ	0xFEE
  6905                           fsr0h	equ	0xFEA
  6906                           fsr0l	equ	0xFE9
  6907                           wreg	equ	0xFE8
  6908                           indf1	equ	0xFE7
  6909                           postdec1	equ	0xFE5
  6910                           plusw1	equ	0xFE3
  6911                           fsr1h	equ	0xFE2
  6912                           fsr1l	equ	0xFE1
  6913                           indf2	equ	0xFDF
  6914                           postinc2	equ	0xFDE
  6915                           plusw2	equ	0xFDB
  6916                           fsr2h	equ	0xFDA
  6917                           fsr2l	equ	0xFD9
  6918                           status	equ	0xFD8
  6919                           
  6920 ;; *************** function _Lcd_Cmd *****************
  6921 ;; Defined at:
  6922 ;;		line 38 in file "lcd.h"
  6923 ;; Parameters:    Size  Location     Type
  6924 ;;  a               1    wreg     unsigned char 
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;  a               1   16[COMRAM] unsigned char 
  6927 ;; Return value:  Size  Location     Type
  6928 ;;                  1    wreg      void 
  6929 ;; Registers used:
  6930 ;;		wreg, status,2, cstack
  6931 ;; Tracked objects:
  6932 ;;		On entry : 0/0
  6933 ;;		On exit  : 0/0
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6936 ;;      Params:         0       0       0       0       0       0       0
  6937 ;;      Locals:         1       0       0       0       0       0       0
  6938 ;;      Temps:          0       0       0       0       0       0       0
  6939 ;;      Totals:         1       0       0       0       0       0       0
  6940 ;;Total ram usage:        1 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; Hardware stack levels required when called:    2
  6943 ;; This function calls:
  6944 ;;		_Lcd_Port
  6945 ;; This function is called by:
  6946 ;;		_Lcd_Clear
  6947 ;;		_Lcd_Set_Cursor
  6948 ;;		_Lcd_Init
  6949 ;;		_Lcd_Shift_Right
  6950 ;;		_Lcd_Shift_Left
  6951 ;; This function uses a non-reentrant model
  6952 ;;
  6953                           
  6954                           	psect	text19
  6955  001B94                     __ptext19:
  6956                           	opt stack 0
  6957  001B94                     _Lcd_Cmd:
  6958                           	opt stack 25
  6959                           
  6960                           ;incstack = 0
  6961                           ;Lcd_Cmd@a stored from wreg
  6962  001B94  6E11               	movwf	Lcd_Cmd@a,c
  6963                           
  6964                           ;lcd.h: 40: PORTDbits.RD5 = 0;
  6965  001B96  9A83               	bcf	3971,5,c	;volatile
  6966                           
  6967                           ;lcd.h: 41: Lcd_Port(a);
  6968  001B98  5011               	movf	Lcd_Cmd@a,w,c
  6969  001B9A  EC5B  F00D         	call	_Lcd_Port
  6970                           
  6971                           ;lcd.h: 42: PORTDbits.RD4 = 1;
  6972  001B9E  8883               	bsf	3971,4,c	;volatile
  6973                           
  6974                           ;lcd.h: 44: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6975  001BA0  0EC8               	movlw	200
  6976  001BA2                     u4857:
  6977  001BA2  F000               	nop	
  6978  001BA4  2EE8               	decfsz	wreg,f,c
  6979  001BA6  D7FD               	goto	u4857
  6980                           
  6981                           ;lcd.h: 45: PORTDbits.RD4 = 0;
  6982  001BA8  9883               	bcf	3971,4,c	;volatile
  6983  001BAA  0012               	return		;funcret
  6984  001BAC                     __end_of_Lcd_Cmd:
  6985                           	opt stack 0
  6986                           tblptru	equ	0xFF8
  6987                           tblptrh	equ	0xFF7
  6988                           tblptrl	equ	0xFF6
  6989                           tablat	equ	0xFF5
  6990                           prodh	equ	0xFF4
  6991                           prodl	equ	0xFF3
  6992                           intcon	equ	0xFF2
  6993                           indf0	equ	0xFEF
  6994                           postinc0	equ	0xFEE
  6995                           fsr0h	equ	0xFEA
  6996                           fsr0l	equ	0xFE9
  6997                           wreg	equ	0xFE8
  6998                           indf1	equ	0xFE7
  6999                           postdec1	equ	0xFE5
  7000                           plusw1	equ	0xFE3
  7001                           fsr1h	equ	0xFE2
  7002                           fsr1l	equ	0xFE1
  7003                           indf2	equ	0xFDF
  7004                           postinc2	equ	0xFDE
  7005                           plusw2	equ	0xFDB
  7006                           fsr2h	equ	0xFDA
  7007                           fsr2l	equ	0xFD9
  7008                           status	equ	0xFD8
  7009                           
  7010 ;; *************** function _Lcd_Port *****************
  7011 ;; Defined at:
  7012 ;;		line 16 in file "lcd.h"
  7013 ;; Parameters:    Size  Location     Type
  7014 ;;  a               1    wreg     unsigned char 
  7015 ;; Auto vars:     Size  Location     Type
  7016 ;;  a               1   15[COMRAM] unsigned char 
  7017 ;; Return value:  Size  Location     Type
  7018 ;;                  1    wreg      void 
  7019 ;; Registers used:
  7020 ;;		wreg
  7021 ;; Tracked objects:
  7022 ;;		On entry : 0/0
  7023 ;;		On exit  : 0/0
  7024 ;;		Unchanged: 0/0
  7025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7026 ;;      Params:         0       0       0       0       0       0       0
  7027 ;;      Locals:         1       0       0       0       0       0       0
  7028 ;;      Temps:          0       0       0       0       0       0       0
  7029 ;;      Totals:         1       0       0       0       0       0       0
  7030 ;;Total ram usage:        1 bytes
  7031 ;; Hardware stack levels used:    1
  7032 ;; Hardware stack levels required when called:    1
  7033 ;; This function calls:
  7034 ;;		Nothing
  7035 ;; This function is called by:
  7036 ;;		_Lcd_Cmd
  7037 ;;		_Lcd_Init
  7038 ;;		_Lcd_Write_Char
  7039 ;; This function uses a non-reentrant model
  7040 ;;
  7041                           
  7042                           	psect	text20
  7043  001AB6                     __ptext20:
  7044                           	opt stack 0
  7045  001AB6                     _Lcd_Port:
  7046                           	opt stack 25
  7047                           
  7048                           ;incstack = 0
  7049                           ;Lcd_Port@a stored from wreg
  7050  001AB6  6E10               	movwf	Lcd_Port@a,c
  7051                           
  7052                           ;lcd.h: 18: if(a & 1)
  7053  001AB8  A010               	btfss	Lcd_Port@a,0,c
  7054  001ABA  D002               	goto	l73
  7055                           
  7056                           ;lcd.h: 19: PORTDbits.RD0 = 1;
  7057  001ABC  8083               	bsf	3971,0,c	;volatile
  7058  001ABE  D001               	goto	l3550
  7059  001AC0                     l73:
  7060                           
  7061                           ;lcd.h: 20: else
  7062                           ;lcd.h: 21: PORTDbits.RD0 = 0;
  7063  001AC0  9083               	bcf	3971,0,c	;volatile
  7064  001AC2                     l3550:
  7065                           
  7066                           ;lcd.h: 23: if(a & 2)
  7067  001AC2  A210               	btfss	Lcd_Port@a,1,c
  7068  001AC4  D002               	goto	l75
  7069                           
  7070                           ;lcd.h: 24: PORTDbits.RD1 = 1;
  7071  001AC6  8283               	bsf	3971,1,c	;volatile
  7072  001AC8  D001               	goto	l3554
  7073  001ACA                     l75:
  7074                           
  7075                           ;lcd.h: 25: else
  7076                           ;lcd.h: 26: PORTDbits.RD1 = 0;
  7077  001ACA  9283               	bcf	3971,1,c	;volatile
  7078  001ACC                     l3554:
  7079                           
  7080                           ;lcd.h: 28: if(a & 4)
  7081  001ACC  A410               	btfss	Lcd_Port@a,2,c
  7082  001ACE  D002               	goto	l77
  7083                           
  7084                           ;lcd.h: 29: PORTDbits.RD2 = 1;
  7085  001AD0  8483               	bsf	3971,2,c	;volatile
  7086  001AD2  D001               	goto	l3558
  7087  001AD4                     l77:
  7088                           
  7089                           ;lcd.h: 30: else
  7090                           ;lcd.h: 31: PORTDbits.RD2 = 0;
  7091  001AD4  9483               	bcf	3971,2,c	;volatile
  7092  001AD6                     l3558:
  7093                           
  7094                           ;lcd.h: 33: if(a & 8)
  7095  001AD6  A610               	btfss	Lcd_Port@a,3,c
  7096  001AD8  D002               	goto	l79
  7097                           
  7098                           ;lcd.h: 34: PORTDbits.RD3 = 1;
  7099  001ADA  8683               	bsf	3971,3,c	;volatile
  7100  001ADC  0012               	return	
  7101  001ADE                     l79:
  7102                           
  7103                           ;lcd.h: 35: else
  7104                           ;lcd.h: 36: PORTDbits.RD3 = 0;
  7105  001ADE  9683               	bcf	3971,3,c	;volatile
  7106  001AE0  0012               	return	
  7107  001AE2                     __end_of_Lcd_Port:
  7108                           	opt stack 0
  7109                           tblptru	equ	0xFF8
  7110                           tblptrh	equ	0xFF7
  7111                           tblptrl	equ	0xFF6
  7112                           tablat	equ	0xFF5
  7113                           prodh	equ	0xFF4
  7114                           prodl	equ	0xFF3
  7115                           intcon	equ	0xFF2
  7116                           indf0	equ	0xFEF
  7117                           postinc0	equ	0xFEE
  7118                           fsr0h	equ	0xFEA
  7119                           fsr0l	equ	0xFE9
  7120                           wreg	equ	0xFE8
  7121                           indf1	equ	0xFE7
  7122                           postdec1	equ	0xFE5
  7123                           plusw1	equ	0xFE3
  7124                           fsr1h	equ	0xFE2
  7125                           fsr1l	equ	0xFE1
  7126                           indf2	equ	0xFDF
  7127                           postinc2	equ	0xFDE
  7128                           plusw2	equ	0xFDB
  7129                           fsr2h	equ	0xFDA
  7130                           fsr2l	equ	0xFD9
  7131                           status	equ	0xFD8
  7132                           
  7133 ;; *************** function _ISR *****************
  7134 ;; Defined at:
  7135 ;;		line 330 in file "main.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;		None
  7138 ;; Auto vars:     Size  Location     Type
  7139 ;;  sspBuf          1   14[COMRAM] unsigned char 
  7140 ;; Return value:  Size  Location     Type
  7141 ;;                  1    wreg      void 
  7142 ;; Registers used:
  7143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7144 ;; Tracked objects:
  7145 ;;		On entry : 0/0
  7146 ;;		On exit  : 0/0
  7147 ;;		Unchanged: 0/0
  7148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7149 ;;      Params:         0       0       0       0       0       0       0
  7150 ;;      Locals:         1       0       0       0       0       0       0
  7151 ;;      Temps:         14       0       0       0       0       0       0
  7152 ;;      Totals:        15       0       0       0       0       0       0
  7153 ;;Total ram usage:       15 bytes
  7154 ;; Hardware stack levels used:    1
  7155 ;; This function calls:
  7156 ;;		Nothing
  7157 ;; This function is called by:
  7158 ;;		Interrupt level 2
  7159 ;; This function uses a non-reentrant model
  7160 ;;
  7161                           
  7162                           	psect	intcode
  7163  000008                     __pintcode:
  7164                           	opt stack 0
  7165  000008                     _ISR:
  7166                           	opt stack 25
  7167                           
  7168                           ;incstack = 0
  7169  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7170  00000A  CFFA F001          	movff	pclath,??_ISR
  7171  00000E  CFFB F002          	movff	pclatu,??_ISR+1
  7172  000012  CFE9 F003          	movff	fsr0l,??_ISR+2
  7173  000016  CFEA F004          	movff	fsr0h,??_ISR+3
  7174  00001A  CFE1 F005          	movff	fsr1l,??_ISR+4
  7175  00001E  CFE2 F006          	movff	fsr1h,??_ISR+5
  7176  000022  CFD9 F007          	movff	fsr2l,??_ISR+6
  7177  000026  CFDA F008          	movff	fsr2h,??_ISR+7
  7178  00002A  CFF3 F009          	movff	prodl,??_ISR+8
  7179  00002E  CFF4 F00A          	movff	prodh,??_ISR+9
  7180  000032  CFF6 F00B          	movff	tblptrl,??_ISR+10
  7181  000036  CFF7 F00C          	movff	tblptrh,??_ISR+11
  7182  00003A  CFF8 F00D          	movff	tblptru,??_ISR+12
  7183  00003E  CFF5 F00E          	movff	tablat,??_ISR+13
  7184                           
  7185                           ;main.c: 332: unsigned char sspBuf;
  7186                           ;main.c: 334: if (PIR1bits.SSPIF) {
  7187  000042  A69E               	btfss	3998,3,c	;volatile
  7188  000044  D03E               	goto	i2l294
  7189                           
  7190                           ;main.c: 336: if (!SSPSTATbits.D_NOT_A) {
  7191  000046  BAC7               	btfsc	4039,5,c	;volatile
  7192  000048  D013               	goto	i2l3518
  7193                           
  7194                           ;main.c: 340: i2c_byte_count = 0;
  7195  00004A  0E00               	movlw	0
  7196  00004C  6E4E               	movwf	_i2c_byte_count,c	;volatile
  7197                           
  7198                           ;main.c: 342: if (SSPSTATbits.BF) {
  7199  00004E  B0C7               	btfsc	4039,0,c	;volatile
  7200                           
  7201                           ;main.c: 344: sspBuf = SSPBUF;
  7202  000050  CFC9 F00F          	movff	4041,ISR@sspBuf	;volatile
  7203                           
  7204                           ;main.c: 345: }
  7205                           ;main.c: 347: if (SSPSTATbits.R_NOT_W) {
  7206  000054  A4C7               	btfss	4039,2,c	;volatile
  7207  000056  D031               	goto	i2l3540
  7208                           
  7209                           ;main.c: 349: SSPCON1bits.WCOL = 0;
  7210  000058  9EC6               	bcf	4038,7,c	;volatile
  7211                           
  7212                           ;main.c: 350: SSPBUF = i2c_r_reg[i2c_reg_addr++];
  7213  00005A  504F               	movf	_i2c_reg_addr,w,c	;volatile
  7214  00005C  0D01               	mullw	1
  7215  00005E  0E00               	movlw	low _i2c_r_reg
  7216  000060  24F3               	addwf	prodl,w,c
  7217  000062  6ED9               	movwf	fsr2l,c
  7218  000064  0E01               	movlw	high _i2c_r_reg
  7219  000066  20F4               	addwfc	prodh,w,c
  7220  000068  6EDA               	movwf	fsr2h,c
  7221  00006A  50DF               	movf	indf2,w,c
  7222  00006C  6EC9               	movwf	4041,c	;volatile
  7223  00006E  D024               	goto	i2l3538
  7224  000070                     i2l3518:
  7225                           
  7226                           ;main.c: 357: i2c_byte_count++;
  7227  000070  2A4E               	incf	_i2c_byte_count,f,c	;volatile
  7228                           
  7229                           ;main.c: 359: if (SSPSTATbits.BF) {
  7230  000072  B0C7               	btfsc	4039,0,c	;volatile
  7231                           
  7232                           ;main.c: 360: sspBuf = SSPBUF;
  7233  000074  CFC9 F00F          	movff	4041,ISR@sspBuf	;volatile
  7234                           
  7235                           ;main.c: 361: }
  7236                           ;main.c: 363: if (SSPSTATbits.R_NOT_W) {
  7237  000078  A4C7               	btfss	4039,2,c	;volatile
  7238  00007A  D00E               	goto	i2l3532
  7239                           
  7240                           ;main.c: 366: SSPCON1bits.WCOL = 0;
  7241  00007C  9EC6               	bcf	4038,7,c	;volatile
  7242                           
  7243                           ;main.c: 367: SSPBUF = i2c_r_reg[i2c_reg_addr++];
  7244  00007E  504F               	movf	_i2c_reg_addr,w,c	;volatile
  7245  000080  0D01               	mullw	1
  7246  000082  0E00               	movlw	low _i2c_r_reg
  7247  000084  24F3               	addwf	prodl,w,c
  7248  000086  6ED9               	movwf	fsr2l,c
  7249  000088  0E01               	movlw	high _i2c_r_reg
  7250  00008A  20F4               	addwfc	prodh,w,c
  7251  00008C  6EDA               	movwf	fsr2h,c
  7252  00008E  50DF               	movf	indf2,w,c
  7253  000090  6EC9               	movwf	4041,c	;volatile
  7254  000092  2A4F               	incf	_i2c_reg_addr,f,c	;volatile
  7255                           
  7256                           ;main.c: 368: LATDbits.LATD6 = 1;
  7257  000094  8C8C               	bsf	3980,6,c	;volatile
  7258                           
  7259                           ;main.c: 370: } else {
  7260  000096  D011               	goto	i2l3540
  7261  000098                     i2l3532:
  7262                           
  7263                           ;main.c: 372: if (i2c_byte_count == 1) {
  7264  000098  044E               	decf	_i2c_byte_count,w,c	;volatile
  7265  00009A  A4D8               	btfss	status,2,c
  7266  00009C  D003               	goto	i2l3536
  7267                           
  7268                           ;main.c: 374: i2c_reg_addr = sspBuf;
  7269  00009E  C00F  F04F         	movff	ISR@sspBuf,_i2c_reg_addr	;volatile
  7270                           
  7271                           ;main.c: 376: } else {
  7272  0000A2  D00B               	goto	i2l3540
  7273  0000A4                     i2l3536:
  7274                           
  7275                           ;main.c: 379: i2c_w_reg[i2c_reg_addr++] = sspBuf;
  7276  0000A4  504F               	movf	_i2c_reg_addr,w,c	;volatile
  7277  0000A6  0D01               	mullw	1
  7278  0000A8  0E20               	movlw	low _i2c_w_reg
  7279  0000AA  24F3               	addwf	prodl,w,c
  7280  0000AC  6ED9               	movwf	fsr2l,c
  7281  0000AE  0E01               	movlw	high _i2c_w_reg
  7282  0000B0  20F4               	addwfc	prodh,w,c
  7283  0000B2  6EDA               	movwf	fsr2h,c
  7284  0000B4  C00F  FFDF         	movff	ISR@sspBuf,indf2
  7285  0000B8                     i2l3538:
  7286  0000B8  2A4F               	incf	_i2c_reg_addr,f,c	;volatile
  7287  0000BA                     i2l3540:
  7288                           
  7289                           ;main.c: 380: }
  7290                           ;main.c: 381: }
  7291                           ;main.c: 382: }
  7292                           ;main.c: 384: i2c_reg_addr %= sizeof(i2c_r_reg);
  7293  0000BA  0E1F               	movlw	31
  7294  0000BC  164F               	andwf	_i2c_reg_addr,f,c	;volatile
  7295                           
  7296                           ;main.c: 387: PIR1bits.SSPIF = 0;
  7297  0000BE  969E               	bcf	3998,3,c	;volatile
  7298                           
  7299                           ;main.c: 388: SSPCON1bits.CKP = 1;
  7300  0000C0  88C6               	bsf	4038,4,c	;volatile
  7301  0000C2                     i2l294:
  7302  0000C2  C00E  FFF5         	movff	??_ISR+13,tablat
  7303  0000C6  C00D  FFF8         	movff	??_ISR+12,tblptru
  7304  0000CA  C00C  FFF7         	movff	??_ISR+11,tblptrh
  7305  0000CE  C00B  FFF6         	movff	??_ISR+10,tblptrl
  7306  0000D2  C00A  FFF4         	movff	??_ISR+9,prodh
  7307  0000D6  C009  FFF3         	movff	??_ISR+8,prodl
  7308  0000DA  C008  FFDA         	movff	??_ISR+7,fsr2h
  7309  0000DE  C007  FFD9         	movff	??_ISR+6,fsr2l
  7310  0000E2  C006  FFE2         	movff	??_ISR+5,fsr1h
  7311  0000E6  C005  FFE1         	movff	??_ISR+4,fsr1l
  7312  0000EA  C004  FFEA         	movff	??_ISR+3,fsr0h
  7313  0000EE  C003  FFE9         	movff	??_ISR+2,fsr0l
  7314  0000F2  C002  FFFB         	movff	??_ISR+1,pclatu
  7315  0000F6  C001  FFFA         	movff	??_ISR,pclath
  7316  0000FA  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7317  0000FC  0011               	retfie		f
  7318  0000FE                     __end_of_ISR:
  7319                           	opt stack 0
  7320                           pclatu	equ	0xFFB
  7321                           pclath	equ	0xFFA
  7322                           tblptru	equ	0xFF8
  7323                           tblptrh	equ	0xFF7
  7324                           tblptrl	equ	0xFF6
  7325                           tablat	equ	0xFF5
  7326                           prodh	equ	0xFF4
  7327                           prodl	equ	0xFF3
  7328                           intcon	equ	0xFF2
  7329                           indf0	equ	0xFEF
  7330                           postinc0	equ	0xFEE
  7331                           fsr0h	equ	0xFEA
  7332                           fsr0l	equ	0xFE9
  7333                           wreg	equ	0xFE8
  7334                           indf1	equ	0xFE7
  7335                           postdec1	equ	0xFE5
  7336                           plusw1	equ	0xFE3
  7337                           fsr1h	equ	0xFE2
  7338                           fsr1l	equ	0xFE1
  7339                           indf2	equ	0xFDF
  7340                           postinc2	equ	0xFDE
  7341                           plusw2	equ	0xFDB
  7342                           fsr2h	equ	0xFDA
  7343                           fsr2l	equ	0xFD9
  7344                           status	equ	0xFD8
  7345                           pclatu	equ	0xFFB
  7346                           pclath	equ	0xFFA
  7347                           tblptru	equ	0xFF8
  7348                           tblptrh	equ	0xFF7
  7349                           tblptrl	equ	0xFF6
  7350                           tablat	equ	0xFF5
  7351                           prodh	equ	0xFF4
  7352                           prodl	equ	0xFF3
  7353                           intcon	equ	0xFF2
  7354                           indf0	equ	0xFEF
  7355                           postinc0	equ	0xFEE
  7356                           fsr0h	equ	0xFEA
  7357                           fsr0l	equ	0xFE9
  7358                           wreg	equ	0xFE8
  7359                           indf1	equ	0xFE7
  7360                           postdec1	equ	0xFE5
  7361                           plusw1	equ	0xFE3
  7362                           fsr1h	equ	0xFE2
  7363                           fsr1l	equ	0xFE1
  7364                           indf2	equ	0xFDF
  7365                           postinc2	equ	0xFDE
  7366                           plusw2	equ	0xFDB
  7367                           fsr2h	equ	0xFDA
  7368                           fsr2l	equ	0xFD9
  7369                           status	equ	0xFD8
  7370                           
  7371                           	psect	rparam
  7372  0000                     pclatu	equ	0xFFB
  7373                           pclath	equ	0xFFA
  7374                           tblptru	equ	0xFF8
  7375                           tblptrh	equ	0xFF7
  7376                           tblptrl	equ	0xFF6
  7377                           tablat	equ	0xFF5
  7378                           prodh	equ	0xFF4
  7379                           prodl	equ	0xFF3
  7380                           intcon	equ	0xFF2
  7381                           indf0	equ	0xFEF
  7382                           postinc0	equ	0xFEE
  7383                           fsr0h	equ	0xFEA
  7384                           fsr0l	equ	0xFE9
  7385                           wreg	equ	0xFE8
  7386                           indf1	equ	0xFE7
  7387                           postdec1	equ	0xFE5
  7388                           plusw1	equ	0xFE3
  7389                           fsr1h	equ	0xFE2
  7390                           fsr1l	equ	0xFE1
  7391                           indf2	equ	0xFDF
  7392                           postinc2	equ	0xFDE
  7393                           plusw2	equ	0xFDB
  7394                           fsr2h	equ	0xFDA
  7395                           fsr2l	equ	0xFD9
  7396                           status	equ	0xFD8
  7397                           
  7398                           	psect	temp
  7399  000050                     btemp:
  7400                           	opt stack 0
  7401  000050                     	ds	1
  7402  0000                     int$flags	set	btemp
  7403                           pclatu	equ	0xFFB
  7404                           pclath	equ	0xFFA
  7405                           tblptru	equ	0xFF8
  7406                           tblptrh	equ	0xFF7
  7407                           tblptrl	equ	0xFF6
  7408                           tablat	equ	0xFF5
  7409                           prodh	equ	0xFF4
  7410                           prodl	equ	0xFF3
  7411                           intcon	equ	0xFF2
  7412                           indf0	equ	0xFEF
  7413                           postinc0	equ	0xFEE
  7414                           fsr0h	equ	0xFEA
  7415                           fsr0l	equ	0xFE9
  7416                           wreg	equ	0xFE8
  7417                           indf1	equ	0xFE7
  7418                           postdec1	equ	0xFE5
  7419                           plusw1	equ	0xFE3
  7420                           fsr1h	equ	0xFE2
  7421                           fsr1l	equ	0xFE1
  7422                           indf2	equ	0xFDF
  7423                           postinc2	equ	0xFDE
  7424                           plusw2	equ	0xFDB
  7425                           fsr2h	equ	0xFDA
  7426                           fsr2l	equ	0xFD9
  7427                           status	equ	0xFD8


Data Sizes:
    Strings     375
    Constant    0
    Data        135
    BSS         38
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     46      79
    BANK0           160     50     128
    BANK1           256     41     105
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    start_routine@error_msg	PTR unsigned char  size(2) Largest target is 17
		 -> STR_28(CODE[17]), STR_27(CODE[17]), 

    latch_keypad@x	PTR unsigned char  size(2) Largest target is 1
		 -> start_routine@x(BANK0[1]), main@x(BANK1[1]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 1535
		 -> STR_30(CODE[17]), STR_29(CODE[6]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[2]), STR_24(CODE[5]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[17]), 
		 -> STR_18(CODE[11]), STR_17(CODE[6]), STR_16(CODE[5]), STR_15(CODE[17]), 
		 -> STR_14(CODE[17]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[17]), 
		 -> STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[17]), STR_3(CODE[17]), 
		 -> STR_2(CODE[17]), STR_1(CODE[2]), RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    _main->_start_routine
    _start_routine->_menu_progress_bar
    _running_display->_menu_progress_bar
    _menu_progress_bar->___wmul
    ___wmul->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _mcu_initialise->_Eeprom_Read_Byte
    _load_i2c_registers->___awdiv
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_start_routine
    _start_routine->_menu_progress_bar
    _running_display->_menu_progress_bar

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                49    49      0   73776
                                             38 COMRAM     8     8      0
                                              0 BANK1     41    41      0
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                       _latch_keypad
                 _load_i2c_registers
                     _mcu_initialise
                  _menu_progress_bar
                        _read_keypad
                    _running_display
                      _start_routine
 ---------------------------------------------------------------------------------
 (1) _start_routine                                       40    40      0   24902
                                             34 COMRAM     4     4      0
                                             14 BANK0     36    36      0
                  _Eeprom_Write_Byte
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awdiv
                       _latch_keypad
                  _menu_progress_bar
                        _read_keypad
 ---------------------------------------------------------------------------------
 (2) _latch_keypad                                         4     2      2     524
                                             15 COMRAM     4     2      2
                        _read_keypad
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Write_Byte                                    2     1      1     139
                                             15 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _running_display                                     37    37      0   23472
                                             34 COMRAM     3     3      0
                                             14 BANK0     34    34      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awdiv
                            ___awmod
                  _menu_progress_bar
                        _read_keypad
 ---------------------------------------------------------------------------------
 (2) _read_keypad                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _menu_progress_bar                                   20    18      2   11348
                                             28 COMRAM     6     4      2
                                              0 BANK0     14    14      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     848
                                             22 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1781
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_String                                     6     4      2    2694
                                             19 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_Char                                       3     3      0     254
                                             16 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Set_Cursor                                       5     4      1    4703
                                             17 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Clear                                            1     1      0     155
                                             17 COMRAM     1     1      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1049
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _mcu_initialise                                       0     0      0      31
                   _Eeprom_Read_Byte
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Read_Byte                                     1     1      0      31
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _load_i2c_registers                                  12    12      0    2877
                                             23 COMRAM    12    12      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2447
                                             15 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     279
                                             17 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Cmd                                              1     1      0     155
                                             16 COMRAM     1     1      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (5) _Lcd_Port                                             1     1      0     124
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 15    15      0      46
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _latch_keypad
     _read_keypad
   _load_i2c_registers
     ___awdiv
   _mcu_initialise
     _Eeprom_Read_Byte
   _menu_progress_bar
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___lwdiv
     ___wmul
       ___lwdiv (ARG)
   _read_keypad
   _running_display
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___awdiv
     ___awmod
     _menu_progress_bar
       _Lcd_Clear
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Write_Char
         _Lcd_Port
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___lwdiv
       ___wmul
         ___lwdiv (ARG)
     _read_keypad
   _start_routine
     _Eeprom_Write_Byte
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___awdiv
     _latch_keypad
       _read_keypad
     _menu_progress_bar
       _Lcd_Clear
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Write_Char
         _Lcd_Port
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___lwdiv
       ___wmul
         ___lwdiv (ARG)
     _read_keypad

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     29      69       7       41.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     32      80       5       80.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2E      4F       1       84.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     138      15        0.0%
DATA                 0      0     138       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Oct 15 12:05:31 2016

                             _c 0092                  start_routine@a 008A                  start_routine@b 0080  
                start_routine@h 006E                  start_routine@i 0074                  start_routine@l 006F  
                start_routine@n 0090                  start_routine@v 0073                  start_routine@x 008F  
                   _SSPSTATbits 000FC7                              l73 1AC0                              l75 1ACA  
                            l77 1AD4                              l79 1ADE                    ___awdiv@sign 0015  
                            _hx 002F                 start_routine@d1 0072             ___wmul@multiplicand 0019  
               start_routine@dh 008E                 start_routine@dt 008B     __size_of_load_i2c_registers 00EC  
                  __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000  
        __size_of_start_routine 0780                    __CFG_CP3$OFF 000000                             l151 1BB8  
                           l330 0F4C                             l260 1662                             l261 166E  
                           l157 1B4A                             l254 1622                             l263 168A  
                           l239 089C                             l264 1696                             l256 162E  
                           l265 16A2                             l257 163A                             l259 1656  
                           l767 19AC                    __CFG_CPB$OFF 000000                    __CFG_CPD$OFF 000000  
                           _ISR 0008                    __CFG_BORV$30 000000                    ___awmod@sign 0015  
                           prod 000FF3                             wreg 000FE8         Eeprom_Read_Byte@address 0010  
       __end_of_running_display 1380                    __CFG_LVP$OFF 000000                            ?_ISR 0001  
                          l4010 09BA                            l4002 098A                            l4006 09A0  
                          l4104 0C7C                            l4040 0B14                            l4202 0F26  
                          l4130 0D1C                            l4122 0CEE                            l4018 09E0  
                          l4124 0CF6                            l4044 0B2A                            l4222 0FB0  
                          l4214 0F80                            l4150 0D94                            l4126 0D06  
                          l4070 0BAE                            l4320 10CC                            l4240 1016  
                          l4224 0FC0                            l4136 0D4A                            l4080 0BEC  
                          l4048 0B44                            l4250 1050                            l4218 0F96  
                          l3604 19DE                            l4404 134C                            l4340 1122  
                          l4316 10B6                            l4244 1030                            l4236 1000  
                          l4228 0FD4                            l4180 0E8C                            l4156 0DAC  
                          l4260 1082                            l3550 1AC2                            l3614 1836  
                          l4406 1356                            l4350 1172                            l4334 110E  
                          l4246 103A                            l4280 1574                            l4264 152A  
                          l3720 197A                            l3704 16AE                            l4360 11A6  
                          l4344 112E                            l4328 10EE                            l4256 106C  
                          l4176 0E76                            l4520 018E                            l4512 0146  
                          l4504 0120                            l3554 1ACC                            l4274 155C  
                          l3618 186A                            l3722 1982                            l4370 11E2  
                          l4354 1188                            l4338 1116                            l4186 0EAA  
                          l4258 1078                            l4602 0444                            l4530 01E8  
                          l4292 15CE                            l4276 1564                            l4268 153A  
                          l3900 18EC                            l3732 19A2                            l3724 1986  
                          l4700 071E                            l4524 01A4                            l3558 1AD6  
                          l4286 15AE                            l3750 1408                            l3742 13E0  
                          l4542 0226                            l4518 0184                            l3840 16C6  
                          l4288 15BE                            l3904 18F6                            l3760 145A  
                          l3648 1646                            l4298 15EC                            l3770 1490  
                          l3754 1424                            l3746 13F6                            l3826 1A48  
                          l4714 0762                            l4706 073A                            l4618 04AE  
                          l3852 16EC                            l3908 1904                            l3676 167A  
                          l3828 1A5A                            l4724 07B0                            l4652 0598  
                          l3854 16F4                            l3846 16D6                            l3790 14EC  
                          l3782 14D4                            l3774 14AA                            l3766 147A  
                          l4742 0812                            l4718 0778                            l4670 061E  
                          l4574 02FE                            l3872 172C                            l3864 1714  
                          l3856 16F8                            l4760 0870                            l4672 0626  
                          l4592 0386                            l3794 1502                            l3778 14BE  
                          l4746 0828                            l4738 07FC                            l4674 0632  
                          l4594 038E                            l3868 171E                            l3892 18CC  
                          l3884 18B2                            l3788 14E2                            l4780 08EA  
                          l4764 0886                            l4748 082E                            l4596 039A  
                          l3894 18D4                            l3798 151C                            l3990 0944  
                          l4678 069C                            l3896 18D8                            l3888 18BE  
                          l4776 08D4                            l4696 0708                            l4784 0900  
                          l3994 095E                            l3986 092E                            STR_2 7E87  
                          STR_3 7EED                            STR_4 7E98                            STR_5 7F42  
                          STR_6 7E98                            STR_7 7F20                            STR_8 7EA9  
                          STR_9 7FCA                            _LATC 000F8B                            u3210 1862  
                          u3220 1896                            u3217 1858                            u4121 11D8  
                          u3227 188C                            u4141 120E                            u4151 122C  
                          u4411 04C2                            u4270 0144                            u4280 0182  
                          u3395 139E                            u3900 0F4C                            u4707 0B30  
                          u4717 0F2C                            u4807 1AAC                            u4727 0F9C  
                          u4817 1B66                            u4737 101C                            u4657 0818  
                          u4827 17C0                            u4747 1A4E                            u4667 088C  
                          u4837 17D8                            u4757 11F0                            u4677 08F0  
                          u4847 17F0                            u4767 140E                            u4687 094A  
                          u4857 1BA2                            u4777 1496                            u4697 09A6  
                          u4787 1508                            u4797 1A9A               ?_Lcd_Write_String 0014  
                          _main 0102                            fsr0h 000FEA                            fsr1h 000FE2  
                          indf0 000FEF                            fsr0l 000FE9                            fsr2h 000FDA  
                          indf1 000FE7                            fsr1l 000FE1                            indf2 000FDF  
                          fsr2l 000FD9                            btemp 0050                            pclat 000FFA  
                          prodh 000FF4                            prodl 000FF3                            start 00FE  
            ??_Lcd_Write_String 0016                   __CFG_IESO$OFF 000000                 __end_of_Lcd_Cmd 1BAC  
                 __CFG_MCLRE$ON 000000                    ___param_bank 000010                           ??_ISR 0001  
                         ?_main 0001                 __end_of___awdiv 1736                           _EEADR 000FA9  
                         STR_10 7F0F                           STR_11 7FB9                           STR_20 7F64  
                         STR_12 7ECB                           STR_13 7F97                           STR_21 7F31  
                         STR_14 7ECB                           STR_22 7FA8                           STR_30 7F75  
                         STR_23 7F31                           STR_15 7EBA                           STR_24 7FF7  
                         STR_16 7FF2                           STR_25 7FFC                           STR_17 7FE6  
                         STR_18 7FDB                           STR_26 7F86                           STR_27 7F53  
                         STR_19 7EFE                           STR_28 7EDC                 __end_of___awmod 190E  
                         STR_29 7FEC                 ___awdiv@divisor 0012                 __end_of___lwdiv 19B6  
                         i2l294 00C2                 ___awdiv@counter 0014                           _PORTB 000F81  
                         _PORTD 000F83         __size_of_Lcd_Set_Cursor 0050                           _TRISA 000F92  
                         _TRISB 000F93                           _TRISC 000F94                           _TRISD 000F95  
                _i2c_byte_count 004E                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 ?_latch_keypad 0010                   __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000  
                 __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
                __CFG_EBTR1$OFF 000000                      _Machine_ID 00DF                  __CFG_EBTR2$OFF 000000  
            start_routine@F3718 00B5                  __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                    ?_read_keypad 0001  
                __CFG_EBTRB$OFF 000000                           main@c 0140                           main@i 015E  
                         main@n 0167                           main@p 0166                           main@u 0162  
                         main@x 0168                           tablat 000FF5              start_routine@i_901 007A  
            start_routine@i_904 007C              start_routine@i_907 007E              start_routine@i_908 0085  
            start_routine@i_883 0078              start_routine@i_875 0076              start_routine@i_895 008C  
            start_routine@i_898 0083         load_i2c_registers@i_841 001E         load_i2c_registers@i_839 0022  
                 _start_routine 090A                           plusw1 000FE3                           plusw2 000FDB  
                         status 000FD8   menu_progress_bar@load_time_ms 001D                  __CFG_HFOFST$ON 000000  
              __end_of_Lcd_Init 182C                __end_of_Lcd_Port 1AE2                 __initialization 1736  
                  __end_of_main 090A                          ??_main 0027              __size_of_Lcd_Clear 0020  
                 __activetblptr 000002            _credentials_accepted 00DD                  ??_latch_keypad 0012  
              ?_running_display 0001                          _EEDATA 000FA8                          _EECON2 000FA7  
              ___awdiv@dividend 0010                  ?_start_routine 0001                  __CFG_WDTEN$OFF 000000  
                        i2l3532 0098                          i2l3540 00BA                          i2l3518 0070  
                        i2l3536 00A4                          i2l3538 00B8                          _OSCCON 000FD3  
                     ??_Lcd_Cmd 0011         __size_of_Lcd_Write_Char 0038                          _SSPADD 000FC8  
                        _SSPBUF 000FC9                  __CFG_XINST$OFF 000000                          ___wmul 1B0A  
                     ??___awdiv 0014                  __CFG_STVREN$ON 000000                       ??___awmod 0014  
                     ??___lwdiv 0014               ?_Eeprom_Read_Byte 0001                          clear_0 173C  
              ___awdiv@quotient 0016                 ___awmod@divisor 0012                 ___awmod@counter 0014  
            ??_Eeprom_Read_Byte 0010                    __pdataCOMRAM 002F                    __mediumconst 7E86  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
               Lcd_Set_Cursor@a 0013                 Lcd_Set_Cursor@b 0012                 Lcd_Set_Cursor@y 0015  
               Lcd_Set_Cursor@z 0014                      __accesstop 0060         __end_of__initialization 17A6  
               __CFG_PBADEN$OFF 000000               __end_of_Lcd_Clear 1B74                   ___rparam_used 000001  
             _menu_progress_bar 1380                  __pcstackCOMRAM 0001                    __pidataBANK0 1AE2  
                  __pidataBANK1 1A06              ?_menu_progress_bar 001D            running_display@F3741 00B0  
          running_display@F3744 00A6                  _Lcd_Set_Cursor 19B6             ??_menu_progress_bar 001F  
          running_display@i_914 0080            running_display@i_915 0088                    _EEP_I2C_ADDR 00DC  
                     ?_Lcd_Init 0001                       ?_Lcd_Port 0001                 ??_start_routine 0023  
          __size_of_read_keypad 00A4                      __pbssBANK0 00BA       __end_of_menu_progress_bar 1522  
            running_display@n_c 0083                       ISR@sspBuf 000F            __end_of_latch_keypad 1A7E  
                       ?___wmul 0017      __end_of_load_i2c_registers 160E    start_routine@new_I2C_address 0091  
     __size_of_Lcd_Write_String 0072          __end_of_Lcd_Set_Cursor 1A06          menu_progress_bar@i_727 0068  
        menu_progress_bar@i_728 006A          menu_progress_bar@i_729 006C                      ??_Lcd_Init 0012  
                    ??_Lcd_Port 0010                         _SSPCON1 000FC6                         _SSPCON2 000FC5  
       __size_of_mcu_initialise 0056                         _SSPSTAT 000FC7                  _Lcd_Write_Char 1A7E  
                       _Lcd_Cmd 1B94                         __Hparam 0000                         __Lparam 0000  
                       ___awdiv 16B2                         ___awmod 189E                 __size_of___wmul 0026  
                       ___lwdiv 1964                         __pcinit 1736                         __ramtop 0600  
               ?_Lcd_Set_Cursor 0012                         __ptext0 0102                         __ptext1 090A  
                       __ptext2 1A46                         __ptext3 1B30                         __ptext4 108A  
                       __ptext5 160E                         __ptext6 1380                         __ptext7 1B0A  
                       __ptext8 1964                         __ptext9 182C             menu_progress_bar@ii 0064  
                  __size_of_ISR 00F6                ___awmod@dividend 0010          __end_of_Lcd_Write_Char 1AB6  
          end_of_initialization 17A6                   __Lmediumconst 7E86      __size_of_menu_progress_bar 01A2  
                 _login_timeout 00B8                         postdec1 000FE5                         postinc0 000FEE  
                       postinc2 000FDE                       Lcd_Port@a 0010                       _PORTBbits 000F81  
                     _PORTDbits 000F83                 ?_Lcd_Write_Char 0001       __size_of_Eeprom_Read_Byte 0014  
             Lcd_Write_String@a 0014               Lcd_Write_String@i 0018           __size_of_latch_keypad 0038  
                    main@buffer 014A        __size_of_running_display 02F6                    _i2c_reg_addr 004F  
                 latch_keypad@x 0010                       _Lcd_Clear 1B54                  __end_of___wmul 1B30  
              _Lcd_Write_String 182C                   __pidataCOMRAM 1B74               _Eeprom_Write_Byte 1B30  
            ?_Eeprom_Write_Byte 0010             start_initialization 1736                    _latch_keypad 1A46  
                   __end_of_ISR 00FE                       _i2c_r_reg 0100                       _i2c_w_reg 0120  
                _mcu_initialise 190E             ??_Eeprom_Write_Byte 0011               __size_of_Lcd_Init 0078  
             __size_of_Lcd_Port 002C  running_display@is_leading_zero 0082                      ?_Lcd_Clear 0001  
                      ??___wmul 001B                     __pdataBANK0 0092                     __pdataBANK1 0100  
              __CFG_LPT1OSC$OFF 000000       __end_of_Eeprom_Write_Byte 1B54                 Lcd_Write_Char@a 0013  
               Lcd_Write_Char@y 0012       menu_seconds_to_mmss@F3627 003F           running_display@minute 0086  
         running_display@second 008E                     __pbssCOMRAM 004E          __end_of_mcu_initialise 1964  
                 __pcstackBANK0 0060                   __pcstackBANK1 0140                   ??_read_keypad 0010  
            _load_i2c_registers 1522           __end_of_start_routine 108A             ?_load_i2c_registers 0001  
                      ?_Lcd_Cmd 0001             running_display@hour 0073                       __pnvBANK0 00DE  
                  _current_user 00D3               running_display@ms 0084                ___lwdiv@dividend 0010  
             __CFG_CCP2MX$PORTC 000000                ??_Lcd_Set_Cursor 0013                       __pintcode 0008  
                 __pmediumconst 7E86                        ?___awdiv 0010                        ?___awmod 0010  
             ??_running_display 0023                        ?___lwdiv 0010            ??_load_i2c_registers 0018  
                      _I2C_ADDR 00DE                 ?_mcu_initialise 0001                ___lwdiv@quotient 0015  
              _Eeprom_Read_Byte 1BAC              menu_progress_bar@d 0060              menu_progress_bar@i 0066  
           __end_of_read_keypad 16B2                  ___wmul@product 001B                        _LATDbits 000F8C  
                      _PIE1bits 000F9D                        Lcd_Cmd@a 0011                        _PIR1bits 000F9E  
                      _PIR2bits 000FA1                     ??_Lcd_Clear 0012                __CFG_WDTPS$32768 000000  
    load_i2c_registers@checksum 001C                       main@F3681 009C      __size_of_Eeprom_Write_Byte 0024  
                     main@i_773 0164                       main@i_782 015A                       main@i_790 0153  
                     main@i_776 0160                       main@i_793 0155                       main@i_786 015C  
             ___wmul@multiplier 0017                       main@i_796 0157                ??_Lcd_Write_Char 0011  
                      _Lcd_Init 17B4                        _Lcd_Port 1AB6                       copy_data0 175A  
                     copy_data1 177A                       copy_data2 179A        __end_of_Lcd_Write_String 189E  
   running_display@exit_running 007F                __size_of_Lcd_Cmd 0018                      _EECON1bits 000FA6  
                      __Hrparam 0000                        __Lrparam 0000              __CFG_BOREN$SBORDIS 000000  
              __size_of___awdiv 0084                __size_of___awmod 0070                __size_of___lwdiv 0052  
           load_i2c_registers@i 0020       start_routine@I2C_new_ADDR 0087                     _current_pin 00CA  
              running_display@i 008C                running_display@n 0075                running_display@s 008A  
              running_display@t 006E                 ___lwdiv@divisor 0012                 ___lwdiv@counter 0014  
                   _read_keypad 160E                        __ptext10 1A7E                        __ptext11 19B6  
                      __ptext20 1AB6                        __ptext12 1B54                        __ptext13 189E  
                      __ptext14 190E                        __ptext15 1BAC                        __ptext16 1522  
                      __ptext17 16B2                        __ptext18 17B4                        __ptext19 1B94  
                   _logged_user 00BA                   __size_of_main 0808            main@credential_state 0159  
         Eeprom_Write_Byte@data 0010        Eeprom_Write_Byte@address 0011                        int$flags 0050  
                   _OSCTUNEbits 000F9B                      _INTCONbits 000FF2              Lcd_Write_Char@temp 0011  
                      intlevel2 0000                 _running_display 108A        __end_of_Eeprom_Read_Byte 1BC0  
            Lcd_Set_Cursor@temp 0016                ??_mcu_initialise 0011                  menu_main@F3618 0049  
        start_routine@error_msg 0070                     _SSPCON1bits 000FC6               __CFG_FOSC$INTIO67 000000  
