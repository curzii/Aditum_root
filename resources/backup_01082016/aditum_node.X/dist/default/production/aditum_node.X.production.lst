

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Mon Aug 01 14:23:10 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    20  0000                     _OSCCON	set	4051
    21  0000                     _PORTA	set	3968
    22  0000                     _PORTB	set	3969
    23  0000                     _PORTBbits	set	3969
    24  0000                     _PORTC	set	3970
    25  0000                     _PORTD	set	3971
    26  0000                     _PORTDbits	set	3971
    27  0000                     _TRISA	set	3986
    28  0000                     _TRISB	set	3987
    29  0000                     _TRISC	set	3988
    30  0000                     _TRISD	set	3989
    31                           
    32                           	psect	smallconst
    33  000600                     __psmallconst:
    34                           	opt stack 0
    35  000600  00                 	db	0
    36  000601                     STR_3:
    37  000601  67                 	db	103	;'g'
    38  000602  72                 	db	114	;'r'
    39  000603  61                 	db	97	;'a'
    40  000604  6E                 	db	110	;'n'
    41  000605  74                 	db	116	;'t'
    42  000606  65                 	db	101	;'e'
    43  000607  64                 	db	100	;'d'
    44  000608  20                 	db	32
    45  000609  61                 	db	97	;'a'
    46  00060A  63                 	db	99	;'c'
    47  00060B  63                 	db	99	;'c'
    48  00060C  65                 	db	101	;'e'
    49  00060D  73                 	db	115	;'s'
    50  00060E  73                 	db	115	;'s'
    51  00060F  21                 	db	33
    52  000610  00                 	db	0
    53  000611                     STR_2:
    54  000611  59                 	db	89	;'Y'
    55  000612  6F                 	db	111	;'o'
    56  000613  75                 	db	117	;'u'
    57  000614  20                 	db	32
    58  000615  68                 	db	104	;'h'
    59  000616  61                 	db	97	;'a'
    60  000617  76                 	db	118	;'v'
    61  000618  65                 	db	101	;'e'
    62  000619  20                 	db	32
    63  00061A  62                 	db	98	;'b'
    64  00061B  65                 	db	101	;'e'
    65  00061C  65                 	db	101	;'e'
    66  00061D  6E                 	db	110	;'n'
    67  00061E  00                 	db	0
    68  00061F                     STR_1:
    69  00061F  53                 	db	83	;'S'
    70  000620  74                 	db	116	;'t'
    71  000621  75                 	db	117	;'u'
    72  000622  64                 	db	100	;'d'
    73  000623  65                 	db	101	;'e'
    74  000624  6E                 	db	110	;'n'
    75  000625  74                 	db	116	;'t'
    76  000626  20                 	db	32
    77  000627  4E                 	db	78	;'N'
    78  000628  72                 	db	114	;'r'
    79  000629  3A                 	db	58	;':'
    80  00062A  00                 	db	0
    81                           
    82                           ; #config settings
    83  00062B  00                 	db	0	; dummy byte at the end
    84  0000                     
    85                           	psect	cinit
    86  0009F4                     __pcinit:
    87                           	opt stack 0
    88  0009F4                     start_initialization:
    89                           	opt stack 0
    90  0009F4                     __initialization:
    91                           	opt stack 0
    92  0009F4                     end_of_initialization:
    93                           	opt stack 0
    94  0009F4                     __end_of__initialization:
    95                           	opt stack 0
    96  0009F4  0E00               	movlw	low (__Lsmallconst shr (0+16))
    97  0009F6  6EF8               	movwf	tblptru,c
    98  0009F8  0E06               	movlw	high __Lsmallconst
    99  0009FA  6EF7               	movwf	tblptrh,c
   100  0009FC  0100               	movlb	0
   101  0009FE  EF16  F003         	goto	_main	;jump to C main() function
   102                           tblptru	equ	0xFF8
   103                           tblptrh	equ	0xFF7
   104                           
   105                           	psect	cstackCOMRAM
   106  000001                     __pcstackCOMRAM:
   107                           	opt stack 0
   108  000001                     Lcd_Port@a:
   109                           	opt stack 0
   110                           
   111                           ; 1 bytes @ 0x0
   112  000001                     	ds	1
   113  000002                     Lcd_Cmd@a:
   114                           	opt stack 0
   115  000002                     Lcd_Write_Char@temp:
   116                           	opt stack 0
   117                           
   118                           ; 1 bytes @ 0x1
   119  000002                     	ds	1
   120  000003                     ??_Lcd_Init:
   121  000003                     Lcd_Set_Cursor@b:
   122                           	opt stack 0
   123  000003                     Lcd_Write_Char@y:
   124                           	opt stack 0
   125                           
   126                           ; 1 bytes @ 0x2
   127  000003                     	ds	1
   128  000004                     Lcd_Set_Cursor@a:
   129                           	opt stack 0
   130  000004                     Lcd_Write_Char@a:
   131                           	opt stack 0
   132                           
   133                           ; 1 bytes @ 0x3
   134  000004                     	ds	1
   135  000005                     Lcd_Set_Cursor@z:
   136                           	opt stack 0
   137  000005                     Lcd_Write_String@a:
   138                           	opt stack 0
   139                           
   140                           ; 2 bytes @ 0x4
   141  000005                     	ds	1
   142  000006                     Lcd_Set_Cursor@y:
   143                           	opt stack 0
   144                           
   145                           ; 1 bytes @ 0x5
   146  000006                     	ds	1
   147  000007                     ??_Lcd_Write_String:
   148  000007                     Lcd_Set_Cursor@temp:
   149                           	opt stack 0
   150                           
   151                           ; 1 bytes @ 0x6
   152  000007                     	ds	2
   153  000009                     Lcd_Write_String@i:
   154                           	opt stack 0
   155                           
   156                           ; 2 bytes @ 0x8
   157  000009                     	ds	2
   158  00000B                     ??_main:
   159                           
   160                           ; 1 bytes @ 0xA
   161  00000B                     	ds	1
   162  00000C                     main@i:
   163                           	opt stack 0
   164                           
   165                           ; 2 bytes @ 0xB
   166  00000C                     	ds	2
   167  00000E                     main@i_233:
   168                           	opt stack 0
   169                           
   170                           ; 2 bytes @ 0xD
   171  00000E                     	ds	2
   172  000010                     main@x:
   173                           	opt stack 0
   174                           
   175                           ; 1 bytes @ 0xF
   176  000010                     	ds	1
   177  000011                     main@n:
   178                           	opt stack 0
   179                           
   180                           ; 2 bytes @ 0x10
   181  000011                     	ds	2
   182                           tblptru	equ	0xFF8
   183                           tblptrh	equ	0xFF7
   184                           
   185 ;;
   186 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   187 ;;
   188 ;; *************** function _main *****************
   189 ;; Defined at:
   190 ;;		line 19 in file "main.c"
   191 ;; Parameters:    Size  Location     Type
   192 ;;		None
   193 ;; Auto vars:     Size  Location     Type
   194 ;;  i               2   13[COMRAM] int 
   195 ;;  i               2   11[COMRAM] int 
   196 ;;  n               2   16[COMRAM] int 
   197 ;;  x               1   15[COMRAM] unsigned char 
   198 ;; Return value:  Size  Location     Type
   199 ;;                  1    wreg      void 
   200 ;; Registers used:
   201 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   202 ;; Tracked objects:
   203 ;;		On entry : 0/0
   204 ;;		On exit  : 0/0
   205 ;;		Unchanged: 0/0
   206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   207 ;;      Params:         0       0       0       0       0       0       0
   208 ;;      Locals:         7       0       0       0       0       0       0
   209 ;;      Temps:          1       0       0       0       0       0       0
   210 ;;      Totals:         8       0       0       0       0       0       0
   211 ;;Total ram usage:        8 bytes
   212 ;; Hardware stack levels required when called:    3
   213 ;; This function calls:
   214 ;;		_Lcd_Clear
   215 ;;		_Lcd_Init
   216 ;;		_Lcd_Set_Cursor
   217 ;;		_Lcd_Write_Char
   218 ;;		_Lcd_Write_String
   219 ;;		_mcu_initialise
   220 ;;		_read_keypad
   221 ;; This function is called by:
   222 ;;		Startup code after reset
   223 ;; This function uses a non-reentrant model
   224 ;;
   225                           
   226                           	psect	text0
   227  00062C                     __ptext0:
   228                           	opt stack 0
   229  00062C                     _main:
   230                           	opt stack 28
   231                           
   232                           ;main.c: 22: mcu_initialise();
   233                           
   234                           ;incstack = 0
   235  00062C  ECDB  F004         	call	_mcu_initialise	;wreg free
   236                           
   237                           ;main.c: 23: Lcd_Init();
   238  000630  EC20  F004         	call	_Lcd_Init	;wreg free
   239                           
   240                           ;main.c: 24: Lcd_Clear();
   241  000634  EC01  F005         	call	_Lcd_Clear	;wreg free
   242                           
   243                           ;main.c: 26: int n = 0;
   244  000638  0E00               	movlw	0
   245  00063A  6E12               	movwf	main@n+1,c
   246  00063C  0E00               	movlw	0
   247  00063E  6E11               	movwf	main@n,c
   248  000640                     l999:
   249                           
   250                           ;main.c: 30: {
   251                           ;main.c: 31: if (n == 0)
   252  000640  5011               	movf	main@n,w,c
   253  000642  1012               	iorwf	main@n+1,w,c
   254  000644  A4D8               	btfss	status,2,c
   255  000646  D01A               	goto	l1011
   256                           
   257                           ;main.c: 32: {
   258                           ;main.c: 33: Lcd_Clear();
   259  000648  EC01  F005         	call	_Lcd_Clear	;wreg free
   260                           
   261                           ;main.c: 34: _delay((unsigned long)((10)*(16000000/4000.0)));
   262  00064C  0E34               	movlw	52
   263  00064E  6E0B               	movwf	??_main& (0+255),c
   264  000650  0EF2               	movlw	242
   265  000652                     u377:
   266  000652  2EE8               	decfsz	wreg,f,c
   267  000654  D7FE               	goto	u377
   268  000656  2E0B               	decfsz	??_main& (0+255),f,c
   269  000658  D7FC               	goto	u377
   270                           
   271                           ;main.c: 35: Lcd_Set_Cursor(1, 1);
   272  00065A  0E01               	movlw	1
   273  00065C  6E03               	movwf	Lcd_Set_Cursor@b,c
   274  00065E  0E01               	movlw	1
   275  000660  EC5C  F004         	call	_Lcd_Set_Cursor
   276                           
   277                           ;main.c: 36: Lcd_Write_String("Student Nr:");
   278  000664  0E1F               	movlw	low STR_1
   279  000666  6E05               	movwf	Lcd_Write_String@a,c
   280  000668  0E06               	movlw	high STR_1
   281  00066A  6E06               	movwf	Lcd_Write_String@a+1,c
   282  00066C  EC84  F004         	call	_Lcd_Write_String	;wreg free
   283                           
   284                           ;main.c: 37: Lcd_Set_Cursor(2,2);
   285  000670  0E02               	movlw	2
   286  000672  6E03               	movwf	Lcd_Set_Cursor@b,c
   287  000674  0E02               	movlw	2
   288  000676  EC5C  F004         	call	_Lcd_Set_Cursor
   289                           
   290                           ;main.c: 38: }
   291  00067A  D03E               	goto	l1037
   292  00067C                     l1011:
   293                           
   294                           ;main.c: 39: else if (n == 8)
   295  00067C  0E08               	movlw	8
   296  00067E  1811               	xorwf	main@n,w,c
   297  000680  1012               	iorwf	main@n+1,w,c
   298  000682  A4D8               	btfss	status,2,c
   299  000684  D039               	goto	l1037
   300                           
   301                           ;main.c: 40: {
   302                           ;main.c: 42: Lcd_Clear();
   303  000686  EC01  F005         	call	_Lcd_Clear	;wreg free
   304                           
   305                           ;main.c: 43: _delay((unsigned long)((10)*(16000000/4000.0)));
   306  00068A  0E34               	movlw	52
   307  00068C  6E0B               	movwf	??_main& (0+255),c
   308  00068E  0EF2               	movlw	242
   309  000690                     u387:
   310  000690  2EE8               	decfsz	wreg,f,c
   311  000692  D7FE               	goto	u387
   312  000694  2E0B               	decfsz	??_main& (0+255),f,c
   313  000696  D7FC               	goto	u387
   314                           
   315                           ;main.c: 44: Lcd_Set_Cursor(1,1);
   316  000698  0E01               	movlw	1
   317  00069A  6E03               	movwf	Lcd_Set_Cursor@b,c
   318  00069C  0E01               	movlw	1
   319  00069E  EC5C  F004         	call	_Lcd_Set_Cursor
   320                           
   321                           ;main.c: 45: Lcd_Write_String("You have been");
   322  0006A2  0E11               	movlw	low STR_2
   323  0006A4  6E05               	movwf	Lcd_Write_String@a,c
   324  0006A6  0E06               	movlw	high STR_2
   325  0006A8  6E06               	movwf	Lcd_Write_String@a+1,c
   326  0006AA  EC84  F004         	call	_Lcd_Write_String	;wreg free
   327                           
   328                           ;main.c: 46: Lcd_Set_Cursor(2,1);
   329  0006AE  0E01               	movlw	1
   330  0006B0  6E03               	movwf	Lcd_Set_Cursor@b,c
   331  0006B2  0E02               	movlw	2
   332  0006B4  EC5C  F004         	call	_Lcd_Set_Cursor
   333                           
   334                           ;main.c: 47: Lcd_Write_String("granted access!");
   335  0006B8  0E01               	movlw	low STR_3
   336  0006BA  6E05               	movwf	Lcd_Write_String@a,c
   337  0006BC  0E06               	movlw	high STR_3
   338  0006BE  6E06               	movwf	Lcd_Write_String@a+1,c
   339  0006C0  EC84  F004         	call	_Lcd_Write_String	;wreg free
   340                           
   341                           ;main.c: 48: for (int i = 0; i < 1000; i++)
   342  0006C4  0E00               	movlw	0
   343  0006C6  6E0D               	movwf	main@i+1,c
   344  0006C8  0E00               	movlw	0
   345  0006CA  6E0C               	movwf	main@i,c
   346  0006CC                     l1027:
   347  0006CC  BE0D               	btfsc	main@i+1,7,c
   348  0006CE  D006               	goto	l1031
   349  0006D0  0EE8               	movlw	232
   350  0006D2  5C0C               	subwf	main@i,w,c
   351  0006D4  0E03               	movlw	3
   352  0006D6  580D               	subwfb	main@i+1,w,c
   353  0006D8  B0D8               	btfsc	status,0,c
   354  0006DA  D00A               	goto	l1035
   355  0006DC                     l1031:
   356                           
   357                           ;main.c: 49: _delay((unsigned long)((10)*(16000000/4000.0)));
   358  0006DC  0E34               	movlw	52
   359  0006DE  6E0B               	movwf	??_main& (0+255),c
   360  0006E0  0EF2               	movlw	242
   361  0006E2                     u397:
   362  0006E2  2EE8               	decfsz	wreg,f,c
   363  0006E4  D7FE               	goto	u397
   364  0006E6  2E0B               	decfsz	??_main& (0+255),f,c
   365  0006E8  D7FC               	goto	u397
   366  0006EA  4A0C               	infsnz	main@i,f,c
   367  0006EC  2A0D               	incf	main@i+1,f,c
   368  0006EE  D7EE               	goto	l1027
   369  0006F0                     l1035:
   370                           
   371                           ;main.c: 50: n = 0;
   372  0006F0  0E00               	movlw	0
   373  0006F2  6E12               	movwf	main@n+1,c
   374  0006F4  0E00               	movlw	0
   375  0006F6  6E11               	movwf	main@n,c
   376  0006F8                     l1037:
   377                           
   378                           ;main.c: 51: }
   379                           ;main.c: 52: x = read_keypad();
   380  0006F8  ECCC  F003         	call	_read_keypad	;wreg free
   381  0006FC  6E10               	movwf	main@x,c
   382                           
   383                           ;main.c: 53: if (x != '_')
   384  0006FE  0E5F               	movlw	95
   385  000700  1810               	xorwf	main@x,w,c
   386  000702  B4D8               	btfsc	status,2,c
   387  000704  D01B               	goto	l1055
   388                           
   389                           ;main.c: 54: {
   390                           ;main.c: 55: Lcd_Write_Char(x);
   391  000706  5010               	movf	main@x,w,c
   392  000708  ECA9  F004         	call	_Lcd_Write_Char
   393                           
   394                           ;main.c: 56: n++;
   395  00070C  4A11               	infsnz	main@n,f,c
   396  00070E  2A12               	incf	main@n+1,f,c
   397                           
   398                           ;main.c: 57: for (int i = 0; i < 5; i++)
   399  000710  0E00               	movlw	0
   400  000712  6E0F               	movwf	main@i_233+1,c
   401  000714  0E00               	movlw	0
   402  000716  6E0E               	movwf	main@i_233,c
   403  000718                     l1047:
   404  000718  BE0F               	btfsc	main@i_233+1,7,c
   405  00071A  D006               	goto	l1051
   406  00071C  500F               	movf	main@i_233+1,w,c
   407  00071E  E10E               	bnz	l1055
   408  000720  0E05               	movlw	5
   409  000722  5C0E               	subwf	main@i_233,w,c
   410  000724  B0D8               	btfsc	status,0,c
   411  000726  D00A               	goto	l1055
   412  000728                     l1051:
   413                           
   414                           ;main.c: 58: _delay((unsigned long)((10)*(16000000/4000.0)));
   415  000728  0E34               	movlw	52
   416  00072A  6E0B               	movwf	??_main& (0+255),c
   417  00072C  0EF2               	movlw	242
   418  00072E                     u407:
   419  00072E  2EE8               	decfsz	wreg,f,c
   420  000730  D7FE               	goto	u407
   421  000732  2E0B               	decfsz	??_main& (0+255),f,c
   422  000734  D7FC               	goto	u407
   423  000736  4A0E               	infsnz	main@i_233,f,c
   424  000738  2A0F               	incf	main@i_233+1,f,c
   425  00073A  D7EE               	goto	l1047
   426  00073C                     l1055:
   427                           
   428                           ;main.c: 59: }
   429                           ;main.c: 61: _delay((unsigned long)((20)*(16000000/4000.0)));
   430  00073C  0E68               	movlw	104
   431  00073E  6E0B               	movwf	??_main& (0+255),c
   432  000740  0EE4               	movlw	228
   433  000742                     u417:
   434  000742  2EE8               	decfsz	wreg,f,c
   435  000744  D7FE               	goto	u417
   436  000746  2E0B               	decfsz	??_main& (0+255),f,c
   437  000748  D7FC               	goto	u417
   438  00074A  F000 F000          	nop2	
   439                           
   440                           ;main.c: 62: _delay((unsigned long)((20)*(16000000/4000.0)));
   441  00074E  0E68               	movlw	104
   442  000750  6E0B               	movwf	??_main& (0+255),c
   443  000752  0EE4               	movlw	228
   444  000754                     u427:
   445  000754  2EE8               	decfsz	wreg,f,c
   446  000756  D7FE               	goto	u427
   447  000758  2E0B               	decfsz	??_main& (0+255),f,c
   448  00075A  D7FC               	goto	u427
   449  00075C  F000 F000          	nop2	
   450                           
   451                           ;main.c: 63: _delay((unsigned long)((20)*(16000000/4000.0)));
   452  000760  0E68               	movlw	104
   453  000762  6E0B               	movwf	??_main& (0+255),c
   454  000764  0EE4               	movlw	228
   455  000766                     u437:
   456  000766  2EE8               	decfsz	wreg,f,c
   457  000768  D7FE               	goto	u437
   458  00076A  2E0B               	decfsz	??_main& (0+255),f,c
   459  00076C  D7FC               	goto	u437
   460  00076E  F000 F000          	nop2	
   461                           
   462                           ;main.c: 64: _delay((unsigned long)((20)*(16000000/4000.0)));
   463  000772  0E68               	movlw	104
   464  000774  6E0B               	movwf	??_main& (0+255),c
   465  000776  0EE4               	movlw	228
   466  000778                     u447:
   467  000778  2EE8               	decfsz	wreg,f,c
   468  00077A  D7FE               	goto	u447
   469  00077C  2E0B               	decfsz	??_main& (0+255),f,c
   470  00077E  D7FC               	goto	u447
   471  000780  F000 F000          	nop2	
   472                           
   473                           ;main.c: 65: _delay((unsigned long)((20)*(16000000/4000.0)));
   474  000784  0E68               	movlw	104
   475  000786  6E0B               	movwf	??_main& (0+255),c
   476  000788  0EE4               	movlw	228
   477  00078A                     u457:
   478  00078A  2EE8               	decfsz	wreg,f,c
   479  00078C  D7FE               	goto	u457
   480  00078E  2E0B               	decfsz	??_main& (0+255),f,c
   481  000790  D7FC               	goto	u457
   482  000792  F000 F000          	nop2	
   483  000796  D754               	goto	l999
   484  000798                     __end_of_main:
   485                           	opt stack 0
   486                           tblptru	equ	0xFF8
   487                           tblptrh	equ	0xFF7
   488                           wreg	equ	0xFE8
   489                           status	equ	0xFD8
   490                           
   491 ;; *************** function _read_keypad *****************
   492 ;; Defined at:
   493 ;;		line 85 in file "main.c"
   494 ;; Parameters:    Size  Location     Type
   495 ;;		None
   496 ;; Auto vars:     Size  Location     Type
   497 ;;		None
   498 ;; Return value:  Size  Location     Type
   499 ;;                  1    wreg      unsigned char 
   500 ;; Registers used:
   501 ;;		wreg, status,2
   502 ;; Tracked objects:
   503 ;;		On entry : 0/0
   504 ;;		On exit  : 0/0
   505 ;;		Unchanged: 0/0
   506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   507 ;;      Params:         0       0       0       0       0       0       0
   508 ;;      Locals:         0       0       0       0       0       0       0
   509 ;;      Temps:          0       0       0       0       0       0       0
   510 ;;      Totals:         0       0       0       0       0       0       0
   511 ;;Total ram usage:        0 bytes
   512 ;; Hardware stack levels used:    1
   513 ;; This function calls:
   514 ;;		Nothing
   515 ;; This function is called by:
   516 ;;		_main
   517 ;; This function uses a non-reentrant model
   518 ;;
   519                           
   520                           	psect	text1
   521  000798                     __ptext1:
   522                           	opt stack 0
   523  000798                     _read_keypad:
   524                           	opt stack 30
   525                           
   526                           ;main.c: 87: TRISB = 0b00011110;
   527                           
   528                           ;incstack = 0
   529  000798  0E1E               	movlw	30
   530  00079A  6E93               	movwf	3987,c	;volatile
   531                           
   532                           ;main.c: 88: TRISC = 0x00;
   533  00079C  0E00               	movlw	0
   534  00079E  6E94               	movwf	3988,c	;volatile
   535                           
   536                           ;main.c: 89: PORTD = 0b00000001;
   537  0007A0  0E01               	movlw	1
   538  0007A2  6E83               	movwf	3971,c	;volatile
   539                           
   540                           ;main.c: 90: if (PORTBbits.RB1) {PORTC = 0x00; return '1';}
   541  0007A4  A281               	btfss	3969,1,c	;volatile
   542  0007A6  D004               	goto	l89
   543  0007A8  0E00               	movlw	0
   544  0007AA  6E82               	movwf	3970,c	;volatile
   545  0007AC  0E31               	movlw	49
   546  0007AE  0012               	return	
   547  0007B0                     l89:
   548                           
   549                           ;main.c: 91: if (PORTBbits.RB2) {PORTC = 0x00; return '4';}
   550  0007B0  A481               	btfss	3969,2,c	;volatile
   551  0007B2  D004               	goto	l91
   552  0007B4  0E00               	movlw	0
   553  0007B6  6E82               	movwf	3970,c	;volatile
   554  0007B8  0E34               	movlw	52
   555  0007BA  0012               	return	
   556  0007BC                     l91:
   557                           
   558                           ;main.c: 92: if (PORTBbits.RB3) {PORTC = 0x00; return '7';}
   559  0007BC  A681               	btfss	3969,3,c	;volatile
   560  0007BE  D004               	goto	l92
   561  0007C0  0E00               	movlw	0
   562  0007C2  6E82               	movwf	3970,c	;volatile
   563  0007C4  0E37               	movlw	55
   564  0007C6  0012               	return	
   565  0007C8                     l92:
   566                           
   567                           ;main.c: 93: if (PORTBbits.RB4) {PORTC = 0x00; return '*';}
   568  0007C8  A881               	btfss	3969,4,c	;volatile
   569  0007CA  D004               	goto	l845
   570  0007CC  0E00               	movlw	0
   571  0007CE  6E82               	movwf	3970,c	;volatile
   572  0007D0  0E2A               	movlw	42
   573  0007D2  0012               	return	
   574  0007D4                     l845:
   575                           
   576                           ;main.c: 94: PORTD = 0b00000010;
   577  0007D4  0E02               	movlw	2
   578  0007D6  6E83               	movwf	3971,c	;volatile
   579                           
   580                           ;main.c: 95: if (PORTBbits.RB1) {PORTC = 0x00; return '2';}
   581  0007D8  A281               	btfss	3969,1,c	;volatile
   582  0007DA  D004               	goto	l94
   583  0007DC  0E00               	movlw	0
   584  0007DE  6E82               	movwf	3970,c	;volatile
   585  0007E0  0E32               	movlw	50
   586  0007E2  0012               	return	
   587  0007E4                     l94:
   588                           
   589                           ;main.c: 96: if (PORTBbits.RB2) {PORTC = 0x00; return '5';}
   590  0007E4  A481               	btfss	3969,2,c	;volatile
   591  0007E6  D004               	goto	l95
   592  0007E8  0E00               	movlw	0
   593  0007EA  6E82               	movwf	3970,c	;volatile
   594  0007EC  0E35               	movlw	53
   595  0007EE  0012               	return	
   596  0007F0                     l95:
   597                           
   598                           ;main.c: 97: if (PORTBbits.RB3) {PORTC = 0x00; return '8';}
   599  0007F0  A681               	btfss	3969,3,c	;volatile
   600  0007F2  D004               	goto	l96
   601  0007F4  0E00               	movlw	0
   602  0007F6  6E82               	movwf	3970,c	;volatile
   603  0007F8  0E38               	movlw	56
   604  0007FA  0012               	return	
   605  0007FC                     l96:
   606                           
   607                           ;main.c: 98: if (PORTBbits.RB4) {PORTC = 0x00; return '0';}
   608  0007FC  A881               	btfss	3969,4,c	;volatile
   609  0007FE  D004               	goto	l873
   610  000800  0E00               	movlw	0
   611  000802  6E82               	movwf	3970,c	;volatile
   612  000804  0E30               	movlw	48
   613  000806  0012               	return	
   614  000808                     l873:
   615                           
   616                           ;main.c: 99: PORTD = 0b00000100;
   617  000808  0E04               	movlw	4
   618  00080A  6E83               	movwf	3971,c	;volatile
   619                           
   620                           ;main.c: 100: if (PORTBbits.RB1) {PORTC = 0x00; return '3';}
   621  00080C  A281               	btfss	3969,1,c	;volatile
   622  00080E  D004               	goto	l98
   623  000810  0E00               	movlw	0
   624  000812  6E82               	movwf	3970,c	;volatile
   625  000814  0E33               	movlw	51
   626  000816  0012               	return	
   627  000818                     l98:
   628                           
   629                           ;main.c: 101: if (PORTBbits.RB2) {PORTC = 0x00; return '6';}
   630  000818  A481               	btfss	3969,2,c	;volatile
   631  00081A  D004               	goto	l99
   632  00081C  0E00               	movlw	0
   633  00081E  6E82               	movwf	3970,c	;volatile
   634  000820  0E36               	movlw	54
   635  000822  0012               	return	
   636  000824                     l99:
   637                           
   638                           ;main.c: 102: if (PORTBbits.RB3) {PORTC = 0x00; return '9';}
   639  000824  A681               	btfss	3969,3,c	;volatile
   640  000826  D004               	goto	l100
   641  000828  0E00               	movlw	0
   642  00082A  6E82               	movwf	3970,c	;volatile
   643  00082C  0E39               	movlw	57
   644  00082E  0012               	return	
   645  000830                     l100:
   646                           
   647                           ;main.c: 103: if (PORTBbits.RB4) {PORTC = 0x00; return '#';}
   648  000830  A881               	btfss	3969,4,c	;volatile
   649  000832  D004               	goto	l901
   650  000834  0E00               	movlw	0
   651  000836  6E82               	movwf	3970,c	;volatile
   652  000838  0E23               	movlw	35
   653  00083A  0012               	return	
   654  00083C                     l901:
   655                           
   656                           ;main.c: 104: return '_';
   657  00083C  0E5F               	movlw	95
   658  00083E  0012               	return	
   659  000840                     __end_of_read_keypad:
   660                           	opt stack 0
   661                           tblptru	equ	0xFF8
   662                           tblptrh	equ	0xFF7
   663                           wreg	equ	0xFE8
   664                           status	equ	0xFD8
   665                           
   666 ;; *************** function _mcu_initialise *****************
   667 ;; Defined at:
   668 ;;		line 72 in file "main.c"
   669 ;; Parameters:    Size  Location     Type
   670 ;;		None
   671 ;; Auto vars:     Size  Location     Type
   672 ;;		None
   673 ;; Return value:  Size  Location     Type
   674 ;;                  1    wreg      void 
   675 ;; Registers used:
   676 ;;		wreg, status,2
   677 ;; Tracked objects:
   678 ;;		On entry : 0/0
   679 ;;		On exit  : 0/0
   680 ;;		Unchanged: 0/0
   681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   682 ;;      Params:         0       0       0       0       0       0       0
   683 ;;      Locals:         0       0       0       0       0       0       0
   684 ;;      Temps:          0       0       0       0       0       0       0
   685 ;;      Totals:         0       0       0       0       0       0       0
   686 ;;Total ram usage:        0 bytes
   687 ;; Hardware stack levels used:    1
   688 ;; This function calls:
   689 ;;		Nothing
   690 ;; This function is called by:
   691 ;;		_main
   692 ;; This function uses a non-reentrant model
   693 ;;
   694                           
   695                           	psect	text2
   696  0009B6                     __ptext2:
   697                           	opt stack 0
   698  0009B6                     _mcu_initialise:
   699                           	opt stack 30
   700                           
   701                           ;main.c: 74: OSCCON = 0b1111011;
   702                           
   703                           ;incstack = 0
   704  0009B6  0E7B               	movlw	123
   705  0009B8  6ED3               	movwf	4051,c	;volatile
   706                           
   707                           ;main.c: 75: TRISA = 0x00;
   708  0009BA  0E00               	movlw	0
   709  0009BC  6E92               	movwf	3986,c	;volatile
   710                           
   711                           ;main.c: 76: TRISB = 0x00;
   712  0009BE  0E00               	movlw	0
   713  0009C0  6E93               	movwf	3987,c	;volatile
   714                           
   715                           ;main.c: 77: TRISC = 0x00;
   716  0009C2  0E00               	movlw	0
   717  0009C4  6E94               	movwf	3988,c	;volatile
   718                           
   719                           ;main.c: 78: TRISD = 0x00;
   720  0009C6  0E00               	movlw	0
   721  0009C8  6E95               	movwf	3989,c	;volatile
   722                           
   723                           ;main.c: 79: PORTA = 0x00;
   724  0009CA  0E00               	movlw	0
   725  0009CC  6E80               	movwf	3968,c	;volatile
   726                           
   727                           ;main.c: 80: PORTB = 0x00;
   728  0009CE  0E00               	movlw	0
   729  0009D0  6E81               	movwf	3969,c	;volatile
   730                           
   731                           ;main.c: 81: PORTC = 0x00;
   732  0009D2  0E00               	movlw	0
   733  0009D4  6E82               	movwf	3970,c	;volatile
   734                           
   735                           ;main.c: 82: PORTD = 0x00;
   736  0009D6  0E00               	movlw	0
   737  0009D8  6E83               	movwf	3971,c	;volatile
   738  0009DA  0012               	return		;funcret
   739  0009DC                     __end_of_mcu_initialise:
   740                           	opt stack 0
   741                           tblptru	equ	0xFF8
   742                           tblptrh	equ	0xFF7
   743                           wreg	equ	0xFE8
   744                           status	equ	0xFD8
   745                           
   746 ;; *************** function _Lcd_Write_String *****************
   747 ;; Defined at:
   748 ;;		line 110 in file "lcd.h"
   749 ;; Parameters:    Size  Location     Type
   750 ;;  a               2    4[COMRAM] PTR unsigned char 
   751 ;;		 -> STR_3(16), STR_2(14), STR_1(12), 
   752 ;; Auto vars:     Size  Location     Type
   753 ;;  i               2    8[COMRAM] int 
   754 ;; Return value:  Size  Location     Type
   755 ;;                  1    wreg      void 
   756 ;; Registers used:
   757 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   758 ;; Tracked objects:
   759 ;;		On entry : 0/0
   760 ;;		On exit  : 0/0
   761 ;;		Unchanged: 0/0
   762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   763 ;;      Params:         2       0       0       0       0       0       0
   764 ;;      Locals:         2       0       0       0       0       0       0
   765 ;;      Temps:          2       0       0       0       0       0       0
   766 ;;      Totals:         6       0       0       0       0       0       0
   767 ;;Total ram usage:        6 bytes
   768 ;; Hardware stack levels used:    1
   769 ;; Hardware stack levels required when called:    2
   770 ;; This function calls:
   771 ;;		_Lcd_Write_Char
   772 ;; This function is called by:
   773 ;;		_main
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           	psect	text3
   778  000908                     __ptext3:
   779                           	opt stack 0
   780  000908                     _Lcd_Write_String:
   781                           	opt stack 28
   782                           
   783                           ;lcd.h: 112: int i;
   784                           ;lcd.h: 113: for(i=0;a[i]!='\0';i++)
   785                           
   786                           ;incstack = 0
   787  000908  0E00               	movlw	0
   788  00090A  6E0A               	movwf	Lcd_Write_String@i+1,c
   789  00090C  0E00               	movlw	0
   790  00090E  6E09               	movwf	Lcd_Write_String@i,c
   791  000910  D010               	goto	l993
   792  000912                     l989:
   793                           
   794                           ;lcd.h: 114: Lcd_Write_Char(a[i]);
   795  000912  5009               	movf	Lcd_Write_String@i,w,c
   796  000914  2405               	addwf	Lcd_Write_String@a,w,c
   797  000916  6E07               	movwf	??_Lcd_Write_String& (0+255),c
   798  000918  500A               	movf	Lcd_Write_String@i+1,w,c
   799  00091A  2006               	addwfc	Lcd_Write_String@a+1,w,c
   800  00091C  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
   801  00091E  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
   802  000922  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
   803  000926                     	if	0	;tblptru may be non-zero
   804  000926                     	endif
   805  000926                     	if	0	;tblptru may be non-zero
   806  000926                     	endif
   807  000926  0008               	tblrd		*
   808  000928  50F5               	movf	tablat,w,c
   809  00092A  ECA9  F004         	call	_Lcd_Write_Char
   810  00092E  4A09               	infsnz	Lcd_Write_String@i,f,c
   811  000930  2A0A               	incf	Lcd_Write_String@i+1,f,c
   812  000932                     l993:
   813  000932  5009               	movf	Lcd_Write_String@i,w,c
   814  000934  2405               	addwf	Lcd_Write_String@a,w,c
   815  000936  6E07               	movwf	??_Lcd_Write_String& (0+255),c
   816  000938  500A               	movf	Lcd_Write_String@i+1,w,c
   817  00093A  2006               	addwfc	Lcd_Write_String@a+1,w,c
   818  00093C  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
   819  00093E  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
   820  000942  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
   821  000946                     	if	0	;tblptru may be non-zero
   822  000946                     	endif
   823  000946                     	if	0	;tblptru may be non-zero
   824  000946                     	endif
   825  000946  0008               	tblrd		*
   826  000948  50F5               	movf	tablat,w,c
   827  00094A  0900               	iorlw	0
   828  00094C  B4D8               	btfsc	status,2,c
   829  00094E  0012               	return	
   830  000950  D7E0               	goto	l989
   831  000952                     __end_of_Lcd_Write_String:
   832                           	opt stack 0
   833                           tblptru	equ	0xFF8
   834                           tblptrh	equ	0xFF7
   835                           tblptrl	equ	0xFF6
   836                           tablat	equ	0xFF5
   837                           wreg	equ	0xFE8
   838                           status	equ	0xFD8
   839                           
   840 ;; *************** function _Lcd_Write_Char *****************
   841 ;; Defined at:
   842 ;;		line 94 in file "lcd.h"
   843 ;; Parameters:    Size  Location     Type
   844 ;;  a               1    wreg     unsigned char 
   845 ;; Auto vars:     Size  Location     Type
   846 ;;  a               1    3[COMRAM] unsigned char 
   847 ;;  y               1    2[COMRAM] unsigned char 
   848 ;;  temp            1    1[COMRAM] unsigned char 
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      void 
   851 ;; Registers used:
   852 ;;		wreg, status,2, status,0, cstack
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   858 ;;      Params:         0       0       0       0       0       0       0
   859 ;;      Locals:         3       0       0       0       0       0       0
   860 ;;      Temps:          0       0       0       0       0       0       0
   861 ;;      Totals:         3       0       0       0       0       0       0
   862 ;;Total ram usage:        3 bytes
   863 ;; Hardware stack levels used:    1
   864 ;; Hardware stack levels required when called:    1
   865 ;; This function calls:
   866 ;;		_Lcd_Port
   867 ;; This function is called by:
   868 ;;		_Lcd_Write_String
   869 ;;		_main
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873                           	psect	text4
   874  000952                     __ptext4:
   875                           	opt stack 0
   876  000952                     _Lcd_Write_Char:
   877                           	opt stack 28
   878                           
   879                           ;incstack = 0
   880                           ;Lcd_Write_Char@a stored from wreg
   881  000952  6E04               	movwf	Lcd_Write_Char@a,c
   882                           
   883                           ;lcd.h: 96: char temp,y;
   884                           ;lcd.h: 97: temp = a&0x0F;
   885  000954  5004               	movf	Lcd_Write_Char@a,w,c
   886  000956  0B0F               	andlw	15
   887  000958  6E02               	movwf	Lcd_Write_Char@temp,c
   888                           
   889                           ;lcd.h: 98: y = a&0xF0;
   890  00095A  5004               	movf	Lcd_Write_Char@a,w,c
   891  00095C  0BF0               	andlw	240
   892  00095E  6E03               	movwf	Lcd_Write_Char@y,c
   893                           
   894                           ;lcd.h: 99: PORTDbits.RD5 = 1;
   895  000960  8A83               	bsf	3971,5,c	;volatile
   896                           
   897                           ;lcd.h: 100: Lcd_Port(y>>4);
   898  000962  3803               	swapf	Lcd_Write_Char@y,w,c
   899  000964  0B0F               	andlw	15
   900  000966  ECC5  F004         	call	_Lcd_Port
   901                           
   902                           ;lcd.h: 101: PORTDbits.RD4 = 1;
   903  00096A  8883               	bsf	3971,4,c	;volatile
   904                           
   905                           ;lcd.h: 102: _delay((unsigned long)((40)*(16000000/4000000.0)));
   906  00096C  0E35               	movlw	53
   907  00096E                     u467:
   908  00096E  2EE8               	decfsz	wreg,f,c
   909  000970  D7FE               	goto	u467
   910  000972  F000               	nop	
   911                           
   912                           ;lcd.h: 103: PORTDbits.RD4 = 0;
   913  000974  9883               	bcf	3971,4,c	;volatile
   914                           
   915                           ;lcd.h: 104: Lcd_Port(temp);
   916  000976  5002               	movf	Lcd_Write_Char@temp,w,c
   917  000978  ECC5  F004         	call	_Lcd_Port
   918                           
   919                           ;lcd.h: 105: PORTDbits.RD4 = 1;
   920  00097C  8883               	bsf	3971,4,c	;volatile
   921                           
   922                           ;lcd.h: 106: _delay((unsigned long)((40)*(16000000/4000000.0)));
   923  00097E  0E35               	movlw	53
   924  000980                     u477:
   925  000980  2EE8               	decfsz	wreg,f,c
   926  000982  D7FE               	goto	u477
   927  000984  F000               	nop	
   928                           
   929                           ;lcd.h: 107: PORTDbits.RD4 = 0;
   930  000986  9883               	bcf	3971,4,c	;volatile
   931  000988  0012               	return		;funcret
   932  00098A                     __end_of_Lcd_Write_Char:
   933                           	opt stack 0
   934                           tblptru	equ	0xFF8
   935                           tblptrh	equ	0xFF7
   936                           tblptrl	equ	0xFF6
   937                           tablat	equ	0xFF5
   938                           wreg	equ	0xFE8
   939                           status	equ	0xFD8
   940                           
   941 ;; *************** function _Lcd_Set_Cursor *****************
   942 ;; Defined at:
   943 ;;		line 54 in file "lcd.h"
   944 ;; Parameters:    Size  Location     Type
   945 ;;  a               1    wreg     unsigned char 
   946 ;;  b               1    2[COMRAM] unsigned char 
   947 ;; Auto vars:     Size  Location     Type
   948 ;;  a               1    3[COMRAM] unsigned char 
   949 ;;  temp            1    6[COMRAM] unsigned char 
   950 ;;  y               1    5[COMRAM] unsigned char 
   951 ;;  z               1    4[COMRAM] unsigned char 
   952 ;; Return value:  Size  Location     Type
   953 ;;                  1    wreg      void 
   954 ;; Registers used:
   955 ;;		wreg, status,2, status,0, cstack
   956 ;; Tracked objects:
   957 ;;		On entry : 0/0
   958 ;;		On exit  : 0/0
   959 ;;		Unchanged: 0/0
   960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   961 ;;      Params:         1       0       0       0       0       0       0
   962 ;;      Locals:         4       0       0       0       0       0       0
   963 ;;      Temps:          0       0       0       0       0       0       0
   964 ;;      Totals:         5       0       0       0       0       0       0
   965 ;;Total ram usage:        5 bytes
   966 ;; Hardware stack levels used:    1
   967 ;; Hardware stack levels required when called:    2
   968 ;; This function calls:
   969 ;;		_Lcd_Cmd
   970 ;; This function is called by:
   971 ;;		_main
   972 ;; This function uses a non-reentrant model
   973 ;;
   974                           
   975                           	psect	text5
   976  0008B8                     __ptext5:
   977                           	opt stack 0
   978  0008B8                     _Lcd_Set_Cursor:
   979                           	opt stack 28
   980                           
   981                           ;incstack = 0
   982                           ;Lcd_Set_Cursor@a stored from wreg
   983  0008B8  6E04               	movwf	Lcd_Set_Cursor@a,c
   984                           
   985                           ;lcd.h: 56: char temp,z,y;
   986                           ;lcd.h: 57: if(a == 1)
   987  0008BA  0404               	decf	Lcd_Set_Cursor@a,w,c
   988  0008BC  A4D8               	btfss	status,2,c
   989  0008BE  D010               	goto	l979
   990                           
   991                           ;lcd.h: 58: {
   992                           ;lcd.h: 59: temp = 0x80 + b - 1;
   993  0008C0  5003               	movf	Lcd_Set_Cursor@b,w,c
   994  0008C2  0F7F               	addlw	127
   995  0008C4  6E07               	movwf	Lcd_Set_Cursor@temp,c
   996                           
   997                           ;lcd.h: 60: z = temp>>4;
   998  0008C6  3807               	swapf	Lcd_Set_Cursor@temp,w,c
   999  0008C8  0B0F               	andlw	15
  1000  0008CA  6E05               	movwf	Lcd_Set_Cursor@z,c
  1001                           
  1002                           ;lcd.h: 61: y = temp & 0x0F;
  1003  0008CC  5007               	movf	Lcd_Set_Cursor@temp,w,c
  1004  0008CE  0B0F               	andlw	15
  1005  0008D0  6E06               	movwf	Lcd_Set_Cursor@y,c
  1006                           
  1007                           ;lcd.h: 62: Lcd_Cmd(z);
  1008  0008D2  5005               	movf	Lcd_Set_Cursor@z,w,c
  1009  0008D4  ECEE  F004         	call	_Lcd_Cmd
  1010                           
  1011                           ;lcd.h: 63: Lcd_Cmd(y);
  1012  0008D8  5006               	movf	Lcd_Set_Cursor@y,w,c
  1013  0008DA  ECEE  F004         	call	_Lcd_Cmd
  1014                           
  1015                           ;lcd.h: 64: }
  1016  0008DE  0012               	return	
  1017  0008E0                     l979:
  1018                           
  1019                           ;lcd.h: 65: else if(a == 2)
  1020  0008E0  0E02               	movlw	2
  1021  0008E2  1804               	xorwf	Lcd_Set_Cursor@a,w,c
  1022  0008E4  A4D8               	btfss	status,2,c
  1023  0008E6  0012               	return	
  1024                           
  1025                           ;lcd.h: 66: {
  1026                           ;lcd.h: 67: temp = 0xC0 + b - 1;
  1027  0008E8  5003               	movf	Lcd_Set_Cursor@b,w,c
  1028  0008EA  0FBF               	addlw	191
  1029  0008EC  6E07               	movwf	Lcd_Set_Cursor@temp,c
  1030                           
  1031                           ;lcd.h: 68: z = temp>>4;
  1032  0008EE  3807               	swapf	Lcd_Set_Cursor@temp,w,c
  1033  0008F0  0B0F               	andlw	15
  1034  0008F2  6E05               	movwf	Lcd_Set_Cursor@z,c
  1035                           
  1036                           ;lcd.h: 69: y = temp & 0x0F;
  1037  0008F4  5007               	movf	Lcd_Set_Cursor@temp,w,c
  1038  0008F6  0B0F               	andlw	15
  1039  0008F8  6E06               	movwf	Lcd_Set_Cursor@y,c
  1040                           
  1041                           ;lcd.h: 70: Lcd_Cmd(z);
  1042  0008FA  5005               	movf	Lcd_Set_Cursor@z,w,c
  1043  0008FC  ECEE  F004         	call	_Lcd_Cmd
  1044                           
  1045                           ;lcd.h: 71: Lcd_Cmd(y);
  1046  000900  5006               	movf	Lcd_Set_Cursor@y,w,c
  1047  000902  ECEE  F004         	call	_Lcd_Cmd
  1048  000906  0012               	return	
  1049  000908                     __end_of_Lcd_Set_Cursor:
  1050                           	opt stack 0
  1051                           tblptru	equ	0xFF8
  1052                           tblptrh	equ	0xFF7
  1053                           tblptrl	equ	0xFF6
  1054                           tablat	equ	0xFF5
  1055                           wreg	equ	0xFE8
  1056                           status	equ	0xFD8
  1057                           
  1058 ;; *************** function _Lcd_Init *****************
  1059 ;; Defined at:
  1060 ;;		line 75 in file "lcd.h"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;		None
  1063 ;; Auto vars:     Size  Location     Type
  1064 ;;		None
  1065 ;; Return value:  Size  Location     Type
  1066 ;;                  1    wreg      void 
  1067 ;; Registers used:
  1068 ;;		wreg, status,2, cstack
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1074 ;;      Params:         0       0       0       0       0       0       0
  1075 ;;      Locals:         0       0       0       0       0       0       0
  1076 ;;      Temps:          1       0       0       0       0       0       0
  1077 ;;      Totals:         1       0       0       0       0       0       0
  1078 ;;Total ram usage:        1 bytes
  1079 ;; Hardware stack levels used:    1
  1080 ;; Hardware stack levels required when called:    2
  1081 ;; This function calls:
  1082 ;;		_Lcd_Cmd
  1083 ;;		_Lcd_Port
  1084 ;; This function is called by:
  1085 ;;		_main
  1086 ;; This function uses a non-reentrant model
  1087 ;;
  1088                           
  1089                           	psect	text6
  1090  000840                     __ptext6:
  1091                           	opt stack 0
  1092  000840                     _Lcd_Init:
  1093                           	opt stack 28
  1094                           
  1095                           ;lcd.h: 77: Lcd_Port(0x00);
  1096                           
  1097                           ;incstack = 0
  1098  000840  0E00               	movlw	0
  1099  000842  ECC5  F004         	call	_Lcd_Port
  1100                           
  1101                           ;lcd.h: 78: _delay((unsigned long)((20)*(16000000/4000.0)));
  1102  000846  0E68               	movlw	104
  1103  000848  6E03               	movwf	??_Lcd_Init& (0+255),c
  1104  00084A  0EE4               	movlw	228
  1105  00084C                     u487:
  1106  00084C  2EE8               	decfsz	wreg,f,c
  1107  00084E  D7FE               	goto	u487
  1108  000850  2E03               	decfsz	??_Lcd_Init& (0+255),f,c
  1109  000852  D7FC               	goto	u487
  1110  000854  F000 F000          	nop2	
  1111                           
  1112                           ;lcd.h: 79: Lcd_Cmd(0x03);
  1113  000858  0E03               	movlw	3
  1114  00085A  ECEE  F004         	call	_Lcd_Cmd
  1115                           
  1116                           ;lcd.h: 80: _delay((unsigned long)((5)*(16000000/4000.0)));
  1117  00085E  0E1A               	movlw	26
  1118  000860  6E03               	movwf	??_Lcd_Init& (0+255),c
  1119  000862  0EF8               	movlw	248
  1120  000864                     u497:
  1121  000864  2EE8               	decfsz	wreg,f,c
  1122  000866  D7FE               	goto	u497
  1123  000868  2E03               	decfsz	??_Lcd_Init& (0+255),f,c
  1124  00086A  D7FC               	goto	u497
  1125  00086C  F000 F000          	nop2	
  1126                           
  1127                           ;lcd.h: 81: Lcd_Cmd(0x03);
  1128  000870  0E03               	movlw	3
  1129  000872  ECEE  F004         	call	_Lcd_Cmd
  1130                           
  1131                           ;lcd.h: 82: _delay((unsigned long)((11)*(16000000/4000.0)));
  1132  000876  0E3A               	movlw	58
  1133  000878  6E03               	movwf	??_Lcd_Init& (0+255),c
  1134  00087A  0E23               	movlw	35
  1135  00087C                     u507:
  1136  00087C  2EE8               	decfsz	wreg,f,c
  1137  00087E  D7FE               	goto	u507
  1138  000880  2E03               	decfsz	??_Lcd_Init& (0+255),f,c
  1139  000882  D7FC               	goto	u507
  1140  000884  F000               	nop	
  1141                           
  1142                           ;lcd.h: 83: Lcd_Cmd(0x03);
  1143  000886  0E03               	movlw	3
  1144  000888  ECEE  F004         	call	_Lcd_Cmd
  1145                           
  1146                           ;lcd.h: 85: Lcd_Cmd(0x02);
  1147  00088C  0E02               	movlw	2
  1148  00088E  ECEE  F004         	call	_Lcd_Cmd
  1149                           
  1150                           ;lcd.h: 86: Lcd_Cmd(0x02);
  1151  000892  0E02               	movlw	2
  1152  000894  ECEE  F004         	call	_Lcd_Cmd
  1153                           
  1154                           ;lcd.h: 87: Lcd_Cmd(0x08);
  1155  000898  0E08               	movlw	8
  1156  00089A  ECEE  F004         	call	_Lcd_Cmd
  1157                           
  1158                           ;lcd.h: 88: Lcd_Cmd(0x00);
  1159  00089E  0E00               	movlw	0
  1160  0008A0  ECEE  F004         	call	_Lcd_Cmd
  1161                           
  1162                           ;lcd.h: 89: Lcd_Cmd(0x0C);
  1163  0008A4  0E0C               	movlw	12
  1164  0008A6  ECEE  F004         	call	_Lcd_Cmd
  1165                           
  1166                           ;lcd.h: 90: Lcd_Cmd(0x00);
  1167  0008AA  0E00               	movlw	0
  1168  0008AC  ECEE  F004         	call	_Lcd_Cmd
  1169                           
  1170                           ;lcd.h: 91: Lcd_Cmd(0x06);
  1171  0008B0  0E06               	movlw	6
  1172  0008B2  ECEE  F004         	call	_Lcd_Cmd
  1173  0008B6  0012               	return		;funcret
  1174  0008B8                     __end_of_Lcd_Init:
  1175                           	opt stack 0
  1176                           tblptru	equ	0xFF8
  1177                           tblptrh	equ	0xFF7
  1178                           tblptrl	equ	0xFF6
  1179                           tablat	equ	0xFF5
  1180                           wreg	equ	0xFE8
  1181                           status	equ	0xFD8
  1182                           
  1183 ;; *************** function _Lcd_Clear *****************
  1184 ;; Defined at:
  1185 ;;		line 48 in file "lcd.h"
  1186 ;; Parameters:    Size  Location     Type
  1187 ;;		None
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;		None
  1190 ;; Return value:  Size  Location     Type
  1191 ;;                  1    wreg      void 
  1192 ;; Registers used:
  1193 ;;		wreg, status,2, cstack
  1194 ;; Tracked objects:
  1195 ;;		On entry : 0/0
  1196 ;;		On exit  : 0/0
  1197 ;;		Unchanged: 0/0
  1198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1199 ;;      Params:         0       0       0       0       0       0       0
  1200 ;;      Locals:         0       0       0       0       0       0       0
  1201 ;;      Temps:          0       0       0       0       0       0       0
  1202 ;;      Totals:         0       0       0       0       0       0       0
  1203 ;;Total ram usage:        0 bytes
  1204 ;; Hardware stack levels used:    1
  1205 ;; Hardware stack levels required when called:    2
  1206 ;; This function calls:
  1207 ;;		_Lcd_Cmd
  1208 ;; This function is called by:
  1209 ;;		_main
  1210 ;; This function uses a non-reentrant model
  1211 ;;
  1212                           
  1213                           	psect	text7
  1214  000A02                     __ptext7:
  1215                           	opt stack 0
  1216  000A02                     _Lcd_Clear:
  1217                           	opt stack 28
  1218                           
  1219                           ;lcd.h: 50: Lcd_Cmd(0);
  1220                           
  1221                           ;incstack = 0
  1222  000A02  0E00               	movlw	0
  1223  000A04  ECEE  F004         	call	_Lcd_Cmd
  1224                           
  1225                           ;lcd.h: 51: Lcd_Cmd(1);
  1226  000A08  0E01               	movlw	1
  1227  000A0A  ECEE  F004         	call	_Lcd_Cmd
  1228  000A0E  0012               	return		;funcret
  1229  000A10                     __end_of_Lcd_Clear:
  1230                           	opt stack 0
  1231                           tblptru	equ	0xFF8
  1232                           tblptrh	equ	0xFF7
  1233                           tblptrl	equ	0xFF6
  1234                           tablat	equ	0xFF5
  1235                           wreg	equ	0xFE8
  1236                           status	equ	0xFD8
  1237                           
  1238 ;; *************** function _Lcd_Cmd *****************
  1239 ;; Defined at:
  1240 ;;		line 38 in file "lcd.h"
  1241 ;; Parameters:    Size  Location     Type
  1242 ;;  a               1    wreg     unsigned char 
  1243 ;; Auto vars:     Size  Location     Type
  1244 ;;  a               1    1[COMRAM] unsigned char 
  1245 ;; Return value:  Size  Location     Type
  1246 ;;                  1    wreg      void 
  1247 ;; Registers used:
  1248 ;;		wreg, status,2, cstack
  1249 ;; Tracked objects:
  1250 ;;		On entry : 0/0
  1251 ;;		On exit  : 0/0
  1252 ;;		Unchanged: 0/0
  1253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1254 ;;      Params:         0       0       0       0       0       0       0
  1255 ;;      Locals:         1       0       0       0       0       0       0
  1256 ;;      Temps:          0       0       0       0       0       0       0
  1257 ;;      Totals:         1       0       0       0       0       0       0
  1258 ;;Total ram usage:        1 bytes
  1259 ;; Hardware stack levels used:    1
  1260 ;; Hardware stack levels required when called:    1
  1261 ;; This function calls:
  1262 ;;		_Lcd_Port
  1263 ;; This function is called by:
  1264 ;;		_Lcd_Clear
  1265 ;;		_Lcd_Set_Cursor
  1266 ;;		_Lcd_Init
  1267 ;;		_Lcd_Shift_Right
  1268 ;;		_Lcd_Shift_Left
  1269 ;; This function uses a non-reentrant model
  1270 ;;
  1271                           
  1272                           	psect	text8
  1273  0009DC                     __ptext8:
  1274                           	opt stack 0
  1275  0009DC                     _Lcd_Cmd:
  1276                           	opt stack 28
  1277                           
  1278                           ;incstack = 0
  1279                           ;Lcd_Cmd@a stored from wreg
  1280  0009DC  6E02               	movwf	Lcd_Cmd@a,c
  1281                           
  1282                           ;lcd.h: 40: PORTDbits.RD5 = 0;
  1283  0009DE  9A83               	bcf	3971,5,c	;volatile
  1284                           
  1285                           ;lcd.h: 41: Lcd_Port(a);
  1286  0009E0  5002               	movf	Lcd_Cmd@a,w,c
  1287  0009E2  ECC5  F004         	call	_Lcd_Port
  1288                           
  1289                           ;lcd.h: 42: PORTDbits.RD4 = 1;
  1290  0009E6  8883               	bsf	3971,4,c	;volatile
  1291                           
  1292                           ;lcd.h: 44: _delay((unsigned long)((200)*(16000000/4000000.0)));
  1293  0009E8  0EC8               	movlw	200
  1294  0009EA                     u517:
  1295  0009EA  F000               	nop	
  1296  0009EC  2EE8               	decfsz	wreg,f,c
  1297  0009EE  D7FD               	goto	u517
  1298                           
  1299                           ;lcd.h: 45: PORTDbits.RD4 = 0;
  1300  0009F0  9883               	bcf	3971,4,c	;volatile
  1301  0009F2  0012               	return		;funcret
  1302  0009F4                     __end_of_Lcd_Cmd:
  1303                           	opt stack 0
  1304                           tblptru	equ	0xFF8
  1305                           tblptrh	equ	0xFF7
  1306                           tblptrl	equ	0xFF6
  1307                           tablat	equ	0xFF5
  1308                           wreg	equ	0xFE8
  1309                           status	equ	0xFD8
  1310                           
  1311 ;; *************** function _Lcd_Port *****************
  1312 ;; Defined at:
  1313 ;;		line 16 in file "lcd.h"
  1314 ;; Parameters:    Size  Location     Type
  1315 ;;  a               1    wreg     unsigned char 
  1316 ;; Auto vars:     Size  Location     Type
  1317 ;;  a               1    0[COMRAM] unsigned char 
  1318 ;; Return value:  Size  Location     Type
  1319 ;;                  1    wreg      void 
  1320 ;; Registers used:
  1321 ;;		wreg
  1322 ;; Tracked objects:
  1323 ;;		On entry : 0/0
  1324 ;;		On exit  : 0/0
  1325 ;;		Unchanged: 0/0
  1326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1327 ;;      Params:         0       0       0       0       0       0       0
  1328 ;;      Locals:         1       0       0       0       0       0       0
  1329 ;;      Temps:          0       0       0       0       0       0       0
  1330 ;;      Totals:         1       0       0       0       0       0       0
  1331 ;;Total ram usage:        1 bytes
  1332 ;; Hardware stack levels used:    1
  1333 ;; This function calls:
  1334 ;;		Nothing
  1335 ;; This function is called by:
  1336 ;;		_Lcd_Cmd
  1337 ;;		_Lcd_Init
  1338 ;;		_Lcd_Write_Char
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           	psect	text9
  1343  00098A                     __ptext9:
  1344                           	opt stack 0
  1345  00098A                     _Lcd_Port:
  1346                           	opt stack 28
  1347                           
  1348                           ;incstack = 0
  1349                           ;Lcd_Port@a stored from wreg
  1350  00098A  6E01               	movwf	Lcd_Port@a,c
  1351                           
  1352                           ;lcd.h: 18: if(a & 1)
  1353  00098C  A001               	btfss	Lcd_Port@a,0,c
  1354  00098E  D002               	goto	l31
  1355                           
  1356                           ;lcd.h: 19: PORTDbits.RD0 = 1;
  1357  000990  8083               	bsf	3971,0,c	;volatile
  1358  000992  D001               	goto	l719
  1359  000994                     l31:
  1360                           
  1361                           ;lcd.h: 20: else
  1362                           ;lcd.h: 21: PORTDbits.RD0 = 0;
  1363  000994  9083               	bcf	3971,0,c	;volatile
  1364  000996                     l719:
  1365                           
  1366                           ;lcd.h: 23: if(a & 2)
  1367  000996  A201               	btfss	Lcd_Port@a,1,c
  1368  000998  D002               	goto	l33
  1369                           
  1370                           ;lcd.h: 24: PORTDbits.RD1 = 1;
  1371  00099A  8283               	bsf	3971,1,c	;volatile
  1372  00099C  D001               	goto	l723
  1373  00099E                     l33:
  1374                           
  1375                           ;lcd.h: 25: else
  1376                           ;lcd.h: 26: PORTDbits.RD1 = 0;
  1377  00099E  9283               	bcf	3971,1,c	;volatile
  1378  0009A0                     l723:
  1379                           
  1380                           ;lcd.h: 28: if(a & 4)
  1381  0009A0  A401               	btfss	Lcd_Port@a,2,c
  1382  0009A2  D002               	goto	l35
  1383                           
  1384                           ;lcd.h: 29: PORTDbits.RD2 = 1;
  1385  0009A4  8483               	bsf	3971,2,c	;volatile
  1386  0009A6  D001               	goto	l727
  1387  0009A8                     l35:
  1388                           
  1389                           ;lcd.h: 30: else
  1390                           ;lcd.h: 31: PORTDbits.RD2 = 0;
  1391  0009A8  9483               	bcf	3971,2,c	;volatile
  1392  0009AA                     l727:
  1393                           
  1394                           ;lcd.h: 33: if(a & 8)
  1395  0009AA  A601               	btfss	Lcd_Port@a,3,c
  1396  0009AC  D002               	goto	l37
  1397                           
  1398                           ;lcd.h: 34: PORTDbits.RD3 = 1;
  1399  0009AE  8683               	bsf	3971,3,c	;volatile
  1400  0009B0  0012               	return	
  1401  0009B2                     l37:
  1402                           
  1403                           ;lcd.h: 35: else
  1404                           ;lcd.h: 36: PORTDbits.RD3 = 0;
  1405  0009B2  9683               	bcf	3971,3,c	;volatile
  1406  0009B4  0012               	return	
  1407  0009B6                     __end_of_Lcd_Port:
  1408                           	opt stack 0
  1409                           tblptru	equ	0xFF8
  1410                           tblptrh	equ	0xFF7
  1411                           tblptrl	equ	0xFF6
  1412                           tablat	equ	0xFF5
  1413                           wreg	equ	0xFE8
  1414                           status	equ	0xFD8
  1415                           tblptru	equ	0xFF8
  1416                           tblptrh	equ	0xFF7
  1417                           tblptrl	equ	0xFF6
  1418                           tablat	equ	0xFF5
  1419                           wreg	equ	0xFE8
  1420                           status	equ	0xFD8
  1421                           
  1422                           	psect	rparam
  1423  0000                     tblptru	equ	0xFF8
  1424                           tblptrh	equ	0xFF7
  1425                           tblptrl	equ	0xFF6
  1426                           tablat	equ	0xFF5
  1427                           wreg	equ	0xFE8
  1428                           status	equ	0xFD8


Data Sizes:
    Strings     42
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     18      18
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> STR_3(CODE[16]), STR_2(CODE[14]), STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    1517
                                             10 COMRAM     8     8      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                     _mcu_initialise
                        _read_keypad
 ---------------------------------------------------------------------------------
 (1) _read_keypad                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mcu_initialise                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2     402
                                              4 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     120
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     601
                                              2 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     135
                                              2 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              1     1      0      75
                                              1 COMRAM     1     1      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _mcu_initialise
   _read_keypad

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     12      12       1       18.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Aug 01 14:23:10 2016

                       l31 0994                         l33 099E                         l35 09A8  
                       l37 09B2                         l91 07BC                         l92 07C8  
                       l94 07E4                         l95 07F0                         l96 07FC  
                       l89 07B0                         l98 0818                         l99 0824  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000                __CFG_LVP$ON 000000                        l100 0830  
                      l723 09A0                        l901 083C                        l727 09AA  
                      l719 0996                        l845 07D4                        l873 0808  
                      l993 0932                        l979 08E0                        l989 0912  
                      l999 0640               __CFG_CPB$OFF 000000                        u407 072E  
                      u417 0742               __CFG_CPD$OFF 000000                        u507 087C  
                      u427 0754                        u517 09EA                        u437 0766  
                      u447 0778                        u457 078A                        u377 0652  
                      u467 096E                        u387 0690                        u477 0980  
                      u397 06E2                        u487 084C                        u497 0864  
             __CFG_BORV$18 000000                        wreg 000FE8                       l1011 067C  
                     l1031 06DC                       l1051 0728                       l1035 06F0  
                     l1027 06CC                       l1037 06F8                       l1047 0718  
                     l1055 073C                       STR_1 061F                       STR_2 0611  
                     STR_3 0601          ?_Lcd_Write_String 0005                       _main 062C  
                     start 0000         ??_Lcd_Write_String 0007              __CFG_IESO$OFF 000000  
          __end_of_Lcd_Cmd 09F4              __CFG_MCLRE$ON 000000               ___param_bank 000010  
                    ?_main 0001              __CFG_WDTEN$ON 000000                      _PORTA 000F80  
                    _PORTB 000F81                      _PORTC 000F82                      _PORTD 000F83  
  __size_of_Lcd_Set_Cursor 0050                      _TRISA 000F92                      _TRISB 000F93  
                    _TRISC 000F94                      _TRISD 000F95              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
             ?_read_keypad 0001             __CFG_EBTRB$OFF 000000                      main@i 000C  
                    main@n 0011                      main@x 0010                      tablat 000FF5  
                    status 000FD8             __CFG_HFOFST$ON 000000           __end_of_Lcd_Init 08B8  
         __end_of_Lcd_Port 09B6            __initialization 09F4               __end_of_main 0798  
                   ??_main 000B         __size_of_Lcd_Clear 000E              __activetblptr 000001  
                   _OSCCON 000FD3                  ??_Lcd_Cmd 0002    __size_of_Lcd_Write_Char 0038  
           __CFG_XINST$OFF 000000             __CFG_STVREN$ON 000000               __mediumconst 0000  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
          Lcd_Set_Cursor@a 0004            Lcd_Set_Cursor@b 0003            Lcd_Set_Cursor@y 0006  
          Lcd_Set_Cursor@z 0005                 __accesstop 0060    __end_of__initialization 09F4  
          __CFG_PBADEN$OFF 000000          __end_of_Lcd_Clear 0A10              ___rparam_used 000001  
           __pcstackCOMRAM 0001             _Lcd_Set_Cursor 08B8                  ?_Lcd_Init 0001  
                ?_Lcd_Port 0001       __size_of_read_keypad 00A8  __size_of_Lcd_Write_String 004A  
   __end_of_Lcd_Set_Cursor 0908                 ??_Lcd_Init 0003                 ??_Lcd_Port 0001  
  __size_of_mcu_initialise 0026             _Lcd_Write_Char 0952                    _Lcd_Cmd 09DC  
                  __Hparam 0000                    __Lparam 0000               __psmallconst 0600  
                  __pcinit 09F4                    __ramtop 0600            ?_Lcd_Set_Cursor 0003  
                  __ptext0 062C                    __ptext1 0798                    __ptext2 09B6  
                  __ptext3 0908                    __ptext4 0952                    __ptext5 08B8  
                  __ptext6 0840                    __ptext7 0A02                    __ptext8 09DC  
                  __ptext9 098A     __end_of_Lcd_Write_Char 098A       end_of_initialization 09F4  
                Lcd_Port@a 0001                  _PORTBbits 000F81                  _PORTDbits 000F83  
          ?_Lcd_Write_Char 0001          Lcd_Write_String@a 0005          Lcd_Write_String@i 0009  
                _Lcd_Clear 0A02           _Lcd_Write_String 0908        start_initialization 09F4  
           _mcu_initialise 09B6          __size_of_Lcd_Init 0078          __size_of_Lcd_Port 002C  
               ?_Lcd_Clear 0001           __CFG_LPT1OSC$OFF 000000            Lcd_Write_Char@a 0004  
          Lcd_Write_Char@y 0003     __end_of_mcu_initialise 09DC              ??_read_keypad 0001  
                 ?_Lcd_Cmd 0001          __CFG_CCP2MX$PORTC 000000           ??_Lcd_Set_Cursor 0004  
              __smallconst 0600            ?_mcu_initialise 0001        __end_of_read_keypad 0840  
                 Lcd_Cmd@a 0002                ??_Lcd_Clear 0003           __CFG_WDTPS$32768 000000  
                main@i_233 000E           ??_Lcd_Write_Char 0002                   _Lcd_Init 0840  
                 _Lcd_Port 098A   __end_of_Lcd_Write_String 0952           __size_of_Lcd_Cmd 0018  
                 __Hrparam 0000                   __Lrparam 0000               __Lsmallconst 0600  
       __CFG_BOREN$SBORDIS 000000                _read_keypad 0798              __size_of_main 016C  
       Lcd_Write_Char@temp 0002         Lcd_Set_Cursor@temp 0007           ??_mcu_initialise 0001  
        __CFG_FOSC$INTIO67 000000  
